
h7_bootloader_bootloader_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007800  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08007aa0  08007aa0  00008aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bd4  08007bd4  00009144  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007bd4  08007bd4  00008bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bdc  08007bdc  00009144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bdc  08007bdc  00008bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007be0  08007be0  00008be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000144  24000000  08007be4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000111c  24000144  08007d28  00009144  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001260  08007d28  00009260  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009144  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022578  00000000  00000000  00009172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046ff  00000000  00000000  0002b6ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000d791  00000000  00000000  0002fde9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  0003d580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f94  00000000  00000000  0003e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00043a7d  00000000  00000000  0003f944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022d46  00000000  00000000  000833c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019e3fc  00000000  00000000  000a6107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00244503  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000398c  00000000  00000000  00244548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00247ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000144 	.word	0x24000144
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007a88 	.word	0x08007a88

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000148 	.word	0x24000148
 80002dc:	08007a88 	.word	0x08007a88

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006ac:	4b37      	ldr	r3, [pc, #220]	@ (800078c <SystemInit+0xe0>)
 80006ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80006b2:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80006b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006ba:	691a      	ldr	r2, [r3, #16]
 80006bc:	f042 0210 	orr.w	r2, r2, #16
 80006c0:	611a      	str	r2, [r3, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006c2:	4b33      	ldr	r3, [pc, #204]	@ (8000790 <SystemInit+0xe4>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	2b06      	cmp	r3, #6
 80006cc:	d806      	bhi.n	80006dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ce:	4a30      	ldr	r2, [pc, #192]	@ (8000790 <SystemInit+0xe4>)
 80006d0:	6813      	ldr	r3, [r2, #0]
 80006d2:	f023 030f 	bic.w	r3, r3, #15
 80006d6:	f043 0307 	orr.w	r3, r3, #7
 80006da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000794 <SystemInit+0xe8>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	f042 0201 	orr.w	r2, r2, #1
 80006e4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ea:	6819      	ldr	r1, [r3, #0]
 80006ec:	4a2a      	ldr	r2, [pc, #168]	@ (8000798 <SystemInit+0xec>)
 80006ee:	400a      	ands	r2, r1
 80006f0:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006f2:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <SystemInit+0xe4>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f013 0f08 	tst.w	r3, #8
 80006fa:	d006      	beq.n	800070a <SystemInit+0x5e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fc:	4a24      	ldr	r2, [pc, #144]	@ (8000790 <SystemInit+0xe4>)
 80006fe:	6813      	ldr	r3, [r2, #0]
 8000700:	f023 030f 	bic.w	r3, r3, #15
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <SystemInit+0xe8>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4921      	ldr	r1, [pc, #132]	@ (800079c <SystemInit+0xf0>)
 8000716:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000718:	4921      	ldr	r1, [pc, #132]	@ (80007a0 <SystemInit+0xf4>)
 800071a:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4921      	ldr	r1, [pc, #132]	@ (80007a4 <SystemInit+0xf8>)
 800071e:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000720:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000722:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000724:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000726:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000728:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800072a:	6819      	ldr	r1, [r3, #0]
 800072c:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8000730:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000732:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000734:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000738:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800073c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000740:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000744:	4b18      	ldr	r3, [pc, #96]	@ (80007a8 <SystemInit+0xfc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f36f 030f 	bfc	r3, #0, #16
 800074c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000750:	d203      	bcs.n	800075a <SystemInit+0xae>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000752:	4b16      	ldr	r3, [pc, #88]	@ (80007ac <SystemInit+0x100>)
 8000754:	2201      	movs	r2, #1
 8000756:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <SystemInit+0xe8>)
 800075c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000760:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8000764:	d110      	bne.n	8000788 <SystemInit+0xdc>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <SystemInit+0xe8>)
 8000768:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800076c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000770:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000774:	4a0e      	ldr	r2, [pc, #56]	@ (80007b0 <SystemInit+0x104>)
 8000776:	f243 01d2 	movw	r1, #12498	@ 0x30d2
 800077a:	6011      	str	r1, [r2, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800077c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000780:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000784:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	51008000 	.word	0x51008000
 80007b0:	52004000 	.word	0x52004000

080007b4 <ExitRun0Mode>:
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80007b4:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <ExitRun0Mode+0x18>)
 80007b6:	68d3      	ldr	r3, [r2, #12]
 80007b8:	f023 0302 	bic.w	r3, r3, #2
 80007bc:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80007be:	4b03      	ldr	r3, [pc, #12]	@ (80007cc <ExitRun0Mode+0x18>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80007c6:	d0fa      	beq.n	80007be <ExitRun0Mode+0xa>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	58024800 	.word	0x58024800

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b530      	push	{r4, r5, lr}
 80007d2:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	2400      	movs	r4, #0
 80007d6:	9405      	str	r4, [sp, #20]
 80007d8:	9406      	str	r4, [sp, #24]
 80007da:	9407      	str	r4, [sp, #28]
 80007dc:	9408      	str	r4, [sp, #32]
 80007de:	9409      	str	r4, [sp, #36]	@ 0x24
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e0:	4b2e      	ldr	r3, [pc, #184]	@ (800089c <MX_GPIO_Init+0xcc>)
 80007e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80007e6:	f042 0202 	orr.w	r2, r2, #2
 80007ea:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80007ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80007f2:	f002 0202 	and.w	r2, r2, #2
 80007f6:	9200      	str	r2, [sp, #0]
 80007f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80007fe:	f042 0201 	orr.w	r2, r2, #1
 8000802:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000806:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800080a:	f002 0201 	and.w	r2, r2, #1
 800080e:	9201      	str	r2, [sp, #4]
 8000810:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000816:	f042 0204 	orr.w	r2, r2, #4
 800081a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800081e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000822:	f002 0204 	and.w	r2, r2, #4
 8000826:	9202      	str	r2, [sp, #8]
 8000828:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800082a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800082e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000832:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000836:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800083a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800083e:	9203      	str	r2, [sp, #12]
 8000840:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000846:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800084a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000856:	9304      	str	r3, [sp, #16]
 8000858:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800085a:	4d11      	ldr	r5, [pc, #68]	@ (80008a0 <MX_GPIO_Init+0xd0>)
 800085c:	4622      	mov	r2, r4
 800085e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000862:	4628      	mov	r0, r5
 8000864:	f000 fd1a 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000868:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800086c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000876:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000878:	a905      	add	r1, sp, #20
 800087a:	4628      	mov	r0, r5
 800087c:	f000 fbfe 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000880:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000884:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	a905      	add	r1, sp, #20
 8000890:	4628      	mov	r0, r5
 8000892:	f000 fbf3 	bl	800107c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000896:	b00b      	add	sp, #44	@ 0x2c
 8000898:	bd30      	pop	{r4, r5, pc}
 800089a:	bf00      	nop
 800089c:	58024400 	.word	0x58024400
 80008a0:	58020000 	.word	0x58020000

080008a4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <Error_Handler+0x2>

080008a8 <MX_USART1_UART_Init>:
{
 80008a8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80008aa:	4815      	ldr	r0, [pc, #84]	@ (8000900 <MX_USART1_UART_Init+0x58>)
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <MX_USART1_UART_Init+0x5c>)
 80008ae:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80008b0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80008b4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	2300      	movs	r3, #0
 80008b8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008ba:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008bc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008be:	220c      	movs	r2, #12
 80008c0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c8:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ca:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008cc:	f003 feb7 	bl	800463e <HAL_UART_Init>
 80008d0:	b970      	cbnz	r0, 80008f0 <MX_USART1_UART_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	480a      	ldr	r0, [pc, #40]	@ (8000900 <MX_USART1_UART_Init+0x58>)
 80008d6:	f003 ff2a 	bl	800472e <HAL_UARTEx_SetTxFifoThreshold>
 80008da:	b958      	cbnz	r0, 80008f4 <MX_USART1_UART_Init+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	4808      	ldr	r0, [pc, #32]	@ (8000900 <MX_USART1_UART_Init+0x58>)
 80008e0:	f003 ff4a 	bl	8004778 <HAL_UARTEx_SetRxFifoThreshold>
 80008e4:	b940      	cbnz	r0, 80008f8 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008e6:	4806      	ldr	r0, [pc, #24]	@ (8000900 <MX_USART1_UART_Init+0x58>)
 80008e8:	f003 ff02 	bl	80046f0 <HAL_UARTEx_DisableFifoMode>
 80008ec:	b930      	cbnz	r0, 80008fc <MX_USART1_UART_Init+0x54>
}
 80008ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80008f0:	f7ff ffd8 	bl	80008a4 <Error_Handler>
    Error_Handler();
 80008f4:	f7ff ffd6 	bl	80008a4 <Error_Handler>
    Error_Handler();
 80008f8:	f7ff ffd4 	bl	80008a4 <Error_Handler>
    Error_Handler();
 80008fc:	f7ff ffd2 	bl	80008a4 <Error_Handler>
 8000900:	2400016c 	.word	0x2400016c
 8000904:	40011000 	.word	0x40011000

08000908 <MX_CRC_Init>:
{
 8000908:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800090a:	4808      	ldr	r0, [pc, #32]	@ (800092c <MX_CRC_Init+0x24>)
 800090c:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_CRC_Init+0x28>)
 800090e:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000914:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000916:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000918:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800091a:	2303      	movs	r3, #3
 800091c:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800091e:	f000 fb31 	bl	8000f84 <HAL_CRC_Init>
 8000922:	b900      	cbnz	r0, 8000926 <MX_CRC_Init+0x1e>
}
 8000924:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000926:	f7ff ffbd 	bl	80008a4 <Error_Handler>
 800092a:	bf00      	nop
 800092c:	24000200 	.word	0x24000200
 8000930:	58024c00 	.word	0x58024c00

08000934 <SystemClock_Config>:
{
 8000934:	b500      	push	{lr}
 8000936:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000938:	224c      	movs	r2, #76	@ 0x4c
 800093a:	2100      	movs	r1, #0
 800093c:	a809      	add	r0, sp, #36	@ 0x24
 800093e:	f006 fbcf 	bl	80070e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000942:	2220      	movs	r2, #32
 8000944:	2100      	movs	r1, #0
 8000946:	a801      	add	r0, sp, #4
 8000948:	f006 fbca 	bl	80070e0 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800094c:	2004      	movs	r0, #4
 800094e:	f001 fb19 	bl	8001f84 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000952:	2300      	movs	r3, #0
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	4b28      	ldr	r3, [pc, #160]	@ (80009f8 <SystemClock_Config+0xc4>)
 8000958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800095a:	f022 0201 	bic.w	r2, r2, #1
 800095e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	4b24      	ldr	r3, [pc, #144]	@ (80009fc <SystemClock_Config+0xc8>)
 800096a:	699a      	ldr	r2, [r3, #24]
 800096c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000970:	619a      	str	r2, [r3, #24]
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800097c:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <SystemClock_Config+0xc8>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8000984:	d0fa      	beq.n	800097c <SystemClock_Config+0x48>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000986:	230b      	movs	r3, #11
 8000988:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800098e:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000990:	2301      	movs	r3, #1
 8000992:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000994:	2240      	movs	r2, #64	@ 0x40
 8000996:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000998:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80009a0:	2205      	movs	r2, #5
 80009a2:	9214      	str	r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 80009a4:	2130      	movs	r1, #48	@ 0x30
 80009a6:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009a8:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80009aa:	9217      	str	r2, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ac:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80009ae:	2308      	movs	r3, #8
 80009b0:	9319      	str	r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	931a      	str	r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009b6:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b8:	a809      	add	r0, sp, #36	@ 0x24
 80009ba:	f001 fb35 	bl	8002028 <HAL_RCC_OscConfig>
 80009be:	b9b0      	cbnz	r0, 80009ee <SystemClock_Config+0xba>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	233f      	movs	r3, #63	@ 0x3f
 80009c2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009c4:	2100      	movs	r1, #0
 80009c6:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009ca:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009cc:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009ce:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009d0:	9107      	str	r1, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009d2:	9108      	str	r1, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d4:	a801      	add	r0, sp, #4
 80009d6:	f001 ffcd 	bl	8002974 <HAL_RCC_ClockConfig>
 80009da:	b950      	cbnz	r0, 80009f2 <SystemClock_Config+0xbe>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80009dc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009e0:	2100      	movs	r1, #0
 80009e2:	4608      	mov	r0, r1
 80009e4:	f001 fe78 	bl	80026d8 <HAL_RCC_MCOConfig>
}
 80009e8:	b01d      	add	sp, #116	@ 0x74
 80009ea:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80009ee:	f7ff ff59 	bl	80008a4 <Error_Handler>
    Error_Handler();
 80009f2:	f7ff ff57 	bl	80008a4 <Error_Handler>
 80009f6:	bf00      	nop
 80009f8:	58000400 	.word	0x58000400
 80009fc:	58024800 	.word	0x58024800

08000a00 <PeriphCommonClock_Config>:
{
 8000a00:	b500      	push	{lr}
 8000a02:	b0b3      	sub	sp, #204	@ 0xcc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a04:	22c8      	movs	r2, #200	@ 0xc8
 8000a06:	2100      	movs	r1, #0
 8000a08:	4668      	mov	r0, sp
 8000a0a:	f006 fb69 	bl	80070e0 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a0e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a12:	2300      	movs	r3, #0
 8000a14:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a1c:	220c      	movs	r2, #12
 8000a1e:	9203      	str	r2, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a20:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a22:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a24:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a26:	23c0      	movs	r3, #192	@ 0xc0
 8000a28:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a2a:	2320      	movs	r3, #32
 8000a2c:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a2e:	4668      	mov	r0, sp
 8000a30:	f002 fa38 	bl	8002ea4 <HAL_RCCEx_PeriphCLKConfig>
 8000a34:	b910      	cbnz	r0, 8000a3c <PeriphCommonClock_Config+0x3c>
}
 8000a36:	b033      	add	sp, #204	@ 0xcc
 8000a38:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000a3c:	f7ff ff32 	bl	80008a4 <Error_Handler>

08000a40 <main>:
{
 8000a40:	b500      	push	{lr}
 8000a42:	b083      	sub	sp, #12
	doJump = 1;
 8000a44:	4b38      	ldr	r3, [pc, #224]	@ (8000b28 <main+0xe8>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
  timeout = 0xFFFF;
 8000a4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000a4e:	e000      	b.n	8000a52 <main+0x12>
 8000a50:	4613      	mov	r3, r2
 8000a52:	4a36      	ldr	r2, [pc, #216]	@ (8000b2c <main+0xec>)
 8000a54:	6812      	ldr	r2, [r2, #0]
 8000a56:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8000a5a:	d003      	beq.n	8000a64 <main+0x24>
 8000a5c:	1e5a      	subs	r2, r3, #1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	dcf6      	bgt.n	8000a50 <main+0x10>
 8000a62:	4613      	mov	r3, r2
  if ( timeout < 0 )
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db1c      	blt.n	8000aa2 <main+0x62>
  HAL_Init();
 8000a68:	f000 f9b8 	bl	8000ddc <HAL_Init>
  SystemClock_Config();
 8000a6c:	f7ff ff62 	bl	8000934 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000a70:	f7ff ffc6 	bl	8000a00 <PeriphCommonClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a74:	4b2d      	ldr	r3, [pc, #180]	@ (8000b2c <main+0xec>)
 8000a76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a7a:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8000a7e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	9b01      	ldr	r3, [sp, #4]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 fc0a 	bl	80012a8 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a94:	2100      	movs	r1, #0
 8000a96:	4608      	mov	r0, r1
 8000a98:	f000 fc16 	bl	80012c8 <HAL_HSEM_Release>
timeout = 0xFFFF;
 8000a9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000aa0:	e002      	b.n	8000aa8 <main+0x68>
  Error_Handler();
 8000aa2:	f7ff feff 	bl	80008a4 <Error_Handler>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	4a20      	ldr	r2, [pc, #128]	@ (8000b2c <main+0xec>)
 8000aaa:	6812      	ldr	r2, [r2, #0]
 8000aac:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8000ab0:	d103      	bne.n	8000aba <main+0x7a>
 8000ab2:	1e5a      	subs	r2, r3, #1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	dcf6      	bgt.n	8000aa6 <main+0x66>
 8000ab8:	4613      	mov	r3, r2
if ( timeout < 0 )
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db0a      	blt.n	8000ad4 <main+0x94>
  MX_GPIO_Init();
 8000abe:	f7ff fe87 	bl	80007d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ac2:	f7ff fef1 	bl	80008a8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000ac6:	f005 fe05 	bl	80066d4 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000aca:	f7ff ff1d 	bl	8000908 <MX_CRC_Init>
  MX_MBEDTLS_Init();
 8000ace:	f004 fbc5 	bl	800525c <MX_MBEDTLS_Init>
 8000ad2:	e005      	b.n	8000ae0 <main+0xa0>
Error_Handler();
 8000ad4:	f7ff fee6 	bl	80008a4 <Error_Handler>
		 	    *dfu_boot_flag=0;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <main+0xf0>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
	  if(doJump){
 8000ae0:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <main+0xe8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0fb      	beq.n	8000ae0 <main+0xa0>
		  doJump = 0;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <main+0xe8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
		  printf("Jumping to Firmware\n\r");
 8000aee:	4811      	ldr	r0, [pc, #68]	@ (8000b34 <main+0xf4>)
 8000af0:	f006 fa0c 	bl	8006f0c <iprintf>
		 	  dfu_boot_flag = (uint32_t*) (&_bflag); // set in linker script
 8000af4:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <main+0xf8>)
 8000af6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b30 <main+0xf0>)
 8000af8:	6013      	str	r3, [r2, #0]
		 	  if (*dfu_boot_flag != DFU_BOOT_FLAG) {
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <main+0xfc>)
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d0ea      	beq.n	8000ad8 <main+0x98>
		 	      if (((*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD) & 0x2FF80000) == 0x24000000) {
 8000b02:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <main+0x100>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <main+0x104>)
 8000b08:	4013      	ands	r3, r2
 8000b0a:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 8000b0e:	d1e3      	bne.n	8000ad8 <main+0x98>
		 	          JumpAddress = *(__IO uint32_t*) (USBD_DFU_APP_DEFAULT_ADD + 4);
 8000b10:	4a0b      	ldr	r2, [pc, #44]	@ (8000b40 <main+0x100>)
 8000b12:	6853      	ldr	r3, [r2, #4]
 8000b14:	490c      	ldr	r1, [pc, #48]	@ (8000b48 <main+0x108>)
 8000b16:	600b      	str	r3, [r1, #0]
		 	          JumpToApplication = (pFunction) JumpAddress;
 8000b18:	490c      	ldr	r1, [pc, #48]	@ (8000b4c <main+0x10c>)
 8000b1a:	600b      	str	r3, [r1, #0]
		 	          __set_MSP(*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD);
 8000b1c:	6812      	ldr	r2, [r2, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000b1e:	f382 8808 	msr	MSP, r2
		 	          JumpToApplication();
 8000b22:	4798      	blx	r3
 8000b24:	e7d8      	b.n	8000ad8 <main+0x98>
 8000b26:	bf00      	nop
 8000b28:	24000008 	.word	0x24000008
 8000b2c:	58024400 	.word	0x58024400
 8000b30:	24000168 	.word	0x24000168
 8000b34:	08007ab0 	.word	0x08007ab0
 8000b38:	2407fffc 	.word	0x2407fffc
 8000b3c:	deadbeef 	.word	0xdeadbeef
 8000b40:	08040000 	.word	0x08040000
 8000b44:	2ff80000 	.word	0x2ff80000
 8000b48:	24000160 	.word	0x24000160
 8000b4c:	24000164 	.word	0x24000164

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <HAL_MspInit+0x20>)
 8000b54:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000b58:	f042 0202 	orr.w	r2, r2, #2
 8000b5c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000b60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6c:	b002      	add	sp, #8
 8000b6e:	4770      	bx	lr
 8000b70:	58024400 	.word	0x58024400

08000b74 <HAL_CRC_MspInit>:
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000b74:	6802      	ldr	r2, [r0, #0]
 8000b76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <HAL_CRC_MspInit+0x2c>)
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d000      	beq.n	8000b7e <HAL_CRC_MspInit+0xa>
 8000b7c:	4770      	bx	lr
{
 8000b7e:	b082      	sub	sp, #8
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b80:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000b84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b88:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000b8c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b98:	9301      	str	r3, [sp, #4]
 8000b9a:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000b9c:	b002      	add	sp, #8
 8000b9e:	4770      	bx	lr
 8000ba0:	58024c00 	.word	0x58024c00

08000ba4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b510      	push	{r4, lr}
 8000ba6:	b0ba      	sub	sp, #232	@ 0xe8
 8000ba8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	2100      	movs	r1, #0
 8000bac:	9135      	str	r1, [sp, #212]	@ 0xd4
 8000bae:	9136      	str	r1, [sp, #216]	@ 0xd8
 8000bb0:	9137      	str	r1, [sp, #220]	@ 0xdc
 8000bb2:	9138      	str	r1, [sp, #224]	@ 0xe0
 8000bb4:	9139      	str	r1, [sp, #228]	@ 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb6:	22c8      	movs	r2, #200	@ 0xc8
 8000bb8:	a802      	add	r0, sp, #8
 8000bba:	f006 fa91 	bl	80070e0 <memset>
  if(huart->Instance==USART1)
 8000bbe:	6822      	ldr	r2, [r4, #0]
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <HAL_UART_MspInit+0x8c>)
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d001      	beq.n	8000bca <HAL_UART_MspInit+0x26>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000bc6:	b03a      	add	sp, #232	@ 0xe8
 8000bc8:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd2:	a802      	add	r0, sp, #8
 8000bd4:	f002 f966 	bl	8002ea4 <HAL_RCCEx_PeriphCLKConfig>
 8000bd8:	bb38      	cbnz	r0, 8000c2a <HAL_UART_MspInit+0x86>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <HAL_UART_MspInit+0x90>)
 8000bdc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000be0:	f042 0210 	orr.w	r2, r2, #16
 8000be4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8000be8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000bec:	f002 0210 	and.w	r2, r2, #16
 8000bf0:	9200      	str	r2, [sp, #0]
 8000bf2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000bf8:	f042 0201 	orr.w	r2, r2, #1
 8000bfc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	9301      	str	r3, [sp, #4]
 8000c0a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000c0c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c10:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	9337      	str	r3, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	9338      	str	r3, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c1c:	2307      	movs	r3, #7
 8000c1e:	9339      	str	r3, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	a935      	add	r1, sp, #212	@ 0xd4
 8000c22:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <HAL_UART_MspInit+0x94>)
 8000c24:	f000 fa2a 	bl	800107c <HAL_GPIO_Init>
}
 8000c28:	e7cd      	b.n	8000bc6 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000c2a:	f7ff fe3b 	bl	80008a4 <Error_Handler>
 8000c2e:	e7d4      	b.n	8000bda <HAL_UART_MspInit+0x36>
 8000c30:	40011000 	.word	0x40011000
 8000c34:	58024400 	.word	0x58024400
 8000c38:	58020000 	.word	0x58020000

08000c3c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler>

08000c3e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler>

08000c40 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <MemManage_Handler>

08000c42 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler>

08000c44 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler>

08000c46 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c46:	4770      	bx	lr

08000c48 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	4770      	bx	lr

08000c4a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4e:	f000 f8f3 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c52:	bd08      	pop	{r3, pc}

08000c54 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000c54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000c56:	4802      	ldr	r0, [pc, #8]	@ (8000c60 <OTG_HS_IRQHandler+0xc>)
 8000c58:	f000 fe54 	bl	8001904 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000c5c:	bd08      	pop	{r3, pc}
 8000c5e:	bf00      	nop
 8000c60:	24000c30 	.word	0x24000c30

08000c64 <ITM_SendChar>:
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )
void ITM_SendChar(uint8_t ch)
{
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000c64:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8000c68:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	@ 0xdfc
 8000c6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c70:	f8c2 3dfc 	str.w	r3, [r2, #3580]	@ 0xdfc
	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000c74:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000c78:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000c84:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f013 0f01 	tst.w	r3, #1
 8000c8e:	d0f9      	beq.n	8000c84 <ITM_SendChar+0x20>
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000c90:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c94:	6018      	str	r0, [r3, #0]
}
 8000c96:	4770      	bx	lr

08000c98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c98:	b570      	push	{r4, r5, r6, lr}
 8000c9a:	460c      	mov	r4, r1
 8000c9c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	2500      	movs	r5, #0
 8000ca0:	e006      	b.n	8000cb0 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000ca2:	f3af 8000 	nop.w
 8000ca6:	4621      	mov	r1, r4
 8000ca8:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cac:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000cae:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	42b5      	cmp	r5, r6
 8000cb2:	dbf6      	blt.n	8000ca2 <_read+0xa>
  }

  return len;
}
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	bd70      	pop	{r4, r5, r6, pc}

08000cb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cb8:	b570      	push	{r4, r5, r6, lr}
 8000cba:	460c      	mov	r4, r1
 8000cbc:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	2500      	movs	r5, #0
 8000cc0:	e004      	b.n	8000ccc <_write+0x14>
  {
   // __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000cc2:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000cc6:	f7ff ffcd 	bl	8000c64 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	3501      	adds	r5, #1
 8000ccc:	42b5      	cmp	r5, r6
 8000cce:	dbf8      	blt.n	8000cc2 <_write+0xa>
  }
  return len;
}
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	bd70      	pop	{r4, r5, r6, pc}

08000cd4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	4770      	bx	lr

08000cda <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000cda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cde:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	4770      	bx	lr

08000ce4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	4770      	bx	lr

08000ce8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000ce8:	2000      	movs	r0, #0
 8000cea:	4770      	bx	lr

08000cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cec:	b510      	push	{r4, lr}
 8000cee:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8000d24 <_sbrk+0x38>)
 8000cf2:	490d      	ldr	r1, [pc, #52]	@ (8000d28 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	480d      	ldr	r0, [pc, #52]	@ (8000d2c <_sbrk+0x40>)
 8000cf6:	6800      	ldr	r0, [r0, #0]
 8000cf8:	b140      	cbz	r0, 8000d0c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	480c      	ldr	r0, [pc, #48]	@ (8000d2c <_sbrk+0x40>)
 8000cfc:	6800      	ldr	r0, [r0, #0]
 8000cfe:	4403      	add	r3, r0
 8000d00:	1a52      	subs	r2, r2, r1
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d806      	bhi.n	8000d14 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000d06:	4a09      	ldr	r2, [pc, #36]	@ (8000d2c <_sbrk+0x40>)
 8000d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000d0a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000d0c:	4807      	ldr	r0, [pc, #28]	@ (8000d2c <_sbrk+0x40>)
 8000d0e:	4c08      	ldr	r4, [pc, #32]	@ (8000d30 <_sbrk+0x44>)
 8000d10:	6004      	str	r4, [r0, #0]
 8000d12:	e7f2      	b.n	8000cfa <_sbrk+0xe>
    errno = ENOMEM;
 8000d14:	f006 fa42 	bl	800719c <__errno>
 8000d18:	230c      	movs	r3, #12
 8000d1a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	e7f3      	b.n	8000d0a <_sbrk+0x1e>
 8000d22:	bf00      	nop
 8000d24:	2407fffc 	.word	0x2407fffc
 8000d28:	00000400 	.word	0x00000400
 8000d2c:	24000224 	.word	0x24000224
 8000d30:	24001260 	.word	0x24001260

08000d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d34:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000d70 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000d38:	f7ff fd3c 	bl	80007b4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d3c:	f7ff fcb6 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	@ (8000d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	@ (8000d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d66:	f006 fa1f 	bl	80071a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fe69 	bl	8000a40 <main>
  bx  lr
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	2407fffc 	.word	0x2407fffc
  ldr r0, =_sdata
 8000d74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d78:	24000144 	.word	0x24000144
  ldr r2, =_sidata
 8000d7c:	08007be4 	.word	0x08007be4
  ldr r2, =_sbss
 8000d80:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 8000d84:	24001260 	.word	0x24001260

08000d88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC3_IRQHandler>
	...

08000d8c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d8c:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <HAL_InitTick+0x44>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b90b      	cbnz	r3, 8000d96 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8000d92:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000d94:	4770      	bx	lr
{
 8000d96:	b510      	push	{r4, lr}
 8000d98:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000da2:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd4 <HAL_InitTick+0x48>)
 8000da4:	6810      	ldr	r0, [r2, #0]
 8000da6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000daa:	f000 f8d7 	bl	8000f5c <HAL_SYSTICK_Config>
 8000dae:	b968      	cbnz	r0, 8000dcc <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db0:	2c0f      	cmp	r4, #15
 8000db2:	d901      	bls.n	8000db8 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000db4:	2001      	movs	r0, #1
 8000db6:	e00a      	b.n	8000dce <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db8:	2200      	movs	r2, #0
 8000dba:	4621      	mov	r1, r4
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f000 f8b8 	bl	8000f34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <HAL_InitTick+0x4c>)
 8000dc6:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000dc8:	2000      	movs	r0, #0
 8000dca:	e000      	b.n	8000dce <HAL_InitTick+0x42>
      return HAL_ERROR;
 8000dcc:	2001      	movs	r0, #1
}
 8000dce:	bd10      	pop	{r4, pc}
 8000dd0:	2400000c 	.word	0x2400000c
 8000dd4:	24000004 	.word	0x24000004
 8000dd8:	24000010 	.word	0x24000010

08000ddc <HAL_Init>:
{
 8000ddc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dde:	2003      	movs	r0, #3
 8000de0:	f000 f896 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000de4:	f001 fcca 	bl	800277c <HAL_RCC_GetSysClockFreq>
 8000de8:	490f      	ldr	r1, [pc, #60]	@ (8000e28 <HAL_Init+0x4c>)
 8000dea:	698b      	ldr	r3, [r1, #24]
 8000dec:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000df0:	4a0e      	ldr	r2, [pc, #56]	@ (8000e2c <HAL_Init+0x50>)
 8000df2:	5cd3      	ldrb	r3, [r2, r3]
 8000df4:	f003 031f 	and.w	r3, r3, #31
 8000df8:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000dfa:	698b      	ldr	r3, [r1, #24]
 8000dfc:	f003 030f 	and.w	r3, r3, #15
 8000e00:	5cd3      	ldrb	r3, [r2, r3]
 8000e02:	f003 031f 	and.w	r3, r3, #31
 8000e06:	fa20 f303 	lsr.w	r3, r0, r3
 8000e0a:	4a09      	ldr	r2, [pc, #36]	@ (8000e30 <HAL_Init+0x54>)
 8000e0c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <HAL_Init+0x58>)
 8000e10:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e12:	2000      	movs	r0, #0
 8000e14:	f7ff ffba 	bl	8000d8c <HAL_InitTick>
 8000e18:	b110      	cbz	r0, 8000e20 <HAL_Init+0x44>
    return HAL_ERROR;
 8000e1a:	2401      	movs	r4, #1
}
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	bd10      	pop	{r4, pc}
 8000e20:	4604      	mov	r4, r0
  HAL_MspInit();
 8000e22:	f7ff fe95 	bl	8000b50 <HAL_MspInit>
  return HAL_OK;
 8000e26:	e7f9      	b.n	8000e1c <HAL_Init+0x40>
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	08007aa0 	.word	0x08007aa0
 8000e30:	24000000 	.word	0x24000000
 8000e34:	24000004 	.word	0x24000004

08000e38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000e38:	4b03      	ldr	r3, [pc, #12]	@ (8000e48 <HAL_IncTick+0x10>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4a03      	ldr	r2, [pc, #12]	@ (8000e4c <HAL_IncTick+0x14>)
 8000e3e:	6811      	ldr	r1, [r2, #0]
 8000e40:	440b      	add	r3, r1
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	2400000c 	.word	0x2400000c
 8000e4c:	24000228 	.word	0x24000228

08000e50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e50:	4b01      	ldr	r3, [pc, #4]	@ (8000e58 <HAL_GetTick+0x8>)
 8000e52:	6818      	ldr	r0, [r3, #0]
}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	24000228 	.word	0x24000228

08000e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e5c:	b538      	push	{r3, r4, r5, lr}
 8000e5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff fff6 	bl	8000e50 <HAL_GetTick>
 8000e64:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e66:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000e6a:	d002      	beq.n	8000e72 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6c:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <HAL_Delay+0x24>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e72:	f7ff ffed 	bl	8000e50 <HAL_GetTick>
 8000e76:	1b40      	subs	r0, r0, r5
 8000e78:	42a0      	cmp	r0, r4
 8000e7a:	d3fa      	bcc.n	8000e72 <HAL_Delay+0x16>
  {
  }
}
 8000e7c:	bd38      	pop	{r3, r4, r5, pc}
 8000e7e:	bf00      	nop
 8000e80:	2400000c 	.word	0x2400000c

08000e84 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000e84:	4b01      	ldr	r3, [pc, #4]	@ (8000e8c <HAL_GetREVID+0x8>)
 8000e86:	6818      	ldr	r0, [r3, #0]
}
 8000e88:	0c00      	lsrs	r0, r0, #16
 8000e8a:	4770      	bx	lr
 8000e8c:	5c001000 	.word	0x5c001000

08000e90 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000e90:	2800      	cmp	r0, #0
 8000e92:	db07      	blt.n	8000ea4 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e94:	f000 021f 	and.w	r2, r0, #31
 8000e98:	0940      	lsrs	r0, r0, #5
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	4093      	lsls	r3, r2
 8000e9e:	4a02      	ldr	r2, [pc, #8]	@ (8000ea8 <__NVIC_EnableIRQ+0x18>)
 8000ea0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000eac:	2800      	cmp	r0, #0
 8000eae:	db04      	blt.n	8000eba <__NVIC_SetPriority+0xe>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	0109      	lsls	r1, r1, #4
 8000eb2:	b2c9      	uxtb	r1, r1
 8000eb4:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <__NVIC_SetPriority+0x1c>)
 8000eb6:	5419      	strb	r1, [r3, r0]
 8000eb8:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	f000 000f 	and.w	r0, r0, #15
 8000ebe:	0109      	lsls	r1, r1, #4
 8000ec0:	b2c9      	uxtb	r1, r1
 8000ec2:	4b02      	ldr	r3, [pc, #8]	@ (8000ecc <__NVIC_SetPriority+0x20>)
 8000ec4:	5419      	strb	r1, [r3, r0]
  }
}
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e400 	.word	0xe000e400
 8000ecc:	e000ed14 	.word	0xe000ed14

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed2:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed6:	f1c0 0c07 	rsb	ip, r0, #7
 8000eda:	f1bc 0f04 	cmp.w	ip, #4
 8000ede:	bf28      	it	cs
 8000ee0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee4:	1d03      	adds	r3, r0, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d90f      	bls.n	8000f0a <NVIC_EncodePriority+0x3a>
 8000eea:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 3eff 	mov.w	lr, #4294967295
 8000ef0:	fa0e f00c 	lsl.w	r0, lr, ip
 8000ef4:	ea21 0100 	bic.w	r1, r1, r0
 8000ef8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efa:	fa0e fe03 	lsl.w	lr, lr, r3
 8000efe:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000f02:	ea41 0002 	orr.w	r0, r1, r2
 8000f06:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e7ee      	b.n	8000eec <NVIC_EncodePriority+0x1c>
	...

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4906      	ldr	r1, [pc, #24]	@ (8000f2c <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000f12:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f14:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000f18:	041b      	lsls	r3, r3, #16
 8000f1a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	0200      	lsls	r0, r0, #8
 8000f1e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f22:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000f24:	4a02      	ldr	r2, [pc, #8]	@ (8000f30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f26:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000f28:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	05fa0000 	.word	0x05fa0000

08000f34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b510      	push	{r4, lr}
 8000f36:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <HAL_NVIC_SetPriority+0x1c>)
 8000f3a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000f40:	f7ff ffc6 	bl	8000ed0 <NVIC_EncodePriority>
 8000f44:	4601      	mov	r1, r0
 8000f46:	4620      	mov	r0, r4
 8000f48:	f7ff ffb0 	bl	8000eac <__NVIC_SetPriority>
}
 8000f4c:	bd10      	pop	{r4, pc}
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f56:	f7ff ff9b 	bl	8000e90 <__NVIC_EnableIRQ>
}
 8000f5a:	bd08      	pop	{r3, pc}

08000f5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	3801      	subs	r0, #1
 8000f5e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000f62:	d20b      	bcs.n	8000f7c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000f68:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	4a05      	ldr	r2, [pc, #20]	@ (8000f80 <HAL_SYSTICK_Config+0x24>)
 8000f6c:	21f0      	movs	r1, #240	@ 0xf0
 8000f6e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f72:	2000      	movs	r0, #0
 8000f74:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f76:	2207      	movs	r2, #7
 8000f78:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f7a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f7c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f84:	2800      	cmp	r0, #0
 8000f86:	d038      	beq.n	8000ffa <HAL_CRC_Init+0x76>
{
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f8c:	7f43      	ldrb	r3, [r0, #29]
 8000f8e:	b31b      	cbz	r3, 8000fd8 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f90:	2302      	movs	r3, #2
 8000f92:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000f94:	7923      	ldrb	r3, [r4, #4]
 8000f96:	bb1b      	cbnz	r3, 8000fe0 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	4a19      	ldr	r2, [pc, #100]	@ (8001000 <HAL_CRC_Init+0x7c>)
 8000f9c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000f9e:	6822      	ldr	r2, [r4, #0]
 8000fa0:	6893      	ldr	r3, [r2, #8]
 8000fa2:	f023 0318 	bic.w	r3, r3, #24
 8000fa6:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000fa8:	7963      	ldrb	r3, [r4, #5]
 8000faa:	bb13      	cbnz	r3, 8000ff2 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000fb4:	6822      	ldr	r2, [r4, #0]
 8000fb6:	6893      	ldr	r3, [r2, #8]
 8000fb8:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8000fbc:	6961      	ldr	r1, [r4, #20]
 8000fbe:	430b      	orrs	r3, r1
 8000fc0:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000fc2:	6822      	ldr	r2, [r4, #0]
 8000fc4:	6893      	ldr	r3, [r2, #8]
 8000fc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fca:	69a1      	ldr	r1, [r4, #24]
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8000fd4:	2000      	movs	r0, #0
}
 8000fd6:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8000fd8:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8000fda:	f7ff fdcb 	bl	8000b74 <HAL_CRC_MspInit>
 8000fde:	e7d7      	b.n	8000f90 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000fe0:	68e2      	ldr	r2, [r4, #12]
 8000fe2:	68a1      	ldr	r1, [r4, #8]
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f000 f80d 	bl	8001004 <HAL_CRCEx_Polynomial_Set>
 8000fea:	2800      	cmp	r0, #0
 8000fec:	d0dc      	beq.n	8000fa8 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8000fee:	2001      	movs	r0, #1
 8000ff0:	e7f1      	b.n	8000fd6 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	6922      	ldr	r2, [r4, #16]
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	e7dc      	b.n	8000fb4 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8000ffa:	2001      	movs	r0, #1
}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	04c11db7 	.word	0x04c11db7

08001004 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001004:	f011 0f01 	tst.w	r1, #1
 8001008:	d030      	beq.n	800106c <HAL_CRCEx_Polynomial_Set+0x68>
{
 800100a:	b410      	push	{r4}
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800100c:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800100e:	461c      	mov	r4, r3
 8001010:	3b01      	subs	r3, #1
 8001012:	b134      	cbz	r4, 8001022 <HAL_CRCEx_Polynomial_Set+0x1e>
 8001014:	f003 0c1f 	and.w	ip, r3, #31
 8001018:	fa21 fc0c 	lsr.w	ip, r1, ip
 800101c:	f01c 0f01 	tst.w	ip, #1
 8001020:	d0f5      	beq.n	800100e <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
 8001022:	2a18      	cmp	r2, #24
 8001024:	d824      	bhi.n	8001070 <HAL_CRCEx_Polynomial_Set+0x6c>
 8001026:	e8df f002 	tbb	[pc, r2]
 800102a:	230f      	.short	0x230f
 800102c:	23232323 	.word	0x23232323
 8001030:	231d2323 	.word	0x231d2323
 8001034:	23232323 	.word	0x23232323
 8001038:	23192323 	.word	0x23192323
 800103c:	23232323 	.word	0x23232323
 8001040:	2323      	.short	0x2323
 8001042:	0d          	.byte	0x0d
 8001043:	00          	.byte	0x00
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001044:	2b06      	cmp	r3, #6
 8001046:	d817      	bhi.n	8001078 <HAL_CRCEx_Polynomial_Set+0x74>
    }
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001048:	6803      	ldr	r3, [r0, #0]
 800104a:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800104c:	6801      	ldr	r1, [r0, #0]
 800104e:	688b      	ldr	r3, [r1, #8]
 8001050:	f023 0318 	bic.w	r3, r3, #24
 8001054:	4313      	orrs	r3, r2
 8001056:	608b      	str	r3, [r1, #8]
 8001058:	2000      	movs	r0, #0
 800105a:	e00a      	b.n	8001072 <HAL_CRCEx_Polynomial_Set+0x6e>
        if (msb >= HAL_CRC_LENGTH_8B)
 800105c:	2b07      	cmp	r3, #7
 800105e:	d9f3      	bls.n	8001048 <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 8001060:	2001      	movs	r0, #1
 8001062:	e006      	b.n	8001072 <HAL_CRCEx_Polynomial_Set+0x6e>
        if (msb >= HAL_CRC_LENGTH_16B)
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d9ef      	bls.n	8001048 <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 8001068:	2001      	movs	r0, #1
 800106a:	e002      	b.n	8001072 <HAL_CRCEx_Polynomial_Set+0x6e>
    status =  HAL_ERROR;
 800106c:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 800106e:	4770      	bx	lr
    switch (PolyLength)
 8001070:	2001      	movs	r0, #1
}
 8001072:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001076:	4770      	bx	lr
          status =   HAL_ERROR;
 8001078:	2001      	movs	r0, #1
 800107a:	e7fa      	b.n	8001072 <HAL_CRCEx_Polynomial_Set+0x6e>

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107e:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8001080:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001082:	e06b      	b.n	800115c <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001084:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001086:	005e      	lsls	r6, r3, #1
 8001088:	2403      	movs	r4, #3
 800108a:	40b4      	lsls	r4, r6
 800108c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001090:	68cc      	ldr	r4, [r1, #12]
 8001092:	40b4      	lsls	r4, r6
 8001094:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001096:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001098:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800109a:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109e:	684c      	ldr	r4, [r1, #4]
 80010a0:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80010a4:	409c      	lsls	r4, r3
 80010a6:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80010a8:	6044      	str	r4, [r0, #4]
 80010aa:	e069      	b.n	8001180 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ac:	08dd      	lsrs	r5, r3, #3
 80010ae:	3508      	adds	r5, #8
 80010b0:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010b4:	f003 0c07 	and.w	ip, r3, #7
 80010b8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80010bc:	f04f 0e0f 	mov.w	lr, #15
 80010c0:	fa0e fe0c 	lsl.w	lr, lr, ip
 80010c4:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010c8:	690c      	ldr	r4, [r1, #16]
 80010ca:	fa04 f40c 	lsl.w	r4, r4, ip
 80010ce:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80010d2:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80010d6:	e06b      	b.n	80011b0 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010d8:	2409      	movs	r4, #9
 80010da:	e000      	b.n	80010de <HAL_GPIO_Init+0x62>
 80010dc:	2400      	movs	r4, #0
 80010de:	fa04 f40e 	lsl.w	r4, r4, lr
 80010e2:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e4:	f10c 0c02 	add.w	ip, ip, #2
 80010e8:	4d69      	ldr	r5, [pc, #420]	@ (8001290 <HAL_GPIO_Init+0x214>)
 80010ea:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ee:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 80010f2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80010f4:	43d4      	mvns	r4, r2
 80010f6:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fa:	684f      	ldr	r7, [r1, #4]
 80010fc:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 8001100:	d001      	beq.n	8001106 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8001102:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001106:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 800110a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800110c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800110e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001112:	684f      	ldr	r7, [r1, #4]
 8001114:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8001118:	d001      	beq.n	800111e <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 800111a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800111e:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8001122:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001124:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
        temp &= ~(iocurrent);
 8001128:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800112c:	684f      	ldr	r7, [r1, #4]
 800112e:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8001132:	d001      	beq.n	8001138 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001134:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001138:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 800113c:	f8c5 6084 	str.w	r6, [r5, #132]	@ 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001140:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
        temp &= ~(iocurrent);
 8001144:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001146:	684e      	ldr	r6, [r1, #4]
 8001148:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 800114c:	d001      	beq.n	8001152 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 800114e:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001152:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001156:	f8c2 4080 	str.w	r4, [r2, #128]	@ 0x80
      }
    }

    position++;
 800115a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800115c:	680a      	ldr	r2, [r1, #0]
 800115e:	fa32 f403 	lsrs.w	r4, r2, r3
 8001162:	f000 8092 	beq.w	800128a <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001166:	f04f 0c01 	mov.w	ip, #1
 800116a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 800116e:	ea1c 0202 	ands.w	r2, ip, r2
 8001172:	d0f2      	beq.n	800115a <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001174:	684c      	ldr	r4, [r1, #4]
 8001176:	f004 0403 	and.w	r4, r4, #3
 800117a:	3c01      	subs	r4, #1
 800117c:	2c01      	cmp	r4, #1
 800117e:	d981      	bls.n	8001084 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001180:	684c      	ldr	r4, [r1, #4]
 8001182:	f004 0403 	and.w	r4, r4, #3
 8001186:	2c03      	cmp	r4, #3
 8001188:	d00c      	beq.n	80011a4 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 800118a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800118c:	005d      	lsls	r5, r3, #1
 800118e:	f04f 0c03 	mov.w	ip, #3
 8001192:	fa0c fc05 	lsl.w	ip, ip, r5
 8001196:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800119a:	688c      	ldr	r4, [r1, #8]
 800119c:	40ac      	lsls	r4, r5
 800119e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 80011a2:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a4:	684c      	ldr	r4, [r1, #4]
 80011a6:	f004 0403 	and.w	r4, r4, #3
 80011aa:	2c02      	cmp	r4, #2
 80011ac:	f43f af7e 	beq.w	80010ac <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 80011b0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011b2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80011b6:	f04f 0c03 	mov.w	ip, #3
 80011ba:	fa0c fc0e 	lsl.w	ip, ip, lr
 80011be:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c2:	684c      	ldr	r4, [r1, #4]
 80011c4:	f004 0403 	and.w	r4, r4, #3
 80011c8:	fa04 f40e 	lsl.w	r4, r4, lr
 80011cc:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80011d0:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d2:	684c      	ldr	r4, [r1, #4]
 80011d4:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 80011d8:	d0bf      	beq.n	800115a <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	4c2e      	ldr	r4, [pc, #184]	@ (8001294 <HAL_GPIO_Init+0x218>)
 80011dc:	f8d4 50f4 	ldr.w	r5, [r4, #244]	@ 0xf4
 80011e0:	f045 0502 	orr.w	r5, r5, #2
 80011e4:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 80011e8:	f8d4 40f4 	ldr.w	r4, [r4, #244]	@ 0xf4
 80011ec:	f004 0402 	and.w	r4, r4, #2
 80011f0:	9401      	str	r4, [sp, #4]
 80011f2:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80011f4:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80011f8:	f10c 0502 	add.w	r5, ip, #2
 80011fc:	4c24      	ldr	r4, [pc, #144]	@ (8001290 <HAL_GPIO_Init+0x214>)
 80011fe:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001202:	f003 0e03 	and.w	lr, r3, #3
 8001206:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800120a:	240f      	movs	r4, #15
 800120c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001210:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001214:	4c20      	ldr	r4, [pc, #128]	@ (8001298 <HAL_GPIO_Init+0x21c>)
 8001216:	42a0      	cmp	r0, r4
 8001218:	f43f af60 	beq.w	80010dc <HAL_GPIO_Init+0x60>
 800121c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001220:	42a0      	cmp	r0, r4
 8001222:	d022      	beq.n	800126a <HAL_GPIO_Init+0x1ee>
 8001224:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001228:	42a0      	cmp	r0, r4
 800122a:	d020      	beq.n	800126e <HAL_GPIO_Init+0x1f2>
 800122c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001230:	42a0      	cmp	r0, r4
 8001232:	d01e      	beq.n	8001272 <HAL_GPIO_Init+0x1f6>
 8001234:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001238:	42a0      	cmp	r0, r4
 800123a:	d01c      	beq.n	8001276 <HAL_GPIO_Init+0x1fa>
 800123c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001240:	42a0      	cmp	r0, r4
 8001242:	d01a      	beq.n	800127a <HAL_GPIO_Init+0x1fe>
 8001244:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001248:	42a0      	cmp	r0, r4
 800124a:	d018      	beq.n	800127e <HAL_GPIO_Init+0x202>
 800124c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001250:	42a0      	cmp	r0, r4
 8001252:	d016      	beq.n	8001282 <HAL_GPIO_Init+0x206>
 8001254:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001258:	42a0      	cmp	r0, r4
 800125a:	d014      	beq.n	8001286 <HAL_GPIO_Init+0x20a>
 800125c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001260:	42a0      	cmp	r0, r4
 8001262:	f43f af39 	beq.w	80010d8 <HAL_GPIO_Init+0x5c>
 8001266:	240a      	movs	r4, #10
 8001268:	e739      	b.n	80010de <HAL_GPIO_Init+0x62>
 800126a:	2401      	movs	r4, #1
 800126c:	e737      	b.n	80010de <HAL_GPIO_Init+0x62>
 800126e:	2402      	movs	r4, #2
 8001270:	e735      	b.n	80010de <HAL_GPIO_Init+0x62>
 8001272:	2403      	movs	r4, #3
 8001274:	e733      	b.n	80010de <HAL_GPIO_Init+0x62>
 8001276:	2404      	movs	r4, #4
 8001278:	e731      	b.n	80010de <HAL_GPIO_Init+0x62>
 800127a:	2405      	movs	r4, #5
 800127c:	e72f      	b.n	80010de <HAL_GPIO_Init+0x62>
 800127e:	2406      	movs	r4, #6
 8001280:	e72d      	b.n	80010de <HAL_GPIO_Init+0x62>
 8001282:	2407      	movs	r4, #7
 8001284:	e72b      	b.n	80010de <HAL_GPIO_Init+0x62>
 8001286:	2408      	movs	r4, #8
 8001288:	e729      	b.n	80010de <HAL_GPIO_Init+0x62>
  }
}
 800128a:	b003      	add	sp, #12
 800128c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128e:	bf00      	nop
 8001290:	58000400 	.word	0x58000400
 8001294:	58024400 	.word	0x58024400
 8001298:	58020000 	.word	0x58020000

0800129c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800129c:	b10a      	cbz	r2, 80012a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129e:	6181      	str	r1, [r0, #24]
 80012a0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012a2:	0409      	lsls	r1, r1, #16
 80012a4:	6181      	str	r1, [r0, #24]
  }
}
 80012a6:	4770      	bx	lr

080012a8 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80012a8:	3020      	adds	r0, #32
 80012aa:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <HAL_HSEM_FastTake+0x18>)
 80012ac:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80012b0:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <HAL_HSEM_FastTake+0x1c>)
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d001      	beq.n	80012ba <HAL_HSEM_FastTake+0x12>
    return HAL_OK;
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80012b6:	2001      	movs	r0, #1
 80012b8:	4770      	bx	lr
    return HAL_OK;
 80012ba:	2000      	movs	r0, #0
}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	58026400 	.word	0x58026400
 80012c4:	80000300 	.word	0x80000300

080012c8 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80012c8:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 80012cc:	4b01      	ldr	r3, [pc, #4]	@ (80012d4 <HAL_HSEM_Release+0xc>)
 80012ce:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 80012d2:	4770      	bx	lr
 80012d4:	58026400 	.word	0x58026400

080012d8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80012d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012dc:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012de:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80012e2:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80012e6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80012ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d854      	bhi.n	800139c <PCD_WriteEmptyTxFifo+0xc4>
 80012f2:	4607      	mov	r7, r0
 80012f4:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 80012f6:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 80012f8:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 80012fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001300:	69d2      	ldr	r2, [r2, #28]
 8001302:	429a      	cmp	r2, r3
 8001304:	d300      	bcc.n	8001308 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8001306:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001308:	f102 0903 	add.w	r9, r2, #3
 800130c:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001310:	e015      	b.n	800133e <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8001312:	f106 0903 	add.w	r9, r6, #3
 8001316:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 800131a:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800131c:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8001320:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8001324:	6a29      	ldr	r1, [r5, #32]
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	b2b3      	uxth	r3, r6
 800132a:	b2e2      	uxtb	r2, r4
 800132c:	4640      	mov	r0, r8
 800132e:	f003 fd10 	bl	8004d52 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001332:	6a2b      	ldr	r3, [r5, #32]
 8001334:	4433      	add	r3, r6
 8001336:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8001338:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800133a:	4433      	add	r3, r6
 800133c:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800133e:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8001342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800134a:	454b      	cmp	r3, r9
 800134c:	d312      	bcc.n	8001374 <PCD_WriteEmptyTxFifo+0x9c>
 800134e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001352:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001356:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800135a:	429a      	cmp	r2, r3
 800135c:	d20a      	bcs.n	8001374 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800135e:	b14b      	cbz	r3, 8001374 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8001360:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8001362:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8001366:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800136a:	69d6      	ldr	r6, [r2, #28]
 800136c:	429e      	cmp	r6, r3
 800136e:	d3d0      	bcc.n	8001312 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8001370:	461e      	mov	r6, r3
 8001372:	e7ce      	b.n	8001312 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001374:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001378:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800137c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800137e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001380:	429a      	cmp	r2, r3
 8001382:	d80f      	bhi.n	80013a4 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001384:	f004 040f 	and.w	r4, r4, #15
 8001388:	2201      	movs	r2, #1
 800138a:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800138c:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 8001390:	ea23 0302 	bic.w	r3, r3, r2
 8001394:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 8001398:	2000      	movs	r0, #0
 800139a:	e000      	b.n	800139e <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 800139c:	2001      	movs	r0, #1
}
 800139e:	b003      	add	sp, #12
 80013a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 80013a4:	2000      	movs	r0, #0
 80013a6:	e7fa      	b.n	800139e <PCD_WriteEmptyTxFifo+0xc6>

080013a8 <HAL_PCD_Init>:
{
 80013a8:	b530      	push	{r4, r5, lr}
 80013aa:	b083      	sub	sp, #12
  if (hpcd == NULL)
 80013ac:	2800      	cmp	r0, #0
 80013ae:	d07a      	beq.n	80014a6 <HAL_PCD_Init+0xfe>
 80013b0:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013b2:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 80013b6:	b1ab      	cbz	r3, 80013e4 <HAL_PCD_Init+0x3c>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80013b8:	2303      	movs	r3, #3
 80013ba:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  __HAL_PCD_DISABLE(hpcd);
 80013be:	6820      	ldr	r0, [r4, #0]
 80013c0:	f003 faee 	bl	80049a0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013c4:	7c23      	ldrb	r3, [r4, #16]
 80013c6:	f88d 3000 	strb.w	r3, [sp]
 80013ca:	1d23      	adds	r3, r4, #4
 80013cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ce:	6820      	ldr	r0, [r4, #0]
 80013d0:	f003 fa1c 	bl	800480c <USB_CoreInit>
 80013d4:	b158      	cbz	r0, 80013ee <HAL_PCD_Init+0x46>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 80013dc:	2501      	movs	r5, #1
}
 80013de:	4628      	mov	r0, r5
 80013e0:	b003      	add	sp, #12
 80013e2:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80013e4:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 80013e8:	f005 fa46 	bl	8006878 <HAL_PCD_MspInit>
 80013ec:	e7e4      	b.n	80013b8 <HAL_PCD_Init+0x10>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80013ee:	2100      	movs	r1, #0
 80013f0:	6820      	ldr	r0, [r4, #0]
 80013f2:	f003 fec4 	bl	800517e <USB_SetCurrentMode>
 80013f6:	4602      	mov	r2, r0
 80013f8:	b908      	cbnz	r0, 80013fe <HAL_PCD_Init+0x56>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013fa:	4603      	mov	r3, r0
 80013fc:	e017      	b.n	800142e <HAL_PCD_Init+0x86>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013fe:	2302      	movs	r3, #2
 8001400:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8001404:	2501      	movs	r5, #1
 8001406:	e7ea      	b.n	80013de <HAL_PCD_Init+0x36>
    hpcd->IN_ep[i].is_in = 1U;
 8001408:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800140c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001410:	2001      	movs	r0, #1
 8001412:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8001414:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001416:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001418:	2000      	movs	r0, #0
 800141a:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 800141c:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800141e:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001420:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001424:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001428:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800142a:	3301      	adds	r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	7920      	ldrb	r0, [r4, #4]
 8001430:	4298      	cmp	r0, r3
 8001432:	d8e9      	bhi.n	8001408 <HAL_PCD_Init+0x60>
 8001434:	e016      	b.n	8001464 <HAL_PCD_Init+0xbc>
    hpcd->OUT_ep[i].is_in = 0U;
 8001436:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 800143a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800143e:	2100      	movs	r1, #0
 8001440:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8001444:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001448:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 800144c:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001450:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001454:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8001458:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800145c:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001460:	3201      	adds	r2, #1
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	4290      	cmp	r0, r2
 8001466:	d8e6      	bhi.n	8001436 <HAL_PCD_Init+0x8e>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001468:	7c23      	ldrb	r3, [r4, #16]
 800146a:	f88d 3000 	strb.w	r3, [sp]
 800146e:	1d23      	adds	r3, r4, #4
 8001470:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001472:	6820      	ldr	r0, [r4, #0]
 8001474:	f003 faea 	bl	8004a4c <USB_DevInit>
 8001478:	4605      	mov	r5, r0
 800147a:	b958      	cbnz	r0, 8001494 <HAL_PCD_Init+0xec>
  hpcd->USB_Address = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001480:	2301      	movs	r3, #1
 8001482:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (hpcd->Init.lpm_enable == 1U)
 8001486:	7b23      	ldrb	r3, [r4, #12]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d008      	beq.n	800149e <HAL_PCD_Init+0xf6>
  (void)USB_DevDisconnect(hpcd->Instance);
 800148c:	6820      	ldr	r0, [r4, #0]
 800148e:	f003 fe35 	bl	80050fc <USB_DevDisconnect>
  return HAL_OK;
 8001492:	e7a4      	b.n	80013de <HAL_PCD_Init+0x36>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001494:	2302      	movs	r3, #2
 8001496:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800149a:	2501      	movs	r5, #1
 800149c:	e79f      	b.n	80013de <HAL_PCD_Init+0x36>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800149e:	4620      	mov	r0, r4
 80014a0:	f000 fd5a 	bl	8001f58 <HAL_PCDEx_ActivateLPM>
 80014a4:	e7f2      	b.n	800148c <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
 80014a6:	2501      	movs	r5, #1
 80014a8:	e799      	b.n	80013de <HAL_PCD_Init+0x36>

080014aa <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014aa:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 80014ac:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 80014b0:	2a01      	cmp	r2, #1
 80014b2:	d01a      	beq.n	80014ea <HAL_PCD_Start+0x40>
{
 80014b4:	b510      	push	{r4, lr}
 80014b6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80014b8:	2201      	movs	r2, #1
 80014ba:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80014c4:	d002      	beq.n	80014cc <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 80014c6:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80014c8:	2a01      	cmp	r2, #1
 80014ca:	d009      	beq.n	80014e0 <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 80014cc:	6820      	ldr	r0, [r4, #0]
 80014ce:	f003 fa61 	bl	8004994 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80014d2:	6820      	ldr	r0, [r4, #0]
 80014d4:	f003 fe04 	bl	80050e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014d8:	2000      	movs	r0, #0
 80014da:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80014de:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80014e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014e2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80014e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80014e8:	e7f0      	b.n	80014cc <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 80014ea:	2002      	movs	r0, #2
}
 80014ec:	4770      	bx	lr

080014ee <HAL_PCD_Stop>:
{
 80014ee:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014f0:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hpcd);
 80014f2:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d01d      	beq.n	8001536 <HAL_PCD_Stop+0x48>
 80014fa:	4604      	mov	r4, r0
 80014fc:	2301      	movs	r3, #1
 80014fe:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 8001502:	4628      	mov	r0, r5
 8001504:	f003 fa4c 	bl	80049a0 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001508:	6820      	ldr	r0, [r4, #0]
 800150a:	f003 fdf7 	bl	80050fc <USB_DevDisconnect>
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800150e:	2110      	movs	r1, #16
 8001510:	6820      	ldr	r0, [r4, #0]
 8001512:	f003 fa4b 	bl	80049ac <USB_FlushTxFifo>
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001516:	68eb      	ldr	r3, [r5, #12]
 8001518:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800151c:	d002      	beq.n	8001524 <HAL_PCD_Stop+0x36>
      (hpcd->Init.battery_charging_enable == 1U))
 800151e:	7b63      	ldrb	r3, [r4, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001520:	2b01      	cmp	r3, #1
 8001522:	d003      	beq.n	800152c <HAL_PCD_Stop+0x3e>
  __HAL_UNLOCK(hpcd);
 8001524:	2000      	movs	r0, #0
 8001526:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800152a:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800152c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800152e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001532:	63ab      	str	r3, [r5, #56]	@ 0x38
 8001534:	e7f6      	b.n	8001524 <HAL_PCD_Stop+0x36>
  __HAL_LOCK(hpcd);
 8001536:	2002      	movs	r0, #2
 8001538:	e7f7      	b.n	800152a <HAL_PCD_Stop+0x3c>
	...

0800153c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	4604      	mov	r4, r0
 8001540:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001542:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001544:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001546:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800154a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800154e:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001550:	79a1      	ldrb	r1, [r4, #6]
 8001552:	2901      	cmp	r1, #1
 8001554:	d011      	beq.n	800157a <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001556:	4938      	ldr	r1, [pc, #224]	@ (8001638 <PCD_EP_OutXfrComplete_int+0xfc>)
 8001558:	428e      	cmp	r6, r1
 800155a:	d056      	beq.n	800160a <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800155c:	b93d      	cbnz	r5, 800156e <PCD_EP_OutXfrComplete_int+0x32>
 800155e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001562:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001566:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800156a:	2b00      	cmp	r3, #0
 800156c:	d05e      	beq.n	800162c <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800156e:	b2e9      	uxtb	r1, r5
 8001570:	4620      	mov	r0, r4
 8001572:	f005 fa53 	bl	8006a1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8001576:	2000      	movs	r0, #0
 8001578:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800157a:	f012 0f08 	tst.w	r2, #8
 800157e:	d009      	beq.n	8001594 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001580:	492e      	ldr	r1, [pc, #184]	@ (800163c <PCD_EP_OutXfrComplete_int+0x100>)
 8001582:	428e      	cmp	r6, r1
 8001584:	d9f7      	bls.n	8001576 <PCD_EP_OutXfrComplete_int+0x3a>
 8001586:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800158a:	d0f4      	beq.n	8001576 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800158c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	e7f0      	b.n	8001576 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001594:	f012 0f20 	tst.w	r2, #32
 8001598:	d002      	beq.n	80015a0 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800159a:	2220      	movs	r2, #32
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	e7ea      	b.n	8001576 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80015a0:	f012 0f28 	tst.w	r2, #40	@ 0x28
 80015a4:	d1e7      	bne.n	8001576 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80015a6:	4925      	ldr	r1, [pc, #148]	@ (800163c <PCD_EP_OutXfrComplete_int+0x100>)
 80015a8:	428e      	cmp	r6, r1
 80015aa:	d906      	bls.n	80015ba <PCD_EP_OutXfrComplete_int+0x7e>
 80015ac:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80015b0:	d003      	beq.n	80015ba <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80015b2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	e7dd      	b.n	8001576 <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80015ba:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80015be:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80015c2:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015cc:	1acb      	subs	r3, r1, r3
 80015ce:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 80015d2:	b97d      	cbnz	r5, 80015f4 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 80015d4:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80015d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80015dc:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 80015e0:	b16a      	cbz	r2, 80015fe <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 80015e2:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80015e6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80015ea:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 80015ee:	4419      	add	r1, r3
 80015f0:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80015f4:	b2e9      	uxtb	r1, r5
 80015f6:	4620      	mov	r0, r4
 80015f8:	f005 fa10 	bl	8006a1c <HAL_PCD_DataOutStageCallback>
 80015fc:	e7bb      	b.n	8001576 <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015fe:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001602:	2101      	movs	r1, #1
 8001604:	f003 fdfa 	bl	80051fc <USB_EP0_OutStart>
 8001608:	e7f4      	b.n	80015f4 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800160a:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800160e:	d003      	beq.n	8001618 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001610:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	e7ae      	b.n	8001576 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001618:	f012 0f20 	tst.w	r2, #32
 800161c:	d001      	beq.n	8001622 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800161e:	2220      	movs	r2, #32
 8001620:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001622:	b2e9      	uxtb	r1, r5
 8001624:	4620      	mov	r0, r4
 8001626:	f005 f9f9 	bl	8006a1c <HAL_PCD_DataOutStageCallback>
 800162a:	e7a4      	b.n	8001576 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800162c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001630:	2100      	movs	r1, #0
 8001632:	f003 fde3 	bl	80051fc <USB_EP0_OutStart>
 8001636:	e79a      	b.n	800156e <PCD_EP_OutXfrComplete_int+0x32>
 8001638:	4f54310a 	.word	0x4f54310a
 800163c:	4f54300a 	.word	0x4f54300a

08001640 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001640:	b538      	push	{r3, r4, r5, lr}
 8001642:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001644:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001646:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001648:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800164c:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001650:	4a0e      	ldr	r2, [pc, #56]	@ (800168c <PCD_EP_OutSetupPacket_int+0x4c>)
 8001652:	4295      	cmp	r5, r2
 8001654:	d907      	bls.n	8001666 <PCD_EP_OutSetupPacket_int+0x26>
 8001656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800165a:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 800165e:	d002      	beq.n	8001666 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001660:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001664:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001666:	4620      	mov	r0, r4
 8001668:	f005 f9d0 	bl	8006a0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800166c:	4b07      	ldr	r3, [pc, #28]	@ (800168c <PCD_EP_OutSetupPacket_int+0x4c>)
 800166e:	429d      	cmp	r5, r3
 8001670:	d902      	bls.n	8001678 <PCD_EP_OutSetupPacket_int+0x38>
 8001672:	79a3      	ldrb	r3, [r4, #6]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d001      	beq.n	800167c <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8001678:	2000      	movs	r0, #0
 800167a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800167c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001680:	2101      	movs	r1, #1
 8001682:	6820      	ldr	r0, [r4, #0]
 8001684:	f003 fdba 	bl	80051fc <USB_EP0_OutStart>
 8001688:	e7f6      	b.n	8001678 <PCD_EP_OutSetupPacket_int+0x38>
 800168a:	bf00      	nop
 800168c:	4f54300a 	.word	0x4f54300a

08001690 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001690:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8001694:	2b01      	cmp	r3, #1
 8001696:	d00c      	beq.n	80016b2 <HAL_PCD_SetAddress+0x22>
{
 8001698:	b510      	push	{r4, lr}
 800169a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800169c:	2301      	movs	r3, #1
 800169e:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80016a2:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016a4:	6800      	ldr	r0, [r0, #0]
 80016a6:	f003 fd0b 	bl	80050c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80016b0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80016b2:	2002      	movs	r0, #2
}
 80016b4:	4770      	bx	lr

080016b6 <HAL_PCD_EP_Open>:
{
 80016b6:	b538      	push	{r3, r4, r5, lr}
 80016b8:	4605      	mov	r5, r0
 80016ba:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80016bc:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80016c0:	d12b      	bne.n	800171a <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016c2:	f001 0e0f 	and.w	lr, r1, #15
 80016c6:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 80016ca:	00a4      	lsls	r4, r4, #2
 80016cc:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 80016d0:	4404      	add	r4, r0
 80016d2:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 80016d4:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80016d8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80016dc:	2000      	movs	r0, #0
 80016de:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80016e2:	f00c 0c0f 	and.w	ip, ip, #15
 80016e6:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80016ea:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80016ee:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80016f0:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 80016f2:	784a      	ldrb	r2, [r1, #1]
 80016f4:	b10a      	cbz	r2, 80016fa <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 80016f6:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d01c      	beq.n	8001738 <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 80016fe:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 8001702:	2b01      	cmp	r3, #1
 8001704:	d01b      	beq.n	800173e <HAL_PCD_EP_Open+0x88>
 8001706:	2301      	movs	r3, #1
 8001708:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800170c:	6828      	ldr	r0, [r5, #0]
 800170e:	f003 fa75 	bl	8004bfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001712:	2000      	movs	r0, #0
 8001714:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 8001718:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800171a:	f001 000f 	and.w	r0, r1, #15
 800171e:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8001722:	0089      	lsls	r1, r1, #2
 8001724:	3110      	adds	r1, #16
 8001726:	4429      	add	r1, r5
 8001728:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800172a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800172e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001732:	2401      	movs	r4, #1
 8001734:	7544      	strb	r4, [r0, #21]
 8001736:	e7d4      	b.n	80016e2 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	714b      	strb	r3, [r1, #5]
 800173c:	e7df      	b.n	80016fe <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 800173e:	2002      	movs	r0, #2
 8001740:	e7ea      	b.n	8001718 <HAL_PCD_EP_Open+0x62>

08001742 <HAL_PCD_EP_Receive>:
{
 8001742:	b510      	push	{r4, lr}
 8001744:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001746:	f001 0c0f 	and.w	ip, r1, #15
 800174a:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 800174e:	0089      	lsls	r1, r1, #2
 8001750:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8001754:	4401      	add	r1, r0
 8001756:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8001758:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 800175c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001760:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 8001764:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 800176e:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8001772:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 8001776:	7982      	ldrb	r2, [r0, #6]
 8001778:	2a01      	cmp	r2, #1
 800177a:	d004      	beq.n	8001786 <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800177c:	6800      	ldr	r0, [r0, #0]
 800177e:	f003 faff 	bl	8004d80 <USB_EPStartXfer>
}
 8001782:	2000      	movs	r0, #0
 8001784:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001786:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 800178a:	e7f7      	b.n	800177c <HAL_PCD_EP_Receive+0x3a>

0800178c <HAL_PCD_EP_Transmit>:
{
 800178c:	b510      	push	{r4, lr}
 800178e:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001790:	f001 0c0f 	and.w	ip, r1, #15
 8001794:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8001798:	0089      	lsls	r1, r1, #2
 800179a:	3110      	adds	r1, #16
 800179c:	4401      	add	r1, r0
 800179e:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80017a0:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80017a4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80017a8:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 80017ac:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 80017b6:	2301      	movs	r3, #1
 80017b8:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017bc:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 80017c0:	7982      	ldrb	r2, [r0, #6]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d004      	beq.n	80017d0 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80017c6:	6800      	ldr	r0, [r0, #0]
 80017c8:	f003 fada 	bl	8004d80 <USB_EPStartXfer>
}
 80017cc:	2000      	movs	r0, #0
 80017ce:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80017d0:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 80017d4:	e7f7      	b.n	80017c6 <HAL_PCD_EP_Transmit+0x3a>

080017d6 <HAL_PCD_EP_SetStall>:
{
 80017d6:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017d8:	f001 050f 	and.w	r5, r1, #15
 80017dc:	7902      	ldrb	r2, [r0, #4]
 80017de:	42aa      	cmp	r2, r5
 80017e0:	d338      	bcc.n	8001854 <HAL_PCD_EP_SetStall+0x7e>
 80017e2:	4604      	mov	r4, r0
 80017e4:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 80017e6:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80017ea:	d11f      	bne.n	800182c <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 80017ec:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80017f0:	0089      	lsls	r1, r1, #2
 80017f2:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80017f6:	4401      	add	r1, r0
 80017f8:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80017fa:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80017fe:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 8001808:	2301      	movs	r3, #1
 800180a:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800180c:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800180e:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001812:	2b01      	cmp	r3, #1
 8001814:	d020      	beq.n	8001858 <HAL_PCD_EP_SetStall+0x82>
 8001816:	2301      	movs	r3, #1
 8001818:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800181c:	6820      	ldr	r0, [r4, #0]
 800181e:	f003 fbf4 	bl	800500a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001822:	b185      	cbz	r5, 8001846 <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 8001824:	2000      	movs	r0, #0
 8001826:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800182a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800182c:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8001830:	0089      	lsls	r1, r1, #2
 8001832:	3110      	adds	r1, #16
 8001834:	4401      	add	r1, r0
 8001836:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001838:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800183c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001840:	2201      	movs	r2, #1
 8001842:	755a      	strb	r2, [r3, #21]
 8001844:	e7e0      	b.n	8001808 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001846:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800184a:	79a1      	ldrb	r1, [r4, #6]
 800184c:	6820      	ldr	r0, [r4, #0]
 800184e:	f003 fcd5 	bl	80051fc <USB_EP0_OutStart>
 8001852:	e7e7      	b.n	8001824 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8001854:	2001      	movs	r0, #1
 8001856:	e7e8      	b.n	800182a <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8001858:	2002      	movs	r0, #2
 800185a:	e7e6      	b.n	800182a <HAL_PCD_EP_SetStall+0x54>

0800185c <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800185c:	f001 030f 	and.w	r3, r1, #15
 8001860:	7902      	ldrb	r2, [r0, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	d330      	bcc.n	80018c8 <HAL_PCD_EP_ClrStall+0x6c>
{
 8001866:	b510      	push	{r4, lr}
 8001868:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800186a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800186e:	d11e      	bne.n	80018ae <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001870:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001874:	0089      	lsls	r1, r1, #2
 8001876:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800187a:	4401      	add	r1, r0
 800187c:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800187e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001882:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001886:	2000      	movs	r0, #0
 8001888:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 800188c:	2200      	movs	r2, #0
 800188e:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001890:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001892:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001896:	2b01      	cmp	r3, #1
 8001898:	d018      	beq.n	80018cc <HAL_PCD_EP_ClrStall+0x70>
 800189a:	2301      	movs	r3, #1
 800189c:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018a0:	6820      	ldr	r0, [r4, #0]
 80018a2:	f003 fbdf 	bl	8005064 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80018ac:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ae:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80018b2:	0089      	lsls	r1, r1, #2
 80018b4:	3110      	adds	r1, #16
 80018b6:	4401      	add	r1, r0
 80018b8:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80018ba:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80018be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80018c2:	2001      	movs	r0, #1
 80018c4:	7550      	strb	r0, [r2, #21]
 80018c6:	e7e1      	b.n	800188c <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 80018c8:	2001      	movs	r0, #1
}
 80018ca:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80018cc:	2002      	movs	r0, #2
 80018ce:	e7ed      	b.n	80018ac <HAL_PCD_EP_ClrStall+0x50>

080018d0 <HAL_PCD_EP_Abort>:
{
 80018d0:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 80018d2:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80018d6:	d10c      	bne.n	80018f2 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018d8:	f001 010f 	and.w	r1, r1, #15
 80018dc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80018e0:	0089      	lsls	r1, r1, #2
 80018e2:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80018e6:	4401      	add	r1, r0
 80018e8:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80018ea:	6800      	ldr	r0, [r0, #0]
 80018ec:	f003 f9d2 	bl	8004c94 <USB_EPStopXfer>
}
 80018f0:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018f2:	f001 010f 	and.w	r1, r1, #15
 80018f6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80018fa:	0089      	lsls	r1, r1, #2
 80018fc:	3110      	adds	r1, #16
 80018fe:	4401      	add	r1, r0
 8001900:	3104      	adds	r1, #4
 8001902:	e7f2      	b.n	80018ea <HAL_PCD_EP_Abort+0x1a>

08001904 <HAL_PCD_IRQHandler>:
{
 8001904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001908:	b083      	sub	sp, #12
 800190a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800190c:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800190e:	4628      	mov	r0, r5
 8001910:	f003 fc31 	bl	8005176 <USB_GetMode>
 8001914:	b110      	cbz	r0, 800191c <HAL_PCD_IRQHandler+0x18>
}
 8001916:	b003      	add	sp, #12
 8001918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800191c:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800191e:	6820      	ldr	r0, [r4, #0]
 8001920:	f003 fbfa 	bl	8005118 <USB_ReadInterrupts>
 8001924:	2800      	cmp	r0, #0
 8001926:	d0f6      	beq.n	8001916 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001928:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8001932:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001936:	6820      	ldr	r0, [r4, #0]
 8001938:	f003 fbee 	bl	8005118 <USB_ReadInterrupts>
 800193c:	f010 0f02 	tst.w	r0, #2
 8001940:	d004      	beq.n	800194c <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001942:	6822      	ldr	r2, [r4, #0]
 8001944:	6953      	ldr	r3, [r2, #20]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800194c:	6820      	ldr	r0, [r4, #0]
 800194e:	f003 fbe3 	bl	8005118 <USB_ReadInterrupts>
 8001952:	f010 0f10 	tst.w	r0, #16
 8001956:	d016      	beq.n	8001986 <HAL_PCD_IRQHandler+0x82>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001958:	6822      	ldr	r2, [r4, #0]
 800195a:	6993      	ldr	r3, [r2, #24]
 800195c:	f023 0310 	bic.w	r3, r3, #16
 8001960:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8001962:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001966:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800196a:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 800196e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001972:	d06a      	beq.n	8001a4a <HAL_PCD_IRQHandler+0x146>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001974:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001978:	f000 808d 	beq.w	8001a96 <HAL_PCD_IRQHandler+0x192>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800197c:	6822      	ldr	r2, [r4, #0]
 800197e:	6993      	ldr	r3, [r2, #24]
 8001980:	f043 0310 	orr.w	r3, r3, #16
 8001984:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001986:	6820      	ldr	r0, [r4, #0]
 8001988:	f003 fbc6 	bl	8005118 <USB_ReadInterrupts>
 800198c:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8001990:	f040 8093 	bne.w	8001aba <HAL_PCD_IRQHandler+0x1b6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001994:	6820      	ldr	r0, [r4, #0]
 8001996:	f003 fbbf 	bl	8005118 <USB_ReadInterrupts>
 800199a:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 800199e:	f040 80fc 	bne.w	8001b9a <HAL_PCD_IRQHandler+0x296>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019a2:	6820      	ldr	r0, [r4, #0]
 80019a4:	f003 fbb8 	bl	8005118 <USB_ReadInterrupts>
 80019a8:	2800      	cmp	r0, #0
 80019aa:	f2c0 817d 	blt.w	8001ca8 <HAL_PCD_IRQHandler+0x3a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019ae:	6820      	ldr	r0, [r4, #0]
 80019b0:	f003 fbb2 	bl	8005118 <USB_ReadInterrupts>
 80019b4:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 80019b8:	d009      	beq.n	80019ce <HAL_PCD_IRQHandler+0xca>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	f013 0f01 	tst.w	r3, #1
 80019c0:	f040 818a 	bne.w	8001cd8 <HAL_PCD_IRQHandler+0x3d4>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019c4:	6822      	ldr	r2, [r4, #0]
 80019c6:	6953      	ldr	r3, [r2, #20]
 80019c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019cc:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80019ce:	6820      	ldr	r0, [r4, #0]
 80019d0:	f003 fba2 	bl	8005118 <USB_ReadInterrupts>
 80019d4:	f010 6f00 	tst.w	r0, #134217728	@ 0x8000000
 80019d8:	d015      	beq.n	8001a06 <HAL_PCD_IRQHandler+0x102>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80019da:	6822      	ldr	r2, [r4, #0]
 80019dc:	6953      	ldr	r3, [r2, #20]
 80019de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80019e2:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 80019e4:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f040 8179 	bne.w	8001ce0 <HAL_PCD_IRQHandler+0x3dc>
        hpcd->LPM_State = LPM_L1;
 80019ee:	2101      	movs	r1, #1
 80019f0:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f8:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80019fc:	f8c4 34d0 	str.w	r3, [r4, #1232]	@ 0x4d0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a00:	4620      	mov	r0, r4
 8001a02:	f000 fabd 	bl	8001f80 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a06:	6820      	ldr	r0, [r4, #0]
 8001a08:	f003 fb86 	bl	8005118 <USB_ReadInterrupts>
 8001a0c:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8001a10:	f040 816a 	bne.w	8001ce8 <HAL_PCD_IRQHandler+0x3e4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a14:	6820      	ldr	r0, [r4, #0]
 8001a16:	f003 fb7f 	bl	8005118 <USB_ReadInterrupts>
 8001a1a:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8001a1e:	f040 81b6 	bne.w	8001d8e <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a22:	6820      	ldr	r0, [r4, #0]
 8001a24:	f003 fb78 	bl	8005118 <USB_ReadInterrupts>
 8001a28:	f010 0f08 	tst.w	r0, #8
 8001a2c:	f040 81c7 	bne.w	8001dbe <HAL_PCD_IRQHandler+0x4ba>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a30:	6820      	ldr	r0, [r4, #0]
 8001a32:	f003 fb71 	bl	8005118 <USB_ReadInterrupts>
 8001a36:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8001a3a:	f000 81da 	beq.w	8001df2 <HAL_PCD_IRQHandler+0x4ee>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a3e:	69ab      	ldr	r3, [r5, #24]
 8001a40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a44:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a46:	2601      	movs	r6, #1
 8001a48:	e1c3      	b.n	8001dd2 <HAL_PCD_IRQHandler+0x4ce>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a4a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001a4e:	ea18 0f03 	tst.w	r8, r3
 8001a52:	d093      	beq.n	800197c <HAL_PCD_IRQHandler+0x78>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a54:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 8001a62:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8001a66:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8001a6a:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8001a6e:	4628      	mov	r0, r5
 8001a70:	f003 faa8 	bl	8004fc4 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a74:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8001a78:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8001a7c:	4453      	add	r3, sl
 8001a7e:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a82:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 8001a86:	9a01      	ldr	r2, [sp, #4]
 8001a88:	444a      	add	r2, r9
 8001a8a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001a8e:	4453      	add	r3, sl
 8001a90:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8001a94:	e772      	b.n	800197c <HAL_PCD_IRQHandler+0x78>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a96:	2208      	movs	r2, #8
 8001a98:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	f003 fa91 	bl	8004fc4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aa2:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001aa6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001aaa:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8001aae:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8001ab2:	4442      	add	r2, r8
 8001ab4:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 8001ab8:	e760      	b.n	800197c <HAL_PCD_IRQHandler+0x78>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001aba:	6820      	ldr	r0, [r4, #0]
 8001abc:	f003 fb30 	bl	8005120 <USB_ReadDevAllOutEpInterrupt>
 8001ac0:	4680      	mov	r8, r0
      epnum = 0U;
 8001ac2:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001ac4:	e035      	b.n	8001b32 <HAL_PCD_IRQHandler+0x22e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ac6:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001aca:	2201      	movs	r2, #1
 8001acc:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f7ff fd32 	bl	800153c <PCD_EP_OutXfrComplete_int>
 8001ad8:	e03c      	b.n	8001b54 <HAL_PCD_IRQHandler+0x250>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ada:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001ade:	2208      	movs	r2, #8
 8001ae0:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ae4:	4649      	mov	r1, r9
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f7ff fdaa 	bl	8001640 <PCD_EP_OutSetupPacket_int>
 8001aec:	e035      	b.n	8001b5a <HAL_PCD_IRQHandler+0x256>
            if (ep->is_iso_incomplete == 1U)
 8001aee:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001af2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001af6:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d041      	beq.n	8001b82 <HAL_PCD_IRQHandler+0x27e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001afe:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001b02:	2202      	movs	r2, #2
 8001b04:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b08:	f01a 0f20 	tst.w	sl, #32
 8001b0c:	d004      	beq.n	8001b18 <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b0e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001b12:	2220      	movs	r2, #32
 8001b14:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001b18:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8001b1c:	d005      	beq.n	8001b2a <HAL_PCD_IRQHandler+0x226>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b1e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001b22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b26:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8001b2a:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001b2e:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001b32:	f1b8 0f00 	cmp.w	r8, #0
 8001b36:	f43f af2d 	beq.w	8001994 <HAL_PCD_IRQHandler+0x90>
        if ((ep_intr & 0x1U) != 0U)
 8001b3a:	f018 0f01 	tst.w	r8, #1
 8001b3e:	d0f4      	beq.n	8001b2a <HAL_PCD_IRQHandler+0x226>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b40:	fa5f fb89 	uxtb.w	fp, r9
 8001b44:	4659      	mov	r1, fp
 8001b46:	6820      	ldr	r0, [r4, #0]
 8001b48:	f003 fafa 	bl	8005140 <USB_ReadDevOutEPInterrupt>
 8001b4c:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b4e:	f010 0f01 	tst.w	r0, #1
 8001b52:	d1b8      	bne.n	8001ac6 <HAL_PCD_IRQHandler+0x1c2>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b54:	f01a 0f08 	tst.w	sl, #8
 8001b58:	d1bf      	bne.n	8001ada <HAL_PCD_IRQHandler+0x1d6>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b5a:	f01a 0f10 	tst.w	sl, #16
 8001b5e:	d004      	beq.n	8001b6a <HAL_PCD_IRQHandler+0x266>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b60:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001b64:	2210      	movs	r2, #16
 8001b66:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001b6a:	f01a 0f02 	tst.w	sl, #2
 8001b6e:	d0cb      	beq.n	8001b08 <HAL_PCD_IRQHandler+0x204>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001b70:	696b      	ldr	r3, [r5, #20]
 8001b72:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001b76:	d0ba      	beq.n	8001aee <HAL_PCD_IRQHandler+0x1ea>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	e7b5      	b.n	8001aee <HAL_PCD_IRQHandler+0x1ea>
              ep->is_iso_incomplete = 0U;
 8001b82:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001b86:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b90:	4659      	mov	r1, fp
 8001b92:	4620      	mov	r0, r4
 8001b94:	f004 ff92 	bl	8006abc <HAL_PCD_ISOOUTIncompleteCallback>
 8001b98:	e7b1      	b.n	8001afe <HAL_PCD_IRQHandler+0x1fa>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001b9a:	6820      	ldr	r0, [r4, #0]
 8001b9c:	f003 fac8 	bl	8005130 <USB_ReadDevAllInEpInterrupt>
 8001ba0:	4680      	mov	r8, r0
      epnum = 0U;
 8001ba2:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001ba4:	e025      	b.n	8001bf2 <HAL_PCD_IRQHandler+0x2ee>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ba6:	4659      	mov	r1, fp
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f004 ff43 	bl	8006a34 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001bae:	f01a 0f08 	tst.w	sl, #8
 8001bb2:	d004      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x2ba>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001bb4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001bb8:	2208      	movs	r2, #8
 8001bba:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001bbe:	f01a 0f10 	tst.w	sl, #16
 8001bc2:	d004      	beq.n	8001bce <HAL_PCD_IRQHandler+0x2ca>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001bc4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001bc8:	2210      	movs	r2, #16
 8001bca:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001bce:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8001bd2:	d004      	beq.n	8001bde <HAL_PCD_IRQHandler+0x2da>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001bd4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001bd8:	2240      	movs	r2, #64	@ 0x40
 8001bda:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001bde:	f01a 0f02 	tst.w	sl, #2
 8001be2:	d140      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x362>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001be4:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8001be8:	d159      	bne.n	8001c9e <HAL_PCD_IRQHandler+0x39a>
        epnum++;
 8001bea:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001bee:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001bf2:	f1b8 0f00 	cmp.w	r8, #0
 8001bf6:	f43f aed4 	beq.w	80019a2 <HAL_PCD_IRQHandler+0x9e>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001bfa:	f018 0f01 	tst.w	r8, #1
 8001bfe:	d0f4      	beq.n	8001bea <HAL_PCD_IRQHandler+0x2e6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c00:	fa5f fb89 	uxtb.w	fp, r9
 8001c04:	4659      	mov	r1, fp
 8001c06:	6820      	ldr	r0, [r4, #0]
 8001c08:	f003 faa3 	bl	8005152 <USB_ReadDevInEPInterrupt>
 8001c0c:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c0e:	f010 0f01 	tst.w	r0, #1
 8001c12:	d0cc      	beq.n	8001bae <HAL_PCD_IRQHandler+0x2aa>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c14:	f009 020f 	and.w	r2, r9, #15
 8001c18:	2101      	movs	r1, #1
 8001c1a:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c20:	ea23 0302 	bic.w	r3, r3, r2
 8001c24:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c26:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001c2a:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 8001c2e:	79a3      	ldrb	r3, [r4, #6]
 8001c30:	428b      	cmp	r3, r1
 8001c32:	d1b8      	bne.n	8001ba6 <HAL_PCD_IRQHandler+0x2a2>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c34:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001c38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c3c:	6a1a      	ldr	r2, [r3, #32]
 8001c3e:	69d9      	ldr	r1, [r3, #28]
 8001c40:	440a      	add	r2, r1
 8001c42:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c44:	f1b9 0f00 	cmp.w	r9, #0
 8001c48:	d1ad      	bne.n	8001ba6 <HAL_PCD_IRQHandler+0x2a2>
 8001c4a:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001c4e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1a6      	bne.n	8001ba6 <HAL_PCD_IRQHandler+0x2a2>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c58:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	6820      	ldr	r0, [r4, #0]
 8001c60:	f003 facc 	bl	80051fc <USB_EP0_OutStart>
 8001c64:	e79f      	b.n	8001ba6 <HAL_PCD_IRQHandler+0x2a2>
            (void)USB_FlushTxFifo(USBx, epnum);
 8001c66:	4649      	mov	r1, r9
 8001c68:	4628      	mov	r0, r5
 8001c6a:	f002 fe9f 	bl	80049ac <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8001c6e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001c72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c76:	7ddb      	ldrb	r3, [r3, #23]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d005      	beq.n	8001c88 <HAL_PCD_IRQHandler+0x384>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c7c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001c80:	2202      	movs	r2, #2
 8001c82:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8001c86:	e7ad      	b.n	8001be4 <HAL_PCD_IRQHandler+0x2e0>
              ep->is_iso_incomplete = 0U;
 8001c88:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001c8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c90:	2200      	movs	r2, #0
 8001c92:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c94:	4659      	mov	r1, fp
 8001c96:	4620      	mov	r0, r4
 8001c98:	f004 ff16 	bl	8006ac8 <HAL_PCD_ISOINIncompleteCallback>
 8001c9c:	e7ee      	b.n	8001c7c <HAL_PCD_IRQHandler+0x378>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c9e:	4649      	mov	r1, r9
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7ff fb19 	bl	80012d8 <PCD_WriteEmptyTxFifo>
 8001ca6:	e7a0      	b.n	8001bea <HAL_PCD_IRQHandler+0x2e6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f023 0301 	bic.w	r3, r3, #1
 8001cae:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 8001cb0:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d008      	beq.n	8001cca <HAL_PCD_IRQHandler+0x3c6>
        HAL_PCD_ResumeCallback(hpcd);
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f004 fef9 	bl	8006ab0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001cbe:	6822      	ldr	r2, [r4, #0]
 8001cc0:	6953      	ldr	r3, [r2, #20]
 8001cc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001cc6:	6153      	str	r3, [r2, #20]
 8001cc8:	e671      	b.n	80019ae <HAL_PCD_IRQHandler+0xaa>
        hpcd->LPM_State = LPM_L0;
 8001cca:	2100      	movs	r1, #0
 8001ccc:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f000 f955 	bl	8001f80 <HAL_PCDEx_LPM_Callback>
 8001cd6:	e7f2      	b.n	8001cbe <HAL_PCD_IRQHandler+0x3ba>
        HAL_PCD_SuspendCallback(hpcd);
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f004 fed1 	bl	8006a80 <HAL_PCD_SuspendCallback>
 8001cde:	e671      	b.n	80019c4 <HAL_PCD_IRQHandler+0xc0>
        HAL_PCD_SuspendCallback(hpcd);
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f004 fecd 	bl	8006a80 <HAL_PCD_SuspendCallback>
 8001ce6:	e68e      	b.n	8001a06 <HAL_PCD_IRQHandler+0x102>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001cf0:	2110      	movs	r1, #16
 8001cf2:	6820      	ldr	r0, [r4, #0]
 8001cf4:	f002 fe5a 	bl	80049ac <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf8:	e01a      	b.n	8001d30 <HAL_PCD_IRQHandler+0x42c>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001cfa:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001cfe:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8001d02:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d06:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8001d0a:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001d0e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d12:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d16:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8001d1a:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001d1e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d22:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8001d26:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8001d2a:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d2e:	3601      	adds	r6, #1
 8001d30:	7923      	ldrb	r3, [r4, #4]
 8001d32:	42b3      	cmp	r3, r6
 8001d34:	d8e1      	bhi.n	8001cfa <HAL_PCD_IRQHandler+0x3f6>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001d3c:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d3e:	7be3      	ldrb	r3, [r4, #15]
 8001d40:	b1db      	cbz	r3, 8001d7a <HAL_PCD_IRQHandler+0x476>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d46:	f043 030b 	orr.w	r3, r3, #11
 8001d4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d50:	f043 030b 	orr.w	r3, r3, #11
 8001d54:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d56:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 8001d5a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001d5e:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d62:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001d66:	79a1      	ldrb	r1, [r4, #6]
 8001d68:	6820      	ldr	r0, [r4, #0]
 8001d6a:	f003 fa47 	bl	80051fc <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d6e:	6822      	ldr	r2, [r4, #0]
 8001d70:	6953      	ldr	r3, [r2, #20]
 8001d72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d76:	6153      	str	r3, [r2, #20]
 8001d78:	e64c      	b.n	8001a14 <HAL_PCD_IRQHandler+0x110>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	f242 032b 	movw	r3, #8235	@ 0x202b
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	f043 030b 	orr.w	r3, r3, #11
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	e7e3      	b.n	8001d56 <HAL_PCD_IRQHandler+0x452>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d8e:	6820      	ldr	r0, [r4, #0]
 8001d90:	f003 fa26 	bl	80051e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d94:	6820      	ldr	r0, [r4, #0]
 8001d96:	f002 ff1f 	bl	8004bd8 <USB_GetDevSpeed>
 8001d9a:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d9c:	6826      	ldr	r6, [r4, #0]
 8001d9e:	f000 ff33 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8001da2:	4601      	mov	r1, r0
 8001da4:	79e2      	ldrb	r2, [r4, #7]
 8001da6:	4630      	mov	r0, r6
 8001da8:	f002 fd82 	bl	80048b0 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001dac:	4620      	mov	r0, r4
 8001dae:	f004 fe52 	bl	8006a56 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001db2:	6822      	ldr	r2, [r4, #0]
 8001db4:	6953      	ldr	r3, [r2, #20]
 8001db6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dba:	6153      	str	r3, [r2, #20]
 8001dbc:	e631      	b.n	8001a22 <HAL_PCD_IRQHandler+0x11e>
      HAL_PCD_SOFCallback(hpcd);
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	f004 fe43 	bl	8006a4a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001dc4:	6822      	ldr	r2, [r4, #0]
 8001dc6:	6953      	ldr	r3, [r2, #20]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	6153      	str	r3, [r2, #20]
 8001dce:	e62f      	b.n	8001a30 <HAL_PCD_IRQHandler+0x12c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dd0:	3601      	adds	r6, #1
 8001dd2:	7923      	ldrb	r3, [r4, #4]
 8001dd4:	42b3      	cmp	r3, r6
 8001dd6:	d90c      	bls.n	8001df2 <HAL_PCD_IRQHandler+0x4ee>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001dd8:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001ddc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001de0:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d1f3      	bne.n	8001dd0 <HAL_PCD_IRQHandler+0x4cc>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001de8:	b2f1      	uxtb	r1, r6
 8001dea:	4620      	mov	r0, r4
 8001dec:	f7ff fd70 	bl	80018d0 <HAL_PCD_EP_Abort>
 8001df0:	e7ee      	b.n	8001dd0 <HAL_PCD_IRQHandler+0x4cc>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001df2:	6820      	ldr	r0, [r4, #0]
 8001df4:	f003 f990 	bl	8005118 <USB_ReadInterrupts>
 8001df8:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8001dfc:	d125      	bne.n	8001e4a <HAL_PCD_IRQHandler+0x546>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dfe:	6820      	ldr	r0, [r4, #0]
 8001e00:	f003 f98a 	bl	8005118 <USB_ReadInterrupts>
 8001e04:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8001e08:	d058      	beq.n	8001ebc <HAL_PCD_IRQHandler+0x5b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e026      	b.n	8001e5c <HAL_PCD_IRQHandler+0x558>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e0e:	3601      	adds	r6, #1
 8001e10:	7923      	ldrb	r3, [r4, #4]
 8001e12:	42b3      	cmp	r3, r6
 8001e14:	d91b      	bls.n	8001e4e <HAL_PCD_IRQHandler+0x54a>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e16:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001e1a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e1e:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001e22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001e26:	7e1b      	ldrb	r3, [r3, #24]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_PCD_IRQHandler+0x50a>
 8001e2c:	2a00      	cmp	r2, #0
 8001e2e:	daee      	bge.n	8001e0e <HAL_PCD_IRQHandler+0x50a>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e30:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001e34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001e38:	2201      	movs	r2, #1
 8001e3a:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e3c:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 8001e40:	b2c9      	uxtb	r1, r1
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7ff fd44 	bl	80018d0 <HAL_PCD_EP_Abort>
 8001e48:	e7e1      	b.n	8001e0e <HAL_PCD_IRQHandler+0x50a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e4a:	2601      	movs	r6, #1
 8001e4c:	e7e0      	b.n	8001e10 <HAL_PCD_IRQHandler+0x50c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e4e:	6822      	ldr	r2, [r4, #0]
 8001e50:	6953      	ldr	r3, [r2, #20]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e56:	6153      	str	r3, [r2, #20]
 8001e58:	e7d1      	b.n	8001dfe <HAL_PCD_IRQHandler+0x4fa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	7922      	ldrb	r2, [r4, #4]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d927      	bls.n	8001eb2 <HAL_PCD_IRQHandler+0x5ae>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e62:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8001e66:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e6a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001e6e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001e72:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 8001e76:	2a01      	cmp	r2, #1
 8001e78:	d1ef      	bne.n	8001e5a <HAL_PCD_IRQHandler+0x556>
 8001e7a:	2900      	cmp	r1, #0
 8001e7c:	daed      	bge.n	8001e5a <HAL_PCD_IRQHandler+0x556>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001e7e:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8001e82:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e86:	f012 0f01 	tst.w	r2, #1
 8001e8a:	d1e6      	bne.n	8001e5a <HAL_PCD_IRQHandler+0x556>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e8c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001e90:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001e94:	2101      	movs	r1, #1
 8001e96:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e9a:	69aa      	ldr	r2, [r5, #24]
 8001e9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ea0:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ea2:	696a      	ldr	r2, [r5, #20]
 8001ea4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001ea8:	d1d7      	bne.n	8001e5a <HAL_PCD_IRQHandler+0x556>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eb0:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001eb2:	6822      	ldr	r2, [r4, #0]
 8001eb4:	6953      	ldr	r3, [r2, #20]
 8001eb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eba:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ebc:	6820      	ldr	r0, [r4, #0]
 8001ebe:	f003 f92b 	bl	8005118 <USB_ReadInterrupts>
 8001ec2:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8001ec6:	d110      	bne.n	8001eea <HAL_PCD_IRQHandler+0x5e6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ec8:	6820      	ldr	r0, [r4, #0]
 8001eca:	f003 f925 	bl	8005118 <USB_ReadInterrupts>
 8001ece:	f010 0f04 	tst.w	r0, #4
 8001ed2:	f43f ad20 	beq.w	8001916 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001eda:	f015 0f04 	tst.w	r5, #4
 8001ede:	d10d      	bne.n	8001efc <HAL_PCD_IRQHandler+0x5f8>
      hpcd->Instance->GOTGINT |= RegVal;
 8001ee0:	6822      	ldr	r2, [r4, #0]
 8001ee2:	6853      	ldr	r3, [r2, #4]
 8001ee4:	432b      	orrs	r3, r5
 8001ee6:	6053      	str	r3, [r2, #4]
 8001ee8:	e515      	b.n	8001916 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8001eea:	4620      	mov	r0, r4
 8001eec:	f004 fdf2 	bl	8006ad4 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ef0:	6822      	ldr	r2, [r4, #0]
 8001ef2:	6953      	ldr	r3, [r2, #20]
 8001ef4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ef8:	6153      	str	r3, [r2, #20]
 8001efa:	e7e5      	b.n	8001ec8 <HAL_PCD_IRQHandler+0x5c4>
        HAL_PCD_DisconnectCallback(hpcd);
 8001efc:	4620      	mov	r0, r4
 8001efe:	f004 fdef 	bl	8006ae0 <HAL_PCD_DisconnectCallback>
 8001f02:	e7ed      	b.n	8001ee0 <HAL_PCD_IRQHandler+0x5dc>

08001f04 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001f04:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001f06:	6804      	ldr	r4, [r0, #0]
 8001f08:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 8001f0a:	b931      	cbnz	r1, 8001f1a <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001f0c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001f10:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8001f12:	2000      	movs	r0, #0
 8001f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001f1c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001f1e:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	e008      	b.n	8001f38 <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f26:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8001f2a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001f2e:	6849      	ldr	r1, [r1, #4]
 8001f30:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001f34:	3301      	adds	r3, #1
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001f3c:	428b      	cmp	r3, r1
 8001f3e:	d3f2      	bcc.n	8001f26 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001f40:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001f44:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 8001f48:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8001f4c:	6060      	str	r0, [r4, #4]
 8001f4e:	e7e0      	b.n	8001f12 <HAL_PCDEx_SetTxFiFo+0xe>

08001f50 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001f50:	6803      	ldr	r3, [r0, #0]
 8001f52:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8001f54:	2000      	movs	r0, #0
 8001f56:	4770      	bx	lr

08001f58 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f58:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f5a:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	f8c0 14d8 	str.w	r1, [r0, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001f62:	2000      	movs	r0, #0
 8001f64:	f883 04cc 	strb.w	r0, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f68:	6993      	ldr	r3, [r2, #24]
 8001f6a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f6e:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f70:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8001f72:	4b02      	ldr	r3, [pc, #8]	@ (8001f7c <HAL_PCDEx_ActivateLPM+0x24>)
 8001f74:	430b      	orrs	r3, r1
 8001f76:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	10000003 	.word	0x10000003

08001f80 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f84:	b538      	push	{r3, r4, r5, lr}
 8001f86:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001f88:	4b22      	ldr	r3, [pc, #136]	@ (8002014 <HAL_PWREx_ConfigSupply+0x90>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	2b06      	cmp	r3, #6
 8001f92:	d007      	beq.n	8001fa4 <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f94:	4b1f      	ldr	r3, [pc, #124]	@ (8002014 <HAL_PWREx_ConfigSupply+0x90>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f9c:	4283      	cmp	r3, r0
 8001f9e:	d036      	beq.n	800200e <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001fa0:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8001fa2:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8002014 <HAL_PWREx_ConfigSupply+0x90>)
 8001fa6:	68d3      	ldr	r3, [r2, #12]
 8001fa8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fac:	4303      	orrs	r3, r0
 8001fae:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8001fb0:	f7fe ff4e 	bl	8000e50 <HAL_GetTick>
 8001fb4:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fb6:	4b17      	ldr	r3, [pc, #92]	@ (8002014 <HAL_PWREx_ConfigSupply+0x90>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8001fbe:	d107      	bne.n	8001fd0 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fc0:	f7fe ff46 	bl	8000e50 <HAL_GetTick>
 8001fc4:	1b43      	subs	r3, r0, r5
 8001fc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fca:	d9f4      	bls.n	8001fb6 <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 8001fcc:	2001      	movs	r0, #1
 8001fce:	e7e8      	b.n	8001fa2 <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001fd0:	2c2e      	cmp	r4, #46	@ 0x2e
 8001fd2:	bf18      	it	ne
 8001fd4:	2c1e      	cmpne	r4, #30
 8001fd6:	d008      	beq.n	8001fea <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8001fd8:	2c2d      	cmp	r4, #45	@ 0x2d
 8001fda:	bf14      	ite	ne
 8001fdc:	2300      	movne	r3, #0
 8001fde:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001fe0:	2c1d      	cmp	r4, #29
 8001fe2:	d002      	beq.n	8001fea <HAL_PWREx_ConfigSupply+0x66>
 8001fe4:	b90b      	cbnz	r3, 8001fea <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	e7db      	b.n	8001fa2 <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 8001fea:	f7fe ff31 	bl	8000e50 <HAL_GetTick>
 8001fee:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <HAL_PWREx_ConfigSupply+0x90>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001ff8:	d107      	bne.n	800200a <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ffa:	f7fe ff29 	bl	8000e50 <HAL_GetTick>
 8001ffe:	1b00      	subs	r0, r0, r4
 8002000:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002004:	d9f4      	bls.n	8001ff0 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 8002006:	2001      	movs	r0, #1
 8002008:	e7cb      	b.n	8001fa2 <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 800200a:	2000      	movs	r0, #0
 800200c:	e7c9      	b.n	8001fa2 <HAL_PWREx_ConfigSupply+0x1e>
      return HAL_OK;
 800200e:	2000      	movs	r0, #0
 8002010:	e7c7      	b.n	8001fa2 <HAL_PWREx_ConfigSupply+0x1e>
 8002012:	bf00      	nop
 8002014:	58024800 	.word	0x58024800

08002018 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002018:	4a02      	ldr	r2, [pc, #8]	@ (8002024 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800201a:	68d3      	ldr	r3, [r2, #12]
 800201c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002020:	60d3      	str	r3, [r2, #12]
}
 8002022:	4770      	bx	lr
 8002024:	58024800 	.word	0x58024800

08002028 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002028:	2800      	cmp	r0, #0
 800202a:	f000 8339 	beq.w	80026a0 <HAL_RCC_OscConfig+0x678>
{
 800202e:	b538      	push	{r3, r4, r5, lr}
 8002030:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002032:	6803      	ldr	r3, [r0, #0]
 8002034:	f013 0f01 	tst.w	r3, #1
 8002038:	d025      	beq.n	8002086 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203a:	4a94      	ldr	r2, [pc, #592]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 800203c:	6913      	ldr	r3, [r2, #16]
 800203e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002042:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002044:	2b10      	cmp	r3, #16
 8002046:	d015      	beq.n	8002074 <HAL_RCC_OscConfig+0x4c>
 8002048:	2b18      	cmp	r3, #24
 800204a:	d00f      	beq.n	800206c <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204c:	6863      	ldr	r3, [r4, #4]
 800204e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002052:	d03f      	beq.n	80020d4 <HAL_RCC_OscConfig+0xac>
 8002054:	2b00      	cmp	r3, #0
 8002056:	d153      	bne.n	8002100 <HAL_RCC_OscConfig+0xd8>
 8002058:	4b8c      	ldr	r3, [pc, #560]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e038      	b.n	80020de <HAL_RCC_OscConfig+0xb6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800206c:	f002 0203 	and.w	r2, r2, #3
 8002070:	2a02      	cmp	r2, #2
 8002072:	d1eb      	bne.n	800204c <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	4b85      	ldr	r3, [pc, #532]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800207c:	d003      	beq.n	8002086 <HAL_RCC_OscConfig+0x5e>
 800207e:	6863      	ldr	r3, [r4, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 830f 	beq.w	80026a4 <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	f013 0f02 	tst.w	r3, #2
 800208c:	f000 80a1 	beq.w	80021d2 <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002090:	4a7e      	ldr	r2, [pc, #504]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 8002092:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002094:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002096:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800209a:	d05a      	beq.n	8002152 <HAL_RCC_OscConfig+0x12a>
 800209c:	2b18      	cmp	r3, #24
 800209e:	d055      	beq.n	800214c <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020a0:	68e3      	ldr	r3, [r4, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 80de 	beq.w	8002264 <HAL_RCC_OscConfig+0x23c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020a8:	4978      	ldr	r1, [pc, #480]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 80020aa:	680a      	ldr	r2, [r1, #0]
 80020ac:	f022 0219 	bic.w	r2, r2, #25
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7fe fecc 	bl	8000e50 <HAL_GetTick>
 80020b8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020ba:	4b74      	ldr	r3, [pc, #464]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f013 0f04 	tst.w	r3, #4
 80020c2:	f040 80ad 	bne.w	8002220 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c6:	f7fe fec3 	bl	8000e50 <HAL_GetTick>
 80020ca:	1b40      	subs	r0, r0, r5
 80020cc:	2802      	cmp	r0, #2
 80020ce:	d9f4      	bls.n	80020ba <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 80020d0:	2003      	movs	r0, #3
 80020d2:	e2ee      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d4:	4a6d      	ldr	r2, [pc, #436]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 80020d6:	6813      	ldr	r3, [r2, #0]
 80020d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020de:	6863      	ldr	r3, [r4, #4]
 80020e0:	b32b      	cbz	r3, 800212e <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 80020e2:	f7fe feb5 	bl	8000e50 <HAL_GetTick>
 80020e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020e8:	4b68      	ldr	r3, [pc, #416]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80020f0:	d1c9      	bne.n	8002086 <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f2:	f7fe fead 	bl	8000e50 <HAL_GetTick>
 80020f6:	1b40      	subs	r0, r0, r5
 80020f8:	2864      	cmp	r0, #100	@ 0x64
 80020fa:	d9f5      	bls.n	80020e8 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 80020fc:	2003      	movs	r0, #3
 80020fe:	e2d8      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002100:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002104:	d009      	beq.n	800211a <HAL_RCC_OscConfig+0xf2>
 8002106:	4b61      	ldr	r3, [pc, #388]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	e7e1      	b.n	80020de <HAL_RCC_OscConfig+0xb6>
 800211a:	4b5c      	ldr	r3, [pc, #368]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e7d7      	b.n	80020de <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 800212e:	f7fe fe8f 	bl	8000e50 <HAL_GetTick>
 8002132:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002134:	4b55      	ldr	r3, [pc, #340]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800213c:	d0a3      	beq.n	8002086 <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213e:	f7fe fe87 	bl	8000e50 <HAL_GetTick>
 8002142:	1b40      	subs	r0, r0, r5
 8002144:	2864      	cmp	r0, #100	@ 0x64
 8002146:	d9f5      	bls.n	8002134 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8002148:	2003      	movs	r0, #3
 800214a:	e2b2      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800214c:	f012 0f03 	tst.w	r2, #3
 8002150:	d1a6      	bne.n	80020a0 <HAL_RCC_OscConfig+0x78>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002152:	4b4e      	ldr	r3, [pc, #312]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f013 0f04 	tst.w	r3, #4
 800215a:	d003      	beq.n	8002164 <HAL_RCC_OscConfig+0x13c>
 800215c:	68e3      	ldr	r3, [r4, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 82a2 	beq.w	80026a8 <HAL_RCC_OscConfig+0x680>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002164:	4a49      	ldr	r2, [pc, #292]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 8002166:	6813      	ldr	r3, [r2, #0]
 8002168:	f023 0319 	bic.w	r3, r3, #25
 800216c:	68e1      	ldr	r1, [r4, #12]
 800216e:	430b      	orrs	r3, r1
 8002170:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002172:	f7fe fe6d 	bl	8000e50 <HAL_GetTick>
 8002176:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002178:	4b44      	ldr	r3, [pc, #272]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f013 0f04 	tst.w	r3, #4
 8002180:	d106      	bne.n	8002190 <HAL_RCC_OscConfig+0x168>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002182:	f7fe fe65 	bl	8000e50 <HAL_GetTick>
 8002186:	1b40      	subs	r0, r0, r5
 8002188:	2802      	cmp	r0, #2
 800218a:	d9f5      	bls.n	8002178 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 800218c:	2003      	movs	r0, #3
 800218e:	e290      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	f7fe fe78 	bl	8000e84 <HAL_GetREVID>
 8002194:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002198:	4298      	cmp	r0, r3
 800219a:	d812      	bhi.n	80021c2 <HAL_RCC_OscConfig+0x19a>
 800219c:	6922      	ldr	r2, [r4, #16]
 800219e:	2a40      	cmp	r2, #64	@ 0x40
 80021a0:	d007      	beq.n	80021b2 <HAL_RCC_OscConfig+0x18a>
 80021a2:	493a      	ldr	r1, [pc, #232]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 80021a4:	684b      	ldr	r3, [r1, #4]
 80021a6:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80021aa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80021ae:	604b      	str	r3, [r1, #4]
 80021b0:	e00f      	b.n	80021d2 <HAL_RCC_OscConfig+0x1aa>
 80021b2:	4a36      	ldr	r2, [pc, #216]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 80021b4:	6853      	ldr	r3, [r2, #4]
 80021b6:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80021ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021be:	6053      	str	r3, [r2, #4]
 80021c0:	e007      	b.n	80021d2 <HAL_RCC_OscConfig+0x1aa>
 80021c2:	4a32      	ldr	r2, [pc, #200]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 80021c4:	6853      	ldr	r3, [r2, #4]
 80021c6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80021ca:	6921      	ldr	r1, [r4, #16]
 80021cc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80021d0:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	f013 0f10 	tst.w	r3, #16
 80021d8:	f000 8088 	beq.w	80022ec <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021dc:	4a2b      	ldr	r2, [pc, #172]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 80021de:	6913      	ldr	r3, [r2, #16]
 80021e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d056      	beq.n	8002298 <HAL_RCC_OscConfig+0x270>
 80021ea:	2b18      	cmp	r3, #24
 80021ec:	d050      	beq.n	8002290 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80021ee:	69e3      	ldr	r3, [r4, #28]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80b8 	beq.w	8002366 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80021f6:	4a25      	ldr	r2, [pc, #148]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 80021f8:	6813      	ldr	r3, [r2, #0]
 80021fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7fe fe26 	bl	8000e50 <HAL_GetTick>
 8002204:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002206:	4b21      	ldr	r3, [pc, #132]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800220e:	f040 8088 	bne.w	8002322 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002212:	f7fe fe1d 	bl	8000e50 <HAL_GetTick>
 8002216:	1b40      	subs	r0, r0, r5
 8002218:	2802      	cmp	r0, #2
 800221a:	d9f4      	bls.n	8002206 <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 800221c:	2003      	movs	r0, #3
 800221e:	e248      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002220:	f7fe fe30 	bl	8000e84 <HAL_GetREVID>
 8002224:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002228:	4298      	cmp	r0, r3
 800222a:	d812      	bhi.n	8002252 <HAL_RCC_OscConfig+0x22a>
 800222c:	6922      	ldr	r2, [r4, #16]
 800222e:	2a40      	cmp	r2, #64	@ 0x40
 8002230:	d007      	beq.n	8002242 <HAL_RCC_OscConfig+0x21a>
 8002232:	4916      	ldr	r1, [pc, #88]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 8002234:	684b      	ldr	r3, [r1, #4]
 8002236:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800223a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800223e:	604b      	str	r3, [r1, #4]
 8002240:	e7c7      	b.n	80021d2 <HAL_RCC_OscConfig+0x1aa>
 8002242:	4a12      	ldr	r2, [pc, #72]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 8002244:	6853      	ldr	r3, [r2, #4]
 8002246:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800224a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800224e:	6053      	str	r3, [r2, #4]
 8002250:	e7bf      	b.n	80021d2 <HAL_RCC_OscConfig+0x1aa>
 8002252:	4a0e      	ldr	r2, [pc, #56]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 8002254:	6853      	ldr	r3, [r2, #4]
 8002256:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800225a:	6921      	ldr	r1, [r4, #16]
 800225c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002260:	6053      	str	r3, [r2, #4]
 8002262:	e7b6      	b.n	80021d2 <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 8002264:	4a09      	ldr	r2, [pc, #36]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 8002266:	6813      	ldr	r3, [r2, #0]
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800226e:	f7fe fdef 	bl	8000e50 <HAL_GetTick>
 8002272:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002274:	4b05      	ldr	r3, [pc, #20]	@ (800228c <HAL_RCC_OscConfig+0x264>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f013 0f04 	tst.w	r3, #4
 800227c:	d0a9      	beq.n	80021d2 <HAL_RCC_OscConfig+0x1aa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800227e:	f7fe fde7 	bl	8000e50 <HAL_GetTick>
 8002282:	1b40      	subs	r0, r0, r5
 8002284:	2802      	cmp	r0, #2
 8002286:	d9f5      	bls.n	8002274 <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 8002288:	2003      	movs	r0, #3
 800228a:	e212      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
 800228c:	58024400 	.word	0x58024400
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002290:	f002 0203 	and.w	r2, r2, #3
 8002294:	2a01      	cmp	r2, #1
 8002296:	d1aa      	bne.n	80021ee <HAL_RCC_OscConfig+0x1c6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002298:	4ba1      	ldr	r3, [pc, #644]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_OscConfig+0x282>
 80022a2:	69e3      	ldr	r3, [r4, #28]
 80022a4:	2b80      	cmp	r3, #128	@ 0x80
 80022a6:	f040 8201 	bne.w	80026ac <HAL_RCC_OscConfig+0x684>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022aa:	f7fe fdeb 	bl	8000e84 <HAL_GetREVID>
 80022ae:	f241 0303 	movw	r3, #4099	@ 0x1003
 80022b2:	4298      	cmp	r0, r3
 80022b4:	d812      	bhi.n	80022dc <HAL_RCC_OscConfig+0x2b4>
 80022b6:	6a22      	ldr	r2, [r4, #32]
 80022b8:	2a20      	cmp	r2, #32
 80022ba:	d007      	beq.n	80022cc <HAL_RCC_OscConfig+0x2a4>
 80022bc:	4998      	ldr	r1, [pc, #608]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 80022be:	684b      	ldr	r3, [r1, #4]
 80022c0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80022c4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80022c8:	604b      	str	r3, [r1, #4]
 80022ca:	e00f      	b.n	80022ec <HAL_RCC_OscConfig+0x2c4>
 80022cc:	4a94      	ldr	r2, [pc, #592]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 80022ce:	6853      	ldr	r3, [r2, #4]
 80022d0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80022d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80022d8:	6053      	str	r3, [r2, #4]
 80022da:	e007      	b.n	80022ec <HAL_RCC_OscConfig+0x2c4>
 80022dc:	4a90      	ldr	r2, [pc, #576]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 80022de:	68d3      	ldr	r3, [r2, #12]
 80022e0:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80022e4:	6a21      	ldr	r1, [r4, #32]
 80022e6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80022ea:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	f013 0f08 	tst.w	r3, #8
 80022f2:	d060      	beq.n	80023b6 <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022f4:	6963      	ldr	r3, [r4, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d049      	beq.n	800238e <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fa:	4a89      	ldr	r2, [pc, #548]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 80022fc:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002304:	f7fe fda4 	bl	8000e50 <HAL_GetTick>
 8002308:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800230a:	4b85      	ldr	r3, [pc, #532]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 800230c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800230e:	f013 0f02 	tst.w	r3, #2
 8002312:	d150      	bne.n	80023b6 <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002314:	f7fe fd9c 	bl	8000e50 <HAL_GetTick>
 8002318:	1b40      	subs	r0, r0, r5
 800231a:	2802      	cmp	r0, #2
 800231c:	d9f5      	bls.n	800230a <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 800231e:	2003      	movs	r0, #3
 8002320:	e1c7      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002322:	f7fe fdaf 	bl	8000e84 <HAL_GetREVID>
 8002326:	f241 0303 	movw	r3, #4099	@ 0x1003
 800232a:	4298      	cmp	r0, r3
 800232c:	d812      	bhi.n	8002354 <HAL_RCC_OscConfig+0x32c>
 800232e:	6a22      	ldr	r2, [r4, #32]
 8002330:	2a20      	cmp	r2, #32
 8002332:	d007      	beq.n	8002344 <HAL_RCC_OscConfig+0x31c>
 8002334:	497a      	ldr	r1, [pc, #488]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 8002336:	684b      	ldr	r3, [r1, #4]
 8002338:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800233c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002340:	604b      	str	r3, [r1, #4]
 8002342:	e7d3      	b.n	80022ec <HAL_RCC_OscConfig+0x2c4>
 8002344:	4a76      	ldr	r2, [pc, #472]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 8002346:	6853      	ldr	r3, [r2, #4]
 8002348:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800234c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002350:	6053      	str	r3, [r2, #4]
 8002352:	e7cb      	b.n	80022ec <HAL_RCC_OscConfig+0x2c4>
 8002354:	4a72      	ldr	r2, [pc, #456]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 8002356:	68d3      	ldr	r3, [r2, #12]
 8002358:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800235c:	6a21      	ldr	r1, [r4, #32]
 800235e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002362:	60d3      	str	r3, [r2, #12]
 8002364:	e7c2      	b.n	80022ec <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 8002366:	4a6e      	ldr	r2, [pc, #440]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 8002368:	6813      	ldr	r3, [r2, #0]
 800236a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800236e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002370:	f7fe fd6e 	bl	8000e50 <HAL_GetTick>
 8002374:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002376:	4b6a      	ldr	r3, [pc, #424]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800237e:	d0b5      	beq.n	80022ec <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002380:	f7fe fd66 	bl	8000e50 <HAL_GetTick>
 8002384:	1b40      	subs	r0, r0, r5
 8002386:	2802      	cmp	r0, #2
 8002388:	d9f5      	bls.n	8002376 <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 800238a:	2003      	movs	r0, #3
 800238c:	e191      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238e:	4a64      	ldr	r2, [pc, #400]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 8002390:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002398:	f7fe fd5a 	bl	8000e50 <HAL_GetTick>
 800239c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800239e:	4b60      	ldr	r3, [pc, #384]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 80023a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a2:	f013 0f02 	tst.w	r3, #2
 80023a6:	d006      	beq.n	80023b6 <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a8:	f7fe fd52 	bl	8000e50 <HAL_GetTick>
 80023ac:	1b40      	subs	r0, r0, r5
 80023ae:	2802      	cmp	r0, #2
 80023b0:	d9f5      	bls.n	800239e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023b2:	2003      	movs	r0, #3
 80023b4:	e17d      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	f013 0f20 	tst.w	r3, #32
 80023bc:	d029      	beq.n	8002412 <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80023be:	69a3      	ldr	r3, [r4, #24]
 80023c0:	b19b      	cbz	r3, 80023ea <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023c2:	4a57      	ldr	r2, [pc, #348]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 80023c4:	6813      	ldr	r3, [r2, #0]
 80023c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023cc:	f7fe fd40 	bl	8000e50 <HAL_GetTick>
 80023d0:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023d2:	4b53      	ldr	r3, [pc, #332]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80023da:	d11a      	bne.n	8002412 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023dc:	f7fe fd38 	bl	8000e50 <HAL_GetTick>
 80023e0:	1b40      	subs	r0, r0, r5
 80023e2:	2802      	cmp	r0, #2
 80023e4:	d9f5      	bls.n	80023d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80023e6:	2003      	movs	r0, #3
 80023e8:	e163      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023ea:	4a4d      	ldr	r2, [pc, #308]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 80023ec:	6813      	ldr	r3, [r2, #0]
 80023ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023f4:	f7fe fd2c 	bl	8000e50 <HAL_GetTick>
 80023f8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023fa:	4b49      	ldr	r3, [pc, #292]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8002402:	d006      	beq.n	8002412 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002404:	f7fe fd24 	bl	8000e50 <HAL_GetTick>
 8002408:	1b40      	subs	r0, r0, r5
 800240a:	2802      	cmp	r0, #2
 800240c:	d9f5      	bls.n	80023fa <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800240e:	2003      	movs	r0, #3
 8002410:	e14f      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	f013 0f04 	tst.w	r3, #4
 8002418:	d121      	bne.n	800245e <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800241a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 8147 	beq.w	80026b0 <HAL_RCC_OscConfig+0x688>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002422:	4a3f      	ldr	r2, [pc, #252]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 8002424:	6912      	ldr	r2, [r2, #16]
 8002426:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800242a:	2a18      	cmp	r2, #24
 800242c:	f000 80ee 	beq.w	800260c <HAL_RCC_OscConfig+0x5e4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002430:	2b02      	cmp	r3, #2
 8002432:	d079      	beq.n	8002528 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002434:	4a3a      	ldr	r2, [pc, #232]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 8002436:	6813      	ldr	r3, [r2, #0]
 8002438:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800243c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7fe fd07 	bl	8000e50 <HAL_GetTick>
 8002442:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002444:	4b36      	ldr	r3, [pc, #216]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800244c:	f000 80dc 	beq.w	8002608 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002450:	f7fe fcfe 	bl	8000e50 <HAL_GetTick>
 8002454:	1b00      	subs	r0, r0, r4
 8002456:	2802      	cmp	r0, #2
 8002458:	d9f4      	bls.n	8002444 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800245a:	2003      	movs	r0, #3
 800245c:	e129      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
    PWR->CR1 |= PWR_CR1_DBP;
 800245e:	4a31      	ldr	r2, [pc, #196]	@ (8002524 <HAL_RCC_OscConfig+0x4fc>)
 8002460:	6813      	ldr	r3, [r2, #0]
 8002462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002466:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002468:	f7fe fcf2 	bl	8000e50 <HAL_GetTick>
 800246c:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800246e:	4b2d      	ldr	r3, [pc, #180]	@ (8002524 <HAL_RCC_OscConfig+0x4fc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x45e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002478:	f7fe fcea 	bl	8000e50 <HAL_GetTick>
 800247c:	1b40      	subs	r0, r0, r5
 800247e:	2864      	cmp	r0, #100	@ 0x64
 8002480:	d9f5      	bls.n	800246e <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 8002482:	2003      	movs	r0, #3
 8002484:	e115      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002486:	68a3      	ldr	r3, [r4, #8]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d00a      	beq.n	80024a2 <HAL_RCC_OscConfig+0x47a>
 800248c:	bb0b      	cbnz	r3, 80024d2 <HAL_RCC_OscConfig+0x4aa>
 800248e:	4b24      	ldr	r3, [pc, #144]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 8002490:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002492:	f022 0201 	bic.w	r2, r2, #1
 8002496:	671a      	str	r2, [r3, #112]	@ 0x70
 8002498:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800249a:	f022 0204 	bic.w	r2, r2, #4
 800249e:	671a      	str	r2, [r3, #112]	@ 0x70
 80024a0:	e004      	b.n	80024ac <HAL_RCC_OscConfig+0x484>
 80024a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 80024a4:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ac:	68a3      	ldr	r3, [r4, #8]
 80024ae:	b333      	cbz	r3, 80024fe <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 80024b0:	f7fe fcce 	bl	8000e50 <HAL_GetTick>
 80024b4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ba:	f013 0f02 	tst.w	r3, #2
 80024be:	d1ac      	bne.n	800241a <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c0:	f7fe fcc6 	bl	8000e50 <HAL_GetTick>
 80024c4:	1b40      	subs	r0, r0, r5
 80024c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80024ca:	4298      	cmp	r0, r3
 80024cc:	d9f3      	bls.n	80024b6 <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 80024ce:	2003      	movs	r0, #3
 80024d0:	e0ef      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d2:	2b05      	cmp	r3, #5
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_OscConfig+0x4c2>
 80024d6:	4b12      	ldr	r3, [pc, #72]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 80024d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80024da:	f022 0201 	bic.w	r2, r2, #1
 80024de:	671a      	str	r2, [r3, #112]	@ 0x70
 80024e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80024e2:	f022 0204 	bic.w	r2, r2, #4
 80024e6:	671a      	str	r2, [r3, #112]	@ 0x70
 80024e8:	e7e0      	b.n	80024ac <HAL_RCC_OscConfig+0x484>
 80024ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 80024ec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80024ee:	f042 0204 	orr.w	r2, r2, #4
 80024f2:	671a      	str	r2, [r3, #112]	@ 0x70
 80024f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	671a      	str	r2, [r3, #112]	@ 0x70
 80024fc:	e7d6      	b.n	80024ac <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 80024fe:	f7fe fca7 	bl	8000e50 <HAL_GetTick>
 8002502:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002504:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <HAL_RCC_OscConfig+0x4f8>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002508:	f013 0f02 	tst.w	r3, #2
 800250c:	d085      	beq.n	800241a <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fe fc9f 	bl	8000e50 <HAL_GetTick>
 8002512:	1b40      	subs	r0, r0, r5
 8002514:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002518:	4298      	cmp	r0, r3
 800251a:	d9f3      	bls.n	8002504 <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 800251c:	2003      	movs	r0, #3
 800251e:	e0c8      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
 8002520:	58024400 	.word	0x58024400
 8002524:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8002528:	4a69      	ldr	r2, [pc, #420]	@ (80026d0 <HAL_RCC_OscConfig+0x6a8>)
 800252a:	6813      	ldr	r3, [r2, #0]
 800252c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002530:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002532:	f7fe fc8d 	bl	8000e50 <HAL_GetTick>
 8002536:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002538:	4b65      	ldr	r3, [pc, #404]	@ (80026d0 <HAL_RCC_OscConfig+0x6a8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002540:	d006      	beq.n	8002550 <HAL_RCC_OscConfig+0x528>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002542:	f7fe fc85 	bl	8000e50 <HAL_GetTick>
 8002546:	1b40      	subs	r0, r0, r5
 8002548:	2802      	cmp	r0, #2
 800254a:	d9f5      	bls.n	8002538 <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 800254c:	2003      	movs	r0, #3
 800254e:	e0b0      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002550:	4b5f      	ldr	r3, [pc, #380]	@ (80026d0 <HAL_RCC_OscConfig+0x6a8>)
 8002552:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002554:	4a5f      	ldr	r2, [pc, #380]	@ (80026d4 <HAL_RCC_OscConfig+0x6ac>)
 8002556:	400a      	ands	r2, r1
 8002558:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800255a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800255c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8002560:	430a      	orrs	r2, r1
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28
 8002564:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002566:	3a01      	subs	r2, #1
 8002568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800256c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800256e:	3901      	subs	r1, #1
 8002570:	0249      	lsls	r1, r1, #9
 8002572:	b289      	uxth	r1, r1
 8002574:	430a      	orrs	r2, r1
 8002576:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002578:	3901      	subs	r1, #1
 800257a:	0409      	lsls	r1, r1, #16
 800257c:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8002580:	430a      	orrs	r2, r1
 8002582:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8002584:	3901      	subs	r1, #1
 8002586:	0609      	lsls	r1, r1, #24
 8002588:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 800258c:	430a      	orrs	r2, r1
 800258e:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8002590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800259a:	f36f 02cf 	bfc	r2, #3, #13
 800259e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80025a0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80025a4:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80025a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a8:	f022 020c 	bic.w	r2, r2, #12
 80025ac:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80025ae:	430a      	orrs	r2, r1
 80025b0:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80025b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b4:	f022 0202 	bic.w	r2, r2, #2
 80025b8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80025ba:	430a      	orrs	r2, r1
 80025bc:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80025be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80025c4:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80025cc:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80025ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80025d4:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80025d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80025e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025e6:	f7fe fc33 	bl	8000e50 <HAL_GetTick>
 80025ea:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025ec:	4b38      	ldr	r3, [pc, #224]	@ (80026d0 <HAL_RCC_OscConfig+0x6a8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_OscConfig+0x5dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe fc2b 	bl	8000e50 <HAL_GetTick>
 80025fa:	1b00      	subs	r0, r0, r4
 80025fc:	2802      	cmp	r0, #2
 80025fe:	d9f5      	bls.n	80025ec <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 8002600:	2003      	movs	r0, #3
 8002602:	e056      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8002604:	2000      	movs	r0, #0
 8002606:	e054      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
 8002608:	2000      	movs	r0, #0
 800260a:	e052      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
      temp1_pllckcfg = RCC->PLLCKSELR;
 800260c:	4a30      	ldr	r2, [pc, #192]	@ (80026d0 <HAL_RCC_OscConfig+0x6a8>)
 800260e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002610:	6b10      	ldr	r0, [r2, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002612:	2b01      	cmp	r3, #1
 8002614:	d04e      	beq.n	80026b4 <HAL_RCC_OscConfig+0x68c>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	f001 0303 	and.w	r3, r1, #3
 800261a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261c:	4293      	cmp	r3, r2
 800261e:	d14b      	bne.n	80026b8 <HAL_RCC_OscConfig+0x690>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002620:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8002624:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	4299      	cmp	r1, r3
 8002628:	d148      	bne.n	80026bc <HAL_RCC_OscConfig+0x694>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800262a:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800262e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002630:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d144      	bne.n	80026c0 <HAL_RCC_OscConfig+0x698>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002636:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800263a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800263c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d140      	bne.n	80026c4 <HAL_RCC_OscConfig+0x69c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002642:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8002646:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002648:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d13c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x6a0>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800264e:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8002652:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002654:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002656:	4298      	cmp	r0, r3
 8002658:	d138      	bne.n	80026cc <HAL_RCC_OscConfig+0x6a4>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800265a:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <HAL_RCC_OscConfig+0x6a8>)
 800265c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002662:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002664:	429a      	cmp	r2, r3
 8002666:	d101      	bne.n	800266c <HAL_RCC_OscConfig+0x644>
  return HAL_OK;
 8002668:	2000      	movs	r0, #0
 800266a:	e022      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_DISABLE();
 800266c:	4a18      	ldr	r2, [pc, #96]	@ (80026d0 <HAL_RCC_OscConfig+0x6a8>)
 800266e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8002676:	f7fe fbeb 	bl	8000e50 <HAL_GetTick>
 800267a:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800267c:	f7fe fbe8 	bl	8000e50 <HAL_GetTick>
 8002680:	42a8      	cmp	r0, r5
 8002682:	d0fb      	beq.n	800267c <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002684:	4a12      	ldr	r2, [pc, #72]	@ (80026d0 <HAL_RCC_OscConfig+0x6a8>)
 8002686:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002688:	f36f 03cf 	bfc	r3, #3, #13
 800268c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800268e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002692:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8002694:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  return HAL_OK;
 800269c:	2000      	movs	r0, #0
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
    return HAL_ERROR;
 80026a0:	2001      	movs	r0, #1
}
 80026a2:	4770      	bx	lr
        return HAL_ERROR;
 80026a4:	2001      	movs	r0, #1
 80026a6:	e004      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 80026a8:	2001      	movs	r0, #1
 80026aa:	e002      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 80026ac:	2001      	movs	r0, #1
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
  return HAL_OK;
 80026b0:	2000      	movs	r0, #0
}
 80026b2:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 80026b4:	2001      	movs	r0, #1
 80026b6:	e7fc      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
 80026b8:	2001      	movs	r0, #1
 80026ba:	e7fa      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
 80026bc:	2001      	movs	r0, #1
 80026be:	e7f8      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
 80026c0:	2001      	movs	r0, #1
 80026c2:	e7f6      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
 80026c4:	2001      	movs	r0, #1
 80026c6:	e7f4      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
 80026c8:	2001      	movs	r0, #1
 80026ca:	e7f2      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
 80026cc:	2001      	movs	r0, #1
 80026ce:	e7f0      	b.n	80026b2 <HAL_RCC_OscConfig+0x68a>
 80026d0:	58024400 	.word	0x58024400
 80026d4:	fffffc0c 	.word	0xfffffc0c

080026d8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	460c      	mov	r4, r1
 80026de:	4615      	mov	r5, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80026e0:	bb10      	cbnz	r0, 8002728 <HAL_RCC_MCOConfig+0x50>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80026e2:	4e23      	ldr	r6, [pc, #140]	@ (8002770 <HAL_RCC_MCOConfig+0x98>)
 80026e4:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 80026f0:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	9b01      	ldr	r3, [sp, #4]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80026fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002700:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	2302      	movs	r3, #2
 8002704:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002706:	2303      	movs	r3, #3
 8002708:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800270e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002710:	a903      	add	r1, sp, #12
 8002712:	4818      	ldr	r0, [pc, #96]	@ (8002774 <HAL_RCC_MCOConfig+0x9c>)
 8002714:	f7fe fcb2 	bl	800107c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002718:	6933      	ldr	r3, [r6, #16]
 800271a:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800271e:	4325      	orrs	r5, r4
 8002720:	431d      	orrs	r5, r3
 8002722:	6135      	str	r5, [r6, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8002724:	b008      	add	sp, #32
 8002726:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8002728:	4e11      	ldr	r6, [pc, #68]	@ (8002770 <HAL_RCC_MCOConfig+0x98>)
 800272a:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 800272e:	f043 0304 	orr.w	r3, r3, #4
 8002732:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 8002736:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	9302      	str	r3, [sp, #8]
 8002740:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002742:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002746:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274c:	2303      	movs	r3, #3
 800274e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002754:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002756:	a903      	add	r1, sp, #12
 8002758:	4807      	ldr	r0, [pc, #28]	@ (8002778 <HAL_RCC_MCOConfig+0xa0>)
 800275a:	f7fe fc8f 	bl	800107c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800275e:	6933      	ldr	r3, [r6, #16]
 8002760:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8002764:	ea44 14c5 	orr.w	r4, r4, r5, lsl #7
 8002768:	431c      	orrs	r4, r3
 800276a:	6134      	str	r4, [r6, #16]
}
 800276c:	e7da      	b.n	8002724 <HAL_RCC_MCOConfig+0x4c>
 800276e:	bf00      	nop
 8002770:	58024400 	.word	0x58024400
 8002774:	58020000 	.word	0x58020000
 8002778:	58020800 	.word	0x58020800

0800277c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800277c:	4b75      	ldr	r3, [pc, #468]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002784:	2b10      	cmp	r3, #16
 8002786:	f000 80de 	beq.w	8002946 <HAL_RCC_GetSysClockFreq+0x1ca>
 800278a:	2b18      	cmp	r3, #24
 800278c:	d00f      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x32>
 800278e:	2b00      	cmp	r3, #0
 8002790:	f040 80db 	bne.w	800294a <HAL_RCC_GetSysClockFreq+0x1ce>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002794:	4b6f      	ldr	r3, [pc, #444]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f013 0f20 	tst.w	r3, #32
 800279c:	f000 80d7 	beq.w	800294e <HAL_RCC_GetSysClockFreq+0x1d2>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027a0:	4b6c      	ldr	r3, [pc, #432]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80027a8:	486b      	ldr	r0, [pc, #428]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80027aa:	40d8      	lsrs	r0, r3
 80027ac:	4770      	bx	lr
{
 80027ae:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027b0:	4b68      	ldr	r3, [pc, #416]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80027b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027b4:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80027b8:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80027ba:	f3c4 1005 	ubfx	r0, r4, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80027be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027c0:	f001 0101 	and.w	r1, r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80027c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	ee07 3a90 	vmov	s15, r3
 80027d2:	eef8 7a67 	vcvt.f32.u32	s15, s15

      if (pllm != 0U)
 80027d6:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 80027da:	d077      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x150>
      {
        switch (pllsource)
 80027dc:	2a01      	cmp	r2, #1
 80027de:	d04a      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0xfa>
 80027e0:	2a02      	cmp	r2, #2
 80027e2:	d076      	beq.n	80028d2 <HAL_RCC_GetSysClockFreq+0x156>
 80027e4:	2a00      	cmp	r2, #0
 80027e6:	f040 8091 	bne.w	800290c <HAL_RCC_GetSysClockFreq+0x190>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f013 0f20 	tst.w	r3, #32
 80027f2:	d023      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0xc0>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027f4:	4957      	ldr	r1, [pc, #348]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80027f6:	680a      	ldr	r2, [r1, #0]
 80027f8:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80027fc:	4b56      	ldr	r3, [pc, #344]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80027fe:	40d3      	lsrs	r3, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002800:	ee07 3a10 	vmov	s14, r3
 8002804:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002808:	ee07 0a10 	vmov	s14, r0
 800280c:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8002810:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8002814:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8002816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800281a:	ee06 3a90 	vmov	s13, r3
 800281e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002822:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 800295c <HAL_RCC_GetSysClockFreq+0x1e0>
 8002826:	ee67 7a86 	vmul.f32	s15, s15, s12
 800282a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800282e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800283a:	e038      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x132>
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800283c:	ee07 0a10 	vmov	s14, r0
 8002840:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002844:	ed9f 6a46 	vldr	s12, [pc, #280]	@ 8002960 <HAL_RCC_GetSysClockFreq+0x1e4>
 8002848:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800284c:	4b41      	ldr	r3, [pc, #260]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002854:	ee06 3a90 	vmov	s13, r3
 8002858:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800285c:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 800295c <HAL_RCC_GetSysClockFreq+0x1e0>
 8002860:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002864:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002868:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800286c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002870:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002874:	e01b      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x132>
            }
            break;

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002876:	ee07 0a10 	vmov	s14, r0
 800287a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800287e:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 8002964 <HAL_RCC_GetSysClockFreq+0x1e8>
 8002882:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002886:	4b33      	ldr	r3, [pc, #204]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800288e:	ee06 3a90 	vmov	s13, r3
 8002892:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002896:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 800295c <HAL_RCC_GetSysClockFreq+0x1e0>
 800289a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800289e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028aa:	ee27 7a27 	vmul.f32	s14, s14, s15

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80028ae:	4b29      	ldr	r3, [pc, #164]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80028b6:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80028c4:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80028c8:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80028cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028d0:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028d2:	ee07 0a10 	vmov	s14, r0
 80028d6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80028da:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 8002968 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028de:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80028e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ea:	ee06 3a90 	vmov	s13, r3
 80028ee:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80028f2:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800295c <HAL_RCC_GetSysClockFreq+0x1e0>
 80028f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80028fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002906:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 800290a:	e7d0      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x132>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800290c:	ee07 0a10 	vmov	s14, r0
 8002910:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002914:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8002964 <HAL_RCC_GetSysClockFreq+0x1e8>
 8002918:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800291c:	4b0d      	ldr	r3, [pc, #52]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002924:	ee06 3a90 	vmov	s13, r3
 8002928:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800292c:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 800295c <HAL_RCC_GetSysClockFreq+0x1e0>
 8002930:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002938:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800293c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002940:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 8002944:	e7b3      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x132>
      sysclockfreq = HSE_VALUE;
 8002946:	4809      	ldr	r0, [pc, #36]	@ (800296c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002948:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800294a:	4809      	ldr	r0, [pc, #36]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800294c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800294e:	4802      	ldr	r0, [pc, #8]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	58024400 	.word	0x58024400
 8002958:	03d09000 	.word	0x03d09000
 800295c:	39000000 	.word	0x39000000
 8002960:	4c742400 	.word	0x4c742400
 8002964:	4a742400 	.word	0x4a742400
 8002968:	4bbebc20 	.word	0x4bbebc20
 800296c:	017d7840 	.word	0x017d7840
 8002970:	003d0900 	.word	0x003d0900

08002974 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002974:	2800      	cmp	r0, #0
 8002976:	f000 8132 	beq.w	8002bde <HAL_RCC_ClockConfig+0x26a>
{
 800297a:	b570      	push	{r4, r5, r6, lr}
 800297c:	460d      	mov	r5, r1
 800297e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002980:	4b9b      	ldr	r3, [pc, #620]	@ (8002bf0 <HAL_RCC_ClockConfig+0x27c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	428b      	cmp	r3, r1
 800298a:	d20b      	bcs.n	80029a4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298c:	4a98      	ldr	r2, [pc, #608]	@ (8002bf0 <HAL_RCC_ClockConfig+0x27c>)
 800298e:	6813      	ldr	r3, [r2, #0]
 8002990:	f023 030f 	bic.w	r3, r3, #15
 8002994:	430b      	orrs	r3, r1
 8002996:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002998:	6813      	ldr	r3, [r2, #0]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	428b      	cmp	r3, r1
 80029a0:	f040 811f 	bne.w	8002be2 <HAL_RCC_ClockConfig+0x26e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	f013 0f04 	tst.w	r3, #4
 80029aa:	d00c      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029ac:	6922      	ldr	r2, [r4, #16]
 80029ae:	4b91      	ldr	r3, [pc, #580]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d905      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029ba:	498e      	ldr	r1, [pc, #568]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 80029bc:	698b      	ldr	r3, [r1, #24]
 80029be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029c2:	431a      	orrs	r2, r3
 80029c4:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	f013 0f08 	tst.w	r3, #8
 80029cc:	d00c      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x74>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029ce:	6962      	ldr	r2, [r4, #20]
 80029d0:	4b88      	ldr	r3, [pc, #544]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029d8:	429a      	cmp	r2, r3
 80029da:	d905      	bls.n	80029e8 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029dc:	4985      	ldr	r1, [pc, #532]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 80029de:	69cb      	ldr	r3, [r1, #28]
 80029e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029e4:	431a      	orrs	r2, r3
 80029e6:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	f013 0f10 	tst.w	r3, #16
 80029ee:	d00c      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029f0:	69a2      	ldr	r2, [r4, #24]
 80029f2:	4b80      	ldr	r3, [pc, #512]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d905      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029fe:	497d      	ldr	r1, [pc, #500]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002a00:	69cb      	ldr	r3, [r1, #28]
 8002a02:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002a06:	431a      	orrs	r2, r3
 8002a08:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	f013 0f20 	tst.w	r3, #32
 8002a10:	d00c      	beq.n	8002a2c <HAL_RCC_ClockConfig+0xb8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a12:	69e2      	ldr	r2, [r4, #28]
 8002a14:	4b77      	ldr	r3, [pc, #476]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d905      	bls.n	8002a2c <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a20:	4974      	ldr	r1, [pc, #464]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002a22:	6a0b      	ldr	r3, [r1, #32]
 8002a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	f013 0f02 	tst.w	r3, #2
 8002a32:	d00c      	beq.n	8002a4e <HAL_RCC_ClockConfig+0xda>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a34:	68e2      	ldr	r2, [r4, #12]
 8002a36:	4b6f      	ldr	r3, [pc, #444]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d905      	bls.n	8002a4e <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a42:	496c      	ldr	r1, [pc, #432]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002a44:	698b      	ldr	r3, [r1, #24]
 8002a46:	f023 030f 	bic.w	r3, r3, #15
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	f013 0f01 	tst.w	r3, #1
 8002a54:	d041      	beq.n	8002ada <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a56:	4a67      	ldr	r2, [pc, #412]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002a58:	6993      	ldr	r3, [r2, #24]
 8002a5a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a5e:	68a1      	ldr	r1, [r4, #8]
 8002a60:	430b      	orrs	r3, r1
 8002a62:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a64:	6863      	ldr	r3, [r4, #4]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x10c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d027      	beq.n	8002abe <HAL_RCC_ClockConfig+0x14a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d02c      	beq.n	8002acc <HAL_RCC_ClockConfig+0x158>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a72:	4a60      	ldr	r2, [pc, #384]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	f012 0f04 	tst.w	r2, #4
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	e0ad      	b.n	8002bdc <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002a86:	f000 80ae 	beq.w	8002be6 <HAL_RCC_ClockConfig+0x272>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a8a:	495a      	ldr	r1, [pc, #360]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002a8c:	690a      	ldr	r2, [r1, #16]
 8002a8e:	f022 0207 	bic.w	r2, r2, #7
 8002a92:	4313      	orrs	r3, r2
 8002a94:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 8002a96:	f7fe f9db 	bl	8000e50 <HAL_GetTick>
 8002a9a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9c:	4b55      	ldr	r3, [pc, #340]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002aa4:	6862      	ldr	r2, [r4, #4]
 8002aa6:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002aaa:	d016      	beq.n	8002ada <HAL_RCC_ClockConfig+0x166>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aac:	f7fe f9d0 	bl	8000e50 <HAL_GetTick>
 8002ab0:	1b80      	subs	r0, r0, r6
 8002ab2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002ab6:	4298      	cmp	r0, r3
 8002ab8:	d9f0      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 8002aba:	2003      	movs	r0, #3
 8002abc:	e08e      	b.n	8002bdc <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002abe:	4a4d      	ldr	r2, [pc, #308]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002ac6:	d1e0      	bne.n	8002a8a <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8002ac8:	2001      	movs	r0, #1
 8002aca:	e087      	b.n	8002bdc <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002acc:	4a49      	ldr	r2, [pc, #292]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8002ad4:	d1d9      	bne.n	8002a8a <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	e080      	b.n	8002bdc <HAL_RCC_ClockConfig+0x268>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	f013 0f02 	tst.w	r3, #2
 8002ae0:	d00c      	beq.n	8002afc <HAL_RCC_ClockConfig+0x188>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ae2:	68e2      	ldr	r2, [r4, #12]
 8002ae4:	4b43      	ldr	r3, [pc, #268]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d205      	bcs.n	8002afc <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af0:	4940      	ldr	r1, [pc, #256]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002af2:	698b      	ldr	r3, [r1, #24]
 8002af4:	f023 030f 	bic.w	r3, r3, #15
 8002af8:	431a      	orrs	r2, r3
 8002afa:	618a      	str	r2, [r1, #24]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002afc:	4b3c      	ldr	r3, [pc, #240]	@ (8002bf0 <HAL_RCC_ClockConfig+0x27c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	42ab      	cmp	r3, r5
 8002b06:	d90a      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b08:	4a39      	ldr	r2, [pc, #228]	@ (8002bf0 <HAL_RCC_ClockConfig+0x27c>)
 8002b0a:	6813      	ldr	r3, [r2, #0]
 8002b0c:	f023 030f 	bic.w	r3, r3, #15
 8002b10:	432b      	orrs	r3, r5
 8002b12:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b14:	6813      	ldr	r3, [r2, #0]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	42ab      	cmp	r3, r5
 8002b1c:	d165      	bne.n	8002bea <HAL_RCC_ClockConfig+0x276>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	f013 0f04 	tst.w	r3, #4
 8002b24:	d00c      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b26:	6922      	ldr	r2, [r4, #16]
 8002b28:	4b32      	ldr	r3, [pc, #200]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d205      	bcs.n	8002b40 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b34:	492f      	ldr	r1, [pc, #188]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002b36:	698b      	ldr	r3, [r1, #24]
 8002b38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	6823      	ldr	r3, [r4, #0]
 8002b42:	f013 0f08 	tst.w	r3, #8
 8002b46:	d00c      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x1ee>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b48:	6962      	ldr	r2, [r4, #20]
 8002b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d205      	bcs.n	8002b62 <HAL_RCC_ClockConfig+0x1ee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b56:	4927      	ldr	r1, [pc, #156]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002b58:	69cb      	ldr	r3, [r1, #28]
 8002b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	f013 0f10 	tst.w	r3, #16
 8002b68:	d00c      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x210>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b6a:	69a2      	ldr	r2, [r4, #24]
 8002b6c:	4b21      	ldr	r3, [pc, #132]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d205      	bcs.n	8002b84 <HAL_RCC_ClockConfig+0x210>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b78:	491e      	ldr	r1, [pc, #120]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002b7a:	69cb      	ldr	r3, [r1, #28]
 8002b7c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b80:	431a      	orrs	r2, r3
 8002b82:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	f013 0f20 	tst.w	r3, #32
 8002b8a:	d00c      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x232>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b8c:	69e2      	ldr	r2, [r4, #28]
 8002b8e:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d205      	bcs.n	8002ba6 <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b9a:	4916      	ldr	r1, [pc, #88]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002b9c:	6a0b      	ldr	r3, [r1, #32]
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ba6:	f7ff fde9 	bl	800277c <HAL_RCC_GetSysClockFreq>
 8002baa:	4912      	ldr	r1, [pc, #72]	@ (8002bf4 <HAL_RCC_ClockConfig+0x280>)
 8002bac:	698b      	ldr	r3, [r1, #24]
 8002bae:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002bb2:	4a11      	ldr	r2, [pc, #68]	@ (8002bf8 <HAL_RCC_ClockConfig+0x284>)
 8002bb4:	5cd3      	ldrb	r3, [r2, r3]
 8002bb6:	f003 031f 	and.w	r3, r3, #31
 8002bba:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bbc:	698b      	ldr	r3, [r1, #24]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	5cd3      	ldrb	r3, [r2, r3]
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	fa20 f303 	lsr.w	r3, r0, r3
 8002bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8002bfc <HAL_RCC_ClockConfig+0x288>)
 8002bce:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c00 <HAL_RCC_ClockConfig+0x28c>)
 8002bd2:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c04 <HAL_RCC_ClockConfig+0x290>)
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	f7fe f8d8 	bl	8000d8c <HAL_InitTick>
}
 8002bdc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002bde:	2001      	movs	r0, #1
}
 8002be0:	4770      	bx	lr
      return HAL_ERROR;
 8002be2:	2001      	movs	r0, #1
 8002be4:	e7fa      	b.n	8002bdc <HAL_RCC_ClockConfig+0x268>
        return HAL_ERROR;
 8002be6:	2001      	movs	r0, #1
 8002be8:	e7f8      	b.n	8002bdc <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8002bea:	2001      	movs	r0, #1
 8002bec:	e7f6      	b.n	8002bdc <HAL_RCC_ClockConfig+0x268>
 8002bee:	bf00      	nop
 8002bf0:	52002000 	.word	0x52002000
 8002bf4:	58024400 	.word	0x58024400
 8002bf8:	08007aa0 	.word	0x08007aa0
 8002bfc:	24000000 	.word	0x24000000
 8002c00:	24000004 	.word	0x24000004
 8002c04:	24000010 	.word	0x24000010

08002c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c08:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002c0a:	f7ff fdb7 	bl	800277c <HAL_RCC_GetSysClockFreq>
 8002c0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002c3c <HAL_RCC_GetHCLKFreq+0x34>)
 8002c10:	6993      	ldr	r3, [r2, #24]
 8002c12:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002c16:	490a      	ldr	r1, [pc, #40]	@ (8002c40 <HAL_RCC_GetHCLKFreq+0x38>)
 8002c18:	5ccb      	ldrb	r3, [r1, r3]
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c22:	6992      	ldr	r2, [r2, #24]
 8002c24:	f002 020f 	and.w	r2, r2, #15
 8002c28:	5c88      	ldrb	r0, [r1, r2]
 8002c2a:	f000 001f 	and.w	r0, r0, #31
 8002c2e:	fa23 f000 	lsr.w	r0, r3, r0
 8002c32:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <HAL_RCC_GetHCLKFreq+0x3c>)
 8002c34:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c36:	4a04      	ldr	r2, [pc, #16]	@ (8002c48 <HAL_RCC_GetHCLKFreq+0x40>)
 8002c38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002c3a:	bd08      	pop	{r3, pc}
 8002c3c:	58024400 	.word	0x58024400
 8002c40:	08007aa0 	.word	0x08007aa0
 8002c44:	24000000 	.word	0x24000000
 8002c48:	24000004 	.word	0x24000004

08002c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c4c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c4e:	f7ff ffdb 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8002c52:	4b05      	ldr	r3, [pc, #20]	@ (8002c68 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002c5a:	4a04      	ldr	r2, [pc, #16]	@ (8002c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c5c:	5cd3      	ldrb	r3, [r2, r3]
 8002c5e:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c62:	40d8      	lsrs	r0, r3
 8002c64:	bd08      	pop	{r3, pc}
 8002c66:	bf00      	nop
 8002c68:	58024400 	.word	0x58024400
 8002c6c:	08007aa0 	.word	0x08007aa0

08002c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c70:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002c72:	f7ff ffc9 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8002c76:	4b05      	ldr	r3, [pc, #20]	@ (8002c8c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002c7e:	4a04      	ldr	r2, [pc, #16]	@ (8002c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c80:	5cd3      	ldrb	r3, [r2, r3]
 8002c82:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002c86:	40d8      	lsrs	r0, r3
 8002c88:	bd08      	pop	{r3, pc}
 8002c8a:	bf00      	nop
 8002c8c:	58024400 	.word	0x58024400
 8002c90:	08007aa0 	.word	0x08007aa0

08002c94 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002c94:	4b40      	ldr	r3, [pc, #256]	@ (8002d98 <RCCEx_PLL2_Config+0x104>)
 8002c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d079      	beq.n	8002d94 <RCCEx_PLL2_Config+0x100>
{
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	4605      	mov	r5, r0
 8002ca4:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002ca6:	4a3c      	ldr	r2, [pc, #240]	@ (8002d98 <RCCEx_PLL2_Config+0x104>)
 8002ca8:	6813      	ldr	r3, [r2, #0]
 8002caa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb0:	f7fe f8ce 	bl	8000e50 <HAL_GetTick>
 8002cb4:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002cb6:	4b38      	ldr	r3, [pc, #224]	@ (8002d98 <RCCEx_PLL2_Config+0x104>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002cbe:	d006      	beq.n	8002cce <RCCEx_PLL2_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002cc0:	f7fe f8c6 	bl	8000e50 <HAL_GetTick>
 8002cc4:	1b03      	subs	r3, r0, r4
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d9f5      	bls.n	8002cb6 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8002cca:	2003      	movs	r0, #3

  }


  return status;
}
 8002ccc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002cce:	4b32      	ldr	r3, [pc, #200]	@ (8002d98 <RCCEx_PLL2_Config+0x104>)
 8002cd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cd2:	f422 327c 	bic.w	r2, r2, #258048	@ 0x3f000
 8002cd6:	6829      	ldr	r1, [r5, #0]
 8002cd8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002cdc:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cde:	686a      	ldr	r2, [r5, #4]
 8002ce0:	3a01      	subs	r2, #1
 8002ce2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ce6:	68a9      	ldr	r1, [r5, #8]
 8002ce8:	3901      	subs	r1, #1
 8002cea:	0249      	lsls	r1, r1, #9
 8002cec:	b289      	uxth	r1, r1
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	68e9      	ldr	r1, [r5, #12]
 8002cf2:	3901      	subs	r1, #1
 8002cf4:	0409      	lsls	r1, r1, #16
 8002cf6:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	6929      	ldr	r1, [r5, #16]
 8002cfe:	3901      	subs	r1, #1
 8002d00:	0609      	lsls	r1, r1, #24
 8002d02:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8002d06:	430a      	orrs	r2, r1
 8002d08:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d0c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8002d10:	6969      	ldr	r1, [r5, #20]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d18:	f022 0220 	bic.w	r2, r2, #32
 8002d1c:	69a9      	ldr	r1, [r5, #24]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d24:	f022 0210 	bic.w	r2, r2, #16
 8002d28:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002d2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d2c:	f36f 02cf 	bfc	r2, #3, #13
 8002d30:	69e9      	ldr	r1, [r5, #28]
 8002d32:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002d36:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d3a:	f042 0210 	orr.w	r2, r2, #16
 8002d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8002d40:	b9c6      	cbnz	r6, 8002d74 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002d42:	461a      	mov	r2, r3
 8002d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8002d4c:	4a12      	ldr	r2, [pc, #72]	@ (8002d98 <RCCEx_PLL2_Config+0x104>)
 8002d4e:	6813      	ldr	r3, [r2, #0]
 8002d50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d54:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002d56:	f7fe f87b 	bl	8000e50 <HAL_GetTick>
 8002d5a:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d98 <RCCEx_PLL2_Config+0x104>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002d64:	d114      	bne.n	8002d90 <RCCEx_PLL2_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002d66:	f7fe f873 	bl	8000e50 <HAL_GetTick>
 8002d6a:	1b00      	subs	r0, r0, r4
 8002d6c:	2802      	cmp	r0, #2
 8002d6e:	d9f5      	bls.n	8002d5c <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8002d70:	2003      	movs	r0, #3
 8002d72:	e7ab      	b.n	8002ccc <RCCEx_PLL2_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8002d74:	2e01      	cmp	r6, #1
 8002d76:	d005      	beq.n	8002d84 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002d78:	4a07      	ldr	r2, [pc, #28]	@ (8002d98 <RCCEx_PLL2_Config+0x104>)
 8002d7a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002d7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d80:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002d82:	e7e3      	b.n	8002d4c <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002d84:	4a04      	ldr	r2, [pc, #16]	@ (8002d98 <RCCEx_PLL2_Config+0x104>)
 8002d86:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002d88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002d8e:	e7dd      	b.n	8002d4c <RCCEx_PLL2_Config+0xb8>
  return status;
 8002d90:	2000      	movs	r0, #0
 8002d92:	e79b      	b.n	8002ccc <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8002d94:	2001      	movs	r0, #1
}
 8002d96:	4770      	bx	lr
 8002d98:	58024400 	.word	0x58024400

08002d9c <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002d9c:	4b40      	ldr	r3, [pc, #256]	@ (8002ea0 <RCCEx_PLL3_Config+0x104>)
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d079      	beq.n	8002e9c <RCCEx_PLL3_Config+0x100>
{
 8002da8:	b570      	push	{r4, r5, r6, lr}
 8002daa:	4605      	mov	r5, r0
 8002dac:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8002dae:	4a3c      	ldr	r2, [pc, #240]	@ (8002ea0 <RCCEx_PLL3_Config+0x104>)
 8002db0:	6813      	ldr	r3, [r2, #0]
 8002db2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002db6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db8:	f7fe f84a 	bl	8000e50 <HAL_GetTick>
 8002dbc:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002dbe:	4b38      	ldr	r3, [pc, #224]	@ (8002ea0 <RCCEx_PLL3_Config+0x104>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8002dc6:	d006      	beq.n	8002dd6 <RCCEx_PLL3_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8002dc8:	f7fe f842 	bl	8000e50 <HAL_GetTick>
 8002dcc:	1b03      	subs	r3, r0, r4
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d9f5      	bls.n	8002dbe <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8002dd2:	2003      	movs	r0, #3

  }


  return status;
}
 8002dd4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002dd6:	4b32      	ldr	r3, [pc, #200]	@ (8002ea0 <RCCEx_PLL3_Config+0x104>)
 8002dd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dda:	f022 727c 	bic.w	r2, r2, #66060288	@ 0x3f00000
 8002dde:	6829      	ldr	r1, [r5, #0]
 8002de0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002de4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002de6:	686a      	ldr	r2, [r5, #4]
 8002de8:	3a01      	subs	r2, #1
 8002dea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dee:	68a9      	ldr	r1, [r5, #8]
 8002df0:	3901      	subs	r1, #1
 8002df2:	0249      	lsls	r1, r1, #9
 8002df4:	b289      	uxth	r1, r1
 8002df6:	430a      	orrs	r2, r1
 8002df8:	68e9      	ldr	r1, [r5, #12]
 8002dfa:	3901      	subs	r1, #1
 8002dfc:	0409      	lsls	r1, r1, #16
 8002dfe:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8002e02:	430a      	orrs	r2, r1
 8002e04:	6929      	ldr	r1, [r5, #16]
 8002e06:	3901      	subs	r1, #1
 8002e08:	0609      	lsls	r1, r1, #24
 8002e0a:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e14:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002e18:	6969      	ldr	r1, [r5, #20]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8002e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e24:	69a9      	ldr	r1, [r5, #24]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8002e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e30:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002e32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e34:	f36f 02cf 	bfc	r2, #3, #13
 8002e38:	69e9      	ldr	r1, [r5, #28]
 8002e3a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002e3e:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e46:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8002e48:	b9c6      	cbnz	r6, 8002e7c <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e52:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8002e54:	4a12      	ldr	r2, [pc, #72]	@ (8002ea0 <RCCEx_PLL3_Config+0x104>)
 8002e56:	6813      	ldr	r3, [r2, #0]
 8002e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e5c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002e5e:	f7fd fff7 	bl	8000e50 <HAL_GetTick>
 8002e62:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002e64:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea0 <RCCEx_PLL3_Config+0x104>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8002e6c:	d114      	bne.n	8002e98 <RCCEx_PLL3_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8002e6e:	f7fd ffef 	bl	8000e50 <HAL_GetTick>
 8002e72:	1b00      	subs	r0, r0, r4
 8002e74:	2802      	cmp	r0, #2
 8002e76:	d9f5      	bls.n	8002e64 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8002e78:	2003      	movs	r0, #3
 8002e7a:	e7ab      	b.n	8002dd4 <RCCEx_PLL3_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8002e7c:	2e01      	cmp	r6, #1
 8002e7e:	d005      	beq.n	8002e8c <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002e80:	4a07      	ldr	r2, [pc, #28]	@ (8002ea0 <RCCEx_PLL3_Config+0x104>)
 8002e82:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002e84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e88:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002e8a:	e7e3      	b.n	8002e54 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8002e8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ea0 <RCCEx_PLL3_Config+0x104>)
 8002e8e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002e90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e94:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002e96:	e7dd      	b.n	8002e54 <RCCEx_PLL3_Config+0xb8>
  return status;
 8002e98:	2000      	movs	r0, #0
 8002e9a:	e79b      	b.n	8002dd4 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8002e9c:	2001      	movs	r0, #1
}
 8002e9e:	4770      	bx	lr
 8002ea0:	58024400 	.word	0x58024400

08002ea4 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ea8:	6803      	ldr	r3, [r0, #0]
 8002eaa:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002eae:	d030      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8002eb0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8002eb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002eb6:	d026      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002eb8:	d80e      	bhi.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002eba:	b1ab      	cbz	r3, 8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ebc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	3008      	adds	r0, #8
 8002ec6:	f7ff fee5 	bl	8002c94 <RCCEx_PLL2_Config>
 8002eca:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002ecc:	b195      	cbz	r5, 8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x50>
      status = ret;
 8002ece:	462e      	mov	r6, r5
 8002ed0:	e021      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8002ed2:	2601      	movs	r6, #1
 8002ed4:	4635      	mov	r5, r6
 8002ed6:	e01e      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002ed8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8002ede:	2500      	movs	r5, #0
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002ee2:	2601      	movs	r6, #1
 8002ee4:	4635      	mov	r5, r6
 8002ee6:	e016      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x72>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ee8:	4a97      	ldr	r2, [pc, #604]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002eea:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ef2:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002ef4:	4a94      	ldr	r2, [pc, #592]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002ef6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8002ef8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002efc:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8002efe:	430b      	orrs	r3, r1
 8002f00:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f02:	2600      	movs	r6, #0
 8002f04:	e007      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f06:	2102      	movs	r1, #2
 8002f08:	3028      	adds	r0, #40	@ 0x28
 8002f0a:	f7ff ff47 	bl	8002d9c <RCCEx_PLL3_Config>
 8002f0e:	4605      	mov	r5, r0
        break;
 8002f10:	e7dc      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f12:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f14:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002f1c:	d027      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 8002f1e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d820      	bhi.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8002f24:	e8df f003 	tbb	[pc, r3]
 8002f28:	08181103 	.word	0x08181103
 8002f2c:	08          	.byte	0x08
 8002f2d:	00          	.byte	0x00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f2e:	4a86      	ldr	r2, [pc, #536]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002f30:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f36:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8002f38:	b9c5      	cbnz	r5, 8002f6c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f3a:	4a83      	ldr	r2, [pc, #524]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002f3c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8002f3e:	f023 0307 	bic.w	r3, r3, #7
 8002f42:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002f44:	430b      	orrs	r3, r1
 8002f46:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f48:	e011      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xca>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	f104 0008 	add.w	r0, r4, #8
 8002f50:	f7ff fea0 	bl	8002c94 <RCCEx_PLL2_Config>
 8002f54:	4605      	mov	r5, r0
        break;
 8002f56:	e7ef      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x94>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f58:	2100      	movs	r1, #0
 8002f5a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8002f5e:	f7ff ff1d 	bl	8002d9c <RCCEx_PLL3_Config>
 8002f62:	4605      	mov	r5, r0
        break;
 8002f64:	e7e8      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8002f66:	2601      	movs	r6, #1
 8002f68:	4635      	mov	r5, r6
 8002f6a:	e000      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xca>
      status = ret;
 8002f6c:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002f74:	d025      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai23ClockSelection)
 8002f76:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002f78:	2b80      	cmp	r3, #128	@ 0x80
 8002f7a:	d037      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002f7c:	d80c      	bhi.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f7e:	b19b      	cbz	r3, 8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002f80:	2b40      	cmp	r3, #64	@ 0x40
 8002f82:	d106      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xee>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f84:	2100      	movs	r1, #0
 8002f86:	f104 0008 	add.w	r0, r4, #8
 8002f8a:	f7ff fe83 	bl	8002c94 <RCCEx_PLL2_Config>
 8002f8e:	4605      	mov	r5, r0
        break;
 8002f90:	e00f      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    switch (PeriphClkInit->Sai23ClockSelection)
 8002f92:	2601      	movs	r6, #1
 8002f94:	4635      	mov	r5, r6
 8002f96:	e014      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8002f98:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8002f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fa0:	d007      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8002fa2:	2601      	movs	r6, #1
 8002fa4:	4635      	mov	r5, r6
 8002fa6:	e00c      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fa8:	4a67      	ldr	r2, [pc, #412]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002faa:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8002fb2:	bb15      	cbnz	r5, 8002ffa <HAL_RCCEx_PeriphCLKConfig+0x156>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002fb4:	4a64      	ldr	r2, [pc, #400]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002fb6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8002fb8:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8002fbc:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002fc8:	d033      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Sai4AClockSelection)
 8002fca:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8002fce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fd2:	d043      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002fd4:	d816      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002fd6:	b1f3      	cbz	r3, 8003016 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002fd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fdc:	d10f      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fde:	2100      	movs	r1, #0
 8002fe0:	f104 0008 	add.w	r0, r4, #8
 8002fe4:	f7ff fe56 	bl	8002c94 <RCCEx_PLL2_Config>
 8002fe8:	4605      	mov	r5, r0
        break;
 8002fea:	e019      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fec:	2100      	movs	r1, #0
 8002fee:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8002ff2:	f7ff fed3 	bl	8002d9c <RCCEx_PLL3_Config>
 8002ff6:	4605      	mov	r5, r0
        break;
 8002ff8:	e7db      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      status = ret;
 8002ffa:	462e      	mov	r6, r5
 8002ffc:	e7e1      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4AClockSelection)
 8002ffe:	2601      	movs	r6, #1
 8003000:	4635      	mov	r5, r6
 8003002:	e016      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003004:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003008:	d00a      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800300a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800300e:	d007      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003010:	2601      	movs	r6, #1
 8003012:	4635      	mov	r5, r6
 8003014:	e00d      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x18e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003016:	4a4c      	ldr	r2, [pc, #304]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003018:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800301a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800301e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003020:	bb1d      	cbnz	r5, 800306a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003022:	4a49      	ldr	r2, [pc, #292]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003024:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003026:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800302a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800302e:	430b      	orrs	r3, r1
 8003030:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8003038:	d03c      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x210>
    switch (PeriphClkInit->Sai4BClockSelection)
 800303a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 800303e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003042:	d02f      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003044:	d816      	bhi.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8003046:	b1f3      	cbz	r3, 8003086 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003048:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800304c:	d10f      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800304e:	2100      	movs	r1, #0
 8003050:	f104 0008 	add.w	r0, r4, #8
 8003054:	f7ff fe1e 	bl	8002c94 <RCCEx_PLL2_Config>
 8003058:	4605      	mov	r5, r0
        break;
 800305a:	e019      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800305c:	2100      	movs	r1, #0
 800305e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003062:	f7ff fe9b 	bl	8002d9c <RCCEx_PLL3_Config>
 8003066:	4605      	mov	r5, r0
        break;
 8003068:	e7da      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      status = ret;
 800306a:	462e      	mov	r6, r5
 800306c:	e7e1      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Sai4BClockSelection)
 800306e:	2601      	movs	r6, #1
 8003070:	4635      	mov	r5, r6
 8003072:	e01f      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003074:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003078:	d00a      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800307a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800307e:	d007      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003080:	2601      	movs	r6, #1
 8003082:	4635      	mov	r5, r6
 8003084:	e016      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x210>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003086:	4a30      	ldr	r2, [pc, #192]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003088:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800308a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800308e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003090:	b97d      	cbnz	r5, 80030b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003092:	4a2d      	ldr	r2, [pc, #180]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003094:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003096:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800309a:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 800309e:	430b      	orrs	r3, r1
 80030a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030a2:	e007      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x210>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030a4:	2100      	movs	r1, #0
 80030a6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80030aa:	f7ff fe77 	bl	8002d9c <RCCEx_PLL3_Config>
 80030ae:	4605      	mov	r5, r0
        break;
 80030b0:	e7ee      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      status = ret;
 80030b2:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80030ba:	d013      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->QspiClockSelection)
 80030bc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d02c      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x278>
 80030c2:	d826      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80030c4:	b133      	cbz	r3, 80030d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d120      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x268>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80030cc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80030ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80030d4:	bb4d      	cbnz	r5, 800312a <HAL_RCCEx_PeriphCLKConfig+0x286>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80030d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80030d8:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80030da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80030de:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80030e0:	430b      	orrs	r3, r1
 80030e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80030ea:	d03c      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi123ClockSelection)
 80030ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030f2:	d054      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 80030f4:	d81e      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x290>
 80030f6:	b34b      	cbz	r3, 800314c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80030f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030fc:	d117      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x28a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030fe:	2100      	movs	r1, #0
 8003100:	f104 0008 	add.w	r0, r4, #8
 8003104:	f7ff fdc6 	bl	8002c94 <RCCEx_PLL2_Config>
 8003108:	4605      	mov	r5, r0
        break;
 800310a:	e024      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
    switch (PeriphClkInit->QspiClockSelection)
 800310c:	2601      	movs	r6, #1
 800310e:	4635      	mov	r5, r6
 8003110:	e7e8      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003112:	2b30      	cmp	r3, #48	@ 0x30
 8003114:	d0de      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003116:	2601      	movs	r6, #1
 8003118:	4635      	mov	r5, r6
 800311a:	e7e3      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800311c:	2102      	movs	r1, #2
 800311e:	f104 0008 	add.w	r0, r4, #8
 8003122:	f7ff fdb7 	bl	8002c94 <RCCEx_PLL2_Config>
 8003126:	4605      	mov	r5, r0
        break;
 8003128:	e7d4      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      status = ret;
 800312a:	462e      	mov	r6, r5
 800312c:	e7da      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi123ClockSelection)
 800312e:	2601      	movs	r6, #1
 8003130:	4635      	mov	r5, r6
 8003132:	e018      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003134:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003138:	d00d      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 800313a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8003140:	2601      	movs	r6, #1
 8003142:	4635      	mov	r5, r6
 8003144:	e00f      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003146:	bf00      	nop
 8003148:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800314c:	4a83      	ldr	r2, [pc, #524]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 800314e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003154:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003156:	bb4d      	cbnz	r5, 80031ac <HAL_RCCEx_PeriphCLKConfig+0x308>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003158:	4a80      	ldr	r2, [pc, #512]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 800315a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800315c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003160:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003162:	430b      	orrs	r3, r1
 8003164:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800316c:	d037      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x33a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800316e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8003170:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003174:	d02b      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003176:	d81e      	bhi.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003178:	b143      	cbz	r3, 800318c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800317a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800317e:	d117      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003180:	2101      	movs	r1, #1
 8003182:	f104 0008 	add.w	r0, r4, #8
 8003186:	f7ff fd85 	bl	8002c94 <RCCEx_PLL2_Config>
 800318a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800318c:	bb35      	cbnz	r5, 80031dc <HAL_RCCEx_PeriphCLKConfig+0x338>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800318e:	4a73      	ldr	r2, [pc, #460]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8003190:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003192:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003196:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8003198:	430b      	orrs	r3, r1
 800319a:	6513      	str	r3, [r2, #80]	@ 0x50
 800319c:	e01f      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x33a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800319e:	2100      	movs	r1, #0
 80031a0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80031a4:	f7ff fdfa 	bl	8002d9c <RCCEx_PLL3_Config>
 80031a8:	4605      	mov	r5, r0
        break;
 80031aa:	e7d4      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      status = ret;
 80031ac:	462e      	mov	r6, r5
 80031ae:	e7da      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi45ClockSelection)
 80031b0:	2601      	movs	r6, #1
 80031b2:	4635      	mov	r5, r6
 80031b4:	e013      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80031b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031ba:	d0e7      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80031bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031c0:	d0e4      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80031c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031c6:	d0e1      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80031c8:	2601      	movs	r6, #1
 80031ca:	4635      	mov	r5, r6
 80031cc:	e007      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x33a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031ce:	2101      	movs	r1, #1
 80031d0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80031d4:	f7ff fde2 	bl	8002d9c <RCCEx_PLL3_Config>
 80031d8:	4605      	mov	r5, r0
        break;
 80031da:	e7d7      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      status = ret;
 80031dc:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80031e4:	d030      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    switch (PeriphClkInit->Spi6ClockSelection)
 80031e6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80031ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031ee:	d023      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x394>
 80031f0:	d816      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 80031f2:	b143      	cbz	r3, 8003206 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80031f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031f8:	d10f      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x376>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031fa:	2101      	movs	r1, #1
 80031fc:	f104 0008 	add.w	r0, r4, #8
 8003200:	f7ff fd48 	bl	8002c94 <RCCEx_PLL2_Config>
 8003204:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003206:	b9f5      	cbnz	r5, 8003246 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003208:	4a54      	ldr	r2, [pc, #336]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 800320a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800320c:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8003210:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 8003214:	430b      	orrs	r3, r1
 8003216:	6593      	str	r3, [r2, #88]	@ 0x58
 8003218:	e016      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    switch (PeriphClkInit->Spi6ClockSelection)
 800321a:	2601      	movs	r6, #1
 800321c:	4635      	mov	r5, r6
 800321e:	e013      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003224:	d0ef      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003226:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800322a:	d0ec      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800322c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003230:	d0e9      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003232:	2601      	movs	r6, #1
 8003234:	4635      	mov	r5, r6
 8003236:	e007      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003238:	2101      	movs	r1, #1
 800323a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800323e:	f7ff fdad 	bl	8002d9c <RCCEx_PLL3_Config>
 8003242:	4605      	mov	r5, r0
        break;
 8003244:	e7df      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x362>
      status = ret;
 8003246:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800324e:	d017      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    switch (PeriphClkInit->DsiClockSelection)
 8003250:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003252:	b143      	cbz	r3, 8003266 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8003254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003258:	d10e      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800325a:	2101      	movs	r1, #1
 800325c:	f104 0008 	add.w	r0, r4, #8
 8003260:	f7ff fd18 	bl	8002c94 <RCCEx_PLL2_Config>
 8003264:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003266:	b955      	cbnz	r5, 800327e <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003268:	4a3c      	ldr	r2, [pc, #240]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 800326a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800326c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003270:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8003272:	430b      	orrs	r3, r1
 8003274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003276:	e003      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    switch (PeriphClkInit->DsiClockSelection)
 8003278:	2601      	movs	r6, #1
 800327a:	4635      	mov	r5, r6
 800327c:	e000      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      status = ret;
 800327e:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8003286:	d017      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x414>
    switch (PeriphClkInit->FdcanClockSelection)
 8003288:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800328a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800328e:	d006      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003294:	d01b      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003296:	b13b      	cbz	r3, 80032a8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003298:	2601      	movs	r6, #1
 800329a:	4635      	mov	r5, r6
 800329c:	e00c      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x414>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800329e:	4a2f      	ldr	r2, [pc, #188]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 80032a0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80032a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80032a8:	b9c5      	cbnz	r5, 80032dc <HAL_RCCEx_PeriphCLKConfig+0x438>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032aa:	4a2c      	ldr	r2, [pc, #176]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 80032ac:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80032ae:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80032b2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80032be:	d01c      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x456>
    switch (PeriphClkInit->FmcClockSelection)
 80032c0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d845      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80032c6:	e8df f003 	tbb	[pc, r3]
 80032ca:	0b10      	.short	0x0b10
 80032cc:	103d      	.short	0x103d
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032ce:	2101      	movs	r1, #1
 80032d0:	f104 0008 	add.w	r0, r4, #8
 80032d4:	f7ff fcde 	bl	8002c94 <RCCEx_PLL2_Config>
 80032d8:	4605      	mov	r5, r0
        break;
 80032da:	e7e5      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x404>
      status = ret;
 80032dc:	462e      	mov	r6, r5
 80032de:	e7eb      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x414>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e0:	4a1e      	ldr	r2, [pc, #120]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 80032e2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80032e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80032ea:	bbad      	cbnz	r5, 8003358 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80032ec:	4a1b      	ldr	r2, [pc, #108]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 80032ee:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80032f0:	f023 0303 	bic.w	r3, r3, #3
 80032f4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80032f6:	430b      	orrs	r3, r1
 80032f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003300:	d12e      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	f013 0f01 	tst.w	r3, #1
 8003308:	f000 80a7 	beq.w	800345a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800330c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8003310:	2b28      	cmp	r3, #40	@ 0x28
 8003312:	f200 80a0 	bhi.w	8003456 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8003316:	e8df f003 	tbb	[pc, r3]
 800331a:	9e8d      	.short	0x9e8d
 800331c:	9e9e9e9e 	.word	0x9e9e9e9e
 8003320:	9e879e9e 	.word	0x9e879e9e
 8003324:	9e9e9e9e 	.word	0x9e9e9e9e
 8003328:	9e979e9e 	.word	0x9e979e9e
 800332c:	9e9e9e9e 	.word	0x9e9e9e9e
 8003330:	9e8d9e9e 	.word	0x9e8d9e9e
 8003334:	9e9e9e9e 	.word	0x9e9e9e9e
 8003338:	9e8d9e9e 	.word	0x9e8d9e9e
 800333c:	9e9e9e9e 	.word	0x9e9e9e9e
 8003340:	9e9e      	.short	0x9e9e
 8003342:	8d          	.byte	0x8d
 8003343:	00          	.byte	0x00
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003344:	2102      	movs	r1, #2
 8003346:	f104 0008 	add.w	r0, r4, #8
 800334a:	f7ff fca3 	bl	8002c94 <RCCEx_PLL2_Config>
 800334e:	4605      	mov	r5, r0
        break;
 8003350:	e7cb      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x446>
    switch (PeriphClkInit->FmcClockSelection)
 8003352:	2601      	movs	r6, #1
 8003354:	4635      	mov	r5, r6
 8003356:	e7d0      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x456>
      status = ret;
 8003358:	462e      	mov	r6, r5
 800335a:	e7ce      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x456>
 800335c:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003360:	4a5a      	ldr	r2, [pc, #360]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8003362:	6813      	ldr	r3, [r2, #0]
 8003364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003368:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800336a:	f7fd fd71 	bl	8000e50 <HAL_GetTick>
 800336e:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003370:	4b56      	ldr	r3, [pc, #344]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003378:	d105      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337a:	f7fd fd69 	bl	8000e50 <HAL_GetTick>
 800337e:	1bc0      	subs	r0, r0, r7
 8003380:	2864      	cmp	r0, #100	@ 0x64
 8003382:	d9f5      	bls.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        ret = HAL_TIMEOUT;
 8003384:	2503      	movs	r5, #3
    if (ret == HAL_OK)
 8003386:	2d00      	cmp	r5, #0
 8003388:	d14a      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800338a:	4b51      	ldr	r3, [pc, #324]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338e:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 8003392:	4053      	eors	r3, r2
 8003394:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003398:	d00c      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x510>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800339a:	4b4d      	ldr	r3, [pc, #308]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 800339c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800339e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80033a2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80033a4:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80033a8:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033aa:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80033ac:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80033b0:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 80033b2:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80033b4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 80033b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033bc:	d015      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x546>
      if (ret == HAL_OK)
 80033be:	bb8d      	cbnz	r5, 8003424 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033c0:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 80033c4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80033c8:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80033cc:	d01e      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x568>
 80033ce:	4a40      	ldr	r2, [pc, #256]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 80033d0:	6913      	ldr	r3, [r2, #16]
 80033d2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033d6:	6113      	str	r3, [r2, #16]
 80033d8:	493d      	ldr	r1, [pc, #244]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 80033da:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 80033dc:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 80033e0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80033e4:	4313      	orrs	r3, r2
 80033e6:	670b      	str	r3, [r1, #112]	@ 0x70
 80033e8:	e78b      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        tickstart = HAL_GetTick();
 80033ea:	f7fd fd31 	bl	8000e50 <HAL_GetTick>
 80033ee:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033f0:	4b37      	ldr	r3, [pc, #220]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f4:	f013 0f02 	tst.w	r3, #2
 80033f8:	d1e1      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x51a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fa:	f7fd fd29 	bl	8000e50 <HAL_GetTick>
 80033fe:	1bc0      	subs	r0, r0, r7
 8003400:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003404:	4298      	cmp	r0, r3
 8003406:	d9f3      	bls.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
            ret = HAL_TIMEOUT;
 8003408:	2503      	movs	r5, #3
 800340a:	e7d8      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x51a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800340c:	4830      	ldr	r0, [pc, #192]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 800340e:	6902      	ldr	r2, [r0, #16]
 8003410:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8003414:	492f      	ldr	r1, [pc, #188]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x630>)
 8003416:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 800341a:	4313      	orrs	r3, r2
 800341c:	6103      	str	r3, [r0, #16]
 800341e:	e7db      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      status = ret;
 8003420:	462e      	mov	r6, r5
 8003422:	e76e      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        status = ret;
 8003424:	462e      	mov	r6, r5
 8003426:	e76c      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003428:	2101      	movs	r1, #1
 800342a:	f104 0008 	add.w	r0, r4, #8
 800342e:	f7ff fc31 	bl	8002c94 <RCCEx_PLL2_Config>
 8003432:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003434:	b9ed      	cbnz	r5, 8003472 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003436:	4a26      	ldr	r2, [pc, #152]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003438:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800343a:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800343e:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8003442:	430b      	orrs	r3, r1
 8003444:	6553      	str	r3, [r2, #84]	@ 0x54
 8003446:	e008      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003448:	2101      	movs	r1, #1
 800344a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800344e:	f7ff fca5 	bl	8002d9c <RCCEx_PLL3_Config>
 8003452:	4605      	mov	r5, r0
        break;
 8003454:	e7ee      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch (PeriphClkInit->Usart16ClockSelection)
 8003456:	2601      	movs	r6, #1
 8003458:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	f013 0f02 	tst.w	r3, #2
 8003460:	d017      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003462:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8003464:	2b05      	cmp	r3, #5
 8003466:	d82c      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8003468:	e8df f003 	tbb	[pc, r3]
 800346c:	0b24050b 	.word	0x0b24050b
 8003470:	0b0b      	.short	0x0b0b
      status = ret;
 8003472:	462e      	mov	r6, r5
 8003474:	e7f1      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003476:	2101      	movs	r1, #1
 8003478:	f104 0008 	add.w	r0, r4, #8
 800347c:	f7ff fc0a 	bl	8002c94 <RCCEx_PLL2_Config>
 8003480:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003482:	bb0d      	cbnz	r5, 80034c8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003484:	4a12      	ldr	r2, [pc, #72]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003486:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003488:	f023 0307 	bic.w	r3, r3, #7
 800348c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800348e:	430b      	orrs	r3, r1
 8003490:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	f013 0f04 	tst.w	r3, #4
 8003498:	d02f      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800349a:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 800349e:	2b05      	cmp	r3, #5
 80034a0:	f200 810e 	bhi.w	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 80034a4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80034a8:	0018001e 	.word	0x0018001e
 80034ac:	001e0105 	.word	0x001e0105
 80034b0:	001e001e 	.word	0x001e001e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034b4:	2101      	movs	r1, #1
 80034b6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80034ba:	f7ff fc6f 	bl	8002d9c <RCCEx_PLL3_Config>
 80034be:	4605      	mov	r5, r0
        break;
 80034c0:	e7df      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80034c2:	2601      	movs	r6, #1
 80034c4:	4635      	mov	r5, r6
 80034c6:	e7e4      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 80034c8:	462e      	mov	r6, r5
 80034ca:	e7e2      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 80034cc:	58024800 	.word	0x58024800
 80034d0:	58024400 	.word	0x58024400
 80034d4:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034d8:	2101      	movs	r1, #1
 80034da:	f104 0008 	add.w	r0, r4, #8
 80034de:	f7ff fbd9 	bl	8002c94 <RCCEx_PLL2_Config>
 80034e2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80034e4:	2d00      	cmp	r5, #0
 80034e6:	f040 80ee 	bne.w	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x822>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034ea:	4ab6      	ldr	r2, [pc, #728]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80034ec:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80034ee:	f023 0307 	bic.w	r3, r3, #7
 80034f2:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 80034f6:	430b      	orrs	r3, r1
 80034f8:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	f013 0f20 	tst.w	r3, #32
 8003500:	d01d      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x69a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003502:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8003506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800350a:	f000 80f0 	beq.w	80036ee <HAL_RCCEx_PeriphCLKConfig+0x84a>
 800350e:	f200 80df 	bhi.w	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003512:	b14b      	cbz	r3, 8003528 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003514:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003518:	f040 80d7 	bne.w	80036ca <HAL_RCCEx_PeriphCLKConfig+0x826>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800351c:	2100      	movs	r1, #0
 800351e:	f104 0008 	add.w	r0, r4, #8
 8003522:	f7ff fbb7 	bl	8002c94 <RCCEx_PLL2_Config>
 8003526:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003528:	2d00      	cmp	r5, #0
 800352a:	f040 80e7 	bne.w	80036fc <HAL_RCCEx_PeriphCLKConfig+0x858>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800352e:	4aa5      	ldr	r2, [pc, #660]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003530:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003532:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8003536:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800353a:	430b      	orrs	r3, r1
 800353c:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003544:	d01d      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x6de>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003546:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800354a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800354e:	f000 80e9 	beq.w	8003724 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8003552:	f200 80d8 	bhi.w	8003706 <HAL_RCCEx_PeriphCLKConfig+0x862>
 8003556:	b14b      	cbz	r3, 800356c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800355c:	f040 80d0 	bne.w	8003700 <HAL_RCCEx_PeriphCLKConfig+0x85c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003560:	2100      	movs	r1, #0
 8003562:	f104 0008 	add.w	r0, r4, #8
 8003566:	f7ff fb95 	bl	8002c94 <RCCEx_PLL2_Config>
 800356a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800356c:	2d00      	cmp	r5, #0
 800356e:	f040 80e0 	bne.w	8003732 <HAL_RCCEx_PeriphCLKConfig+0x88e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003572:	4a94      	ldr	r2, [pc, #592]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003574:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003576:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800357a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800357e:	430b      	orrs	r3, r1
 8003580:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003588:	d01d      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x722>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800358a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800358e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003592:	f000 80e2 	beq.w	800375a <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8003596:	f200 80d1 	bhi.w	800373c <HAL_RCCEx_PeriphCLKConfig+0x898>
 800359a:	b14b      	cbz	r3, 80035b0 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800359c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035a0:	f040 80c9 	bne.w	8003736 <HAL_RCCEx_PeriphCLKConfig+0x892>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035a4:	2100      	movs	r1, #0
 80035a6:	f104 0008 	add.w	r0, r4, #8
 80035aa:	f7ff fb73 	bl	8002c94 <RCCEx_PLL2_Config>
 80035ae:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80035b0:	2d00      	cmp	r5, #0
 80035b2:	f040 80d9 	bne.w	8003768 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80035b6:	4a83      	ldr	r2, [pc, #524]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80035b8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80035ba:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80035be:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 80035c2:	430b      	orrs	r3, r1
 80035c4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	f013 0f08 	tst.w	r3, #8
 80035cc:	d00d      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x746>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80035ce:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 80035d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035d6:	f000 80c9 	beq.w	800376c <HAL_RCCEx_PeriphCLKConfig+0x8c8>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80035da:	4a7a      	ldr	r2, [pc, #488]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80035dc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80035de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035e2:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80035e6:	430b      	orrs	r3, r1
 80035e8:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	f013 0f10 	tst.w	r3, #16
 80035f0:	d00d      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x76a>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80035f2:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80035f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035fa:	f000 80c1 	beq.w	8003780 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035fe:	4a71      	ldr	r2, [pc, #452]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003600:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003606:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800360a:	430b      	orrs	r3, r1
 800360c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8003614:	d01c      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    switch (PeriphClkInit->AdcClockSelection)
 8003616:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800361a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800361e:	f000 80b9 	beq.w	8003794 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003622:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003626:	d008      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x796>
 8003628:	2b00      	cmp	r3, #0
 800362a:	f040 80ba 	bne.w	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800362e:	2100      	movs	r1, #0
 8003630:	f104 0008 	add.w	r0, r4, #8
 8003634:	f7ff fb2e 	bl	8002c94 <RCCEx_PLL2_Config>
 8003638:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800363a:	2d00      	cmp	r5, #0
 800363c:	f040 80b4 	bne.w	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003640:	4a60      	ldr	r2, [pc, #384]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003642:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003644:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003648:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 800364c:	430b      	orrs	r3, r1
 800364e:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8003656:	d01c      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    switch (PeriphClkInit->UsbClockSelection)
 8003658:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800365c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003660:	f000 80a4 	beq.w	80037ac <HAL_RCCEx_PeriphCLKConfig+0x908>
 8003664:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003668:	d008      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 800366a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800366e:	f040 80a4 	bne.w	80037ba <HAL_RCCEx_PeriphCLKConfig+0x916>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003672:	4a54      	ldr	r2, [pc, #336]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003674:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003676:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800367a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800367c:	2d00      	cmp	r5, #0
 800367e:	f040 809f 	bne.w	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003682:	4a50      	ldr	r2, [pc, #320]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003684:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003686:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800368a:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 800368e:	430b      	orrs	r3, r1
 8003690:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003698:	f000 80a3 	beq.w	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
    switch (PeriphClkInit->SdmmcClockSelection)
 800369c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8092 	beq.w	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a8:	f000 80b1 	beq.w	800380e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80036ac:	2601      	movs	r6, #1
 80036ae:	4635      	mov	r5, r6
 80036b0:	e097      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036b2:	2101      	movs	r1, #1
 80036b4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80036b8:	f7ff fb70 	bl	8002d9c <RCCEx_PLL3_Config>
 80036bc:	4605      	mov	r5, r0
        break;
 80036be:	e711      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x640>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80036c0:	2601      	movs	r6, #1
 80036c2:	4635      	mov	r5, r6
 80036c4:	e719      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x656>
      status = ret;
 80036c6:	462e      	mov	r6, r5
 80036c8:	e717      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80036ca:	2601      	movs	r6, #1
 80036cc:	4635      	mov	r5, r6
 80036ce:	e736      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x69a>
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d4:	f43f af28 	beq.w	8003528 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80036d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036dc:	f43f af24 	beq.w	8003528 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80036e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036e4:	f43f af20 	beq.w	8003528 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80036e8:	2601      	movs	r6, #1
 80036ea:	4635      	mov	r5, r6
 80036ec:	e727      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x69a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036ee:	2102      	movs	r1, #2
 80036f0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80036f4:	f7ff fb52 	bl	8002d9c <RCCEx_PLL3_Config>
 80036f8:	4605      	mov	r5, r0
        break;
 80036fa:	e715      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x684>
      status = ret;
 80036fc:	462e      	mov	r6, r5
 80036fe:	e71e      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x69a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003700:	2601      	movs	r6, #1
 8003702:	4635      	mov	r5, r6
 8003704:	e73d      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8003706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800370a:	f43f af2f 	beq.w	800356c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800370e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003712:	f43f af2b 	beq.w	800356c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8003716:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800371a:	f43f af27 	beq.w	800356c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800371e:	2601      	movs	r6, #1
 8003720:	4635      	mov	r5, r6
 8003722:	e72e      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003724:	2102      	movs	r1, #2
 8003726:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800372a:	f7ff fb37 	bl	8002d9c <RCCEx_PLL3_Config>
 800372e:	4605      	mov	r5, r0
        break;
 8003730:	e71c      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
      status = ret;
 8003732:	462e      	mov	r6, r5
 8003734:	e725      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x6de>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003736:	2601      	movs	r6, #1
 8003738:	4635      	mov	r5, r6
 800373a:	e744      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x722>
 800373c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003740:	f43f af36 	beq.w	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 8003744:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003748:	f43f af32 	beq.w	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800374c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003750:	f43f af2e 	beq.w	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 8003754:	2601      	movs	r6, #1
 8003756:	4635      	mov	r5, r6
 8003758:	e735      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x722>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800375a:	2102      	movs	r1, #2
 800375c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003760:	f7ff fb1c 	bl	8002d9c <RCCEx_PLL3_Config>
 8003764:	4605      	mov	r5, r0
        break;
 8003766:	e723      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x70c>
      status = ret;
 8003768:	462e      	mov	r6, r5
 800376a:	e72c      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x722>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800376c:	2102      	movs	r1, #2
 800376e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003772:	f7ff fb13 	bl	8002d9c <RCCEx_PLL3_Config>
 8003776:	2800      	cmp	r0, #0
 8003778:	f43f af2f 	beq.w	80035da <HAL_RCCEx_PeriphCLKConfig+0x736>
        status = HAL_ERROR;
 800377c:	2601      	movs	r6, #1
 800377e:	e72c      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x736>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003780:	2102      	movs	r1, #2
 8003782:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003786:	f7ff fb09 	bl	8002d9c <RCCEx_PLL3_Config>
 800378a:	2800      	cmp	r0, #0
 800378c:	f43f af37 	beq.w	80035fe <HAL_RCCEx_PeriphCLKConfig+0x75a>
        status = HAL_ERROR;
 8003790:	2601      	movs	r6, #1
 8003792:	e734      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x75a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003794:	2102      	movs	r1, #2
 8003796:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800379a:	f7ff faff 	bl	8002d9c <RCCEx_PLL3_Config>
 800379e:	4605      	mov	r5, r0
        break;
 80037a0:	e74b      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x796>
    switch (PeriphClkInit->AdcClockSelection)
 80037a2:	2601      	movs	r6, #1
 80037a4:	4635      	mov	r5, r6
 80037a6:	e753      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      status = ret;
 80037a8:	462e      	mov	r6, r5
 80037aa:	e751      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037ac:	2101      	movs	r1, #1
 80037ae:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80037b2:	f7ff faf3 	bl	8002d9c <RCCEx_PLL3_Config>
 80037b6:	4605      	mov	r5, r0
        break;
 80037b8:	e760      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    switch (PeriphClkInit->UsbClockSelection)
 80037ba:	2601      	movs	r6, #1
 80037bc:	4635      	mov	r5, r6
 80037be:	e768      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      status = ret;
 80037c0:	462e      	mov	r6, r5
 80037c2:	e766      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 80037c4:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c8:	4a6f      	ldr	r2, [pc, #444]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 80037ca:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80037cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80037d2:	bb1d      	cbnz	r5, 800381c <HAL_RCCEx_PeriphCLKConfig+0x978>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80037d4:	4a6c      	ldr	r2, [pc, #432]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 80037d6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80037d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037dc:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80037de:	430b      	orrs	r3, r1
 80037e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80037e8:	d11a      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x97c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80037f0:	d032      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    switch (PeriphClkInit->RngClockSelection)
 80037f2:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80037f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037fa:	d01d      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x994>
 80037fc:	d919      	bls.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x98e>
 80037fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003802:	d01e      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8003804:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003808:	d01b      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800380a:	2601      	movs	r6, #1
 800380c:	e024      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800380e:	2102      	movs	r1, #2
 8003810:	f104 0008 	add.w	r0, r4, #8
 8003814:	f7ff fa3e 	bl	8002c94 <RCCEx_PLL2_Config>
 8003818:	4605      	mov	r5, r0
        break;
 800381a:	e7da      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
      status = ret;
 800381c:	462e      	mov	r6, r5
 800381e:	e7e0      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003820:	2102      	movs	r1, #2
 8003822:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003826:	f7ff fab9 	bl	8002d9c <RCCEx_PLL3_Config>
 800382a:	2800      	cmp	r0, #0
 800382c:	d0dd      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x946>
      status = HAL_ERROR;
 800382e:	2601      	movs	r6, #1
 8003830:	e7db      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x946>
    switch (PeriphClkInit->RngClockSelection)
 8003832:	b133      	cbz	r3, 8003842 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8003834:	2601      	movs	r6, #1
 8003836:	e00f      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003838:	4a53      	ldr	r2, [pc, #332]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 800383a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800383c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003840:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003842:	b945      	cbnz	r5, 8003856 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003844:	4a50      	ldr	r2, [pc, #320]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 8003846:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003848:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800384c:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8003850:	430b      	orrs	r3, r1
 8003852:	6553      	str	r3, [r2, #84]	@ 0x54
 8003854:	e000      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
      status = ret;
 8003856:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800385e:	d006      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x9ca>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003860:	4a49      	ldr	r2, [pc, #292]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 8003862:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003864:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003868:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 800386a:	430b      	orrs	r3, r1
 800386c:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003874:	d007      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003876:	4a44      	ldr	r2, [pc, #272]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 8003878:	6913      	ldr	r3, [r2, #16]
 800387a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800387e:	f8d4 10bc 	ldr.w	r1, [r4, #188]	@ 0xbc
 8003882:	430b      	orrs	r3, r1
 8003884:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800388c:	d006      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800388e:	4a3e      	ldr	r2, [pc, #248]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 8003890:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003896:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8003898:	430b      	orrs	r3, r1
 800389a:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80038a2:	d009      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038a4:	4b38      	ldr	r3, [pc, #224]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038ac:	611a      	str	r2, [r3, #16]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 80038b4:	430a      	orrs	r2, r1
 80038b6:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	da06      	bge.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80038be:	4a32      	ldr	r2, [pc, #200]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 80038c0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80038c2:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80038c6:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80038c8:	430b      	orrs	r3, r1
 80038ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80038d2:	d007      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 80038d6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80038d8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80038dc:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80038e4:	6863      	ldr	r3, [r4, #4]
 80038e6:	f013 0f01 	tst.w	r3, #1
 80038ea:	d117      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xa78>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80038ec:	6863      	ldr	r3, [r4, #4]
 80038ee:	f013 0f02 	tst.w	r3, #2
 80038f2:	d11c      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xa8a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80038f4:	6863      	ldr	r3, [r4, #4]
 80038f6:	f013 0f04 	tst.w	r3, #4
 80038fa:	d121      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xa9c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80038fc:	6863      	ldr	r3, [r4, #4]
 80038fe:	f013 0f08 	tst.w	r3, #8
 8003902:	d126      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xaae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003904:	6863      	ldr	r3, [r4, #4]
 8003906:	f013 0f10 	tst.w	r3, #16
 800390a:	d12b      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xac0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800390c:	6863      	ldr	r3, [r4, #4]
 800390e:	f013 0f20 	tst.w	r3, #32
 8003912:	d130      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xad2>
  if (status == HAL_OK)
 8003914:	b106      	cbz	r6, 8003918 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  return HAL_ERROR;
 8003916:	2601      	movs	r6, #1
}
 8003918:	4630      	mov	r0, r6
 800391a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800391c:	2100      	movs	r1, #0
 800391e:	f104 0008 	add.w	r0, r4, #8
 8003922:	f7ff f9b7 	bl	8002c94 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8003926:	2800      	cmp	r0, #0
 8003928:	d0e0      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xa48>
      status = ret;
 800392a:	4606      	mov	r6, r0
 800392c:	e7de      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xa48>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800392e:	2101      	movs	r1, #1
 8003930:	f104 0008 	add.w	r0, r4, #8
 8003934:	f7ff f9ae 	bl	8002c94 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8003938:	2800      	cmp	r0, #0
 800393a:	d0db      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
      status = ret;
 800393c:	4606      	mov	r6, r0
 800393e:	e7d9      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003940:	2102      	movs	r1, #2
 8003942:	f104 0008 	add.w	r0, r4, #8
 8003946:	f7ff f9a5 	bl	8002c94 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800394a:	2800      	cmp	r0, #0
 800394c:	d0d6      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
      status = ret;
 800394e:	4606      	mov	r6, r0
 8003950:	e7d4      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003952:	2100      	movs	r1, #0
 8003954:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003958:	f7ff fa20 	bl	8002d9c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800395c:	2800      	cmp	r0, #0
 800395e:	d0d1      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      status = ret;
 8003960:	4606      	mov	r6, r0
 8003962:	e7cf      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003964:	2101      	movs	r1, #1
 8003966:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800396a:	f7ff fa17 	bl	8002d9c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800396e:	2800      	cmp	r0, #0
 8003970:	d0cc      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xa68>
      status = ret;
 8003972:	4606      	mov	r6, r0
 8003974:	e7ca      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xa68>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003976:	2102      	movs	r1, #2
 8003978:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800397c:	f7ff fa0e 	bl	8002d9c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8003980:	2800      	cmp	r0, #0
 8003982:	d0c7      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xa70>
  return HAL_ERROR;
 8003984:	2601      	movs	r6, #1
 8003986:	e7c7      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003988:	58024400 	.word	0x58024400

0800398c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800398c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800398e:	f7ff f93b 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8003992:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800399a:	4a04      	ldr	r2, [pc, #16]	@ (80039ac <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800399c:	5cd3      	ldrb	r3, [r2, r3]
 800399e:	f003 031f 	and.w	r3, r3, #31
}
 80039a2:	40d8      	lsrs	r0, r3
 80039a4:	bd08      	pop	{r3, pc}
 80039a6:	bf00      	nop
 80039a8:	58024400 	.word	0x58024400
 80039ac:	08007aa0 	.word	0x08007aa0

080039b0 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 80039b0:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039b2:	4b79      	ldr	r3, [pc, #484]	@ (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 80039b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80039b6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80039b8:	f3c4 3c05 	ubfx	ip, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80039bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039be:	f3c1 1100 	ubfx	r1, r1, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80039c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
  if (pll2m != 0U)
 80039cc:	f414 3f7c 	tst.w	r4, #258048	@ 0x3f000
 80039d0:	f000 80dd 	beq.w	8003b8e <HAL_RCCEx_GetPLL2ClockFreq+0x1de>
 80039d4:	f002 0203 	and.w	r2, r2, #3
 80039d8:	ee07 3a90 	vmov	s15, r3
 80039dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 80039e0:	2a01      	cmp	r2, #1
 80039e2:	d04b      	beq.n	8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0xcc>
 80039e4:	2a02      	cmp	r2, #2
 80039e6:	f000 8098 	beq.w	8003b1a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 80039ea:	2a00      	cmp	r2, #0
 80039ec:	f040 80b2 	bne.w	8003b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039f0:	4b69      	ldr	r3, [pc, #420]	@ (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f013 0f20 	tst.w	r3, #32
 80039f8:	d023      	beq.n	8003a42 <HAL_RCCEx_GetPLL2ClockFreq+0x92>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039fa:	4967      	ldr	r1, [pc, #412]	@ (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 80039fc:	680a      	ldr	r2, [r1, #0]
 80039fe:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003a02:	4b66      	ldr	r3, [pc, #408]	@ (8003b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 8003a04:	40d3      	lsrs	r3, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a06:	ee07 3a10 	vmov	s14, r3
 8003a0a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003a0e:	ee07 ca10 	vmov	s14, ip
 8003a12:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8003a16:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8003a1a:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8003a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a20:	ee06 3a90 	vmov	s13, r3
 8003a24:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003a28:	ed9f 6a5d 	vldr	s12, [pc, #372]	@ 8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8003a2c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003a30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a40:	e038      	b.n	8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a42:	ee07 ca10 	vmov	s14, ip
 8003a46:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003a4a:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 8003ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8003a4e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003a52:	4b51      	ldr	r3, [pc, #324]	@ (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8003a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5a:	ee06 3a90 	vmov	s13, r3
 8003a5e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003a62:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8003a66:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a7a:	e01b      	b.n	8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a7c:	ee07 ca10 	vmov	s14, ip
 8003a80:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003a84:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8003ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8003a88:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003a8c:	4b42      	ldr	r3, [pc, #264]	@ (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a94:	ee06 3a90 	vmov	s13, r3
 8003a98:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003a9c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8003aa0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003aa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab0:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003ab4:	4a38      	ldr	r2, [pc, #224]	@ (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8003ab6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8003ab8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003abc:	ee07 3a90 	vmov	s15, r3
 8003ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003acc:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8003ad0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8003ad4:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003ad8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8003ada:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aea:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8003aee:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8003af2:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003af6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8003af8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b0c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003b10:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8003b14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b18:	4770      	bx	lr
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b1a:	ee07 ca10 	vmov	s14, ip
 8003b1e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003b22:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x1fc>
 8003b26:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b32:	ee06 3a90 	vmov	s13, r3
 8003b36:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003b3a:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8003b3e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8003b52:	e7af      	b.n	8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b54:	ee07 ca10 	vmov	s14, ip
 8003b58:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003b5c:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 8003ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8003b60:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003b64:	4b0c      	ldr	r3, [pc, #48]	@ (8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8003b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6c:	ee06 3a90 	vmov	s13, r3
 8003b70:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003b74:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8003b78:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003b7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b88:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8003b8c:	e792      	b.n	8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b92:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b94:	6083      	str	r3, [r0, #8]
}
 8003b96:	e7bd      	b.n	8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x164>
 8003b98:	58024400 	.word	0x58024400
 8003b9c:	03d09000 	.word	0x03d09000
 8003ba0:	39000000 	.word	0x39000000
 8003ba4:	4c742400 	.word	0x4c742400
 8003ba8:	4a742400 	.word	0x4a742400
 8003bac:	4bbebc20 	.word	0x4bbebc20

08003bb0 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8003bb0:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bb2:	4b79      	ldr	r3, [pc, #484]	@ (8003d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8003bb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003bb6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8003bb8:	f3c4 5c05 	ubfx	ip, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003bbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003bbe:	f3c1 2100 	ubfx	r1, r1, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
  if (pll3m != 0U)
 8003bcc:	f014 7f7c 	tst.w	r4, #66060288	@ 0x3f00000
 8003bd0:	f000 80dd 	beq.w	8003d8e <HAL_RCCEx_GetPLL3ClockFreq+0x1de>
 8003bd4:	f002 0203 	and.w	r2, r2, #3
 8003bd8:	ee07 3a90 	vmov	s15, r3
 8003bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8003be0:	2a01      	cmp	r2, #1
 8003be2:	d04b      	beq.n	8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0xcc>
 8003be4:	2a02      	cmp	r2, #2
 8003be6:	f000 8098 	beq.w	8003d1a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8003bea:	2a00      	cmp	r2, #0
 8003bec:	f040 80b2 	bne.w	8003d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bf0:	4b69      	ldr	r3, [pc, #420]	@ (8003d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f013 0f20 	tst.w	r3, #32
 8003bf8:	d023      	beq.n	8003c42 <HAL_RCCEx_GetPLL3ClockFreq+0x92>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bfa:	4967      	ldr	r1, [pc, #412]	@ (8003d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8003bfc:	680a      	ldr	r2, [r1, #0]
 8003bfe:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003c02:	4b66      	ldr	r3, [pc, #408]	@ (8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 8003c04:	40d3      	lsrs	r3, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c06:	ee07 3a10 	vmov	s14, r3
 8003c0a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003c0e:	ee07 ca10 	vmov	s14, ip
 8003c12:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8003c16:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8003c1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c20:	ee06 3a90 	vmov	s13, r3
 8003c24:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003c28:	ed9f 6a5d 	vldr	s12, [pc, #372]	@ 8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8003c2c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003c30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c40:	e038      	b.n	8003cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c42:	ee07 ca10 	vmov	s14, ip
 8003c46:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003c4a:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 8003da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8003c4e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003c52:	4b51      	ldr	r3, [pc, #324]	@ (8003d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5a:	ee06 3a90 	vmov	s13, r3
 8003c5e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003c62:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8003c66:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c7a:	e01b      	b.n	8003cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c7c:	ee07 ca10 	vmov	s14, ip
 8003c80:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003c84:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8003c88:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003c8c:	4b42      	ldr	r3, [pc, #264]	@ (8003d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c94:	ee06 3a90 	vmov	s13, r3
 8003c98:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003c9c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8003ca0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003ca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ca8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb0:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003cb4:	4a38      	ldr	r2, [pc, #224]	@ (8003d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8003cb6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003cb8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ccc:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8003cd0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8003cd4:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003cd8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003cda:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cea:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8003cee:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8003cf2:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003cf6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003cf8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003cfc:	ee07 3a90 	vmov	s15, r3
 8003d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d0c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003d10:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8003d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d18:	4770      	bx	lr
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d1a:	ee07 ca10 	vmov	s14, ip
 8003d1e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003d22:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8003dac <HAL_RCCEx_GetPLL3ClockFreq+0x1fc>
 8003d26:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d32:	ee06 3a90 	vmov	s13, r3
 8003d36:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003d3a:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8003d3e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d4e:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8003d52:	e7af      	b.n	8003cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d54:	ee07 ca10 	vmov	s14, ip
 8003d58:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003d5c:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8003d60:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003d64:	4b0c      	ldr	r3, [pc, #48]	@ (8003d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6c:	ee06 3a90 	vmov	s13, r3
 8003d70:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003d74:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8003d78:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003d7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d88:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8003d8c:	e792      	b.n	8003cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d92:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d94:	6083      	str	r3, [r0, #8]
}
 8003d96:	e7bd      	b.n	8003d14 <HAL_RCCEx_GetPLL3ClockFreq+0x164>
 8003d98:	58024400 	.word	0x58024400
 8003d9c:	03d09000 	.word	0x03d09000
 8003da0:	39000000 	.word	0x39000000
 8003da4:	4c742400 	.word	0x4c742400
 8003da8:	4a742400 	.word	0x4a742400
 8003dac:	4bbebc20 	.word	0x4bbebc20

08003db0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003db0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	e852 3f00 	ldrex	r3, [r2]
 8003db6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	e842 3100 	strex	r1, r3, [r2]
 8003dbe:	2900      	cmp	r1, #0
 8003dc0:	d1f6      	bne.n	8003db0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003dc2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	f102 0308 	add.w	r3, r2, #8
 8003dc8:	e853 1f00 	ldrex	r1, [r3]
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <UART_EndRxTransfer+0x54>)
 8003dce:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	3208      	adds	r2, #8
 8003dd2:	e842 3100 	strex	r1, r3, [r2]
 8003dd6:	2900      	cmp	r1, #0
 8003dd8:	d1f3      	bne.n	8003dc2 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dda:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d006      	beq.n	8003dee <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003de0:	2320      	movs	r3, #32
 8003de2:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de6:	2300      	movs	r3, #0
 8003de8:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dea:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8003dec:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	e852 3f00 	ldrex	r3, [r2]
 8003df4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	e842 3100 	strex	r1, r3, [r2]
 8003dfc:	2900      	cmp	r1, #0
 8003dfe:	d1f6      	bne.n	8003dee <UART_EndRxTransfer+0x3e>
 8003e00:	e7ee      	b.n	8003de0 <UART_EndRxTransfer+0x30>
 8003e02:	bf00      	nop
 8003e04:	effffffe 	.word	0xeffffffe

08003e08 <UART_SetConfig>:
{
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e0e:	6883      	ldr	r3, [r0, #8]
 8003e10:	6902      	ldr	r2, [r0, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	6942      	ldr	r2, [r0, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	69c2      	ldr	r2, [r0, #28]
 8003e1a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e1c:	6801      	ldr	r1, [r0, #0]
 8003e1e:	6808      	ldr	r0, [r1, #0]
 8003e20:	4a88      	ldr	r2, [pc, #544]	@ (8004044 <UART_SetConfig+0x23c>)
 8003e22:	4002      	ands	r2, r0
 8003e24:	431a      	orrs	r2, r3
 8003e26:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e28:	6822      	ldr	r2, [r4, #0]
 8003e2a:	6853      	ldr	r3, [r2, #4]
 8003e2c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e30:	68e1      	ldr	r1, [r4, #12]
 8003e32:	430b      	orrs	r3, r1
 8003e34:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e36:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e38:	6822      	ldr	r2, [r4, #0]
 8003e3a:	4b83      	ldr	r3, [pc, #524]	@ (8004048 <UART_SetConfig+0x240>)
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8003e40:	6a23      	ldr	r3, [r4, #32]
 8003e42:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e44:	6890      	ldr	r0, [r2, #8]
 8003e46:	4b81      	ldr	r3, [pc, #516]	@ (800404c <UART_SetConfig+0x244>)
 8003e48:	4003      	ands	r3, r0
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e4e:	6822      	ldr	r2, [r4, #0]
 8003e50:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003e52:	f023 030f 	bic.w	r3, r3, #15
 8003e56:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	4a7c      	ldr	r2, [pc, #496]	@ (8004050 <UART_SetConfig+0x248>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d021      	beq.n	8003ea8 <UART_SetConfig+0xa0>
 8003e64:	4a7b      	ldr	r2, [pc, #492]	@ (8004054 <UART_SetConfig+0x24c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	f000 808c 	beq.w	8003f84 <UART_SetConfig+0x17c>
 8003e6c:	4a7a      	ldr	r2, [pc, #488]	@ (8004058 <UART_SetConfig+0x250>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	f000 80a2 	beq.w	8003fb8 <UART_SetConfig+0x1b0>
 8003e74:	4a79      	ldr	r2, [pc, #484]	@ (800405c <UART_SetConfig+0x254>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	f000 80b5 	beq.w	8003fe6 <UART_SetConfig+0x1de>
 8003e7c:	4a78      	ldr	r2, [pc, #480]	@ (8004060 <UART_SetConfig+0x258>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	f000 80c8 	beq.w	8004014 <UART_SetConfig+0x20c>
 8003e84:	4a77      	ldr	r2, [pc, #476]	@ (8004064 <UART_SetConfig+0x25c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	f000 80f4 	beq.w	8004074 <UART_SetConfig+0x26c>
 8003e8c:	4a76      	ldr	r2, [pc, #472]	@ (8004068 <UART_SetConfig+0x260>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	f000 8119 	beq.w	80040c6 <UART_SetConfig+0x2be>
 8003e94:	4a75      	ldr	r2, [pc, #468]	@ (800406c <UART_SetConfig+0x264>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	f000 812c 	beq.w	80040f4 <UART_SetConfig+0x2ec>
 8003e9c:	4a6a      	ldr	r2, [pc, #424]	@ (8004048 <UART_SetConfig+0x240>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	f000 813f 	beq.w	8004122 <UART_SetConfig+0x31a>
 8003ea4:	2280      	movs	r2, #128	@ 0x80
 8003ea6:	e033      	b.n	8003f10 <UART_SetConfig+0x108>
 8003ea8:	4a71      	ldr	r2, [pc, #452]	@ (8004070 <UART_SetConfig+0x268>)
 8003eaa:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003eac:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003eb0:	2a28      	cmp	r2, #40	@ 0x28
 8003eb2:	d865      	bhi.n	8003f80 <UART_SetConfig+0x178>
 8003eb4:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003eb8:	00640029 	.word	0x00640029
 8003ebc:	00640064 	.word	0x00640064
 8003ec0:	00640064 	.word	0x00640064
 8003ec4:	00640064 	.word	0x00640064
 8003ec8:	0064014d 	.word	0x0064014d
 8003ecc:	00640064 	.word	0x00640064
 8003ed0:	00640064 	.word	0x00640064
 8003ed4:	00640064 	.word	0x00640064
 8003ed8:	0064002b 	.word	0x0064002b
 8003edc:	00640064 	.word	0x00640064
 8003ee0:	00640064 	.word	0x00640064
 8003ee4:	00640064 	.word	0x00640064
 8003ee8:	0064005e 	.word	0x0064005e
 8003eec:	00640064 	.word	0x00640064
 8003ef0:	00640064 	.word	0x00640064
 8003ef4:	00640064 	.word	0x00640064
 8003ef8:	00640060 	.word	0x00640060
 8003efc:	00640064 	.word	0x00640064
 8003f00:	00640064 	.word	0x00640064
 8003f04:	00640064 	.word	0x00640064
 8003f08:	0062      	.short	0x0062
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	e000      	b.n	8003f10 <UART_SetConfig+0x108>
 8003f0e:	2208      	movs	r2, #8
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f10:	494d      	ldr	r1, [pc, #308]	@ (8004048 <UART_SetConfig+0x240>)
 8003f12:	428b      	cmp	r3, r1
 8003f14:	f000 812f 	beq.w	8004176 <UART_SetConfig+0x36e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f18:	69e0      	ldr	r0, [r4, #28]
 8003f1a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003f1e:	f000 81af 	beq.w	8004280 <UART_SetConfig+0x478>
    switch (clocksource)
 8003f22:	2a20      	cmp	r2, #32
 8003f24:	f200 8206 	bhi.w	8004334 <UART_SetConfig+0x52c>
 8003f28:	2a20      	cmp	r2, #32
 8003f2a:	f200 8253 	bhi.w	80043d4 <UART_SetConfig+0x5cc>
 8003f2e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003f32:	0208      	.short	0x0208
 8003f34:	02510222 	.word	0x02510222
 8003f38:	02250251 	.word	0x02250251
 8003f3c:	02510251 	.word	0x02510251
 8003f40:	022a0251 	.word	0x022a0251
 8003f44:	02510251 	.word	0x02510251
 8003f48:	02510251 	.word	0x02510251
 8003f4c:	02510251 	.word	0x02510251
 8003f50:	022f0251 	.word	0x022f0251
 8003f54:	02510251 	.word	0x02510251
 8003f58:	02510251 	.word	0x02510251
 8003f5c:	02510251 	.word	0x02510251
 8003f60:	02510251 	.word	0x02510251
 8003f64:	02510251 	.word	0x02510251
 8003f68:	02510251 	.word	0x02510251
 8003f6c:	02510251 	.word	0x02510251
 8003f70:	023b0251 	.word	0x023b0251
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f74:	2210      	movs	r2, #16
 8003f76:	e7cb      	b.n	8003f10 <UART_SetConfig+0x108>
 8003f78:	2220      	movs	r2, #32
 8003f7a:	e7c9      	b.n	8003f10 <UART_SetConfig+0x108>
 8003f7c:	2240      	movs	r2, #64	@ 0x40
 8003f7e:	e7c7      	b.n	8003f10 <UART_SetConfig+0x108>
 8003f80:	2280      	movs	r2, #128	@ 0x80
 8003f82:	e7c5      	b.n	8003f10 <UART_SetConfig+0x108>
 8003f84:	4a3a      	ldr	r2, [pc, #232]	@ (8004070 <UART_SetConfig+0x268>)
 8003f86:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003f88:	f002 0207 	and.w	r2, r2, #7
 8003f8c:	2a05      	cmp	r2, #5
 8003f8e:	d811      	bhi.n	8003fb4 <UART_SetConfig+0x1ac>
 8003f90:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003f94:	00e10006 	.word	0x00e10006
 8003f98:	000a0008 	.word	0x000a0008
 8003f9c:	000e000c 	.word	0x000e000c
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	e7b5      	b.n	8003f10 <UART_SetConfig+0x108>
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	e7b3      	b.n	8003f10 <UART_SetConfig+0x108>
 8003fa8:	2210      	movs	r2, #16
 8003faa:	e7b1      	b.n	8003f10 <UART_SetConfig+0x108>
 8003fac:	2220      	movs	r2, #32
 8003fae:	e7af      	b.n	8003f10 <UART_SetConfig+0x108>
 8003fb0:	2240      	movs	r2, #64	@ 0x40
 8003fb2:	e7ad      	b.n	8003f10 <UART_SetConfig+0x108>
 8003fb4:	2280      	movs	r2, #128	@ 0x80
 8003fb6:	e7ab      	b.n	8003f10 <UART_SetConfig+0x108>
 8003fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8004070 <UART_SetConfig+0x268>)
 8003fba:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003fbc:	f002 0207 	and.w	r2, r2, #7
 8003fc0:	2a05      	cmp	r2, #5
 8003fc2:	d80e      	bhi.n	8003fe2 <UART_SetConfig+0x1da>
 8003fc4:	e8df f002 	tbb	[pc, r2]
 8003fc8:	0705c903 	.word	0x0705c903
 8003fcc:	0b09      	.short	0x0b09
 8003fce:	2200      	movs	r2, #0
 8003fd0:	e79e      	b.n	8003f10 <UART_SetConfig+0x108>
 8003fd2:	2208      	movs	r2, #8
 8003fd4:	e79c      	b.n	8003f10 <UART_SetConfig+0x108>
 8003fd6:	2210      	movs	r2, #16
 8003fd8:	e79a      	b.n	8003f10 <UART_SetConfig+0x108>
 8003fda:	2220      	movs	r2, #32
 8003fdc:	e798      	b.n	8003f10 <UART_SetConfig+0x108>
 8003fde:	2240      	movs	r2, #64	@ 0x40
 8003fe0:	e796      	b.n	8003f10 <UART_SetConfig+0x108>
 8003fe2:	2280      	movs	r2, #128	@ 0x80
 8003fe4:	e794      	b.n	8003f10 <UART_SetConfig+0x108>
 8003fe6:	4a22      	ldr	r2, [pc, #136]	@ (8004070 <UART_SetConfig+0x268>)
 8003fe8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003fea:	f002 0207 	and.w	r2, r2, #7
 8003fee:	2a05      	cmp	r2, #5
 8003ff0:	d80e      	bhi.n	8004010 <UART_SetConfig+0x208>
 8003ff2:	e8df f002 	tbb	[pc, r2]
 8003ff6:	b403      	.short	0xb403
 8003ff8:	0b090705 	.word	0x0b090705
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	e787      	b.n	8003f10 <UART_SetConfig+0x108>
 8004000:	2208      	movs	r2, #8
 8004002:	e785      	b.n	8003f10 <UART_SetConfig+0x108>
 8004004:	2210      	movs	r2, #16
 8004006:	e783      	b.n	8003f10 <UART_SetConfig+0x108>
 8004008:	2220      	movs	r2, #32
 800400a:	e781      	b.n	8003f10 <UART_SetConfig+0x108>
 800400c:	2240      	movs	r2, #64	@ 0x40
 800400e:	e77f      	b.n	8003f10 <UART_SetConfig+0x108>
 8004010:	2280      	movs	r2, #128	@ 0x80
 8004012:	e77d      	b.n	8003f10 <UART_SetConfig+0x108>
 8004014:	4a16      	ldr	r2, [pc, #88]	@ (8004070 <UART_SetConfig+0x268>)
 8004016:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004018:	f002 0207 	and.w	r2, r2, #7
 800401c:	2a05      	cmp	r2, #5
 800401e:	d80e      	bhi.n	800403e <UART_SetConfig+0x236>
 8004020:	e8df f002 	tbb	[pc, r2]
 8004024:	07059f03 	.word	0x07059f03
 8004028:	0b09      	.short	0x0b09
 800402a:	2200      	movs	r2, #0
 800402c:	e770      	b.n	8003f10 <UART_SetConfig+0x108>
 800402e:	2208      	movs	r2, #8
 8004030:	e76e      	b.n	8003f10 <UART_SetConfig+0x108>
 8004032:	2210      	movs	r2, #16
 8004034:	e76c      	b.n	8003f10 <UART_SetConfig+0x108>
 8004036:	2220      	movs	r2, #32
 8004038:	e76a      	b.n	8003f10 <UART_SetConfig+0x108>
 800403a:	2240      	movs	r2, #64	@ 0x40
 800403c:	e768      	b.n	8003f10 <UART_SetConfig+0x108>
 800403e:	2280      	movs	r2, #128	@ 0x80
 8004040:	e766      	b.n	8003f10 <UART_SetConfig+0x108>
 8004042:	bf00      	nop
 8004044:	cfff69f3 	.word	0xcfff69f3
 8004048:	58000c00 	.word	0x58000c00
 800404c:	11fff4ff 	.word	0x11fff4ff
 8004050:	40011000 	.word	0x40011000
 8004054:	40004400 	.word	0x40004400
 8004058:	40004800 	.word	0x40004800
 800405c:	40004c00 	.word	0x40004c00
 8004060:	40005000 	.word	0x40005000
 8004064:	40011400 	.word	0x40011400
 8004068:	40007800 	.word	0x40007800
 800406c:	40007c00 	.word	0x40007c00
 8004070:	58024400 	.word	0x58024400
 8004074:	4a7d      	ldr	r2, [pc, #500]	@ (800426c <UART_SetConfig+0x464>)
 8004076:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004078:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800407c:	2a28      	cmp	r2, #40	@ 0x28
 800407e:	d820      	bhi.n	80040c2 <UART_SetConfig+0x2ba>
 8004080:	e8df f002 	tbb	[pc, r2]
 8004084:	1f1f1f15 	.word	0x1f1f1f15
 8004088:	1f1f1f1f 	.word	0x1f1f1f1f
 800408c:	1f1f1f71 	.word	0x1f1f1f71
 8004090:	1f1f1f1f 	.word	0x1f1f1f1f
 8004094:	1f1f1f17 	.word	0x1f1f1f17
 8004098:	1f1f1f1f 	.word	0x1f1f1f1f
 800409c:	1f1f1f19 	.word	0x1f1f1f19
 80040a0:	1f1f1f1f 	.word	0x1f1f1f1f
 80040a4:	1f1f1f1b 	.word	0x1f1f1f1b
 80040a8:	1f1f1f1f 	.word	0x1f1f1f1f
 80040ac:	1d          	.byte	0x1d
 80040ad:	00          	.byte	0x00
 80040ae:	2201      	movs	r2, #1
 80040b0:	e72e      	b.n	8003f10 <UART_SetConfig+0x108>
 80040b2:	2208      	movs	r2, #8
 80040b4:	e72c      	b.n	8003f10 <UART_SetConfig+0x108>
 80040b6:	2210      	movs	r2, #16
 80040b8:	e72a      	b.n	8003f10 <UART_SetConfig+0x108>
 80040ba:	2220      	movs	r2, #32
 80040bc:	e728      	b.n	8003f10 <UART_SetConfig+0x108>
 80040be:	2240      	movs	r2, #64	@ 0x40
 80040c0:	e726      	b.n	8003f10 <UART_SetConfig+0x108>
 80040c2:	2280      	movs	r2, #128	@ 0x80
 80040c4:	e724      	b.n	8003f10 <UART_SetConfig+0x108>
 80040c6:	4a69      	ldr	r2, [pc, #420]	@ (800426c <UART_SetConfig+0x464>)
 80040c8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80040ca:	f002 0207 	and.w	r2, r2, #7
 80040ce:	2a05      	cmp	r2, #5
 80040d0:	d80e      	bhi.n	80040f0 <UART_SetConfig+0x2e8>
 80040d2:	e8df f002 	tbb	[pc, r2]
 80040d6:	4a03      	.short	0x4a03
 80040d8:	0b090705 	.word	0x0b090705
 80040dc:	2200      	movs	r2, #0
 80040de:	e717      	b.n	8003f10 <UART_SetConfig+0x108>
 80040e0:	2208      	movs	r2, #8
 80040e2:	e715      	b.n	8003f10 <UART_SetConfig+0x108>
 80040e4:	2210      	movs	r2, #16
 80040e6:	e713      	b.n	8003f10 <UART_SetConfig+0x108>
 80040e8:	2220      	movs	r2, #32
 80040ea:	e711      	b.n	8003f10 <UART_SetConfig+0x108>
 80040ec:	2240      	movs	r2, #64	@ 0x40
 80040ee:	e70f      	b.n	8003f10 <UART_SetConfig+0x108>
 80040f0:	2280      	movs	r2, #128	@ 0x80
 80040f2:	e70d      	b.n	8003f10 <UART_SetConfig+0x108>
 80040f4:	4a5d      	ldr	r2, [pc, #372]	@ (800426c <UART_SetConfig+0x464>)
 80040f6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80040f8:	f002 0207 	and.w	r2, r2, #7
 80040fc:	2a05      	cmp	r2, #5
 80040fe:	d80e      	bhi.n	800411e <UART_SetConfig+0x316>
 8004100:	e8df f002 	tbb	[pc, r2]
 8004104:	07053503 	.word	0x07053503
 8004108:	0b09      	.short	0x0b09
 800410a:	2200      	movs	r2, #0
 800410c:	e700      	b.n	8003f10 <UART_SetConfig+0x108>
 800410e:	2208      	movs	r2, #8
 8004110:	e6fe      	b.n	8003f10 <UART_SetConfig+0x108>
 8004112:	2210      	movs	r2, #16
 8004114:	e6fc      	b.n	8003f10 <UART_SetConfig+0x108>
 8004116:	2220      	movs	r2, #32
 8004118:	e6fa      	b.n	8003f10 <UART_SetConfig+0x108>
 800411a:	2240      	movs	r2, #64	@ 0x40
 800411c:	e6f8      	b.n	8003f10 <UART_SetConfig+0x108>
 800411e:	2280      	movs	r2, #128	@ 0x80
 8004120:	e6f6      	b.n	8003f10 <UART_SetConfig+0x108>
 8004122:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 8004126:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004128:	f002 0207 	and.w	r2, r2, #7
 800412c:	2a05      	cmp	r2, #5
 800412e:	d80e      	bhi.n	800414e <UART_SetConfig+0x346>
 8004130:	e8df f002 	tbb	[pc, r2]
 8004134:	07051f03 	.word	0x07051f03
 8004138:	0b09      	.short	0x0b09
 800413a:	2202      	movs	r2, #2
 800413c:	e6e8      	b.n	8003f10 <UART_SetConfig+0x108>
 800413e:	2208      	movs	r2, #8
 8004140:	e6e6      	b.n	8003f10 <UART_SetConfig+0x108>
 8004142:	2210      	movs	r2, #16
 8004144:	e6e4      	b.n	8003f10 <UART_SetConfig+0x108>
 8004146:	2220      	movs	r2, #32
 8004148:	e6e2      	b.n	8003f10 <UART_SetConfig+0x108>
 800414a:	2240      	movs	r2, #64	@ 0x40
 800414c:	e6e0      	b.n	8003f10 <UART_SetConfig+0x108>
 800414e:	2280      	movs	r2, #128	@ 0x80
 8004150:	e6de      	b.n	8003f10 <UART_SetConfig+0x108>
 8004152:	2204      	movs	r2, #4
 8004154:	e6dc      	b.n	8003f10 <UART_SetConfig+0x108>
 8004156:	2204      	movs	r2, #4
 8004158:	e6da      	b.n	8003f10 <UART_SetConfig+0x108>
 800415a:	2204      	movs	r2, #4
 800415c:	e6d8      	b.n	8003f10 <UART_SetConfig+0x108>
 800415e:	2204      	movs	r2, #4
 8004160:	e6d6      	b.n	8003f10 <UART_SetConfig+0x108>
 8004162:	2204      	movs	r2, #4
 8004164:	e6d4      	b.n	8003f10 <UART_SetConfig+0x108>
 8004166:	2204      	movs	r2, #4
 8004168:	e6d2      	b.n	8003f10 <UART_SetConfig+0x108>
 800416a:	2204      	movs	r2, #4
 800416c:	e6d0      	b.n	8003f10 <UART_SetConfig+0x108>
 800416e:	2204      	movs	r2, #4
 8004170:	e6ce      	b.n	8003f10 <UART_SetConfig+0x108>
 8004172:	2204      	movs	r2, #4
 8004174:	e6cc      	b.n	8003f10 <UART_SetConfig+0x108>
    switch (clocksource)
 8004176:	2a20      	cmp	r2, #32
 8004178:	d827      	bhi.n	80041ca <UART_SetConfig+0x3c2>
 800417a:	2a02      	cmp	r2, #2
 800417c:	f0c0 8118 	bcc.w	80043b0 <UART_SetConfig+0x5a8>
 8004180:	3a02      	subs	r2, #2
 8004182:	2a1e      	cmp	r2, #30
 8004184:	f200 8116 	bhi.w	80043b4 <UART_SetConfig+0x5ac>
 8004188:	e8df f012 	tbh	[pc, r2, lsl #1]
 800418c:	01140026 	.word	0x01140026
 8004190:	01140056 	.word	0x01140056
 8004194:	01140114 	.word	0x01140114
 8004198:	0114005b 	.word	0x0114005b
 800419c:	01140114 	.word	0x01140114
 80041a0:	01140114 	.word	0x01140114
 80041a4:	01140114 	.word	0x01140114
 80041a8:	01140060 	.word	0x01140060
 80041ac:	01140114 	.word	0x01140114
 80041b0:	01140114 	.word	0x01140114
 80041b4:	01140114 	.word	0x01140114
 80041b8:	01140114 	.word	0x01140114
 80041bc:	01140114 	.word	0x01140114
 80041c0:	01140114 	.word	0x01140114
 80041c4:	01140114 	.word	0x01140114
 80041c8:	006c      	.short	0x006c
 80041ca:	2a40      	cmp	r2, #64	@ 0x40
 80041cc:	d102      	bne.n	80041d4 <UART_SetConfig+0x3cc>
        pclk = (uint32_t) LSE_VALUE;
 80041ce:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80041d2:	e006      	b.n	80041e2 <UART_SetConfig+0x3da>
    switch (clocksource)
 80041d4:	2001      	movs	r0, #1
 80041d6:	e0fe      	b.n	80043d6 <UART_SetConfig+0x5ce>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80041d8:	f7ff fbd8 	bl	800398c <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 80041dc:	2800      	cmp	r0, #0
 80041de:	f000 80eb 	beq.w	80043b8 <UART_SetConfig+0x5b0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80041e4:	4b22      	ldr	r3, [pc, #136]	@ (8004270 <UART_SetConfig+0x468>)
 80041e6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80041ea:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041ee:	6865      	ldr	r5, [r4, #4]
 80041f0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80041f4:	4299      	cmp	r1, r3
 80041f6:	f200 80e1 	bhi.w	80043bc <UART_SetConfig+0x5b4>
 80041fa:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80041fe:	f200 80df 	bhi.w	80043c0 <UART_SetConfig+0x5b8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004202:	2600      	movs	r6, #0
 8004204:	4633      	mov	r3, r6
 8004206:	4631      	mov	r1, r6
 8004208:	f7fc f8ba 	bl	8000380 <__aeabi_uldivmod>
 800420c:	0209      	lsls	r1, r1, #8
 800420e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8004212:	0200      	lsls	r0, r0, #8
 8004214:	086b      	lsrs	r3, r5, #1
 8004216:	18c0      	adds	r0, r0, r3
 8004218:	462a      	mov	r2, r5
 800421a:	4633      	mov	r3, r6
 800421c:	f141 0100 	adc.w	r1, r1, #0
 8004220:	f7fc f8ae 	bl	8000380 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004224:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8004228:	4b12      	ldr	r3, [pc, #72]	@ (8004274 <UART_SetConfig+0x46c>)
 800422a:	429a      	cmp	r2, r3
 800422c:	f200 80ca 	bhi.w	80043c4 <UART_SetConfig+0x5bc>
          huart->Instance->BRR = usartdiv;
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	60d8      	str	r0, [r3, #12]
 8004234:	4630      	mov	r0, r6
 8004236:	e0ce      	b.n	80043d6 <UART_SetConfig+0x5ce>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004238:	a803      	add	r0, sp, #12
 800423a:	f7ff fbb9 	bl	80039b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800423e:	9804      	ldr	r0, [sp, #16]
        break;
 8004240:	e7cc      	b.n	80041dc <UART_SetConfig+0x3d4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004242:	4668      	mov	r0, sp
 8004244:	f7ff fcb4 	bl	8003bb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004248:	9801      	ldr	r0, [sp, #4]
        break;
 800424a:	e7c7      	b.n	80041dc <UART_SetConfig+0x3d4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800424c:	4b07      	ldr	r3, [pc, #28]	@ (800426c <UART_SetConfig+0x464>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f013 0f20 	tst.w	r3, #32
 8004254:	d008      	beq.n	8004268 <UART_SetConfig+0x460>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004256:	4b05      	ldr	r3, [pc, #20]	@ (800426c <UART_SetConfig+0x464>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800425e:	4806      	ldr	r0, [pc, #24]	@ (8004278 <UART_SetConfig+0x470>)
 8004260:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8004262:	e7be      	b.n	80041e2 <UART_SetConfig+0x3da>
    switch (clocksource)
 8004264:	4805      	ldr	r0, [pc, #20]	@ (800427c <UART_SetConfig+0x474>)
 8004266:	e7bc      	b.n	80041e2 <UART_SetConfig+0x3da>
          pclk = (uint32_t) HSI_VALUE;
 8004268:	4803      	ldr	r0, [pc, #12]	@ (8004278 <UART_SetConfig+0x470>)
 800426a:	e7ba      	b.n	80041e2 <UART_SetConfig+0x3da>
 800426c:	58024400 	.word	0x58024400
 8004270:	08007b78 	.word	0x08007b78
 8004274:	000ffcff 	.word	0x000ffcff
 8004278:	03d09000 	.word	0x03d09000
 800427c:	003d0900 	.word	0x003d0900
    switch (clocksource)
 8004280:	2a20      	cmp	r2, #32
 8004282:	d815      	bhi.n	80042b0 <UART_SetConfig+0x4a8>
 8004284:	2a20      	cmp	r2, #32
 8004286:	f200 809f 	bhi.w	80043c8 <UART_SetConfig+0x5c0>
 800428a:	e8df f002 	tbb	[pc, r2]
 800428e:	3615      	.short	0x3615
 8004290:	9d399d9d 	.word	0x9d399d9d
 8004294:	9d3e9d9d 	.word	0x9d3e9d9d
 8004298:	9d9d9d9d 	.word	0x9d9d9d9d
 800429c:	9d439d9d 	.word	0x9d439d9d
 80042a0:	9d9d9d9d 	.word	0x9d9d9d9d
 80042a4:	9d9d9d9d 	.word	0x9d9d9d9d
 80042a8:	9d9d9d9d 	.word	0x9d9d9d9d
 80042ac:	9d9d      	.short	0x9d9d
 80042ae:	4f          	.byte	0x4f
 80042af:	00          	.byte	0x00
 80042b0:	2a40      	cmp	r2, #64	@ 0x40
 80042b2:	d006      	beq.n	80042c2 <UART_SetConfig+0x4ba>
 80042b4:	2001      	movs	r0, #1
 80042b6:	e08e      	b.n	80043d6 <UART_SetConfig+0x5ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 80042b8:	f7fe fcc8 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80042bc:	2800      	cmp	r0, #0
 80042be:	f000 8085 	beq.w	80043cc <UART_SetConfig+0x5c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042c2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80042c4:	4b4b      	ldr	r3, [pc, #300]	@ (80043f4 <UART_SetConfig+0x5ec>)
 80042c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80042ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80042ce:	6862      	ldr	r2, [r4, #4]
 80042d0:	0853      	lsrs	r3, r2, #1
 80042d2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80042d6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042da:	f1a3 0110 	sub.w	r1, r3, #16
 80042de:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80042e2:	4291      	cmp	r1, r2
 80042e4:	d874      	bhi.n	80043d0 <UART_SetConfig+0x5c8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042ec:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80042f0:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	60d3      	str	r3, [r2, #12]
 80042f6:	2000      	movs	r0, #0
 80042f8:	e06d      	b.n	80043d6 <UART_SetConfig+0x5ce>
        pclk = HAL_RCC_GetPCLK2Freq();
 80042fa:	f7fe fcb9 	bl	8002c70 <HAL_RCC_GetPCLK2Freq>
        break;
 80042fe:	e7dd      	b.n	80042bc <UART_SetConfig+0x4b4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004300:	a803      	add	r0, sp, #12
 8004302:	f7ff fb55 	bl	80039b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004306:	9804      	ldr	r0, [sp, #16]
        break;
 8004308:	e7d8      	b.n	80042bc <UART_SetConfig+0x4b4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800430a:	4668      	mov	r0, sp
 800430c:	f7ff fc50 	bl	8003bb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004310:	9801      	ldr	r0, [sp, #4]
        break;
 8004312:	e7d3      	b.n	80042bc <UART_SetConfig+0x4b4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004314:	4b38      	ldr	r3, [pc, #224]	@ (80043f8 <UART_SetConfig+0x5f0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f013 0f20 	tst.w	r3, #32
 800431c:	d008      	beq.n	8004330 <UART_SetConfig+0x528>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800431e:	4b36      	ldr	r3, [pc, #216]	@ (80043f8 <UART_SetConfig+0x5f0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004326:	4835      	ldr	r0, [pc, #212]	@ (80043fc <UART_SetConfig+0x5f4>)
 8004328:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800432a:	e7ca      	b.n	80042c2 <UART_SetConfig+0x4ba>
    switch (clocksource)
 800432c:	4834      	ldr	r0, [pc, #208]	@ (8004400 <UART_SetConfig+0x5f8>)
 800432e:	e7c8      	b.n	80042c2 <UART_SetConfig+0x4ba>
          pclk = (uint32_t) HSI_VALUE;
 8004330:	4832      	ldr	r0, [pc, #200]	@ (80043fc <UART_SetConfig+0x5f4>)
 8004332:	e7c6      	b.n	80042c2 <UART_SetConfig+0x4ba>
    switch (clocksource)
 8004334:	2a40      	cmp	r2, #64	@ 0x40
 8004336:	d102      	bne.n	800433e <UART_SetConfig+0x536>
        pclk = (uint32_t) LSE_VALUE;
 8004338:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800433c:	e005      	b.n	800434a <UART_SetConfig+0x542>
    switch (clocksource)
 800433e:	2001      	movs	r0, #1
 8004340:	e049      	b.n	80043d6 <UART_SetConfig+0x5ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004342:	f7fe fc83 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004346:	2800      	cmp	r0, #0
 8004348:	d04f      	beq.n	80043ea <UART_SetConfig+0x5e2>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800434a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800434c:	4b29      	ldr	r3, [pc, #164]	@ (80043f4 <UART_SetConfig+0x5ec>)
 800434e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004352:	fbb0 f0f3 	udiv	r0, r0, r3
 8004356:	6863      	ldr	r3, [r4, #4]
 8004358:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800435c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004360:	f1a0 0210 	sub.w	r2, r0, #16
 8004364:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8004368:	429a      	cmp	r2, r3
 800436a:	d840      	bhi.n	80043ee <UART_SetConfig+0x5e6>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	b280      	uxth	r0, r0
 8004370:	60d8      	str	r0, [r3, #12]
 8004372:	2000      	movs	r0, #0
 8004374:	e02f      	b.n	80043d6 <UART_SetConfig+0x5ce>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004376:	f7fe fc7b 	bl	8002c70 <HAL_RCC_GetPCLK2Freq>
        break;
 800437a:	e7e4      	b.n	8004346 <UART_SetConfig+0x53e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800437c:	a803      	add	r0, sp, #12
 800437e:	f7ff fb17 	bl	80039b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004382:	9804      	ldr	r0, [sp, #16]
        break;
 8004384:	e7df      	b.n	8004346 <UART_SetConfig+0x53e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004386:	4668      	mov	r0, sp
 8004388:	f7ff fc12 	bl	8003bb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800438c:	9801      	ldr	r0, [sp, #4]
        break;
 800438e:	e7da      	b.n	8004346 <UART_SetConfig+0x53e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004390:	4b19      	ldr	r3, [pc, #100]	@ (80043f8 <UART_SetConfig+0x5f0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f013 0f20 	tst.w	r3, #32
 8004398:	d008      	beq.n	80043ac <UART_SetConfig+0x5a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800439a:	4b17      	ldr	r3, [pc, #92]	@ (80043f8 <UART_SetConfig+0x5f0>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80043a2:	4816      	ldr	r0, [pc, #88]	@ (80043fc <UART_SetConfig+0x5f4>)
 80043a4:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80043a6:	e7d0      	b.n	800434a <UART_SetConfig+0x542>
    switch (clocksource)
 80043a8:	4815      	ldr	r0, [pc, #84]	@ (8004400 <UART_SetConfig+0x5f8>)
 80043aa:	e7ce      	b.n	800434a <UART_SetConfig+0x542>
          pclk = (uint32_t) HSI_VALUE;
 80043ac:	4813      	ldr	r0, [pc, #76]	@ (80043fc <UART_SetConfig+0x5f4>)
 80043ae:	e7cc      	b.n	800434a <UART_SetConfig+0x542>
    switch (clocksource)
 80043b0:	2001      	movs	r0, #1
 80043b2:	e010      	b.n	80043d6 <UART_SetConfig+0x5ce>
 80043b4:	2001      	movs	r0, #1
 80043b6:	e00e      	b.n	80043d6 <UART_SetConfig+0x5ce>
 80043b8:	2000      	movs	r0, #0
 80043ba:	e00c      	b.n	80043d6 <UART_SetConfig+0x5ce>
        ret = HAL_ERROR;
 80043bc:	2001      	movs	r0, #1
 80043be:	e00a      	b.n	80043d6 <UART_SetConfig+0x5ce>
 80043c0:	2001      	movs	r0, #1
 80043c2:	e008      	b.n	80043d6 <UART_SetConfig+0x5ce>
          ret = HAL_ERROR;
 80043c4:	2001      	movs	r0, #1
 80043c6:	e006      	b.n	80043d6 <UART_SetConfig+0x5ce>
    switch (clocksource)
 80043c8:	2001      	movs	r0, #1
 80043ca:	e004      	b.n	80043d6 <UART_SetConfig+0x5ce>
 80043cc:	2000      	movs	r0, #0
 80043ce:	e002      	b.n	80043d6 <UART_SetConfig+0x5ce>
        ret = HAL_ERROR;
 80043d0:	2001      	movs	r0, #1
 80043d2:	e000      	b.n	80043d6 <UART_SetConfig+0x5ce>
    switch (clocksource)
 80043d4:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80043dc:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80043e4:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 80043e6:	b006      	add	sp, #24
 80043e8:	bd70      	pop	{r4, r5, r6, pc}
 80043ea:	2000      	movs	r0, #0
 80043ec:	e7f3      	b.n	80043d6 <UART_SetConfig+0x5ce>
        ret = HAL_ERROR;
 80043ee:	2001      	movs	r0, #1
 80043f0:	e7f1      	b.n	80043d6 <UART_SetConfig+0x5ce>
 80043f2:	bf00      	nop
 80043f4:	08007b78 	.word	0x08007b78
 80043f8:	58024400 	.word	0x58024400
 80043fc:	03d09000 	.word	0x03d09000
 8004400:	003d0900 	.word	0x003d0900

08004404 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004404:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004406:	f013 0f08 	tst.w	r3, #8
 800440a:	d006      	beq.n	800441a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800440c:	6802      	ldr	r2, [r0, #0]
 800440e:	6853      	ldr	r3, [r2, #4]
 8004410:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004414:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8004416:	430b      	orrs	r3, r1
 8004418:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800441a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800441c:	f013 0f01 	tst.w	r3, #1
 8004420:	d006      	beq.n	8004430 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004422:	6802      	ldr	r2, [r0, #0]
 8004424:	6853      	ldr	r3, [r2, #4]
 8004426:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800442a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800442c:	430b      	orrs	r3, r1
 800442e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004430:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004432:	f013 0f02 	tst.w	r3, #2
 8004436:	d006      	beq.n	8004446 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004438:	6802      	ldr	r2, [r0, #0]
 800443a:	6853      	ldr	r3, [r2, #4]
 800443c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004440:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8004442:	430b      	orrs	r3, r1
 8004444:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004446:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004448:	f013 0f04 	tst.w	r3, #4
 800444c:	d006      	beq.n	800445c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800444e:	6802      	ldr	r2, [r0, #0]
 8004450:	6853      	ldr	r3, [r2, #4]
 8004452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004456:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8004458:	430b      	orrs	r3, r1
 800445a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800445c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800445e:	f013 0f10 	tst.w	r3, #16
 8004462:	d006      	beq.n	8004472 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004464:	6802      	ldr	r2, [r0, #0]
 8004466:	6893      	ldr	r3, [r2, #8]
 8004468:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800446c:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800446e:	430b      	orrs	r3, r1
 8004470:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004472:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004474:	f013 0f20 	tst.w	r3, #32
 8004478:	d006      	beq.n	8004488 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800447a:	6802      	ldr	r2, [r0, #0]
 800447c:	6893      	ldr	r3, [r2, #8]
 800447e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004482:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004484:	430b      	orrs	r3, r1
 8004486:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004488:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800448a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800448e:	d00a      	beq.n	80044a6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004490:	6802      	ldr	r2, [r0, #0]
 8004492:	6853      	ldr	r3, [r2, #4]
 8004494:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004498:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800449a:	430b      	orrs	r3, r1
 800449c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800449e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80044a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044a4:	d00b      	beq.n	80044be <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044a6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80044a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80044ac:	d006      	beq.n	80044bc <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044ae:	6802      	ldr	r2, [r0, #0]
 80044b0:	6853      	ldr	r3, [r2, #4]
 80044b2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80044b6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6053      	str	r3, [r2, #4]
}
 80044bc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044be:	6802      	ldr	r2, [r0, #0]
 80044c0:	6853      	ldr	r3, [r2, #4]
 80044c2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80044c6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80044c8:	430b      	orrs	r3, r1
 80044ca:	6053      	str	r3, [r2, #4]
 80044cc:	e7eb      	b.n	80044a6 <UART_AdvFeatureConfig+0xa2>

080044ce <UART_WaitOnFlagUntilTimeout>:
{
 80044ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044d2:	4605      	mov	r5, r0
 80044d4:	460e      	mov	r6, r1
 80044d6:	4617      	mov	r7, r2
 80044d8:	4699      	mov	r9, r3
 80044da:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044de:	682b      	ldr	r3, [r5, #0]
 80044e0:	69dc      	ldr	r4, [r3, #28]
 80044e2:	ea36 0404 	bics.w	r4, r6, r4
 80044e6:	bf0c      	ite	eq
 80044e8:	2401      	moveq	r4, #1
 80044ea:	2400      	movne	r4, #0
 80044ec:	42bc      	cmp	r4, r7
 80044ee:	d13a      	bne.n	8004566 <UART_WaitOnFlagUntilTimeout+0x98>
    if (Timeout != HAL_MAX_DELAY)
 80044f0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80044f4:	d0f3      	beq.n	80044de <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f6:	f7fc fcab 	bl	8000e50 <HAL_GetTick>
 80044fa:	eba0 0009 	sub.w	r0, r0, r9
 80044fe:	4540      	cmp	r0, r8
 8004500:	d834      	bhi.n	800456c <UART_WaitOnFlagUntilTimeout+0x9e>
 8004502:	f1b8 0f00 	cmp.w	r8, #0
 8004506:	d033      	beq.n	8004570 <UART_WaitOnFlagUntilTimeout+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	f012 0f04 	tst.w	r2, #4
 8004510:	d0e5      	beq.n	80044de <UART_WaitOnFlagUntilTimeout+0x10>
 8004512:	f1b6 0240 	subs.w	r2, r6, #64	@ 0x40
 8004516:	bf18      	it	ne
 8004518:	2201      	movne	r2, #1
 800451a:	2e80      	cmp	r6, #128	@ 0x80
 800451c:	d0df      	beq.n	80044de <UART_WaitOnFlagUntilTimeout+0x10>
 800451e:	2a00      	cmp	r2, #0
 8004520:	d0dd      	beq.n	80044de <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004522:	69da      	ldr	r2, [r3, #28]
 8004524:	f012 0f08 	tst.w	r2, #8
 8004528:	d111      	bne.n	800454e <UART_WaitOnFlagUntilTimeout+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800452a:	69da      	ldr	r2, [r3, #28]
 800452c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8004530:	d0d5      	beq.n	80044de <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004532:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004536:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8004538:	4628      	mov	r0, r5
 800453a:	f7ff fc39 	bl	8003db0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800453e:	2320      	movs	r3, #32
 8004540:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8004544:	2300      	movs	r3, #0
 8004546:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 800454a:	2003      	movs	r0, #3
 800454c:	e00c      	b.n	8004568 <UART_WaitOnFlagUntilTimeout+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800454e:	2408      	movs	r4, #8
 8004550:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8004552:	4628      	mov	r0, r5
 8004554:	f7ff fc2c 	bl	8003db0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004558:	f8c5 4090 	str.w	r4, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800455c:	2300      	movs	r3, #0
 800455e:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_ERROR;
 8004562:	2001      	movs	r0, #1
 8004564:	e000      	b.n	8004568 <UART_WaitOnFlagUntilTimeout+0x9a>
  return HAL_OK;
 8004566:	2000      	movs	r0, #0
}
 8004568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800456c:	2003      	movs	r0, #3
 800456e:	e7fb      	b.n	8004568 <UART_WaitOnFlagUntilTimeout+0x9a>
 8004570:	2003      	movs	r0, #3
 8004572:	e7f9      	b.n	8004568 <UART_WaitOnFlagUntilTimeout+0x9a>

08004574 <UART_CheckIdleState>:
{
 8004574:	b530      	push	{r4, r5, lr}
 8004576:	b083      	sub	sp, #12
 8004578:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457a:	2300      	movs	r3, #0
 800457c:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8004580:	f7fc fc66 	bl	8000e50 <HAL_GetTick>
 8004584:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004586:	6822      	ldr	r2, [r4, #0]
 8004588:	6812      	ldr	r2, [r2, #0]
 800458a:	f012 0f08 	tst.w	r2, #8
 800458e:	d110      	bne.n	80045b2 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f013 0f04 	tst.w	r3, #4
 8004598:	d128      	bne.n	80045ec <UART_CheckIdleState+0x78>
  huart->gState = HAL_UART_STATE_READY;
 800459a:	2320      	movs	r3, #32
 800459c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80045a0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a4:	2000      	movs	r0, #0
 80045a6:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045a8:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 80045aa:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80045ae:	b003      	add	sp, #12
 80045b0:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	4603      	mov	r3, r0
 80045ba:	2200      	movs	r2, #0
 80045bc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045c0:	4620      	mov	r0, r4
 80045c2:	f7ff ff84 	bl	80044ce <UART_WaitOnFlagUntilTimeout>
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d0e2      	beq.n	8004590 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80045ca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	e852 3f00 	ldrex	r3, [r2]
 80045d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	e842 3100 	strex	r1, r3, [r2]
 80045d8:	2900      	cmp	r1, #0
 80045da:	d1f6      	bne.n	80045ca <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 80045dc:	2320      	movs	r3, #32
 80045de:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      __HAL_UNLOCK(huart);
 80045e2:	2300      	movs	r3, #0
 80045e4:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 80045e8:	2003      	movs	r0, #3
 80045ea:	e7e0      	b.n	80045ae <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	462b      	mov	r3, r5
 80045f4:	2200      	movs	r2, #0
 80045f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80045fa:	4620      	mov	r0, r4
 80045fc:	f7ff ff67 	bl	80044ce <UART_WaitOnFlagUntilTimeout>
 8004600:	2800      	cmp	r0, #0
 8004602:	d0ca      	beq.n	800459a <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004604:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	e852 3f00 	ldrex	r3, [r2]
 800460a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460e:	e842 3100 	strex	r1, r3, [r2]
 8004612:	2900      	cmp	r1, #0
 8004614:	d1f6      	bne.n	8004604 <UART_CheckIdleState+0x90>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004616:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	f102 0308 	add.w	r3, r2, #8
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	3208      	adds	r2, #8
 8004626:	e842 3100 	strex	r1, r3, [r2]
 800462a:	2900      	cmp	r1, #0
 800462c:	d1f3      	bne.n	8004616 <UART_CheckIdleState+0xa2>
      huart->RxState = HAL_UART_STATE_READY;
 800462e:	2320      	movs	r3, #32
 8004630:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(huart);
 8004634:	2300      	movs	r3, #0
 8004636:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 800463a:	2003      	movs	r0, #3
 800463c:	e7b7      	b.n	80045ae <UART_CheckIdleState+0x3a>

0800463e <HAL_UART_Init>:
  if (huart == NULL)
 800463e:	b378      	cbz	r0, 80046a0 <HAL_UART_Init+0x62>
{
 8004640:	b510      	push	{r4, lr}
 8004642:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004644:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8004648:	b30b      	cbz	r3, 800468e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800464a:	2324      	movs	r3, #36	@ 0x24
 800464c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8004650:	6822      	ldr	r2, [r4, #0]
 8004652:	6813      	ldr	r3, [r2, #0]
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800465a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800465c:	b9e3      	cbnz	r3, 8004698 <HAL_UART_Init+0x5a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800465e:	4620      	mov	r0, r4
 8004660:	f7ff fbd2 	bl	8003e08 <UART_SetConfig>
 8004664:	2801      	cmp	r0, #1
 8004666:	d011      	beq.n	800468c <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004668:	6822      	ldr	r2, [r4, #0]
 800466a:	6853      	ldr	r3, [r2, #4]
 800466c:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004670:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004672:	6822      	ldr	r2, [r4, #0]
 8004674:	6893      	ldr	r3, [r2, #8]
 8004676:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800467a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800467c:	6822      	ldr	r2, [r4, #0]
 800467e:	6813      	ldr	r3, [r2, #0]
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004686:	4620      	mov	r0, r4
 8004688:	f7ff ff74 	bl	8004574 <UART_CheckIdleState>
}
 800468c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800468e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8004692:	f7fc fa87 	bl	8000ba4 <HAL_UART_MspInit>
 8004696:	e7d8      	b.n	800464a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8004698:	4620      	mov	r0, r4
 800469a:	f7ff feb3 	bl	8004404 <UART_AdvFeatureConfig>
 800469e:	e7de      	b.n	800465e <HAL_UART_Init+0x20>
    return HAL_ERROR;
 80046a0:	2001      	movs	r0, #1
}
 80046a2:	4770      	bx	lr

080046a4 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046a4:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80046a6:	b92b      	cbnz	r3, 80046b4 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80046a8:	2301      	movs	r3, #1
 80046aa:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80046ae:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 80046b2:	4770      	bx	lr
{
 80046b4:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046b6:	6803      	ldr	r3, [r0, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046be:	6899      	ldr	r1, [r3, #8]
 80046c0:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046c2:	4d09      	ldr	r5, [pc, #36]	@ (80046e8 <UARTEx_SetNbDataToProcess+0x44>)
 80046c4:	5c6b      	ldrb	r3, [r5, r1]
 80046c6:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 80046c8:	4c08      	ldr	r4, [pc, #32]	@ (80046ec <UARTEx_SetNbDataToProcess+0x48>)
 80046ca:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046cc:	fb93 f3f1 	sdiv	r3, r3, r1
 80046d0:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046d4:	5cab      	ldrb	r3, [r5, r2]
 80046d6:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 80046d8:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046da:	fb93 f3f2 	sdiv	r3, r3, r2
 80046de:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 80046e2:	bc30      	pop	{r4, r5}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	08007b98 	.word	0x08007b98
 80046ec:	08007b90 	.word	0x08007b90

080046f0 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80046f0:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d018      	beq.n	800472a <HAL_UARTEx_DisableFifoMode+0x3a>
 80046f8:	2301      	movs	r3, #1
 80046fa:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80046fe:	2324      	movs	r3, #36	@ 0x24
 8004700:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004704:	6803      	ldr	r3, [r0, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004708:	6819      	ldr	r1, [r3, #0]
 800470a:	f021 0101 	bic.w	r1, r1, #1
 800470e:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004710:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004714:	2300      	movs	r3, #0
 8004716:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004718:	6801      	ldr	r1, [r0, #0]
 800471a:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800471c:	2220      	movs	r2, #32
 800471e:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8004722:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8004726:	4618      	mov	r0, r3
 8004728:	4770      	bx	lr
  __HAL_LOCK(huart);
 800472a:	2002      	movs	r0, #2
}
 800472c:	4770      	bx	lr

0800472e <HAL_UARTEx_SetTxFifoThreshold>:
{
 800472e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004730:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8004734:	2b01      	cmp	r3, #1
 8004736:	d01d      	beq.n	8004774 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8004738:	4604      	mov	r4, r0
 800473a:	2301      	movs	r3, #1
 800473c:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004740:	2324      	movs	r3, #36	@ 0x24
 8004742:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004746:	6803      	ldr	r3, [r0, #0]
 8004748:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	f022 0201 	bic.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004752:	6802      	ldr	r2, [r0, #0]
 8004754:	6893      	ldr	r3, [r2, #8]
 8004756:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800475a:	4319      	orrs	r1, r3
 800475c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800475e:	f7ff ffa1 	bl	80046a4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004766:	2320      	movs	r3, #32
 8004768:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800476c:	2000      	movs	r0, #0
 800476e:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8004772:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004774:	2002      	movs	r0, #2
 8004776:	e7fc      	b.n	8004772 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08004778 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8004778:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800477a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800477e:	2b01      	cmp	r3, #1
 8004780:	d01d      	beq.n	80047be <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8004782:	4604      	mov	r4, r0
 8004784:	2301      	movs	r3, #1
 8004786:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800478a:	2324      	movs	r3, #36	@ 0x24
 800478c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004790:	6803      	ldr	r3, [r0, #0]
 8004792:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800479c:	6802      	ldr	r2, [r0, #0]
 800479e:	6893      	ldr	r3, [r2, #8]
 80047a0:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80047a4:	4319      	orrs	r1, r3
 80047a6:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80047a8:	f7ff ff7c 	bl	80046a4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80047b0:	2320      	movs	r3, #32
 80047b2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80047b6:	2000      	movs	r0, #0
 80047b8:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80047bc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80047be:	2002      	movs	r0, #2
 80047c0:	e7fc      	b.n	80047bc <HAL_UARTEx_SetRxFifoThreshold+0x44>

080047c2 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047c2:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047c8:	9b01      	ldr	r3, [sp, #4]
 80047ca:	3301      	adds	r3, #1
 80047cc:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80047ce:	9b01      	ldr	r3, [sp, #4]
 80047d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047d4:	d815      	bhi.n	8004802 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047d6:	6903      	ldr	r3, [r0, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	daf5      	bge.n	80047c8 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047e0:	6903      	ldr	r3, [r0, #16]
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 80047e8:	9b01      	ldr	r3, [sp, #4]
 80047ea:	3301      	adds	r3, #1
 80047ec:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80047ee:	9b01      	ldr	r3, [sp, #4]
 80047f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047f4:	d808      	bhi.n	8004808 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047f6:	6903      	ldr	r3, [r0, #16]
 80047f8:	f013 0f01 	tst.w	r3, #1
 80047fc:	d1f4      	bne.n	80047e8 <USB_CoreReset+0x26>

  return HAL_OK;
 80047fe:	2000      	movs	r0, #0
 8004800:	e000      	b.n	8004804 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8004802:	2003      	movs	r0, #3
}
 8004804:	b002      	add	sp, #8
 8004806:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004808:	2003      	movs	r0, #3
 800480a:	e7fb      	b.n	8004804 <USB_CoreReset+0x42>

0800480c <USB_CoreInit>:
{
 800480c:	b084      	sub	sp, #16
 800480e:	b510      	push	{r4, lr}
 8004810:	4604      	mov	r4, r0
 8004812:	a803      	add	r0, sp, #12
 8004814:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004818:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d11f      	bne.n	8004860 <USB_CoreInit+0x54>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004820:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004826:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004828:	68e2      	ldr	r2, [r4, #12]
 800482a:	4b1f      	ldr	r3, [pc, #124]	@ (80048a8 <USB_CoreInit+0x9c>)
 800482c:	4013      	ands	r3, r2
 800482e:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004830:	68e3      	ldr	r3, [r4, #12]
 8004832:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004836:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8004838:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d00a      	beq.n	8004856 <USB_CoreInit+0x4a>
    ret = USB_CoreReset(USBx);
 8004840:	4620      	mov	r0, r4
 8004842:	f7ff ffbe 	bl	80047c2 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8004846:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d01c      	beq.n	8004888 <USB_CoreInit+0x7c>
}
 800484e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004852:	b004      	add	sp, #16
 8004854:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004856:	68e3      	ldr	r3, [r4, #12]
 8004858:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800485c:	60e3      	str	r3, [r4, #12]
 800485e:	e7ef      	b.n	8004840 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004860:	68e3      	ldr	r3, [r4, #12]
 8004862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004866:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8004868:	4620      	mov	r0, r4
 800486a:	f7ff ffaa 	bl	80047c2 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800486e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8004872:	b923      	cbnz	r3, 800487e <USB_CoreInit+0x72>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004874:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800487a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800487c:	e7e3      	b.n	8004846 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800487e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004884:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004886:	e7de      	b.n	8004846 <USB_CoreInit+0x3a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004888:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800488a:	b29b      	uxth	r3, r3
 800488c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800488e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004890:	4b06      	ldr	r3, [pc, #24]	@ (80048ac <USB_CoreInit+0xa0>)
 8004892:	4313      	orrs	r3, r2
 8004894:	65e3      	str	r3, [r4, #92]	@ 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004896:	68a3      	ldr	r3, [r4, #8]
 8004898:	f043 0306 	orr.w	r3, r3, #6
 800489c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800489e:	68a3      	ldr	r3, [r4, #8]
 80048a0:	f043 0320 	orr.w	r3, r3, #32
 80048a4:	60a3      	str	r3, [r4, #8]
 80048a6:	e7d2      	b.n	800484e <USB_CoreInit+0x42>
 80048a8:	ffbdffbf 	.word	0xffbdffbf
 80048ac:	03ee0000 	.word	0x03ee0000

080048b0 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80048b0:	2a02      	cmp	r2, #2
 80048b2:	d00a      	beq.n	80048ca <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 80048b4:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80048b6:	68c3      	ldr	r3, [r0, #12]
 80048b8:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80048bc:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80048be:	68c3      	ldr	r3, [r0, #12]
 80048c0:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80048c4:	60c3      	str	r3, [r0, #12]
}
 80048c6:	2000      	movs	r0, #0
 80048c8:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80048ca:	4b20      	ldr	r3, [pc, #128]	@ (800494c <USB_SetTurnaroundTime+0x9c>)
 80048cc:	440b      	add	r3, r1
 80048ce:	4a20      	ldr	r2, [pc, #128]	@ (8004950 <USB_SetTurnaroundTime+0xa0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d929      	bls.n	8004928 <USB_SetTurnaroundTime+0x78>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80048d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004954 <USB_SetTurnaroundTime+0xa4>)
 80048d6:	440b      	add	r3, r1
 80048d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004958 <USB_SetTurnaroundTime+0xa8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d926      	bls.n	800492c <USB_SetTurnaroundTime+0x7c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048de:	4b1f      	ldr	r3, [pc, #124]	@ (800495c <USB_SetTurnaroundTime+0xac>)
 80048e0:	440b      	add	r3, r1
 80048e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004960 <USB_SetTurnaroundTime+0xb0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d923      	bls.n	8004930 <USB_SetTurnaroundTime+0x80>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80048e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004964 <USB_SetTurnaroundTime+0xb4>)
 80048ea:	440b      	add	r3, r1
 80048ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004968 <USB_SetTurnaroundTime+0xb8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d320      	bcc.n	8004934 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80048f2:	4b1e      	ldr	r3, [pc, #120]	@ (800496c <USB_SetTurnaroundTime+0xbc>)
 80048f4:	440b      	add	r3, r1
 80048f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004970 <USB_SetTurnaroundTime+0xc0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d91d      	bls.n	8004938 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80048fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004974 <USB_SetTurnaroundTime+0xc4>)
 80048fe:	440b      	add	r3, r1
 8004900:	4a1d      	ldr	r2, [pc, #116]	@ (8004978 <USB_SetTurnaroundTime+0xc8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d31a      	bcc.n	800493c <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004906:	4b1d      	ldr	r3, [pc, #116]	@ (800497c <USB_SetTurnaroundTime+0xcc>)
 8004908:	440b      	add	r3, r1
 800490a:	4a1d      	ldr	r2, [pc, #116]	@ (8004980 <USB_SetTurnaroundTime+0xd0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d317      	bcc.n	8004940 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004910:	4b1c      	ldr	r3, [pc, #112]	@ (8004984 <USB_SetTurnaroundTime+0xd4>)
 8004912:	440b      	add	r3, r1
 8004914:	4a1c      	ldr	r2, [pc, #112]	@ (8004988 <USB_SetTurnaroundTime+0xd8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d314      	bcc.n	8004944 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800491a:	4b1c      	ldr	r3, [pc, #112]	@ (800498c <USB_SetTurnaroundTime+0xdc>)
 800491c:	440b      	add	r3, r1
 800491e:	4a1c      	ldr	r2, [pc, #112]	@ (8004990 <USB_SetTurnaroundTime+0xe0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d211      	bcs.n	8004948 <USB_SetTurnaroundTime+0x98>
      UsbTrd = 0x7U;
 8004924:	2207      	movs	r2, #7
 8004926:	e7c6      	b.n	80048b6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8004928:	220f      	movs	r2, #15
 800492a:	e7c4      	b.n	80048b6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 800492c:	220e      	movs	r2, #14
 800492e:	e7c2      	b.n	80048b6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8004930:	220d      	movs	r2, #13
 8004932:	e7c0      	b.n	80048b6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8004934:	220c      	movs	r2, #12
 8004936:	e7be      	b.n	80048b6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8004938:	220b      	movs	r2, #11
 800493a:	e7bc      	b.n	80048b6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 800493c:	220a      	movs	r2, #10
 800493e:	e7ba      	b.n	80048b6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8004940:	2209      	movs	r2, #9
 8004942:	e7b8      	b.n	80048b6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8004944:	2208      	movs	r2, #8
 8004946:	e7b6      	b.n	80048b6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8004948:	2206      	movs	r2, #6
 800494a:	e7b4      	b.n	80048b6 <USB_SetTurnaroundTime+0x6>
 800494c:	ff275340 	.word	0xff275340
 8004950:	000c34ff 	.word	0x000c34ff
 8004954:	ff1b1e40 	.word	0xff1b1e40
 8004958:	000f423f 	.word	0x000f423f
 800495c:	ff0bdc00 	.word	0xff0bdc00
 8004960:	00124f7f 	.word	0x00124f7f
 8004964:	fef98c80 	.word	0xfef98c80
 8004968:	0013d620 	.word	0x0013d620
 800496c:	fee5b660 	.word	0xfee5b660
 8004970:	0016e35f 	.word	0x0016e35f
 8004974:	feced300 	.word	0xfeced300
 8004978:	001b7740 	.word	0x001b7740
 800497c:	feb35bc0 	.word	0xfeb35bc0
 8004980:	002191c0 	.word	0x002191c0
 8004984:	fe91ca00 	.word	0xfe91ca00
 8004988:	00387520 	.word	0x00387520
 800498c:	fe5954e0 	.word	0xfe5954e0
 8004990:	00419ce0 	.word	0x00419ce0

08004994 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004994:	6883      	ldr	r3, [r0, #8]
 8004996:	f043 0301 	orr.w	r3, r3, #1
 800499a:	6083      	str	r3, [r0, #8]
}
 800499c:	2000      	movs	r0, #0
 800499e:	4770      	bx	lr

080049a0 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049a0:	6883      	ldr	r3, [r0, #8]
 80049a2:	f023 0301 	bic.w	r3, r3, #1
 80049a6:	6083      	str	r3, [r0, #8]
}
 80049a8:	2000      	movs	r0, #0
 80049aa:	4770      	bx	lr

080049ac <USB_FlushTxFifo>:
{
 80049ac:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	9301      	str	r3, [sp, #4]
    count++;
 80049b2:	9b01      	ldr	r3, [sp, #4]
 80049b4:	3301      	adds	r3, #1
 80049b6:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80049b8:	9b01      	ldr	r3, [sp, #4]
 80049ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049be:	d815      	bhi.n	80049ec <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049c0:	6903      	ldr	r3, [r0, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	daf5      	bge.n	80049b2 <USB_FlushTxFifo+0x6>
  count = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049ca:	0189      	lsls	r1, r1, #6
 80049cc:	f041 0120 	orr.w	r1, r1, #32
 80049d0:	6101      	str	r1, [r0, #16]
    count++;
 80049d2:	9b01      	ldr	r3, [sp, #4]
 80049d4:	3301      	adds	r3, #1
 80049d6:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80049d8:	9b01      	ldr	r3, [sp, #4]
 80049da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049de:	d808      	bhi.n	80049f2 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049e0:	6903      	ldr	r3, [r0, #16]
 80049e2:	f013 0f20 	tst.w	r3, #32
 80049e6:	d1f4      	bne.n	80049d2 <USB_FlushTxFifo+0x26>
  return HAL_OK;
 80049e8:	2000      	movs	r0, #0
 80049ea:	e000      	b.n	80049ee <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 80049ec:	2003      	movs	r0, #3
}
 80049ee:	b002      	add	sp, #8
 80049f0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80049f2:	2003      	movs	r0, #3
 80049f4:	e7fb      	b.n	80049ee <USB_FlushTxFifo+0x42>

080049f6 <USB_FlushRxFifo>:
{
 80049f6:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	9301      	str	r3, [sp, #4]
    count++;
 80049fc:	9b01      	ldr	r3, [sp, #4]
 80049fe:	3301      	adds	r3, #1
 8004a00:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004a02:	9b01      	ldr	r3, [sp, #4]
 8004a04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a08:	d813      	bhi.n	8004a32 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a0a:	6903      	ldr	r3, [r0, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	daf5      	bge.n	80049fc <USB_FlushRxFifo+0x6>
  count = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a14:	2310      	movs	r3, #16
 8004a16:	6103      	str	r3, [r0, #16]
    count++;
 8004a18:	9b01      	ldr	r3, [sp, #4]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004a1e:	9b01      	ldr	r3, [sp, #4]
 8004a20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a24:	d808      	bhi.n	8004a38 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a26:	6903      	ldr	r3, [r0, #16]
 8004a28:	f013 0f10 	tst.w	r3, #16
 8004a2c:	d1f4      	bne.n	8004a18 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8004a2e:	2000      	movs	r0, #0
 8004a30:	e000      	b.n	8004a34 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8004a32:	2003      	movs	r0, #3
}
 8004a34:	b002      	add	sp, #8
 8004a36:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004a38:	2003      	movs	r0, #3
 8004a3a:	e7fb      	b.n	8004a34 <USB_FlushRxFifo+0x3e>

08004a3c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8004a3c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004a40:	4319      	orrs	r1, r3
 8004a42:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8004a46:	2000      	movs	r0, #0
 8004a48:	4770      	bx	lr
	...

08004a4c <USB_DevInit>:
{
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a50:	4604      	mov	r4, r0
 8004a52:	a807      	add	r0, sp, #28
 8004a54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e006      	b.n	8004a6a <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8004a5c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004a60:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004a64:	2100      	movs	r1, #0
 8004a66:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8004a68:	3301      	adds	r3, #1
 8004a6a:	2b0e      	cmp	r3, #14
 8004a6c:	d9f6      	bls.n	8004a5c <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 8004a6e:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 8004a72:	bb06      	cbnz	r6, 8004ab6 <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a74:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8004a78:	f043 0302 	orr.w	r3, r3, #2
 8004a7c:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a80:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004a82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a86:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a8e:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a96:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a9e:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d111      	bne.n	8004aca <USB_DevInit+0x7e>
    if (cfg.speed == USBD_HS_SPEED)
 8004aa6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004aaa:	b94b      	cbnz	r3, 8004ac0 <USB_DevInit+0x74>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004aac:	2100      	movs	r1, #0
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f7ff ffc4 	bl	8004a3c <USB_SetDevSpeed>
 8004ab4:	e00d      	b.n	8004ad2 <USB_DevInit+0x86>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ab6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004ab8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004abc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004abe:	e7eb      	b.n	8004a98 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f7ff ffba 	bl	8004a3c <USB_SetDevSpeed>
 8004ac8:	e003      	b.n	8004ad2 <USB_DevInit+0x86>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004aca:	2103      	movs	r1, #3
 8004acc:	4620      	mov	r0, r4
 8004ace:	f7ff ffb5 	bl	8004a3c <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ad2:	2110      	movs	r1, #16
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	f7ff ff69 	bl	80049ac <USB_FlushTxFifo>
 8004ada:	4605      	mov	r5, r0
 8004adc:	b100      	cbz	r0, 8004ae0 <USB_DevInit+0x94>
    ret = HAL_ERROR;
 8004ade:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f7ff ff88 	bl	80049f6 <USB_FlushRxFifo>
 8004ae6:	b100      	cbz	r0, 8004aea <USB_DevInit+0x9e>
    ret = HAL_ERROR;
 8004ae8:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8004aea:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8004aee:	2300      	movs	r3, #0
 8004af0:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004af4:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004af8:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004afc:	e00a      	b.n	8004b14 <USB_DevInit+0xc8>
      if (i == 0U)
 8004afe:	b9cb      	cbnz	r3, 8004b34 <USB_DevInit+0xe8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b00:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8004b04:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b08:	2200      	movs	r2, #0
 8004b0a:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b0c:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8004b10:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b12:	3301      	adds	r3, #1
 8004b14:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8004b18:	4299      	cmp	r1, r3
 8004b1a:	d910      	bls.n	8004b3e <USB_DevInit+0xf2>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b1c:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8004b20:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 8004b24:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	dbe8      	blt.n	8004afe <USB_DevInit+0xb2>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8004b32:	e7e9      	b.n	8004b08 <USB_DevInit+0xbc>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b38:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8004b3c:	e7e4      	b.n	8004b08 <USB_DevInit+0xbc>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e00a      	b.n	8004b58 <USB_DevInit+0x10c>
      if (i == 0U)
 8004b42:	b1bb      	cbz	r3, 8004b74 <USB_DevInit+0x128>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b44:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 8004b48:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b50:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8004b54:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b56:	3301      	adds	r3, #1
 8004b58:	4299      	cmp	r1, r3
 8004b5a:	d910      	bls.n	8004b7e <USB_DevInit+0x132>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b5c:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8004b60:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 8004b64:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 8004b68:	2f00      	cmp	r7, #0
 8004b6a:	dbea      	blt.n	8004b42 <USB_DevInit+0xf6>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b6c:	2700      	movs	r7, #0
 8004b6e:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8004b72:	e7eb      	b.n	8004b4c <USB_DevInit+0x100>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b74:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 8004b78:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8004b7c:	e7e6      	b.n	8004b4c <USB_DevInit+0x100>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b7e:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8004b82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b86:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b8e:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8004b92:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8004b94:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8004b98:	b91b      	cbnz	r3, 8004ba2 <USB_DevInit+0x156>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b9a:	69a3      	ldr	r3, [r4, #24]
 8004b9c:	f043 0310 	orr.w	r3, r3, #16
 8004ba0:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ba2:	69a2      	ldr	r2, [r4, #24]
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd0 <USB_DevInit+0x184>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8004baa:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8004bae:	b11b      	cbz	r3, 8004bb8 <USB_DevInit+0x16c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bb0:	69a3      	ldr	r3, [r4, #24]
 8004bb2:	f043 0308 	orr.w	r3, r3, #8
 8004bb6:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004bb8:	2e01      	cmp	r6, #1
 8004bba:	d004      	beq.n	8004bc6 <USB_DevInit+0x17a>
}
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004bc2:	b004      	add	sp, #16
 8004bc4:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bc6:	69a2      	ldr	r2, [r4, #24]
 8004bc8:	4b02      	ldr	r3, [pc, #8]	@ (8004bd4 <USB_DevInit+0x188>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	61a3      	str	r3, [r4, #24]
 8004bce:	e7f5      	b.n	8004bbc <USB_DevInit+0x170>
 8004bd0:	803c3800 	.word	0x803c3800
 8004bd4:	40000004 	.word	0x40000004

08004bd8 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004bd8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004bdc:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d004      	beq.n	8004bee <USB_GetDevSpeed+0x16>
 8004be4:	2b06      	cmp	r3, #6
 8004be6:	d004      	beq.n	8004bf2 <USB_GetDevSpeed+0x1a>
 8004be8:	b92b      	cbnz	r3, 8004bf6 <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004bea:	2000      	movs	r0, #0
 8004bec:	4770      	bx	lr
 8004bee:	2002      	movs	r0, #2
 8004bf0:	4770      	bx	lr
 8004bf2:	2002      	movs	r0, #2
 8004bf4:	4770      	bx	lr
 8004bf6:	200f      	movs	r0, #15
}
 8004bf8:	4770      	bx	lr
	...

08004bfc <USB_ActivateEndpoint>:
{
 8004bfc:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8004bfe:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8004c02:	784b      	ldrb	r3, [r1, #1]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d021      	beq.n	8004c4c <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c08:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 8004c0c:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 8004c10:	f00c 040f 	and.w	r4, ip, #15
 8004c14:	2201      	movs	r2, #1
 8004c16:	40a2      	lsls	r2, r4
 8004c18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c1c:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c20:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8004c24:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004c28:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004c2c:	d10c      	bne.n	8004c48 <USB_ActivateEndpoint+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c2e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8004c32:	688b      	ldr	r3, [r1, #8]
 8004c34:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c38:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c3a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	4b13      	ldr	r3, [pc, #76]	@ (8004c90 <USB_ActivateEndpoint+0x94>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004c48:	2000      	movs	r0, #0
 8004c4a:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c4c:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8004c50:	f00c 0e0f 	and.w	lr, ip, #15
 8004c54:	fa03 f30e 	lsl.w	r3, r3, lr
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c60:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8004c64:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004c68:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004c6c:	d1ec      	bne.n	8004c48 <USB_ActivateEndpoint+0x4c>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c6e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8004c72:	688b      	ldr	r3, [r1, #8]
 8004c74:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c78:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c7a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c7e:	ea43 538c 	orr.w	r3, r3, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c82:	431a      	orrs	r2, r3
 8004c84:	4b02      	ldr	r3, [pc, #8]	@ (8004c90 <USB_ActivateEndpoint+0x94>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8004c8c:	e7dc      	b.n	8004c48 <USB_ActivateEndpoint+0x4c>
 8004c8e:	bf00      	nop
 8004c90:	10008000 	.word	0x10008000

08004c94 <USB_EPStopXfer>:
{
 8004c94:	b410      	push	{r4}
 8004c96:	b083      	sub	sp, #12
 8004c98:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8004c9e:	7848      	ldrb	r0, [r1, #1]
 8004ca0:	2801      	cmp	r0, #1
 8004ca2:	d00b      	beq.n	8004cbc <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ca4:	780b      	ldrb	r3, [r1, #0]
 8004ca6:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004caa:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	db2d      	blt.n	8004d0e <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8004cb2:	2000      	movs	r0, #0
}
 8004cb4:	b003      	add	sp, #12
 8004cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cba:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cbc:	780b      	ldrb	r3, [r1, #0]
 8004cbe:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004cc2:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8004cc6:	2c00      	cmp	r4, #0
 8004cc8:	db01      	blt.n	8004cce <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 8004cca:	2000      	movs	r0, #0
 8004ccc:	e7f2      	b.n	8004cb4 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004cce:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8004cd2:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8004cd6:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004cda:	780b      	ldrb	r3, [r1, #0]
 8004cdc:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004ce0:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8004ce4:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8004ce8:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 8004cec:	9b01      	ldr	r3, [sp, #4]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8004cf2:	9c01      	ldr	r4, [sp, #4]
 8004cf4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004cf8:	429c      	cmp	r4, r3
 8004cfa:	d8db      	bhi.n	8004cb4 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004cfc:	780b      	ldrb	r3, [r1, #0]
 8004cfe:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004d02:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	dbf0      	blt.n	8004cec <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	e7d2      	b.n	8004cb4 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004d0e:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8004d12:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 8004d16:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004d1a:	780b      	ldrb	r3, [r1, #0]
 8004d1c:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004d20:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8004d24:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8004d28:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 8004d2c:	9b01      	ldr	r3, [sp, #4]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8004d32:	9801      	ldr	r0, [sp, #4]
 8004d34:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004d38:	4298      	cmp	r0, r3
 8004d3a:	d808      	bhi.n	8004d4e <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004d3c:	780b      	ldrb	r3, [r1, #0]
 8004d3e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8004d42:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	dbf0      	blt.n	8004d2c <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	e7b2      	b.n	8004cb4 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8004d4e:	2001      	movs	r0, #1
 8004d50:	e7b0      	b.n	8004cb4 <USB_EPStopXfer+0x20>

08004d52 <USB_WritePacket>:
{
 8004d52:	b510      	push	{r4, lr}
 8004d54:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8004d58:	b984      	cbnz	r4, 8004d7c <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d5a:	3303      	adds	r3, #3
 8004d5c:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8004d60:	f04f 0c00 	mov.w	ip, #0
 8004d64:	e008      	b.n	8004d78 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d66:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8004d6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d6e:	f851 4b04 	ldr.w	r4, [r1], #4
 8004d72:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8004d74:	f10c 0c01 	add.w	ip, ip, #1
 8004d78:	45f4      	cmp	ip, lr
 8004d7a:	d3f4      	bcc.n	8004d66 <USB_WritePacket+0x14>
}
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	bd10      	pop	{r4, pc}

08004d80 <USB_EPStartXfer>:
{
 8004d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d82:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8004d84:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8004d86:	784b      	ldrb	r3, [r1, #1]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d02d      	beq.n	8004de8 <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d8c:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8004d90:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8004d94:	691d      	ldr	r5, [r3, #16]
 8004d96:	f36f 0512 	bfc	r5, #0, #19
 8004d9a:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d9c:	691d      	ldr	r5, [r3, #16]
 8004d9e:	f36f 45dc 	bfc	r5, #19, #10
 8004da2:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8004da4:	2c00      	cmp	r4, #0
 8004da6:	f040 80ce 	bne.w	8004f46 <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 8004daa:	690c      	ldr	r4, [r1, #16]
 8004dac:	b10c      	cbz	r4, 8004db2 <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 8004dae:	688c      	ldr	r4, [r1, #8]
 8004db0:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8004db2:	688c      	ldr	r4, [r1, #8]
 8004db4:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004db6:	691d      	ldr	r5, [r3, #16]
 8004db8:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004dbc:	432c      	orrs	r4, r5
 8004dbe:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004dc0:	691c      	ldr	r4, [r3, #16]
 8004dc2:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8004dc6:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8004dc8:	2a01      	cmp	r2, #1
 8004dca:	f000 80df 	beq.w	8004f8c <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 8004dce:	790b      	ldrb	r3, [r1, #4]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	f000 80e1 	beq.w	8004f98 <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004dd6:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8004dda:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004dde:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8004de2:	2000      	movs	r0, #0
 8004de4:	b003      	add	sp, #12
 8004de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8004de8:	690b      	ldr	r3, [r1, #16]
 8004dea:	bb73      	cbnz	r3, 8004e4a <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dec:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8004df0:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8004df4:	f36f 45dc 	bfc	r5, #19, #10
 8004df8:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dfc:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8004e00:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8004e04:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e08:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8004e0c:	f36f 0512 	bfc	r5, #0, #19
 8004e10:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8004e14:	2a01      	cmp	r2, #1
 8004e16:	d054      	beq.n	8004ec2 <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e18:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004e1c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004e20:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e24:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004e28:	790b      	ldrb	r3, [r1, #4]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d072      	beq.n	8004f14 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 8004e2e:	690b      	ldr	r3, [r1, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0d6      	beq.n	8004de2 <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e34:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8004e38:	7809      	ldrb	r1, [r1, #0]
 8004e3a:	f001 010f 	and.w	r1, r1, #15
 8004e3e:	2201      	movs	r2, #1
 8004e40:	408a      	lsls	r2, r1
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8004e48:	e7cb      	b.n	8004de2 <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e4a:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8004e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e52:	691d      	ldr	r5, [r3, #16]
 8004e54:	f36f 0512 	bfc	r5, #0, #19
 8004e58:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e5a:	691d      	ldr	r5, [r3, #16]
 8004e5c:	f36f 45dc 	bfc	r5, #19, #10
 8004e60:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8004e62:	b984      	cbnz	r4, 8004e86 <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 8004e64:	690e      	ldr	r6, [r1, #16]
 8004e66:	688d      	ldr	r5, [r1, #8]
 8004e68:	42ae      	cmp	r6, r5
 8004e6a:	d900      	bls.n	8004e6e <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 8004e6c:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e6e:	691d      	ldr	r5, [r3, #16]
 8004e70:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8004e74:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e76:	691d      	ldr	r5, [r3, #16]
 8004e78:	690e      	ldr	r6, [r1, #16]
 8004e7a:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 8004e7e:	ea45 050c 	orr.w	r5, r5, ip
 8004e82:	611d      	str	r5, [r3, #16]
 8004e84:	e7c6      	b.n	8004e14 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e86:	690d      	ldr	r5, [r1, #16]
 8004e88:	688e      	ldr	r6, [r1, #8]
 8004e8a:	4435      	add	r5, r6
 8004e8c:	3d01      	subs	r5, #1
 8004e8e:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004e92:	691e      	ldr	r6, [r3, #16]
 8004e94:	fa1f fc85 	uxth.w	ip, r5
 8004e98:	4f49      	ldr	r7, [pc, #292]	@ (8004fc0 <USB_EPStartXfer+0x240>)
 8004e9a:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8004e9e:	4335      	orrs	r5, r6
 8004ea0:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8004ea2:	790d      	ldrb	r5, [r1, #4]
 8004ea4:	2d01      	cmp	r5, #1
 8004ea6:	d1e6      	bne.n	8004e76 <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ea8:	691d      	ldr	r5, [r3, #16]
 8004eaa:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8004eae:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004eb0:	691d      	ldr	r5, [r3, #16]
 8004eb2:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8004eb6:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 8004eba:	ea45 050c 	orr.w	r5, r5, ip
 8004ebe:	611d      	str	r5, [r3, #16]
 8004ec0:	e7d9      	b.n	8004e76 <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 8004ec2:	69cb      	ldr	r3, [r1, #28]
 8004ec4:	b11b      	cbz	r3, 8004ece <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ec6:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8004eca:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8004ece:	790b      	ldrb	r3, [r1, #4]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d008      	beq.n	8004ee6 <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ed4:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004ed8:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004edc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ee0:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8004ee4:	e77d      	b.n	8004de2 <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ee6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004eea:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004eee:	d108      	bne.n	8004f02 <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ef0:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8004ef4:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8004ef8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004efc:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8004f00:	e7e8      	b.n	8004ed4 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f02:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8004f06:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8004f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f0e:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8004f12:	e7df      	b.n	8004ed4 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f14:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004f18:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004f1c:	d10c      	bne.n	8004f38 <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f1e:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004f22:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f26:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f2a:	9200      	str	r2, [sp, #0]
 8004f2c:	8a0b      	ldrh	r3, [r1, #16]
 8004f2e:	780a      	ldrb	r2, [r1, #0]
 8004f30:	68c9      	ldr	r1, [r1, #12]
 8004f32:	f7ff ff0e 	bl	8004d52 <USB_WritePacket>
 8004f36:	e754      	b.n	8004de2 <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f38:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f40:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8004f44:	e7f1      	b.n	8004f2a <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 8004f46:	690c      	ldr	r4, [r1, #16]
 8004f48:	b954      	cbnz	r4, 8004f60 <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f4a:	691c      	ldr	r4, [r3, #16]
 8004f4c:	688d      	ldr	r5, [r1, #8]
 8004f4e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004f52:	432c      	orrs	r4, r5
 8004f54:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f56:	691c      	ldr	r4, [r3, #16]
 8004f58:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8004f5c:	611c      	str	r4, [r3, #16]
 8004f5e:	e733      	b.n	8004dc8 <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f60:	688d      	ldr	r5, [r1, #8]
 8004f62:	442c      	add	r4, r5
 8004f64:	3c01      	subs	r4, #1
 8004f66:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004f6a:	b2a4      	uxth	r4, r4
 8004f6c:	fb04 f505 	mul.w	r5, r4, r5
 8004f70:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f72:	691d      	ldr	r5, [r3, #16]
 8004f74:	4e12      	ldr	r6, [pc, #72]	@ (8004fc0 <USB_EPStartXfer+0x240>)
 8004f76:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8004f7a:	432c      	orrs	r4, r5
 8004f7c:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004f7e:	691c      	ldr	r4, [r3, #16]
 8004f80:	6a0d      	ldr	r5, [r1, #32]
 8004f82:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004f86:	432c      	orrs	r4, r5
 8004f88:	611c      	str	r4, [r3, #16]
 8004f8a:	e71d      	b.n	8004dc8 <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f8c:	68ca      	ldr	r2, [r1, #12]
 8004f8e:	2a00      	cmp	r2, #0
 8004f90:	f43f af1d 	beq.w	8004dce <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f94:	615a      	str	r2, [r3, #20]
 8004f96:	e71a      	b.n	8004dce <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f98:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004f9c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004fa0:	d106      	bne.n	8004fb0 <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004fa2:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8004fa6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004faa:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8004fae:	e712      	b.n	8004dd6 <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fb0:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8004fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb8:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8004fbc:	e70b      	b.n	8004dd6 <USB_EPStartXfer+0x56>
 8004fbe:	bf00      	nop
 8004fc0:	1ff80000 	.word	0x1ff80000

08004fc4 <USB_ReadPacket>:
{
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	4684      	mov	ip, r0
 8004fc8:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8004fca:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8004fce:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e005      	b.n	8004fe2 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fd6:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 8004fda:	6809      	ldr	r1, [r1, #0]
 8004fdc:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	4573      	cmp	r3, lr
 8004fe4:	d3f7      	bcc.n	8004fd6 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8004fe6:	b17a      	cbz	r2, 8005008 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004fe8:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8004fec:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8004ff0:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ff2:	b2cb      	uxtb	r3, r1
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	fa24 f303 	lsr.w	r3, r4, r3
 8004ffa:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8004ffe:	3101      	adds	r1, #1
      remaining_bytes--;
 8005000:	3a01      	subs	r2, #1
 8005002:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8005004:	2a00      	cmp	r2, #0
 8005006:	d1f4      	bne.n	8004ff2 <USB_ReadPacket+0x2e>
}
 8005008:	bd10      	pop	{r4, pc}

0800500a <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800500a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800500c:	784a      	ldrb	r2, [r1, #1]
 800500e:	2a01      	cmp	r2, #1
 8005010:	d014      	beq.n	800503c <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005012:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005016:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800501a:	2a00      	cmp	r2, #0
 800501c:	db06      	blt.n	800502c <USB_EPSetStall+0x22>
 800501e:	b12b      	cbz	r3, 800502c <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005020:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005024:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005028:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800502c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005030:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005034:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8005038:	2000      	movs	r0, #0
 800503a:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800503c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005040:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8005044:	2a00      	cmp	r2, #0
 8005046:	db06      	blt.n	8005056 <USB_EPSetStall+0x4c>
 8005048:	b12b      	cbz	r3, 8005056 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800504a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800504e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005052:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005056:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800505a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800505e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8005062:	e7e9      	b.n	8005038 <USB_EPSetStall+0x2e>

08005064 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8005064:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005066:	784a      	ldrb	r2, [r1, #1]
 8005068:	2a01      	cmp	r2, #1
 800506a:	d00e      	beq.n	800508a <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800506c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005070:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8005074:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005078:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800507c:	790b      	ldrb	r3, [r1, #4]
 800507e:	3b02      	subs	r3, #2
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	d915      	bls.n	80050b2 <USB_EPClearStall+0x4e>
}
 8005086:	2000      	movs	r0, #0
 8005088:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800508a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800508e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8005092:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005096:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800509a:	790b      	ldrb	r3, [r1, #4]
 800509c:	3b02      	subs	r3, #2
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d8f0      	bhi.n	8005086 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050a4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80050a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ac:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80050b0:	e7e9      	b.n	8005086 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050b2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80050b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ba:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 80050be:	e7e2      	b.n	8005086 <USB_EPClearStall+0x22>

080050c0 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80050c0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 80050c4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80050c8:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80050cc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 80050d0:	0109      	lsls	r1, r1, #4
 80050d2:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 80050d6:	430b      	orrs	r3, r1
 80050d8:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 80050dc:	2000      	movs	r0, #0
 80050de:	4770      	bx	lr

080050e0 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80050e0:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 80050e4:	f023 0303 	bic.w	r3, r3, #3
 80050e8:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80050ec:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 80050f0:	f023 0302 	bic.w	r3, r3, #2
 80050f4:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 80050f8:	2000      	movs	r0, #0
 80050fa:	4770      	bx	lr

080050fc <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80050fc:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8005100:	f023 0303 	bic.w	r3, r3, #3
 8005104:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005108:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 800510c:	f043 0302 	orr.w	r3, r3, #2
 8005110:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8005114:	2000      	movs	r0, #0
 8005116:	4770      	bx	lr

08005118 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8005118:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800511a:	6980      	ldr	r0, [r0, #24]
}
 800511c:	4010      	ands	r0, r2
 800511e:	4770      	bx	lr

08005120 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005120:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8005124:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005128:	69c0      	ldr	r0, [r0, #28]
 800512a:	4018      	ands	r0, r3
}
 800512c:	0c00      	lsrs	r0, r0, #16
 800512e:	4770      	bx	lr

08005130 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005130:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8005134:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005138:	69c0      	ldr	r0, [r0, #28]
 800513a:	4018      	ands	r0, r3
}
 800513c:	b280      	uxth	r0, r0
 800513e:	4770      	bx	lr

08005140 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005140:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8005144:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005148:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 800514c:	6940      	ldr	r0, [r0, #20]
}
 800514e:	4010      	ands	r0, r2
 8005150:	4770      	bx	lr

08005152 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8005152:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005156:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800515a:	f001 0c0f 	and.w	ip, r1, #15
 800515e:	fa23 f30c 	lsr.w	r3, r3, ip
 8005162:	01db      	lsls	r3, r3, #7
 8005164:	b2db      	uxtb	r3, r3
 8005166:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005168:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800516c:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8005170:	6880      	ldr	r0, [r0, #8]
}
 8005172:	4018      	ands	r0, r3
 8005174:	4770      	bx	lr

08005176 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8005176:	6940      	ldr	r0, [r0, #20]
}
 8005178:	f000 0001 	and.w	r0, r0, #1
 800517c:	4770      	bx	lr

0800517e <USB_SetCurrentMode>:
{
 800517e:	b538      	push	{r3, r4, r5, lr}
 8005180:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005182:	68c3      	ldr	r3, [r0, #12]
 8005184:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005188:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800518a:	2901      	cmp	r1, #1
 800518c:	d013      	beq.n	80051b6 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 800518e:	bb19      	cbnz	r1, 80051d8 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005190:	68c3      	ldr	r3, [r0, #12]
 8005192:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005196:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8005198:	2400      	movs	r4, #0
      HAL_Delay(10U);
 800519a:	200a      	movs	r0, #10
 800519c:	f7fb fe5e 	bl	8000e5c <HAL_Delay>
      ms += 10U;
 80051a0:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051a2:	4628      	mov	r0, r5
 80051a4:	f7ff ffe7 	bl	8005176 <USB_GetMode>
 80051a8:	b108      	cbz	r0, 80051ae <USB_SetCurrentMode+0x30>
 80051aa:	2cc7      	cmp	r4, #199	@ 0xc7
 80051ac:	d9f5      	bls.n	800519a <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80051ae:	2cc8      	cmp	r4, #200	@ 0xc8
 80051b0:	d014      	beq.n	80051dc <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 80051b2:	2000      	movs	r0, #0
}
 80051b4:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051b6:	68c3      	ldr	r3, [r0, #12]
 80051b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80051bc:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80051be:	2400      	movs	r4, #0
      HAL_Delay(10U);
 80051c0:	200a      	movs	r0, #10
 80051c2:	f7fb fe4b 	bl	8000e5c <HAL_Delay>
      ms += 10U;
 80051c6:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051c8:	4628      	mov	r0, r5
 80051ca:	f7ff ffd4 	bl	8005176 <USB_GetMode>
 80051ce:	2801      	cmp	r0, #1
 80051d0:	d0ed      	beq.n	80051ae <USB_SetCurrentMode+0x30>
 80051d2:	2cc7      	cmp	r4, #199	@ 0xc7
 80051d4:	d9f4      	bls.n	80051c0 <USB_SetCurrentMode+0x42>
 80051d6:	e7ea      	b.n	80051ae <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 80051d8:	2001      	movs	r0, #1
 80051da:	e7eb      	b.n	80051b4 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 80051dc:	2001      	movs	r0, #1
 80051de:	e7e9      	b.n	80051b4 <USB_SetCurrentMode+0x36>

080051e0 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80051e0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80051e4:	f36f 030a 	bfc	r3, #0, #11
 80051e8:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80051ec:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 80051f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051f4:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 80051f8:	2000      	movs	r0, #0
 80051fa:	4770      	bx	lr

080051fc <USB_EP0_OutStart>:
{
 80051fc:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80051fe:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005200:	4b15      	ldr	r3, [pc, #84]	@ (8005258 <USB_EP0_OutStart+0x5c>)
 8005202:	429c      	cmp	r4, r3
 8005204:	d903      	bls.n	800520e <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005206:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800520a:	2b00      	cmp	r3, #0
 800520c:	db16      	blt.n	800523c <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800520e:	2400      	movs	r4, #0
 8005210:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005214:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8005218:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800521c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005220:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8005224:	f044 0418 	orr.w	r4, r4, #24
 8005228:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800522c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8005230:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8005234:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8005238:	2901      	cmp	r1, #1
 800523a:	d003      	beq.n	8005244 <USB_EP0_OutStart+0x48>
}
 800523c:	2000      	movs	r0, #0
 800523e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005242:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005244:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005248:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800524c:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005250:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8005254:	e7f2      	b.n	800523c <USB_EP0_OutStart+0x40>
 8005256:	bf00      	nop
 8005258:	4f54300a 	.word	0x4f54300a

0800525c <MX_MBEDTLS_Init>:
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 800525c:	4770      	bx	lr

0800525e <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800525e:	b198      	cbz	r0, 8005288 <USBD_Init+0x2a>
{
 8005260:	b508      	push	{r3, lr}
 8005262:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005264:	2000      	movs	r0, #0
 8005266:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800526a:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800526e:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005272:	b109      	cbz	r1, 8005278 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8005274:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005278:	2101      	movs	r1, #1
 800527a:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 800527e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005280:	4618      	mov	r0, r3
 8005282:	f001 fc33 	bl	8006aec <USBD_LL_Init>

  return ret;
}
 8005286:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8005288:	2003      	movs	r0, #3
}
 800528a:	4770      	bx	lr

0800528c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800528c:	b510      	push	{r4, lr}
 800528e:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8005296:	b1b9      	cbz	r1, 80052c8 <USBD_RegisterClass+0x3c>
 8005298:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800529a:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800529e:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 80052a2:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80052a4:	b143      	cbz	r3, 80052b8 <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80052a6:	32ae      	adds	r2, #174	@ 0xae
 80052a8:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80052ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ae:	f10d 0006 	add.w	r0, sp, #6
 80052b2:	4798      	blx	r3
 80052b4:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80052b8:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 80052bc:	3301      	adds	r3, #1
 80052be:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 80052c2:	2000      	movs	r0, #0
}
 80052c4:	b002      	add	sp, #8
 80052c6:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80052c8:	2003      	movs	r0, #3
 80052ca:	e7fb      	b.n	80052c4 <USBD_RegisterClass+0x38>

080052cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80052cc:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80052ce:	f001 fc6a 	bl	8006ba6 <USBD_LL_Start>
}
 80052d2:	bd08      	pop	{r3, pc}

080052d4 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80052d4:	b510      	push	{r4, lr}
 80052d6:	4604      	mov	r4, r0
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80052d8:	f001 fc6d 	bl	8006bb6 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 80052dc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80052e0:	b11b      	cbz	r3, 80052ea <USBD_Stop+0x16>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	7921      	ldrb	r1, [r4, #4]
 80052e6:	4620      	mov	r0, r4
 80052e8:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
}
 80052ea:	2000      	movs	r0, #0
 80052ec:	bd10      	pop	{r4, pc}

080052ee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052ee:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80052f0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80052f4:	b113      	cbz	r3, 80052fc <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80052fa:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 80052fc:	2000      	movs	r0, #0
 80052fe:	e7fc      	b.n	80052fa <USBD_SetClassConfig+0xc>

08005300 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005300:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005302:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	4798      	blx	r3
 800530a:	b900      	cbnz	r0, 800530e <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800530c:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 800530e:	2003      	movs	r0, #3
 8005310:	e7fc      	b.n	800530c <USBD_ClrClassConfig+0xc>

08005312 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005312:	b538      	push	{r3, r4, r5, lr}
 8005314:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005316:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800531a:	4628      	mov	r0, r5
 800531c:	f000 f9a9 	bl	8005672 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005320:	2301      	movs	r3, #1
 8005322:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005326:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 800532a:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800532e:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8005332:	f001 031f 	and.w	r3, r1, #31
 8005336:	2b01      	cmp	r3, #1
 8005338:	d007      	beq.n	800534a <USBD_LL_SetupStage+0x38>
 800533a:	2b02      	cmp	r3, #2
 800533c:	d00a      	beq.n	8005354 <USBD_LL_SetupStage+0x42>
 800533e:	b973      	cbnz	r3, 800535e <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005340:	4629      	mov	r1, r5
 8005342:	4620      	mov	r0, r4
 8005344:	f000 fb98 	bl	8005a78 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8005348:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800534a:	4629      	mov	r1, r5
 800534c:	4620      	mov	r0, r4
 800534e:	f000 fbce 	bl	8005aee <USBD_StdItfReq>
      break;
 8005352:	e7f9      	b.n	8005348 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005354:	4629      	mov	r1, r5
 8005356:	4620      	mov	r0, r4
 8005358:	f000 fc0b 	bl	8005b72 <USBD_StdEPReq>
      break;
 800535c:	e7f4      	b.n	8005348 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800535e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8005362:	4620      	mov	r0, r4
 8005364:	f001 fc3a 	bl	8006bdc <USBD_LL_StallEP>
      break;
 8005368:	e7ee      	b.n	8005348 <USBD_LL_SetupStage+0x36>

0800536a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800536a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536c:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800536e:	2301      	movs	r3, #1
 8005370:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005374:	2300      	movs	r3, #0
 8005376:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 800537a:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800537c:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005380:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005384:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005388:	b1db      	cbz	r3, 80053c2 <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	b1db      	cbz	r3, 80053c6 <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800538e:	2100      	movs	r1, #0
 8005390:	4798      	blx	r3
 8005392:	4607      	mov	r7, r0
 8005394:	b9c8      	cbnz	r0, 80053ca <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005396:	2340      	movs	r3, #64	@ 0x40
 8005398:	2200      	movs	r2, #0
 800539a:	4611      	mov	r1, r2
 800539c:	4620      	mov	r0, r4
 800539e:	f001 fc12 	bl	8006bc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80053a2:	2601      	movs	r6, #1
 80053a4:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80053a8:	2540      	movs	r5, #64	@ 0x40
 80053aa:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053ae:	462b      	mov	r3, r5
 80053b0:	2200      	movs	r2, #0
 80053b2:	2180      	movs	r1, #128	@ 0x80
 80053b4:	4620      	mov	r0, r4
 80053b6:	f001 fc06 	bl	8006bc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80053ba:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80053bc:	6225      	str	r5, [r4, #32]

  return ret;
}
 80053be:	4638      	mov	r0, r7
 80053c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 80053c2:	2700      	movs	r7, #0
 80053c4:	e7e7      	b.n	8005396 <USBD_LL_Reset+0x2c>
 80053c6:	2700      	movs	r7, #0
 80053c8:	e7e5      	b.n	8005396 <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 80053ca:	2703      	movs	r7, #3
 80053cc:	e7e3      	b.n	8005396 <USBD_LL_Reset+0x2c>

080053ce <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80053ce:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80053d0:	2000      	movs	r0, #0
 80053d2:	4770      	bx	lr

080053d4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80053d4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d004      	beq.n	80053e8 <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 80053de:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80053e8:	2304      	movs	r3, #4
 80053ea:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 80053ee:	2000      	movs	r0, #0
 80053f0:	4770      	bx	lr

080053f2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80053f2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d001      	beq.n	8005400 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 80053fc:	2000      	movs	r0, #0
 80053fe:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8005400:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8005404:	b2db      	uxtb	r3, r3
 8005406:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 800540a:	e7f7      	b.n	80053fc <USBD_LL_Resume+0xa>

0800540c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800540c:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800540e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b03      	cmp	r3, #3
 8005416:	d001      	beq.n	800541c <USBD_LL_SOF+0x10>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8005418:	2000      	movs	r0, #0
 800541a:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 800541c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0f9      	beq.n	8005418 <USBD_LL_SOF+0xc>
      if (pdev->pClass[0]->SOF != NULL)
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f6      	beq.n	8005418 <USBD_LL_SOF+0xc>
        (void)pdev->pClass[0]->SOF(pdev);
 800542a:	4798      	blx	r3
 800542c:	e7f4      	b.n	8005418 <USBD_LL_SOF+0xc>

0800542e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800542e:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8005430:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005434:	33ae      	adds	r3, #174	@ 0xae
 8005436:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800543a:	b15a      	cbz	r2, 8005454 <USBD_LL_IsoINIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800543c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b03      	cmp	r3, #3
 8005444:	d001      	beq.n	800544a <USBD_LL_IsoINIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8005446:	2000      	movs	r0, #0
}
 8005448:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800544a:	6a13      	ldr	r3, [r2, #32]
 800544c:	b123      	cbz	r3, 8005458 <USBD_LL_IsoINIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800544e:	4798      	blx	r3
  return USBD_OK;
 8005450:	2000      	movs	r0, #0
 8005452:	e7f9      	b.n	8005448 <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 8005454:	2003      	movs	r0, #3
 8005456:	e7f7      	b.n	8005448 <USBD_LL_IsoINIncomplete+0x1a>
  return USBD_OK;
 8005458:	2000      	movs	r0, #0
 800545a:	e7f5      	b.n	8005448 <USBD_LL_IsoINIncomplete+0x1a>

0800545c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800545c:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800545e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005462:	33ae      	adds	r3, #174	@ 0xae
 8005464:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8005468:	b15a      	cbz	r2, 8005482 <USBD_LL_IsoOUTIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800546a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b03      	cmp	r3, #3
 8005472:	d001      	beq.n	8005478 <USBD_LL_IsoOUTIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8005474:	2000      	movs	r0, #0
}
 8005476:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005478:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800547a:	b123      	cbz	r3, 8005486 <USBD_LL_IsoOUTIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800547c:	4798      	blx	r3
  return USBD_OK;
 800547e:	2000      	movs	r0, #0
 8005480:	e7f9      	b.n	8005476 <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 8005482:	2003      	movs	r0, #3
 8005484:	e7f7      	b.n	8005476 <USBD_LL_IsoOUTIncomplete+0x1a>
  return USBD_OK;
 8005486:	2000      	movs	r0, #0
 8005488:	e7f5      	b.n	8005476 <USBD_LL_IsoOUTIncomplete+0x1a>

0800548a <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800548a:	2000      	movs	r0, #0
 800548c:	4770      	bx	lr

0800548e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800548e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005490:	2301      	movs	r3, #1
 8005492:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005496:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800549a:	b123      	cbz	r3, 80054a6 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	7901      	ldrb	r1, [r0, #4]
 80054a0:	4798      	blx	r3
 80054a2:	b910      	cbnz	r0, 80054aa <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80054a4:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 80054a6:	2000      	movs	r0, #0
 80054a8:	e7fc      	b.n	80054a4 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 80054aa:	2003      	movs	r0, #3
 80054ac:	e7fa      	b.n	80054a4 <USBD_LL_DevDisconnected+0x16>

080054ae <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80054ae:	2000      	movs	r0, #0
 80054b0:	4770      	bx	lr

080054b2 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80054b2:	2000      	movs	r0, #0
 80054b4:	4770      	bx	lr

080054b6 <USBD_LL_DataOutStage>:
{
 80054b6:	b538      	push	{r3, r4, r5, lr}
 80054b8:	4604      	mov	r4, r0
  if (epnum == 0U)
 80054ba:	460d      	mov	r5, r1
 80054bc:	2900      	cmp	r1, #0
 80054be:	d142      	bne.n	8005546 <USBD_LL_DataOutStage+0x90>
 80054c0:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80054c2:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80054c6:	2a03      	cmp	r2, #3
 80054c8:	d001      	beq.n	80054ce <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 80054ca:	4608      	mov	r0, r1
}
 80054cc:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80054ce:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 80054d2:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 80054d6:	4291      	cmp	r1, r2
 80054d8:	d809      	bhi.n	80054ee <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 80054da:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d00e      	beq.n	8005504 <USBD_LL_DataOutStage+0x4e>
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d01b      	beq.n	8005522 <USBD_LL_DataOutStage+0x6c>
 80054ea:	4628      	mov	r0, r5
 80054ec:	e00f      	b.n	800550e <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 80054ee:	1a89      	subs	r1, r1, r2
 80054f0:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80054f4:	428a      	cmp	r2, r1
 80054f6:	bf28      	it	cs
 80054f8:	460a      	movcs	r2, r1
 80054fa:	4619      	mov	r1, r3
 80054fc:	f001 f8cb 	bl	8006696 <USBD_CtlContinueRx>
  return USBD_OK;
 8005500:	4628      	mov	r0, r5
 8005502:	e7e3      	b.n	80054cc <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005504:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8005508:	f7ff ffd1 	bl	80054ae <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800550c:	b920      	cbnz	r0, 8005518 <USBD_LL_DataOutStage+0x62>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800550e:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b03      	cmp	r3, #3
 8005516:	d009      	beq.n	800552c <USBD_LL_DataOutStage+0x76>
        (void)USBD_CtlSendStatus(pdev);
 8005518:	4620      	mov	r0, r4
 800551a:	f001 f8c4 	bl	80066a6 <USBD_CtlSendStatus>
  return USBD_OK;
 800551e:	4628      	mov	r0, r5
 8005520:	e7d4      	b.n	80054cc <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005522:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8005526:	f7ff ffc4 	bl	80054b2 <USBD_CoreFindEP>
            break;
 800552a:	e7ef      	b.n	800550c <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800552c:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8005530:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	2a00      	cmp	r2, #0
 8005538:	d0ee      	beq.n	8005518 <USBD_LL_DataOutStage+0x62>
              pdev->classId = idx;
 800553a:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	4620      	mov	r0, r4
 8005542:	4798      	blx	r3
 8005544:	e7e8      	b.n	8005518 <USBD_LL_DataOutStage+0x62>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005546:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800554a:	f7ff ffb2 	bl	80054b2 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800554e:	b990      	cbnz	r0, 8005576 <USBD_LL_DataOutStage+0xc0>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005550:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b03      	cmp	r3, #3
 8005558:	d1b8      	bne.n	80054cc <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 800555a:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800555e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005562:	699a      	ldr	r2, [r3, #24]
 8005564:	2a00      	cmp	r2, #0
 8005566:	d0b1      	beq.n	80054cc <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 8005568:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	4629      	mov	r1, r5
 8005570:	4620      	mov	r0, r4
 8005572:	4798      	blx	r3
      if (ret != USBD_OK)
 8005574:	e7aa      	b.n	80054cc <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8005576:	2000      	movs	r0, #0
 8005578:	e7a8      	b.n	80054cc <USBD_LL_DataOutStage+0x16>

0800557a <USBD_LL_DataInStage>:
{
 800557a:	b538      	push	{r3, r4, r5, lr}
 800557c:	4604      	mov	r4, r0
  if (epnum == 0U)
 800557e:	460d      	mov	r5, r1
 8005580:	2900      	cmp	r1, #0
 8005582:	d14b      	bne.n	800561c <USBD_LL_DataInStage+0xa2>
 8005584:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005586:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800558a:	2a02      	cmp	r2, #2
 800558c:	d007      	beq.n	800559e <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 800558e:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 8005592:	b118      	cbz	r0, 800559c <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 800559a:	4628      	mov	r0, r5
}
 800559c:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800559e:	69c2      	ldr	r2, [r0, #28]
 80055a0:	6a01      	ldr	r1, [r0, #32]
 80055a2:	428a      	cmp	r2, r1
 80055a4:	d80e      	bhi.n	80055c4 <USBD_LL_DataInStage+0x4a>
        if ((pep->maxpacket == pep->rem_length) &&
 80055a6:	428a      	cmp	r2, r1
 80055a8:	d018      	beq.n	80055dc <USBD_LL_DataInStage+0x62>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055aa:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b03      	cmp	r3, #3
 80055b2:	d027      	beq.n	8005604 <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80055b4:	2180      	movs	r1, #128	@ 0x80
 80055b6:	4620      	mov	r0, r4
 80055b8:	f001 fb10 	bl	8006bdc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80055bc:	4620      	mov	r0, r4
 80055be:	f001 f87d 	bl	80066bc <USBD_CtlReceiveStatus>
 80055c2:	e7e4      	b.n	800558e <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 80055c4:	1a52      	subs	r2, r2, r1
 80055c6:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80055c8:	4619      	mov	r1, r3
 80055ca:	f001 f84d 	bl	8006668 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055ce:	2300      	movs	r3, #0
 80055d0:	461a      	mov	r2, r3
 80055d2:	4619      	mov	r1, r3
 80055d4:	4620      	mov	r0, r4
 80055d6:	f001 fb21 	bl	8006c1c <USBD_LL_PrepareReceive>
 80055da:	e7d8      	b.n	800558e <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 80055dc:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80055de:	4299      	cmp	r1, r3
 80055e0:	d8e3      	bhi.n	80055aa <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 80055e2:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d2df      	bcs.n	80055aa <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80055ea:	2200      	movs	r2, #0
 80055ec:	4611      	mov	r1, r2
 80055ee:	f001 f83b 	bl	8006668 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80055f2:	2100      	movs	r1, #0
 80055f4:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055f8:	460b      	mov	r3, r1
 80055fa:	460a      	mov	r2, r1
 80055fc:	4620      	mov	r0, r4
 80055fe:	f001 fb0d 	bl	8006c1c <USBD_LL_PrepareReceive>
 8005602:	e7c4      	b.n	800558e <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005604:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	2a00      	cmp	r2, #0
 800560c:	d0d2      	beq.n	80055b4 <USBD_LL_DataInStage+0x3a>
              pdev->classId = 0U;
 800560e:	2200      	movs	r2, #0
 8005610:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	4620      	mov	r0, r4
 8005618:	4798      	blx	r3
 800561a:	e7cb      	b.n	80055b4 <USBD_LL_DataInStage+0x3a>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800561c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8005620:	f7ff ff47 	bl	80054b2 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005624:	b990      	cbnz	r0, 800564c <USBD_LL_DataInStage+0xd2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005626:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b03      	cmp	r3, #3
 800562e:	d1b5      	bne.n	800559c <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 8005630:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8005634:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005638:	695a      	ldr	r2, [r3, #20]
 800563a:	2a00      	cmp	r2, #0
 800563c:	d0ae      	beq.n	800559c <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 800563e:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	4629      	mov	r1, r5
 8005646:	4620      	mov	r0, r4
 8005648:	4798      	blx	r3
          if (ret != USBD_OK)
 800564a:	e7a7      	b.n	800559c <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 800564c:	2000      	movs	r0, #0
 800564e:	e7a5      	b.n	800559c <USBD_LL_DataInStage+0x22>

08005650 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8005650:	880b      	ldrh	r3, [r1, #0]
 8005652:	7802      	ldrb	r2, [r0, #0]
 8005654:	4413      	add	r3, r2
 8005656:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005658:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 800565a:	4418      	add	r0, r3
 800565c:	4770      	bx	lr

0800565e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800565e:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8005660:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8005662:	e002      	b.n	800566a <USBD_GetLen+0xc>
  {
    len++;
 8005664:	3001      	adds	r0, #1
 8005666:	b2c0      	uxtb	r0, r0
    pbuff++;
 8005668:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800566a:	781a      	ldrb	r2, [r3, #0]
 800566c:	2a00      	cmp	r2, #0
 800566e:	d1f9      	bne.n	8005664 <USBD_GetLen+0x6>
  }

  return len;
}
 8005670:	4770      	bx	lr

08005672 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8005672:	780b      	ldrb	r3, [r1, #0]
 8005674:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8005676:	784b      	ldrb	r3, [r1, #1]
 8005678:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800567a:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800567c:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800567e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8005682:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8005684:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8005686:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005688:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800568c:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800568e:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8005690:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005692:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8005696:	80c3      	strh	r3, [r0, #6]
}
 8005698:	4770      	bx	lr

0800569a <USBD_CtlError>:
{
 800569a:	b510      	push	{r4, lr}
 800569c:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800569e:	2180      	movs	r1, #128	@ 0x80
 80056a0:	f001 fa9c 	bl	8006bdc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80056a4:	2100      	movs	r1, #0
 80056a6:	4620      	mov	r0, r4
 80056a8:	f001 fa98 	bl	8006bdc <USBD_LL_StallEP>
}
 80056ac:	bd10      	pop	{r4, pc}

080056ae <USBD_GetDescriptor>:
{
 80056ae:	b570      	push	{r4, r5, r6, lr}
 80056b0:	b082      	sub	sp, #8
 80056b2:	4604      	mov	r4, r0
 80056b4:	460d      	mov	r5, r1
  uint16_t len = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80056bc:	884a      	ldrh	r2, [r1, #2]
 80056be:	0a13      	lsrs	r3, r2, #8
 80056c0:	3b01      	subs	r3, #1
 80056c2:	2b0e      	cmp	r3, #14
 80056c4:	f200 80d9 	bhi.w	800587a <USBD_GetDescriptor+0x1cc>
 80056c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80056cc:	0037001c 	.word	0x0037001c
 80056d0:	00d7004b 	.word	0x00d7004b
 80056d4:	00bb00d7 	.word	0x00bb00d7
 80056d8:	00d700c8 	.word	0x00d700c8
 80056dc:	00d700d7 	.word	0x00d700d7
 80056e0:	00d700d7 	.word	0x00d700d7
 80056e4:	00d700d7 	.word	0x00d700d7
 80056e8:	000f      	.short	0x000f
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80056ea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	b123      	cbz	r3, 80056fc <USBD_GetDescriptor+0x4e>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80056f2:	f10d 0106 	add.w	r1, sp, #6
 80056f6:	7c00      	ldrb	r0, [r0, #16]
 80056f8:	4798      	blx	r3
  if (err != 0U)
 80056fa:	e00a      	b.n	8005712 <USBD_GetDescriptor+0x64>
        USBD_CtlError(pdev, req);
 80056fc:	4629      	mov	r1, r5
 80056fe:	f7ff ffcc 	bl	800569a <USBD_CtlError>
  if (err != 0U)
 8005702:	e018      	b.n	8005736 <USBD_GetDescriptor+0x88>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005704:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f10d 0106 	add.w	r1, sp, #6
 800570e:	7c00      	ldrb	r0, [r0, #16]
 8005710:	4798      	blx	r3
  if (req->wLength != 0U)
 8005712:	88ea      	ldrh	r2, [r5, #6]
 8005714:	2a00      	cmp	r2, #0
 8005716:	f000 80b9 	beq.w	800588c <USBD_GetDescriptor+0x1de>
    if (len != 0U)
 800571a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 80af 	beq.w	8005882 <USBD_GetDescriptor+0x1d4>
      len = MIN(len, req->wLength);
 8005724:	429a      	cmp	r2, r3
 8005726:	bf28      	it	cs
 8005728:	461a      	movcs	r2, r3
 800572a:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800572e:	4601      	mov	r1, r0
 8005730:	4620      	mov	r0, r4
 8005732:	f000 ff8c 	bl	800664e <USBD_CtlSendData>
}
 8005736:	b002      	add	sp, #8
 8005738:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800573a:	7c03      	ldrb	r3, [r0, #16]
 800573c:	b943      	cbnz	r3, 8005750 <USBD_GetDescriptor+0xa2>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800573e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005744:	f10d 0006 	add.w	r0, sp, #6
 8005748:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800574a:	2302      	movs	r3, #2
 800574c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800574e:	e7e0      	b.n	8005712 <USBD_GetDescriptor+0x64>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005750:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005756:	f10d 0006 	add.w	r0, sp, #6
 800575a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800575c:	2302      	movs	r3, #2
 800575e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005760:	e7d7      	b.n	8005712 <USBD_GetDescriptor+0x64>
      switch ((uint8_t)(req->wValue))
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	2a05      	cmp	r2, #5
 8005766:	d869      	bhi.n	800583c <USBD_GetDescriptor+0x18e>
 8005768:	e8df f002 	tbb	[pc, r2]
 800576c:	2a1d1003 	.word	0x2a1d1003
 8005770:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005772:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	b123      	cbz	r3, 8005784 <USBD_GetDescriptor+0xd6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800577a:	f10d 0106 	add.w	r1, sp, #6
 800577e:	7c00      	ldrb	r0, [r0, #16]
 8005780:	4798      	blx	r3
  if (err != 0U)
 8005782:	e7c6      	b.n	8005712 <USBD_GetDescriptor+0x64>
            USBD_CtlError(pdev, req);
 8005784:	4629      	mov	r1, r5
 8005786:	f7ff ff88 	bl	800569a <USBD_CtlError>
  if (err != 0U)
 800578a:	e7d4      	b.n	8005736 <USBD_GetDescriptor+0x88>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800578c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	b123      	cbz	r3, 800579e <USBD_GetDescriptor+0xf0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005794:	f10d 0106 	add.w	r1, sp, #6
 8005798:	7c00      	ldrb	r0, [r0, #16]
 800579a:	4798      	blx	r3
  if (err != 0U)
 800579c:	e7b9      	b.n	8005712 <USBD_GetDescriptor+0x64>
            USBD_CtlError(pdev, req);
 800579e:	4629      	mov	r1, r5
 80057a0:	f7ff ff7b 	bl	800569a <USBD_CtlError>
  if (err != 0U)
 80057a4:	e7c7      	b.n	8005736 <USBD_GetDescriptor+0x88>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80057a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	b123      	cbz	r3, 80057b8 <USBD_GetDescriptor+0x10a>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80057ae:	f10d 0106 	add.w	r1, sp, #6
 80057b2:	7c00      	ldrb	r0, [r0, #16]
 80057b4:	4798      	blx	r3
  if (err != 0U)
 80057b6:	e7ac      	b.n	8005712 <USBD_GetDescriptor+0x64>
            USBD_CtlError(pdev, req);
 80057b8:	4629      	mov	r1, r5
 80057ba:	f7ff ff6e 	bl	800569a <USBD_CtlError>
  if (err != 0U)
 80057be:	e7ba      	b.n	8005736 <USBD_GetDescriptor+0x88>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80057c0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	b123      	cbz	r3, 80057d2 <USBD_GetDescriptor+0x124>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80057c8:	f10d 0106 	add.w	r1, sp, #6
 80057cc:	7c00      	ldrb	r0, [r0, #16]
 80057ce:	4798      	blx	r3
  if (err != 0U)
 80057d0:	e79f      	b.n	8005712 <USBD_GetDescriptor+0x64>
            USBD_CtlError(pdev, req);
 80057d2:	4629      	mov	r1, r5
 80057d4:	f7ff ff61 	bl	800569a <USBD_CtlError>
  if (err != 0U)
 80057d8:	e7ad      	b.n	8005736 <USBD_GetDescriptor+0x88>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80057da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	b123      	cbz	r3, 80057ec <USBD_GetDescriptor+0x13e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80057e2:	f10d 0106 	add.w	r1, sp, #6
 80057e6:	7c00      	ldrb	r0, [r0, #16]
 80057e8:	4798      	blx	r3
  if (err != 0U)
 80057ea:	e792      	b.n	8005712 <USBD_GetDescriptor+0x64>
            USBD_CtlError(pdev, req);
 80057ec:	4629      	mov	r1, r5
 80057ee:	f7ff ff54 	bl	800569a <USBD_CtlError>
  if (err != 0U)
 80057f2:	e7a0      	b.n	8005736 <USBD_GetDescriptor+0x88>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80057f4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	b123      	cbz	r3, 8005806 <USBD_GetDescriptor+0x158>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80057fc:	f10d 0106 	add.w	r1, sp, #6
 8005800:	7c00      	ldrb	r0, [r0, #16]
 8005802:	4798      	blx	r3
  if (err != 0U)
 8005804:	e785      	b.n	8005712 <USBD_GetDescriptor+0x64>
            USBD_CtlError(pdev, req);
 8005806:	4629      	mov	r1, r5
 8005808:	f7ff ff47 	bl	800569a <USBD_CtlError>
  if (err != 0U)
 800580c:	e793      	b.n	8005736 <USBD_GetDescriptor+0x88>
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 800580e:	f106 03ae 	add.w	r3, r6, #174	@ 0xae
 8005812:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005816:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005818:	b152      	cbz	r2, 8005830 <USBD_GetDescriptor+0x182>
              pdev->classId = idx;
 800581a:	f8c4 62d4 	str.w	r6, [r4, #724]	@ 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 800581e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005820:	f10d 0206 	add.w	r2, sp, #6
 8005824:	78a9      	ldrb	r1, [r5, #2]
 8005826:	4620      	mov	r0, r4
 8005828:	4798      	blx	r3
              if (pbuf == NULL) /* This means that no class recognized the string index */
 800582a:	2800      	cmp	r0, #0
 800582c:	f47f af71 	bne.w	8005712 <USBD_GetDescriptor+0x64>
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8005830:	3601      	adds	r6, #1
 8005832:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8005836:	42b3      	cmp	r3, r6
 8005838:	d8e9      	bhi.n	800580e <USBD_GetDescriptor+0x160>
 800583a:	e76a      	b.n	8005712 <USBD_GetDescriptor+0x64>
      switch ((uint8_t)(req->wValue))
 800583c:	2600      	movs	r6, #0
 800583e:	4630      	mov	r0, r6
 8005840:	e7f7      	b.n	8005832 <USBD_GetDescriptor+0x184>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005842:	7c03      	ldrb	r3, [r0, #16]
 8005844:	b933      	cbnz	r3, 8005854 <USBD_GetDescriptor+0x1a6>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005846:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800584a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800584c:	f10d 0006 	add.w	r0, sp, #6
 8005850:	4798      	blx	r3
  if (err != 0U)
 8005852:	e75e      	b.n	8005712 <USBD_GetDescriptor+0x64>
        USBD_CtlError(pdev, req);
 8005854:	4629      	mov	r1, r5
 8005856:	f7ff ff20 	bl	800569a <USBD_CtlError>
  if (err != 0U)
 800585a:	e76c      	b.n	8005736 <USBD_GetDescriptor+0x88>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800585c:	7c03      	ldrb	r3, [r0, #16]
 800585e:	b943      	cbnz	r3, 8005872 <USBD_GetDescriptor+0x1c4>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005860:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005866:	f10d 0006 	add.w	r0, sp, #6
 800586a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800586c:	2307      	movs	r3, #7
 800586e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005870:	e74f      	b.n	8005712 <USBD_GetDescriptor+0x64>
        USBD_CtlError(pdev, req);
 8005872:	4629      	mov	r1, r5
 8005874:	f7ff ff11 	bl	800569a <USBD_CtlError>
  if (err != 0U)
 8005878:	e75d      	b.n	8005736 <USBD_GetDescriptor+0x88>
      USBD_CtlError(pdev, req);
 800587a:	4629      	mov	r1, r5
 800587c:	f7ff ff0d 	bl	800569a <USBD_CtlError>
    return;
 8005880:	e759      	b.n	8005736 <USBD_GetDescriptor+0x88>
      USBD_CtlError(pdev, req);
 8005882:	4629      	mov	r1, r5
 8005884:	4620      	mov	r0, r4
 8005886:	f7ff ff08 	bl	800569a <USBD_CtlError>
 800588a:	e754      	b.n	8005736 <USBD_GetDescriptor+0x88>
    (void)USBD_CtlSendStatus(pdev);
 800588c:	4620      	mov	r0, r4
 800588e:	f000 ff0a 	bl	80066a6 <USBD_CtlSendStatus>
 8005892:	e750      	b.n	8005736 <USBD_GetDescriptor+0x88>

08005894 <USBD_SetAddress>:
{
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005898:	888b      	ldrh	r3, [r1, #4]
 800589a:	b9fb      	cbnz	r3, 80058dc <USBD_SetAddress+0x48>
 800589c:	88cb      	ldrh	r3, [r1, #6]
 800589e:	b9eb      	cbnz	r3, 80058dc <USBD_SetAddress+0x48>
 80058a0:	884b      	ldrh	r3, [r1, #2]
 80058a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80058a4:	d81a      	bhi.n	80058dc <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80058a6:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058aa:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d00c      	beq.n	80058ce <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 80058b4:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80058b8:	4629      	mov	r1, r5
 80058ba:	f001 f99f 	bl	8006bfc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80058be:	4620      	mov	r0, r4
 80058c0:	f000 fef1 	bl	80066a6 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80058c4:	b135      	cbz	r5, 80058d4 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058c6:	2302      	movs	r3, #2
 80058c8:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80058cc:	e009      	b.n	80058e2 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 80058ce:	f7ff fee4 	bl	800569a <USBD_CtlError>
 80058d2:	e006      	b.n	80058e2 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80058da:	e002      	b.n	80058e2 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 80058dc:	4620      	mov	r0, r4
 80058de:	f7ff fedc 	bl	800569a <USBD_CtlError>
}
 80058e2:	bd38      	pop	{r3, r4, r5, pc}

080058e4 <USBD_SetConfig>:
{
 80058e4:	b570      	push	{r4, r5, r6, lr}
 80058e6:	4604      	mov	r4, r0
 80058e8:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 80058ea:	788d      	ldrb	r5, [r1, #2]
 80058ec:	4b2f      	ldr	r3, [pc, #188]	@ (80059ac <USBD_SetConfig+0xc8>)
 80058ee:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80058f0:	2d01      	cmp	r5, #1
 80058f2:	d810      	bhi.n	8005916 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 80058f4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d00f      	beq.n	800591e <USBD_SetConfig+0x3a>
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d026      	beq.n	8005950 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 8005902:	f7ff feca 	bl	800569a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005906:	4b29      	ldr	r3, [pc, #164]	@ (80059ac <USBD_SetConfig+0xc8>)
 8005908:	7819      	ldrb	r1, [r3, #0]
 800590a:	4620      	mov	r0, r4
 800590c:	f7ff fcf8 	bl	8005300 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005910:	2503      	movs	r5, #3
}
 8005912:	4628      	mov	r0, r5
 8005914:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8005916:	f7ff fec0 	bl	800569a <USBD_CtlError>
    return USBD_FAIL;
 800591a:	2503      	movs	r5, #3
 800591c:	e7f9      	b.n	8005912 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800591e:	b1a5      	cbz	r5, 800594a <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 8005920:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005922:	4629      	mov	r1, r5
 8005924:	f7ff fce3 	bl	80052ee <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8005928:	4605      	mov	r5, r0
 800592a:	b138      	cbz	r0, 800593c <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 800592c:	4631      	mov	r1, r6
 800592e:	4620      	mov	r0, r4
 8005930:	f7ff feb3 	bl	800569a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005934:	2302      	movs	r3, #2
 8005936:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800593a:	e7ea      	b.n	8005912 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800593c:	4620      	mov	r0, r4
 800593e:	f000 feb2 	bl	80066a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005942:	2303      	movs	r3, #3
 8005944:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8005948:	e7e3      	b.n	8005912 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800594a:	f000 feac 	bl	80066a6 <USBD_CtlSendStatus>
 800594e:	e7e0      	b.n	8005912 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8005950:	b1cd      	cbz	r5, 8005986 <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 8005952:	6841      	ldr	r1, [r0, #4]
 8005954:	428d      	cmp	r5, r1
 8005956:	d025      	beq.n	80059a4 <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005958:	b2c9      	uxtb	r1, r1
 800595a:	f7ff fcd1 	bl	8005300 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800595e:	4b13      	ldr	r3, [pc, #76]	@ (80059ac <USBD_SetConfig+0xc8>)
 8005960:	7819      	ldrb	r1, [r3, #0]
 8005962:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005964:	4620      	mov	r0, r4
 8005966:	f7ff fcc2 	bl	80052ee <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800596a:	4605      	mov	r5, r0
 800596c:	b1b0      	cbz	r0, 800599c <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 800596e:	4631      	mov	r1, r6
 8005970:	4620      	mov	r0, r4
 8005972:	f7ff fe92 	bl	800569a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005976:	7921      	ldrb	r1, [r4, #4]
 8005978:	4620      	mov	r0, r4
 800597a:	f7ff fcc1 	bl	8005300 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800597e:	2302      	movs	r3, #2
 8005980:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8005984:	e7c5      	b.n	8005912 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005986:	2302      	movs	r3, #2
 8005988:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800598c:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800598e:	4629      	mov	r1, r5
 8005990:	f7ff fcb6 	bl	8005300 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005994:	4620      	mov	r0, r4
 8005996:	f000 fe86 	bl	80066a6 <USBD_CtlSendStatus>
 800599a:	e7ba      	b.n	8005912 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800599c:	4620      	mov	r0, r4
 800599e:	f000 fe82 	bl	80066a6 <USBD_CtlSendStatus>
 80059a2:	e7b6      	b.n	8005912 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80059a4:	f000 fe7f 	bl	80066a6 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80059a8:	2500      	movs	r5, #0
 80059aa:	e7b2      	b.n	8005912 <USBD_SetConfig+0x2e>
 80059ac:	2400022c 	.word	0x2400022c

080059b0 <USBD_GetConfig>:
{
 80059b0:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80059b2:	88cb      	ldrh	r3, [r1, #6]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d10b      	bne.n	80059d0 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80059b8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d909      	bls.n	80059d6 <USBD_GetConfig+0x26>
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d111      	bne.n	80059ea <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80059c6:	2201      	movs	r2, #1
 80059c8:	1d01      	adds	r1, r0, #4
 80059ca:	f000 fe40 	bl	800664e <USBD_CtlSendData>
        break;
 80059ce:	e001      	b.n	80059d4 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 80059d0:	f7ff fe63 	bl	800569a <USBD_CtlError>
}
 80059d4:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80059d6:	b25b      	sxtb	r3, r3
 80059d8:	b13b      	cbz	r3, 80059ea <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 80059da:	4601      	mov	r1, r0
 80059dc:	2300      	movs	r3, #0
 80059de:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80059e2:	2201      	movs	r2, #1
 80059e4:	f000 fe33 	bl	800664e <USBD_CtlSendData>
        break;
 80059e8:	e7f4      	b.n	80059d4 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 80059ea:	f7ff fe56 	bl	800569a <USBD_CtlError>
}
 80059ee:	e7f1      	b.n	80059d4 <USBD_GetConfig+0x24>

080059f0 <USBD_GetStatus>:
{
 80059f0:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80059f2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80059f6:	3b01      	subs	r3, #1
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d812      	bhi.n	8005a22 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80059fc:	88cb      	ldrh	r3, [r1, #6]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d10c      	bne.n	8005a1c <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005a02:	2301      	movs	r3, #1
 8005a04:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8005a06:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8005a0a:	b10b      	cbz	r3, 8005a10 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005a10:	2202      	movs	r2, #2
 8005a12:	f100 010c 	add.w	r1, r0, #12
 8005a16:	f000 fe1a 	bl	800664e <USBD_CtlSendData>
}
 8005a1a:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8005a1c:	f7ff fe3d 	bl	800569a <USBD_CtlError>
        break;
 8005a20:	e7fb      	b.n	8005a1a <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8005a22:	f7ff fe3a 	bl	800569a <USBD_CtlError>
}
 8005a26:	e7f8      	b.n	8005a1a <USBD_GetStatus+0x2a>

08005a28 <USBD_SetFeature>:
{
 8005a28:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a2a:	884b      	ldrh	r3, [r1, #2]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d004      	beq.n	8005a3a <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d007      	beq.n	8005a44 <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 8005a34:	f7ff fe31 	bl	800569a <USBD_CtlError>
}
 8005a38:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8005a3a:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005a3e:	f000 fe32 	bl	80066a6 <USBD_CtlSendStatus>
 8005a42:	e7f9      	b.n	8005a38 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005a44:	888b      	ldrh	r3, [r1, #4]
 8005a46:	0a1b      	lsrs	r3, r3, #8
 8005a48:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005a4c:	f000 fe2b 	bl	80066a6 <USBD_CtlSendStatus>
 8005a50:	e7f2      	b.n	8005a38 <USBD_SetFeature+0x10>

08005a52 <USBD_ClrFeature>:
{
 8005a52:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8005a54:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d809      	bhi.n	8005a72 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a5e:	884b      	ldrh	r3, [r1, #2]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d000      	beq.n	8005a66 <USBD_ClrFeature+0x14>
}
 8005a64:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005a6c:	f000 fe1b 	bl	80066a6 <USBD_CtlSendStatus>
 8005a70:	e7f8      	b.n	8005a64 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8005a72:	f7ff fe12 	bl	800569a <USBD_CtlError>
}
 8005a76:	e7f5      	b.n	8005a64 <USBD_ClrFeature+0x12>

08005a78 <USBD_StdDevReq>:
{
 8005a78:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a7a:	780c      	ldrb	r4, [r1, #0]
 8005a7c:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8005a80:	2c20      	cmp	r4, #32
 8005a82:	d006      	beq.n	8005a92 <USBD_StdDevReq+0x1a>
 8005a84:	2c40      	cmp	r4, #64	@ 0x40
 8005a86:	d004      	beq.n	8005a92 <USBD_StdDevReq+0x1a>
 8005a88:	b16c      	cbz	r4, 8005aa6 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8005a8a:	f7ff fe06 	bl	800569a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005a8e:	2400      	movs	r4, #0
      break;
 8005a90:	e007      	b.n	8005aa2 <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005a92:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005a96:	33ae      	adds	r3, #174	@ 0xae
 8005a98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	4798      	blx	r3
 8005aa0:	4604      	mov	r4, r0
}
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8005aa6:	784d      	ldrb	r5, [r1, #1]
 8005aa8:	2d09      	cmp	r5, #9
 8005aaa:	d81d      	bhi.n	8005ae8 <USBD_StdDevReq+0x70>
 8005aac:	e8df f005 	tbb	[pc, r5]
 8005ab0:	161c1912 	.word	0x161c1912
 8005ab4:	1c05081c 	.word	0x1c05081c
 8005ab8:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8005aba:	f7ff fdf8 	bl	80056ae <USBD_GetDescriptor>
          break;
 8005abe:	e7f0      	b.n	8005aa2 <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 8005ac0:	f7ff fee8 	bl	8005894 <USBD_SetAddress>
          break;
 8005ac4:	e7ed      	b.n	8005aa2 <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 8005ac6:	f7ff ff0d 	bl	80058e4 <USBD_SetConfig>
 8005aca:	4604      	mov	r4, r0
          break;
 8005acc:	e7e9      	b.n	8005aa2 <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 8005ace:	f7ff ff6f 	bl	80059b0 <USBD_GetConfig>
          break;
 8005ad2:	e7e6      	b.n	8005aa2 <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 8005ad4:	f7ff ff8c 	bl	80059f0 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8005ad8:	462c      	mov	r4, r5
          break;
 8005ada:	e7e2      	b.n	8005aa2 <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 8005adc:	f7ff ffa4 	bl	8005a28 <USBD_SetFeature>
          break;
 8005ae0:	e7df      	b.n	8005aa2 <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 8005ae2:	f7ff ffb6 	bl	8005a52 <USBD_ClrFeature>
          break;
 8005ae6:	e7dc      	b.n	8005aa2 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8005ae8:	f7ff fdd7 	bl	800569a <USBD_CtlError>
          break;
 8005aec:	e7d9      	b.n	8005aa2 <USBD_StdDevReq+0x2a>

08005aee <USBD_StdItfReq>:
{
 8005aee:	b570      	push	{r4, r5, r6, lr}
 8005af0:	4605      	mov	r5, r0
 8005af2:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005af4:	780b      	ldrb	r3, [r1, #0]
 8005af6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005afa:	2b20      	cmp	r3, #32
 8005afc:	d007      	beq.n	8005b0e <USBD_StdItfReq+0x20>
 8005afe:	2b40      	cmp	r3, #64	@ 0x40
 8005b00:	d005      	beq.n	8005b0e <USBD_StdItfReq+0x20>
 8005b02:	b123      	cbz	r3, 8005b0e <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8005b04:	f7ff fdc9 	bl	800569a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005b08:	2600      	movs	r6, #0
}
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8005b0e:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 8005b12:	3b01      	subs	r3, #1
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d826      	bhi.n	8005b66 <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b18:	7921      	ldrb	r1, [r4, #4]
 8005b1a:	2901      	cmp	r1, #1
 8005b1c:	d905      	bls.n	8005b2a <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 8005b1e:	4621      	mov	r1, r4
 8005b20:	4628      	mov	r0, r5
 8005b22:	f7ff fdba 	bl	800569a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005b26:	2600      	movs	r6, #0
 8005b28:	e7ef      	b.n	8005b0a <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f7ff fcbf 	bl	80054ae <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b30:	b968      	cbnz	r0, 8005b4e <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 8005b32:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8005b36:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8005b3a:	6891      	ldr	r1, [r2, #8]
 8005b3c:	b189      	cbz	r1, 8005b62 <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 8005b3e:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005b42:	6893      	ldr	r3, [r2, #8]
 8005b44:	4621      	mov	r1, r4
 8005b46:	4628      	mov	r0, r5
 8005b48:	4798      	blx	r3
 8005b4a:	4606      	mov	r6, r0
 8005b4c:	e000      	b.n	8005b50 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 8005b4e:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b50:	88e3      	ldrh	r3, [r4, #6]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1d9      	bne.n	8005b0a <USBD_StdItfReq+0x1c>
 8005b56:	2e00      	cmp	r6, #0
 8005b58:	d1d7      	bne.n	8005b0a <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f000 fda3 	bl	80066a6 <USBD_CtlSendStatus>
 8005b60:	e7d3      	b.n	8005b0a <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 8005b62:	2603      	movs	r6, #3
 8005b64:	e7f4      	b.n	8005b50 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 8005b66:	4621      	mov	r1, r4
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f7ff fd96 	bl	800569a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005b6e:	2600      	movs	r6, #0
          break;
 8005b70:	e7cb      	b.n	8005b0a <USBD_StdItfReq+0x1c>

08005b72 <USBD_StdEPReq>:
{
 8005b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b76:	4606      	mov	r6, r0
 8005b78:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8005b7a:	888b      	ldrh	r3, [r1, #4]
 8005b7c:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b7e:	780c      	ldrb	r4, [r1, #0]
 8005b80:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8005b84:	2c20      	cmp	r4, #32
 8005b86:	d008      	beq.n	8005b9a <USBD_StdEPReq+0x28>
 8005b88:	2c40      	cmp	r4, #64	@ 0x40
 8005b8a:	d006      	beq.n	8005b9a <USBD_StdEPReq+0x28>
 8005b8c:	b1dc      	cbz	r4, 8005bc6 <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 8005b8e:	f7ff fd84 	bl	800569a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005b92:	2400      	movs	r4, #0
}
 8005b94:	4620      	mov	r0, r4
 8005b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	f7ff fc88 	bl	80054b2 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	f040 80f9 	bne.w	8005d9c <USBD_StdEPReq+0x22a>
        pdev->classId = idx;
 8005baa:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 8005bae:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8005bb2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0eb      	beq.n	8005b94 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	4798      	blx	r3
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	e7e6      	b.n	8005b94 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 8005bc6:	f891 8001 	ldrb.w	r8, [r1, #1]
 8005bca:	f1b8 0f01 	cmp.w	r8, #1
 8005bce:	d031      	beq.n	8005c34 <USBD_StdEPReq+0xc2>
 8005bd0:	f1b8 0f03 	cmp.w	r8, #3
 8005bd4:	d005      	beq.n	8005be2 <USBD_StdEPReq+0x70>
 8005bd6:	f1b8 0f00 	cmp.w	r8, #0
 8005bda:	d066      	beq.n	8005caa <USBD_StdEPReq+0x138>
          USBD_CtlError(pdev, req);
 8005bdc:	f7ff fd5d 	bl	800569a <USBD_CtlError>
          break;
 8005be0:	e7d8      	b.n	8005b94 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 8005be2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d004      	beq.n	8005bf6 <USBD_StdEPReq+0x84>
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d011      	beq.n	8005c14 <USBD_StdEPReq+0xa2>
              USBD_CtlError(pdev, req);
 8005bf0:	f7ff fd53 	bl	800569a <USBD_CtlError>
              break;
 8005bf4:	e7ce      	b.n	8005b94 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bf6:	2f00      	cmp	r7, #0
 8005bf8:	bf18      	it	ne
 8005bfa:	2f80      	cmpne	r7, #128	@ 0x80
 8005bfc:	d007      	beq.n	8005c0e <USBD_StdEPReq+0x9c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005bfe:	4639      	mov	r1, r7
 8005c00:	f000 ffec 	bl	8006bdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c04:	2180      	movs	r1, #128	@ 0x80
 8005c06:	4630      	mov	r0, r6
 8005c08:	f000 ffe8 	bl	8006bdc <USBD_LL_StallEP>
 8005c0c:	e7c2      	b.n	8005b94 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 8005c0e:	f7ff fd44 	bl	800569a <USBD_CtlError>
 8005c12:	e7bf      	b.n	8005b94 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c14:	884b      	ldrh	r3, [r1, #2]
 8005c16:	b92b      	cbnz	r3, 8005c24 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c18:	2f00      	cmp	r7, #0
 8005c1a:	bf18      	it	ne
 8005c1c:	2f80      	cmpne	r7, #128	@ 0x80
 8005c1e:	d001      	beq.n	8005c24 <USBD_StdEPReq+0xb2>
 8005c20:	88cb      	ldrh	r3, [r1, #6]
 8005c22:	b11b      	cbz	r3, 8005c2c <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 8005c24:	4630      	mov	r0, r6
 8005c26:	f000 fd3e 	bl	80066a6 <USBD_CtlSendStatus>
              break;
 8005c2a:	e7b3      	b.n	8005b94 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c2c:	4639      	mov	r1, r7
 8005c2e:	f000 ffd5 	bl	8006bdc <USBD_LL_StallEP>
 8005c32:	e7f7      	b.n	8005c24 <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 8005c34:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d004      	beq.n	8005c48 <USBD_StdEPReq+0xd6>
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d011      	beq.n	8005c66 <USBD_StdEPReq+0xf4>
              USBD_CtlError(pdev, req);
 8005c42:	f7ff fd2a 	bl	800569a <USBD_CtlError>
              break;
 8005c46:	e7a5      	b.n	8005b94 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c48:	2f00      	cmp	r7, #0
 8005c4a:	bf18      	it	ne
 8005c4c:	2f80      	cmpne	r7, #128	@ 0x80
 8005c4e:	d007      	beq.n	8005c60 <USBD_StdEPReq+0xee>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c50:	4639      	mov	r1, r7
 8005c52:	f000 ffc3 	bl	8006bdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c56:	2180      	movs	r1, #128	@ 0x80
 8005c58:	4630      	mov	r0, r6
 8005c5a:	f000 ffbf 	bl	8006bdc <USBD_LL_StallEP>
 8005c5e:	e799      	b.n	8005b94 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 8005c60:	f7ff fd1b 	bl	800569a <USBD_CtlError>
 8005c64:	e796      	b.n	8005b94 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c66:	884b      	ldrh	r3, [r1, #2]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d193      	bne.n	8005b94 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c6c:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 8005c70:	d117      	bne.n	8005ca2 <USBD_StdEPReq+0x130>
                (void)USBD_CtlSendStatus(pdev);
 8005c72:	4630      	mov	r0, r6
 8005c74:	f000 fd17 	bl	80066a6 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005c78:	4639      	mov	r1, r7
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f7ff fc19 	bl	80054b2 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c80:	2800      	cmp	r0, #0
 8005c82:	d187      	bne.n	8005b94 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 8005c84:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8005c88:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8005c8c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8005c90:	6892      	ldr	r2, [r2, #8]
 8005c92:	2a00      	cmp	r2, #0
 8005c94:	f000 8084 	beq.w	8005da0 <USBD_StdEPReq+0x22e>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005c98:	4629      	mov	r1, r5
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	4790      	blx	r2
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	e778      	b.n	8005b94 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	f000 ffa2 	bl	8006bec <USBD_LL_ClearStallEP>
 8005ca8:	e7e3      	b.n	8005c72 <USBD_StdEPReq+0x100>
          switch (pdev->dev_state)
 8005caa:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	2a02      	cmp	r2, #2
 8005cb2:	d005      	beq.n	8005cc0 <USBD_StdEPReq+0x14e>
 8005cb4:	2a03      	cmp	r2, #3
 8005cb6:	d028      	beq.n	8005d0a <USBD_StdEPReq+0x198>
              USBD_CtlError(pdev, req);
 8005cb8:	f7ff fcef 	bl	800569a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005cbc:	4644      	mov	r4, r8
              break;
 8005cbe:	e769      	b.n	8005b94 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cc0:	2f00      	cmp	r7, #0
 8005cc2:	bf18      	it	ne
 8005cc4:	2f80      	cmpne	r7, #128	@ 0x80
 8005cc6:	d113      	bne.n	8005cf0 <USBD_StdEPReq+0x17e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ccc:	d114      	bne.n	8005cf8 <USBD_StdEPReq+0x186>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005cce:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cd2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8005cd6:	00b9      	lsls	r1, r7, #2
 8005cd8:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8005cdc:	4401      	add	r1, r0
 8005cde:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f000 fcb1 	bl	800664e <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005cec:	4644      	mov	r4, r8
              break;
 8005cee:	e751      	b.n	8005b94 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 8005cf0:	f7ff fcd3 	bl	800569a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005cf4:	4644      	mov	r4, r8
                break;
 8005cf6:	e74d      	b.n	8005b94 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cf8:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8005cfc:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8005d00:	00b9      	lsls	r1, r7, #2
 8005d02:	3110      	adds	r1, #16
 8005d04:	4401      	add	r1, r0
 8005d06:	3104      	adds	r1, #4
 8005d08:	e7ea      	b.n	8005ce0 <USBD_StdEPReq+0x16e>
              if ((ep_addr & 0x80U) == 0x80U)
 8005d0a:	b25b      	sxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	db20      	blt.n	8005d52 <USBD_StdEPReq+0x1e0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005d10:	f007 020f 	and.w	r2, r7, #15
 8005d14:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005d18:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005d1c:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 8005d20:	b322      	cbz	r2, 8005d6c <USBD_StdEPReq+0x1fa>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	db26      	blt.n	8005d74 <USBD_StdEPReq+0x202>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d26:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005d2e:	009c      	lsls	r4, r3, #2
 8005d30:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8005d34:	4434      	add	r4, r6
 8005d36:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d38:	2f80      	cmp	r7, #128	@ 0x80
 8005d3a:	bf18      	it	ne
 8005d3c:	2f00      	cmpne	r7, #0
 8005d3e:	d122      	bne.n	8005d86 <USBD_StdEPReq+0x214>
                pep->status = 0x0000U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d44:	2202      	movs	r2, #2
 8005d46:	4621      	mov	r1, r4
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f000 fc80 	bl	800664e <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005d4e:	4644      	mov	r4, r8
              break;
 8005d50:	e720      	b.n	8005b94 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d52:	f007 020f 	and.w	r2, r7, #15
 8005d56:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005d5a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005d5e:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	d1de      	bne.n	8005d22 <USBD_StdEPReq+0x1b0>
                  USBD_CtlError(pdev, req);
 8005d64:	f7ff fc99 	bl	800569a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005d68:	4644      	mov	r4, r8
                  break;
 8005d6a:	e713      	b.n	8005b94 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 8005d6c:	f7ff fc95 	bl	800569a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8005d70:	4644      	mov	r4, r8
                  break;
 8005d72:	e70f      	b.n	8005b94 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d74:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 8005d78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005d7c:	009c      	lsls	r4, r3, #2
 8005d7e:	3410      	adds	r4, #16
 8005d80:	4434      	add	r4, r6
 8005d82:	3404      	adds	r4, #4
 8005d84:	e7d8      	b.n	8005d38 <USBD_StdEPReq+0x1c6>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005d86:	4639      	mov	r1, r7
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f000 fee7 	bl	8006b5c <USBD_LL_IsStallEP>
 8005d8e:	b110      	cbz	r0, 8005d96 <USBD_StdEPReq+0x224>
                pep->status = 0x0001U;
 8005d90:	2301      	movs	r3, #1
 8005d92:	6023      	str	r3, [r4, #0]
 8005d94:	e7d6      	b.n	8005d44 <USBD_StdEPReq+0x1d2>
                pep->status = 0x0000U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	e7d3      	b.n	8005d44 <USBD_StdEPReq+0x1d2>
  USBD_StatusTypeDef ret = USBD_OK;
 8005d9c:	2400      	movs	r4, #0
 8005d9e:	e6f9      	b.n	8005b94 <USBD_StdEPReq+0x22>
 8005da0:	4604      	mov	r4, r0
 8005da2:	e6f7      	b.n	8005b94 <USBD_StdEPReq+0x22>

08005da4 <USBD_GetString>:
  if (desc == NULL)
 8005da4:	b300      	cbz	r0, 8005de8 <USBD_GetString+0x44>
{
 8005da6:	b570      	push	{r4, r5, r6, lr}
 8005da8:	460d      	mov	r5, r1
 8005daa:	4616      	mov	r6, r2
 8005dac:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005dae:	f7ff fc56 	bl	800565e <USBD_GetLen>
 8005db2:	3001      	adds	r0, #1
 8005db4:	0043      	lsls	r3, r0, #1
 8005db6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dba:	d806      	bhi.n	8005dca <USBD_GetString+0x26>
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8005dc0:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	706b      	strb	r3, [r5, #1]
  idx++;
 8005dc6:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8005dc8:	e00a      	b.n	8005de0 <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005dca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005dce:	e7f6      	b.n	8005dbe <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 8005dd0:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8005dd2:	3401      	adds	r4, #1
    idx++;
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8005dd8:	2100      	movs	r1, #0
 8005dda:	54a9      	strb	r1, [r5, r2]
    idx++;
 8005ddc:	3302      	adds	r3, #2
 8005dde:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8005de0:	7822      	ldrb	r2, [r4, #0]
 8005de2:	2a00      	cmp	r2, #0
 8005de4:	d1f4      	bne.n	8005dd0 <USBD_GetString+0x2c>
}
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
 8005de8:	4770      	bx	lr
	...

08005dec <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8005dec:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005df0:	4905      	ldr	r1, [pc, #20]	@ (8005e08 <__NVIC_SystemReset+0x1c>)
 8005df2:	68ca      	ldr	r2, [r1, #12]
 8005df4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005df8:	4b04      	ldr	r3, [pc, #16]	@ (8005e0c <__NVIC_SystemReset+0x20>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60cb      	str	r3, [r1, #12]
 8005dfe:	f3bf 8f4f 	dsb	sy
    __NOP();
 8005e02:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8005e04:	e7fd      	b.n	8005e02 <__NVIC_SystemReset+0x16>
 8005e06:	bf00      	nop
 8005e08:	e000ed00 	.word	0xe000ed00
 8005e0c:	05fa0004 	.word	0x05fa0004

08005e10 <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8005e10:	231b      	movs	r3, #27
 8005e12:	8003      	strh	r3, [r0, #0]

  return USBD_DFU_CfgDesc;
}
 8005e14:	4800      	ldr	r0, [pc, #0]	@ (8005e18 <USBD_DFU_GetCfgDesc+0x8>)
 8005e16:	4770      	bx	lr
 8005e18:	24000020 	.word	0x24000020

08005e1c <USBD_DFU_EP0_RxReady>:
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
}
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	4770      	bx	lr

08005e20 <USBD_DFU_SOF>:
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
}
 8005e20:	2000      	movs	r0, #0
 8005e22:	4770      	bx	lr

08005e24 <USBD_DFU_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8005e24:	230a      	movs	r3, #10
 8005e26:	8003      	strh	r3, [r0, #0]

  return USBD_DFU_DeviceQualifierDesc;
}
 8005e28:	4800      	ldr	r0, [pc, #0]	@ (8005e2c <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 8005e2a:	4770      	bx	lr
 8005e2c:	24000014 	.word	0x24000014

08005e30 <DFU_ClearStatus>:
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e30:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005e34:	33b0      	adds	r3, #176	@ 0xb0
 8005e36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hdfu == NULL)
 8005e3a:	b1a3      	cbz	r3, 8005e66 <DFU_ClearStatus+0x36>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8005e3c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8005e40:	2a0a      	cmp	r2, #10
 8005e42:	d011      	beq.n	8005e68 <DFU_ClearStatus+0x38>
    hdfu->dev_status[5] = 0U; /* iString */
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8005e44:	210a      	movs	r1, #10
 8005e46:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8005e4a:	220e      	movs	r2, #14
 8005e4c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8005e56:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8005e5a:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8005e5e:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8005e62:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  }
}
 8005e66:	4770      	bx	lr
    hdfu->dev_state = DFU_STATE_IDLE;
 8005e68:	2102      	movs	r1, #2
 8005e6a:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 8005e74:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8005e78:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8005e7c:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8005e80:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8005e84:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 8005e88:	4770      	bx	lr

08005e8a <DFU_Abort>:
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e8a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005e8e:	33b0      	adds	r3, #176	@ 0xb0
 8005e90:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hdfu == NULL)
 8005e94:	b1eb      	cbz	r3, 8005ed2 <DFU_Abort+0x48>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8005e96:	f893 141c 	ldrb.w	r1, [r3, #1052]	@ 0x41c
 8005e9a:	2909      	cmp	r1, #9
 8005e9c:	d819      	bhi.n	8005ed2 <DFU_Abort+0x48>
 8005e9e:	f44f 721b 	mov.w	r2, #620	@ 0x26c
 8005ea2:	40ca      	lsrs	r2, r1
 8005ea4:	f012 0f01 	tst.w	r2, #1
 8005ea8:	d013      	beq.n	8005ed2 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8005eaa:	2102      	movs	r1, #2
 8005eac:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 8005eb6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8005eba:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8005ebe:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8005ec2:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8005ec6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 8005eca:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8005ece:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }
}
 8005ed2:	4770      	bx	lr

08005ed4 <USBD_DFU_GetUsrStringDesc>:
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8005ed4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005ed8:	33b0      	adds	r3, #176	@ 0xb0
 8005eda:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005ede:	6843      	ldr	r3, [r0, #4]
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8005ee0:	2906      	cmp	r1, #6
 8005ee2:	d807      	bhi.n	8005ef4 <USBD_DFU_GetUsrStringDesc+0x20>
{
 8005ee4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8005ee6:	4c05      	ldr	r4, [pc, #20]	@ (8005efc <USBD_DFU_GetUsrStringDesc+0x28>)
 8005ee8:	4621      	mov	r1, r4
 8005eea:	6818      	ldr	r0, [r3, #0]
 8005eec:	f7ff ff5a 	bl	8005da4 <USBD_GetString>
    return USBD_StrDesc;
 8005ef0:	4620      	mov	r0, r4
}
 8005ef2:	bd10      	pop	{r4, pc}
    *length = 0U;
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	8010      	strh	r0, [r2, #0]
}
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	24000230 	.word	0x24000230

08005f00 <USBD_DFU_GetDfuFuncDesc>:
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  uint8_t *pDfuDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005f00:	8842      	ldrh	r2, [r0, #2]
 8005f02:	7803      	ldrb	r3, [r0, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d914      	bls.n	8005f32 <USBD_DFU_GetDfuFuncDesc+0x32>
{
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	4604      	mov	r4, r0
  {
    ptr = desc->bLength;
 8005f0e:	f8ad 3006 	strh.w	r3, [sp, #6]

    while (ptr < desc->wTotalLength)
 8005f12:	8863      	ldrh	r3, [r4, #2]
 8005f14:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d207      	bcs.n	8005f2c <USBD_DFU_GetDfuFuncDesc+0x2c>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005f1c:	f10d 0106 	add.w	r1, sp, #6
 8005f20:	f7ff fb96 	bl	8005650 <USBD_GetNextDesc>

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 8005f24:	7843      	ldrb	r3, [r0, #1]
 8005f26:	2b21      	cmp	r3, #33	@ 0x21
 8005f28:	d1f3      	bne.n	8005f12 <USBD_DFU_GetDfuFuncDesc+0x12>
 8005f2a:	e000      	b.n	8005f2e <USBD_DFU_GetDfuFuncDesc+0x2e>
  uint8_t *pDfuDesc = NULL;
 8005f2c:	2000      	movs	r0, #0
        break;
      }
    }
  }
  return pDfuDesc;
}
 8005f2e:	b002      	add	sp, #8
 8005f30:	bd10      	pop	{r4, pc}
  uint8_t *pDfuDesc = NULL;
 8005f32:	2000      	movs	r0, #0
}
 8005f34:	4770      	bx	lr

08005f36 <DFU_Leave>:
{
 8005f36:	b570      	push	{r4, r5, r6, lr}
 8005f38:	4604      	mov	r4, r0
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f3a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005f3e:	33b0      	adds	r3, #176	@ 0xb0
 8005f40:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8005f44:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005f48:	685d      	ldr	r5, [r3, #4]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8005f4a:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8005f4e:	f7ff ffd7 	bl	8005f00 <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8005f52:	2d00      	cmp	r5, #0
 8005f54:	bf18      	it	ne
 8005f56:	2e00      	cmpne	r6, #0
 8005f58:	d013      	beq.n	8005f82 <DFU_Leave+0x4c>
 8005f5a:	b190      	cbz	r0, 8005f82 <DFU_Leave+0x4c>
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f886 341d 	strb.w	r3, [r6, #1053]	@ 0x41d
  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 8005f62:	7883      	ldrb	r3, [r0, #2]
 8005f64:	f013 0f04 	tst.w	r3, #4
 8005f68:	d00c      	beq.n	8005f84 <DFU_Leave+0x4e>
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8005f6a:	2206      	movs	r2, #6
 8005f6c:	f886 241c 	strb.w	r2, [r6, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	f886 3415 	strb.w	r3, [r6, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8005f76:	f886 3416 	strb.w	r3, [r6, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8005f7a:	f886 3417 	strb.w	r3, [r6, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8005f7e:	f886 2418 	strb.w	r2, [r6, #1048]	@ 0x418
}
 8005f82:	bd70      	pop	{r4, r5, r6, pc}
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8005f84:	2208      	movs	r2, #8
 8005f86:	f886 241c 	strb.w	r2, [r6, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f886 3415 	strb.w	r3, [r6, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8005f90:	f886 3416 	strb.w	r3, [r6, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8005f94:	f886 3417 	strb.w	r3, [r6, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8005f98:	f886 2418 	strb.w	r2, [r6, #1048]	@ 0x418
    (void)USBD_Stop(pdev);
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f7ff f999 	bl	80052d4 <USBD_Stop>
    NVIC_SystemReset();
 8005fa2:	f7ff ff23 	bl	8005dec <__NVIC_SystemReset>

08005fa6 <USBD_DFU_EP0_TxReady>:
{
 8005fa6:	b510      	push	{r4, lr}
 8005fa8:	b082      	sub	sp, #8
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005faa:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005fae:	33b0      	adds	r3, #176	@ 0xb0
 8005fb0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8005fb4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005fb8:	685a      	ldr	r2, [r3, #4]
  if (hdfu == NULL)
 8005fba:	2c00      	cmp	r4, #0
 8005fbc:	f000 808c 	beq.w	80060d8 <USBD_DFU_EP0_TxReady+0x132>
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8005fc0:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d005      	beq.n	8005fd4 <USBD_DFU_EP0_TxReady+0x2e>
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8005fc8:	2b07      	cmp	r3, #7
 8005fca:	f000 8081 	beq.w	80060d0 <USBD_DFU_EP0_TxReady+0x12a>
    return (uint8_t)USBD_FAIL;
 8005fce:	2003      	movs	r0, #3
}
 8005fd0:	b002      	add	sp, #8
 8005fd2:	bd10      	pop	{r4, pc}
    if (hdfu->wblock_num == 0U)
 8005fd4:	f8d4 1400 	ldr.w	r1, [r4, #1024]	@ 0x400
 8005fd8:	2900      	cmp	r1, #0
 8005fda:	d14a      	bne.n	8006072 <USBD_DFU_EP0_TxReady+0xcc>
      if (hdfu->wlength == 1U)
 8005fdc:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d053      	beq.n	800608c <USBD_DFU_EP0_TxReady+0xe6>
      else if (hdfu->wlength == 5U)
 8005fe4:	2b05      	cmp	r3, #5
 8005fe6:	d136      	bne.n	8006056 <USBD_DFU_EP0_TxReady+0xb0>
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8005fe8:	7823      	ldrb	r3, [r4, #0]
 8005fea:	2b21      	cmp	r3, #33	@ 0x21
 8005fec:	d020      	beq.n	8006030 <USBD_DFU_EP0_TxReady+0x8a>
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8005fee:	2b41      	cmp	r3, #65	@ 0x41
 8005ff0:	d174      	bne.n	80060dc <USBD_DFU_EP0_TxReady+0x136>
          app_addr_ptr = hdfu->buffer.d8[1];
 8005ff2:	7863      	ldrb	r3, [r4, #1]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8005ff4:	78a1      	ldrb	r1, [r4, #2]
 8005ff6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8005ffa:	78e1      	ldrb	r1, [r4, #3]
 8005ffc:	eb03 4301 	add.w	r3, r3, r1, lsl #16
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8006000:	7920      	ldrb	r0, [r4, #4]
          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 8006002:	68d2      	ldr	r2, [r2, #12]
 8006004:	eb03 6000 	add.w	r0, r3, r0, lsl #24
 8006008:	4790      	blx	r2
 800600a:	2800      	cmp	r0, #0
 800600c:	d03e      	beq.n	800608c <USBD_DFU_EP0_TxReady+0xe6>
            hdfu->dev_state = DFU_STATE_ERROR;
 800600e:	220a      	movs	r2, #10
 8006010:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8006014:	230b      	movs	r3, #11
 8006016:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
            hdfu->dev_status[1] = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8006020:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8006024:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 8006028:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
            return (uint8_t)USBD_FAIL;
 800602c:	2003      	movs	r0, #3
 800602e:	e7cf      	b.n	8005fd0 <USBD_DFU_EP0_TxReady+0x2a>
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8006030:	7863      	ldrb	r3, [r4, #1]
 8006032:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8006036:	78a2      	ldrb	r2, [r4, #2]
 8006038:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800603c:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8006040:	78e2      	ldrb	r2, [r4, #3]
 8006042:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8006046:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800604a:	7922      	ldrb	r2, [r4, #4]
 800604c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8006050:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
 8006054:	e01a      	b.n	800608c <USBD_DFU_EP0_TxReady+0xe6>
        hdfu->wlength = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 800605c:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
        req.bmRequest = 0U;
 8006060:	f88d 3000 	strb.w	r3, [sp]
        req.wLength = 1U;
 8006064:	2301      	movs	r3, #1
 8006066:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError(pdev, &req);
 800606a:	4669      	mov	r1, sp
 800606c:	f7ff fb15 	bl	800569a <USBD_CtlError>
 8006070:	e00c      	b.n	800608c <USBD_DFU_EP0_TxReady+0xe6>
      if (hdfu->wblock_num > 1U)
 8006072:	2901      	cmp	r1, #1
 8006074:	d90a      	bls.n	800608c <USBD_DFU_EP0_TxReady+0xe6>
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8006076:	3902      	subs	r1, #2
 8006078:	f8d4 0408 	ldr.w	r0, [r4, #1032]	@ 0x408
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800607c:	6913      	ldr	r3, [r2, #16]
 800607e:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
 8006082:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 8006086:	4620      	mov	r0, r4
 8006088:	4798      	blx	r3
 800608a:	b980      	cbnz	r0, 80060ae <USBD_DFU_EP0_TxReady+0x108>
    hdfu->wlength = 0U;
 800608c:	2000      	movs	r0, #0
 800608e:	f8c4 0404 	str.w	r0, [r4, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8006092:	f8c4 0400 	str.w	r0, [r4, #1024]	@ 0x400
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8006096:	2303      	movs	r3, #3
 8006098:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 800609c:	f884 0415 	strb.w	r0, [r4, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80060a0:	f884 0416 	strb.w	r0, [r4, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 80060a4:	f884 0417 	strb.w	r0, [r4, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80060a8:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
 80060ac:	e790      	b.n	8005fd0 <USBD_DFU_EP0_TxReady+0x2a>
          hdfu->dev_state = DFU_STATE_ERROR;
 80060ae:	220a      	movs	r2, #10
 80060b0:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 80060b4:	230b      	movs	r3, #11
 80060b6:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
          hdfu->dev_status[1] = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 80060c0:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 80060c4:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 80060c8:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
          return (uint8_t)USBD_FAIL;
 80060cc:	2003      	movs	r0, #3
 80060ce:	e77f      	b.n	8005fd0 <USBD_DFU_EP0_TxReady+0x2a>
    DFU_Leave(pdev);
 80060d0:	f7ff ff31 	bl	8005f36 <DFU_Leave>
  return (uint8_t)USBD_OK;
 80060d4:	2000      	movs	r0, #0
 80060d6:	e77b      	b.n	8005fd0 <USBD_DFU_EP0_TxReady+0x2a>
    return (uint8_t)USBD_FAIL;
 80060d8:	2003      	movs	r0, #3
 80060da:	e779      	b.n	8005fd0 <USBD_DFU_EP0_TxReady+0x2a>
          return (uint8_t)USBD_FAIL;
 80060dc:	2003      	movs	r0, #3
 80060de:	e777      	b.n	8005fd0 <USBD_DFU_EP0_TxReady+0x2a>

080060e0 <DFU_Upload>:
{
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	460e      	mov	r6, r1
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060e4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80060e8:	33b0      	adds	r3, #176	@ 0xb0
 80060ea:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 80060ee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80060f2:	6859      	ldr	r1, [r3, #4]
  if (hdfu == NULL)
 80060f4:	2c00      	cmp	r4, #0
 80060f6:	f000 8087 	beq.w	8006208 <DFU_Upload+0x128>
 80060fa:	4605      	mov	r5, r0
  if (req->wLength > 0U)
 80060fc:	88f3      	ldrh	r3, [r6, #6]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d076      	beq.n	80061f0 <DFU_Upload+0x110>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8006102:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 8006106:	2b09      	cmp	r3, #9
 8006108:	bf18      	it	ne
 800610a:	2b02      	cmpne	r3, #2
 800610c:	d167      	bne.n	80061de <DFU_Upload+0xfe>
      hdfu->wblock_num = req->wValue;
 800610e:	8870      	ldrh	r0, [r6, #2]
 8006110:	f8c4 0400 	str.w	r0, [r4, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8006114:	88f2      	ldrh	r2, [r6, #6]
 8006116:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800611a:	bf28      	it	cs
 800611c:	f44f 6280 	movcs.w	r2, #1024	@ 0x400
 8006120:	f8c4 2404 	str.w	r2, [r4, #1028]	@ 0x404
      if (hdfu->wblock_num == 0U)
 8006124:	b9d0      	cbnz	r0, 800615c <DFU_Upload+0x7c>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8006126:	2a03      	cmp	r2, #3
 8006128:	d916      	bls.n	8006158 <DFU_Upload+0x78>
 800612a:	2202      	movs	r2, #2
 800612c:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8006136:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 800613a:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800613e:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8006142:	7023      	strb	r3, [r4, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8006144:	2321      	movs	r3, #33	@ 0x21
 8006146:	7063      	strb	r3, [r4, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8006148:	2341      	movs	r3, #65	@ 0x41
 800614a:	70a3      	strb	r3, [r4, #2]
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 800614c:	2203      	movs	r2, #3
 800614e:	4621      	mov	r1, r4
 8006150:	4628      	mov	r0, r5
 8006152:	f000 fa7c 	bl	800664e <USBD_CtlSendData>
 8006156:	e057      	b.n	8006208 <DFU_Upload+0x128>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8006158:	2209      	movs	r2, #9
 800615a:	e7e7      	b.n	800612c <DFU_Upload+0x4c>
      else if (hdfu->wblock_num > 1U)
 800615c:	2801      	cmp	r0, #1
 800615e:	d92d      	bls.n	80061bc <DFU_Upload+0xdc>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8006160:	f04f 0c09 	mov.w	ip, #9
 8006164:	f884 c41c 	strb.w	ip, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 800616e:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8006172:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8006176:	f884 c418 	strb.w	ip, [r4, #1048]	@ 0x418
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800617a:	3802      	subs	r0, #2
 800617c:	f8d4 3408 	ldr.w	r3, [r4, #1032]	@ 0x408
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8006180:	694f      	ldr	r7, [r1, #20]
 8006182:	4621      	mov	r1, r4
 8006184:	eb03 2080 	add.w	r0, r3, r0, lsl #10
 8006188:	47b8      	blx	r7
          if (phaddr == NULL)
 800618a:	4601      	mov	r1, r0
 800618c:	b128      	cbz	r0, 800619a <DFU_Upload+0xba>
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800618e:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
 8006192:	4628      	mov	r0, r5
 8006194:	f000 fa5b 	bl	800664e <USBD_CtlSendData>
 8006198:	e036      	b.n	8006208 <DFU_Upload+0x128>
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800619a:	220f      	movs	r2, #15
 800619c:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
            hdfu->dev_status[1] = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 80061a6:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 80061aa:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 80061ae:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
            USBD_CtlError(pdev, req);
 80061b2:	4631      	mov	r1, r6
 80061b4:	4628      	mov	r0, r5
 80061b6:	f7ff fa70 	bl	800569a <USBD_CtlError>
 80061ba:	e025      	b.n	8006208 <DFU_Upload+0x128>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80061bc:	220f      	movs	r2, #15
 80061be:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80061c8:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 80061cc:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80061d0:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
        USBD_CtlError(pdev, req);
 80061d4:	4631      	mov	r1, r6
 80061d6:	4628      	mov	r0, r5
 80061d8:	f7ff fa5f 	bl	800569a <USBD_CtlError>
 80061dc:	e014      	b.n	8006208 <DFU_Upload+0x128>
      hdfu->wlength = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 80061e4:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
      USBD_CtlError(pdev, req);
 80061e8:	4631      	mov	r1, r6
 80061ea:	f7ff fa56 	bl	800569a <USBD_CtlError>
 80061ee:	e00b      	b.n	8006208 <DFU_Upload+0x128>
    hdfu->dev_state = DFU_STATE_IDLE;
 80061f0:	2202      	movs	r2, #2
 80061f2:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80061fc:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8006200:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8006204:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
}
 8006208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800620a <DFU_GetStatus>:
{
 800620a:	b570      	push	{r4, r5, r6, lr}
 800620c:	4604      	mov	r4, r0
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800620e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006212:	33b0      	adds	r3, #176	@ 0xb0
 8006214:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8006218:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800621c:	685e      	ldr	r6, [r3, #4]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800621e:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8006222:	f7ff fe6d 	bl	8005f00 <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8006226:	2e00      	cmp	r6, #0
 8006228:	bf18      	it	ne
 800622a:	2d00      	cmpne	r5, #0
 800622c:	d00c      	beq.n	8006248 <DFU_GetStatus+0x3e>
 800622e:	b158      	cbz	r0, 8006248 <DFU_GetStatus+0x3e>
  switch (hdfu->dev_state)
 8006230:	f895 341c 	ldrb.w	r3, [r5, #1052]	@ 0x41c
 8006234:	2b03      	cmp	r3, #3
 8006236:	d008      	beq.n	800624a <DFU_GetStatus+0x40>
 8006238:	2b06      	cmp	r3, #6
 800623a:	d038      	beq.n	80062ae <DFU_GetStatus+0xa4>
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800623c:	2206      	movs	r2, #6
 800623e:	f205 4114 	addw	r1, r5, #1044	@ 0x414
 8006242:	4620      	mov	r0, r4
 8006244:	f000 fa03 	bl	800664e <USBD_CtlSendData>
}
 8006248:	bd70      	pop	{r4, r5, r6, pc}
      if (hdfu->wlength != 0U)
 800624a:	f8d5 3404 	ldr.w	r3, [r5, #1028]	@ 0x404
 800624e:	b30b      	cbz	r3, 8006294 <DFU_GetStatus+0x8a>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8006250:	2204      	movs	r2, #4
 8006252:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 800625c:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8006260:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8006264:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8006268:	f8d5 3400 	ldr.w	r3, [r5, #1024]	@ 0x400
 800626c:	b913      	cbnz	r3, 8006274 <DFU_GetStatus+0x6a>
 800626e:	782b      	ldrb	r3, [r5, #0]
 8006270:	2b41      	cmp	r3, #65	@ 0x41
 8006272:	d007      	beq.n	8006284 <DFU_GetStatus+0x7a>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8006274:	69b3      	ldr	r3, [r6, #24]
 8006276:	f205 4214 	addw	r2, r5, #1044	@ 0x414
 800627a:	2101      	movs	r1, #1
 800627c:	f8d5 0408 	ldr.w	r0, [r5, #1032]	@ 0x408
 8006280:	4798      	blx	r3
 8006282:	e7db      	b.n	800623c <DFU_GetStatus+0x32>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8006284:	69b3      	ldr	r3, [r6, #24]
 8006286:	f205 4214 	addw	r2, r5, #1044	@ 0x414
 800628a:	2100      	movs	r1, #0
 800628c:	f8d5 0408 	ldr.w	r0, [r5, #1032]	@ 0x408
 8006290:	4798      	blx	r3
 8006292:	e7d3      	b.n	800623c <DFU_GetStatus+0x32>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8006294:	2205      	movs	r2, #5
 8006296:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80062a0:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 80062a4:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80062a8:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
 80062ac:	e7c6      	b.n	800623c <DFU_GetStatus+0x32>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 80062ae:	f895 341d 	ldrb.w	r3, [r5, #1053]	@ 0x41d
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d012      	beq.n	80062dc <DFU_GetStatus+0xd2>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1c0      	bne.n	800623c <DFU_GetStatus+0x32>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 80062ba:	7883      	ldrb	r3, [r0, #2]
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80062bc:	f013 0f04 	tst.w	r3, #4
 80062c0:	d0bc      	beq.n	800623c <DFU_GetStatus+0x32>
          hdfu->dev_state = DFU_STATE_IDLE;
 80062c2:	2202      	movs	r2, #2
 80062c4:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
          hdfu->dev_status[1] = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 80062ce:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 80062d2:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 80062d6:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
 80062da:	e7af      	b.n	800623c <DFU_GetStatus+0x32>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 80062dc:	2307      	movs	r3, #7
 80062de:	f885 341c 	strb.w	r3, [r5, #1052]	@ 0x41c
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 80062e2:	2201      	movs	r2, #1
 80062e4:	f885 2415 	strb.w	r2, [r5, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80062e8:	2200      	movs	r2, #0
 80062ea:	f885 2416 	strb.w	r2, [r5, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 80062ee:	f885 2417 	strb.w	r2, [r5, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80062f2:	f885 3418 	strb.w	r3, [r5, #1048]	@ 0x418
 80062f6:	e7a1      	b.n	800623c <DFU_GetStatus+0x32>

080062f8 <DFU_GetState>:
{
 80062f8:	b508      	push	{r3, lr}
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062fa:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80062fe:	33b0      	adds	r3, #176	@ 0xb0
 8006300:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
  if (hdfu == NULL)
 8006304:	b121      	cbz	r1, 8006310 <DFU_GetState+0x18>
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8006306:	2201      	movs	r2, #1
 8006308:	f201 411c 	addw	r1, r1, #1052	@ 0x41c
 800630c:	f000 f99f 	bl	800664e <USBD_CtlSendData>
}
 8006310:	bd08      	pop	{r3, pc}

08006312 <DFU_Download>:
{
 8006312:	b508      	push	{r3, lr}
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006314:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006318:	33b0      	adds	r3, #176	@ 0xb0
 800631a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  if (hdfu == NULL)
 800631e:	b39b      	cbz	r3, 8006388 <DFU_Download+0x76>
  if (req->wLength > 0U)
 8006320:	88ca      	ldrh	r2, [r1, #6]
 8006322:	b1e2      	cbz	r2, 800635e <DFU_Download+0x4c>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8006324:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8006328:	2a05      	cmp	r2, #5
 800632a:	bf18      	it	ne
 800632c:	2a02      	cmpne	r2, #2
 800632e:	d113      	bne.n	8006358 <DFU_Download+0x46>
      hdfu->wblock_num = req->wValue;
 8006330:	884a      	ldrh	r2, [r1, #2]
 8006332:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8006336:	88ca      	ldrh	r2, [r1, #6]
 8006338:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800633c:	bf28      	it	cs
 800633e:	f44f 6280 	movcs.w	r2, #1024	@ 0x400
 8006342:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8006346:	2103      	movs	r1, #3
 8006348:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
      hdfu->dev_status[4] = hdfu->dev_state;
 800634c:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8006350:	4619      	mov	r1, r3
 8006352:	f000 f991 	bl	8006678 <USBD_CtlPrepareRx>
 8006356:	e017      	b.n	8006388 <DFU_Download+0x76>
      USBD_CtlError(pdev, req);
 8006358:	f7ff f99f 	bl	800569a <USBD_CtlError>
 800635c:	e014      	b.n	8006388 <DFU_Download+0x76>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800635e:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8006362:	2a02      	cmp	r2, #2
 8006364:	bf18      	it	ne
 8006366:	2a05      	cmpne	r2, #5
 8006368:	d10f      	bne.n	800638a <DFU_Download+0x78>
        hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800636a:	2201      	movs	r2, #1
 800636c:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8006370:	2106      	movs	r1, #6
 8006372:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 800637c:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8006380:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8006384:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
}
 8006388:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 800638a:	f7ff f986 	bl	800569a <USBD_CtlError>
 800638e:	e7fb      	b.n	8006388 <DFU_Download+0x76>

08006390 <DFU_Detach>:
{
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	4604      	mov	r4, r0
 8006394:	460e      	mov	r6, r1
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006396:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800639a:	33b0      	adds	r3, #176	@ 0xb0
 800639c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 80063a0:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 80063a4:	f7ff fdac 	bl	8005f00 <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (pDfuFunc == NULL))
 80063a8:	2800      	cmp	r0, #0
 80063aa:	bf18      	it	ne
 80063ac:	2d00      	cmpne	r5, #0
 80063ae:	d028      	beq.n	8006402 <DFU_Detach+0x72>
 80063b0:	4601      	mov	r1, r0
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80063b2:	f895 241c 	ldrb.w	r2, [r5, #1052]	@ 0x41c
 80063b6:	2a09      	cmp	r2, #9
 80063b8:	d819      	bhi.n	80063ee <DFU_Detach+0x5e>
 80063ba:	f44f 731b 	mov.w	r3, #620	@ 0x26c
 80063be:	40d3      	lsrs	r3, r2
 80063c0:	f013 0f01 	tst.w	r3, #1
 80063c4:	d013      	beq.n	80063ee <DFU_Detach+0x5e>
    hdfu->dev_state = DFU_STATE_IDLE;
 80063c6:	2202      	movs	r2, #2
 80063c8:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80063cc:	2300      	movs	r3, #0
 80063ce:	f885 3414 	strb.w	r3, [r5, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 80063d2:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80063d6:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80063da:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80063de:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /*iString*/
 80063e2:	f885 3419 	strb.w	r3, [r5, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 80063e6:	f8c5 3400 	str.w	r3, [r5, #1024]	@ 0x400
    hdfu->wlength = 0U;
 80063ea:	f8c5 3404 	str.w	r3, [r5, #1028]	@ 0x404
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 80063ee:	788b      	ldrb	r3, [r1, #2]
 80063f0:	f013 0f08 	tst.w	r3, #8
 80063f4:	d006      	beq.n	8006404 <DFU_Detach+0x74>
    (void)USBD_Stop(pdev);
 80063f6:	4620      	mov	r0, r4
 80063f8:	f7fe ff6c 	bl	80052d4 <USBD_Stop>
    (void)USBD_Start(pdev);
 80063fc:	4620      	mov	r0, r4
 80063fe:	f7fe ff65 	bl	80052cc <USBD_Start>
}
 8006402:	bd70      	pop	{r4, r5, r6, pc}
    USBD_Delay((uint32_t)req->wValue);
 8006404:	8870      	ldrh	r0, [r6, #2]
 8006406:	f7fa fd29 	bl	8000e5c <HAL_Delay>
 800640a:	e7fa      	b.n	8006402 <DFU_Detach+0x72>

0800640c <USBD_DFU_Setup>:
{
 800640c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800640e:	b083      	sub	sp, #12
 8006410:	460e      	mov	r6, r1
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006412:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006416:	33b0      	adds	r3, #176	@ 0xb0
 8006418:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
  uint16_t status_info = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hdfu == NULL)
 8006422:	2900      	cmp	r1, #0
 8006424:	f000 8098 	beq.w	8006558 <USBD_DFU_Setup+0x14c>
 8006428:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800642a:	7834      	ldrb	r4, [r6, #0]
 800642c:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
 8006430:	d02e      	beq.n	8006490 <USBD_DFU_Setup+0x84>
 8006432:	2c20      	cmp	r4, #32
 8006434:	f040 8089 	bne.w	800654a <USBD_DFU_Setup+0x13e>
      switch (req->bRequest)
 8006438:	7874      	ldrb	r4, [r6, #1]
 800643a:	2c06      	cmp	r4, #6
 800643c:	d823      	bhi.n	8006486 <USBD_DFU_Setup+0x7a>
 800643e:	e8df f004 	tbb	[pc, r4]
 8006442:	041e      	.short	0x041e
 8006444:	16120e09 	.word	0x16120e09
 8006448:	1a          	.byte	0x1a
 8006449:	00          	.byte	0x00
          DFU_Download(pdev, req);
 800644a:	4631      	mov	r1, r6
 800644c:	f7ff ff61 	bl	8006312 <DFU_Download>
  USBD_StatusTypeDef ret = USBD_OK;
 8006450:	2400      	movs	r4, #0
          break;
 8006452:	e07e      	b.n	8006552 <USBD_DFU_Setup+0x146>
          DFU_Upload(pdev, req);
 8006454:	4631      	mov	r1, r6
 8006456:	f7ff fe43 	bl	80060e0 <DFU_Upload>
  USBD_StatusTypeDef ret = USBD_OK;
 800645a:	2400      	movs	r4, #0
          break;
 800645c:	e079      	b.n	8006552 <USBD_DFU_Setup+0x146>
          DFU_GetStatus(pdev);
 800645e:	f7ff fed4 	bl	800620a <DFU_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8006462:	2400      	movs	r4, #0
          break;
 8006464:	e075      	b.n	8006552 <USBD_DFU_Setup+0x146>
          DFU_ClearStatus(pdev);
 8006466:	f7ff fce3 	bl	8005e30 <DFU_ClearStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800646a:	2400      	movs	r4, #0
          break;
 800646c:	e071      	b.n	8006552 <USBD_DFU_Setup+0x146>
          DFU_GetState(pdev);
 800646e:	f7ff ff43 	bl	80062f8 <DFU_GetState>
  USBD_StatusTypeDef ret = USBD_OK;
 8006472:	2400      	movs	r4, #0
          break;
 8006474:	e06d      	b.n	8006552 <USBD_DFU_Setup+0x146>
          DFU_Abort(pdev);
 8006476:	f7ff fd08 	bl	8005e8a <DFU_Abort>
  USBD_StatusTypeDef ret = USBD_OK;
 800647a:	2400      	movs	r4, #0
          break;
 800647c:	e069      	b.n	8006552 <USBD_DFU_Setup+0x146>
          DFU_Detach(pdev, req);
 800647e:	4631      	mov	r1, r6
 8006480:	f7ff ff86 	bl	8006390 <DFU_Detach>
          break;
 8006484:	e065      	b.n	8006552 <USBD_DFU_Setup+0x146>
          USBD_CtlError(pdev, req);
 8006486:	4631      	mov	r1, r6
 8006488:	f7ff f907 	bl	800569a <USBD_CtlError>
          ret = USBD_FAIL;
 800648c:	2403      	movs	r4, #3
          break;
 800648e:	e060      	b.n	8006552 <USBD_DFU_Setup+0x146>
      switch (req->bRequest)
 8006490:	7877      	ldrb	r7, [r6, #1]
 8006492:	2f0b      	cmp	r7, #11
 8006494:	d854      	bhi.n	8006540 <USBD_DFU_Setup+0x134>
 8006496:	e8df f007 	tbb	[pc, r7]
 800649a:	5c06      	.short	0x5c06
 800649c:	53535353 	.word	0x53535353
 80064a0:	53535317 	.word	0x53535317
 80064a4:	3f2f      	.short	0x3f2f
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064a6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d004      	beq.n	80064ba <USBD_DFU_Setup+0xae>
            USBD_CtlError(pdev, req);
 80064b0:	4631      	mov	r1, r6
 80064b2:	f7ff f8f2 	bl	800569a <USBD_CtlError>
            ret = USBD_FAIL;
 80064b6:	2403      	movs	r4, #3
 80064b8:	e04b      	b.n	8006552 <USBD_DFU_Setup+0x146>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80064ba:	2202      	movs	r2, #2
 80064bc:	f10d 0106 	add.w	r1, sp, #6
 80064c0:	f000 f8c5 	bl	800664e <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80064c4:	463c      	mov	r4, r7
 80064c6:	e044      	b.n	8006552 <USBD_DFU_Setup+0x146>
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 80064c8:	8873      	ldrh	r3, [r6, #2]
 80064ca:	0a1b      	lsrs	r3, r3, #8
 80064cc:	2b21      	cmp	r3, #33	@ 0x21
 80064ce:	d140      	bne.n	8006552 <USBD_DFU_Setup+0x146>
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 80064d0:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 80064d4:	f7ff fd14 	bl	8005f00 <USBD_DFU_GetDfuFuncDesc>
            if (pbuf != NULL)
 80064d8:	4601      	mov	r1, r0
 80064da:	b138      	cbz	r0, 80064ec <USBD_DFU_Setup+0xe0>
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80064dc:	88f2      	ldrh	r2, [r6, #6]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 80064de:	2a09      	cmp	r2, #9
 80064e0:	bf28      	it	cs
 80064e2:	2209      	movcs	r2, #9
 80064e4:	4628      	mov	r0, r5
 80064e6:	f000 f8b2 	bl	800664e <USBD_CtlSendData>
 80064ea:	e032      	b.n	8006552 <USBD_DFU_Setup+0x146>
              USBD_CtlError(pdev, req);
 80064ec:	4631      	mov	r1, r6
 80064ee:	4628      	mov	r0, r5
 80064f0:	f7ff f8d3 	bl	800569a <USBD_CtlError>
              ret = USBD_FAIL;
 80064f4:	2403      	movs	r4, #3
 80064f6:	e02c      	b.n	8006552 <USBD_DFU_Setup+0x146>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064f8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d004      	beq.n	800650c <USBD_DFU_Setup+0x100>
            USBD_CtlError(pdev, req);
 8006502:	4631      	mov	r1, r6
 8006504:	f7ff f8c9 	bl	800569a <USBD_CtlError>
            ret = USBD_FAIL;
 8006508:	2403      	movs	r4, #3
 800650a:	e022      	b.n	8006552 <USBD_DFU_Setup+0x146>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800650c:	2201      	movs	r2, #1
 800650e:	f501 6182 	add.w	r1, r1, #1040	@ 0x410
 8006512:	f000 f89c 	bl	800664e <USBD_CtlSendData>
 8006516:	e01c      	b.n	8006552 <USBD_DFU_Setup+0x146>
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8006518:	78b4      	ldrb	r4, [r6, #2]
 800651a:	b964      	cbnz	r4, 8006536 <USBD_DFU_Setup+0x12a>
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800651c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b03      	cmp	r3, #3
 8006524:	d102      	bne.n	800652c <USBD_DFU_Setup+0x120>
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8006526:	f8c1 4410 	str.w	r4, [r1, #1040]	@ 0x410
 800652a:	e012      	b.n	8006552 <USBD_DFU_Setup+0x146>
              USBD_CtlError(pdev, req);
 800652c:	4631      	mov	r1, r6
 800652e:	f7ff f8b4 	bl	800569a <USBD_CtlError>
              ret = USBD_FAIL;
 8006532:	2403      	movs	r4, #3
 8006534:	e00d      	b.n	8006552 <USBD_DFU_Setup+0x146>
            USBD_CtlError(pdev, req);
 8006536:	4631      	mov	r1, r6
 8006538:	f7ff f8af 	bl	800569a <USBD_CtlError>
            ret = USBD_FAIL;
 800653c:	2403      	movs	r4, #3
 800653e:	e008      	b.n	8006552 <USBD_DFU_Setup+0x146>
          USBD_CtlError(pdev, req);
 8006540:	4631      	mov	r1, r6
 8006542:	f7ff f8aa 	bl	800569a <USBD_CtlError>
          ret = USBD_FAIL;
 8006546:	2403      	movs	r4, #3
          break;
 8006548:	e003      	b.n	8006552 <USBD_DFU_Setup+0x146>
      USBD_CtlError(pdev, req);
 800654a:	4631      	mov	r1, r6
 800654c:	f7ff f8a5 	bl	800569a <USBD_CtlError>
      ret = USBD_FAIL;
 8006550:	2403      	movs	r4, #3
}
 8006552:	4620      	mov	r0, r4
 8006554:	b003      	add	sp, #12
 8006556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8006558:	2403      	movs	r4, #3
 800655a:	e7fa      	b.n	8006552 <USBD_DFU_Setup+0x146>

0800655c <USBD_DFU_DeInit>:
{
 800655c:	b538      	push	{r3, r4, r5, lr}
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800655e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006562:	33b0      	adds	r3, #176	@ 0xb0
 8006564:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006568:	b323      	cbz	r3, 80065b4 <USBD_DFU_DeInit+0x58>
 800656a:	4604      	mov	r4, r0
  hdfu->wblock_num = 0U;
 800656c:	2500      	movs	r5, #0
 800656e:	f8c3 5400 	str.w	r5, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8006572:	f8c3 5404 	str.w	r5, [r3, #1028]	@ 0x404
  hdfu->dev_state = DFU_STATE_IDLE;
 8006576:	2202      	movs	r2, #2
 8006578:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800657c:	f883 5414 	strb.w	r5, [r3, #1044]	@ 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8006580:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006584:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8006588:	33b0      	adds	r3, #176	@ 0xb0
 800658a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006594:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8006598:	33b0      	adds	r3, #176	@ 0xb0
 800659a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800659e:	f000 faf7 	bl	8006b90 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065a2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80065a6:	33b0      	adds	r3, #176	@ 0xb0
 80065a8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = NULL;
 80065ac:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  return (uint8_t)USBD_OK;
 80065b0:	4628      	mov	r0, r5
}
 80065b2:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_EMEM;
 80065b4:	2002      	movs	r0, #2
 80065b6:	e7fc      	b.n	80065b2 <USBD_DFU_DeInit+0x56>

080065b8 <USBD_DFU_Init>:
{
 80065b8:	b510      	push	{r4, lr}
 80065ba:	4604      	mov	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 80065bc:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 80065c0:	f000 fae2 	bl	8006b88 <USBD_static_malloc>
  if (hdfu == NULL)
 80065c4:	b358      	cbz	r0, 800661e <USBD_DFU_Init+0x66>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 80065c6:	f8d4 22d4 	ldr.w	r2, [r4, #724]	@ 0x2d4
 80065ca:	32b0      	adds	r2, #176	@ 0xb0
 80065cc:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80065d0:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  hdfu->alt_setting = 0U;
 80065d4:	2200      	movs	r2, #0
 80065d6:	f8c0 2410 	str.w	r2, [r0, #1040]	@ 0x410
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80065da:	4916      	ldr	r1, [pc, #88]	@ (8006634 <USBD_DFU_Init+0x7c>)
 80065dc:	f8c0 1408 	str.w	r1, [r0, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 80065e0:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
  hdfu->wlength = 0U;
 80065e4:	f8c0 2404 	str.w	r2, [r0, #1028]	@ 0x404
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80065e8:	f880 241d 	strb.w	r2, [r0, #1053]	@ 0x41d
  hdfu->dev_state = DFU_STATE_IDLE;
 80065ec:	2102      	movs	r1, #2
 80065ee:	f880 141c 	strb.w	r1, [r0, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80065f2:	f880 2414 	strb.w	r2, [r0, #1044]	@ 0x414
  hdfu->dev_status[1] = 0U;
 80065f6:	f880 2415 	strb.w	r2, [r0, #1045]	@ 0x415
  hdfu->dev_status[2] = 0U;
 80065fa:	f880 2416 	strb.w	r2, [r0, #1046]	@ 0x416
  hdfu->dev_status[3] = 0U;
 80065fe:	f880 2417 	strb.w	r2, [r0, #1047]	@ 0x417
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8006602:	f880 1418 	strb.w	r1, [r0, #1048]	@ 0x418
  hdfu->dev_status[5] = 0U;
 8006606:	f880 2419 	strb.w	r2, [r0, #1049]	@ 0x419
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 800660a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800660e:	33b0      	adds	r3, #176	@ 0xb0
 8006610:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8006614:	6863      	ldr	r3, [r4, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	4798      	blx	r3
 800661a:	b940      	cbnz	r0, 800662e <USBD_DFU_Init+0x76>
}
 800661c:	bd10      	pop	{r4, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800661e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8006622:	33b0      	adds	r3, #176	@ 0xb0
 8006624:	2200      	movs	r2, #0
 8006626:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 800662a:	2002      	movs	r0, #2
 800662c:	e7f6      	b.n	800661c <USBD_DFU_Init+0x64>
    return (uint8_t)USBD_FAIL;
 800662e:	2003      	movs	r0, #3
 8006630:	e7f4      	b.n	800661c <USBD_DFU_Init+0x64>
 8006632:	bf00      	nop
 8006634:	08040000 	.word	0x08040000

08006638 <USBD_DFU_RegisterMedia>:
  if (fops == NULL)
 8006638:	b139      	cbz	r1, 800664a <USBD_DFU_RegisterMedia+0x12>
  pdev->pUserData[pdev->classId] = fops;
 800663a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800663e:	33b0      	adds	r3, #176	@ 0xb0
 8006640:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006644:	6041      	str	r1, [r0, #4]
  return (uint8_t)USBD_OK;
 8006646:	2000      	movs	r0, #0
 8006648:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800664a:	2003      	movs	r0, #3
}
 800664c:	4770      	bx	lr

0800664e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800664e:	b508      	push	{r3, lr}
 8006650:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006652:	2202      	movs	r2, #2
 8006654:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006658:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800665a:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800665c:	460a      	mov	r2, r1
 800665e:	2100      	movs	r1, #0
 8006660:	f000 fad4 	bl	8006c0c <USBD_LL_Transmit>

  return USBD_OK;
}
 8006664:	2000      	movs	r0, #0
 8006666:	bd08      	pop	{r3, pc}

08006668 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006668:	b508      	push	{r3, lr}
 800666a:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800666c:	460a      	mov	r2, r1
 800666e:	2100      	movs	r1, #0
 8006670:	f000 facc 	bl	8006c0c <USBD_LL_Transmit>

  return USBD_OK;
}
 8006674:	2000      	movs	r0, #0
 8006676:	bd08      	pop	{r3, pc}

08006678 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006678:	b508      	push	{r3, lr}
 800667a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800667c:	2203      	movs	r2, #3
 800667e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006682:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006686:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800668a:	460a      	mov	r2, r1
 800668c:	2100      	movs	r1, #0
 800668e:	f000 fac5 	bl	8006c1c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006692:	2000      	movs	r0, #0
 8006694:	bd08      	pop	{r3, pc}

08006696 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006696:	b508      	push	{r3, lr}
 8006698:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800669a:	460a      	mov	r2, r1
 800669c:	2100      	movs	r1, #0
 800669e:	f000 fabd 	bl	8006c1c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80066a2:	2000      	movs	r0, #0
 80066a4:	bd08      	pop	{r3, pc}

080066a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80066a6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80066a8:	2204      	movs	r2, #4
 80066aa:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80066ae:	2300      	movs	r3, #0
 80066b0:	461a      	mov	r2, r3
 80066b2:	4619      	mov	r1, r3
 80066b4:	f000 faaa 	bl	8006c0c <USBD_LL_Transmit>

  return USBD_OK;
}
 80066b8:	2000      	movs	r0, #0
 80066ba:	bd08      	pop	{r3, pc}

080066bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80066bc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80066be:	2205      	movs	r2, #5
 80066c0:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066c4:	2300      	movs	r3, #0
 80066c6:	461a      	mov	r2, r3
 80066c8:	4619      	mov	r1, r3
 80066ca:	f000 faa7 	bl	8006c1c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80066ce:	2000      	movs	r0, #0
 80066d0:	bd08      	pop	{r3, pc}
	...

080066d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80066d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80066d6:	2201      	movs	r2, #1
 80066d8:	4910      	ldr	r1, [pc, #64]	@ (800671c <MX_USB_DEVICE_Init+0x48>)
 80066da:	4811      	ldr	r0, [pc, #68]	@ (8006720 <MX_USB_DEVICE_Init+0x4c>)
 80066dc:	f7fe fdbf 	bl	800525e <USBD_Init>
 80066e0:	b980      	cbnz	r0, 8006704 <MX_USB_DEVICE_Init+0x30>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_DFU) != USBD_OK)
 80066e2:	4910      	ldr	r1, [pc, #64]	@ (8006724 <MX_USB_DEVICE_Init+0x50>)
 80066e4:	480e      	ldr	r0, [pc, #56]	@ (8006720 <MX_USB_DEVICE_Init+0x4c>)
 80066e6:	f7fe fdd1 	bl	800528c <USBD_RegisterClass>
 80066ea:	b970      	cbnz	r0, 800670a <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceHS, &USBD_DFU_fops_HS) != USBD_OK)
 80066ec:	490e      	ldr	r1, [pc, #56]	@ (8006728 <MX_USB_DEVICE_Init+0x54>)
 80066ee:	480c      	ldr	r0, [pc, #48]	@ (8006720 <MX_USB_DEVICE_Init+0x4c>)
 80066f0:	f7ff ffa2 	bl	8006638 <USBD_DFU_RegisterMedia>
 80066f4:	b960      	cbnz	r0, 8006710 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80066f6:	480a      	ldr	r0, [pc, #40]	@ (8006720 <MX_USB_DEVICE_Init+0x4c>)
 80066f8:	f7fe fde8 	bl	80052cc <USBD_Start>
 80066fc:	b958      	cbnz	r0, 8006716 <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80066fe:	f7fb fc8b 	bl	8002018 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006702:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006704:	f7fa f8ce 	bl	80008a4 <Error_Handler>
 8006708:	e7eb      	b.n	80066e2 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800670a:	f7fa f8cb 	bl	80008a4 <Error_Handler>
 800670e:	e7ed      	b.n	80066ec <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8006710:	f7fa f8c8 	bl	80008a4 <Error_Handler>
 8006714:	e7ef      	b.n	80066f6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8006716:	f7fa f8c5 	bl	80008a4 <Error_Handler>
 800671a:	e7f0      	b.n	80066fe <MX_USB_DEVICE_Init+0x2a>
 800671c:	240000ac 	.word	0x240000ac
 8006720:	24000330 	.word	0x24000330
 8006724:	2400003c 	.word	0x2400003c
 8006728:	240000cc 	.word	0x240000cc

0800672c <USBD_HS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800672c:	2312      	movs	r3, #18
 800672e:	800b      	strh	r3, [r1, #0]
  return USBD_HS_DeviceDesc;
}
 8006730:	4800      	ldr	r0, [pc, #0]	@ (8006734 <USBD_HS_DeviceDescriptor+0x8>)
 8006732:	4770      	bx	lr
 8006734:	24000098 	.word	0x24000098

08006738 <USBD_HS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006738:	2304      	movs	r3, #4
 800673a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800673c:	4800      	ldr	r0, [pc, #0]	@ (8006740 <USBD_HS_LangIDStrDescriptor+0x8>)
 800673e:	4770      	bx	lr
 8006740:	24000094 	.word	0x24000094

08006744 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8006744:	2300      	movs	r3, #0
 8006746:	4293      	cmp	r3, r2
 8006748:	d21e      	bcs.n	8006788 <IntToUnicode+0x44>
{
 800674a:	b500      	push	{lr}
 800674c:	e010      	b.n	8006770 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800674e:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 8006752:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8006756:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8006758:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800675c:	f10c 0c01 	add.w	ip, ip, #1
 8006760:	f04f 0e00 	mov.w	lr, #0
 8006764:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8006768:	3301      	adds	r3, #1
 800676a:	b2db      	uxtb	r3, r3
 800676c:	4293      	cmp	r3, r2
 800676e:	d209      	bcs.n	8006784 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8006770:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8006774:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8006778:	d2e9      	bcs.n	800674e <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800677a:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 800677e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8006782:	e7e8      	b.n	8006756 <IntToUnicode+0x12>
  }
}
 8006784:	f85d fb04 	ldr.w	pc, [sp], #4
 8006788:	4770      	bx	lr
	...

0800678c <Get_SerialNum>:
{
 800678c:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800678e:	4b0b      	ldr	r3, [pc, #44]	@ (80067bc <Get_SerialNum+0x30>)
 8006790:	f8d3 0800 	ldr.w	r0, [r3, #2048]	@ 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006794:	f8d3 4804 	ldr.w	r4, [r3, #2052]	@ 0x804
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006798:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
  if (deviceserial0 != 0)
 800679c:	18c0      	adds	r0, r0, r3
 800679e:	d100      	bne.n	80067a2 <Get_SerialNum+0x16>
}
 80067a0:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80067a2:	4d07      	ldr	r5, [pc, #28]	@ (80067c0 <Get_SerialNum+0x34>)
 80067a4:	2208      	movs	r2, #8
 80067a6:	4629      	mov	r1, r5
 80067a8:	f7ff ffcc 	bl	8006744 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80067ac:	2204      	movs	r2, #4
 80067ae:	f105 0110 	add.w	r1, r5, #16
 80067b2:	4620      	mov	r0, r4
 80067b4:	f7ff ffc6 	bl	8006744 <IntToUnicode>
}
 80067b8:	e7f2      	b.n	80067a0 <Get_SerialNum+0x14>
 80067ba:	bf00      	nop
 80067bc:	1ff1e000 	.word	0x1ff1e000
 80067c0:	2400007a 	.word	0x2400007a

080067c4 <USBD_HS_SerialStrDescriptor>:
{
 80067c4:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80067c6:	231a      	movs	r3, #26
 80067c8:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 80067ca:	f7ff ffdf 	bl	800678c <Get_SerialNum>
}
 80067ce:	4801      	ldr	r0, [pc, #4]	@ (80067d4 <USBD_HS_SerialStrDescriptor+0x10>)
 80067d0:	bd08      	pop	{r3, pc}
 80067d2:	bf00      	nop
 80067d4:	24000078 	.word	0x24000078

080067d8 <USBD_HS_ProductStrDescriptor>:
{
 80067d8:	b508      	push	{r3, lr}
 80067da:	460a      	mov	r2, r1
  if(speed == 0)
 80067dc:	b928      	cbnz	r0, 80067ea <USBD_HS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80067de:	4905      	ldr	r1, [pc, #20]	@ (80067f4 <USBD_HS_ProductStrDescriptor+0x1c>)
 80067e0:	4805      	ldr	r0, [pc, #20]	@ (80067f8 <USBD_HS_ProductStrDescriptor+0x20>)
 80067e2:	f7ff fadf 	bl	8005da4 <USBD_GetString>
}
 80067e6:	4803      	ldr	r0, [pc, #12]	@ (80067f4 <USBD_HS_ProductStrDescriptor+0x1c>)
 80067e8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80067ea:	4902      	ldr	r1, [pc, #8]	@ (80067f4 <USBD_HS_ProductStrDescriptor+0x1c>)
 80067ec:	4802      	ldr	r0, [pc, #8]	@ (80067f8 <USBD_HS_ProductStrDescriptor+0x20>)
 80067ee:	f7ff fad9 	bl	8005da4 <USBD_GetString>
 80067f2:	e7f8      	b.n	80067e6 <USBD_HS_ProductStrDescriptor+0xe>
 80067f4:	2400060c 	.word	0x2400060c
 80067f8:	08007ac8 	.word	0x08007ac8

080067fc <USBD_HS_ManufacturerStrDescriptor>:
{
 80067fc:	b510      	push	{r4, lr}
 80067fe:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006800:	4c03      	ldr	r4, [pc, #12]	@ (8006810 <USBD_HS_ManufacturerStrDescriptor+0x14>)
 8006802:	4621      	mov	r1, r4
 8006804:	4803      	ldr	r0, [pc, #12]	@ (8006814 <USBD_HS_ManufacturerStrDescriptor+0x18>)
 8006806:	f7ff facd 	bl	8005da4 <USBD_GetString>
}
 800680a:	4620      	mov	r0, r4
 800680c:	bd10      	pop	{r4, pc}
 800680e:	bf00      	nop
 8006810:	2400060c 	.word	0x2400060c
 8006814:	08007ae8 	.word	0x08007ae8

08006818 <USBD_HS_ConfigStrDescriptor>:
{
 8006818:	b508      	push	{r3, lr}
 800681a:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800681c:	b928      	cbnz	r0, 800682a <USBD_HS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800681e:	4905      	ldr	r1, [pc, #20]	@ (8006834 <USBD_HS_ConfigStrDescriptor+0x1c>)
 8006820:	4805      	ldr	r0, [pc, #20]	@ (8006838 <USBD_HS_ConfigStrDescriptor+0x20>)
 8006822:	f7ff fabf 	bl	8005da4 <USBD_GetString>
}
 8006826:	4803      	ldr	r0, [pc, #12]	@ (8006834 <USBD_HS_ConfigStrDescriptor+0x1c>)
 8006828:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800682a:	4902      	ldr	r1, [pc, #8]	@ (8006834 <USBD_HS_ConfigStrDescriptor+0x1c>)
 800682c:	4802      	ldr	r0, [pc, #8]	@ (8006838 <USBD_HS_ConfigStrDescriptor+0x20>)
 800682e:	f7ff fab9 	bl	8005da4 <USBD_GetString>
 8006832:	e7f8      	b.n	8006826 <USBD_HS_ConfigStrDescriptor+0xe>
 8006834:	2400060c 	.word	0x2400060c
 8006838:	08007afc 	.word	0x08007afc

0800683c <USBD_HS_InterfaceStrDescriptor>:
{
 800683c:	b508      	push	{r3, lr}
 800683e:	460a      	mov	r2, r1
  if(speed == 0)
 8006840:	b928      	cbnz	r0, 800684e <USBD_HS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8006842:	4905      	ldr	r1, [pc, #20]	@ (8006858 <USBD_HS_InterfaceStrDescriptor+0x1c>)
 8006844:	4805      	ldr	r0, [pc, #20]	@ (800685c <USBD_HS_InterfaceStrDescriptor+0x20>)
 8006846:	f7ff faad 	bl	8005da4 <USBD_GetString>
}
 800684a:	4803      	ldr	r0, [pc, #12]	@ (8006858 <USBD_HS_InterfaceStrDescriptor+0x1c>)
 800684c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800684e:	4902      	ldr	r1, [pc, #8]	@ (8006858 <USBD_HS_InterfaceStrDescriptor+0x1c>)
 8006850:	4802      	ldr	r0, [pc, #8]	@ (800685c <USBD_HS_InterfaceStrDescriptor+0x20>)
 8006852:	f7ff faa7 	bl	8005da4 <USBD_GetString>
 8006856:	e7f8      	b.n	800684a <USBD_HS_InterfaceStrDescriptor+0xe>
 8006858:	2400060c 	.word	0x2400060c
 800685c:	08007b08 	.word	0x08007b08

08006860 <MEM_If_Init_HS>:
uint16_t MEM_If_Init_HS(void)
{
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8006860:	2000      	movs	r0, #0
 8006862:	4770      	bx	lr

08006864 <MEM_If_DeInit_HS>:
uint16_t MEM_If_DeInit_HS(void)
{
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
  /* USER CODE END 7 */
}
 8006864:	2000      	movs	r0, #0
 8006866:	4770      	bx	lr

08006868 <MEM_If_Erase_HS>:
  /* USER CODE BEGIN 8 */
  UNUSED(Add);

  return (USBD_OK);
  /* USER CODE END 8 */
}
 8006868:	2000      	movs	r0, #0
 800686a:	4770      	bx	lr

0800686c <MEM_If_Write_HS>:
  UNUSED(dest);
  UNUSED(Len);

  return (USBD_OK);
  /* USER CODE END 9 */
}
 800686c:	2000      	movs	r0, #0
 800686e:	4770      	bx	lr

08006870 <MEM_If_Read_HS>:
  UNUSED(dest);
  UNUSED(Len);

  return (uint8_t*)(USBD_OK);
  /* USER CODE END 10 */
}
 8006870:	2000      	movs	r0, #0
 8006872:	4770      	bx	lr

08006874 <MEM_If_GetStatus_HS>:

    break;
  }
  return  (USBD_OK);
  /* USER CODE END 11 */
}
 8006874:	2000      	movs	r0, #0
 8006876:	4770      	bx	lr

08006878 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800687a:	b0c1      	sub	sp, #260	@ 0x104
 800687c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800687e:	2100      	movs	r1, #0
 8006880:	913b      	str	r1, [sp, #236]	@ 0xec
 8006882:	913c      	str	r1, [sp, #240]	@ 0xf0
 8006884:	913d      	str	r1, [sp, #244]	@ 0xf4
 8006886:	913e      	str	r1, [sp, #248]	@ 0xf8
 8006888:	913f      	str	r1, [sp, #252]	@ 0xfc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800688a:	22c8      	movs	r2, #200	@ 0xc8
 800688c:	a808      	add	r0, sp, #32
 800688e:	f000 fc27 	bl	80070e0 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8006892:	6822      	ldr	r2, [r4, #0]
 8006894:	4b56      	ldr	r3, [pc, #344]	@ (80069f0 <HAL_PCD_MspInit+0x178>)
 8006896:	429a      	cmp	r2, r3
 8006898:	d001      	beq.n	800689e <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800689a:	b041      	add	sp, #260	@ 0x104
 800689c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800689e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80068a2:	2300      	movs	r3, #0
 80068a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80068a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80068ac:	932b      	str	r3, [sp, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068ae:	a808      	add	r0, sp, #32
 80068b0:	f7fc faf8 	bl	8002ea4 <HAL_RCCEx_PeriphCLKConfig>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	f040 8097 	bne.w	80069e8 <HAL_PCD_MspInit+0x170>
    HAL_PWREx_EnableUSBVoltageDetector();
 80068ba:	f7fb fbad 	bl	8002018 <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068be:	4c4d      	ldr	r4, [pc, #308]	@ (80069f4 <HAL_PCD_MspInit+0x17c>)
 80068c0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80068c4:	f043 0302 	orr.w	r3, r3, #2
 80068c8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80068cc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	9301      	str	r3, [sp, #4]
 80068d6:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80068d8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80068dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068e0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80068e4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80068e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ec:	9302      	str	r3, [sp, #8]
 80068ee:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80068f4:	f043 0304 	orr.w	r3, r3, #4
 80068f8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80068fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	9303      	str	r3, [sp, #12]
 8006906:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006908:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800690c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006910:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8006914:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8006918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800691c:	9304      	str	r3, [sp, #16]
 800691e:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006920:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8006924:	f043 0301 	orr.w	r3, r3, #1
 8006928:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800692c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	9305      	str	r3, [sp, #20]
 8006936:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8006938:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800693c:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693e:	2502      	movs	r5, #2
 8006940:	953c      	str	r5, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006942:	2600      	movs	r6, #0
 8006944:	963d      	str	r6, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006946:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8006948:	270a      	movs	r7, #10
 800694a:	973f      	str	r7, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800694c:	a93b      	add	r1, sp, #236	@ 0xec
 800694e:	482a      	ldr	r0, [pc, #168]	@ (80069f8 <HAL_PCD_MspInit+0x180>)
 8006950:	f7fa fb94 	bl	800107c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8006954:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006958:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800695a:	953c      	str	r5, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800695c:	963d      	str	r6, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800695e:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8006960:	973f      	str	r7, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8006962:	a93b      	add	r1, sp, #236	@ 0xec
 8006964:	4825      	ldr	r0, [pc, #148]	@ (80069fc <HAL_PCD_MspInit+0x184>)
 8006966:	f7fa fb89 	bl	800107c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 800696a:	2301      	movs	r3, #1
 800696c:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800696e:	953c      	str	r5, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006970:	963d      	str	r6, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006972:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8006974:	973f      	str	r7, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8006976:	a93b      	add	r1, sp, #236	@ 0xec
 8006978:	4821      	ldr	r0, [pc, #132]	@ (8006a00 <HAL_PCD_MspInit+0x188>)
 800697a:	f7fa fb7f 	bl	800107c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800697e:	2310      	movs	r3, #16
 8006980:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006982:	953c      	str	r5, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006984:	963d      	str	r6, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006986:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8006988:	973f      	str	r7, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800698a:	a93b      	add	r1, sp, #236	@ 0xec
 800698c:	481d      	ldr	r0, [pc, #116]	@ (8006a04 <HAL_PCD_MspInit+0x18c>)
 800698e:	f7fa fb75 	bl	800107c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8006992:	2328      	movs	r3, #40	@ 0x28
 8006994:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006996:	953c      	str	r5, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006998:	963d      	str	r6, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800699a:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800699c:	973f      	str	r7, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800699e:	a93b      	add	r1, sp, #236	@ 0xec
 80069a0:	4819      	ldr	r0, [pc, #100]	@ (8006a08 <HAL_PCD_MspInit+0x190>)
 80069a2:	f7fa fb6b 	bl	800107c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80069a6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 80069aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80069ae:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 80069b2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 80069b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ba:	9306      	str	r3, [sp, #24]
 80069bc:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80069be:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 80069c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069c6:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 80069ca:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 80069ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80069d2:	9307      	str	r3, [sp, #28]
 80069d4:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80069d6:	4632      	mov	r2, r6
 80069d8:	4631      	mov	r1, r6
 80069da:	204d      	movs	r0, #77	@ 0x4d
 80069dc:	f7fa faaa 	bl	8000f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80069e0:	204d      	movs	r0, #77	@ 0x4d
 80069e2:	f7fa fab7 	bl	8000f54 <HAL_NVIC_EnableIRQ>
}
 80069e6:	e758      	b.n	800689a <HAL_PCD_MspInit+0x22>
      Error_Handler();
 80069e8:	f7f9 ff5c 	bl	80008a4 <Error_Handler>
 80069ec:	e765      	b.n	80068ba <HAL_PCD_MspInit+0x42>
 80069ee:	bf00      	nop
 80069f0:	40040000 	.word	0x40040000
 80069f4:	58024400 	.word	0x58024400
 80069f8:	58020400 	.word	0x58020400
 80069fc:	58022000 	.word	0x58022000
 8006a00:	58020800 	.word	0x58020800
 8006a04:	58021c00 	.word	0x58021c00
 8006a08:	58020000 	.word	0x58020000

08006a0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a0c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006a0e:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8006a12:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006a16:	f7fe fc7c 	bl	8005312 <USBD_LL_SetupStage>
}
 8006a1a:	bd08      	pop	{r3, pc}

08006a1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a1c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a1e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8006a22:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006a26:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8006a2a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006a2e:	f7fe fd42 	bl	80054b6 <USBD_LL_DataOutStage>
}
 8006a32:	bd08      	pop	{r3, pc}

08006a34 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a34:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006a36:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8006a3a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006a3e:	6a1a      	ldr	r2, [r3, #32]
 8006a40:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006a44:	f7fe fd99 	bl	800557a <USBD_LL_DataInStage>
}
 8006a48:	bd08      	pop	{r3, pc}

08006a4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a4a:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a4c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006a50:	f7fe fcdc 	bl	800540c <USBD_LL_SOF>
}
 8006a54:	bd08      	pop	{r3, pc}

08006a56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a56:	b510      	push	{r4, lr}
 8006a58:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006a5a:	79c1      	ldrb	r1, [r0, #7]
 8006a5c:	b111      	cbz	r1, 8006a64 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006a5e:	2902      	cmp	r1, #2
 8006a60:	d109      	bne.n	8006a76 <HAL_PCD_ResetCallback+0x20>
  {
    speed = USBD_SPEED_FULL;
 8006a62:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a64:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8006a68:	f7fe fcb1 	bl	80053ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a6c:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8006a70:	f7fe fc7b 	bl	800536a <USBD_LL_Reset>
}
 8006a74:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006a76:	f7f9 ff15 	bl	80008a4 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	e7f2      	b.n	8006a64 <HAL_PCD_ResetCallback+0xe>
	...

08006a80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a80:	b510      	push	{r4, lr}
 8006a82:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a84:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006a88:	f7fe fca4 	bl	80053d4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006a8c:	6822      	ldr	r2, [r4, #0]
 8006a8e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8006a92:	f043 0301 	orr.w	r3, r3, #1
 8006a96:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a9a:	7ae3      	ldrb	r3, [r4, #11]
 8006a9c:	b123      	cbz	r3, 8006aa8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a9e:	4a03      	ldr	r2, [pc, #12]	@ (8006aac <HAL_PCD_SuspendCallback+0x2c>)
 8006aa0:	6913      	ldr	r3, [r2, #16]
 8006aa2:	f043 0306 	orr.w	r3, r3, #6
 8006aa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006aa8:	bd10      	pop	{r4, pc}
 8006aaa:	bf00      	nop
 8006aac:	e000ed00 	.word	0xe000ed00

08006ab0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ab0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ab2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006ab6:	f7fe fc9c 	bl	80053f2 <USBD_LL_Resume>
}
 8006aba:	bd08      	pop	{r3, pc}

08006abc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006abc:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006abe:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006ac2:	f7fe fccb 	bl	800545c <USBD_LL_IsoOUTIncomplete>
}
 8006ac6:	bd08      	pop	{r3, pc}

08006ac8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ac8:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006aca:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006ace:	f7fe fcae 	bl	800542e <USBD_LL_IsoINIncomplete>
}
 8006ad2:	bd08      	pop	{r3, pc}

08006ad4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ad4:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ad6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006ada:	f7fe fcd6 	bl	800548a <USBD_LL_DevConnected>
}
 8006ade:	bd08      	pop	{r3, pc}

08006ae0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ae0:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ae2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006ae6:	f7fe fcd2 	bl	800548e <USBD_LL_DevDisconnected>
}
 8006aea:	bd08      	pop	{r3, pc}

08006aec <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8006aec:	7803      	ldrb	r3, [r0, #0]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d001      	beq.n	8006af6 <USBD_LL_Init+0xa>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
}
 8006af2:	2000      	movs	r0, #0
 8006af4:	4770      	bx	lr
{
 8006af6:	b510      	push	{r4, lr}
  hpcd_USB_OTG_HS.pData = pdev;
 8006af8:	4b16      	ldr	r3, [pc, #88]	@ (8006b54 <USBD_LL_Init+0x68>)
 8006afa:	f8c3 04e0 	str.w	r0, [r3, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8006afe:	f8c0 32c8 	str.w	r3, [r0, #712]	@ 0x2c8
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8006b02:	4a15      	ldr	r2, [pc, #84]	@ (8006b58 <USBD_LL_Init+0x6c>)
 8006b04:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8006b06:	2209      	movs	r2, #9
 8006b08:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8006b0e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8006b10:	2101      	movs	r1, #1
 8006b12:	7259      	strb	r1, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8006b14:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8006b16:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8006b18:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8006b1a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8006b1c:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8006b1e:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fa fc41 	bl	80013a8 <HAL_PCD_Init>
 8006b26:	b990      	cbnz	r0, 8006b4e <USBD_LL_Init+0x62>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8006b28:	4c0a      	ldr	r4, [pc, #40]	@ (8006b54 <USBD_LL_Init+0x68>)
 8006b2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f7fb fa0e 	bl	8001f50 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8006b34:	2280      	movs	r2, #128	@ 0x80
 8006b36:	2100      	movs	r1, #0
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f7fb f9e3 	bl	8001f04 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8006b3e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8006b42:	2101      	movs	r1, #1
 8006b44:	4620      	mov	r0, r4
 8006b46:	f7fb f9dd 	bl	8001f04 <HAL_PCDEx_SetTxFiFo>
}
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006b4e:	f7f9 fea9 	bl	80008a4 <Error_Handler>
 8006b52:	e7e9      	b.n	8006b28 <USBD_LL_Init+0x3c>
 8006b54:	24000c30 	.word	0x24000c30
 8006b58:	40040000 	.word	0x40040000

08006b5c <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b5c:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 8006b60:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8006b64:	d108      	bne.n	8006b78 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006b66:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006b6a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006b6e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006b72:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 8006b76:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006b78:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006b7c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006b80:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006b84:	7d98      	ldrb	r0, [r3, #22]
 8006b86:	4770      	bx	lr

08006b88 <USBD_static_malloc>:
void *USBD_static_malloc(uint32_t size)
{
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8006b88:	4800      	ldr	r0, [pc, #0]	@ (8006b8c <USBD_static_malloc+0x4>)
 8006b8a:	4770      	bx	lr
 8006b8c:	2400080c 	.word	0x2400080c

08006b90 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{
  UNUSED(p);
}
 8006b90:	4770      	bx	lr

08006b92 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006b92:	2803      	cmp	r0, #3
 8006b94:	d805      	bhi.n	8006ba2 <USBD_Get_USB_Status+0x10>
 8006b96:	e8df f000 	tbb	[pc, r0]
 8006b9a:	0405      	.short	0x0405
 8006b9c:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006b9e:	2001      	movs	r0, #1
    break;
 8006ba0:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8006ba2:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8006ba4:	4770      	bx	lr

08006ba6 <USBD_LL_Start>:
{
 8006ba6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006ba8:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006bac:	f7fa fc7d 	bl	80014aa <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bb0:	f7ff ffef 	bl	8006b92 <USBD_Get_USB_Status>
}
 8006bb4:	bd08      	pop	{r3, pc}

08006bb6 <USBD_LL_Stop>:
{
 8006bb6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8006bb8:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006bbc:	f7fa fc97 	bl	80014ee <HAL_PCD_Stop>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bc0:	f7ff ffe7 	bl	8006b92 <USBD_Get_USB_Status>
}
 8006bc4:	bd08      	pop	{r3, pc}

08006bc6 <USBD_LL_OpenEP>:
{
 8006bc6:	b508      	push	{r3, lr}
 8006bc8:	4694      	mov	ip, r2
 8006bca:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006bcc:	4663      	mov	r3, ip
 8006bce:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006bd2:	f7fa fd70 	bl	80016b6 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bd6:	f7ff ffdc 	bl	8006b92 <USBD_Get_USB_Status>
}
 8006bda:	bd08      	pop	{r3, pc}

08006bdc <USBD_LL_StallEP>:
{
 8006bdc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006bde:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006be2:	f7fa fdf8 	bl	80017d6 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006be6:	f7ff ffd4 	bl	8006b92 <USBD_Get_USB_Status>
}
 8006bea:	bd08      	pop	{r3, pc}

08006bec <USBD_LL_ClearStallEP>:
{
 8006bec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006bee:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006bf2:	f7fa fe33 	bl	800185c <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bf6:	f7ff ffcc 	bl	8006b92 <USBD_Get_USB_Status>
}
 8006bfa:	bd08      	pop	{r3, pc}

08006bfc <USBD_LL_SetUSBAddress>:
{
 8006bfc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006bfe:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006c02:	f7fa fd45 	bl	8001690 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c06:	f7ff ffc4 	bl	8006b92 <USBD_Get_USB_Status>
}
 8006c0a:	bd08      	pop	{r3, pc}

08006c0c <USBD_LL_Transmit>:
{
 8006c0c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c0e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006c12:	f7fa fdbb 	bl	800178c <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c16:	f7ff ffbc 	bl	8006b92 <USBD_Get_USB_Status>
}
 8006c1a:	bd08      	pop	{r3, pc}

08006c1c <USBD_LL_PrepareReceive>:
{
 8006c1c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c1e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8006c22:	f7fa fd8e 	bl	8001742 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c26:	f7ff ffb4 	bl	8006b92 <USBD_Get_USB_Status>
}
 8006c2a:	bd08      	pop	{r3, pc}

08006c2c <sbrk_aligned>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8006c6c <sbrk_aligned+0x40>)
 8006c30:	460c      	mov	r4, r1
 8006c32:	6831      	ldr	r1, [r6, #0]
 8006c34:	4605      	mov	r5, r0
 8006c36:	b911      	cbnz	r1, 8006c3e <sbrk_aligned+0x12>
 8006c38:	f000 fa8e 	bl	8007158 <_sbrk_r>
 8006c3c:	6030      	str	r0, [r6, #0]
 8006c3e:	4621      	mov	r1, r4
 8006c40:	4628      	mov	r0, r5
 8006c42:	f000 fa89 	bl	8007158 <_sbrk_r>
 8006c46:	1c43      	adds	r3, r0, #1
 8006c48:	d103      	bne.n	8006c52 <sbrk_aligned+0x26>
 8006c4a:	f04f 34ff 	mov.w	r4, #4294967295
 8006c4e:	4620      	mov	r0, r4
 8006c50:	bd70      	pop	{r4, r5, r6, pc}
 8006c52:	1cc4      	adds	r4, r0, #3
 8006c54:	f024 0403 	bic.w	r4, r4, #3
 8006c58:	42a0      	cmp	r0, r4
 8006c5a:	d0f8      	beq.n	8006c4e <sbrk_aligned+0x22>
 8006c5c:	1a21      	subs	r1, r4, r0
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 fa7a 	bl	8007158 <_sbrk_r>
 8006c64:	3001      	adds	r0, #1
 8006c66:	d1f2      	bne.n	8006c4e <sbrk_aligned+0x22>
 8006c68:	e7ef      	b.n	8006c4a <sbrk_aligned+0x1e>
 8006c6a:	bf00      	nop
 8006c6c:	24001114 	.word	0x24001114

08006c70 <_malloc_r>:
 8006c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c74:	1ccd      	adds	r5, r1, #3
 8006c76:	f025 0503 	bic.w	r5, r5, #3
 8006c7a:	3508      	adds	r5, #8
 8006c7c:	2d0c      	cmp	r5, #12
 8006c7e:	bf38      	it	cc
 8006c80:	250c      	movcc	r5, #12
 8006c82:	2d00      	cmp	r5, #0
 8006c84:	4606      	mov	r6, r0
 8006c86:	db01      	blt.n	8006c8c <_malloc_r+0x1c>
 8006c88:	42a9      	cmp	r1, r5
 8006c8a:	d904      	bls.n	8006c96 <_malloc_r+0x26>
 8006c8c:	230c      	movs	r3, #12
 8006c8e:	6033      	str	r3, [r6, #0]
 8006c90:	2000      	movs	r0, #0
 8006c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d6c <_malloc_r+0xfc>
 8006c9a:	f000 f869 	bl	8006d70 <__malloc_lock>
 8006c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8006ca2:	461c      	mov	r4, r3
 8006ca4:	bb44      	cbnz	r4, 8006cf8 <_malloc_r+0x88>
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f7ff ffbf 	bl	8006c2c <sbrk_aligned>
 8006cae:	1c43      	adds	r3, r0, #1
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	d158      	bne.n	8006d66 <_malloc_r+0xf6>
 8006cb4:	f8d8 4000 	ldr.w	r4, [r8]
 8006cb8:	4627      	mov	r7, r4
 8006cba:	2f00      	cmp	r7, #0
 8006cbc:	d143      	bne.n	8006d46 <_malloc_r+0xd6>
 8006cbe:	2c00      	cmp	r4, #0
 8006cc0:	d04b      	beq.n	8006d5a <_malloc_r+0xea>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	4639      	mov	r1, r7
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	eb04 0903 	add.w	r9, r4, r3
 8006ccc:	f000 fa44 	bl	8007158 <_sbrk_r>
 8006cd0:	4581      	cmp	r9, r0
 8006cd2:	d142      	bne.n	8006d5a <_malloc_r+0xea>
 8006cd4:	6821      	ldr	r1, [r4, #0]
 8006cd6:	1a6d      	subs	r5, r5, r1
 8006cd8:	4629      	mov	r1, r5
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f7ff ffa6 	bl	8006c2c <sbrk_aligned>
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d03a      	beq.n	8006d5a <_malloc_r+0xea>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	442b      	add	r3, r5
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	f8d8 3000 	ldr.w	r3, [r8]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	bb62      	cbnz	r2, 8006d4c <_malloc_r+0xdc>
 8006cf2:	f8c8 7000 	str.w	r7, [r8]
 8006cf6:	e00f      	b.n	8006d18 <_malloc_r+0xa8>
 8006cf8:	6822      	ldr	r2, [r4, #0]
 8006cfa:	1b52      	subs	r2, r2, r5
 8006cfc:	d420      	bmi.n	8006d40 <_malloc_r+0xd0>
 8006cfe:	2a0b      	cmp	r2, #11
 8006d00:	d917      	bls.n	8006d32 <_malloc_r+0xc2>
 8006d02:	1961      	adds	r1, r4, r5
 8006d04:	42a3      	cmp	r3, r4
 8006d06:	6025      	str	r5, [r4, #0]
 8006d08:	bf18      	it	ne
 8006d0a:	6059      	strne	r1, [r3, #4]
 8006d0c:	6863      	ldr	r3, [r4, #4]
 8006d0e:	bf08      	it	eq
 8006d10:	f8c8 1000 	streq.w	r1, [r8]
 8006d14:	5162      	str	r2, [r4, r5]
 8006d16:	604b      	str	r3, [r1, #4]
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f000 f82f 	bl	8006d7c <__malloc_unlock>
 8006d1e:	f104 000b 	add.w	r0, r4, #11
 8006d22:	1d23      	adds	r3, r4, #4
 8006d24:	f020 0007 	bic.w	r0, r0, #7
 8006d28:	1ac2      	subs	r2, r0, r3
 8006d2a:	bf1c      	itt	ne
 8006d2c:	1a1b      	subne	r3, r3, r0
 8006d2e:	50a3      	strne	r3, [r4, r2]
 8006d30:	e7af      	b.n	8006c92 <_malloc_r+0x22>
 8006d32:	6862      	ldr	r2, [r4, #4]
 8006d34:	42a3      	cmp	r3, r4
 8006d36:	bf0c      	ite	eq
 8006d38:	f8c8 2000 	streq.w	r2, [r8]
 8006d3c:	605a      	strne	r2, [r3, #4]
 8006d3e:	e7eb      	b.n	8006d18 <_malloc_r+0xa8>
 8006d40:	4623      	mov	r3, r4
 8006d42:	6864      	ldr	r4, [r4, #4]
 8006d44:	e7ae      	b.n	8006ca4 <_malloc_r+0x34>
 8006d46:	463c      	mov	r4, r7
 8006d48:	687f      	ldr	r7, [r7, #4]
 8006d4a:	e7b6      	b.n	8006cba <_malloc_r+0x4a>
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	42a3      	cmp	r3, r4
 8006d52:	d1fb      	bne.n	8006d4c <_malloc_r+0xdc>
 8006d54:	2300      	movs	r3, #0
 8006d56:	6053      	str	r3, [r2, #4]
 8006d58:	e7de      	b.n	8006d18 <_malloc_r+0xa8>
 8006d5a:	230c      	movs	r3, #12
 8006d5c:	6033      	str	r3, [r6, #0]
 8006d5e:	4630      	mov	r0, r6
 8006d60:	f000 f80c 	bl	8006d7c <__malloc_unlock>
 8006d64:	e794      	b.n	8006c90 <_malloc_r+0x20>
 8006d66:	6005      	str	r5, [r0, #0]
 8006d68:	e7d6      	b.n	8006d18 <_malloc_r+0xa8>
 8006d6a:	bf00      	nop
 8006d6c:	24001118 	.word	0x24001118

08006d70 <__malloc_lock>:
 8006d70:	4801      	ldr	r0, [pc, #4]	@ (8006d78 <__malloc_lock+0x8>)
 8006d72:	f000 ba3e 	b.w	80071f2 <__retarget_lock_acquire_recursive>
 8006d76:	bf00      	nop
 8006d78:	2400125c 	.word	0x2400125c

08006d7c <__malloc_unlock>:
 8006d7c:	4801      	ldr	r0, [pc, #4]	@ (8006d84 <__malloc_unlock+0x8>)
 8006d7e:	f000 ba39 	b.w	80071f4 <__retarget_lock_release_recursive>
 8006d82:	bf00      	nop
 8006d84:	2400125c 	.word	0x2400125c

08006d88 <std>:
 8006d88:	2300      	movs	r3, #0
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d96:	6083      	str	r3, [r0, #8]
 8006d98:	8181      	strh	r1, [r0, #12]
 8006d9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d9c:	81c2      	strh	r2, [r0, #14]
 8006d9e:	6183      	str	r3, [r0, #24]
 8006da0:	4619      	mov	r1, r3
 8006da2:	2208      	movs	r2, #8
 8006da4:	305c      	adds	r0, #92	@ 0x5c
 8006da6:	f000 f99b 	bl	80070e0 <memset>
 8006daa:	4b0d      	ldr	r3, [pc, #52]	@ (8006de0 <std+0x58>)
 8006dac:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dae:	4b0d      	ldr	r3, [pc, #52]	@ (8006de4 <std+0x5c>)
 8006db0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006db2:	4b0d      	ldr	r3, [pc, #52]	@ (8006de8 <std+0x60>)
 8006db4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006db6:	4b0d      	ldr	r3, [pc, #52]	@ (8006dec <std+0x64>)
 8006db8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dba:	4b0d      	ldr	r3, [pc, #52]	@ (8006df0 <std+0x68>)
 8006dbc:	6224      	str	r4, [r4, #32]
 8006dbe:	429c      	cmp	r4, r3
 8006dc0:	d006      	beq.n	8006dd0 <std+0x48>
 8006dc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006dc6:	4294      	cmp	r4, r2
 8006dc8:	d002      	beq.n	8006dd0 <std+0x48>
 8006dca:	33d0      	adds	r3, #208	@ 0xd0
 8006dcc:	429c      	cmp	r4, r3
 8006dce:	d105      	bne.n	8006ddc <std+0x54>
 8006dd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd8:	f000 ba0a 	b.w	80071f0 <__retarget_lock_init_recursive>
 8006ddc:	bd10      	pop	{r4, pc}
 8006dde:	bf00      	nop
 8006de0:	08006f31 	.word	0x08006f31
 8006de4:	08006f53 	.word	0x08006f53
 8006de8:	08006f8b 	.word	0x08006f8b
 8006dec:	08006faf 	.word	0x08006faf
 8006df0:	2400111c 	.word	0x2400111c

08006df4 <stdio_exit_handler>:
 8006df4:	4a02      	ldr	r2, [pc, #8]	@ (8006e00 <stdio_exit_handler+0xc>)
 8006df6:	4903      	ldr	r1, [pc, #12]	@ (8006e04 <stdio_exit_handler+0x10>)
 8006df8:	4803      	ldr	r0, [pc, #12]	@ (8006e08 <stdio_exit_handler+0x14>)
 8006dfa:	f000 b869 	b.w	8006ed0 <_fwalk_sglue>
 8006dfe:	bf00      	nop
 8006e00:	240000e8 	.word	0x240000e8
 8006e04:	08007931 	.word	0x08007931
 8006e08:	240000f8 	.word	0x240000f8

08006e0c <cleanup_stdio>:
 8006e0c:	6841      	ldr	r1, [r0, #4]
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e40 <cleanup_stdio+0x34>)
 8006e10:	4299      	cmp	r1, r3
 8006e12:	b510      	push	{r4, lr}
 8006e14:	4604      	mov	r4, r0
 8006e16:	d001      	beq.n	8006e1c <cleanup_stdio+0x10>
 8006e18:	f000 fd8a 	bl	8007930 <_fflush_r>
 8006e1c:	68a1      	ldr	r1, [r4, #8]
 8006e1e:	4b09      	ldr	r3, [pc, #36]	@ (8006e44 <cleanup_stdio+0x38>)
 8006e20:	4299      	cmp	r1, r3
 8006e22:	d002      	beq.n	8006e2a <cleanup_stdio+0x1e>
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 fd83 	bl	8007930 <_fflush_r>
 8006e2a:	68e1      	ldr	r1, [r4, #12]
 8006e2c:	4b06      	ldr	r3, [pc, #24]	@ (8006e48 <cleanup_stdio+0x3c>)
 8006e2e:	4299      	cmp	r1, r3
 8006e30:	d004      	beq.n	8006e3c <cleanup_stdio+0x30>
 8006e32:	4620      	mov	r0, r4
 8006e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e38:	f000 bd7a 	b.w	8007930 <_fflush_r>
 8006e3c:	bd10      	pop	{r4, pc}
 8006e3e:	bf00      	nop
 8006e40:	2400111c 	.word	0x2400111c
 8006e44:	24001184 	.word	0x24001184
 8006e48:	240011ec 	.word	0x240011ec

08006e4c <global_stdio_init.part.0>:
 8006e4c:	b510      	push	{r4, lr}
 8006e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e7c <global_stdio_init.part.0+0x30>)
 8006e50:	4c0b      	ldr	r4, [pc, #44]	@ (8006e80 <global_stdio_init.part.0+0x34>)
 8006e52:	4a0c      	ldr	r2, [pc, #48]	@ (8006e84 <global_stdio_init.part.0+0x38>)
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	4620      	mov	r0, r4
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2104      	movs	r1, #4
 8006e5c:	f7ff ff94 	bl	8006d88 <std>
 8006e60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e64:	2201      	movs	r2, #1
 8006e66:	2109      	movs	r1, #9
 8006e68:	f7ff ff8e 	bl	8006d88 <std>
 8006e6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e70:	2202      	movs	r2, #2
 8006e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e76:	2112      	movs	r1, #18
 8006e78:	f7ff bf86 	b.w	8006d88 <std>
 8006e7c:	24001254 	.word	0x24001254
 8006e80:	2400111c 	.word	0x2400111c
 8006e84:	08006df5 	.word	0x08006df5

08006e88 <__sfp_lock_acquire>:
 8006e88:	4801      	ldr	r0, [pc, #4]	@ (8006e90 <__sfp_lock_acquire+0x8>)
 8006e8a:	f000 b9b2 	b.w	80071f2 <__retarget_lock_acquire_recursive>
 8006e8e:	bf00      	nop
 8006e90:	2400125d 	.word	0x2400125d

08006e94 <__sfp_lock_release>:
 8006e94:	4801      	ldr	r0, [pc, #4]	@ (8006e9c <__sfp_lock_release+0x8>)
 8006e96:	f000 b9ad 	b.w	80071f4 <__retarget_lock_release_recursive>
 8006e9a:	bf00      	nop
 8006e9c:	2400125d 	.word	0x2400125d

08006ea0 <__sinit>:
 8006ea0:	b510      	push	{r4, lr}
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	f7ff fff0 	bl	8006e88 <__sfp_lock_acquire>
 8006ea8:	6a23      	ldr	r3, [r4, #32]
 8006eaa:	b11b      	cbz	r3, 8006eb4 <__sinit+0x14>
 8006eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb0:	f7ff bff0 	b.w	8006e94 <__sfp_lock_release>
 8006eb4:	4b04      	ldr	r3, [pc, #16]	@ (8006ec8 <__sinit+0x28>)
 8006eb6:	6223      	str	r3, [r4, #32]
 8006eb8:	4b04      	ldr	r3, [pc, #16]	@ (8006ecc <__sinit+0x2c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1f5      	bne.n	8006eac <__sinit+0xc>
 8006ec0:	f7ff ffc4 	bl	8006e4c <global_stdio_init.part.0>
 8006ec4:	e7f2      	b.n	8006eac <__sinit+0xc>
 8006ec6:	bf00      	nop
 8006ec8:	08006e0d 	.word	0x08006e0d
 8006ecc:	24001254 	.word	0x24001254

08006ed0 <_fwalk_sglue>:
 8006ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed4:	4607      	mov	r7, r0
 8006ed6:	4688      	mov	r8, r1
 8006ed8:	4614      	mov	r4, r2
 8006eda:	2600      	movs	r6, #0
 8006edc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ee0:	f1b9 0901 	subs.w	r9, r9, #1
 8006ee4:	d505      	bpl.n	8006ef2 <_fwalk_sglue+0x22>
 8006ee6:	6824      	ldr	r4, [r4, #0]
 8006ee8:	2c00      	cmp	r4, #0
 8006eea:	d1f7      	bne.n	8006edc <_fwalk_sglue+0xc>
 8006eec:	4630      	mov	r0, r6
 8006eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ef2:	89ab      	ldrh	r3, [r5, #12]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d907      	bls.n	8006f08 <_fwalk_sglue+0x38>
 8006ef8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006efc:	3301      	adds	r3, #1
 8006efe:	d003      	beq.n	8006f08 <_fwalk_sglue+0x38>
 8006f00:	4629      	mov	r1, r5
 8006f02:	4638      	mov	r0, r7
 8006f04:	47c0      	blx	r8
 8006f06:	4306      	orrs	r6, r0
 8006f08:	3568      	adds	r5, #104	@ 0x68
 8006f0a:	e7e9      	b.n	8006ee0 <_fwalk_sglue+0x10>

08006f0c <iprintf>:
 8006f0c:	b40f      	push	{r0, r1, r2, r3}
 8006f0e:	b507      	push	{r0, r1, r2, lr}
 8006f10:	4906      	ldr	r1, [pc, #24]	@ (8006f2c <iprintf+0x20>)
 8006f12:	ab04      	add	r3, sp, #16
 8006f14:	6808      	ldr	r0, [r1, #0]
 8006f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f1a:	6881      	ldr	r1, [r0, #8]
 8006f1c:	9301      	str	r3, [sp, #4]
 8006f1e:	f000 f9df 	bl	80072e0 <_vfiprintf_r>
 8006f22:	b003      	add	sp, #12
 8006f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f28:	b004      	add	sp, #16
 8006f2a:	4770      	bx	lr
 8006f2c:	240000f4 	.word	0x240000f4

08006f30 <__sread>:
 8006f30:	b510      	push	{r4, lr}
 8006f32:	460c      	mov	r4, r1
 8006f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f38:	f000 f8fc 	bl	8007134 <_read_r>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	bfab      	itete	ge
 8006f40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f42:	89a3      	ldrhlt	r3, [r4, #12]
 8006f44:	181b      	addge	r3, r3, r0
 8006f46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f4a:	bfac      	ite	ge
 8006f4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f4e:	81a3      	strhlt	r3, [r4, #12]
 8006f50:	bd10      	pop	{r4, pc}

08006f52 <__swrite>:
 8006f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f56:	461f      	mov	r7, r3
 8006f58:	898b      	ldrh	r3, [r1, #12]
 8006f5a:	05db      	lsls	r3, r3, #23
 8006f5c:	4605      	mov	r5, r0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	4616      	mov	r6, r2
 8006f62:	d505      	bpl.n	8006f70 <__swrite+0x1e>
 8006f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f68:	2302      	movs	r3, #2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f000 f8d0 	bl	8007110 <_lseek_r>
 8006f70:	89a3      	ldrh	r3, [r4, #12]
 8006f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f7a:	81a3      	strh	r3, [r4, #12]
 8006f7c:	4632      	mov	r2, r6
 8006f7e:	463b      	mov	r3, r7
 8006f80:	4628      	mov	r0, r5
 8006f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f86:	f000 b8f7 	b.w	8007178 <_write_r>

08006f8a <__sseek>:
 8006f8a:	b510      	push	{r4, lr}
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f92:	f000 f8bd 	bl	8007110 <_lseek_r>
 8006f96:	1c43      	adds	r3, r0, #1
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	bf15      	itete	ne
 8006f9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006fa2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006fa6:	81a3      	strheq	r3, [r4, #12]
 8006fa8:	bf18      	it	ne
 8006faa:	81a3      	strhne	r3, [r4, #12]
 8006fac:	bd10      	pop	{r4, pc}

08006fae <__sclose>:
 8006fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb2:	f000 b89d 	b.w	80070f0 <_close_r>

08006fb6 <__swbuf_r>:
 8006fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb8:	460e      	mov	r6, r1
 8006fba:	4614      	mov	r4, r2
 8006fbc:	4605      	mov	r5, r0
 8006fbe:	b118      	cbz	r0, 8006fc8 <__swbuf_r+0x12>
 8006fc0:	6a03      	ldr	r3, [r0, #32]
 8006fc2:	b90b      	cbnz	r3, 8006fc8 <__swbuf_r+0x12>
 8006fc4:	f7ff ff6c 	bl	8006ea0 <__sinit>
 8006fc8:	69a3      	ldr	r3, [r4, #24]
 8006fca:	60a3      	str	r3, [r4, #8]
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	071a      	lsls	r2, r3, #28
 8006fd0:	d501      	bpl.n	8006fd6 <__swbuf_r+0x20>
 8006fd2:	6923      	ldr	r3, [r4, #16]
 8006fd4:	b943      	cbnz	r3, 8006fe8 <__swbuf_r+0x32>
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f000 f82b 	bl	8007034 <__swsetup_r>
 8006fde:	b118      	cbz	r0, 8006fe8 <__swbuf_r+0x32>
 8006fe0:	f04f 37ff 	mov.w	r7, #4294967295
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	6922      	ldr	r2, [r4, #16]
 8006fec:	1a98      	subs	r0, r3, r2
 8006fee:	6963      	ldr	r3, [r4, #20]
 8006ff0:	b2f6      	uxtb	r6, r6
 8006ff2:	4283      	cmp	r3, r0
 8006ff4:	4637      	mov	r7, r6
 8006ff6:	dc05      	bgt.n	8007004 <__swbuf_r+0x4e>
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f000 fc98 	bl	8007930 <_fflush_r>
 8007000:	2800      	cmp	r0, #0
 8007002:	d1ed      	bne.n	8006fe0 <__swbuf_r+0x2a>
 8007004:	68a3      	ldr	r3, [r4, #8]
 8007006:	3b01      	subs	r3, #1
 8007008:	60a3      	str	r3, [r4, #8]
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	6022      	str	r2, [r4, #0]
 8007010:	701e      	strb	r6, [r3, #0]
 8007012:	6962      	ldr	r2, [r4, #20]
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	429a      	cmp	r2, r3
 8007018:	d004      	beq.n	8007024 <__swbuf_r+0x6e>
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	07db      	lsls	r3, r3, #31
 800701e:	d5e1      	bpl.n	8006fe4 <__swbuf_r+0x2e>
 8007020:	2e0a      	cmp	r6, #10
 8007022:	d1df      	bne.n	8006fe4 <__swbuf_r+0x2e>
 8007024:	4621      	mov	r1, r4
 8007026:	4628      	mov	r0, r5
 8007028:	f000 fc82 	bl	8007930 <_fflush_r>
 800702c:	2800      	cmp	r0, #0
 800702e:	d0d9      	beq.n	8006fe4 <__swbuf_r+0x2e>
 8007030:	e7d6      	b.n	8006fe0 <__swbuf_r+0x2a>
	...

08007034 <__swsetup_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4b29      	ldr	r3, [pc, #164]	@ (80070dc <__swsetup_r+0xa8>)
 8007038:	4605      	mov	r5, r0
 800703a:	6818      	ldr	r0, [r3, #0]
 800703c:	460c      	mov	r4, r1
 800703e:	b118      	cbz	r0, 8007048 <__swsetup_r+0x14>
 8007040:	6a03      	ldr	r3, [r0, #32]
 8007042:	b90b      	cbnz	r3, 8007048 <__swsetup_r+0x14>
 8007044:	f7ff ff2c 	bl	8006ea0 <__sinit>
 8007048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800704c:	0719      	lsls	r1, r3, #28
 800704e:	d422      	bmi.n	8007096 <__swsetup_r+0x62>
 8007050:	06da      	lsls	r2, r3, #27
 8007052:	d407      	bmi.n	8007064 <__swsetup_r+0x30>
 8007054:	2209      	movs	r2, #9
 8007056:	602a      	str	r2, [r5, #0]
 8007058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800705c:	81a3      	strh	r3, [r4, #12]
 800705e:	f04f 30ff 	mov.w	r0, #4294967295
 8007062:	e033      	b.n	80070cc <__swsetup_r+0x98>
 8007064:	0758      	lsls	r0, r3, #29
 8007066:	d512      	bpl.n	800708e <__swsetup_r+0x5a>
 8007068:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800706a:	b141      	cbz	r1, 800707e <__swsetup_r+0x4a>
 800706c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007070:	4299      	cmp	r1, r3
 8007072:	d002      	beq.n	800707a <__swsetup_r+0x46>
 8007074:	4628      	mov	r0, r5
 8007076:	f000 f8bf 	bl	80071f8 <_free_r>
 800707a:	2300      	movs	r3, #0
 800707c:	6363      	str	r3, [r4, #52]	@ 0x34
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	2300      	movs	r3, #0
 8007088:	6063      	str	r3, [r4, #4]
 800708a:	6923      	ldr	r3, [r4, #16]
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	f043 0308 	orr.w	r3, r3, #8
 8007094:	81a3      	strh	r3, [r4, #12]
 8007096:	6923      	ldr	r3, [r4, #16]
 8007098:	b94b      	cbnz	r3, 80070ae <__swsetup_r+0x7a>
 800709a:	89a3      	ldrh	r3, [r4, #12]
 800709c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80070a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070a4:	d003      	beq.n	80070ae <__swsetup_r+0x7a>
 80070a6:	4621      	mov	r1, r4
 80070a8:	4628      	mov	r0, r5
 80070aa:	f000 fc8f 	bl	80079cc <__smakebuf_r>
 80070ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070b2:	f013 0201 	ands.w	r2, r3, #1
 80070b6:	d00a      	beq.n	80070ce <__swsetup_r+0x9a>
 80070b8:	2200      	movs	r2, #0
 80070ba:	60a2      	str	r2, [r4, #8]
 80070bc:	6962      	ldr	r2, [r4, #20]
 80070be:	4252      	negs	r2, r2
 80070c0:	61a2      	str	r2, [r4, #24]
 80070c2:	6922      	ldr	r2, [r4, #16]
 80070c4:	b942      	cbnz	r2, 80070d8 <__swsetup_r+0xa4>
 80070c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070ca:	d1c5      	bne.n	8007058 <__swsetup_r+0x24>
 80070cc:	bd38      	pop	{r3, r4, r5, pc}
 80070ce:	0799      	lsls	r1, r3, #30
 80070d0:	bf58      	it	pl
 80070d2:	6962      	ldrpl	r2, [r4, #20]
 80070d4:	60a2      	str	r2, [r4, #8]
 80070d6:	e7f4      	b.n	80070c2 <__swsetup_r+0x8e>
 80070d8:	2000      	movs	r0, #0
 80070da:	e7f7      	b.n	80070cc <__swsetup_r+0x98>
 80070dc:	240000f4 	.word	0x240000f4

080070e0 <memset>:
 80070e0:	4402      	add	r2, r0
 80070e2:	4603      	mov	r3, r0
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d100      	bne.n	80070ea <memset+0xa>
 80070e8:	4770      	bx	lr
 80070ea:	f803 1b01 	strb.w	r1, [r3], #1
 80070ee:	e7f9      	b.n	80070e4 <memset+0x4>

080070f0 <_close_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4d06      	ldr	r5, [pc, #24]	@ (800710c <_close_r+0x1c>)
 80070f4:	2300      	movs	r3, #0
 80070f6:	4604      	mov	r4, r0
 80070f8:	4608      	mov	r0, r1
 80070fa:	602b      	str	r3, [r5, #0]
 80070fc:	f7f9 fdea 	bl	8000cd4 <_close>
 8007100:	1c43      	adds	r3, r0, #1
 8007102:	d102      	bne.n	800710a <_close_r+0x1a>
 8007104:	682b      	ldr	r3, [r5, #0]
 8007106:	b103      	cbz	r3, 800710a <_close_r+0x1a>
 8007108:	6023      	str	r3, [r4, #0]
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	24001258 	.word	0x24001258

08007110 <_lseek_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4d07      	ldr	r5, [pc, #28]	@ (8007130 <_lseek_r+0x20>)
 8007114:	4604      	mov	r4, r0
 8007116:	4608      	mov	r0, r1
 8007118:	4611      	mov	r1, r2
 800711a:	2200      	movs	r2, #0
 800711c:	602a      	str	r2, [r5, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	f7f9 fde2 	bl	8000ce8 <_lseek>
 8007124:	1c43      	adds	r3, r0, #1
 8007126:	d102      	bne.n	800712e <_lseek_r+0x1e>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	b103      	cbz	r3, 800712e <_lseek_r+0x1e>
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	24001258 	.word	0x24001258

08007134 <_read_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4d07      	ldr	r5, [pc, #28]	@ (8007154 <_read_r+0x20>)
 8007138:	4604      	mov	r4, r0
 800713a:	4608      	mov	r0, r1
 800713c:	4611      	mov	r1, r2
 800713e:	2200      	movs	r2, #0
 8007140:	602a      	str	r2, [r5, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	f7f9 fda8 	bl	8000c98 <_read>
 8007148:	1c43      	adds	r3, r0, #1
 800714a:	d102      	bne.n	8007152 <_read_r+0x1e>
 800714c:	682b      	ldr	r3, [r5, #0]
 800714e:	b103      	cbz	r3, 8007152 <_read_r+0x1e>
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	bd38      	pop	{r3, r4, r5, pc}
 8007154:	24001258 	.word	0x24001258

08007158 <_sbrk_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4d06      	ldr	r5, [pc, #24]	@ (8007174 <_sbrk_r+0x1c>)
 800715c:	2300      	movs	r3, #0
 800715e:	4604      	mov	r4, r0
 8007160:	4608      	mov	r0, r1
 8007162:	602b      	str	r3, [r5, #0]
 8007164:	f7f9 fdc2 	bl	8000cec <_sbrk>
 8007168:	1c43      	adds	r3, r0, #1
 800716a:	d102      	bne.n	8007172 <_sbrk_r+0x1a>
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	b103      	cbz	r3, 8007172 <_sbrk_r+0x1a>
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	bd38      	pop	{r3, r4, r5, pc}
 8007174:	24001258 	.word	0x24001258

08007178 <_write_r>:
 8007178:	b538      	push	{r3, r4, r5, lr}
 800717a:	4d07      	ldr	r5, [pc, #28]	@ (8007198 <_write_r+0x20>)
 800717c:	4604      	mov	r4, r0
 800717e:	4608      	mov	r0, r1
 8007180:	4611      	mov	r1, r2
 8007182:	2200      	movs	r2, #0
 8007184:	602a      	str	r2, [r5, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	f7f9 fd96 	bl	8000cb8 <_write>
 800718c:	1c43      	adds	r3, r0, #1
 800718e:	d102      	bne.n	8007196 <_write_r+0x1e>
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	b103      	cbz	r3, 8007196 <_write_r+0x1e>
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	bd38      	pop	{r3, r4, r5, pc}
 8007198:	24001258 	.word	0x24001258

0800719c <__errno>:
 800719c:	4b01      	ldr	r3, [pc, #4]	@ (80071a4 <__errno+0x8>)
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	240000f4 	.word	0x240000f4

080071a8 <__libc_init_array>:
 80071a8:	b570      	push	{r4, r5, r6, lr}
 80071aa:	4d0d      	ldr	r5, [pc, #52]	@ (80071e0 <__libc_init_array+0x38>)
 80071ac:	4c0d      	ldr	r4, [pc, #52]	@ (80071e4 <__libc_init_array+0x3c>)
 80071ae:	1b64      	subs	r4, r4, r5
 80071b0:	10a4      	asrs	r4, r4, #2
 80071b2:	2600      	movs	r6, #0
 80071b4:	42a6      	cmp	r6, r4
 80071b6:	d109      	bne.n	80071cc <__libc_init_array+0x24>
 80071b8:	4d0b      	ldr	r5, [pc, #44]	@ (80071e8 <__libc_init_array+0x40>)
 80071ba:	4c0c      	ldr	r4, [pc, #48]	@ (80071ec <__libc_init_array+0x44>)
 80071bc:	f000 fc64 	bl	8007a88 <_init>
 80071c0:	1b64      	subs	r4, r4, r5
 80071c2:	10a4      	asrs	r4, r4, #2
 80071c4:	2600      	movs	r6, #0
 80071c6:	42a6      	cmp	r6, r4
 80071c8:	d105      	bne.n	80071d6 <__libc_init_array+0x2e>
 80071ca:	bd70      	pop	{r4, r5, r6, pc}
 80071cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d0:	4798      	blx	r3
 80071d2:	3601      	adds	r6, #1
 80071d4:	e7ee      	b.n	80071b4 <__libc_init_array+0xc>
 80071d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071da:	4798      	blx	r3
 80071dc:	3601      	adds	r6, #1
 80071de:	e7f2      	b.n	80071c6 <__libc_init_array+0x1e>
 80071e0:	08007bdc 	.word	0x08007bdc
 80071e4:	08007bdc 	.word	0x08007bdc
 80071e8:	08007bdc 	.word	0x08007bdc
 80071ec:	08007be0 	.word	0x08007be0

080071f0 <__retarget_lock_init_recursive>:
 80071f0:	4770      	bx	lr

080071f2 <__retarget_lock_acquire_recursive>:
 80071f2:	4770      	bx	lr

080071f4 <__retarget_lock_release_recursive>:
 80071f4:	4770      	bx	lr
	...

080071f8 <_free_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4605      	mov	r5, r0
 80071fc:	2900      	cmp	r1, #0
 80071fe:	d041      	beq.n	8007284 <_free_r+0x8c>
 8007200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007204:	1f0c      	subs	r4, r1, #4
 8007206:	2b00      	cmp	r3, #0
 8007208:	bfb8      	it	lt
 800720a:	18e4      	addlt	r4, r4, r3
 800720c:	f7ff fdb0 	bl	8006d70 <__malloc_lock>
 8007210:	4a1d      	ldr	r2, [pc, #116]	@ (8007288 <_free_r+0x90>)
 8007212:	6813      	ldr	r3, [r2, #0]
 8007214:	b933      	cbnz	r3, 8007224 <_free_r+0x2c>
 8007216:	6063      	str	r3, [r4, #4]
 8007218:	6014      	str	r4, [r2, #0]
 800721a:	4628      	mov	r0, r5
 800721c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007220:	f7ff bdac 	b.w	8006d7c <__malloc_unlock>
 8007224:	42a3      	cmp	r3, r4
 8007226:	d908      	bls.n	800723a <_free_r+0x42>
 8007228:	6820      	ldr	r0, [r4, #0]
 800722a:	1821      	adds	r1, r4, r0
 800722c:	428b      	cmp	r3, r1
 800722e:	bf01      	itttt	eq
 8007230:	6819      	ldreq	r1, [r3, #0]
 8007232:	685b      	ldreq	r3, [r3, #4]
 8007234:	1809      	addeq	r1, r1, r0
 8007236:	6021      	streq	r1, [r4, #0]
 8007238:	e7ed      	b.n	8007216 <_free_r+0x1e>
 800723a:	461a      	mov	r2, r3
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	b10b      	cbz	r3, 8007244 <_free_r+0x4c>
 8007240:	42a3      	cmp	r3, r4
 8007242:	d9fa      	bls.n	800723a <_free_r+0x42>
 8007244:	6811      	ldr	r1, [r2, #0]
 8007246:	1850      	adds	r0, r2, r1
 8007248:	42a0      	cmp	r0, r4
 800724a:	d10b      	bne.n	8007264 <_free_r+0x6c>
 800724c:	6820      	ldr	r0, [r4, #0]
 800724e:	4401      	add	r1, r0
 8007250:	1850      	adds	r0, r2, r1
 8007252:	4283      	cmp	r3, r0
 8007254:	6011      	str	r1, [r2, #0]
 8007256:	d1e0      	bne.n	800721a <_free_r+0x22>
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	6053      	str	r3, [r2, #4]
 800725e:	4408      	add	r0, r1
 8007260:	6010      	str	r0, [r2, #0]
 8007262:	e7da      	b.n	800721a <_free_r+0x22>
 8007264:	d902      	bls.n	800726c <_free_r+0x74>
 8007266:	230c      	movs	r3, #12
 8007268:	602b      	str	r3, [r5, #0]
 800726a:	e7d6      	b.n	800721a <_free_r+0x22>
 800726c:	6820      	ldr	r0, [r4, #0]
 800726e:	1821      	adds	r1, r4, r0
 8007270:	428b      	cmp	r3, r1
 8007272:	bf04      	itt	eq
 8007274:	6819      	ldreq	r1, [r3, #0]
 8007276:	685b      	ldreq	r3, [r3, #4]
 8007278:	6063      	str	r3, [r4, #4]
 800727a:	bf04      	itt	eq
 800727c:	1809      	addeq	r1, r1, r0
 800727e:	6021      	streq	r1, [r4, #0]
 8007280:	6054      	str	r4, [r2, #4]
 8007282:	e7ca      	b.n	800721a <_free_r+0x22>
 8007284:	bd38      	pop	{r3, r4, r5, pc}
 8007286:	bf00      	nop
 8007288:	24001118 	.word	0x24001118

0800728c <__sfputc_r>:
 800728c:	6893      	ldr	r3, [r2, #8]
 800728e:	3b01      	subs	r3, #1
 8007290:	2b00      	cmp	r3, #0
 8007292:	b410      	push	{r4}
 8007294:	6093      	str	r3, [r2, #8]
 8007296:	da08      	bge.n	80072aa <__sfputc_r+0x1e>
 8007298:	6994      	ldr	r4, [r2, #24]
 800729a:	42a3      	cmp	r3, r4
 800729c:	db01      	blt.n	80072a2 <__sfputc_r+0x16>
 800729e:	290a      	cmp	r1, #10
 80072a0:	d103      	bne.n	80072aa <__sfputc_r+0x1e>
 80072a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072a6:	f7ff be86 	b.w	8006fb6 <__swbuf_r>
 80072aa:	6813      	ldr	r3, [r2, #0]
 80072ac:	1c58      	adds	r0, r3, #1
 80072ae:	6010      	str	r0, [r2, #0]
 80072b0:	7019      	strb	r1, [r3, #0]
 80072b2:	4608      	mov	r0, r1
 80072b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <__sfputs_r>:
 80072ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072bc:	4606      	mov	r6, r0
 80072be:	460f      	mov	r7, r1
 80072c0:	4614      	mov	r4, r2
 80072c2:	18d5      	adds	r5, r2, r3
 80072c4:	42ac      	cmp	r4, r5
 80072c6:	d101      	bne.n	80072cc <__sfputs_r+0x12>
 80072c8:	2000      	movs	r0, #0
 80072ca:	e007      	b.n	80072dc <__sfputs_r+0x22>
 80072cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d0:	463a      	mov	r2, r7
 80072d2:	4630      	mov	r0, r6
 80072d4:	f7ff ffda 	bl	800728c <__sfputc_r>
 80072d8:	1c43      	adds	r3, r0, #1
 80072da:	d1f3      	bne.n	80072c4 <__sfputs_r+0xa>
 80072dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072e0 <_vfiprintf_r>:
 80072e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e4:	460d      	mov	r5, r1
 80072e6:	b09d      	sub	sp, #116	@ 0x74
 80072e8:	4614      	mov	r4, r2
 80072ea:	4698      	mov	r8, r3
 80072ec:	4606      	mov	r6, r0
 80072ee:	b118      	cbz	r0, 80072f8 <_vfiprintf_r+0x18>
 80072f0:	6a03      	ldr	r3, [r0, #32]
 80072f2:	b90b      	cbnz	r3, 80072f8 <_vfiprintf_r+0x18>
 80072f4:	f7ff fdd4 	bl	8006ea0 <__sinit>
 80072f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072fa:	07d9      	lsls	r1, r3, #31
 80072fc:	d405      	bmi.n	800730a <_vfiprintf_r+0x2a>
 80072fe:	89ab      	ldrh	r3, [r5, #12]
 8007300:	059a      	lsls	r2, r3, #22
 8007302:	d402      	bmi.n	800730a <_vfiprintf_r+0x2a>
 8007304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007306:	f7ff ff74 	bl	80071f2 <__retarget_lock_acquire_recursive>
 800730a:	89ab      	ldrh	r3, [r5, #12]
 800730c:	071b      	lsls	r3, r3, #28
 800730e:	d501      	bpl.n	8007314 <_vfiprintf_r+0x34>
 8007310:	692b      	ldr	r3, [r5, #16]
 8007312:	b99b      	cbnz	r3, 800733c <_vfiprintf_r+0x5c>
 8007314:	4629      	mov	r1, r5
 8007316:	4630      	mov	r0, r6
 8007318:	f7ff fe8c 	bl	8007034 <__swsetup_r>
 800731c:	b170      	cbz	r0, 800733c <_vfiprintf_r+0x5c>
 800731e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007320:	07dc      	lsls	r4, r3, #31
 8007322:	d504      	bpl.n	800732e <_vfiprintf_r+0x4e>
 8007324:	f04f 30ff 	mov.w	r0, #4294967295
 8007328:	b01d      	add	sp, #116	@ 0x74
 800732a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800732e:	89ab      	ldrh	r3, [r5, #12]
 8007330:	0598      	lsls	r0, r3, #22
 8007332:	d4f7      	bmi.n	8007324 <_vfiprintf_r+0x44>
 8007334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007336:	f7ff ff5d 	bl	80071f4 <__retarget_lock_release_recursive>
 800733a:	e7f3      	b.n	8007324 <_vfiprintf_r+0x44>
 800733c:	2300      	movs	r3, #0
 800733e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007340:	2320      	movs	r3, #32
 8007342:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007346:	f8cd 800c 	str.w	r8, [sp, #12]
 800734a:	2330      	movs	r3, #48	@ 0x30
 800734c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80074fc <_vfiprintf_r+0x21c>
 8007350:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007354:	f04f 0901 	mov.w	r9, #1
 8007358:	4623      	mov	r3, r4
 800735a:	469a      	mov	sl, r3
 800735c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007360:	b10a      	cbz	r2, 8007366 <_vfiprintf_r+0x86>
 8007362:	2a25      	cmp	r2, #37	@ 0x25
 8007364:	d1f9      	bne.n	800735a <_vfiprintf_r+0x7a>
 8007366:	ebba 0b04 	subs.w	fp, sl, r4
 800736a:	d00b      	beq.n	8007384 <_vfiprintf_r+0xa4>
 800736c:	465b      	mov	r3, fp
 800736e:	4622      	mov	r2, r4
 8007370:	4629      	mov	r1, r5
 8007372:	4630      	mov	r0, r6
 8007374:	f7ff ffa1 	bl	80072ba <__sfputs_r>
 8007378:	3001      	adds	r0, #1
 800737a:	f000 80a7 	beq.w	80074cc <_vfiprintf_r+0x1ec>
 800737e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007380:	445a      	add	r2, fp
 8007382:	9209      	str	r2, [sp, #36]	@ 0x24
 8007384:	f89a 3000 	ldrb.w	r3, [sl]
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 809f 	beq.w	80074cc <_vfiprintf_r+0x1ec>
 800738e:	2300      	movs	r3, #0
 8007390:	f04f 32ff 	mov.w	r2, #4294967295
 8007394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007398:	f10a 0a01 	add.w	sl, sl, #1
 800739c:	9304      	str	r3, [sp, #16]
 800739e:	9307      	str	r3, [sp, #28]
 80073a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80073a6:	4654      	mov	r4, sl
 80073a8:	2205      	movs	r2, #5
 80073aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ae:	4853      	ldr	r0, [pc, #332]	@ (80074fc <_vfiprintf_r+0x21c>)
 80073b0:	f7f8 ff96 	bl	80002e0 <memchr>
 80073b4:	9a04      	ldr	r2, [sp, #16]
 80073b6:	b9d8      	cbnz	r0, 80073f0 <_vfiprintf_r+0x110>
 80073b8:	06d1      	lsls	r1, r2, #27
 80073ba:	bf44      	itt	mi
 80073bc:	2320      	movmi	r3, #32
 80073be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073c2:	0713      	lsls	r3, r2, #28
 80073c4:	bf44      	itt	mi
 80073c6:	232b      	movmi	r3, #43	@ 0x2b
 80073c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073cc:	f89a 3000 	ldrb.w	r3, [sl]
 80073d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80073d2:	d015      	beq.n	8007400 <_vfiprintf_r+0x120>
 80073d4:	9a07      	ldr	r2, [sp, #28]
 80073d6:	4654      	mov	r4, sl
 80073d8:	2000      	movs	r0, #0
 80073da:	f04f 0c0a 	mov.w	ip, #10
 80073de:	4621      	mov	r1, r4
 80073e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073e4:	3b30      	subs	r3, #48	@ 0x30
 80073e6:	2b09      	cmp	r3, #9
 80073e8:	d94b      	bls.n	8007482 <_vfiprintf_r+0x1a2>
 80073ea:	b1b0      	cbz	r0, 800741a <_vfiprintf_r+0x13a>
 80073ec:	9207      	str	r2, [sp, #28]
 80073ee:	e014      	b.n	800741a <_vfiprintf_r+0x13a>
 80073f0:	eba0 0308 	sub.w	r3, r0, r8
 80073f4:	fa09 f303 	lsl.w	r3, r9, r3
 80073f8:	4313      	orrs	r3, r2
 80073fa:	9304      	str	r3, [sp, #16]
 80073fc:	46a2      	mov	sl, r4
 80073fe:	e7d2      	b.n	80073a6 <_vfiprintf_r+0xc6>
 8007400:	9b03      	ldr	r3, [sp, #12]
 8007402:	1d19      	adds	r1, r3, #4
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	9103      	str	r1, [sp, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	bfbb      	ittet	lt
 800740c:	425b      	neglt	r3, r3
 800740e:	f042 0202 	orrlt.w	r2, r2, #2
 8007412:	9307      	strge	r3, [sp, #28]
 8007414:	9307      	strlt	r3, [sp, #28]
 8007416:	bfb8      	it	lt
 8007418:	9204      	strlt	r2, [sp, #16]
 800741a:	7823      	ldrb	r3, [r4, #0]
 800741c:	2b2e      	cmp	r3, #46	@ 0x2e
 800741e:	d10a      	bne.n	8007436 <_vfiprintf_r+0x156>
 8007420:	7863      	ldrb	r3, [r4, #1]
 8007422:	2b2a      	cmp	r3, #42	@ 0x2a
 8007424:	d132      	bne.n	800748c <_vfiprintf_r+0x1ac>
 8007426:	9b03      	ldr	r3, [sp, #12]
 8007428:	1d1a      	adds	r2, r3, #4
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	9203      	str	r2, [sp, #12]
 800742e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007432:	3402      	adds	r4, #2
 8007434:	9305      	str	r3, [sp, #20]
 8007436:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800750c <_vfiprintf_r+0x22c>
 800743a:	7821      	ldrb	r1, [r4, #0]
 800743c:	2203      	movs	r2, #3
 800743e:	4650      	mov	r0, sl
 8007440:	f7f8 ff4e 	bl	80002e0 <memchr>
 8007444:	b138      	cbz	r0, 8007456 <_vfiprintf_r+0x176>
 8007446:	9b04      	ldr	r3, [sp, #16]
 8007448:	eba0 000a 	sub.w	r0, r0, sl
 800744c:	2240      	movs	r2, #64	@ 0x40
 800744e:	4082      	lsls	r2, r0
 8007450:	4313      	orrs	r3, r2
 8007452:	3401      	adds	r4, #1
 8007454:	9304      	str	r3, [sp, #16]
 8007456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800745a:	4829      	ldr	r0, [pc, #164]	@ (8007500 <_vfiprintf_r+0x220>)
 800745c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007460:	2206      	movs	r2, #6
 8007462:	f7f8 ff3d 	bl	80002e0 <memchr>
 8007466:	2800      	cmp	r0, #0
 8007468:	d03f      	beq.n	80074ea <_vfiprintf_r+0x20a>
 800746a:	4b26      	ldr	r3, [pc, #152]	@ (8007504 <_vfiprintf_r+0x224>)
 800746c:	bb1b      	cbnz	r3, 80074b6 <_vfiprintf_r+0x1d6>
 800746e:	9b03      	ldr	r3, [sp, #12]
 8007470:	3307      	adds	r3, #7
 8007472:	f023 0307 	bic.w	r3, r3, #7
 8007476:	3308      	adds	r3, #8
 8007478:	9303      	str	r3, [sp, #12]
 800747a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800747c:	443b      	add	r3, r7
 800747e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007480:	e76a      	b.n	8007358 <_vfiprintf_r+0x78>
 8007482:	fb0c 3202 	mla	r2, ip, r2, r3
 8007486:	460c      	mov	r4, r1
 8007488:	2001      	movs	r0, #1
 800748a:	e7a8      	b.n	80073de <_vfiprintf_r+0xfe>
 800748c:	2300      	movs	r3, #0
 800748e:	3401      	adds	r4, #1
 8007490:	9305      	str	r3, [sp, #20]
 8007492:	4619      	mov	r1, r3
 8007494:	f04f 0c0a 	mov.w	ip, #10
 8007498:	4620      	mov	r0, r4
 800749a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800749e:	3a30      	subs	r2, #48	@ 0x30
 80074a0:	2a09      	cmp	r2, #9
 80074a2:	d903      	bls.n	80074ac <_vfiprintf_r+0x1cc>
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d0c6      	beq.n	8007436 <_vfiprintf_r+0x156>
 80074a8:	9105      	str	r1, [sp, #20]
 80074aa:	e7c4      	b.n	8007436 <_vfiprintf_r+0x156>
 80074ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80074b0:	4604      	mov	r4, r0
 80074b2:	2301      	movs	r3, #1
 80074b4:	e7f0      	b.n	8007498 <_vfiprintf_r+0x1b8>
 80074b6:	ab03      	add	r3, sp, #12
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	462a      	mov	r2, r5
 80074bc:	4b12      	ldr	r3, [pc, #72]	@ (8007508 <_vfiprintf_r+0x228>)
 80074be:	a904      	add	r1, sp, #16
 80074c0:	4630      	mov	r0, r6
 80074c2:	f3af 8000 	nop.w
 80074c6:	4607      	mov	r7, r0
 80074c8:	1c78      	adds	r0, r7, #1
 80074ca:	d1d6      	bne.n	800747a <_vfiprintf_r+0x19a>
 80074cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074ce:	07d9      	lsls	r1, r3, #31
 80074d0:	d405      	bmi.n	80074de <_vfiprintf_r+0x1fe>
 80074d2:	89ab      	ldrh	r3, [r5, #12]
 80074d4:	059a      	lsls	r2, r3, #22
 80074d6:	d402      	bmi.n	80074de <_vfiprintf_r+0x1fe>
 80074d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074da:	f7ff fe8b 	bl	80071f4 <__retarget_lock_release_recursive>
 80074de:	89ab      	ldrh	r3, [r5, #12]
 80074e0:	065b      	lsls	r3, r3, #25
 80074e2:	f53f af1f 	bmi.w	8007324 <_vfiprintf_r+0x44>
 80074e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074e8:	e71e      	b.n	8007328 <_vfiprintf_r+0x48>
 80074ea:	ab03      	add	r3, sp, #12
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	462a      	mov	r2, r5
 80074f0:	4b05      	ldr	r3, [pc, #20]	@ (8007508 <_vfiprintf_r+0x228>)
 80074f2:	a904      	add	r1, sp, #16
 80074f4:	4630      	mov	r0, r6
 80074f6:	f000 f879 	bl	80075ec <_printf_i>
 80074fa:	e7e4      	b.n	80074c6 <_vfiprintf_r+0x1e6>
 80074fc:	08007ba0 	.word	0x08007ba0
 8007500:	08007baa 	.word	0x08007baa
 8007504:	00000000 	.word	0x00000000
 8007508:	080072bb 	.word	0x080072bb
 800750c:	08007ba6 	.word	0x08007ba6

08007510 <_printf_common>:
 8007510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007514:	4616      	mov	r6, r2
 8007516:	4698      	mov	r8, r3
 8007518:	688a      	ldr	r2, [r1, #8]
 800751a:	690b      	ldr	r3, [r1, #16]
 800751c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007520:	4293      	cmp	r3, r2
 8007522:	bfb8      	it	lt
 8007524:	4613      	movlt	r3, r2
 8007526:	6033      	str	r3, [r6, #0]
 8007528:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800752c:	4607      	mov	r7, r0
 800752e:	460c      	mov	r4, r1
 8007530:	b10a      	cbz	r2, 8007536 <_printf_common+0x26>
 8007532:	3301      	adds	r3, #1
 8007534:	6033      	str	r3, [r6, #0]
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	0699      	lsls	r1, r3, #26
 800753a:	bf42      	ittt	mi
 800753c:	6833      	ldrmi	r3, [r6, #0]
 800753e:	3302      	addmi	r3, #2
 8007540:	6033      	strmi	r3, [r6, #0]
 8007542:	6825      	ldr	r5, [r4, #0]
 8007544:	f015 0506 	ands.w	r5, r5, #6
 8007548:	d106      	bne.n	8007558 <_printf_common+0x48>
 800754a:	f104 0a19 	add.w	sl, r4, #25
 800754e:	68e3      	ldr	r3, [r4, #12]
 8007550:	6832      	ldr	r2, [r6, #0]
 8007552:	1a9b      	subs	r3, r3, r2
 8007554:	42ab      	cmp	r3, r5
 8007556:	dc26      	bgt.n	80075a6 <_printf_common+0x96>
 8007558:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800755c:	6822      	ldr	r2, [r4, #0]
 800755e:	3b00      	subs	r3, #0
 8007560:	bf18      	it	ne
 8007562:	2301      	movne	r3, #1
 8007564:	0692      	lsls	r2, r2, #26
 8007566:	d42b      	bmi.n	80075c0 <_printf_common+0xb0>
 8007568:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800756c:	4641      	mov	r1, r8
 800756e:	4638      	mov	r0, r7
 8007570:	47c8      	blx	r9
 8007572:	3001      	adds	r0, #1
 8007574:	d01e      	beq.n	80075b4 <_printf_common+0xa4>
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	6922      	ldr	r2, [r4, #16]
 800757a:	f003 0306 	and.w	r3, r3, #6
 800757e:	2b04      	cmp	r3, #4
 8007580:	bf02      	ittt	eq
 8007582:	68e5      	ldreq	r5, [r4, #12]
 8007584:	6833      	ldreq	r3, [r6, #0]
 8007586:	1aed      	subeq	r5, r5, r3
 8007588:	68a3      	ldr	r3, [r4, #8]
 800758a:	bf0c      	ite	eq
 800758c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007590:	2500      	movne	r5, #0
 8007592:	4293      	cmp	r3, r2
 8007594:	bfc4      	itt	gt
 8007596:	1a9b      	subgt	r3, r3, r2
 8007598:	18ed      	addgt	r5, r5, r3
 800759a:	2600      	movs	r6, #0
 800759c:	341a      	adds	r4, #26
 800759e:	42b5      	cmp	r5, r6
 80075a0:	d11a      	bne.n	80075d8 <_printf_common+0xc8>
 80075a2:	2000      	movs	r0, #0
 80075a4:	e008      	b.n	80075b8 <_printf_common+0xa8>
 80075a6:	2301      	movs	r3, #1
 80075a8:	4652      	mov	r2, sl
 80075aa:	4641      	mov	r1, r8
 80075ac:	4638      	mov	r0, r7
 80075ae:	47c8      	blx	r9
 80075b0:	3001      	adds	r0, #1
 80075b2:	d103      	bne.n	80075bc <_printf_common+0xac>
 80075b4:	f04f 30ff 	mov.w	r0, #4294967295
 80075b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075bc:	3501      	adds	r5, #1
 80075be:	e7c6      	b.n	800754e <_printf_common+0x3e>
 80075c0:	18e1      	adds	r1, r4, r3
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	2030      	movs	r0, #48	@ 0x30
 80075c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075ca:	4422      	add	r2, r4
 80075cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075d4:	3302      	adds	r3, #2
 80075d6:	e7c7      	b.n	8007568 <_printf_common+0x58>
 80075d8:	2301      	movs	r3, #1
 80075da:	4622      	mov	r2, r4
 80075dc:	4641      	mov	r1, r8
 80075de:	4638      	mov	r0, r7
 80075e0:	47c8      	blx	r9
 80075e2:	3001      	adds	r0, #1
 80075e4:	d0e6      	beq.n	80075b4 <_printf_common+0xa4>
 80075e6:	3601      	adds	r6, #1
 80075e8:	e7d9      	b.n	800759e <_printf_common+0x8e>
	...

080075ec <_printf_i>:
 80075ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075f0:	7e0f      	ldrb	r7, [r1, #24]
 80075f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075f4:	2f78      	cmp	r7, #120	@ 0x78
 80075f6:	4691      	mov	r9, r2
 80075f8:	4680      	mov	r8, r0
 80075fa:	460c      	mov	r4, r1
 80075fc:	469a      	mov	sl, r3
 80075fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007602:	d807      	bhi.n	8007614 <_printf_i+0x28>
 8007604:	2f62      	cmp	r7, #98	@ 0x62
 8007606:	d80a      	bhi.n	800761e <_printf_i+0x32>
 8007608:	2f00      	cmp	r7, #0
 800760a:	f000 80d1 	beq.w	80077b0 <_printf_i+0x1c4>
 800760e:	2f58      	cmp	r7, #88	@ 0x58
 8007610:	f000 80b8 	beq.w	8007784 <_printf_i+0x198>
 8007614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007618:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800761c:	e03a      	b.n	8007694 <_printf_i+0xa8>
 800761e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007622:	2b15      	cmp	r3, #21
 8007624:	d8f6      	bhi.n	8007614 <_printf_i+0x28>
 8007626:	a101      	add	r1, pc, #4	@ (adr r1, 800762c <_printf_i+0x40>)
 8007628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800762c:	08007685 	.word	0x08007685
 8007630:	08007699 	.word	0x08007699
 8007634:	08007615 	.word	0x08007615
 8007638:	08007615 	.word	0x08007615
 800763c:	08007615 	.word	0x08007615
 8007640:	08007615 	.word	0x08007615
 8007644:	08007699 	.word	0x08007699
 8007648:	08007615 	.word	0x08007615
 800764c:	08007615 	.word	0x08007615
 8007650:	08007615 	.word	0x08007615
 8007654:	08007615 	.word	0x08007615
 8007658:	08007797 	.word	0x08007797
 800765c:	080076c3 	.word	0x080076c3
 8007660:	08007751 	.word	0x08007751
 8007664:	08007615 	.word	0x08007615
 8007668:	08007615 	.word	0x08007615
 800766c:	080077b9 	.word	0x080077b9
 8007670:	08007615 	.word	0x08007615
 8007674:	080076c3 	.word	0x080076c3
 8007678:	08007615 	.word	0x08007615
 800767c:	08007615 	.word	0x08007615
 8007680:	08007759 	.word	0x08007759
 8007684:	6833      	ldr	r3, [r6, #0]
 8007686:	1d1a      	adds	r2, r3, #4
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6032      	str	r2, [r6, #0]
 800768c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007690:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007694:	2301      	movs	r3, #1
 8007696:	e09c      	b.n	80077d2 <_printf_i+0x1e6>
 8007698:	6833      	ldr	r3, [r6, #0]
 800769a:	6820      	ldr	r0, [r4, #0]
 800769c:	1d19      	adds	r1, r3, #4
 800769e:	6031      	str	r1, [r6, #0]
 80076a0:	0606      	lsls	r6, r0, #24
 80076a2:	d501      	bpl.n	80076a8 <_printf_i+0xbc>
 80076a4:	681d      	ldr	r5, [r3, #0]
 80076a6:	e003      	b.n	80076b0 <_printf_i+0xc4>
 80076a8:	0645      	lsls	r5, r0, #25
 80076aa:	d5fb      	bpl.n	80076a4 <_printf_i+0xb8>
 80076ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076b0:	2d00      	cmp	r5, #0
 80076b2:	da03      	bge.n	80076bc <_printf_i+0xd0>
 80076b4:	232d      	movs	r3, #45	@ 0x2d
 80076b6:	426d      	negs	r5, r5
 80076b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076bc:	4858      	ldr	r0, [pc, #352]	@ (8007820 <_printf_i+0x234>)
 80076be:	230a      	movs	r3, #10
 80076c0:	e011      	b.n	80076e6 <_printf_i+0xfa>
 80076c2:	6821      	ldr	r1, [r4, #0]
 80076c4:	6833      	ldr	r3, [r6, #0]
 80076c6:	0608      	lsls	r0, r1, #24
 80076c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80076cc:	d402      	bmi.n	80076d4 <_printf_i+0xe8>
 80076ce:	0649      	lsls	r1, r1, #25
 80076d0:	bf48      	it	mi
 80076d2:	b2ad      	uxthmi	r5, r5
 80076d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80076d6:	4852      	ldr	r0, [pc, #328]	@ (8007820 <_printf_i+0x234>)
 80076d8:	6033      	str	r3, [r6, #0]
 80076da:	bf14      	ite	ne
 80076dc:	230a      	movne	r3, #10
 80076de:	2308      	moveq	r3, #8
 80076e0:	2100      	movs	r1, #0
 80076e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076e6:	6866      	ldr	r6, [r4, #4]
 80076e8:	60a6      	str	r6, [r4, #8]
 80076ea:	2e00      	cmp	r6, #0
 80076ec:	db05      	blt.n	80076fa <_printf_i+0x10e>
 80076ee:	6821      	ldr	r1, [r4, #0]
 80076f0:	432e      	orrs	r6, r5
 80076f2:	f021 0104 	bic.w	r1, r1, #4
 80076f6:	6021      	str	r1, [r4, #0]
 80076f8:	d04b      	beq.n	8007792 <_printf_i+0x1a6>
 80076fa:	4616      	mov	r6, r2
 80076fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007700:	fb03 5711 	mls	r7, r3, r1, r5
 8007704:	5dc7      	ldrb	r7, [r0, r7]
 8007706:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800770a:	462f      	mov	r7, r5
 800770c:	42bb      	cmp	r3, r7
 800770e:	460d      	mov	r5, r1
 8007710:	d9f4      	bls.n	80076fc <_printf_i+0x110>
 8007712:	2b08      	cmp	r3, #8
 8007714:	d10b      	bne.n	800772e <_printf_i+0x142>
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	07df      	lsls	r7, r3, #31
 800771a:	d508      	bpl.n	800772e <_printf_i+0x142>
 800771c:	6923      	ldr	r3, [r4, #16]
 800771e:	6861      	ldr	r1, [r4, #4]
 8007720:	4299      	cmp	r1, r3
 8007722:	bfde      	ittt	le
 8007724:	2330      	movle	r3, #48	@ 0x30
 8007726:	f806 3c01 	strble.w	r3, [r6, #-1]
 800772a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800772e:	1b92      	subs	r2, r2, r6
 8007730:	6122      	str	r2, [r4, #16]
 8007732:	f8cd a000 	str.w	sl, [sp]
 8007736:	464b      	mov	r3, r9
 8007738:	aa03      	add	r2, sp, #12
 800773a:	4621      	mov	r1, r4
 800773c:	4640      	mov	r0, r8
 800773e:	f7ff fee7 	bl	8007510 <_printf_common>
 8007742:	3001      	adds	r0, #1
 8007744:	d14a      	bne.n	80077dc <_printf_i+0x1f0>
 8007746:	f04f 30ff 	mov.w	r0, #4294967295
 800774a:	b004      	add	sp, #16
 800774c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	f043 0320 	orr.w	r3, r3, #32
 8007756:	6023      	str	r3, [r4, #0]
 8007758:	4832      	ldr	r0, [pc, #200]	@ (8007824 <_printf_i+0x238>)
 800775a:	2778      	movs	r7, #120	@ 0x78
 800775c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	6831      	ldr	r1, [r6, #0]
 8007764:	061f      	lsls	r7, r3, #24
 8007766:	f851 5b04 	ldr.w	r5, [r1], #4
 800776a:	d402      	bmi.n	8007772 <_printf_i+0x186>
 800776c:	065f      	lsls	r7, r3, #25
 800776e:	bf48      	it	mi
 8007770:	b2ad      	uxthmi	r5, r5
 8007772:	6031      	str	r1, [r6, #0]
 8007774:	07d9      	lsls	r1, r3, #31
 8007776:	bf44      	itt	mi
 8007778:	f043 0320 	orrmi.w	r3, r3, #32
 800777c:	6023      	strmi	r3, [r4, #0]
 800777e:	b11d      	cbz	r5, 8007788 <_printf_i+0x19c>
 8007780:	2310      	movs	r3, #16
 8007782:	e7ad      	b.n	80076e0 <_printf_i+0xf4>
 8007784:	4826      	ldr	r0, [pc, #152]	@ (8007820 <_printf_i+0x234>)
 8007786:	e7e9      	b.n	800775c <_printf_i+0x170>
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	f023 0320 	bic.w	r3, r3, #32
 800778e:	6023      	str	r3, [r4, #0]
 8007790:	e7f6      	b.n	8007780 <_printf_i+0x194>
 8007792:	4616      	mov	r6, r2
 8007794:	e7bd      	b.n	8007712 <_printf_i+0x126>
 8007796:	6833      	ldr	r3, [r6, #0]
 8007798:	6825      	ldr	r5, [r4, #0]
 800779a:	6961      	ldr	r1, [r4, #20]
 800779c:	1d18      	adds	r0, r3, #4
 800779e:	6030      	str	r0, [r6, #0]
 80077a0:	062e      	lsls	r6, r5, #24
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	d501      	bpl.n	80077aa <_printf_i+0x1be>
 80077a6:	6019      	str	r1, [r3, #0]
 80077a8:	e002      	b.n	80077b0 <_printf_i+0x1c4>
 80077aa:	0668      	lsls	r0, r5, #25
 80077ac:	d5fb      	bpl.n	80077a6 <_printf_i+0x1ba>
 80077ae:	8019      	strh	r1, [r3, #0]
 80077b0:	2300      	movs	r3, #0
 80077b2:	6123      	str	r3, [r4, #16]
 80077b4:	4616      	mov	r6, r2
 80077b6:	e7bc      	b.n	8007732 <_printf_i+0x146>
 80077b8:	6833      	ldr	r3, [r6, #0]
 80077ba:	1d1a      	adds	r2, r3, #4
 80077bc:	6032      	str	r2, [r6, #0]
 80077be:	681e      	ldr	r6, [r3, #0]
 80077c0:	6862      	ldr	r2, [r4, #4]
 80077c2:	2100      	movs	r1, #0
 80077c4:	4630      	mov	r0, r6
 80077c6:	f7f8 fd8b 	bl	80002e0 <memchr>
 80077ca:	b108      	cbz	r0, 80077d0 <_printf_i+0x1e4>
 80077cc:	1b80      	subs	r0, r0, r6
 80077ce:	6060      	str	r0, [r4, #4]
 80077d0:	6863      	ldr	r3, [r4, #4]
 80077d2:	6123      	str	r3, [r4, #16]
 80077d4:	2300      	movs	r3, #0
 80077d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077da:	e7aa      	b.n	8007732 <_printf_i+0x146>
 80077dc:	6923      	ldr	r3, [r4, #16]
 80077de:	4632      	mov	r2, r6
 80077e0:	4649      	mov	r1, r9
 80077e2:	4640      	mov	r0, r8
 80077e4:	47d0      	blx	sl
 80077e6:	3001      	adds	r0, #1
 80077e8:	d0ad      	beq.n	8007746 <_printf_i+0x15a>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	079b      	lsls	r3, r3, #30
 80077ee:	d413      	bmi.n	8007818 <_printf_i+0x22c>
 80077f0:	68e0      	ldr	r0, [r4, #12]
 80077f2:	9b03      	ldr	r3, [sp, #12]
 80077f4:	4298      	cmp	r0, r3
 80077f6:	bfb8      	it	lt
 80077f8:	4618      	movlt	r0, r3
 80077fa:	e7a6      	b.n	800774a <_printf_i+0x15e>
 80077fc:	2301      	movs	r3, #1
 80077fe:	4632      	mov	r2, r6
 8007800:	4649      	mov	r1, r9
 8007802:	4640      	mov	r0, r8
 8007804:	47d0      	blx	sl
 8007806:	3001      	adds	r0, #1
 8007808:	d09d      	beq.n	8007746 <_printf_i+0x15a>
 800780a:	3501      	adds	r5, #1
 800780c:	68e3      	ldr	r3, [r4, #12]
 800780e:	9903      	ldr	r1, [sp, #12]
 8007810:	1a5b      	subs	r3, r3, r1
 8007812:	42ab      	cmp	r3, r5
 8007814:	dcf2      	bgt.n	80077fc <_printf_i+0x210>
 8007816:	e7eb      	b.n	80077f0 <_printf_i+0x204>
 8007818:	2500      	movs	r5, #0
 800781a:	f104 0619 	add.w	r6, r4, #25
 800781e:	e7f5      	b.n	800780c <_printf_i+0x220>
 8007820:	08007bb1 	.word	0x08007bb1
 8007824:	08007bc2 	.word	0x08007bc2

08007828 <__sflush_r>:
 8007828:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800782c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007830:	0716      	lsls	r6, r2, #28
 8007832:	4605      	mov	r5, r0
 8007834:	460c      	mov	r4, r1
 8007836:	d454      	bmi.n	80078e2 <__sflush_r+0xba>
 8007838:	684b      	ldr	r3, [r1, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	dc02      	bgt.n	8007844 <__sflush_r+0x1c>
 800783e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007840:	2b00      	cmp	r3, #0
 8007842:	dd48      	ble.n	80078d6 <__sflush_r+0xae>
 8007844:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007846:	2e00      	cmp	r6, #0
 8007848:	d045      	beq.n	80078d6 <__sflush_r+0xae>
 800784a:	2300      	movs	r3, #0
 800784c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007850:	682f      	ldr	r7, [r5, #0]
 8007852:	6a21      	ldr	r1, [r4, #32]
 8007854:	602b      	str	r3, [r5, #0]
 8007856:	d030      	beq.n	80078ba <__sflush_r+0x92>
 8007858:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	0759      	lsls	r1, r3, #29
 800785e:	d505      	bpl.n	800786c <__sflush_r+0x44>
 8007860:	6863      	ldr	r3, [r4, #4]
 8007862:	1ad2      	subs	r2, r2, r3
 8007864:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007866:	b10b      	cbz	r3, 800786c <__sflush_r+0x44>
 8007868:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800786a:	1ad2      	subs	r2, r2, r3
 800786c:	2300      	movs	r3, #0
 800786e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007870:	6a21      	ldr	r1, [r4, #32]
 8007872:	4628      	mov	r0, r5
 8007874:	47b0      	blx	r6
 8007876:	1c43      	adds	r3, r0, #1
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	d106      	bne.n	800788a <__sflush_r+0x62>
 800787c:	6829      	ldr	r1, [r5, #0]
 800787e:	291d      	cmp	r1, #29
 8007880:	d82b      	bhi.n	80078da <__sflush_r+0xb2>
 8007882:	4a2a      	ldr	r2, [pc, #168]	@ (800792c <__sflush_r+0x104>)
 8007884:	40ca      	lsrs	r2, r1
 8007886:	07d6      	lsls	r6, r2, #31
 8007888:	d527      	bpl.n	80078da <__sflush_r+0xb2>
 800788a:	2200      	movs	r2, #0
 800788c:	6062      	str	r2, [r4, #4]
 800788e:	04d9      	lsls	r1, r3, #19
 8007890:	6922      	ldr	r2, [r4, #16]
 8007892:	6022      	str	r2, [r4, #0]
 8007894:	d504      	bpl.n	80078a0 <__sflush_r+0x78>
 8007896:	1c42      	adds	r2, r0, #1
 8007898:	d101      	bne.n	800789e <__sflush_r+0x76>
 800789a:	682b      	ldr	r3, [r5, #0]
 800789c:	b903      	cbnz	r3, 80078a0 <__sflush_r+0x78>
 800789e:	6560      	str	r0, [r4, #84]	@ 0x54
 80078a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078a2:	602f      	str	r7, [r5, #0]
 80078a4:	b1b9      	cbz	r1, 80078d6 <__sflush_r+0xae>
 80078a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078aa:	4299      	cmp	r1, r3
 80078ac:	d002      	beq.n	80078b4 <__sflush_r+0x8c>
 80078ae:	4628      	mov	r0, r5
 80078b0:	f7ff fca2 	bl	80071f8 <_free_r>
 80078b4:	2300      	movs	r3, #0
 80078b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80078b8:	e00d      	b.n	80078d6 <__sflush_r+0xae>
 80078ba:	2301      	movs	r3, #1
 80078bc:	4628      	mov	r0, r5
 80078be:	47b0      	blx	r6
 80078c0:	4602      	mov	r2, r0
 80078c2:	1c50      	adds	r0, r2, #1
 80078c4:	d1c9      	bne.n	800785a <__sflush_r+0x32>
 80078c6:	682b      	ldr	r3, [r5, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0c6      	beq.n	800785a <__sflush_r+0x32>
 80078cc:	2b1d      	cmp	r3, #29
 80078ce:	d001      	beq.n	80078d4 <__sflush_r+0xac>
 80078d0:	2b16      	cmp	r3, #22
 80078d2:	d11e      	bne.n	8007912 <__sflush_r+0xea>
 80078d4:	602f      	str	r7, [r5, #0]
 80078d6:	2000      	movs	r0, #0
 80078d8:	e022      	b.n	8007920 <__sflush_r+0xf8>
 80078da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078de:	b21b      	sxth	r3, r3
 80078e0:	e01b      	b.n	800791a <__sflush_r+0xf2>
 80078e2:	690f      	ldr	r7, [r1, #16]
 80078e4:	2f00      	cmp	r7, #0
 80078e6:	d0f6      	beq.n	80078d6 <__sflush_r+0xae>
 80078e8:	0793      	lsls	r3, r2, #30
 80078ea:	680e      	ldr	r6, [r1, #0]
 80078ec:	bf08      	it	eq
 80078ee:	694b      	ldreq	r3, [r1, #20]
 80078f0:	600f      	str	r7, [r1, #0]
 80078f2:	bf18      	it	ne
 80078f4:	2300      	movne	r3, #0
 80078f6:	eba6 0807 	sub.w	r8, r6, r7
 80078fa:	608b      	str	r3, [r1, #8]
 80078fc:	f1b8 0f00 	cmp.w	r8, #0
 8007900:	dde9      	ble.n	80078d6 <__sflush_r+0xae>
 8007902:	6a21      	ldr	r1, [r4, #32]
 8007904:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007906:	4643      	mov	r3, r8
 8007908:	463a      	mov	r2, r7
 800790a:	4628      	mov	r0, r5
 800790c:	47b0      	blx	r6
 800790e:	2800      	cmp	r0, #0
 8007910:	dc08      	bgt.n	8007924 <__sflush_r+0xfc>
 8007912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800791a:	81a3      	strh	r3, [r4, #12]
 800791c:	f04f 30ff 	mov.w	r0, #4294967295
 8007920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007924:	4407      	add	r7, r0
 8007926:	eba8 0800 	sub.w	r8, r8, r0
 800792a:	e7e7      	b.n	80078fc <__sflush_r+0xd4>
 800792c:	20400001 	.word	0x20400001

08007930 <_fflush_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	690b      	ldr	r3, [r1, #16]
 8007934:	4605      	mov	r5, r0
 8007936:	460c      	mov	r4, r1
 8007938:	b913      	cbnz	r3, 8007940 <_fflush_r+0x10>
 800793a:	2500      	movs	r5, #0
 800793c:	4628      	mov	r0, r5
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	b118      	cbz	r0, 800794a <_fflush_r+0x1a>
 8007942:	6a03      	ldr	r3, [r0, #32]
 8007944:	b90b      	cbnz	r3, 800794a <_fflush_r+0x1a>
 8007946:	f7ff faab 	bl	8006ea0 <__sinit>
 800794a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0f3      	beq.n	800793a <_fflush_r+0xa>
 8007952:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007954:	07d0      	lsls	r0, r2, #31
 8007956:	d404      	bmi.n	8007962 <_fflush_r+0x32>
 8007958:	0599      	lsls	r1, r3, #22
 800795a:	d402      	bmi.n	8007962 <_fflush_r+0x32>
 800795c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800795e:	f7ff fc48 	bl	80071f2 <__retarget_lock_acquire_recursive>
 8007962:	4628      	mov	r0, r5
 8007964:	4621      	mov	r1, r4
 8007966:	f7ff ff5f 	bl	8007828 <__sflush_r>
 800796a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800796c:	07da      	lsls	r2, r3, #31
 800796e:	4605      	mov	r5, r0
 8007970:	d4e4      	bmi.n	800793c <_fflush_r+0xc>
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	059b      	lsls	r3, r3, #22
 8007976:	d4e1      	bmi.n	800793c <_fflush_r+0xc>
 8007978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800797a:	f7ff fc3b 	bl	80071f4 <__retarget_lock_release_recursive>
 800797e:	e7dd      	b.n	800793c <_fflush_r+0xc>

08007980 <__swhatbuf_r>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	460c      	mov	r4, r1
 8007984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007988:	2900      	cmp	r1, #0
 800798a:	b096      	sub	sp, #88	@ 0x58
 800798c:	4615      	mov	r5, r2
 800798e:	461e      	mov	r6, r3
 8007990:	da0d      	bge.n	80079ae <__swhatbuf_r+0x2e>
 8007992:	89a3      	ldrh	r3, [r4, #12]
 8007994:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007998:	f04f 0100 	mov.w	r1, #0
 800799c:	bf14      	ite	ne
 800799e:	2340      	movne	r3, #64	@ 0x40
 80079a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079a4:	2000      	movs	r0, #0
 80079a6:	6031      	str	r1, [r6, #0]
 80079a8:	602b      	str	r3, [r5, #0]
 80079aa:	b016      	add	sp, #88	@ 0x58
 80079ac:	bd70      	pop	{r4, r5, r6, pc}
 80079ae:	466a      	mov	r2, sp
 80079b0:	f000 f848 	bl	8007a44 <_fstat_r>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	dbec      	blt.n	8007992 <__swhatbuf_r+0x12>
 80079b8:	9901      	ldr	r1, [sp, #4]
 80079ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079c2:	4259      	negs	r1, r3
 80079c4:	4159      	adcs	r1, r3
 80079c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079ca:	e7eb      	b.n	80079a4 <__swhatbuf_r+0x24>

080079cc <__smakebuf_r>:
 80079cc:	898b      	ldrh	r3, [r1, #12]
 80079ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079d0:	079d      	lsls	r5, r3, #30
 80079d2:	4606      	mov	r6, r0
 80079d4:	460c      	mov	r4, r1
 80079d6:	d507      	bpl.n	80079e8 <__smakebuf_r+0x1c>
 80079d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079dc:	6023      	str	r3, [r4, #0]
 80079de:	6123      	str	r3, [r4, #16]
 80079e0:	2301      	movs	r3, #1
 80079e2:	6163      	str	r3, [r4, #20]
 80079e4:	b003      	add	sp, #12
 80079e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079e8:	ab01      	add	r3, sp, #4
 80079ea:	466a      	mov	r2, sp
 80079ec:	f7ff ffc8 	bl	8007980 <__swhatbuf_r>
 80079f0:	9f00      	ldr	r7, [sp, #0]
 80079f2:	4605      	mov	r5, r0
 80079f4:	4639      	mov	r1, r7
 80079f6:	4630      	mov	r0, r6
 80079f8:	f7ff f93a 	bl	8006c70 <_malloc_r>
 80079fc:	b948      	cbnz	r0, 8007a12 <__smakebuf_r+0x46>
 80079fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a02:	059a      	lsls	r2, r3, #22
 8007a04:	d4ee      	bmi.n	80079e4 <__smakebuf_r+0x18>
 8007a06:	f023 0303 	bic.w	r3, r3, #3
 8007a0a:	f043 0302 	orr.w	r3, r3, #2
 8007a0e:	81a3      	strh	r3, [r4, #12]
 8007a10:	e7e2      	b.n	80079d8 <__smakebuf_r+0xc>
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	6020      	str	r0, [r4, #0]
 8007a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a1a:	81a3      	strh	r3, [r4, #12]
 8007a1c:	9b01      	ldr	r3, [sp, #4]
 8007a1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a22:	b15b      	cbz	r3, 8007a3c <__smakebuf_r+0x70>
 8007a24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f000 f81d 	bl	8007a68 <_isatty_r>
 8007a2e:	b128      	cbz	r0, 8007a3c <__smakebuf_r+0x70>
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	f023 0303 	bic.w	r3, r3, #3
 8007a36:	f043 0301 	orr.w	r3, r3, #1
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	431d      	orrs	r5, r3
 8007a40:	81a5      	strh	r5, [r4, #12]
 8007a42:	e7cf      	b.n	80079e4 <__smakebuf_r+0x18>

08007a44 <_fstat_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	4d07      	ldr	r5, [pc, #28]	@ (8007a64 <_fstat_r+0x20>)
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	4611      	mov	r1, r2
 8007a50:	602b      	str	r3, [r5, #0]
 8007a52:	f7f9 f942 	bl	8000cda <_fstat>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	d102      	bne.n	8007a60 <_fstat_r+0x1c>
 8007a5a:	682b      	ldr	r3, [r5, #0]
 8007a5c:	b103      	cbz	r3, 8007a60 <_fstat_r+0x1c>
 8007a5e:	6023      	str	r3, [r4, #0]
 8007a60:	bd38      	pop	{r3, r4, r5, pc}
 8007a62:	bf00      	nop
 8007a64:	24001258 	.word	0x24001258

08007a68 <_isatty_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	4d06      	ldr	r5, [pc, #24]	@ (8007a84 <_isatty_r+0x1c>)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4604      	mov	r4, r0
 8007a70:	4608      	mov	r0, r1
 8007a72:	602b      	str	r3, [r5, #0]
 8007a74:	f7f9 f936 	bl	8000ce4 <_isatty>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	d102      	bne.n	8007a82 <_isatty_r+0x1a>
 8007a7c:	682b      	ldr	r3, [r5, #0]
 8007a7e:	b103      	cbz	r3, 8007a82 <_isatty_r+0x1a>
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	bd38      	pop	{r3, r4, r5, pc}
 8007a84:	24001258 	.word	0x24001258

08007a88 <_init>:
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8a:	bf00      	nop
 8007a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8e:	bc08      	pop	{r3}
 8007a90:	469e      	mov	lr, r3
 8007a92:	4770      	bx	lr

08007a94 <_fini>:
 8007a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a96:	bf00      	nop
 8007a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a9a:	bc08      	pop	{r3}
 8007a9c:	469e      	mov	lr, r3
 8007a9e:	4770      	bx	lr
