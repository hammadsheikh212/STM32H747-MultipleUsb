
h7_bootloader_bootloader_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064cc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800676c  0800676c  0000776c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f4  080068f4  00008148  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080068f4  080068f4  000078f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068fc  080068fc  00008148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068fc  080068fc  000078fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006900  08006900  00007900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000148  24000000  08006904  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001064  24000148  08006a4c  00008148  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240011ac  08006a4c  000081ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008148  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7c3  00000000  00000000  00008176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c9a  00000000  00000000  00022939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000091d4  00000000  00000000  000265d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  0002f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cca  00000000  00000000  00030838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00042e74  00000000  00000000  00031502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a586  00000000  00000000  00074376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019d4d1  00000000  00000000  0008e8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0022bdcd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f84  00000000  00000000  0022be10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0022ed94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006754 	.word	0x08006754

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	08006754 	.word	0x08006754

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000380:	4b39      	ldr	r3, [pc, #228]	@ (8000468 <SystemInit+0xe8>)
 8000382:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000386:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800038a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800038e:	691a      	ldr	r2, [r3, #16]
 8000390:	f042 0210 	orr.w	r2, r2, #16
 8000394:	611a      	str	r2, [r3, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000396:	4b35      	ldr	r3, [pc, #212]	@ (800046c <SystemInit+0xec>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f003 030f 	and.w	r3, r3, #15
 800039e:	2b06      	cmp	r3, #6
 80003a0:	d806      	bhi.n	80003b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003a2:	4a32      	ldr	r2, [pc, #200]	@ (800046c <SystemInit+0xec>)
 80003a4:	6813      	ldr	r3, [r2, #0]
 80003a6:	f023 030f 	bic.w	r3, r3, #15
 80003aa:	f043 0307 	orr.w	r3, r3, #7
 80003ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000470 <SystemInit+0xf0>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	f042 0201 	orr.w	r2, r2, #1
 80003b8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003be:	6819      	ldr	r1, [r3, #0]
 80003c0:	4a2c      	ldr	r2, [pc, #176]	@ (8000474 <SystemInit+0xf4>)
 80003c2:	400a      	ands	r2, r1
 80003c4:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003c6:	4b29      	ldr	r3, [pc, #164]	@ (800046c <SystemInit+0xec>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f013 0f08 	tst.w	r3, #8
 80003ce:	d006      	beq.n	80003de <SystemInit+0x5e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003d0:	4a26      	ldr	r2, [pc, #152]	@ (800046c <SystemInit+0xec>)
 80003d2:	6813      	ldr	r3, [r2, #0]
 80003d4:	f023 030f 	bic.w	r3, r3, #15
 80003d8:	f043 0307 	orr.w	r3, r3, #7
 80003dc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003de:	4b24      	ldr	r3, [pc, #144]	@ (8000470 <SystemInit+0xf0>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80003e6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80003e8:	4923      	ldr	r1, [pc, #140]	@ (8000478 <SystemInit+0xf8>)
 80003ea:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80003ec:	4923      	ldr	r1, [pc, #140]	@ (800047c <SystemInit+0xfc>)
 80003ee:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80003f0:	4923      	ldr	r1, [pc, #140]	@ (8000480 <SystemInit+0x100>)
 80003f2:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80003f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80003f6:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80003f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80003fa:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80003fc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003fe:	6819      	ldr	r1, [r3, #0]
 8000400:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8000404:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000406:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000408:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800040c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8000410:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000414:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000418:	4b1a      	ldr	r3, [pc, #104]	@ (8000484 <SystemInit+0x104>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f36f 030f 	bfc	r3, #0, #16
 8000420:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000424:	d203      	bcs.n	800042e <SystemInit+0xae>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000426:	4b18      	ldr	r3, [pc, #96]	@ (8000488 <SystemInit+0x108>)
 8000428:	2201      	movs	r2, #1
 800042a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800042e:	4b10      	ldr	r3, [pc, #64]	@ (8000470 <SystemInit+0xf0>)
 8000430:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000434:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8000438:	d110      	bne.n	800045c <SystemInit+0xdc>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800043a:	4b0d      	ldr	r3, [pc, #52]	@ (8000470 <SystemInit+0xf0>)
 800043c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000440:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000444:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000448:	4a10      	ldr	r2, [pc, #64]	@ (800048c <SystemInit+0x10c>)
 800044a:	f243 01d2 	movw	r1, #12498	@ 0x30d2
 800044e:	6011      	str	r1, [r2, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000450:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000454:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000458:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  }

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 800045c:	4b02      	ldr	r3, [pc, #8]	@ (8000468 <SystemInit+0xe8>)
 800045e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000462:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	e000ed00 	.word	0xe000ed00
 800046c:	52002000 	.word	0x52002000
 8000470:	58024400 	.word	0x58024400
 8000474:	eaf6ed7f 	.word	0xeaf6ed7f
 8000478:	02020200 	.word	0x02020200
 800047c:	01ff0000 	.word	0x01ff0000
 8000480:	01010280 	.word	0x01010280
 8000484:	5c001000 	.word	0x5c001000
 8000488:	51008000 	.word	0x51008000
 800048c:	52004000 	.word	0x52004000

08000490 <ExitRun0Mode>:
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000490:	4a05      	ldr	r2, [pc, #20]	@ (80004a8 <ExitRun0Mode+0x18>)
 8000492:	68d3      	ldr	r3, [r2, #12]
 8000494:	f023 0302 	bic.w	r3, r3, #2
 8000498:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800049a:	4b03      	ldr	r3, [pc, #12]	@ (80004a8 <ExitRun0Mode+0x18>)
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80004a2:	d0fa      	beq.n	800049a <ExitRun0Mode+0xa>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	58024800 	.word	0x58024800

080004ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ac:	b570      	push	{r4, r5, r6, lr}
 80004ae:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	2400      	movs	r4, #0
 80004b2:	9405      	str	r4, [sp, #20]
 80004b4:	9406      	str	r4, [sp, #24]
 80004b6:	9407      	str	r4, [sp, #28]
 80004b8:	9408      	str	r4, [sp, #32]
 80004ba:	9409      	str	r4, [sp, #36]	@ 0x24
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004bc:	4b37      	ldr	r3, [pc, #220]	@ (800059c <MX_GPIO_Init+0xf0>)
 80004be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80004c2:	f042 0202 	orr.w	r2, r2, #2
 80004c6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80004ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80004ce:	f002 0202 	and.w	r2, r2, #2
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80004da:	f042 0201 	orr.w	r2, r2, #1
 80004de:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80004e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80004e6:	f002 0201 	and.w	r2, r2, #1
 80004ea:	9201      	str	r2, [sp, #4]
 80004ec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80004f2:	f042 0204 	orr.w	r2, r2, #4
 80004f6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80004fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80004fe:	f002 0204 	and.w	r2, r2, #4
 8000502:	9202      	str	r2, [sp, #8]
 8000504:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000506:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800050a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800050e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000512:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000516:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800051a:	9203      	str	r2, [sp, #12]
 800051c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000522:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000526:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800052a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800052e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000532:	9304      	str	r3, [sp, #16]
 8000534:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000536:	4d1a      	ldr	r5, [pc, #104]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 8000538:	4622      	mov	r2, r4
 800053a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800053e:	4628      	mov	r0, r5
 8000540:	f000 fc40 	bl	8000dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000544:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000548:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800054a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800054e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000550:	2601      	movs	r6, #1
 8000552:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000554:	a905      	add	r1, sp, #20
 8000556:	4813      	ldr	r0, [pc, #76]	@ (80005a4 <MX_GPIO_Init+0xf8>)
 8000558:	f000 fb24 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 800055c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000560:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000562:	2302      	movs	r3, #2
 8000564:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800056a:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 800056c:	a905      	add	r1, sp, #20
 800056e:	4628      	mov	r0, r5
 8000570:	f000 fb18 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000574:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000578:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	a905      	add	r1, sp, #20
 8000582:	4628      	mov	r0, r5
 8000584:	f000 fb0e 	bl	8000ba4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000588:	4622      	mov	r2, r4
 800058a:	4621      	mov	r1, r4
 800058c:	2017      	movs	r0, #23
 800058e:	f000 fae1 	bl	8000b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000592:	2017      	movs	r0, #23
 8000594:	f000 faee 	bl	8000b74 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000598:	b00a      	add	sp, #40	@ 0x28
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	58024400 	.word	0x58024400
 80005a0:	58020000 	.word	0x58020000
 80005a4:	58020400 	.word	0x58020400

080005a8 <HAL_GPIO_EXTI_Callback>:
{
 80005a8:	b510      	push	{r4, lr}
 80005aa:	4604      	mov	r4, r0
    	 printf("Callback \n\r");
 80005ac:	480b      	ldr	r0, [pc, #44]	@ (80005dc <HAL_GPIO_EXTI_Callback+0x34>)
 80005ae:	f005 fb13 	bl	8005bd8 <iprintf>
    if(GPIO_Pin == GPIO_PIN_8)
 80005b2:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 80005b6:	d003      	beq.n	80005c0 <HAL_GPIO_EXTI_Callback+0x18>
    if(GPIO_Pin == GPIO_PIN_9)
 80005b8:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 80005bc:	d007      	beq.n	80005ce <HAL_GPIO_EXTI_Callback+0x26>
}
 80005be:	bd10      	pop	{r4, pc}
    	printf("Callback btn\n\r");
 80005c0:	4807      	ldr	r0, [pc, #28]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x38>)
 80005c2:	f005 fb09 	bl	8005bd8 <iprintf>
    	doJump = 1;
 80005c6:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	e7f4      	b.n	80005b8 <HAL_GPIO_EXTI_Callback+0x10>
        	printf("Callback2 btn\n\r");
 80005ce:	4806      	ldr	r0, [pc, #24]	@ (80005e8 <HAL_GPIO_EXTI_Callback+0x40>)
 80005d0:	f005 fb02 	bl	8005bd8 <iprintf>
        	doJump2 = 1;
 80005d4:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <HAL_GPIO_EXTI_Callback+0x44>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	601a      	str	r2, [r3, #0]
}
 80005da:	e7f0      	b.n	80005be <HAL_GPIO_EXTI_Callback+0x16>
 80005dc:	0800677c 	.word	0x0800677c
 80005e0:	08006788 	.word	0x08006788
 80005e4:	2400000c 	.word	0x2400000c
 80005e8:	0800679c 	.word	0x0800679c
 80005ec:	24000008 	.word	0x24000008

080005f0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <Error_Handler+0x2>

080005f4 <SystemClock_Config>:
{
 80005f4:	b500      	push	{lr}
 80005f6:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f8:	224c      	movs	r2, #76	@ 0x4c
 80005fa:	2100      	movs	r1, #0
 80005fc:	a809      	add	r0, sp, #36	@ 0x24
 80005fe:	f005 fbd5 	bl	8005dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000602:	2220      	movs	r2, #32
 8000604:	2100      	movs	r1, #0
 8000606:	a801      	add	r0, sp, #4
 8000608:	f005 fbd0 	bl	8005dac <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800060c:	2004      	movs	r0, #4
 800060e:	f001 fa5d 	bl	8001acc <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000612:	2300      	movs	r3, #0
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	4b28      	ldr	r3, [pc, #160]	@ (80006b8 <SystemClock_Config+0xc4>)
 8000618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800061a:	f022 0201 	bic.w	r2, r2, #1
 800061e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	4b24      	ldr	r3, [pc, #144]	@ (80006bc <SystemClock_Config+0xc8>)
 800062a:	699a      	ldr	r2, [r3, #24]
 800062c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000630:	619a      	str	r2, [r3, #24]
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800063c:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <SystemClock_Config+0xc8>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8000644:	d0fa      	beq.n	800063c <SystemClock_Config+0x48>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000646:	230b      	movs	r3, #11
 8000648:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800064e:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000650:	2301      	movs	r3, #1
 8000652:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2240      	movs	r2, #64	@ 0x40
 8000656:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000658:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000660:	2205      	movs	r2, #5
 8000662:	9214      	str	r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000664:	2130      	movs	r1, #48	@ 0x30
 8000666:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000668:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800066a:	9217      	str	r2, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800066c:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800066e:	2308      	movs	r3, #8
 8000670:	9319      	str	r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000672:	2300      	movs	r3, #0
 8000674:	931a      	str	r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000676:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	a809      	add	r0, sp, #36	@ 0x24
 800067a:	f001 fa79 	bl	8001b70 <HAL_RCC_OscConfig>
 800067e:	b9b0      	cbnz	r0, 80006ae <SystemClock_Config+0xba>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	233f      	movs	r3, #63	@ 0x3f
 8000682:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000684:	2100      	movs	r1, #0
 8000686:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800068a:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800068c:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800068e:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000690:	9107      	str	r1, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000692:	9108      	str	r1, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000694:	a801      	add	r0, sp, #4
 8000696:	f001 ff11 	bl	80024bc <HAL_RCC_ClockConfig>
 800069a:	b950      	cbnz	r0, 80006b2 <SystemClock_Config+0xbe>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800069c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006a0:	2100      	movs	r1, #0
 80006a2:	4608      	mov	r0, r1
 80006a4:	f001 fdbc 	bl	8002220 <HAL_RCC_MCOConfig>
}
 80006a8:	b01d      	add	sp, #116	@ 0x74
 80006aa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80006ae:	f7ff ff9f 	bl	80005f0 <Error_Handler>
    Error_Handler();
 80006b2:	f7ff ff9d 	bl	80005f0 <Error_Handler>
 80006b6:	bf00      	nop
 80006b8:	58000400 	.word	0x58000400
 80006bc:	58024800 	.word	0x58024800

080006c0 <PeriphCommonClock_Config>:
{
 80006c0:	b500      	push	{lr}
 80006c2:	b0b3      	sub	sp, #204	@ 0xcc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c4:	22c8      	movs	r2, #200	@ 0xc8
 80006c6:	2100      	movs	r1, #0
 80006c8:	4668      	mov	r0, sp
 80006ca:	f005 fb6f 	bl	8005dac <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006ce:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80006d2:	2300      	movs	r3, #0
 80006d4:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80006dc:	220c      	movs	r2, #12
 80006de:	9203      	str	r2, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80006e0:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80006e2:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006e4:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80006e6:	23c0      	movs	r3, #192	@ 0xc0
 80006e8:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80006ea:	2320      	movs	r3, #32
 80006ec:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ee:	4668      	mov	r0, sp
 80006f0:	f002 f958 	bl	80029a4 <HAL_RCCEx_PeriphCLKConfig>
 80006f4:	b910      	cbnz	r0, 80006fc <PeriphCommonClock_Config+0x3c>
}
 80006f6:	b033      	add	sp, #204	@ 0xcc
 80006f8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80006fc:	f7ff ff78 	bl	80005f0 <Error_Handler>

08000700 <main>:
{
 8000700:	b500      	push	{lr}
 8000702:	b083      	sub	sp, #12
	printf("-------------Bootloader User Begin 1 -------------\n\r");
 8000704:	4839      	ldr	r0, [pc, #228]	@ (80007ec <main+0xec>)
 8000706:	f005 fa67 	bl	8005bd8 <iprintf>
	doJump = 0;
 800070a:	2400      	movs	r4, #0
 800070c:	4b38      	ldr	r3, [pc, #224]	@ (80007f0 <main+0xf0>)
 800070e:	601c      	str	r4, [r3, #0]
	doJump2=0;
 8000710:	4b38      	ldr	r3, [pc, #224]	@ (80007f4 <main+0xf4>)
 8000712:	601c      	str	r4, [r3, #0]
  HAL_Init();
 8000714:	f000 f972 	bl	80009fc <HAL_Init>
  SystemClock_Config();
 8000718:	f7ff ff6c 	bl	80005f4 <SystemClock_Config>
  PeriphCommonClock_Config();
 800071c:	f7ff ffd0 	bl	80006c0 <PeriphCommonClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000720:	4b35      	ldr	r3, [pc, #212]	@ (80007f8 <main+0xf8>)
 8000722:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000726:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800072a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	9b01      	ldr	r3, [sp, #4]
HAL_HSEM_FastTake(HSEM_ID_0);
 800073a:	4620      	mov	r0, r4
 800073c:	f000 fb58 	bl	8000df0 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000740:	4621      	mov	r1, r4
 8000742:	4620      	mov	r0, r4
 8000744:	f000 fb64 	bl	8000e10 <HAL_HSEM_Release>
  MX_GPIO_Init();
 8000748:	f7ff feb0 	bl	80004ac <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800074c:	f004 fe28 	bl	80053a0 <MX_USB_DEVICE_Init>
 8000750:	e006      	b.n	8000760 <main+0x60>
		 	    *dfu_boot_flag=0;
 8000752:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <main+0xfc>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
	  if(doJump2){
 800075a:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <main+0xf4>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	bb33      	cbnz	r3, 80007ae <main+0xae>
      HAL_Delay(500); // Delay for 500 ms
 8000760:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000764:	f000 f98a 	bl	8000a7c <HAL_Delay>
	  if(doJump){
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <main+0xf0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d0f4      	beq.n	800075a <main+0x5a>
		  doJump = 0;
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <main+0xf0>)
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
		  printf("Jumping to Firmware\n\r");
 8000776:	4822      	ldr	r0, [pc, #136]	@ (8000800 <main+0x100>)
 8000778:	f005 fa2e 	bl	8005bd8 <iprintf>
		 	  dfu_boot_flag = (uint32_t*) (&_bflag); // set in linker script
 800077c:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <main+0x104>)
 800077e:	4a1f      	ldr	r2, [pc, #124]	@ (80007fc <main+0xfc>)
 8000780:	6013      	str	r3, [r2, #0]
		 	  if (*dfu_boot_flag != DFU_BOOT_FLAG) {
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <main+0x108>)
 8000786:	429a      	cmp	r2, r3
 8000788:	d0e3      	beq.n	8000752 <main+0x52>
		 	      if (((*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD) & 0x2FF80000) == 0x24000000) {
 800078a:	4b20      	ldr	r3, [pc, #128]	@ (800080c <main+0x10c>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <main+0x110>)
 8000790:	4013      	ands	r3, r2
 8000792:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 8000796:	d1dc      	bne.n	8000752 <main+0x52>
		 	          JumpAddress = *(__IO uint32_t*) (USBD_DFU_APP_DEFAULT_ADD + 4);
 8000798:	4a1c      	ldr	r2, [pc, #112]	@ (800080c <main+0x10c>)
 800079a:	6853      	ldr	r3, [r2, #4]
 800079c:	491d      	ldr	r1, [pc, #116]	@ (8000814 <main+0x114>)
 800079e:	600b      	str	r3, [r1, #0]
		 	          JumpToApplication = (pFunction) JumpAddress;
 80007a0:	491d      	ldr	r1, [pc, #116]	@ (8000818 <main+0x118>)
 80007a2:	600b      	str	r3, [r1, #0]
		 	          __set_MSP(*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD);
 80007a4:	6812      	ldr	r2, [r2, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80007a6:	f382 8808 	msr	MSP, r2
		 	          JumpToApplication();
 80007aa:	4798      	blx	r3
 80007ac:	e7d1      	b.n	8000752 <main+0x52>
	  		  doJump2 = 0;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <main+0xf4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
	  		  printf("Jumping to Firmware2\n\r");
 80007b4:	4819      	ldr	r0, [pc, #100]	@ (800081c <main+0x11c>)
 80007b6:	f005 fa0f 	bl	8005bd8 <iprintf>
	  		 	  dfu_boot_flag = (uint32_t*) (&_bflag); // set in linker script
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <main+0x104>)
 80007bc:	4a0f      	ldr	r2, [pc, #60]	@ (80007fc <main+0xfc>)
 80007be:	6013      	str	r3, [r2, #0]
	  		 	  if (*dfu_boot_flag != DFU_BOOT_FLAG) {
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <main+0x108>)
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d0cb      	beq.n	8000760 <main+0x60>
	  		 	      if (((*(__IO uint32_t*) 0x080a0000) & 0x2FF80000) == 0x24000000) {
 80007c8:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <main+0x120>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <main+0x110>)
 80007ce:	4013      	ands	r3, r2
 80007d0:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 80007d4:	d1c4      	bne.n	8000760 <main+0x60>
	  		 	          JumpAddress = *(__IO uint32_t*) (0x080a0000 + 4);
 80007d6:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <main+0x120>)
 80007d8:	6853      	ldr	r3, [r2, #4]
 80007da:	490e      	ldr	r1, [pc, #56]	@ (8000814 <main+0x114>)
 80007dc:	600b      	str	r3, [r1, #0]
	  		 	          JumpToApplication = (pFunction) JumpAddress;
 80007de:	490e      	ldr	r1, [pc, #56]	@ (8000818 <main+0x118>)
 80007e0:	600b      	str	r3, [r1, #0]
	  		 	          __set_MSP(*(__IO uint32_t*) 0x080a0000);
 80007e2:	6812      	ldr	r2, [r2, #0]
 80007e4:	f382 8808 	msr	MSP, r2
	  		 	          JumpToApplication();
 80007e8:	4798      	blx	r3
 80007ea:	e7b9      	b.n	8000760 <main+0x60>
 80007ec:	080067ac 	.word	0x080067ac
 80007f0:	2400000c 	.word	0x2400000c
 80007f4:	24000008 	.word	0x24000008
 80007f8:	58024400 	.word	0x58024400
 80007fc:	2400016c 	.word	0x2400016c
 8000800:	080067e4 	.word	0x080067e4
 8000804:	2407fffc 	.word	0x2407fffc
 8000808:	deadbeef 	.word	0xdeadbeef
 800080c:	08040000 	.word	0x08040000
 8000810:	2ff80000 	.word	0x2ff80000
 8000814:	24000164 	.word	0x24000164
 8000818:	24000168 	.word	0x24000168
 800081c:	080067fc 	.word	0x080067fc
 8000820:	080a0000 	.word	0x080a0000

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <HAL_MspInit+0x20>)
 8000828:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800082c:	f042 0202 	orr.w	r2, r2, #2
 8000830:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000838:	f003 0302 	and.w	r3, r3, #2
 800083c:	9301      	str	r3, [sp, #4]
 800083e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000840:	b002      	add	sp, #8
 8000842:	4770      	bx	lr
 8000844:	58024400 	.word	0x58024400

08000848 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler>

0800084a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <HardFault_Handler>

0800084c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <MemManage_Handler>

0800084e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler>

08000850 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler>

08000852 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000852:	4770      	bx	lr

08000854 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	4770      	bx	lr

08000858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000858:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085a:	f000 f8fd 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085e:	bd08      	pop	{r3, pc}

08000860 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000860:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000862:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000866:	f000 fab3 	bl	8000dd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800086a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800086e:	f000 faaf 	bl	8000dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000872:	bd08      	pop	{r3, pc}

08000874 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000874:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000876:	4802      	ldr	r0, [pc, #8]	@ (8000880 <OTG_HS_IRQHandler+0xc>)
 8000878:	f000 fde8 	bl	800144c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800087c:	bd08      	pop	{r3, pc}
 800087e:	bf00      	nop
 8000880:	24000b7c 	.word	0x24000b7c

08000884 <ITM_SendChar>:
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )
void ITM_SendChar(uint8_t ch)
{
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000884:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8000888:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	@ 0xdfc
 800088c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000890:	f8c2 3dfc 	str.w	r3, [r2, #3580]	@ 0xdfc
	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000894:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000898:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f013 0f01 	tst.w	r3, #1
 80008ae:	d0f9      	beq.n	80008a4 <ITM_SendChar+0x20>
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80008b0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80008b4:	6018      	str	r0, [r3, #0]
}
 80008b6:	4770      	bx	lr

080008b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	460c      	mov	r4, r1
 80008bc:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008be:	2500      	movs	r5, #0
 80008c0:	e006      	b.n	80008d0 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80008c2:	f3af 8000 	nop.w
 80008c6:	4621      	mov	r1, r4
 80008c8:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008cc:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80008ce:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d0:	42b5      	cmp	r5, r6
 80008d2:	dbf6      	blt.n	80008c2 <_read+0xa>
  }

  return len;
}
 80008d4:	4630      	mov	r0, r6
 80008d6:	bd70      	pop	{r4, r5, r6, pc}

080008d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008d8:	b570      	push	{r4, r5, r6, lr}
 80008da:	460c      	mov	r4, r1
 80008dc:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008de:	2500      	movs	r5, #0
 80008e0:	e004      	b.n	80008ec <_write+0x14>
  {
   // __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80008e2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80008e6:	f7ff ffcd 	bl	8000884 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ea:	3501      	adds	r5, #1
 80008ec:	42b5      	cmp	r5, r6
 80008ee:	dbf8      	blt.n	80008e2 <_write+0xa>
  }
  return len;
}
 80008f0:	4630      	mov	r0, r6
 80008f2:	bd70      	pop	{r4, r5, r6, pc}

080008f4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	4770      	bx	lr

080008fa <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80008fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008fe:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000900:	2000      	movs	r0, #0
 8000902:	4770      	bx	lr

08000904 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000904:	2001      	movs	r0, #1
 8000906:	4770      	bx	lr

08000908 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000908:	2000      	movs	r0, #0
 800090a:	4770      	bx	lr

0800090c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800090c:	b510      	push	{r4, lr}
 800090e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000910:	4a0c      	ldr	r2, [pc, #48]	@ (8000944 <_sbrk+0x38>)
 8000912:	490d      	ldr	r1, [pc, #52]	@ (8000948 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000914:	480d      	ldr	r0, [pc, #52]	@ (800094c <_sbrk+0x40>)
 8000916:	6800      	ldr	r0, [r0, #0]
 8000918:	b140      	cbz	r0, 800092c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091a:	480c      	ldr	r0, [pc, #48]	@ (800094c <_sbrk+0x40>)
 800091c:	6800      	ldr	r0, [r0, #0]
 800091e:	4403      	add	r3, r0
 8000920:	1a52      	subs	r2, r2, r1
 8000922:	4293      	cmp	r3, r2
 8000924:	d806      	bhi.n	8000934 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000926:	4a09      	ldr	r2, [pc, #36]	@ (800094c <_sbrk+0x40>)
 8000928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800092a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800092c:	4807      	ldr	r0, [pc, #28]	@ (800094c <_sbrk+0x40>)
 800092e:	4c08      	ldr	r4, [pc, #32]	@ (8000950 <_sbrk+0x44>)
 8000930:	6004      	str	r4, [r0, #0]
 8000932:	e7f2      	b.n	800091a <_sbrk+0xe>
    errno = ENOMEM;
 8000934:	f005 fa98 	bl	8005e68 <__errno>
 8000938:	230c      	movs	r3, #12
 800093a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800093c:	f04f 30ff 	mov.w	r0, #4294967295
 8000940:	e7f3      	b.n	800092a <_sbrk+0x1e>
 8000942:	bf00      	nop
 8000944:	2407fffc 	.word	0x2407fffc
 8000948:	00000400 	.word	0x00000400
 800094c:	24000170 	.word	0x24000170
 8000950:	240011b0 	.word	0x240011b0

08000954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000954:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000990 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000958:	f7ff fd9a 	bl	8000490 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800095c:	f7ff fd10 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	@ (8000998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	@ (80009a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000986:	f005 fa75 	bl	8005e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098a:	f7ff feb9 	bl	8000700 <main>
  bx  lr
 800098e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000990:	2407fffc 	.word	0x2407fffc
  ldr r0, =_sdata
 8000994:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000998:	24000148 	.word	0x24000148
  ldr r2, =_sidata
 800099c:	08006904 	.word	0x08006904
  ldr r2, =_sbss
 80009a0:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 80009a4:	240011ac 	.word	0x240011ac

080009a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC3_IRQHandler>
	...

080009ac <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <HAL_InitTick+0x44>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b90b      	cbnz	r3, 80009b6 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80009b2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80009b4:	4770      	bx	lr
{
 80009b6:	b510      	push	{r4, lr}
 80009b8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009be:	fbb0 f3f3 	udiv	r3, r0, r3
 80009c2:	4a0c      	ldr	r2, [pc, #48]	@ (80009f4 <HAL_InitTick+0x48>)
 80009c4:	6810      	ldr	r0, [r2, #0]
 80009c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80009ca:	f000 f8d7 	bl	8000b7c <HAL_SYSTICK_Config>
 80009ce:	b968      	cbnz	r0, 80009ec <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d0:	2c0f      	cmp	r4, #15
 80009d2:	d901      	bls.n	80009d8 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80009d4:	2001      	movs	r0, #1
 80009d6:	e00a      	b.n	80009ee <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	4621      	mov	r1, r4
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f000 f8b8 	bl	8000b54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4b04      	ldr	r3, [pc, #16]	@ (80009f8 <HAL_InitTick+0x4c>)
 80009e6:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80009e8:	2000      	movs	r0, #0
 80009ea:	e000      	b.n	80009ee <HAL_InitTick+0x42>
      return HAL_ERROR;
 80009ec:	2001      	movs	r0, #1
}
 80009ee:	bd10      	pop	{r4, pc}
 80009f0:	24000010 	.word	0x24000010
 80009f4:	24000004 	.word	0x24000004
 80009f8:	24000014 	.word	0x24000014

080009fc <HAL_Init>:
{
 80009fc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fe:	2003      	movs	r0, #3
 8000a00:	f000 f896 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a04:	f001 fc5e 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8000a08:	490f      	ldr	r1, [pc, #60]	@ (8000a48 <HAL_Init+0x4c>)
 8000a0a:	698b      	ldr	r3, [r1, #24]
 8000a0c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000a10:	4a0e      	ldr	r2, [pc, #56]	@ (8000a4c <HAL_Init+0x50>)
 8000a12:	5cd3      	ldrb	r3, [r2, r3]
 8000a14:	f003 031f 	and.w	r3, r3, #31
 8000a18:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a1a:	698b      	ldr	r3, [r1, #24]
 8000a1c:	f003 030f 	and.w	r3, r3, #15
 8000a20:	5cd3      	ldrb	r3, [r2, r3]
 8000a22:	f003 031f 	and.w	r3, r3, #31
 8000a26:	fa20 f303 	lsr.w	r3, r0, r3
 8000a2a:	4a09      	ldr	r2, [pc, #36]	@ (8000a50 <HAL_Init+0x54>)
 8000a2c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <HAL_Init+0x58>)
 8000a30:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff ffba 	bl	80009ac <HAL_InitTick>
 8000a38:	b110      	cbz	r0, 8000a40 <HAL_Init+0x44>
    return HAL_ERROR;
 8000a3a:	2401      	movs	r4, #1
}
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	bd10      	pop	{r4, pc}
 8000a40:	4604      	mov	r4, r0
  HAL_MspInit();
 8000a42:	f7ff feef 	bl	8000824 <HAL_MspInit>
  return HAL_OK;
 8000a46:	e7f9      	b.n	8000a3c <HAL_Init+0x40>
 8000a48:	58024400 	.word	0x58024400
 8000a4c:	0800676c 	.word	0x0800676c
 8000a50:	24000000 	.word	0x24000000
 8000a54:	24000004 	.word	0x24000004

08000a58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000a58:	4b03      	ldr	r3, [pc, #12]	@ (8000a68 <HAL_IncTick+0x10>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4a03      	ldr	r2, [pc, #12]	@ (8000a6c <HAL_IncTick+0x14>)
 8000a5e:	6811      	ldr	r1, [r2, #0]
 8000a60:	440b      	add	r3, r1
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	24000010 	.word	0x24000010
 8000a6c:	24000174 	.word	0x24000174

08000a70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a70:	4b01      	ldr	r3, [pc, #4]	@ (8000a78 <HAL_GetTick+0x8>)
 8000a72:	6818      	ldr	r0, [r3, #0]
}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	24000174 	.word	0x24000174

08000a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a7c:	b538      	push	{r3, r4, r5, lr}
 8000a7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a80:	f7ff fff6 	bl	8000a70 <HAL_GetTick>
 8000a84:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a86:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000a8a:	d002      	beq.n	8000a92 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8c:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <HAL_Delay+0x24>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a92:	f7ff ffed 	bl	8000a70 <HAL_GetTick>
 8000a96:	1b40      	subs	r0, r0, r5
 8000a98:	42a0      	cmp	r0, r4
 8000a9a:	d3fa      	bcc.n	8000a92 <HAL_Delay+0x16>
  {
  }
}
 8000a9c:	bd38      	pop	{r3, r4, r5, pc}
 8000a9e:	bf00      	nop
 8000aa0:	24000010 	.word	0x24000010

08000aa4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000aa4:	4b01      	ldr	r3, [pc, #4]	@ (8000aac <HAL_GetREVID+0x8>)
 8000aa6:	6818      	ldr	r0, [r3, #0]
}
 8000aa8:	0c00      	lsrs	r0, r0, #16
 8000aaa:	4770      	bx	lr
 8000aac:	5c001000 	.word	0x5c001000

08000ab0 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	db07      	blt.n	8000ac4 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab4:	f000 021f 	and.w	r2, r0, #31
 8000ab8:	0940      	lsrs	r0, r0, #5
 8000aba:	2301      	movs	r3, #1
 8000abc:	4093      	lsls	r3, r2
 8000abe:	4a02      	ldr	r2, [pc, #8]	@ (8000ac8 <__NVIC_EnableIRQ+0x18>)
 8000ac0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000acc:	2800      	cmp	r0, #0
 8000ace:	db04      	blt.n	8000ada <__NVIC_SetPriority+0xe>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad0:	0109      	lsls	r1, r1, #4
 8000ad2:	b2c9      	uxtb	r1, r1
 8000ad4:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <__NVIC_SetPriority+0x1c>)
 8000ad6:	5419      	strb	r1, [r3, r0]
 8000ad8:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	f000 000f 	and.w	r0, r0, #15
 8000ade:	0109      	lsls	r1, r1, #4
 8000ae0:	b2c9      	uxtb	r1, r1
 8000ae2:	4b02      	ldr	r3, [pc, #8]	@ (8000aec <__NVIC_SetPriority+0x20>)
 8000ae4:	5419      	strb	r1, [r3, r0]
  }
}
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e400 	.word	0xe000e400
 8000aec:	e000ed14 	.word	0xe000ed14

08000af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af2:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af6:	f1c0 0c07 	rsb	ip, r0, #7
 8000afa:	f1bc 0f04 	cmp.w	ip, #4
 8000afe:	bf28      	it	cs
 8000b00:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b04:	1d03      	adds	r3, r0, #4
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d90f      	bls.n	8000b2a <NVIC_EncodePriority+0x3a>
 8000b0a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	f04f 3eff 	mov.w	lr, #4294967295
 8000b10:	fa0e f00c 	lsl.w	r0, lr, ip
 8000b14:	ea21 0100 	bic.w	r1, r1, r0
 8000b18:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1a:	fa0e fe03 	lsl.w	lr, lr, r3
 8000b1e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000b22:	ea41 0002 	orr.w	r0, r1, r2
 8000b26:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e7ee      	b.n	8000b0c <NVIC_EncodePriority+0x1c>
	...

08000b30 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b30:	4906      	ldr	r1, [pc, #24]	@ (8000b4c <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000b32:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b34:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000b38:	041b      	lsls	r3, r3, #16
 8000b3a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	0200      	lsls	r0, r0, #8
 8000b3e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b42:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000b44:	4a02      	ldr	r2, [pc, #8]	@ (8000b50 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b46:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000b48:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00
 8000b50:	05fa0000 	.word	0x05fa0000

08000b54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b510      	push	{r4, lr}
 8000b56:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <HAL_NVIC_SetPriority+0x1c>)
 8000b5a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000b60:	f7ff ffc6 	bl	8000af0 <NVIC_EncodePriority>
 8000b64:	4601      	mov	r1, r0
 8000b66:	4620      	mov	r0, r4
 8000b68:	f7ff ffb0 	bl	8000acc <__NVIC_SetPriority>
}
 8000b6c:	bd10      	pop	{r4, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b74:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b76:	f7ff ff9b 	bl	8000ab0 <__NVIC_EnableIRQ>
}
 8000b7a:	bd08      	pop	{r3, pc}

08000b7c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b7c:	3801      	subs	r0, #1
 8000b7e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b82:	d20b      	bcs.n	8000b9c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b84:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000b88:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ba0 <HAL_SYSTICK_Config+0x24>)
 8000b8c:	21f0      	movs	r1, #240	@ 0xf0
 8000b8e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b92:	2000      	movs	r0, #0
 8000b94:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	2207      	movs	r2, #7
 8000b98:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b9c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba6:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8000ba8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000baa:	e06b      	b.n	8000c84 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bac:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bae:	005e      	lsls	r6, r3, #1
 8000bb0:	2403      	movs	r4, #3
 8000bb2:	40b4      	lsls	r4, r6
 8000bb4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bb8:	68cc      	ldr	r4, [r1, #12]
 8000bba:	40b4      	lsls	r4, r6
 8000bbc:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000bbe:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc0:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bc2:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc6:	684c      	ldr	r4, [r1, #4]
 8000bc8:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000bcc:	409c      	lsls	r4, r3
 8000bce:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000bd0:	6044      	str	r4, [r0, #4]
 8000bd2:	e069      	b.n	8000ca8 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bd4:	08dd      	lsrs	r5, r3, #3
 8000bd6:	3508      	adds	r5, #8
 8000bd8:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000bdc:	f003 0c07 	and.w	ip, r3, #7
 8000be0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000be4:	f04f 0e0f 	mov.w	lr, #15
 8000be8:	fa0e fe0c 	lsl.w	lr, lr, ip
 8000bec:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000bf0:	690c      	ldr	r4, [r1, #16]
 8000bf2:	fa04 f40c 	lsl.w	r4, r4, ip
 8000bf6:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000bfa:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8000bfe:	e06b      	b.n	8000cd8 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c00:	2409      	movs	r4, #9
 8000c02:	e000      	b.n	8000c06 <HAL_GPIO_Init+0x62>
 8000c04:	2400      	movs	r4, #0
 8000c06:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c0a:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c0c:	f10c 0c02 	add.w	ip, ip, #2
 8000c10:	4d69      	ldr	r5, [pc, #420]	@ (8000db8 <HAL_GPIO_Init+0x214>)
 8000c12:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c16:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 8000c1a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000c1c:	43d4      	mvns	r4, r2
 8000c1e:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c22:	684f      	ldr	r7, [r1, #4]
 8000c24:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 8000c28:	d001      	beq.n	8000c2e <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8000c2a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8000c2e:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8000c32:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8000c34:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8000c36:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c3a:	684f      	ldr	r7, [r1, #4]
 8000c3c:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8000c40:	d001      	beq.n	8000c46 <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 8000c42:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8000c46:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8000c4a:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000c4c:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
        temp &= ~(iocurrent);
 8000c50:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c54:	684f      	ldr	r7, [r1, #4]
 8000c56:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8000c5a:	d001      	beq.n	8000c60 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000c5c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000c60:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8000c64:	f8c5 6084 	str.w	r6, [r5, #132]	@ 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000c68:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
        temp &= ~(iocurrent);
 8000c6c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c6e:	684e      	ldr	r6, [r1, #4]
 8000c70:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8000c74:	d001      	beq.n	8000c7a <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 8000c76:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000c7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c7e:	f8c2 4080 	str.w	r4, [r2, #128]	@ 0x80
      }
    }

    position++;
 8000c82:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c84:	680a      	ldr	r2, [r1, #0]
 8000c86:	fa32 f403 	lsrs.w	r4, r2, r3
 8000c8a:	f000 8092 	beq.w	8000db2 <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c8e:	f04f 0c01 	mov.w	ip, #1
 8000c92:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8000c96:	ea1c 0202 	ands.w	r2, ip, r2
 8000c9a:	d0f2      	beq.n	8000c82 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c9c:	684c      	ldr	r4, [r1, #4]
 8000c9e:	f004 0403 	and.w	r4, r4, #3
 8000ca2:	3c01      	subs	r4, #1
 8000ca4:	2c01      	cmp	r4, #1
 8000ca6:	d981      	bls.n	8000bac <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca8:	684c      	ldr	r4, [r1, #4]
 8000caa:	f004 0403 	and.w	r4, r4, #3
 8000cae:	2c03      	cmp	r4, #3
 8000cb0:	d00c      	beq.n	8000ccc <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 8000cb2:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cb4:	005d      	lsls	r5, r3, #1
 8000cb6:	f04f 0c03 	mov.w	ip, #3
 8000cba:	fa0c fc05 	lsl.w	ip, ip, r5
 8000cbe:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc2:	688c      	ldr	r4, [r1, #8]
 8000cc4:	40ac      	lsls	r4, r5
 8000cc6:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 8000cca:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ccc:	684c      	ldr	r4, [r1, #4]
 8000cce:	f004 0403 	and.w	r4, r4, #3
 8000cd2:	2c02      	cmp	r4, #2
 8000cd4:	f43f af7e 	beq.w	8000bd4 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8000cd8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cda:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000cde:	f04f 0c03 	mov.w	ip, #3
 8000ce2:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000ce6:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cea:	684c      	ldr	r4, [r1, #4]
 8000cec:	f004 0403 	and.w	r4, r4, #3
 8000cf0:	fa04 f40e 	lsl.w	r4, r4, lr
 8000cf4:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000cf8:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cfa:	684c      	ldr	r4, [r1, #4]
 8000cfc:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8000d00:	d0bf      	beq.n	8000c82 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4c2e      	ldr	r4, [pc, #184]	@ (8000dbc <HAL_GPIO_Init+0x218>)
 8000d04:	f8d4 50f4 	ldr.w	r5, [r4, #244]	@ 0xf4
 8000d08:	f045 0502 	orr.w	r5, r5, #2
 8000d0c:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 8000d10:	f8d4 40f4 	ldr.w	r4, [r4, #244]	@ 0xf4
 8000d14:	f004 0402 	and.w	r4, r4, #2
 8000d18:	9401      	str	r4, [sp, #4]
 8000d1a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d1c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8000d20:	f10c 0502 	add.w	r5, ip, #2
 8000d24:	4c24      	ldr	r4, [pc, #144]	@ (8000db8 <HAL_GPIO_Init+0x214>)
 8000d26:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d2a:	f003 0e03 	and.w	lr, r3, #3
 8000d2e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000d32:	240f      	movs	r4, #15
 8000d34:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d38:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d3c:	4c20      	ldr	r4, [pc, #128]	@ (8000dc0 <HAL_GPIO_Init+0x21c>)
 8000d3e:	42a0      	cmp	r0, r4
 8000d40:	f43f af60 	beq.w	8000c04 <HAL_GPIO_Init+0x60>
 8000d44:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d48:	42a0      	cmp	r0, r4
 8000d4a:	d022      	beq.n	8000d92 <HAL_GPIO_Init+0x1ee>
 8000d4c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d50:	42a0      	cmp	r0, r4
 8000d52:	d020      	beq.n	8000d96 <HAL_GPIO_Init+0x1f2>
 8000d54:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d58:	42a0      	cmp	r0, r4
 8000d5a:	d01e      	beq.n	8000d9a <HAL_GPIO_Init+0x1f6>
 8000d5c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d60:	42a0      	cmp	r0, r4
 8000d62:	d01c      	beq.n	8000d9e <HAL_GPIO_Init+0x1fa>
 8000d64:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d68:	42a0      	cmp	r0, r4
 8000d6a:	d01a      	beq.n	8000da2 <HAL_GPIO_Init+0x1fe>
 8000d6c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d70:	42a0      	cmp	r0, r4
 8000d72:	d018      	beq.n	8000da6 <HAL_GPIO_Init+0x202>
 8000d74:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d78:	42a0      	cmp	r0, r4
 8000d7a:	d016      	beq.n	8000daa <HAL_GPIO_Init+0x206>
 8000d7c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d80:	42a0      	cmp	r0, r4
 8000d82:	d014      	beq.n	8000dae <HAL_GPIO_Init+0x20a>
 8000d84:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d88:	42a0      	cmp	r0, r4
 8000d8a:	f43f af39 	beq.w	8000c00 <HAL_GPIO_Init+0x5c>
 8000d8e:	240a      	movs	r4, #10
 8000d90:	e739      	b.n	8000c06 <HAL_GPIO_Init+0x62>
 8000d92:	2401      	movs	r4, #1
 8000d94:	e737      	b.n	8000c06 <HAL_GPIO_Init+0x62>
 8000d96:	2402      	movs	r4, #2
 8000d98:	e735      	b.n	8000c06 <HAL_GPIO_Init+0x62>
 8000d9a:	2403      	movs	r4, #3
 8000d9c:	e733      	b.n	8000c06 <HAL_GPIO_Init+0x62>
 8000d9e:	2404      	movs	r4, #4
 8000da0:	e731      	b.n	8000c06 <HAL_GPIO_Init+0x62>
 8000da2:	2405      	movs	r4, #5
 8000da4:	e72f      	b.n	8000c06 <HAL_GPIO_Init+0x62>
 8000da6:	2406      	movs	r4, #6
 8000da8:	e72d      	b.n	8000c06 <HAL_GPIO_Init+0x62>
 8000daa:	2407      	movs	r4, #7
 8000dac:	e72b      	b.n	8000c06 <HAL_GPIO_Init+0x62>
 8000dae:	2408      	movs	r4, #8
 8000db0:	e729      	b.n	8000c06 <HAL_GPIO_Init+0x62>
  }
}
 8000db2:	b003      	add	sp, #12
 8000db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000db6:	bf00      	nop
 8000db8:	58000400 	.word	0x58000400
 8000dbc:	58024400 	.word	0x58024400
 8000dc0:	58020000 	.word	0x58020000

08000dc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dc4:	b10a      	cbz	r2, 8000dca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dc6:	6181      	str	r1, [r0, #24]
 8000dc8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000dca:	0409      	lsls	r1, r1, #16
 8000dcc:	6181      	str	r1, [r0, #24]
  }
}
 8000dce:	4770      	bx	lr

08000dd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000dd0:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8000dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dda:	4203      	tst	r3, r0
 8000ddc:	d100      	bne.n	8000de0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8000dde:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000de4:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000de8:	f7ff fbde 	bl	80005a8 <HAL_GPIO_EXTI_Callback>
}
 8000dec:	e7f7      	b.n	8000dde <HAL_GPIO_EXTI_IRQHandler+0xe>
	...

08000df0 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000df0:	3020      	adds	r0, #32
 8000df2:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <HAL_HSEM_FastTake+0x18>)
 8000df4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8000df8:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <HAL_HSEM_FastTake+0x1c>)
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d001      	beq.n	8000e02 <HAL_HSEM_FastTake+0x12>
    return HAL_OK;
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000dfe:	2001      	movs	r0, #1
 8000e00:	4770      	bx	lr
    return HAL_OK;
 8000e02:	2000      	movs	r0, #0
}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	58026400 	.word	0x58026400
 8000e0c:	80000300 	.word	0x80000300

08000e10 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000e10:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 8000e14:	4b01      	ldr	r3, [pc, #4]	@ (8000e1c <HAL_HSEM_Release+0xc>)
 8000e16:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8000e1a:	4770      	bx	lr
 8000e1c:	58026400 	.word	0x58026400

08000e20 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8000e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e24:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e26:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8000e2a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000e2e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000e32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d854      	bhi.n	8000ee4 <PCD_WriteEmptyTxFifo+0xc4>
 8000e3a:	4607      	mov	r7, r0
 8000e3c:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8000e3e:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8000e40:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8000e44:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000e48:	69d2      	ldr	r2, [r2, #28]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d300      	bcc.n	8000e50 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8000e4e:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8000e50:	f102 0903 	add.w	r9, r2, #3
 8000e54:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000e58:	e015      	b.n	8000e86 <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8000e5a:	f106 0903 	add.w	r9, r6, #3
 8000e5e:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 8000e62:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8000e64:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8000e68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8000e6c:	6a29      	ldr	r1, [r5, #32]
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	b2b3      	uxth	r3, r6
 8000e72:	b2e2      	uxtb	r2, r4
 8000e74:	4640      	mov	r0, r8
 8000e76:	f002 fdd2 	bl	8003a1e <USB_WritePacket>

    ep->xfer_buff  += len;
 8000e7a:	6a2b      	ldr	r3, [r5, #32]
 8000e7c:	4433      	add	r3, r6
 8000e7e:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8000e80:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8000e82:	4433      	add	r3, r6
 8000e84:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000e86:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8000e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8000e92:	454b      	cmp	r3, r9
 8000e94:	d312      	bcc.n	8000ebc <PCD_WriteEmptyTxFifo+0x9c>
 8000e96:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8000e9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8000e9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d20a      	bcs.n	8000ebc <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8000ea6:	b14b      	cbz	r3, 8000ebc <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8000ea8:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8000eaa:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8000eae:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8000eb2:	69d6      	ldr	r6, [r2, #28]
 8000eb4:	429e      	cmp	r6, r3
 8000eb6:	d3d0      	bcc.n	8000e5a <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8000eb8:	461e      	mov	r6, r3
 8000eba:	e7ce      	b.n	8000e5a <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8000ebc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8000ec0:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8000ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d80f      	bhi.n	8000eec <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000ecc:	f004 040f 	and.w	r4, r4, #15
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000ed4:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 8000ed8:	ea23 0302 	bic.w	r3, r3, r2
 8000edc:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	e000      	b.n	8000ee6 <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 8000ee4:	2001      	movs	r0, #1
}
 8000ee6:	b003      	add	sp, #12
 8000ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7fa      	b.n	8000ee6 <PCD_WriteEmptyTxFifo+0xc6>

08000ef0 <HAL_PCD_Init>:
{
 8000ef0:	b530      	push	{r4, r5, lr}
 8000ef2:	b083      	sub	sp, #12
  if (hpcd == NULL)
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	d07a      	beq.n	8000fee <HAL_PCD_Init+0xfe>
 8000ef8:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000efa:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8000efe:	b1ab      	cbz	r3, 8000f2c <HAL_PCD_Init+0x3c>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f00:	2303      	movs	r3, #3
 8000f02:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  __HAL_PCD_DISABLE(hpcd);
 8000f06:	6820      	ldr	r0, [r4, #0]
 8000f08:	f002 fbb0 	bl	800366c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f0c:	7c23      	ldrb	r3, [r4, #16]
 8000f0e:	f88d 3000 	strb.w	r3, [sp]
 8000f12:	1d23      	adds	r3, r4, #4
 8000f14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f16:	6820      	ldr	r0, [r4, #0]
 8000f18:	f002 fade 	bl	80034d8 <USB_CoreInit>
 8000f1c:	b158      	cbz	r0, 8000f36 <HAL_PCD_Init+0x46>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8000f24:	2501      	movs	r5, #1
}
 8000f26:	4628      	mov	r0, r5
 8000f28:	b003      	add	sp, #12
 8000f2a:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000f2c:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8000f30:	f004 fb08 	bl	8005544 <HAL_PCD_MspInit>
 8000f34:	e7e4      	b.n	8000f00 <HAL_PCD_Init+0x10>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000f36:	2100      	movs	r1, #0
 8000f38:	6820      	ldr	r0, [r4, #0]
 8000f3a:	f002 ff86 	bl	8003e4a <USB_SetCurrentMode>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	b908      	cbnz	r0, 8000f46 <HAL_PCD_Init+0x56>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f42:	4603      	mov	r3, r0
 8000f44:	e017      	b.n	8000f76 <HAL_PCD_Init+0x86>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8000f4c:	2501      	movs	r5, #1
 8000f4e:	e7ea      	b.n	8000f26 <HAL_PCD_Init+0x36>
    hpcd->IN_ep[i].is_in = 1U;
 8000f50:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8000f54:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000f58:	2001      	movs	r0, #1
 8000f5a:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8000f5c:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f5e:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f60:	2000      	movs	r0, #0
 8000f62:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f64:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f66:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f68:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8000f6c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000f70:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f72:	3301      	adds	r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	7920      	ldrb	r0, [r4, #4]
 8000f78:	4298      	cmp	r0, r3
 8000f7a:	d8e9      	bhi.n	8000f50 <HAL_PCD_Init+0x60>
 8000f7c:	e016      	b.n	8000fac <HAL_PCD_Init+0xbc>
    hpcd->OUT_ep[i].is_in = 0U;
 8000f7e:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8000f82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000f86:	2100      	movs	r1, #0
 8000f88:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8000f8c:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f90:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f94:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f98:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f9c:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8000fa0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000fa4:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa8:	3201      	adds	r2, #1
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	4290      	cmp	r0, r2
 8000fae:	d8e6      	bhi.n	8000f7e <HAL_PCD_Init+0x8e>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fb0:	7c23      	ldrb	r3, [r4, #16]
 8000fb2:	f88d 3000 	strb.w	r3, [sp]
 8000fb6:	1d23      	adds	r3, r4, #4
 8000fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fba:	6820      	ldr	r0, [r4, #0]
 8000fbc:	f002 fbac 	bl	8003718 <USB_DevInit>
 8000fc0:	4605      	mov	r5, r0
 8000fc2:	b958      	cbnz	r0, 8000fdc <HAL_PCD_Init+0xec>
  hpcd->USB_Address = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (hpcd->Init.lpm_enable == 1U)
 8000fce:	7b23      	ldrb	r3, [r4, #12]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d008      	beq.n	8000fe6 <HAL_PCD_Init+0xf6>
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fd4:	6820      	ldr	r0, [r4, #0]
 8000fd6:	f002 fef7 	bl	8003dc8 <USB_DevDisconnect>
  return HAL_OK;
 8000fda:	e7a4      	b.n	8000f26 <HAL_PCD_Init+0x36>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8000fe2:	2501      	movs	r5, #1
 8000fe4:	e79f      	b.n	8000f26 <HAL_PCD_Init+0x36>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f000 fd5a 	bl	8001aa0 <HAL_PCDEx_ActivateLPM>
 8000fec:	e7f2      	b.n	8000fd4 <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
 8000fee:	2501      	movs	r5, #1
 8000ff0:	e799      	b.n	8000f26 <HAL_PCD_Init+0x36>

08000ff2 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ff2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 8000ff4:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8000ff8:	2a01      	cmp	r2, #1
 8000ffa:	d01a      	beq.n	8001032 <HAL_PCD_Start+0x40>
{
 8000ffc:	b510      	push	{r4, lr}
 8000ffe:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001000:	2201      	movs	r2, #1
 8001002:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800100c:	d002      	beq.n	8001014 <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 800100e:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001010:	2a01      	cmp	r2, #1
 8001012:	d009      	beq.n	8001028 <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 8001014:	6820      	ldr	r0, [r4, #0]
 8001016:	f002 fb23 	bl	8003660 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800101a:	6820      	ldr	r0, [r4, #0]
 800101c:	f002 fec6 	bl	8003dac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001020:	2000      	movs	r0, #0
 8001022:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001026:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800102a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800102e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001030:	e7f0      	b.n	8001014 <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 8001032:	2002      	movs	r0, #2
}
 8001034:	4770      	bx	lr

08001036 <HAL_PCD_Stop>:
{
 8001036:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001038:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hpcd);
 800103a:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 800103e:	2b01      	cmp	r3, #1
 8001040:	d01d      	beq.n	800107e <HAL_PCD_Stop+0x48>
 8001042:	4604      	mov	r4, r0
 8001044:	2301      	movs	r3, #1
 8001046:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 800104a:	4628      	mov	r0, r5
 800104c:	f002 fb0e 	bl	800366c <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001050:	6820      	ldr	r0, [r4, #0]
 8001052:	f002 feb9 	bl	8003dc8 <USB_DevDisconnect>
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001056:	2110      	movs	r1, #16
 8001058:	6820      	ldr	r0, [r4, #0]
 800105a:	f002 fb0d 	bl	8003678 <USB_FlushTxFifo>
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800105e:	68eb      	ldr	r3, [r5, #12]
 8001060:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001064:	d002      	beq.n	800106c <HAL_PCD_Stop+0x36>
      (hpcd->Init.battery_charging_enable == 1U))
 8001066:	7b63      	ldrb	r3, [r4, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001068:	2b01      	cmp	r3, #1
 800106a:	d003      	beq.n	8001074 <HAL_PCD_Stop+0x3e>
  __HAL_UNLOCK(hpcd);
 800106c:	2000      	movs	r0, #0
 800106e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001072:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001074:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8001076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800107a:	63ab      	str	r3, [r5, #56]	@ 0x38
 800107c:	e7f6      	b.n	800106c <HAL_PCD_Stop+0x36>
  __HAL_LOCK(hpcd);
 800107e:	2002      	movs	r0, #2
 8001080:	e7f7      	b.n	8001072 <HAL_PCD_Stop+0x3c>
	...

08001084 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001084:	b570      	push	{r4, r5, r6, lr}
 8001086:	4604      	mov	r4, r0
 8001088:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800108a:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800108c:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800108e:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8001092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001096:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001098:	79a1      	ldrb	r1, [r4, #6]
 800109a:	2901      	cmp	r1, #1
 800109c:	d011      	beq.n	80010c2 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800109e:	4938      	ldr	r1, [pc, #224]	@ (8001180 <PCD_EP_OutXfrComplete_int+0xfc>)
 80010a0:	428e      	cmp	r6, r1
 80010a2:	d056      	beq.n	8001152 <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80010a4:	b93d      	cbnz	r5, 80010b6 <PCD_EP_OutXfrComplete_int+0x32>
 80010a6:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 80010aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80010ae:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d05e      	beq.n	8001174 <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80010b6:	b2e9      	uxtb	r1, r5
 80010b8:	4620      	mov	r0, r4
 80010ba:	f004 fb15 	bl	80056e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 80010be:	2000      	movs	r0, #0
 80010c0:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80010c2:	f012 0f08 	tst.w	r2, #8
 80010c6:	d009      	beq.n	80010dc <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80010c8:	492e      	ldr	r1, [pc, #184]	@ (8001184 <PCD_EP_OutXfrComplete_int+0x100>)
 80010ca:	428e      	cmp	r6, r1
 80010cc:	d9f7      	bls.n	80010be <PCD_EP_OutXfrComplete_int+0x3a>
 80010ce:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80010d2:	d0f4      	beq.n	80010be <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80010d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	e7f0      	b.n	80010be <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80010dc:	f012 0f20 	tst.w	r2, #32
 80010e0:	d002      	beq.n	80010e8 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80010e2:	2220      	movs	r2, #32
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	e7ea      	b.n	80010be <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80010e8:	f012 0f28 	tst.w	r2, #40	@ 0x28
 80010ec:	d1e7      	bne.n	80010be <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80010ee:	4925      	ldr	r1, [pc, #148]	@ (8001184 <PCD_EP_OutXfrComplete_int+0x100>)
 80010f0:	428e      	cmp	r6, r1
 80010f2:	d906      	bls.n	8001102 <PCD_EP_OutXfrComplete_int+0x7e>
 80010f4:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80010f8:	d003      	beq.n	8001102 <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80010fa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	e7dd      	b.n	80010be <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001102:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001106:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800110a:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001114:	1acb      	subs	r3, r1, r3
 8001116:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 800111a:	b97d      	cbnz	r5, 800113c <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 800111c:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001120:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001124:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 8001128:	b16a      	cbz	r2, 8001146 <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 800112a:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800112e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001132:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 8001136:	4419      	add	r1, r3
 8001138:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800113c:	b2e9      	uxtb	r1, r5
 800113e:	4620      	mov	r0, r4
 8001140:	f004 fad2 	bl	80056e8 <HAL_PCD_DataOutStageCallback>
 8001144:	e7bb      	b.n	80010be <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001146:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800114a:	2101      	movs	r1, #1
 800114c:	f002 febc 	bl	8003ec8 <USB_EP0_OutStart>
 8001150:	e7f4      	b.n	800113c <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001152:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001156:	d003      	beq.n	8001160 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001158:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	e7ae      	b.n	80010be <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001160:	f012 0f20 	tst.w	r2, #32
 8001164:	d001      	beq.n	800116a <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001166:	2220      	movs	r2, #32
 8001168:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800116a:	b2e9      	uxtb	r1, r5
 800116c:	4620      	mov	r0, r4
 800116e:	f004 fabb 	bl	80056e8 <HAL_PCD_DataOutStageCallback>
 8001172:	e7a4      	b.n	80010be <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001174:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001178:	2100      	movs	r1, #0
 800117a:	f002 fea5 	bl	8003ec8 <USB_EP0_OutStart>
 800117e:	e79a      	b.n	80010b6 <PCD_EP_OutXfrComplete_int+0x32>
 8001180:	4f54310a 	.word	0x4f54310a
 8001184:	4f54300a 	.word	0x4f54300a

08001188 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800118c:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800118e:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001190:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001194:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001198:	4a0e      	ldr	r2, [pc, #56]	@ (80011d4 <PCD_EP_OutSetupPacket_int+0x4c>)
 800119a:	4295      	cmp	r5, r2
 800119c:	d907      	bls.n	80011ae <PCD_EP_OutSetupPacket_int+0x26>
 800119e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80011a2:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 80011a6:	d002      	beq.n	80011ae <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80011a8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011ac:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80011ae:	4620      	mov	r0, r4
 80011b0:	f004 fa92 	bl	80056d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80011b4:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <PCD_EP_OutSetupPacket_int+0x4c>)
 80011b6:	429d      	cmp	r5, r3
 80011b8:	d902      	bls.n	80011c0 <PCD_EP_OutSetupPacket_int+0x38>
 80011ba:	79a3      	ldrb	r3, [r4, #6]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d001      	beq.n	80011c4 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 80011c0:	2000      	movs	r0, #0
 80011c2:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80011c4:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80011c8:	2101      	movs	r1, #1
 80011ca:	6820      	ldr	r0, [r4, #0]
 80011cc:	f002 fe7c 	bl	8003ec8 <USB_EP0_OutStart>
 80011d0:	e7f6      	b.n	80011c0 <PCD_EP_OutSetupPacket_int+0x38>
 80011d2:	bf00      	nop
 80011d4:	4f54300a 	.word	0x4f54300a

080011d8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80011d8:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d00c      	beq.n	80011fa <HAL_PCD_SetAddress+0x22>
{
 80011e0:	b510      	push	{r4, lr}
 80011e2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80011e4:	2301      	movs	r3, #1
 80011e6:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80011ea:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80011ec:	6800      	ldr	r0, [r0, #0]
 80011ee:	f002 fdcd 	bl	8003d8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80011f8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80011fa:	2002      	movs	r0, #2
}
 80011fc:	4770      	bx	lr

080011fe <HAL_PCD_EP_Open>:
{
 80011fe:	b538      	push	{r3, r4, r5, lr}
 8001200:	4605      	mov	r5, r0
 8001202:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001204:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001208:	d12b      	bne.n	8001262 <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800120a:	f001 0e0f 	and.w	lr, r1, #15
 800120e:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8001212:	00a4      	lsls	r4, r4, #2
 8001214:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 8001218:	4404      	add	r4, r0
 800121a:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 800121c:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8001220:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001224:	2000      	movs	r0, #0
 8001226:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 800122a:	f00c 0c0f 	and.w	ip, ip, #15
 800122e:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001232:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001236:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8001238:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 800123a:	784a      	ldrb	r2, [r1, #1]
 800123c:	b10a      	cbz	r2, 8001242 <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 800123e:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 8001242:	2b02      	cmp	r3, #2
 8001244:	d01c      	beq.n	8001280 <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 8001246:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 800124a:	2b01      	cmp	r3, #1
 800124c:	d01b      	beq.n	8001286 <HAL_PCD_EP_Open+0x88>
 800124e:	2301      	movs	r3, #1
 8001250:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001254:	6828      	ldr	r0, [r5, #0]
 8001256:	f002 fb37 	bl	80038c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800125a:	2000      	movs	r0, #0
 800125c:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 8001260:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001262:	f001 000f 	and.w	r0, r1, #15
 8001266:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 800126a:	0089      	lsls	r1, r1, #2
 800126c:	3110      	adds	r1, #16
 800126e:	4429      	add	r1, r5
 8001270:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001272:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001276:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800127a:	2401      	movs	r4, #1
 800127c:	7544      	strb	r4, [r0, #21]
 800127e:	e7d4      	b.n	800122a <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	714b      	strb	r3, [r1, #5]
 8001284:	e7df      	b.n	8001246 <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 8001286:	2002      	movs	r0, #2
 8001288:	e7ea      	b.n	8001260 <HAL_PCD_EP_Open+0x62>

0800128a <HAL_PCD_EP_Receive>:
{
 800128a:	b510      	push	{r4, lr}
 800128c:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800128e:	f001 0c0f 	and.w	ip, r1, #15
 8001292:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8001296:	0089      	lsls	r1, r1, #2
 8001298:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800129c:	4401      	add	r1, r0
 800129e:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80012a0:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80012a4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80012a8:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 80012ac:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 80012b6:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80012ba:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 80012be:	7982      	ldrb	r2, [r0, #6]
 80012c0:	2a01      	cmp	r2, #1
 80012c2:	d004      	beq.n	80012ce <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80012c4:	6800      	ldr	r0, [r0, #0]
 80012c6:	f002 fbc1 	bl	8003a4c <USB_EPStartXfer>
}
 80012ca:	2000      	movs	r0, #0
 80012cc:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80012ce:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 80012d2:	e7f7      	b.n	80012c4 <HAL_PCD_EP_Receive+0x3a>

080012d4 <HAL_PCD_EP_Transmit>:
{
 80012d4:	b510      	push	{r4, lr}
 80012d6:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012d8:	f001 0c0f 	and.w	ip, r1, #15
 80012dc:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80012e0:	0089      	lsls	r1, r1, #2
 80012e2:	3110      	adds	r1, #16
 80012e4:	4401      	add	r1, r0
 80012e6:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80012e8:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80012ec:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80012f0:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 80012f4:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 80012fe:	2301      	movs	r3, #1
 8001300:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001304:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 8001308:	7982      	ldrb	r2, [r0, #6]
 800130a:	429a      	cmp	r2, r3
 800130c:	d004      	beq.n	8001318 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800130e:	6800      	ldr	r0, [r0, #0]
 8001310:	f002 fb9c 	bl	8003a4c <USB_EPStartXfer>
}
 8001314:	2000      	movs	r0, #0
 8001316:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001318:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 800131c:	e7f7      	b.n	800130e <HAL_PCD_EP_Transmit+0x3a>

0800131e <HAL_PCD_EP_SetStall>:
{
 800131e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001320:	f001 050f 	and.w	r5, r1, #15
 8001324:	7902      	ldrb	r2, [r0, #4]
 8001326:	42aa      	cmp	r2, r5
 8001328:	d338      	bcc.n	800139c <HAL_PCD_EP_SetStall+0x7e>
 800132a:	4604      	mov	r4, r0
 800132c:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 800132e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001332:	d11f      	bne.n	8001374 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8001334:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001338:	0089      	lsls	r1, r1, #2
 800133a:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800133e:	4401      	add	r1, r0
 8001340:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001342:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001346:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 8001350:	2301      	movs	r3, #1
 8001352:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001354:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8001356:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800135a:	2b01      	cmp	r3, #1
 800135c:	d020      	beq.n	80013a0 <HAL_PCD_EP_SetStall+0x82>
 800135e:	2301      	movs	r3, #1
 8001360:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001364:	6820      	ldr	r0, [r4, #0]
 8001366:	f002 fcb6 	bl	8003cd6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800136a:	b185      	cbz	r5, 800138e <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 800136c:	2000      	movs	r0, #0
 800136e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001372:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001374:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8001378:	0089      	lsls	r1, r1, #2
 800137a:	3110      	adds	r1, #16
 800137c:	4401      	add	r1, r0
 800137e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001380:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001384:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001388:	2201      	movs	r2, #1
 800138a:	755a      	strb	r2, [r3, #21]
 800138c:	e7e0      	b.n	8001350 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800138e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001392:	79a1      	ldrb	r1, [r4, #6]
 8001394:	6820      	ldr	r0, [r4, #0]
 8001396:	f002 fd97 	bl	8003ec8 <USB_EP0_OutStart>
 800139a:	e7e7      	b.n	800136c <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 800139c:	2001      	movs	r0, #1
 800139e:	e7e8      	b.n	8001372 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80013a0:	2002      	movs	r0, #2
 80013a2:	e7e6      	b.n	8001372 <HAL_PCD_EP_SetStall+0x54>

080013a4 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013a4:	f001 030f 	and.w	r3, r1, #15
 80013a8:	7902      	ldrb	r2, [r0, #4]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d330      	bcc.n	8001410 <HAL_PCD_EP_ClrStall+0x6c>
{
 80013ae:	b510      	push	{r4, lr}
 80013b0:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80013b2:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80013b6:	d11e      	bne.n	80013f6 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013b8:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80013bc:	0089      	lsls	r1, r1, #2
 80013be:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80013c2:	4401      	add	r1, r0
 80013c4:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80013c6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80013ca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80013ce:	2000      	movs	r0, #0
 80013d0:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 80013d4:	2200      	movs	r2, #0
 80013d6:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013d8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80013da:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d018      	beq.n	8001414 <HAL_PCD_EP_ClrStall+0x70>
 80013e2:	2301      	movs	r3, #1
 80013e4:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80013e8:	6820      	ldr	r0, [r4, #0]
 80013ea:	f002 fca1 	bl	8003d30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80013f4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013f6:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80013fa:	0089      	lsls	r1, r1, #2
 80013fc:	3110      	adds	r1, #16
 80013fe:	4401      	add	r1, r0
 8001400:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001402:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001406:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800140a:	2001      	movs	r0, #1
 800140c:	7550      	strb	r0, [r2, #21]
 800140e:	e7e1      	b.n	80013d4 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8001410:	2001      	movs	r0, #1
}
 8001412:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8001414:	2002      	movs	r0, #2
 8001416:	e7ed      	b.n	80013f4 <HAL_PCD_EP_ClrStall+0x50>

08001418 <HAL_PCD_EP_Abort>:
{
 8001418:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 800141a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800141e:	d10c      	bne.n	800143a <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001420:	f001 010f 	and.w	r1, r1, #15
 8001424:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001428:	0089      	lsls	r1, r1, #2
 800142a:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800142e:	4401      	add	r1, r0
 8001430:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001432:	6800      	ldr	r0, [r0, #0]
 8001434:	f002 fa94 	bl	8003960 <USB_EPStopXfer>
}
 8001438:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800143a:	f001 010f 	and.w	r1, r1, #15
 800143e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001442:	0089      	lsls	r1, r1, #2
 8001444:	3110      	adds	r1, #16
 8001446:	4401      	add	r1, r0
 8001448:	3104      	adds	r1, #4
 800144a:	e7f2      	b.n	8001432 <HAL_PCD_EP_Abort+0x1a>

0800144c <HAL_PCD_IRQHandler>:
{
 800144c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001450:	b083      	sub	sp, #12
 8001452:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001454:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001456:	4628      	mov	r0, r5
 8001458:	f002 fcf3 	bl	8003e42 <USB_GetMode>
 800145c:	b110      	cbz	r0, 8001464 <HAL_PCD_IRQHandler+0x18>
}
 800145e:	b003      	add	sp, #12
 8001460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001464:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001466:	6820      	ldr	r0, [r4, #0]
 8001468:	f002 fcbc 	bl	8003de4 <USB_ReadInterrupts>
 800146c:	2800      	cmp	r0, #0
 800146e:	d0f6      	beq.n	800145e <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001470:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800147a:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800147e:	6820      	ldr	r0, [r4, #0]
 8001480:	f002 fcb0 	bl	8003de4 <USB_ReadInterrupts>
 8001484:	f010 0f02 	tst.w	r0, #2
 8001488:	d004      	beq.n	8001494 <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800148a:	6822      	ldr	r2, [r4, #0]
 800148c:	6953      	ldr	r3, [r2, #20]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001494:	6820      	ldr	r0, [r4, #0]
 8001496:	f002 fca5 	bl	8003de4 <USB_ReadInterrupts>
 800149a:	f010 0f10 	tst.w	r0, #16
 800149e:	d016      	beq.n	80014ce <HAL_PCD_IRQHandler+0x82>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014a0:	6822      	ldr	r2, [r4, #0]
 80014a2:	6993      	ldr	r3, [r2, #24]
 80014a4:	f023 0310 	bic.w	r3, r3, #16
 80014a8:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 80014aa:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80014ae:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014b2:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 80014b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80014ba:	d06a      	beq.n	8001592 <HAL_PCD_IRQHandler+0x146>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80014bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80014c0:	f000 808d 	beq.w	80015de <HAL_PCD_IRQHandler+0x192>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014c4:	6822      	ldr	r2, [r4, #0]
 80014c6:	6993      	ldr	r3, [r2, #24]
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014ce:	6820      	ldr	r0, [r4, #0]
 80014d0:	f002 fc88 	bl	8003de4 <USB_ReadInterrupts>
 80014d4:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 80014d8:	f040 8093 	bne.w	8001602 <HAL_PCD_IRQHandler+0x1b6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014dc:	6820      	ldr	r0, [r4, #0]
 80014de:	f002 fc81 	bl	8003de4 <USB_ReadInterrupts>
 80014e2:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 80014e6:	f040 80fc 	bne.w	80016e2 <HAL_PCD_IRQHandler+0x296>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014ea:	6820      	ldr	r0, [r4, #0]
 80014ec:	f002 fc7a 	bl	8003de4 <USB_ReadInterrupts>
 80014f0:	2800      	cmp	r0, #0
 80014f2:	f2c0 817d 	blt.w	80017f0 <HAL_PCD_IRQHandler+0x3a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80014f6:	6820      	ldr	r0, [r4, #0]
 80014f8:	f002 fc74 	bl	8003de4 <USB_ReadInterrupts>
 80014fc:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8001500:	d009      	beq.n	8001516 <HAL_PCD_IRQHandler+0xca>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	f013 0f01 	tst.w	r3, #1
 8001508:	f040 818a 	bne.w	8001820 <HAL_PCD_IRQHandler+0x3d4>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800150c:	6822      	ldr	r2, [r4, #0]
 800150e:	6953      	ldr	r3, [r2, #20]
 8001510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001514:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001516:	6820      	ldr	r0, [r4, #0]
 8001518:	f002 fc64 	bl	8003de4 <USB_ReadInterrupts>
 800151c:	f010 6f00 	tst.w	r0, #134217728	@ 0x8000000
 8001520:	d015      	beq.n	800154e <HAL_PCD_IRQHandler+0x102>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001522:	6822      	ldr	r2, [r4, #0]
 8001524:	6953      	ldr	r3, [r2, #20]
 8001526:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800152a:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800152c:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8001530:	2b00      	cmp	r3, #0
 8001532:	f040 8179 	bne.w	8001828 <HAL_PCD_IRQHandler+0x3dc>
        hpcd->LPM_State = LPM_L1;
 8001536:	2101      	movs	r1, #1
 8001538:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001540:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8001544:	f8c4 34d0 	str.w	r3, [r4, #1232]	@ 0x4d0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001548:	4620      	mov	r0, r4
 800154a:	f000 fabd 	bl	8001ac8 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800154e:	6820      	ldr	r0, [r4, #0]
 8001550:	f002 fc48 	bl	8003de4 <USB_ReadInterrupts>
 8001554:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8001558:	f040 816a 	bne.w	8001830 <HAL_PCD_IRQHandler+0x3e4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800155c:	6820      	ldr	r0, [r4, #0]
 800155e:	f002 fc41 	bl	8003de4 <USB_ReadInterrupts>
 8001562:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8001566:	f040 81b6 	bne.w	80018d6 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800156a:	6820      	ldr	r0, [r4, #0]
 800156c:	f002 fc3a 	bl	8003de4 <USB_ReadInterrupts>
 8001570:	f010 0f08 	tst.w	r0, #8
 8001574:	f040 81c7 	bne.w	8001906 <HAL_PCD_IRQHandler+0x4ba>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001578:	6820      	ldr	r0, [r4, #0]
 800157a:	f002 fc33 	bl	8003de4 <USB_ReadInterrupts>
 800157e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8001582:	f000 81da 	beq.w	800193a <HAL_PCD_IRQHandler+0x4ee>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001586:	69ab      	ldr	r3, [r5, #24]
 8001588:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800158c:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800158e:	2601      	movs	r6, #1
 8001590:	e1c3      	b.n	800191a <HAL_PCD_IRQHandler+0x4ce>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001592:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001596:	ea18 0f03 	tst.w	r8, r3
 800159a:	d093      	beq.n	80014c4 <HAL_PCD_IRQHandler+0x78>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800159c:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 80015aa:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 80015ae:	f3c8 120a 	ubfx	r2, r8, #4, #11
 80015b2:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 80015b6:	4628      	mov	r0, r5
 80015b8:	f002 fb6a 	bl	8003c90 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015bc:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 80015c0:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 80015c4:	4453      	add	r3, sl
 80015c6:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015ca:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 80015ce:	9a01      	ldr	r2, [sp, #4]
 80015d0:	444a      	add	r2, r9
 80015d2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80015d6:	4453      	add	r3, sl
 80015d8:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 80015dc:	e772      	b.n	80014c4 <HAL_PCD_IRQHandler+0x78>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015de:	2208      	movs	r2, #8
 80015e0:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 80015e4:	4628      	mov	r0, r5
 80015e6:	f002 fb53 	bl	8003c90 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015ea:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80015ee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80015f2:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 80015f6:	f3c8 180a 	ubfx	r8, r8, #4, #11
 80015fa:	4442      	add	r2, r8
 80015fc:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 8001600:	e760      	b.n	80014c4 <HAL_PCD_IRQHandler+0x78>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001602:	6820      	ldr	r0, [r4, #0]
 8001604:	f002 fbf2 	bl	8003dec <USB_ReadDevAllOutEpInterrupt>
 8001608:	4680      	mov	r8, r0
      epnum = 0U;
 800160a:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800160c:	e035      	b.n	800167a <HAL_PCD_IRQHandler+0x22e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800160e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001612:	2201      	movs	r2, #1
 8001614:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001618:	4649      	mov	r1, r9
 800161a:	4620      	mov	r0, r4
 800161c:	f7ff fd32 	bl	8001084 <PCD_EP_OutXfrComplete_int>
 8001620:	e03c      	b.n	800169c <HAL_PCD_IRQHandler+0x250>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001622:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001626:	2208      	movs	r2, #8
 8001628:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800162c:	4649      	mov	r1, r9
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff fdaa 	bl	8001188 <PCD_EP_OutSetupPacket_int>
 8001634:	e035      	b.n	80016a2 <HAL_PCD_IRQHandler+0x256>
            if (ep->is_iso_incomplete == 1U)
 8001636:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800163a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800163e:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8001642:	2b01      	cmp	r3, #1
 8001644:	d041      	beq.n	80016ca <HAL_PCD_IRQHandler+0x27e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001646:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800164a:	2202      	movs	r2, #2
 800164c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001650:	f01a 0f20 	tst.w	sl, #32
 8001654:	d004      	beq.n	8001660 <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001656:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800165a:	2220      	movs	r2, #32
 800165c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001660:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8001664:	d005      	beq.n	8001672 <HAL_PCD_IRQHandler+0x226>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001666:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800166a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800166e:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8001672:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001676:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800167a:	f1b8 0f00 	cmp.w	r8, #0
 800167e:	f43f af2d 	beq.w	80014dc <HAL_PCD_IRQHandler+0x90>
        if ((ep_intr & 0x1U) != 0U)
 8001682:	f018 0f01 	tst.w	r8, #1
 8001686:	d0f4      	beq.n	8001672 <HAL_PCD_IRQHandler+0x226>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001688:	fa5f fb89 	uxtb.w	fp, r9
 800168c:	4659      	mov	r1, fp
 800168e:	6820      	ldr	r0, [r4, #0]
 8001690:	f002 fbbc 	bl	8003e0c <USB_ReadDevOutEPInterrupt>
 8001694:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001696:	f010 0f01 	tst.w	r0, #1
 800169a:	d1b8      	bne.n	800160e <HAL_PCD_IRQHandler+0x1c2>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800169c:	f01a 0f08 	tst.w	sl, #8
 80016a0:	d1bf      	bne.n	8001622 <HAL_PCD_IRQHandler+0x1d6>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80016a2:	f01a 0f10 	tst.w	sl, #16
 80016a6:	d004      	beq.n	80016b2 <HAL_PCD_IRQHandler+0x266>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80016a8:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80016ac:	2210      	movs	r2, #16
 80016ae:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80016b2:	f01a 0f02 	tst.w	sl, #2
 80016b6:	d0cb      	beq.n	8001650 <HAL_PCD_IRQHandler+0x204>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80016b8:	696b      	ldr	r3, [r5, #20]
 80016ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80016be:	d0ba      	beq.n	8001636 <HAL_PCD_IRQHandler+0x1ea>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	e7b5      	b.n	8001636 <HAL_PCD_IRQHandler+0x1ea>
              ep->is_iso_incomplete = 0U;
 80016ca:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80016ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80016d8:	4659      	mov	r1, fp
 80016da:	4620      	mov	r0, r4
 80016dc:	f004 f854 	bl	8005788 <HAL_PCD_ISOOUTIncompleteCallback>
 80016e0:	e7b1      	b.n	8001646 <HAL_PCD_IRQHandler+0x1fa>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016e2:	6820      	ldr	r0, [r4, #0]
 80016e4:	f002 fb8a 	bl	8003dfc <USB_ReadDevAllInEpInterrupt>
 80016e8:	4680      	mov	r8, r0
      epnum = 0U;
 80016ea:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80016ec:	e025      	b.n	800173a <HAL_PCD_IRQHandler+0x2ee>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016ee:	4659      	mov	r1, fp
 80016f0:	4620      	mov	r0, r4
 80016f2:	f004 f805 	bl	8005700 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016f6:	f01a 0f08 	tst.w	sl, #8
 80016fa:	d004      	beq.n	8001706 <HAL_PCD_IRQHandler+0x2ba>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016fc:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001700:	2208      	movs	r2, #8
 8001702:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001706:	f01a 0f10 	tst.w	sl, #16
 800170a:	d004      	beq.n	8001716 <HAL_PCD_IRQHandler+0x2ca>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800170c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001710:	2210      	movs	r2, #16
 8001712:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001716:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800171a:	d004      	beq.n	8001726 <HAL_PCD_IRQHandler+0x2da>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800171c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001720:	2240      	movs	r2, #64	@ 0x40
 8001722:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001726:	f01a 0f02 	tst.w	sl, #2
 800172a:	d140      	bne.n	80017ae <HAL_PCD_IRQHandler+0x362>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800172c:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8001730:	d159      	bne.n	80017e6 <HAL_PCD_IRQHandler+0x39a>
        epnum++;
 8001732:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001736:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800173a:	f1b8 0f00 	cmp.w	r8, #0
 800173e:	f43f aed4 	beq.w	80014ea <HAL_PCD_IRQHandler+0x9e>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001742:	f018 0f01 	tst.w	r8, #1
 8001746:	d0f4      	beq.n	8001732 <HAL_PCD_IRQHandler+0x2e6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001748:	fa5f fb89 	uxtb.w	fp, r9
 800174c:	4659      	mov	r1, fp
 800174e:	6820      	ldr	r0, [r4, #0]
 8001750:	f002 fb65 	bl	8003e1e <USB_ReadDevInEPInterrupt>
 8001754:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001756:	f010 0f01 	tst.w	r0, #1
 800175a:	d0cc      	beq.n	80016f6 <HAL_PCD_IRQHandler+0x2aa>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800175c:	f009 020f 	and.w	r2, r9, #15
 8001760:	2101      	movs	r1, #1
 8001762:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001768:	ea23 0302 	bic.w	r3, r3, r2
 800176c:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800176e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001772:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 8001776:	79a3      	ldrb	r3, [r4, #6]
 8001778:	428b      	cmp	r3, r1
 800177a:	d1b8      	bne.n	80016ee <HAL_PCD_IRQHandler+0x2a2>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800177c:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001780:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001784:	6a1a      	ldr	r2, [r3, #32]
 8001786:	69d9      	ldr	r1, [r3, #28]
 8001788:	440a      	add	r2, r1
 800178a:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800178c:	f1b9 0f00 	cmp.w	r9, #0
 8001790:	d1ad      	bne.n	80016ee <HAL_PCD_IRQHandler+0x2a2>
 8001792:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001796:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800179a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1a6      	bne.n	80016ee <HAL_PCD_IRQHandler+0x2a2>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017a0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80017a4:	2101      	movs	r1, #1
 80017a6:	6820      	ldr	r0, [r4, #0]
 80017a8:	f002 fb8e 	bl	8003ec8 <USB_EP0_OutStart>
 80017ac:	e79f      	b.n	80016ee <HAL_PCD_IRQHandler+0x2a2>
            (void)USB_FlushTxFifo(USBx, epnum);
 80017ae:	4649      	mov	r1, r9
 80017b0:	4628      	mov	r0, r5
 80017b2:	f001 ff61 	bl	8003678 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 80017b6:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80017ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80017be:	7ddb      	ldrb	r3, [r3, #23]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d005      	beq.n	80017d0 <HAL_PCD_IRQHandler+0x384>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017c4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80017c8:	2202      	movs	r2, #2
 80017ca:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 80017ce:	e7ad      	b.n	800172c <HAL_PCD_IRQHandler+0x2e0>
              ep->is_iso_incomplete = 0U;
 80017d0:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80017d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80017d8:	2200      	movs	r2, #0
 80017da:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017dc:	4659      	mov	r1, fp
 80017de:	4620      	mov	r0, r4
 80017e0:	f003 ffd8 	bl	8005794 <HAL_PCD_ISOINIncompleteCallback>
 80017e4:	e7ee      	b.n	80017c4 <HAL_PCD_IRQHandler+0x378>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017e6:	4649      	mov	r1, r9
 80017e8:	4620      	mov	r0, r4
 80017ea:	f7ff fb19 	bl	8000e20 <PCD_WriteEmptyTxFifo>
 80017ee:	e7a0      	b.n	8001732 <HAL_PCD_IRQHandler+0x2e6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 80017f8:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d008      	beq.n	8001812 <HAL_PCD_IRQHandler+0x3c6>
        HAL_PCD_ResumeCallback(hpcd);
 8001800:	4620      	mov	r0, r4
 8001802:	f003 ffbb 	bl	800577c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001806:	6822      	ldr	r2, [r4, #0]
 8001808:	6953      	ldr	r3, [r2, #20]
 800180a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800180e:	6153      	str	r3, [r2, #20]
 8001810:	e671      	b.n	80014f6 <HAL_PCD_IRQHandler+0xaa>
        hpcd->LPM_State = LPM_L0;
 8001812:	2100      	movs	r1, #0
 8001814:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001818:	4620      	mov	r0, r4
 800181a:	f000 f955 	bl	8001ac8 <HAL_PCDEx_LPM_Callback>
 800181e:	e7f2      	b.n	8001806 <HAL_PCD_IRQHandler+0x3ba>
        HAL_PCD_SuspendCallback(hpcd);
 8001820:	4620      	mov	r0, r4
 8001822:	f003 ff93 	bl	800574c <HAL_PCD_SuspendCallback>
 8001826:	e671      	b.n	800150c <HAL_PCD_IRQHandler+0xc0>
        HAL_PCD_SuspendCallback(hpcd);
 8001828:	4620      	mov	r0, r4
 800182a:	f003 ff8f 	bl	800574c <HAL_PCD_SuspendCallback>
 800182e:	e68e      	b.n	800154e <HAL_PCD_IRQHandler+0x102>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001838:	2110      	movs	r1, #16
 800183a:	6820      	ldr	r0, [r4, #0]
 800183c:	f001 ff1c 	bl	8003678 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001840:	e01a      	b.n	8001878 <HAL_PCD_IRQHandler+0x42c>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001842:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001846:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 800184a:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800184e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8001852:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001856:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800185a:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800185e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8001862:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001866:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800186a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800186e:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8001872:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001876:	3601      	adds	r6, #1
 8001878:	7923      	ldrb	r3, [r4, #4]
 800187a:	42b3      	cmp	r3, r6
 800187c:	d8e1      	bhi.n	8001842 <HAL_PCD_IRQHandler+0x3f6>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001884:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001886:	7be3      	ldrb	r3, [r4, #15]
 8001888:	b1db      	cbz	r3, 80018c2 <HAL_PCD_IRQHandler+0x476>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800188a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800188e:	f043 030b 	orr.w	r3, r3, #11
 8001892:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001898:	f043 030b 	orr.w	r3, r3, #11
 800189c:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800189e:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 80018a2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80018a6:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018aa:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80018ae:	79a1      	ldrb	r1, [r4, #6]
 80018b0:	6820      	ldr	r0, [r4, #0]
 80018b2:	f002 fb09 	bl	8003ec8 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018b6:	6822      	ldr	r2, [r4, #0]
 80018b8:	6953      	ldr	r3, [r2, #20]
 80018ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018be:	6153      	str	r3, [r2, #20]
 80018c0:	e64c      	b.n	800155c <HAL_PCD_IRQHandler+0x110>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	f242 032b 	movw	r3, #8235	@ 0x202b
 80018c8:	4313      	orrs	r3, r2
 80018ca:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	f043 030b 	orr.w	r3, r3, #11
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	e7e3      	b.n	800189e <HAL_PCD_IRQHandler+0x452>
      (void)USB_ActivateSetup(hpcd->Instance);
 80018d6:	6820      	ldr	r0, [r4, #0]
 80018d8:	f002 fae8 	bl	8003eac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018dc:	6820      	ldr	r0, [r4, #0]
 80018de:	f001 ffe1 	bl	80038a4 <USB_GetDevSpeed>
 80018e2:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018e4:	6826      	ldr	r6, [r4, #0]
 80018e6:	f000 ff33 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 80018ea:	4601      	mov	r1, r0
 80018ec:	79e2      	ldrb	r2, [r4, #7]
 80018ee:	4630      	mov	r0, r6
 80018f0:	f001 fe44 	bl	800357c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80018f4:	4620      	mov	r0, r4
 80018f6:	f003 ff14 	bl	8005722 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018fa:	6822      	ldr	r2, [r4, #0]
 80018fc:	6953      	ldr	r3, [r2, #20]
 80018fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001902:	6153      	str	r3, [r2, #20]
 8001904:	e631      	b.n	800156a <HAL_PCD_IRQHandler+0x11e>
      HAL_PCD_SOFCallback(hpcd);
 8001906:	4620      	mov	r0, r4
 8001908:	f003 ff05 	bl	8005716 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800190c:	6822      	ldr	r2, [r4, #0]
 800190e:	6953      	ldr	r3, [r2, #20]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	6153      	str	r3, [r2, #20]
 8001916:	e62f      	b.n	8001578 <HAL_PCD_IRQHandler+0x12c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001918:	3601      	adds	r6, #1
 800191a:	7923      	ldrb	r3, [r4, #4]
 800191c:	42b3      	cmp	r3, r6
 800191e:	d90c      	bls.n	800193a <HAL_PCD_IRQHandler+0x4ee>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001920:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001924:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001928:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 800192c:	2b01      	cmp	r3, #1
 800192e:	d1f3      	bne.n	8001918 <HAL_PCD_IRQHandler+0x4cc>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001930:	b2f1      	uxtb	r1, r6
 8001932:	4620      	mov	r0, r4
 8001934:	f7ff fd70 	bl	8001418 <HAL_PCD_EP_Abort>
 8001938:	e7ee      	b.n	8001918 <HAL_PCD_IRQHandler+0x4cc>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800193a:	6820      	ldr	r0, [r4, #0]
 800193c:	f002 fa52 	bl	8003de4 <USB_ReadInterrupts>
 8001940:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8001944:	d125      	bne.n	8001992 <HAL_PCD_IRQHandler+0x546>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001946:	6820      	ldr	r0, [r4, #0]
 8001948:	f002 fa4c 	bl	8003de4 <USB_ReadInterrupts>
 800194c:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8001950:	d058      	beq.n	8001a04 <HAL_PCD_IRQHandler+0x5b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001952:	2301      	movs	r3, #1
 8001954:	e026      	b.n	80019a4 <HAL_PCD_IRQHandler+0x558>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001956:	3601      	adds	r6, #1
 8001958:	7923      	ldrb	r3, [r4, #4]
 800195a:	42b3      	cmp	r3, r6
 800195c:	d91b      	bls.n	8001996 <HAL_PCD_IRQHandler+0x54a>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800195e:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001962:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001966:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800196a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800196e:	7e1b      	ldrb	r3, [r3, #24]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d1f0      	bne.n	8001956 <HAL_PCD_IRQHandler+0x50a>
 8001974:	2a00      	cmp	r2, #0
 8001976:	daee      	bge.n	8001956 <HAL_PCD_IRQHandler+0x50a>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001978:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800197c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001980:	2201      	movs	r2, #1
 8001982:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001984:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 8001988:	b2c9      	uxtb	r1, r1
 800198a:	4620      	mov	r0, r4
 800198c:	f7ff fd44 	bl	8001418 <HAL_PCD_EP_Abort>
 8001990:	e7e1      	b.n	8001956 <HAL_PCD_IRQHandler+0x50a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001992:	2601      	movs	r6, #1
 8001994:	e7e0      	b.n	8001958 <HAL_PCD_IRQHandler+0x50c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001996:	6822      	ldr	r2, [r4, #0]
 8001998:	6953      	ldr	r3, [r2, #20]
 800199a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800199e:	6153      	str	r3, [r2, #20]
 80019a0:	e7d1      	b.n	8001946 <HAL_PCD_IRQHandler+0x4fa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019a2:	3301      	adds	r3, #1
 80019a4:	7922      	ldrb	r2, [r4, #4]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d927      	bls.n	80019fa <HAL_PCD_IRQHandler+0x5ae>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80019aa:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80019ae:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019b2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80019b6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80019ba:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 80019be:	2a01      	cmp	r2, #1
 80019c0:	d1ef      	bne.n	80019a2 <HAL_PCD_IRQHandler+0x556>
 80019c2:	2900      	cmp	r1, #0
 80019c4:	daed      	bge.n	80019a2 <HAL_PCD_IRQHandler+0x556>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80019c6:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 80019ca:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019ce:	f012 0f01 	tst.w	r2, #1
 80019d2:	d1e6      	bne.n	80019a2 <HAL_PCD_IRQHandler+0x556>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80019d4:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80019d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80019dc:	2101      	movs	r1, #1
 80019de:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80019e2:	69aa      	ldr	r2, [r5, #24]
 80019e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019e8:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80019ea:	696a      	ldr	r2, [r5, #20]
 80019ec:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80019f0:	d1d7      	bne.n	80019a2 <HAL_PCD_IRQHandler+0x556>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019f8:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019fa:	6822      	ldr	r2, [r4, #0]
 80019fc:	6953      	ldr	r3, [r2, #20]
 80019fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a02:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a04:	6820      	ldr	r0, [r4, #0]
 8001a06:	f002 f9ed 	bl	8003de4 <USB_ReadInterrupts>
 8001a0a:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8001a0e:	d110      	bne.n	8001a32 <HAL_PCD_IRQHandler+0x5e6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a10:	6820      	ldr	r0, [r4, #0]
 8001a12:	f002 f9e7 	bl	8003de4 <USB_ReadInterrupts>
 8001a16:	f010 0f04 	tst.w	r0, #4
 8001a1a:	f43f ad20 	beq.w	800145e <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a22:	f015 0f04 	tst.w	r5, #4
 8001a26:	d10d      	bne.n	8001a44 <HAL_PCD_IRQHandler+0x5f8>
      hpcd->Instance->GOTGINT |= RegVal;
 8001a28:	6822      	ldr	r2, [r4, #0]
 8001a2a:	6853      	ldr	r3, [r2, #4]
 8001a2c:	432b      	orrs	r3, r5
 8001a2e:	6053      	str	r3, [r2, #4]
 8001a30:	e515      	b.n	800145e <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8001a32:	4620      	mov	r0, r4
 8001a34:	f003 feb4 	bl	80057a0 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a38:	6822      	ldr	r2, [r4, #0]
 8001a3a:	6953      	ldr	r3, [r2, #20]
 8001a3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001a40:	6153      	str	r3, [r2, #20]
 8001a42:	e7e5      	b.n	8001a10 <HAL_PCD_IRQHandler+0x5c4>
        HAL_PCD_DisconnectCallback(hpcd);
 8001a44:	4620      	mov	r0, r4
 8001a46:	f003 feb1 	bl	80057ac <HAL_PCD_DisconnectCallback>
 8001a4a:	e7ed      	b.n	8001a28 <HAL_PCD_IRQHandler+0x5dc>

08001a4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001a4c:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001a4e:	6804      	ldr	r4, [r0, #0]
 8001a50:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 8001a52:	b931      	cbnz	r1, 8001a62 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001a54:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001a58:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001a64:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a66:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e008      	b.n	8001a80 <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001a6e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8001a72:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001a76:	6849      	ldr	r1, [r1, #4]
 8001a78:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001a84:	428b      	cmp	r3, r1
 8001a86:	d3f2      	bcc.n	8001a6e <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001a88:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001a8c:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 8001a90:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8001a94:	6060      	str	r0, [r4, #4]
 8001a96:	e7e0      	b.n	8001a5a <HAL_PCDEx_SetTxFiFo+0xe>

08001a98 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001a98:	6803      	ldr	r3, [r0, #0]
 8001a9a:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001aa0:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001aa2:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	f8c0 14d8 	str.w	r1, [r0, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f883 04cc 	strb.w	r0, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ab0:	6993      	ldr	r3, [r2, #24]
 8001ab2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ab6:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001ab8:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8001aba:	4b02      	ldr	r3, [pc, #8]	@ (8001ac4 <HAL_PCDEx_ActivateLPM+0x24>)
 8001abc:	430b      	orrs	r3, r1
 8001abe:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	10000003 	.word	0x10000003

08001ac8 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001acc:	b538      	push	{r3, r4, r5, lr}
 8001ace:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001ad0:	4b22      	ldr	r3, [pc, #136]	@ (8001b5c <HAL_PWREx_ConfigSupply+0x90>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	2b06      	cmp	r3, #6
 8001ada:	d007      	beq.n	8001aec <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001adc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b5c <HAL_PWREx_ConfigSupply+0x90>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ae4:	4283      	cmp	r3, r0
 8001ae6:	d036      	beq.n	8001b56 <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001ae8:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8001aea:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001aec:	4a1b      	ldr	r2, [pc, #108]	@ (8001b5c <HAL_PWREx_ConfigSupply+0x90>)
 8001aee:	68d3      	ldr	r3, [r2, #12]
 8001af0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001af4:	4303      	orrs	r3, r0
 8001af6:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8001af8:	f7fe ffba 	bl	8000a70 <HAL_GetTick>
 8001afc:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001afe:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <HAL_PWREx_ConfigSupply+0x90>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8001b06:	d107      	bne.n	8001b18 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b08:	f7fe ffb2 	bl	8000a70 <HAL_GetTick>
 8001b0c:	1b43      	subs	r3, r0, r5
 8001b0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b12:	d9f4      	bls.n	8001afe <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 8001b14:	2001      	movs	r0, #1
 8001b16:	e7e8      	b.n	8001aea <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001b18:	2c2e      	cmp	r4, #46	@ 0x2e
 8001b1a:	bf18      	it	ne
 8001b1c:	2c1e      	cmpne	r4, #30
 8001b1e:	d008      	beq.n	8001b32 <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8001b20:	2c2d      	cmp	r4, #45	@ 0x2d
 8001b22:	bf14      	ite	ne
 8001b24:	2300      	movne	r3, #0
 8001b26:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001b28:	2c1d      	cmp	r4, #29
 8001b2a:	d002      	beq.n	8001b32 <HAL_PWREx_ConfigSupply+0x66>
 8001b2c:	b90b      	cbnz	r3, 8001b32 <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 8001b2e:	2000      	movs	r0, #0
 8001b30:	e7db      	b.n	8001aea <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 8001b32:	f7fe ff9d 	bl	8000a70 <HAL_GetTick>
 8001b36:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b38:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <HAL_PWREx_ConfigSupply+0x90>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001b40:	d107      	bne.n	8001b52 <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b42:	f7fe ff95 	bl	8000a70 <HAL_GetTick>
 8001b46:	1b00      	subs	r0, r0, r4
 8001b48:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001b4c:	d9f4      	bls.n	8001b38 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 8001b4e:	2001      	movs	r0, #1
 8001b50:	e7cb      	b.n	8001aea <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 8001b52:	2000      	movs	r0, #0
 8001b54:	e7c9      	b.n	8001aea <HAL_PWREx_ConfigSupply+0x1e>
      return HAL_OK;
 8001b56:	2000      	movs	r0, #0
 8001b58:	e7c7      	b.n	8001aea <HAL_PWREx_ConfigSupply+0x1e>
 8001b5a:	bf00      	nop
 8001b5c:	58024800 	.word	0x58024800

08001b60 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001b60:	4a02      	ldr	r2, [pc, #8]	@ (8001b6c <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8001b62:	68d3      	ldr	r3, [r2, #12]
 8001b64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b68:	60d3      	str	r3, [r2, #12]
}
 8001b6a:	4770      	bx	lr
 8001b6c:	58024800 	.word	0x58024800

08001b70 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b70:	2800      	cmp	r0, #0
 8001b72:	f000 8339 	beq.w	80021e8 <HAL_RCC_OscConfig+0x678>
{
 8001b76:	b538      	push	{r3, r4, r5, lr}
 8001b78:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7a:	6803      	ldr	r3, [r0, #0]
 8001b7c:	f013 0f01 	tst.w	r3, #1
 8001b80:	d025      	beq.n	8001bce <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b82:	4a94      	ldr	r2, [pc, #592]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001b84:	6913      	ldr	r3, [r2, #16]
 8001b86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b8a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b8c:	2b10      	cmp	r3, #16
 8001b8e:	d015      	beq.n	8001bbc <HAL_RCC_OscConfig+0x4c>
 8001b90:	2b18      	cmp	r3, #24
 8001b92:	d00f      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b94:	6863      	ldr	r3, [r4, #4]
 8001b96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b9a:	d03f      	beq.n	8001c1c <HAL_RCC_OscConfig+0xac>
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d153      	bne.n	8001c48 <HAL_RCC_OscConfig+0xd8>
 8001ba0:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	e038      	b.n	8001c26 <HAL_RCC_OscConfig+0xb6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001bb4:	f002 0203 	and.w	r2, r2, #3
 8001bb8:	2a02      	cmp	r2, #2
 8001bba:	d1eb      	bne.n	8001b94 <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	4b85      	ldr	r3, [pc, #532]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001bc4:	d003      	beq.n	8001bce <HAL_RCC_OscConfig+0x5e>
 8001bc6:	6863      	ldr	r3, [r4, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 830f 	beq.w	80021ec <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	f013 0f02 	tst.w	r3, #2
 8001bd4:	f000 80a1 	beq.w	8001d1a <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd8:	4a7e      	ldr	r2, [pc, #504]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001bda:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bdc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001bde:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8001be2:	d05a      	beq.n	8001c9a <HAL_RCC_OscConfig+0x12a>
 8001be4:	2b18      	cmp	r3, #24
 8001be6:	d055      	beq.n	8001c94 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001be8:	68e3      	ldr	r3, [r4, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 80de 	beq.w	8001dac <HAL_RCC_OscConfig+0x23c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bf0:	4978      	ldr	r1, [pc, #480]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001bf2:	680a      	ldr	r2, [r1, #0]
 8001bf4:	f022 0219 	bic.w	r2, r2, #25
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7fe ff38 	bl	8000a70 <HAL_GetTick>
 8001c00:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c02:	4b74      	ldr	r3, [pc, #464]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f013 0f04 	tst.w	r3, #4
 8001c0a:	f040 80ad 	bne.w	8001d68 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7fe ff2f 	bl	8000a70 <HAL_GetTick>
 8001c12:	1b40      	subs	r0, r0, r5
 8001c14:	2802      	cmp	r0, #2
 8001c16:	d9f4      	bls.n	8001c02 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8001c18:	2003      	movs	r0, #3
 8001c1a:	e2ee      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1c:	4a6d      	ldr	r2, [pc, #436]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001c1e:	6813      	ldr	r3, [r2, #0]
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c26:	6863      	ldr	r3, [r4, #4]
 8001c28:	b32b      	cbz	r3, 8001c76 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8001c2a:	f7fe ff21 	bl	8000a70 <HAL_GetTick>
 8001c2e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c30:	4b68      	ldr	r3, [pc, #416]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001c38:	d1c9      	bne.n	8001bce <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3a:	f7fe ff19 	bl	8000a70 <HAL_GetTick>
 8001c3e:	1b40      	subs	r0, r0, r5
 8001c40:	2864      	cmp	r0, #100	@ 0x64
 8001c42:	d9f5      	bls.n	8001c30 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8001c44:	2003      	movs	r0, #3
 8001c46:	e2d8      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c4c:	d009      	beq.n	8001c62 <HAL_RCC_OscConfig+0xf2>
 8001c4e:	4b61      	ldr	r3, [pc, #388]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e7e1      	b.n	8001c26 <HAL_RCC_OscConfig+0xb6>
 8001c62:	4b5c      	ldr	r3, [pc, #368]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	e7d7      	b.n	8001c26 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8001c76:	f7fe fefb 	bl	8000a70 <HAL_GetTick>
 8001c7a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c7c:	4b55      	ldr	r3, [pc, #340]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001c84:	d0a3      	beq.n	8001bce <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c86:	f7fe fef3 	bl	8000a70 <HAL_GetTick>
 8001c8a:	1b40      	subs	r0, r0, r5
 8001c8c:	2864      	cmp	r0, #100	@ 0x64
 8001c8e:	d9f5      	bls.n	8001c7c <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8001c90:	2003      	movs	r0, #3
 8001c92:	e2b2      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c94:	f012 0f03 	tst.w	r2, #3
 8001c98:	d1a6      	bne.n	8001be8 <HAL_RCC_OscConfig+0x78>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f013 0f04 	tst.w	r3, #4
 8001ca2:	d003      	beq.n	8001cac <HAL_RCC_OscConfig+0x13c>
 8001ca4:	68e3      	ldr	r3, [r4, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 82a2 	beq.w	80021f0 <HAL_RCC_OscConfig+0x680>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cac:	4a49      	ldr	r2, [pc, #292]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001cae:	6813      	ldr	r3, [r2, #0]
 8001cb0:	f023 0319 	bic.w	r3, r3, #25
 8001cb4:	68e1      	ldr	r1, [r4, #12]
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001cba:	f7fe fed9 	bl	8000a70 <HAL_GetTick>
 8001cbe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cc0:	4b44      	ldr	r3, [pc, #272]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f013 0f04 	tst.w	r3, #4
 8001cc8:	d106      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x168>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cca:	f7fe fed1 	bl	8000a70 <HAL_GetTick>
 8001cce:	1b40      	subs	r0, r0, r5
 8001cd0:	2802      	cmp	r0, #2
 8001cd2:	d9f5      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	e290      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd8:	f7fe fee4 	bl	8000aa4 <HAL_GetREVID>
 8001cdc:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001ce0:	4298      	cmp	r0, r3
 8001ce2:	d812      	bhi.n	8001d0a <HAL_RCC_OscConfig+0x19a>
 8001ce4:	6922      	ldr	r2, [r4, #16]
 8001ce6:	2a40      	cmp	r2, #64	@ 0x40
 8001ce8:	d007      	beq.n	8001cfa <HAL_RCC_OscConfig+0x18a>
 8001cea:	493a      	ldr	r1, [pc, #232]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001cec:	684b      	ldr	r3, [r1, #4]
 8001cee:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001cf2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001cf6:	604b      	str	r3, [r1, #4]
 8001cf8:	e00f      	b.n	8001d1a <HAL_RCC_OscConfig+0x1aa>
 8001cfa:	4a36      	ldr	r2, [pc, #216]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001cfc:	6853      	ldr	r3, [r2, #4]
 8001cfe:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d06:	6053      	str	r3, [r2, #4]
 8001d08:	e007      	b.n	8001d1a <HAL_RCC_OscConfig+0x1aa>
 8001d0a:	4a32      	ldr	r2, [pc, #200]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001d0c:	6853      	ldr	r3, [r2, #4]
 8001d0e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001d12:	6921      	ldr	r1, [r4, #16]
 8001d14:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001d18:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	f013 0f10 	tst.w	r3, #16
 8001d20:	f000 8088 	beq.w	8001e34 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d24:	4a2b      	ldr	r2, [pc, #172]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001d26:	6913      	ldr	r3, [r2, #16]
 8001d28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d2c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d056      	beq.n	8001de0 <HAL_RCC_OscConfig+0x270>
 8001d32:	2b18      	cmp	r3, #24
 8001d34:	d050      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d36:	69e3      	ldr	r3, [r4, #28]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80b8 	beq.w	8001eae <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d3e:	4a25      	ldr	r2, [pc, #148]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001d40:	6813      	ldr	r3, [r2, #0]
 8001d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7fe fe92 	bl	8000a70 <HAL_GetTick>
 8001d4c:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d4e:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001d56:	f040 8088 	bne.w	8001e6a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d5a:	f7fe fe89 	bl	8000a70 <HAL_GetTick>
 8001d5e:	1b40      	subs	r0, r0, r5
 8001d60:	2802      	cmp	r0, #2
 8001d62:	d9f4      	bls.n	8001d4e <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 8001d64:	2003      	movs	r0, #3
 8001d66:	e248      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d68:	f7fe fe9c 	bl	8000aa4 <HAL_GetREVID>
 8001d6c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001d70:	4298      	cmp	r0, r3
 8001d72:	d812      	bhi.n	8001d9a <HAL_RCC_OscConfig+0x22a>
 8001d74:	6922      	ldr	r2, [r4, #16]
 8001d76:	2a40      	cmp	r2, #64	@ 0x40
 8001d78:	d007      	beq.n	8001d8a <HAL_RCC_OscConfig+0x21a>
 8001d7a:	4916      	ldr	r1, [pc, #88]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001d7c:	684b      	ldr	r3, [r1, #4]
 8001d7e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d82:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001d86:	604b      	str	r3, [r1, #4]
 8001d88:	e7c7      	b.n	8001d1a <HAL_RCC_OscConfig+0x1aa>
 8001d8a:	4a12      	ldr	r2, [pc, #72]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001d8c:	6853      	ldr	r3, [r2, #4]
 8001d8e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d96:	6053      	str	r3, [r2, #4]
 8001d98:	e7bf      	b.n	8001d1a <HAL_RCC_OscConfig+0x1aa>
 8001d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001d9c:	6853      	ldr	r3, [r2, #4]
 8001d9e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001da2:	6921      	ldr	r1, [r4, #16]
 8001da4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001da8:	6053      	str	r3, [r2, #4]
 8001daa:	e7b6      	b.n	8001d1a <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 8001dac:	4a09      	ldr	r2, [pc, #36]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001dae:	6813      	ldr	r3, [r2, #0]
 8001db0:	f023 0301 	bic.w	r3, r3, #1
 8001db4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001db6:	f7fe fe5b 	bl	8000a70 <HAL_GetTick>
 8001dba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dbc:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <HAL_RCC_OscConfig+0x264>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f013 0f04 	tst.w	r3, #4
 8001dc4:	d0a9      	beq.n	8001d1a <HAL_RCC_OscConfig+0x1aa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7fe fe53 	bl	8000a70 <HAL_GetTick>
 8001dca:	1b40      	subs	r0, r0, r5
 8001dcc:	2802      	cmp	r0, #2
 8001dce:	d9f5      	bls.n	8001dbc <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	e212      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
 8001dd4:	58024400 	.word	0x58024400
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001dd8:	f002 0203 	and.w	r2, r2, #3
 8001ddc:	2a01      	cmp	r2, #1
 8001dde:	d1aa      	bne.n	8001d36 <HAL_RCC_OscConfig+0x1c6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001de0:	4ba1      	ldr	r3, [pc, #644]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001de8:	d003      	beq.n	8001df2 <HAL_RCC_OscConfig+0x282>
 8001dea:	69e3      	ldr	r3, [r4, #28]
 8001dec:	2b80      	cmp	r3, #128	@ 0x80
 8001dee:	f040 8201 	bne.w	80021f4 <HAL_RCC_OscConfig+0x684>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001df2:	f7fe fe57 	bl	8000aa4 <HAL_GetREVID>
 8001df6:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001dfa:	4298      	cmp	r0, r3
 8001dfc:	d812      	bhi.n	8001e24 <HAL_RCC_OscConfig+0x2b4>
 8001dfe:	6a22      	ldr	r2, [r4, #32]
 8001e00:	2a20      	cmp	r2, #32
 8001e02:	d007      	beq.n	8001e14 <HAL_RCC_OscConfig+0x2a4>
 8001e04:	4998      	ldr	r1, [pc, #608]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001e06:	684b      	ldr	r3, [r1, #4]
 8001e08:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e0c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8001e10:	604b      	str	r3, [r1, #4]
 8001e12:	e00f      	b.n	8001e34 <HAL_RCC_OscConfig+0x2c4>
 8001e14:	4a94      	ldr	r2, [pc, #592]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001e16:	6853      	ldr	r3, [r2, #4]
 8001e18:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e20:	6053      	str	r3, [r2, #4]
 8001e22:	e007      	b.n	8001e34 <HAL_RCC_OscConfig+0x2c4>
 8001e24:	4a90      	ldr	r2, [pc, #576]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001e26:	68d3      	ldr	r3, [r2, #12]
 8001e28:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8001e2c:	6a21      	ldr	r1, [r4, #32]
 8001e2e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001e32:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	f013 0f08 	tst.w	r3, #8
 8001e3a:	d060      	beq.n	8001efe <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e3c:	6963      	ldr	r3, [r4, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d049      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e42:	4a89      	ldr	r2, [pc, #548]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001e44:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7fe fe10 	bl	8000a70 <HAL_GetTick>
 8001e50:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e52:	4b85      	ldr	r3, [pc, #532]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e56:	f013 0f02 	tst.w	r3, #2
 8001e5a:	d150      	bne.n	8001efe <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7fe fe08 	bl	8000a70 <HAL_GetTick>
 8001e60:	1b40      	subs	r0, r0, r5
 8001e62:	2802      	cmp	r0, #2
 8001e64:	d9f5      	bls.n	8001e52 <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 8001e66:	2003      	movs	r0, #3
 8001e68:	e1c7      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e6a:	f7fe fe1b 	bl	8000aa4 <HAL_GetREVID>
 8001e6e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001e72:	4298      	cmp	r0, r3
 8001e74:	d812      	bhi.n	8001e9c <HAL_RCC_OscConfig+0x32c>
 8001e76:	6a22      	ldr	r2, [r4, #32]
 8001e78:	2a20      	cmp	r2, #32
 8001e7a:	d007      	beq.n	8001e8c <HAL_RCC_OscConfig+0x31c>
 8001e7c:	497a      	ldr	r1, [pc, #488]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001e7e:	684b      	ldr	r3, [r1, #4]
 8001e80:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e84:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8001e88:	604b      	str	r3, [r1, #4]
 8001e8a:	e7d3      	b.n	8001e34 <HAL_RCC_OscConfig+0x2c4>
 8001e8c:	4a76      	ldr	r2, [pc, #472]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001e8e:	6853      	ldr	r3, [r2, #4]
 8001e90:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e98:	6053      	str	r3, [r2, #4]
 8001e9a:	e7cb      	b.n	8001e34 <HAL_RCC_OscConfig+0x2c4>
 8001e9c:	4a72      	ldr	r2, [pc, #456]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001e9e:	68d3      	ldr	r3, [r2, #12]
 8001ea0:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8001ea4:	6a21      	ldr	r1, [r4, #32]
 8001ea6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001eaa:	60d3      	str	r3, [r2, #12]
 8001eac:	e7c2      	b.n	8001e34 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 8001eae:	4a6e      	ldr	r2, [pc, #440]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001eb0:	6813      	ldr	r3, [r2, #0]
 8001eb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001eb6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001eb8:	f7fe fdda 	bl	8000a70 <HAL_GetTick>
 8001ebc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001ec6:	d0b5      	beq.n	8001e34 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ec8:	f7fe fdd2 	bl	8000a70 <HAL_GetTick>
 8001ecc:	1b40      	subs	r0, r0, r5
 8001ece:	2802      	cmp	r0, #2
 8001ed0:	d9f5      	bls.n	8001ebe <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8001ed2:	2003      	movs	r0, #3
 8001ed4:	e191      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed6:	4a64      	ldr	r2, [pc, #400]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001ed8:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7fe fdc6 	bl	8000a70 <HAL_GetTick>
 8001ee4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ee6:	4b60      	ldr	r3, [pc, #384]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eea:	f013 0f02 	tst.w	r3, #2
 8001eee:	d006      	beq.n	8001efe <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7fe fdbe 	bl	8000a70 <HAL_GetTick>
 8001ef4:	1b40      	subs	r0, r0, r5
 8001ef6:	2802      	cmp	r0, #2
 8001ef8:	d9f5      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001efa:	2003      	movs	r0, #3
 8001efc:	e17d      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	f013 0f20 	tst.w	r3, #32
 8001f04:	d029      	beq.n	8001f5a <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001f06:	69a3      	ldr	r3, [r4, #24]
 8001f08:	b19b      	cbz	r3, 8001f32 <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f0a:	4a57      	ldr	r2, [pc, #348]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001f0c:	6813      	ldr	r3, [r2, #0]
 8001f0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f14:	f7fe fdac 	bl	8000a70 <HAL_GetTick>
 8001f18:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f1a:	4b53      	ldr	r3, [pc, #332]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8001f22:	d11a      	bne.n	8001f5a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f24:	f7fe fda4 	bl	8000a70 <HAL_GetTick>
 8001f28:	1b40      	subs	r0, r0, r5
 8001f2a:	2802      	cmp	r0, #2
 8001f2c:	d9f5      	bls.n	8001f1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f2e:	2003      	movs	r0, #3
 8001f30:	e163      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f32:	4a4d      	ldr	r2, [pc, #308]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001f34:	6813      	ldr	r3, [r2, #0]
 8001f36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f3c:	f7fe fd98 	bl	8000a70 <HAL_GetTick>
 8001f40:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f42:	4b49      	ldr	r3, [pc, #292]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8001f4a:	d006      	beq.n	8001f5a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f4c:	f7fe fd90 	bl	8000a70 <HAL_GetTick>
 8001f50:	1b40      	subs	r0, r0, r5
 8001f52:	2802      	cmp	r0, #2
 8001f54:	d9f5      	bls.n	8001f42 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001f56:	2003      	movs	r0, #3
 8001f58:	e14f      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	f013 0f04 	tst.w	r3, #4
 8001f60:	d121      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f62:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8147 	beq.w	80021f8 <HAL_RCC_OscConfig+0x688>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f6a:	4a3f      	ldr	r2, [pc, #252]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001f6c:	6912      	ldr	r2, [r2, #16]
 8001f6e:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8001f72:	2a18      	cmp	r2, #24
 8001f74:	f000 80ee 	beq.w	8002154 <HAL_RCC_OscConfig+0x5e4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d079      	beq.n	8002070 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7c:	4a3a      	ldr	r2, [pc, #232]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001f7e:	6813      	ldr	r3, [r2, #0]
 8001f80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7fe fd73 	bl	8000a70 <HAL_GetTick>
 8001f8a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f8c:	4b36      	ldr	r3, [pc, #216]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001f94:	f000 80dc 	beq.w	8002150 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7fe fd6a 	bl	8000a70 <HAL_GetTick>
 8001f9c:	1b00      	subs	r0, r0, r4
 8001f9e:	2802      	cmp	r0, #2
 8001fa0:	d9f4      	bls.n	8001f8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fa2:	2003      	movs	r0, #3
 8001fa4:	e129      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
    PWR->CR1 |= PWR_CR1_DBP;
 8001fa6:	4a31      	ldr	r2, [pc, #196]	@ (800206c <HAL_RCC_OscConfig+0x4fc>)
 8001fa8:	6813      	ldr	r3, [r2, #0]
 8001faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fae:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001fb0:	f7fe fd5e 	bl	8000a70 <HAL_GetTick>
 8001fb4:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800206c <HAL_RCC_OscConfig+0x4fc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x45e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc0:	f7fe fd56 	bl	8000a70 <HAL_GetTick>
 8001fc4:	1b40      	subs	r0, r0, r5
 8001fc6:	2864      	cmp	r0, #100	@ 0x64
 8001fc8:	d9f5      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 8001fca:	2003      	movs	r0, #3
 8001fcc:	e115      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fce:	68a3      	ldr	r3, [r4, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d00a      	beq.n	8001fea <HAL_RCC_OscConfig+0x47a>
 8001fd4:	bb0b      	cbnz	r3, 800201a <HAL_RCC_OscConfig+0x4aa>
 8001fd6:	4b24      	ldr	r3, [pc, #144]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001fd8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	671a      	str	r2, [r3, #112]	@ 0x70
 8001fe0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001fe2:	f022 0204 	bic.w	r2, r2, #4
 8001fe6:	671a      	str	r2, [r3, #112]	@ 0x70
 8001fe8:	e004      	b.n	8001ff4 <HAL_RCC_OscConfig+0x484>
 8001fea:	4a1f      	ldr	r2, [pc, #124]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8001fec:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ff4:	68a3      	ldr	r3, [r4, #8]
 8001ff6:	b333      	cbz	r3, 8002046 <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 8001ff8:	f7fe fd3a 	bl	8000a70 <HAL_GetTick>
 8001ffc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002002:	f013 0f02 	tst.w	r3, #2
 8002006:	d1ac      	bne.n	8001f62 <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002008:	f7fe fd32 	bl	8000a70 <HAL_GetTick>
 800200c:	1b40      	subs	r0, r0, r5
 800200e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002012:	4298      	cmp	r0, r3
 8002014:	d9f3      	bls.n	8001ffe <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 8002016:	2003      	movs	r0, #3
 8002018:	e0ef      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201a:	2b05      	cmp	r3, #5
 800201c:	d009      	beq.n	8002032 <HAL_RCC_OscConfig+0x4c2>
 800201e:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8002020:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	671a      	str	r2, [r3, #112]	@ 0x70
 8002028:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800202a:	f022 0204 	bic.w	r2, r2, #4
 800202e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002030:	e7e0      	b.n	8001ff4 <HAL_RCC_OscConfig+0x484>
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 8002034:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002036:	f042 0204 	orr.w	r2, r2, #4
 800203a:	671a      	str	r2, [r3, #112]	@ 0x70
 800203c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	671a      	str	r2, [r3, #112]	@ 0x70
 8002044:	e7d6      	b.n	8001ff4 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 8002046:	f7fe fd13 	bl	8000a70 <HAL_GetTick>
 800204a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_RCC_OscConfig+0x4f8>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002050:	f013 0f02 	tst.w	r3, #2
 8002054:	d085      	beq.n	8001f62 <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002056:	f7fe fd0b 	bl	8000a70 <HAL_GetTick>
 800205a:	1b40      	subs	r0, r0, r5
 800205c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002060:	4298      	cmp	r0, r3
 8002062:	d9f3      	bls.n	800204c <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 8002064:	2003      	movs	r0, #3
 8002066:	e0c8      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
 8002068:	58024400 	.word	0x58024400
 800206c:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8002070:	4a69      	ldr	r2, [pc, #420]	@ (8002218 <HAL_RCC_OscConfig+0x6a8>)
 8002072:	6813      	ldr	r3, [r2, #0]
 8002074:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002078:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800207a:	f7fe fcf9 	bl	8000a70 <HAL_GetTick>
 800207e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002080:	4b65      	ldr	r3, [pc, #404]	@ (8002218 <HAL_RCC_OscConfig+0x6a8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002088:	d006      	beq.n	8002098 <HAL_RCC_OscConfig+0x528>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208a:	f7fe fcf1 	bl	8000a70 <HAL_GetTick>
 800208e:	1b40      	subs	r0, r0, r5
 8002090:	2802      	cmp	r0, #2
 8002092:	d9f5      	bls.n	8002080 <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 8002094:	2003      	movs	r0, #3
 8002096:	e0b0      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002098:	4b5f      	ldr	r3, [pc, #380]	@ (8002218 <HAL_RCC_OscConfig+0x6a8>)
 800209a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800209c:	4a5f      	ldr	r2, [pc, #380]	@ (800221c <HAL_RCC_OscConfig+0x6ac>)
 800209e:	400a      	ands	r2, r1
 80020a0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80020a2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80020a4:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80020a8:	430a      	orrs	r2, r1
 80020aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80020ac:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80020ae:	3a01      	subs	r2, #1
 80020b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80020b6:	3901      	subs	r1, #1
 80020b8:	0249      	lsls	r1, r1, #9
 80020ba:	b289      	uxth	r1, r1
 80020bc:	430a      	orrs	r2, r1
 80020be:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80020c0:	3901      	subs	r1, #1
 80020c2:	0409      	lsls	r1, r1, #16
 80020c4:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 80020c8:	430a      	orrs	r2, r1
 80020ca:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80020cc:	3901      	subs	r1, #1
 80020ce:	0609      	lsls	r1, r1, #24
 80020d0:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 80020d4:	430a      	orrs	r2, r1
 80020d6:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80020d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020e2:	f36f 02cf 	bfc	r2, #3, #13
 80020e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80020e8:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80020ec:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020f0:	f022 020c 	bic.w	r2, r2, #12
 80020f4:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80020f6:	430a      	orrs	r2, r1
 80020f8:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020fc:	f022 0202 	bic.w	r2, r2, #2
 8002100:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002102:	430a      	orrs	r2, r1
 8002104:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002108:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800210c:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800210e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002110:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002114:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002118:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800211c:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800211e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002120:	f042 0201 	orr.w	r2, r2, #1
 8002124:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800212c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800212e:	f7fe fc9f 	bl	8000a70 <HAL_GetTick>
 8002132:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002134:	4b38      	ldr	r3, [pc, #224]	@ (8002218 <HAL_RCC_OscConfig+0x6a8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800213c:	d106      	bne.n	800214c <HAL_RCC_OscConfig+0x5dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213e:	f7fe fc97 	bl	8000a70 <HAL_GetTick>
 8002142:	1b00      	subs	r0, r0, r4
 8002144:	2802      	cmp	r0, #2
 8002146:	d9f5      	bls.n	8002134 <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 8002148:	2003      	movs	r0, #3
 800214a:	e056      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800214c:	2000      	movs	r0, #0
 800214e:	e054      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
 8002150:	2000      	movs	r0, #0
 8002152:	e052      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002154:	4a30      	ldr	r2, [pc, #192]	@ (8002218 <HAL_RCC_OscConfig+0x6a8>)
 8002156:	6a91      	ldr	r1, [r2, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002158:	6b10      	ldr	r0, [r2, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800215a:	2b01      	cmp	r3, #1
 800215c:	d04e      	beq.n	80021fc <HAL_RCC_OscConfig+0x68c>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	f001 0303 	and.w	r3, r1, #3
 8002162:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002164:	4293      	cmp	r3, r2
 8002166:	d14b      	bne.n	8002200 <HAL_RCC_OscConfig+0x690>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002168:	f3c1 1105 	ubfx	r1, r1, #4, #6
 800216c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	4299      	cmp	r1, r3
 8002170:	d148      	bne.n	8002204 <HAL_RCC_OscConfig+0x694>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002172:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8002176:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002178:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d144      	bne.n	8002208 <HAL_RCC_OscConfig+0x698>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800217e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8002182:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002184:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d140      	bne.n	800220c <HAL_RCC_OscConfig+0x69c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800218a:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800218e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002190:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d13c      	bne.n	8002210 <HAL_RCC_OscConfig+0x6a0>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002196:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800219a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800219c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800219e:	4298      	cmp	r0, r3
 80021a0:	d138      	bne.n	8002214 <HAL_RCC_OscConfig+0x6a4>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80021a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <HAL_RCC_OscConfig+0x6a8>)
 80021a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80021aa:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_OscConfig+0x644>
  return HAL_OK;
 80021b0:	2000      	movs	r0, #0
 80021b2:	e022      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_DISABLE();
 80021b4:	4a18      	ldr	r2, [pc, #96]	@ (8002218 <HAL_RCC_OscConfig+0x6a8>)
 80021b6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 80021be:	f7fe fc57 	bl	8000a70 <HAL_GetTick>
 80021c2:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80021c4:	f7fe fc54 	bl	8000a70 <HAL_GetTick>
 80021c8:	42a8      	cmp	r0, r5
 80021ca:	d0fb      	beq.n	80021c4 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021cc:	4a12      	ldr	r2, [pc, #72]	@ (8002218 <HAL_RCC_OscConfig+0x6a8>)
 80021ce:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80021d0:	f36f 03cf 	bfc	r3, #3, #13
 80021d4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80021d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021da:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80021dc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  return HAL_OK;
 80021e4:	2000      	movs	r0, #0
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
    return HAL_ERROR;
 80021e8:	2001      	movs	r0, #1
}
 80021ea:	4770      	bx	lr
        return HAL_ERROR;
 80021ec:	2001      	movs	r0, #1
 80021ee:	e004      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 80021f0:	2001      	movs	r0, #1
 80021f2:	e002      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 80021f4:	2001      	movs	r0, #1
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
  return HAL_OK;
 80021f8:	2000      	movs	r0, #0
}
 80021fa:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 80021fc:	2001      	movs	r0, #1
 80021fe:	e7fc      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
 8002200:	2001      	movs	r0, #1
 8002202:	e7fa      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
 8002204:	2001      	movs	r0, #1
 8002206:	e7f8      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
 8002208:	2001      	movs	r0, #1
 800220a:	e7f6      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
 800220c:	2001      	movs	r0, #1
 800220e:	e7f4      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
 8002210:	2001      	movs	r0, #1
 8002212:	e7f2      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
 8002214:	2001      	movs	r0, #1
 8002216:	e7f0      	b.n	80021fa <HAL_RCC_OscConfig+0x68a>
 8002218:	58024400 	.word	0x58024400
 800221c:	fffffc0c 	.word	0xfffffc0c

08002220 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	460c      	mov	r4, r1
 8002226:	4615      	mov	r5, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8002228:	bb10      	cbnz	r0, 8002270 <HAL_RCC_MCOConfig+0x50>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800222a:	4e23      	ldr	r6, [pc, #140]	@ (80022b8 <HAL_RCC_MCOConfig+0x98>)
 800222c:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 8002238:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	9b01      	ldr	r3, [sp, #4]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002244:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002248:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002256:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002258:	a903      	add	r1, sp, #12
 800225a:	4818      	ldr	r0, [pc, #96]	@ (80022bc <HAL_RCC_MCOConfig+0x9c>)
 800225c:	f7fe fca2 	bl	8000ba4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002260:	6933      	ldr	r3, [r6, #16]
 8002262:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8002266:	4325      	orrs	r5, r4
 8002268:	431d      	orrs	r5, r3
 800226a:	6135      	str	r5, [r6, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800226c:	b008      	add	sp, #32
 800226e:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8002270:	4e11      	ldr	r6, [pc, #68]	@ (80022b8 <HAL_RCC_MCOConfig+0x98>)
 8002272:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 8002276:	f043 0304 	orr.w	r3, r3, #4
 800227a:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 800227e:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	9302      	str	r3, [sp, #8]
 8002288:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800228a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800228e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800229c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800229e:	a903      	add	r1, sp, #12
 80022a0:	4807      	ldr	r0, [pc, #28]	@ (80022c0 <HAL_RCC_MCOConfig+0xa0>)
 80022a2:	f7fe fc7f 	bl	8000ba4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80022a6:	6933      	ldr	r3, [r6, #16]
 80022a8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 80022ac:	ea44 14c5 	orr.w	r4, r4, r5, lsl #7
 80022b0:	431c      	orrs	r4, r3
 80022b2:	6134      	str	r4, [r6, #16]
}
 80022b4:	e7da      	b.n	800226c <HAL_RCC_MCOConfig+0x4c>
 80022b6:	bf00      	nop
 80022b8:	58024400 	.word	0x58024400
 80022bc:	58020000 	.word	0x58020000
 80022c0:	58020800 	.word	0x58020800

080022c4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022c4:	4b75      	ldr	r3, [pc, #468]	@ (800249c <HAL_RCC_GetSysClockFreq+0x1d8>)
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022cc:	2b10      	cmp	r3, #16
 80022ce:	f000 80de 	beq.w	800248e <HAL_RCC_GetSysClockFreq+0x1ca>
 80022d2:	2b18      	cmp	r3, #24
 80022d4:	d00f      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0x32>
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 80db 	bne.w	8002492 <HAL_RCC_GetSysClockFreq+0x1ce>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022dc:	4b6f      	ldr	r3, [pc, #444]	@ (800249c <HAL_RCC_GetSysClockFreq+0x1d8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f013 0f20 	tst.w	r3, #32
 80022e4:	f000 80d7 	beq.w	8002496 <HAL_RCC_GetSysClockFreq+0x1d2>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022e8:	4b6c      	ldr	r3, [pc, #432]	@ (800249c <HAL_RCC_GetSysClockFreq+0x1d8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80022f0:	486b      	ldr	r0, [pc, #428]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80022f2:	40d8      	lsrs	r0, r3
 80022f4:	4770      	bx	lr
{
 80022f6:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022f8:	4b68      	ldr	r3, [pc, #416]	@ (800249c <HAL_RCC_GetSysClockFreq+0x1d8>)
 80022fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022fc:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002300:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8002302:	f3c4 1005 	ubfx	r0, r4, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002306:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002308:	f001 0101 	and.w	r1, r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800230c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800230e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eef8 7a67 	vcvt.f32.u32	s15, s15

      if (pllm != 0U)
 800231e:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 8002322:	d077      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x150>
      {
        switch (pllsource)
 8002324:	2a01      	cmp	r2, #1
 8002326:	d04a      	beq.n	80023be <HAL_RCC_GetSysClockFreq+0xfa>
 8002328:	2a02      	cmp	r2, #2
 800232a:	d076      	beq.n	800241a <HAL_RCC_GetSysClockFreq+0x156>
 800232c:	2a00      	cmp	r2, #0
 800232e:	f040 8091 	bne.w	8002454 <HAL_RCC_GetSysClockFreq+0x190>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002332:	4b5a      	ldr	r3, [pc, #360]	@ (800249c <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f013 0f20 	tst.w	r3, #32
 800233a:	d023      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0xc0>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800233c:	4957      	ldr	r1, [pc, #348]	@ (800249c <HAL_RCC_GetSysClockFreq+0x1d8>)
 800233e:	680a      	ldr	r2, [r1, #0]
 8002340:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002344:	4b56      	ldr	r3, [pc, #344]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002346:	40d3      	lsrs	r3, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002348:	ee07 3a10 	vmov	s14, r3
 800234c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002350:	ee07 0a10 	vmov	s14, r0
 8002354:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8002358:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800235c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800235e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002362:	ee06 3a90 	vmov	s13, r3
 8002366:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800236a:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 80024a4 <HAL_RCC_GetSysClockFreq+0x1e0>
 800236e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800237a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800237e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002382:	e038      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0x132>
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002384:	ee07 0a10 	vmov	s14, r0
 8002388:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800238c:	ed9f 6a46 	vldr	s12, [pc, #280]	@ 80024a8 <HAL_RCC_GetSysClockFreq+0x1e4>
 8002390:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002394:	4b41      	ldr	r3, [pc, #260]	@ (800249c <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800239c:	ee06 3a90 	vmov	s13, r3
 80023a0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80023a4:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 80024a4 <HAL_RCC_GetSysClockFreq+0x1e0>
 80023a8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80023ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023bc:	e01b      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0x132>
            }
            break;

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023be:	ee07 0a10 	vmov	s14, r0
 80023c2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80023c6:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 80024ac <HAL_RCC_GetSysClockFreq+0x1e8>
 80023ca:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80023ce:	4b33      	ldr	r3, [pc, #204]	@ (800249c <HAL_RCC_GetSysClockFreq+0x1d8>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d6:	ee06 3a90 	vmov	s13, r3
 80023da:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80023de:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 80024a4 <HAL_RCC_GetSysClockFreq+0x1e0>
 80023e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80023e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023f2:	ee27 7a27 	vmul.f32	s14, s14, s15

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80023f6:	4b29      	ldr	r3, [pc, #164]	@ (800249c <HAL_RCC_GetSysClockFreq+0x1d8>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80023fe:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002408:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800240c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002410:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8002414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002418:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800241a:	ee07 0a10 	vmov	s14, r0
 800241e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002422:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 80024b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002426:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800242a:	4b1c      	ldr	r3, [pc, #112]	@ (800249c <HAL_RCC_GetSysClockFreq+0x1d8>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002432:	ee06 3a90 	vmov	s13, r3
 8002436:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800243a:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80024a4 <HAL_RCC_GetSysClockFreq+0x1e0>
 800243e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800244a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800244e:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 8002452:	e7d0      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0x132>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002454:	ee07 0a10 	vmov	s14, r0
 8002458:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800245c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80024ac <HAL_RCC_GetSysClockFreq+0x1e8>
 8002460:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002464:	4b0d      	ldr	r3, [pc, #52]	@ (800249c <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800246c:	ee06 3a90 	vmov	s13, r3
 8002470:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002474:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 80024a4 <HAL_RCC_GetSysClockFreq+0x1e0>
 8002478:	ee67 7a86 	vmul.f32	s15, s15, s12
 800247c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002480:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002488:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 800248c:	e7b3      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0x132>
      sysclockfreq = HSE_VALUE;
 800248e:	4809      	ldr	r0, [pc, #36]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002490:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002492:	4809      	ldr	r0, [pc, #36]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002494:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002496:	4802      	ldr	r0, [pc, #8]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	58024400 	.word	0x58024400
 80024a0:	03d09000 	.word	0x03d09000
 80024a4:	39000000 	.word	0x39000000
 80024a8:	4c742400 	.word	0x4c742400
 80024ac:	4a742400 	.word	0x4a742400
 80024b0:	4bbebc20 	.word	0x4bbebc20
 80024b4:	017d7840 	.word	0x017d7840
 80024b8:	003d0900 	.word	0x003d0900

080024bc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80024bc:	2800      	cmp	r0, #0
 80024be:	f000 8132 	beq.w	8002726 <HAL_RCC_ClockConfig+0x26a>
{
 80024c2:	b570      	push	{r4, r5, r6, lr}
 80024c4:	460d      	mov	r5, r1
 80024c6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b9b      	ldr	r3, [pc, #620]	@ (8002738 <HAL_RCC_ClockConfig+0x27c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	428b      	cmp	r3, r1
 80024d2:	d20b      	bcs.n	80024ec <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d4:	4a98      	ldr	r2, [pc, #608]	@ (8002738 <HAL_RCC_ClockConfig+0x27c>)
 80024d6:	6813      	ldr	r3, [r2, #0]
 80024d8:	f023 030f 	bic.w	r3, r3, #15
 80024dc:	430b      	orrs	r3, r1
 80024de:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e0:	6813      	ldr	r3, [r2, #0]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	428b      	cmp	r3, r1
 80024e8:	f040 811f 	bne.w	800272a <HAL_RCC_ClockConfig+0x26e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	f013 0f04 	tst.w	r3, #4
 80024f2:	d00c      	beq.n	800250e <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024f4:	6922      	ldr	r2, [r4, #16]
 80024f6:	4b91      	ldr	r3, [pc, #580]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024fe:	429a      	cmp	r2, r3
 8002500:	d905      	bls.n	800250e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002502:	498e      	ldr	r1, [pc, #568]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 8002504:	698b      	ldr	r3, [r1, #24]
 8002506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800250a:	431a      	orrs	r2, r3
 800250c:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	f013 0f08 	tst.w	r3, #8
 8002514:	d00c      	beq.n	8002530 <HAL_RCC_ClockConfig+0x74>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002516:	6962      	ldr	r2, [r4, #20]
 8002518:	4b88      	ldr	r3, [pc, #544]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002520:	429a      	cmp	r2, r3
 8002522:	d905      	bls.n	8002530 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002524:	4985      	ldr	r1, [pc, #532]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 8002526:	69cb      	ldr	r3, [r1, #28]
 8002528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800252c:	431a      	orrs	r2, r3
 800252e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	f013 0f10 	tst.w	r3, #16
 8002536:	d00c      	beq.n	8002552 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002538:	69a2      	ldr	r2, [r4, #24]
 800253a:	4b80      	ldr	r3, [pc, #512]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002542:	429a      	cmp	r2, r3
 8002544:	d905      	bls.n	8002552 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002546:	497d      	ldr	r1, [pc, #500]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 8002548:	69cb      	ldr	r3, [r1, #28]
 800254a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800254e:	431a      	orrs	r2, r3
 8002550:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	f013 0f20 	tst.w	r3, #32
 8002558:	d00c      	beq.n	8002574 <HAL_RCC_ClockConfig+0xb8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800255a:	69e2      	ldr	r2, [r4, #28]
 800255c:	4b77      	ldr	r3, [pc, #476]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002564:	429a      	cmp	r2, r3
 8002566:	d905      	bls.n	8002574 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002568:	4974      	ldr	r1, [pc, #464]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 800256a:	6a0b      	ldr	r3, [r1, #32]
 800256c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002570:	431a      	orrs	r2, r3
 8002572:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	f013 0f02 	tst.w	r3, #2
 800257a:	d00c      	beq.n	8002596 <HAL_RCC_ClockConfig+0xda>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800257c:	68e2      	ldr	r2, [r4, #12]
 800257e:	4b6f      	ldr	r3, [pc, #444]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	429a      	cmp	r2, r3
 8002588:	d905      	bls.n	8002596 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258a:	496c      	ldr	r1, [pc, #432]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 800258c:	698b      	ldr	r3, [r1, #24]
 800258e:	f023 030f 	bic.w	r3, r3, #15
 8002592:	431a      	orrs	r2, r3
 8002594:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	f013 0f01 	tst.w	r3, #1
 800259c:	d041      	beq.n	8002622 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800259e:	4a67      	ldr	r2, [pc, #412]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 80025a0:	6993      	ldr	r3, [r2, #24]
 80025a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025a6:	68a1      	ldr	r1, [r4, #8]
 80025a8:	430b      	orrs	r3, r1
 80025aa:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ac:	6863      	ldr	r3, [r4, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x10c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d027      	beq.n	8002606 <HAL_RCC_ClockConfig+0x14a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d02c      	beq.n	8002614 <HAL_RCC_ClockConfig+0x158>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025ba:	4a60      	ldr	r2, [pc, #384]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	f012 0f04 	tst.w	r2, #4
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 80025c4:	2001      	movs	r0, #1
 80025c6:	e0ad      	b.n	8002724 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80025ce:	f000 80ae 	beq.w	800272e <HAL_RCC_ClockConfig+0x272>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025d2:	495a      	ldr	r1, [pc, #360]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 80025d4:	690a      	ldr	r2, [r1, #16]
 80025d6:	f022 0207 	bic.w	r2, r2, #7
 80025da:	4313      	orrs	r3, r2
 80025dc:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 80025de:	f7fe fa47 	bl	8000a70 <HAL_GetTick>
 80025e2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e4:	4b55      	ldr	r3, [pc, #340]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025ec:	6862      	ldr	r2, [r4, #4]
 80025ee:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80025f2:	d016      	beq.n	8002622 <HAL_RCC_ClockConfig+0x166>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f4:	f7fe fa3c 	bl	8000a70 <HAL_GetTick>
 80025f8:	1b80      	subs	r0, r0, r6
 80025fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80025fe:	4298      	cmp	r0, r3
 8002600:	d9f0      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 8002602:	2003      	movs	r0, #3
 8002604:	e08e      	b.n	8002724 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002606:	4a4d      	ldr	r2, [pc, #308]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800260e:	d1e0      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8002610:	2001      	movs	r0, #1
 8002612:	e087      	b.n	8002724 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002614:	4a49      	ldr	r2, [pc, #292]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800261c:	d1d9      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 800261e:	2001      	movs	r0, #1
 8002620:	e080      	b.n	8002724 <HAL_RCC_ClockConfig+0x268>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	f013 0f02 	tst.w	r3, #2
 8002628:	d00c      	beq.n	8002644 <HAL_RCC_ClockConfig+0x188>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800262a:	68e2      	ldr	r2, [r4, #12]
 800262c:	4b43      	ldr	r3, [pc, #268]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	429a      	cmp	r2, r3
 8002636:	d205      	bcs.n	8002644 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002638:	4940      	ldr	r1, [pc, #256]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 800263a:	698b      	ldr	r3, [r1, #24]
 800263c:	f023 030f 	bic.w	r3, r3, #15
 8002640:	431a      	orrs	r2, r3
 8002642:	618a      	str	r2, [r1, #24]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002644:	4b3c      	ldr	r3, [pc, #240]	@ (8002738 <HAL_RCC_ClockConfig+0x27c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	42ab      	cmp	r3, r5
 800264e:	d90a      	bls.n	8002666 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002650:	4a39      	ldr	r2, [pc, #228]	@ (8002738 <HAL_RCC_ClockConfig+0x27c>)
 8002652:	6813      	ldr	r3, [r2, #0]
 8002654:	f023 030f 	bic.w	r3, r3, #15
 8002658:	432b      	orrs	r3, r5
 800265a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265c:	6813      	ldr	r3, [r2, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	42ab      	cmp	r3, r5
 8002664:	d165      	bne.n	8002732 <HAL_RCC_ClockConfig+0x276>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	f013 0f04 	tst.w	r3, #4
 800266c:	d00c      	beq.n	8002688 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800266e:	6922      	ldr	r2, [r4, #16]
 8002670:	4b32      	ldr	r3, [pc, #200]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002678:	429a      	cmp	r2, r3
 800267a:	d205      	bcs.n	8002688 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800267c:	492f      	ldr	r1, [pc, #188]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 800267e:	698b      	ldr	r3, [r1, #24]
 8002680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002684:	431a      	orrs	r2, r3
 8002686:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	f013 0f08 	tst.w	r3, #8
 800268e:	d00c      	beq.n	80026aa <HAL_RCC_ClockConfig+0x1ee>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002690:	6962      	ldr	r2, [r4, #20]
 8002692:	4b2a      	ldr	r3, [pc, #168]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800269a:	429a      	cmp	r2, r3
 800269c:	d205      	bcs.n	80026aa <HAL_RCC_ClockConfig+0x1ee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800269e:	4927      	ldr	r1, [pc, #156]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 80026a0:	69cb      	ldr	r3, [r1, #28]
 80026a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a6:	431a      	orrs	r2, r3
 80026a8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	f013 0f10 	tst.w	r3, #16
 80026b0:	d00c      	beq.n	80026cc <HAL_RCC_ClockConfig+0x210>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026b2:	69a2      	ldr	r2, [r4, #24]
 80026b4:	4b21      	ldr	r3, [pc, #132]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026bc:	429a      	cmp	r2, r3
 80026be:	d205      	bcs.n	80026cc <HAL_RCC_ClockConfig+0x210>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026c0:	491e      	ldr	r1, [pc, #120]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 80026c2:	69cb      	ldr	r3, [r1, #28]
 80026c4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80026c8:	431a      	orrs	r2, r3
 80026ca:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	f013 0f20 	tst.w	r3, #32
 80026d2:	d00c      	beq.n	80026ee <HAL_RCC_ClockConfig+0x232>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026d4:	69e2      	ldr	r2, [r4, #28]
 80026d6:	4b19      	ldr	r3, [pc, #100]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026de:	429a      	cmp	r2, r3
 80026e0:	d205      	bcs.n	80026ee <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80026e2:	4916      	ldr	r1, [pc, #88]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 80026e4:	6a0b      	ldr	r3, [r1, #32]
 80026e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026ea:	431a      	orrs	r2, r3
 80026ec:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026ee:	f7ff fde9 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 80026f2:	4912      	ldr	r1, [pc, #72]	@ (800273c <HAL_RCC_ClockConfig+0x280>)
 80026f4:	698b      	ldr	r3, [r1, #24]
 80026f6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80026fa:	4a11      	ldr	r2, [pc, #68]	@ (8002740 <HAL_RCC_ClockConfig+0x284>)
 80026fc:	5cd3      	ldrb	r3, [r2, r3]
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002704:	698b      	ldr	r3, [r1, #24]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	5cd3      	ldrb	r3, [r2, r3]
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	fa20 f303 	lsr.w	r3, r0, r3
 8002714:	4a0b      	ldr	r2, [pc, #44]	@ (8002744 <HAL_RCC_ClockConfig+0x288>)
 8002716:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <HAL_RCC_ClockConfig+0x28c>)
 800271a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800271c:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_RCC_ClockConfig+0x290>)
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	f7fe f944 	bl	80009ac <HAL_InitTick>
}
 8002724:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002726:	2001      	movs	r0, #1
}
 8002728:	4770      	bx	lr
      return HAL_ERROR;
 800272a:	2001      	movs	r0, #1
 800272c:	e7fa      	b.n	8002724 <HAL_RCC_ClockConfig+0x268>
        return HAL_ERROR;
 800272e:	2001      	movs	r0, #1
 8002730:	e7f8      	b.n	8002724 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8002732:	2001      	movs	r0, #1
 8002734:	e7f6      	b.n	8002724 <HAL_RCC_ClockConfig+0x268>
 8002736:	bf00      	nop
 8002738:	52002000 	.word	0x52002000
 800273c:	58024400 	.word	0x58024400
 8002740:	0800676c 	.word	0x0800676c
 8002744:	24000000 	.word	0x24000000
 8002748:	24000004 	.word	0x24000004
 800274c:	24000014 	.word	0x24000014

08002750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002750:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002752:	f7ff fdb7 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002756:	4a0b      	ldr	r2, [pc, #44]	@ (8002784 <HAL_RCC_GetHCLKFreq+0x34>)
 8002758:	6993      	ldr	r3, [r2, #24]
 800275a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800275e:	490a      	ldr	r1, [pc, #40]	@ (8002788 <HAL_RCC_GetHCLKFreq+0x38>)
 8002760:	5ccb      	ldrb	r3, [r1, r3]
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800276a:	6992      	ldr	r2, [r2, #24]
 800276c:	f002 020f 	and.w	r2, r2, #15
 8002770:	5c88      	ldrb	r0, [r1, r2]
 8002772:	f000 001f 	and.w	r0, r0, #31
 8002776:	fa23 f000 	lsr.w	r0, r3, r0
 800277a:	4a04      	ldr	r2, [pc, #16]	@ (800278c <HAL_RCC_GetHCLKFreq+0x3c>)
 800277c:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800277e:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <HAL_RCC_GetHCLKFreq+0x40>)
 8002780:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002782:	bd08      	pop	{r3, pc}
 8002784:	58024400 	.word	0x58024400
 8002788:	0800676c 	.word	0x0800676c
 800278c:	24000000 	.word	0x24000000
 8002790:	24000004 	.word	0x24000004

08002794 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002794:	4b40      	ldr	r3, [pc, #256]	@ (8002898 <RCCEx_PLL2_Config+0x104>)
 8002796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b03      	cmp	r3, #3
 800279e:	d079      	beq.n	8002894 <RCCEx_PLL2_Config+0x100>
{
 80027a0:	b570      	push	{r4, r5, r6, lr}
 80027a2:	4605      	mov	r5, r0
 80027a4:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80027a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002898 <RCCEx_PLL2_Config+0x104>)
 80027a8:	6813      	ldr	r3, [r2, #0]
 80027aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b0:	f7fe f95e 	bl	8000a70 <HAL_GetTick>
 80027b4:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80027b6:	4b38      	ldr	r3, [pc, #224]	@ (8002898 <RCCEx_PLL2_Config+0x104>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80027be:	d006      	beq.n	80027ce <RCCEx_PLL2_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80027c0:	f7fe f956 	bl	8000a70 <HAL_GetTick>
 80027c4:	1b03      	subs	r3, r0, r4
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d9f5      	bls.n	80027b6 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 80027ca:	2003      	movs	r0, #3

  }


  return status;
}
 80027cc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80027ce:	4b32      	ldr	r3, [pc, #200]	@ (8002898 <RCCEx_PLL2_Config+0x104>)
 80027d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027d2:	f422 327c 	bic.w	r2, r2, #258048	@ 0x3f000
 80027d6:	6829      	ldr	r1, [r5, #0]
 80027d8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80027dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80027de:	686a      	ldr	r2, [r5, #4]
 80027e0:	3a01      	subs	r2, #1
 80027e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027e6:	68a9      	ldr	r1, [r5, #8]
 80027e8:	3901      	subs	r1, #1
 80027ea:	0249      	lsls	r1, r1, #9
 80027ec:	b289      	uxth	r1, r1
 80027ee:	430a      	orrs	r2, r1
 80027f0:	68e9      	ldr	r1, [r5, #12]
 80027f2:	3901      	subs	r1, #1
 80027f4:	0409      	lsls	r1, r1, #16
 80027f6:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 80027fa:	430a      	orrs	r2, r1
 80027fc:	6929      	ldr	r1, [r5, #16]
 80027fe:	3901      	subs	r1, #1
 8002800:	0609      	lsls	r1, r1, #24
 8002802:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8002806:	430a      	orrs	r2, r1
 8002808:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800280a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800280c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8002810:	6969      	ldr	r1, [r5, #20]
 8002812:	430a      	orrs	r2, r1
 8002814:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002818:	f022 0220 	bic.w	r2, r2, #32
 800281c:	69a9      	ldr	r1, [r5, #24]
 800281e:	430a      	orrs	r2, r1
 8002820:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002824:	f022 0210 	bic.w	r2, r2, #16
 8002828:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800282a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800282c:	f36f 02cf 	bfc	r2, #3, #13
 8002830:	69e9      	ldr	r1, [r5, #28]
 8002832:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002836:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800283a:	f042 0210 	orr.w	r2, r2, #16
 800283e:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8002840:	b9c6      	cbnz	r6, 8002874 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002842:	461a      	mov	r2, r3
 8002844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002846:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800284a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL2_ENABLE();
 800284c:	4a12      	ldr	r2, [pc, #72]	@ (8002898 <RCCEx_PLL2_Config+0x104>)
 800284e:	6813      	ldr	r3, [r2, #0]
 8002850:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002854:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002856:	f7fe f90b 	bl	8000a70 <HAL_GetTick>
 800285a:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800285c:	4b0e      	ldr	r3, [pc, #56]	@ (8002898 <RCCEx_PLL2_Config+0x104>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002864:	d114      	bne.n	8002890 <RCCEx_PLL2_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002866:	f7fe f903 	bl	8000a70 <HAL_GetTick>
 800286a:	1b00      	subs	r0, r0, r4
 800286c:	2802      	cmp	r0, #2
 800286e:	d9f5      	bls.n	800285c <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8002870:	2003      	movs	r0, #3
 8002872:	e7ab      	b.n	80027cc <RCCEx_PLL2_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8002874:	2e01      	cmp	r6, #1
 8002876:	d005      	beq.n	8002884 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002878:	4a07      	ldr	r2, [pc, #28]	@ (8002898 <RCCEx_PLL2_Config+0x104>)
 800287a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800287c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002880:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002882:	e7e3      	b.n	800284c <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002884:	4a04      	ldr	r2, [pc, #16]	@ (8002898 <RCCEx_PLL2_Config+0x104>)
 8002886:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002888:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800288c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800288e:	e7dd      	b.n	800284c <RCCEx_PLL2_Config+0xb8>
  return status;
 8002890:	2000      	movs	r0, #0
 8002892:	e79b      	b.n	80027cc <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8002894:	2001      	movs	r0, #1
}
 8002896:	4770      	bx	lr
 8002898:	58024400 	.word	0x58024400

0800289c <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800289c:	4b40      	ldr	r3, [pc, #256]	@ (80029a0 <RCCEx_PLL3_Config+0x104>)
 800289e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d079      	beq.n	800299c <RCCEx_PLL3_Config+0x100>
{
 80028a8:	b570      	push	{r4, r5, r6, lr}
 80028aa:	4605      	mov	r5, r0
 80028ac:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80028ae:	4a3c      	ldr	r2, [pc, #240]	@ (80029a0 <RCCEx_PLL3_Config+0x104>)
 80028b0:	6813      	ldr	r3, [r2, #0]
 80028b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b8:	f7fe f8da 	bl	8000a70 <HAL_GetTick>
 80028bc:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80028be:	4b38      	ldr	r3, [pc, #224]	@ (80029a0 <RCCEx_PLL3_Config+0x104>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80028c6:	d006      	beq.n	80028d6 <RCCEx_PLL3_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80028c8:	f7fe f8d2 	bl	8000a70 <HAL_GetTick>
 80028cc:	1b03      	subs	r3, r0, r4
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d9f5      	bls.n	80028be <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 80028d2:	2003      	movs	r0, #3

  }


  return status;
}
 80028d4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80028d6:	4b32      	ldr	r3, [pc, #200]	@ (80029a0 <RCCEx_PLL3_Config+0x104>)
 80028d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028da:	f022 727c 	bic.w	r2, r2, #66060288	@ 0x3f00000
 80028de:	6829      	ldr	r1, [r5, #0]
 80028e0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80028e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80028e6:	686a      	ldr	r2, [r5, #4]
 80028e8:	3a01      	subs	r2, #1
 80028ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028ee:	68a9      	ldr	r1, [r5, #8]
 80028f0:	3901      	subs	r1, #1
 80028f2:	0249      	lsls	r1, r1, #9
 80028f4:	b289      	uxth	r1, r1
 80028f6:	430a      	orrs	r2, r1
 80028f8:	68e9      	ldr	r1, [r5, #12]
 80028fa:	3901      	subs	r1, #1
 80028fc:	0409      	lsls	r1, r1, #16
 80028fe:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8002902:	430a      	orrs	r2, r1
 8002904:	6929      	ldr	r1, [r5, #16]
 8002906:	3901      	subs	r1, #1
 8002908:	0609      	lsls	r1, r1, #24
 800290a:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 800290e:	430a      	orrs	r2, r1
 8002910:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002914:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002918:	6969      	ldr	r1, [r5, #20]
 800291a:	430a      	orrs	r2, r1
 800291c:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800291e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002920:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002924:	69a9      	ldr	r1, [r5, #24]
 8002926:	430a      	orrs	r2, r1
 8002928:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800292a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800292c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002930:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002932:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002934:	f36f 02cf 	bfc	r2, #3, #13
 8002938:	69e9      	ldr	r1, [r5, #28]
 800293a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800293e:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002942:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002946:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8002948:	b9c6      	cbnz	r6, 800297c <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800294a:	461a      	mov	r2, r3
 800294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002952:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8002954:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <RCCEx_PLL3_Config+0x104>)
 8002956:	6813      	ldr	r3, [r2, #0]
 8002958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800295c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800295e:	f7fe f887 	bl	8000a70 <HAL_GetTick>
 8002962:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002964:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <RCCEx_PLL3_Config+0x104>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800296c:	d114      	bne.n	8002998 <RCCEx_PLL3_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800296e:	f7fe f87f 	bl	8000a70 <HAL_GetTick>
 8002972:	1b00      	subs	r0, r0, r4
 8002974:	2802      	cmp	r0, #2
 8002976:	d9f5      	bls.n	8002964 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8002978:	2003      	movs	r0, #3
 800297a:	e7ab      	b.n	80028d4 <RCCEx_PLL3_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 800297c:	2e01      	cmp	r6, #1
 800297e:	d005      	beq.n	800298c <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002980:	4a07      	ldr	r2, [pc, #28]	@ (80029a0 <RCCEx_PLL3_Config+0x104>)
 8002982:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002984:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002988:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800298a:	e7e3      	b.n	8002954 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800298c:	4a04      	ldr	r2, [pc, #16]	@ (80029a0 <RCCEx_PLL3_Config+0x104>)
 800298e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002990:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002994:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002996:	e7dd      	b.n	8002954 <RCCEx_PLL3_Config+0xb8>
  return status;
 8002998:	2000      	movs	r0, #0
 800299a:	e79b      	b.n	80028d4 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 800299c:	2001      	movs	r0, #1
}
 800299e:	4770      	bx	lr
 80029a0:	58024400 	.word	0x58024400

080029a4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a6:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029a8:	6803      	ldr	r3, [r0, #0]
 80029aa:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80029ae:	d030      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80029b0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80029b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029b6:	d026      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80029b8:	d80e      	bhi.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80029ba:	b1ab      	cbz	r3, 80029e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029c0:	d107      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029c2:	2102      	movs	r1, #2
 80029c4:	3008      	adds	r0, #8
 80029c6:	f7ff fee5 	bl	8002794 <RCCEx_PLL2_Config>
 80029ca:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80029cc:	b195      	cbz	r5, 80029f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
      status = ret;
 80029ce:	462e      	mov	r6, r5
 80029d0:	e021      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80029d2:	2601      	movs	r6, #1
 80029d4:	4635      	mov	r5, r6
 80029d6:	e01e      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80029d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029dc:	d101      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80029de:	2500      	movs	r5, #0
 80029e0:	e008      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80029e2:	2601      	movs	r6, #1
 80029e4:	4635      	mov	r5, r6
 80029e6:	e016      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x72>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e8:	4a97      	ldr	r2, [pc, #604]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80029ea:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80029ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029f2:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80029f4:	4a94      	ldr	r2, [pc, #592]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80029f6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80029f8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80029fc:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80029fe:	430b      	orrs	r3, r1
 8002a00:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a02:	2600      	movs	r6, #0
 8002a04:	e007      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002a06:	2102      	movs	r1, #2
 8002a08:	3028      	adds	r0, #40	@ 0x28
 8002a0a:	f7ff ff47 	bl	800289c <RCCEx_PLL3_Config>
 8002a0e:	4605      	mov	r5, r0
        break;
 8002a10:	e7dc      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a12:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a14:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a16:	6823      	ldr	r3, [r4, #0]
 8002a18:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002a1c:	d027      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a1e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d820      	bhi.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8002a24:	e8df f003 	tbb	[pc, r3]
 8002a28:	08181103 	.word	0x08181103
 8002a2c:	08          	.byte	0x08
 8002a2d:	00          	.byte	0x00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a2e:	4a86      	ldr	r2, [pc, #536]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002a30:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a36:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8002a38:	b9c5      	cbnz	r5, 8002a6c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a3a:	4a83      	ldr	r2, [pc, #524]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002a3c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8002a3e:	f023 0307 	bic.w	r3, r3, #7
 8002a42:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002a44:	430b      	orrs	r3, r1
 8002a46:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a48:	e011      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0xca>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	f104 0008 	add.w	r0, r4, #8
 8002a50:	f7ff fea0 	bl	8002794 <RCCEx_PLL2_Config>
 8002a54:	4605      	mov	r5, r0
        break;
 8002a56:	e7ef      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x94>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a58:	2100      	movs	r1, #0
 8002a5a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8002a5e:	f7ff ff1d 	bl	800289c <RCCEx_PLL3_Config>
 8002a62:	4605      	mov	r5, r0
        break;
 8002a64:	e7e8      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a66:	2601      	movs	r6, #1
 8002a68:	4635      	mov	r5, r6
 8002a6a:	e000      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0xca>
      status = ret;
 8002a6c:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002a74:	d025      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai23ClockSelection)
 8002a76:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002a78:	2b80      	cmp	r3, #128	@ 0x80
 8002a7a:	d037      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002a7c:	d80c      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a7e:	b19b      	cbz	r3, 8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002a80:	2b40      	cmp	r3, #64	@ 0x40
 8002a82:	d106      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xee>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a84:	2100      	movs	r1, #0
 8002a86:	f104 0008 	add.w	r0, r4, #8
 8002a8a:	f7ff fe83 	bl	8002794 <RCCEx_PLL2_Config>
 8002a8e:	4605      	mov	r5, r0
        break;
 8002a90:	e00f      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    switch (PeriphClkInit->Sai23ClockSelection)
 8002a92:	2601      	movs	r6, #1
 8002a94:	4635      	mov	r5, r6
 8002a96:	e014      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8002a98:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8002a9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aa0:	d007      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8002aa2:	2601      	movs	r6, #1
 8002aa4:	4635      	mov	r5, r6
 8002aa6:	e00c      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa8:	4a67      	ldr	r2, [pc, #412]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002aaa:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8002ab2:	bb15      	cbnz	r5, 8002afa <HAL_RCCEx_PeriphCLKConfig+0x156>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ab4:	4a64      	ldr	r2, [pc, #400]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002ab6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8002ab8:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8002abc:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002ac8:	d033      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Sai4AClockSelection)
 8002aca:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8002ace:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ad2:	d043      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002ad4:	d816      	bhi.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002ad6:	b1f3      	cbz	r3, 8002b16 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002ad8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002adc:	d10f      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ade:	2100      	movs	r1, #0
 8002ae0:	f104 0008 	add.w	r0, r4, #8
 8002ae4:	f7ff fe56 	bl	8002794 <RCCEx_PLL2_Config>
 8002ae8:	4605      	mov	r5, r0
        break;
 8002aea:	e019      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002aec:	2100      	movs	r1, #0
 8002aee:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8002af2:	f7ff fed3 	bl	800289c <RCCEx_PLL3_Config>
 8002af6:	4605      	mov	r5, r0
        break;
 8002af8:	e7db      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      status = ret;
 8002afa:	462e      	mov	r6, r5
 8002afc:	e7e1      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4AClockSelection)
 8002afe:	2601      	movs	r6, #1
 8002b00:	4635      	mov	r5, r6
 8002b02:	e016      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8002b04:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002b08:	d00a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b0e:	d007      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b10:	2601      	movs	r6, #1
 8002b12:	4635      	mov	r5, r6
 8002b14:	e00d      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x18e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b16:	4a4c      	ldr	r2, [pc, #304]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002b18:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8002b20:	bb1d      	cbnz	r5, 8002b6a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b22:	4a49      	ldr	r2, [pc, #292]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002b24:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002b26:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8002b2a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8002b38:	d03c      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x210>
    switch (PeriphClkInit->Sai4BClockSelection)
 8002b3a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8002b3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b42:	d02f      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b44:	d816      	bhi.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8002b46:	b1f3      	cbz	r3, 8002b86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b4c:	d10f      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b4e:	2100      	movs	r1, #0
 8002b50:	f104 0008 	add.w	r0, r4, #8
 8002b54:	f7ff fe1e 	bl	8002794 <RCCEx_PLL2_Config>
 8002b58:	4605      	mov	r5, r0
        break;
 8002b5a:	e019      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8002b62:	f7ff fe9b 	bl	800289c <RCCEx_PLL3_Config>
 8002b66:	4605      	mov	r5, r0
        break;
 8002b68:	e7da      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      status = ret;
 8002b6a:	462e      	mov	r6, r5
 8002b6c:	e7e1      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Sai4BClockSelection)
 8002b6e:	2601      	movs	r6, #1
 8002b70:	4635      	mov	r5, r6
 8002b72:	e01f      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002b74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8002b7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b7e:	d007      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8002b80:	2601      	movs	r6, #1
 8002b82:	4635      	mov	r5, r6
 8002b84:	e016      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x210>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b86:	4a30      	ldr	r2, [pc, #192]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002b88:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8002b90:	b97d      	cbnz	r5, 8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002b92:	4a2d      	ldr	r2, [pc, #180]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002b94:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002b96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002b9a:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ba2:	e007      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x210>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8002baa:	f7ff fe77 	bl	800289c <RCCEx_PLL3_Config>
 8002bae:	4605      	mov	r5, r0
        break;
 8002bb0:	e7ee      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      status = ret;
 8002bb2:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002bba:	d013      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->QspiClockSelection)
 8002bbc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d02c      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002bc2:	d826      	bhi.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002bc4:	b133      	cbz	r3, 8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002bc6:	2b10      	cmp	r3, #16
 8002bc8:	d120      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x268>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bca:	4a1f      	ldr	r2, [pc, #124]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002bcc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8002bd4:	bb4d      	cbnz	r5, 8002c2a <HAL_RCCEx_PeriphCLKConfig+0x286>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002bd8:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8002bda:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002bde:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8002be0:	430b      	orrs	r3, r1
 8002be2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002bea:	d03c      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi123ClockSelection)
 8002bec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002bee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bf2:	d054      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002bf4:	d81e      	bhi.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x290>
 8002bf6:	b34b      	cbz	r3, 8002c4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bfc:	d117      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x28a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bfe:	2100      	movs	r1, #0
 8002c00:	f104 0008 	add.w	r0, r4, #8
 8002c04:	f7ff fdc6 	bl	8002794 <RCCEx_PLL2_Config>
 8002c08:	4605      	mov	r5, r0
        break;
 8002c0a:	e024      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
    switch (PeriphClkInit->QspiClockSelection)
 8002c0c:	2601      	movs	r6, #1
 8002c0e:	4635      	mov	r5, r6
 8002c10:	e7e8      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002c12:	2b30      	cmp	r3, #48	@ 0x30
 8002c14:	d0de      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002c16:	2601      	movs	r6, #1
 8002c18:	4635      	mov	r5, r6
 8002c1a:	e7e3      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x240>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	f104 0008 	add.w	r0, r4, #8
 8002c22:	f7ff fdb7 	bl	8002794 <RCCEx_PLL2_Config>
 8002c26:	4605      	mov	r5, r0
        break;
 8002c28:	e7d4      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      status = ret;
 8002c2a:	462e      	mov	r6, r5
 8002c2c:	e7da      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi123ClockSelection)
 8002c2e:	2601      	movs	r6, #1
 8002c30:	4635      	mov	r5, r6
 8002c32:	e018      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002c34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c38:	d00d      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8002c3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8002c40:	2601      	movs	r6, #1
 8002c42:	4635      	mov	r5, r6
 8002c44:	e00f      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002c46:	bf00      	nop
 8002c48:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c4c:	4a83      	ldr	r2, [pc, #524]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8002c4e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8002c56:	bb4d      	cbnz	r5, 8002cac <HAL_RCCEx_PeriphCLKConfig+0x308>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c58:	4a80      	ldr	r2, [pc, #512]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8002c5a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8002c5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c60:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8002c62:	430b      	orrs	r3, r1
 8002c64:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8002c6c:	d037      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x33a>
    switch (PeriphClkInit->Spi45ClockSelection)
 8002c6e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8002c70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c74:	d02b      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002c76:	d81e      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002c78:	b143      	cbz	r3, 8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c7e:	d117      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c80:	2101      	movs	r1, #1
 8002c82:	f104 0008 	add.w	r0, r4, #8
 8002c86:	f7ff fd85 	bl	8002794 <RCCEx_PLL2_Config>
 8002c8a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002c8c:	bb35      	cbnz	r5, 8002cdc <HAL_RCCEx_PeriphCLKConfig+0x338>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c8e:	4a73      	ldr	r2, [pc, #460]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8002c90:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8002c92:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002c96:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c9c:	e01f      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x33a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8002ca4:	f7ff fdfa 	bl	800289c <RCCEx_PLL3_Config>
 8002ca8:	4605      	mov	r5, r0
        break;
 8002caa:	e7d4      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      status = ret;
 8002cac:	462e      	mov	r6, r5
 8002cae:	e7da      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi45ClockSelection)
 8002cb0:	2601      	movs	r6, #1
 8002cb2:	4635      	mov	r5, r6
 8002cb4:	e013      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002cb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cba:	d0e7      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002cbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cc0:	d0e4      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002cc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cc6:	d0e1      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002cc8:	2601      	movs	r6, #1
 8002cca:	4635      	mov	r5, r6
 8002ccc:	e007      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x33a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cce:	2101      	movs	r1, #1
 8002cd0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8002cd4:	f7ff fde2 	bl	800289c <RCCEx_PLL3_Config>
 8002cd8:	4605      	mov	r5, r0
        break;
 8002cda:	e7d7      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      status = ret;
 8002cdc:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002ce4:	d030      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8002ce6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8002cea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cee:	d023      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8002cf0:	d816      	bhi.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8002cf2:	b143      	cbz	r3, 8002d06 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002cf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cf8:	d10f      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x376>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	f104 0008 	add.w	r0, r4, #8
 8002d00:	f7ff fd48 	bl	8002794 <RCCEx_PLL2_Config>
 8002d04:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002d06:	b9f5      	cbnz	r5, 8002d46 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d08:	4a54      	ldr	r2, [pc, #336]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8002d0a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002d0c:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8002d10:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 8002d14:	430b      	orrs	r3, r1
 8002d16:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d18:	e016      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8002d1a:	2601      	movs	r6, #1
 8002d1c:	4635      	mov	r5, r6
 8002d1e:	e013      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d24:	d0ef      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d2a:	d0ec      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002d2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d30:	d0e9      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002d32:	2601      	movs	r6, #1
 8002d34:	4635      	mov	r5, r6
 8002d36:	e007      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d38:	2101      	movs	r1, #1
 8002d3a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8002d3e:	f7ff fdad 	bl	800289c <RCCEx_PLL3_Config>
 8002d42:	4605      	mov	r5, r0
        break;
 8002d44:	e7df      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x362>
      status = ret;
 8002d46:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8002d4e:	d017      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    switch (PeriphClkInit->DsiClockSelection)
 8002d50:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002d52:	b143      	cbz	r3, 8002d66 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8002d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d58:	d10e      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	f104 0008 	add.w	r0, r4, #8
 8002d60:	f7ff fd18 	bl	8002794 <RCCEx_PLL2_Config>
 8002d64:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002d66:	b955      	cbnz	r5, 8002d7e <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002d68:	4a3c      	ldr	r2, [pc, #240]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8002d6a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8002d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d70:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002d72:	430b      	orrs	r3, r1
 8002d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d76:	e003      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    switch (PeriphClkInit->DsiClockSelection)
 8002d78:	2601      	movs	r6, #1
 8002d7a:	4635      	mov	r5, r6
 8002d7c:	e000      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      status = ret;
 8002d7e:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002d86:	d017      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x414>
    switch (PeriphClkInit->FdcanClockSelection)
 8002d88:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8002d8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d8e:	d006      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d94:	d01b      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002d96:	b13b      	cbz	r3, 8002da8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002d98:	2601      	movs	r6, #1
 8002d9a:	4635      	mov	r5, r6
 8002d9c:	e00c      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x414>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d9e:	4a2f      	ldr	r2, [pc, #188]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8002da0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002da6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8002da8:	b9c5      	cbnz	r5, 8002ddc <HAL_RCCEx_PeriphCLKConfig+0x438>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002daa:	4a2c      	ldr	r2, [pc, #176]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8002dac:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8002dae:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002db2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002dbe:	d01c      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x456>
    switch (PeriphClkInit->FmcClockSelection)
 8002dc0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d845      	bhi.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002dc6:	e8df f003 	tbb	[pc, r3]
 8002dca:	0b10      	.short	0x0b10
 8002dcc:	103d      	.short	0x103d
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002dce:	2101      	movs	r1, #1
 8002dd0:	f104 0008 	add.w	r0, r4, #8
 8002dd4:	f7ff fcde 	bl	8002794 <RCCEx_PLL2_Config>
 8002dd8:	4605      	mov	r5, r0
        break;
 8002dda:	e7e5      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x404>
      status = ret;
 8002ddc:	462e      	mov	r6, r5
 8002dde:	e7eb      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x414>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002de0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8002de2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8002dea:	bbad      	cbnz	r5, 8002e58 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002dec:	4a1b      	ldr	r2, [pc, #108]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8002dee:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8002df0:	f023 0303 	bic.w	r3, r3, #3
 8002df4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002df6:	430b      	orrs	r3, r1
 8002df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002e00:	d12e      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	f013 0f01 	tst.w	r3, #1
 8002e08:	f000 80a7 	beq.w	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    switch (PeriphClkInit->Usart16ClockSelection)
 8002e0c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8002e10:	2b28      	cmp	r3, #40	@ 0x28
 8002e12:	f200 80a0 	bhi.w	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8002e16:	e8df f003 	tbb	[pc, r3]
 8002e1a:	9e8d      	.short	0x9e8d
 8002e1c:	9e9e9e9e 	.word	0x9e9e9e9e
 8002e20:	9e879e9e 	.word	0x9e879e9e
 8002e24:	9e9e9e9e 	.word	0x9e9e9e9e
 8002e28:	9e979e9e 	.word	0x9e979e9e
 8002e2c:	9e9e9e9e 	.word	0x9e9e9e9e
 8002e30:	9e8d9e9e 	.word	0x9e8d9e9e
 8002e34:	9e9e9e9e 	.word	0x9e9e9e9e
 8002e38:	9e8d9e9e 	.word	0x9e8d9e9e
 8002e3c:	9e9e9e9e 	.word	0x9e9e9e9e
 8002e40:	9e9e      	.short	0x9e9e
 8002e42:	8d          	.byte	0x8d
 8002e43:	00          	.byte	0x00
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e44:	2102      	movs	r1, #2
 8002e46:	f104 0008 	add.w	r0, r4, #8
 8002e4a:	f7ff fca3 	bl	8002794 <RCCEx_PLL2_Config>
 8002e4e:	4605      	mov	r5, r0
        break;
 8002e50:	e7cb      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x446>
    switch (PeriphClkInit->FmcClockSelection)
 8002e52:	2601      	movs	r6, #1
 8002e54:	4635      	mov	r5, r6
 8002e56:	e7d0      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x456>
      status = ret;
 8002e58:	462e      	mov	r6, r5
 8002e5a:	e7ce      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x456>
 8002e5c:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e60:	4a5a      	ldr	r2, [pc, #360]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8002e62:	6813      	ldr	r3, [r2, #0]
 8002e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e68:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002e6a:	f7fd fe01 	bl	8000a70 <HAL_GetTick>
 8002e6e:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e70:	4b56      	ldr	r3, [pc, #344]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002e78:	d105      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7a:	f7fd fdf9 	bl	8000a70 <HAL_GetTick>
 8002e7e:	1bc0      	subs	r0, r0, r7
 8002e80:	2864      	cmp	r0, #100	@ 0x64
 8002e82:	d9f5      	bls.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        ret = HAL_TIMEOUT;
 8002e84:	2503      	movs	r5, #3
    if (ret == HAL_OK)
 8002e86:	2d00      	cmp	r5, #0
 8002e88:	d14a      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e8a:	4b51      	ldr	r3, [pc, #324]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8e:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 8002e92:	4053      	eors	r3, r2
 8002e94:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002e98:	d00c      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x510>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e9a:	4b4d      	ldr	r3, [pc, #308]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002e9c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e9e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ea2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002ea4:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8002ea8:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eaa:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002eac:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8002eb0:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8002eb2:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002eb4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 8002eb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ebc:	d015      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x546>
      if (ret == HAL_OK)
 8002ebe:	bb8d      	cbnz	r5, 8002f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ec0:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 8002ec4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8002ec8:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002ecc:	d01e      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x568>
 8002ece:	4a40      	ldr	r2, [pc, #256]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002ed0:	6913      	ldr	r3, [r2, #16]
 8002ed2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002ed6:	6113      	str	r3, [r2, #16]
 8002ed8:	493d      	ldr	r1, [pc, #244]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002eda:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8002edc:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 8002ee0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	670b      	str	r3, [r1, #112]	@ 0x70
 8002ee8:	e78b      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        tickstart = HAL_GetTick();
 8002eea:	f7fd fdc1 	bl	8000a70 <HAL_GetTick>
 8002eee:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ef0:	4b37      	ldr	r3, [pc, #220]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef4:	f013 0f02 	tst.w	r3, #2
 8002ef8:	d1e1      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x51a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fd fdb9 	bl	8000a70 <HAL_GetTick>
 8002efe:	1bc0      	subs	r0, r0, r7
 8002f00:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f04:	4298      	cmp	r0, r3
 8002f06:	d9f3      	bls.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
            ret = HAL_TIMEOUT;
 8002f08:	2503      	movs	r5, #3
 8002f0a:	e7d8      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x51a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f0c:	4830      	ldr	r0, [pc, #192]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002f0e:	6902      	ldr	r2, [r0, #16]
 8002f10:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8002f14:	492f      	ldr	r1, [pc, #188]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x630>)
 8002f16:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	6103      	str	r3, [r0, #16]
 8002f1e:	e7db      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      status = ret;
 8002f20:	462e      	mov	r6, r5
 8002f22:	e76e      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        status = ret;
 8002f24:	462e      	mov	r6, r5
 8002f26:	e76c      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f28:	2101      	movs	r1, #1
 8002f2a:	f104 0008 	add.w	r0, r4, #8
 8002f2e:	f7ff fc31 	bl	8002794 <RCCEx_PLL2_Config>
 8002f32:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002f34:	b9ed      	cbnz	r5, 8002f72 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f36:	4a26      	ldr	r2, [pc, #152]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002f38:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002f3a:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8002f3e:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8002f42:	430b      	orrs	r3, r1
 8002f44:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f46:	e008      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f48:	2101      	movs	r1, #1
 8002f4a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8002f4e:	f7ff fca5 	bl	800289c <RCCEx_PLL3_Config>
 8002f52:	4605      	mov	r5, r0
        break;
 8002f54:	e7ee      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch (PeriphClkInit->Usart16ClockSelection)
 8002f56:	2601      	movs	r6, #1
 8002f58:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	f013 0f02 	tst.w	r3, #2
 8002f60:	d017      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002f62:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8002f64:	2b05      	cmp	r3, #5
 8002f66:	d82c      	bhi.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8002f68:	e8df f003 	tbb	[pc, r3]
 8002f6c:	0b24050b 	.word	0x0b24050b
 8002f70:	0b0b      	.short	0x0b0b
      status = ret;
 8002f72:	462e      	mov	r6, r5
 8002f74:	e7f1      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f76:	2101      	movs	r1, #1
 8002f78:	f104 0008 	add.w	r0, r4, #8
 8002f7c:	f7ff fc0a 	bl	8002794 <RCCEx_PLL2_Config>
 8002f80:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002f82:	bb0d      	cbnz	r5, 8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f84:	4a12      	ldr	r2, [pc, #72]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002f86:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002f88:	f023 0307 	bic.w	r3, r3, #7
 8002f8c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	f013 0f04 	tst.w	r3, #4
 8002f98:	d02f      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002f9a:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8002f9e:	2b05      	cmp	r3, #5
 8002fa0:	f200 810e 	bhi.w	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8002fa4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002fa8:	0018001e 	.word	0x0018001e
 8002fac:	001e0105 	.word	0x001e0105
 8002fb0:	001e001e 	.word	0x001e001e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8002fba:	f7ff fc6f 	bl	800289c <RCCEx_PLL3_Config>
 8002fbe:	4605      	mov	r5, r0
        break;
 8002fc0:	e7df      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002fc2:	2601      	movs	r6, #1
 8002fc4:	4635      	mov	r5, r6
 8002fc6:	e7e4      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 8002fc8:	462e      	mov	r6, r5
 8002fca:	e7e2      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8002fcc:	58024800 	.word	0x58024800
 8002fd0:	58024400 	.word	0x58024400
 8002fd4:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fd8:	2101      	movs	r1, #1
 8002fda:	f104 0008 	add.w	r0, r4, #8
 8002fde:	f7ff fbd9 	bl	8002794 <RCCEx_PLL2_Config>
 8002fe2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002fe4:	2d00      	cmp	r5, #0
 8002fe6:	f040 80ee 	bne.w	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x822>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fea:	4ab6      	ldr	r2, [pc, #728]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002fec:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002fee:	f023 0307 	bic.w	r3, r3, #7
 8002ff2:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ffa:	6823      	ldr	r3, [r4, #0]
 8002ffc:	f013 0f20 	tst.w	r3, #32
 8003000:	d01d      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x69a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003002:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8003006:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800300a:	f000 80f0 	beq.w	80031ee <HAL_RCCEx_PeriphCLKConfig+0x84a>
 800300e:	f200 80df 	bhi.w	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003012:	b14b      	cbz	r3, 8003028 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003014:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003018:	f040 80d7 	bne.w	80031ca <HAL_RCCEx_PeriphCLKConfig+0x826>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800301c:	2100      	movs	r1, #0
 800301e:	f104 0008 	add.w	r0, r4, #8
 8003022:	f7ff fbb7 	bl	8002794 <RCCEx_PLL2_Config>
 8003026:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003028:	2d00      	cmp	r5, #0
 800302a:	f040 80e7 	bne.w	80031fc <HAL_RCCEx_PeriphCLKConfig+0x858>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800302e:	4aa5      	ldr	r2, [pc, #660]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003030:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003032:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8003036:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800303a:	430b      	orrs	r3, r1
 800303c:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003044:	d01d      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x6de>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003046:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800304a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800304e:	f000 80e9 	beq.w	8003224 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8003052:	f200 80d8 	bhi.w	8003206 <HAL_RCCEx_PeriphCLKConfig+0x862>
 8003056:	b14b      	cbz	r3, 800306c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8003058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305c:	f040 80d0 	bne.w	8003200 <HAL_RCCEx_PeriphCLKConfig+0x85c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003060:	2100      	movs	r1, #0
 8003062:	f104 0008 	add.w	r0, r4, #8
 8003066:	f7ff fb95 	bl	8002794 <RCCEx_PLL2_Config>
 800306a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800306c:	2d00      	cmp	r5, #0
 800306e:	f040 80e0 	bne.w	8003232 <HAL_RCCEx_PeriphCLKConfig+0x88e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003072:	4a94      	ldr	r2, [pc, #592]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003074:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003076:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800307a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800307e:	430b      	orrs	r3, r1
 8003080:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003088:	d01d      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x722>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800308a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800308e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003092:	f000 80e2 	beq.w	800325a <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8003096:	f200 80d1 	bhi.w	800323c <HAL_RCCEx_PeriphCLKConfig+0x898>
 800309a:	b14b      	cbz	r3, 80030b0 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800309c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030a0:	f040 80c9 	bne.w	8003236 <HAL_RCCEx_PeriphCLKConfig+0x892>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030a4:	2100      	movs	r1, #0
 80030a6:	f104 0008 	add.w	r0, r4, #8
 80030aa:	f7ff fb73 	bl	8002794 <RCCEx_PLL2_Config>
 80030ae:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80030b0:	2d00      	cmp	r5, #0
 80030b2:	f040 80d9 	bne.w	8003268 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80030b6:	4a83      	ldr	r2, [pc, #524]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80030b8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80030ba:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80030be:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 80030c2:	430b      	orrs	r3, r1
 80030c4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	f013 0f08 	tst.w	r3, #8
 80030cc:	d00d      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x746>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80030ce:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 80030d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030d6:	f000 80c9 	beq.w	800326c <HAL_RCCEx_PeriphCLKConfig+0x8c8>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80030da:	4a7a      	ldr	r2, [pc, #488]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80030dc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80030de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030e2:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80030e6:	430b      	orrs	r3, r1
 80030e8:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	f013 0f10 	tst.w	r3, #16
 80030f0:	d00d      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x76a>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80030f2:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80030f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030fa:	f000 80c1 	beq.w	8003280 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030fe:	4a71      	ldr	r2, [pc, #452]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003100:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003102:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003106:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800310a:	430b      	orrs	r3, r1
 800310c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8003114:	d01c      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    switch (PeriphClkInit->AdcClockSelection)
 8003116:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800311a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800311e:	f000 80b9 	beq.w	8003294 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003122:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003126:	d008      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x796>
 8003128:	2b00      	cmp	r3, #0
 800312a:	f040 80ba 	bne.w	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800312e:	2100      	movs	r1, #0
 8003130:	f104 0008 	add.w	r0, r4, #8
 8003134:	f7ff fb2e 	bl	8002794 <RCCEx_PLL2_Config>
 8003138:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800313a:	2d00      	cmp	r5, #0
 800313c:	f040 80b4 	bne.w	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003140:	4a60      	ldr	r2, [pc, #384]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003142:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003144:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003148:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 800314c:	430b      	orrs	r3, r1
 800314e:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8003156:	d01c      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    switch (PeriphClkInit->UsbClockSelection)
 8003158:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800315c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003160:	f000 80a4 	beq.w	80032ac <HAL_RCCEx_PeriphCLKConfig+0x908>
 8003164:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003168:	d008      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 800316a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800316e:	f040 80a4 	bne.w	80032ba <HAL_RCCEx_PeriphCLKConfig+0x916>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003172:	4a54      	ldr	r2, [pc, #336]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003174:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800317a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800317c:	2d00      	cmp	r5, #0
 800317e:	f040 809f 	bne.w	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003182:	4a50      	ldr	r2, [pc, #320]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003184:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003186:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800318a:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 800318e:	430b      	orrs	r3, r1
 8003190:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003198:	f000 80a3 	beq.w	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
    switch (PeriphClkInit->SdmmcClockSelection)
 800319c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 8092 	beq.w	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80031a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a8:	f000 80b1 	beq.w	800330e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80031ac:	2601      	movs	r6, #1
 80031ae:	4635      	mov	r5, r6
 80031b0:	e097      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031b2:	2101      	movs	r1, #1
 80031b4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80031b8:	f7ff fb70 	bl	800289c <RCCEx_PLL3_Config>
 80031bc:	4605      	mov	r5, r0
        break;
 80031be:	e711      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x640>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80031c0:	2601      	movs	r6, #1
 80031c2:	4635      	mov	r5, r6
 80031c4:	e719      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x656>
      status = ret;
 80031c6:	462e      	mov	r6, r5
 80031c8:	e717      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80031ca:	2601      	movs	r6, #1
 80031cc:	4635      	mov	r5, r6
 80031ce:	e736      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x69a>
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d4:	f43f af28 	beq.w	8003028 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80031d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031dc:	f43f af24 	beq.w	8003028 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80031e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031e4:	f43f af20 	beq.w	8003028 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80031e8:	2601      	movs	r6, #1
 80031ea:	4635      	mov	r5, r6
 80031ec:	e727      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x69a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031ee:	2102      	movs	r1, #2
 80031f0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80031f4:	f7ff fb52 	bl	800289c <RCCEx_PLL3_Config>
 80031f8:	4605      	mov	r5, r0
        break;
 80031fa:	e715      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x684>
      status = ret;
 80031fc:	462e      	mov	r6, r5
 80031fe:	e71e      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x69a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003200:	2601      	movs	r6, #1
 8003202:	4635      	mov	r5, r6
 8003204:	e73d      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8003206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800320a:	f43f af2f 	beq.w	800306c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800320e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003212:	f43f af2b 	beq.w	800306c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8003216:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800321a:	f43f af27 	beq.w	800306c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800321e:	2601      	movs	r6, #1
 8003220:	4635      	mov	r5, r6
 8003222:	e72e      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003224:	2102      	movs	r1, #2
 8003226:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800322a:	f7ff fb37 	bl	800289c <RCCEx_PLL3_Config>
 800322e:	4605      	mov	r5, r0
        break;
 8003230:	e71c      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
      status = ret;
 8003232:	462e      	mov	r6, r5
 8003234:	e725      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x6de>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003236:	2601      	movs	r6, #1
 8003238:	4635      	mov	r5, r6
 800323a:	e744      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x722>
 800323c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003240:	f43f af36 	beq.w	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 8003244:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003248:	f43f af32 	beq.w	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800324c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003250:	f43f af2e 	beq.w	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 8003254:	2601      	movs	r6, #1
 8003256:	4635      	mov	r5, r6
 8003258:	e735      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x722>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800325a:	2102      	movs	r1, #2
 800325c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003260:	f7ff fb1c 	bl	800289c <RCCEx_PLL3_Config>
 8003264:	4605      	mov	r5, r0
        break;
 8003266:	e723      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x70c>
      status = ret;
 8003268:	462e      	mov	r6, r5
 800326a:	e72c      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x722>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800326c:	2102      	movs	r1, #2
 800326e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003272:	f7ff fb13 	bl	800289c <RCCEx_PLL3_Config>
 8003276:	2800      	cmp	r0, #0
 8003278:	f43f af2f 	beq.w	80030da <HAL_RCCEx_PeriphCLKConfig+0x736>
        status = HAL_ERROR;
 800327c:	2601      	movs	r6, #1
 800327e:	e72c      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x736>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003280:	2102      	movs	r1, #2
 8003282:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003286:	f7ff fb09 	bl	800289c <RCCEx_PLL3_Config>
 800328a:	2800      	cmp	r0, #0
 800328c:	f43f af37 	beq.w	80030fe <HAL_RCCEx_PeriphCLKConfig+0x75a>
        status = HAL_ERROR;
 8003290:	2601      	movs	r6, #1
 8003292:	e734      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x75a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003294:	2102      	movs	r1, #2
 8003296:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800329a:	f7ff faff 	bl	800289c <RCCEx_PLL3_Config>
 800329e:	4605      	mov	r5, r0
        break;
 80032a0:	e74b      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x796>
    switch (PeriphClkInit->AdcClockSelection)
 80032a2:	2601      	movs	r6, #1
 80032a4:	4635      	mov	r5, r6
 80032a6:	e753      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      status = ret;
 80032a8:	462e      	mov	r6, r5
 80032aa:	e751      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032ac:	2101      	movs	r1, #1
 80032ae:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80032b2:	f7ff faf3 	bl	800289c <RCCEx_PLL3_Config>
 80032b6:	4605      	mov	r5, r0
        break;
 80032b8:	e760      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    switch (PeriphClkInit->UsbClockSelection)
 80032ba:	2601      	movs	r6, #1
 80032bc:	4635      	mov	r5, r6
 80032be:	e768      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      status = ret;
 80032c0:	462e      	mov	r6, r5
 80032c2:	e766      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 80032c4:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032c8:	4a6f      	ldr	r2, [pc, #444]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 80032ca:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80032cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80032d2:	bb1d      	cbnz	r5, 800331c <HAL_RCCEx_PeriphCLKConfig+0x978>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80032d4:	4a6c      	ldr	r2, [pc, #432]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 80032d6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80032d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032dc:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80032de:	430b      	orrs	r3, r1
 80032e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80032e8:	d11a      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x97c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80032f0:	d032      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    switch (PeriphClkInit->RngClockSelection)
 80032f2:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80032f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032fa:	d01d      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x994>
 80032fc:	d919      	bls.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x98e>
 80032fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003302:	d01e      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8003304:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003308:	d01b      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800330a:	2601      	movs	r6, #1
 800330c:	e024      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800330e:	2102      	movs	r1, #2
 8003310:	f104 0008 	add.w	r0, r4, #8
 8003314:	f7ff fa3e 	bl	8002794 <RCCEx_PLL2_Config>
 8003318:	4605      	mov	r5, r0
        break;
 800331a:	e7da      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
      status = ret;
 800331c:	462e      	mov	r6, r5
 800331e:	e7e0      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003320:	2102      	movs	r1, #2
 8003322:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003326:	f7ff fab9 	bl	800289c <RCCEx_PLL3_Config>
 800332a:	2800      	cmp	r0, #0
 800332c:	d0dd      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x946>
      status = HAL_ERROR;
 800332e:	2601      	movs	r6, #1
 8003330:	e7db      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x946>
    switch (PeriphClkInit->RngClockSelection)
 8003332:	b133      	cbz	r3, 8003342 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8003334:	2601      	movs	r6, #1
 8003336:	e00f      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003338:	4a53      	ldr	r2, [pc, #332]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 800333a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800333c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003340:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003342:	b945      	cbnz	r5, 8003356 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003344:	4a50      	ldr	r2, [pc, #320]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 8003346:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003348:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800334c:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8003350:	430b      	orrs	r3, r1
 8003352:	6553      	str	r3, [r2, #84]	@ 0x54
 8003354:	e000      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
      status = ret;
 8003356:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800335e:	d006      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x9ca>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003360:	4a49      	ldr	r2, [pc, #292]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 8003362:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003364:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003368:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 800336a:	430b      	orrs	r3, r1
 800336c:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003374:	d007      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003376:	4a44      	ldr	r2, [pc, #272]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 8003378:	6913      	ldr	r3, [r2, #16]
 800337a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800337e:	f8d4 10bc 	ldr.w	r1, [r4, #188]	@ 0xbc
 8003382:	430b      	orrs	r3, r1
 8003384:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800338c:	d006      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800338e:	4a3e      	ldr	r2, [pc, #248]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 8003390:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003392:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003396:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8003398:	430b      	orrs	r3, r1
 800339a:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80033a2:	d009      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033a4:	4b38      	ldr	r3, [pc, #224]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033ac:	611a      	str	r2, [r3, #16]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 80033b4:	430a      	orrs	r2, r1
 80033b6:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	da06      	bge.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80033be:	4a32      	ldr	r2, [pc, #200]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 80033c0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80033c2:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80033c6:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80033c8:	430b      	orrs	r3, r1
 80033ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033cc:	6823      	ldr	r3, [r4, #0]
 80033ce:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80033d2:	d007      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003488 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 80033d6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80033d8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80033dc:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80033e4:	6863      	ldr	r3, [r4, #4]
 80033e6:	f013 0f01 	tst.w	r3, #1
 80033ea:	d117      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xa78>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80033ec:	6863      	ldr	r3, [r4, #4]
 80033ee:	f013 0f02 	tst.w	r3, #2
 80033f2:	d11c      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xa8a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80033f4:	6863      	ldr	r3, [r4, #4]
 80033f6:	f013 0f04 	tst.w	r3, #4
 80033fa:	d121      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xa9c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80033fc:	6863      	ldr	r3, [r4, #4]
 80033fe:	f013 0f08 	tst.w	r3, #8
 8003402:	d126      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xaae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003404:	6863      	ldr	r3, [r4, #4]
 8003406:	f013 0f10 	tst.w	r3, #16
 800340a:	d12b      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xac0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800340c:	6863      	ldr	r3, [r4, #4]
 800340e:	f013 0f20 	tst.w	r3, #32
 8003412:	d130      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xad2>
  if (status == HAL_OK)
 8003414:	b106      	cbz	r6, 8003418 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  return HAL_ERROR;
 8003416:	2601      	movs	r6, #1
}
 8003418:	4630      	mov	r0, r6
 800341a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800341c:	2100      	movs	r1, #0
 800341e:	f104 0008 	add.w	r0, r4, #8
 8003422:	f7ff f9b7 	bl	8002794 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8003426:	2800      	cmp	r0, #0
 8003428:	d0e0      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xa48>
      status = ret;
 800342a:	4606      	mov	r6, r0
 800342c:	e7de      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xa48>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800342e:	2101      	movs	r1, #1
 8003430:	f104 0008 	add.w	r0, r4, #8
 8003434:	f7ff f9ae 	bl	8002794 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8003438:	2800      	cmp	r0, #0
 800343a:	d0db      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
      status = ret;
 800343c:	4606      	mov	r6, r0
 800343e:	e7d9      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003440:	2102      	movs	r1, #2
 8003442:	f104 0008 	add.w	r0, r4, #8
 8003446:	f7ff f9a5 	bl	8002794 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800344a:	2800      	cmp	r0, #0
 800344c:	d0d6      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
      status = ret;
 800344e:	4606      	mov	r6, r0
 8003450:	e7d4      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003452:	2100      	movs	r1, #0
 8003454:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003458:	f7ff fa20 	bl	800289c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800345c:	2800      	cmp	r0, #0
 800345e:	d0d1      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      status = ret;
 8003460:	4606      	mov	r6, r0
 8003462:	e7cf      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003464:	2101      	movs	r1, #1
 8003466:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800346a:	f7ff fa17 	bl	800289c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800346e:	2800      	cmp	r0, #0
 8003470:	d0cc      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xa68>
      status = ret;
 8003472:	4606      	mov	r6, r0
 8003474:	e7ca      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xa68>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003476:	2102      	movs	r1, #2
 8003478:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800347c:	f7ff fa0e 	bl	800289c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8003480:	2800      	cmp	r0, #0
 8003482:	d0c7      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xa70>
  return HAL_ERROR;
 8003484:	2601      	movs	r6, #1
 8003486:	e7c7      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003488:	58024400 	.word	0x58024400

0800348c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800348c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003492:	9b01      	ldr	r3, [sp, #4]
 8003494:	3301      	adds	r3, #1
 8003496:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8003498:	9b01      	ldr	r3, [sp, #4]
 800349a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800349e:	d815      	bhi.n	80034cc <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034a0:	6903      	ldr	r3, [r0, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	daf5      	bge.n	8003492 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80034aa:	6903      	ldr	r3, [r0, #16]
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 80034b2:	9b01      	ldr	r3, [sp, #4]
 80034b4:	3301      	adds	r3, #1
 80034b6:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80034b8:	9b01      	ldr	r3, [sp, #4]
 80034ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80034be:	d808      	bhi.n	80034d2 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80034c0:	6903      	ldr	r3, [r0, #16]
 80034c2:	f013 0f01 	tst.w	r3, #1
 80034c6:	d1f4      	bne.n	80034b2 <USB_CoreReset+0x26>

  return HAL_OK;
 80034c8:	2000      	movs	r0, #0
 80034ca:	e000      	b.n	80034ce <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 80034cc:	2003      	movs	r0, #3
}
 80034ce:	b002      	add	sp, #8
 80034d0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80034d2:	2003      	movs	r0, #3
 80034d4:	e7fb      	b.n	80034ce <USB_CoreReset+0x42>
	...

080034d8 <USB_CoreInit>:
{
 80034d8:	b084      	sub	sp, #16
 80034da:	b510      	push	{r4, lr}
 80034dc:	4604      	mov	r4, r0
 80034de:	a803      	add	r0, sp, #12
 80034e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034e4:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d11f      	bne.n	800352c <USB_CoreInit+0x54>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80034ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034f2:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034f4:	68e2      	ldr	r2, [r4, #12]
 80034f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003574 <USB_CoreInit+0x9c>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80034fc:	68e3      	ldr	r3, [r4, #12]
 80034fe:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003502:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8003504:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d00a      	beq.n	8003522 <USB_CoreInit+0x4a>
    ret = USB_CoreReset(USBx);
 800350c:	4620      	mov	r0, r4
 800350e:	f7ff ffbd 	bl	800348c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8003512:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d01c      	beq.n	8003554 <USB_CoreInit+0x7c>
}
 800351a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800351e:	b004      	add	sp, #16
 8003520:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003522:	68e3      	ldr	r3, [r4, #12]
 8003524:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003528:	60e3      	str	r3, [r4, #12]
 800352a:	e7ef      	b.n	800350c <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800352c:	68e3      	ldr	r3, [r4, #12]
 800352e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003532:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8003534:	4620      	mov	r0, r4
 8003536:	f7ff ffa9 	bl	800348c <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800353a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800353e:	b923      	cbnz	r3, 800354a <USB_CoreInit+0x72>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003540:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003546:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003548:	e7e3      	b.n	8003512 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800354a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800354c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003550:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003552:	e7de      	b.n	8003512 <USB_CoreInit+0x3a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8003554:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003556:	b29b      	uxth	r3, r3
 8003558:	65e3      	str	r3, [r4, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800355a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800355c:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <USB_CoreInit+0xa0>)
 800355e:	4313      	orrs	r3, r2
 8003560:	65e3      	str	r3, [r4, #92]	@ 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003562:	68a3      	ldr	r3, [r4, #8]
 8003564:	f043 0306 	orr.w	r3, r3, #6
 8003568:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800356a:	68a3      	ldr	r3, [r4, #8]
 800356c:	f043 0320 	orr.w	r3, r3, #32
 8003570:	60a3      	str	r3, [r4, #8]
 8003572:	e7d2      	b.n	800351a <USB_CoreInit+0x42>
 8003574:	ffbdffbf 	.word	0xffbdffbf
 8003578:	03ee0000 	.word	0x03ee0000

0800357c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800357c:	2a02      	cmp	r2, #2
 800357e:	d00a      	beq.n	8003596 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003580:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003582:	68c3      	ldr	r3, [r0, #12]
 8003584:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8003588:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800358a:	68c3      	ldr	r3, [r0, #12]
 800358c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8003590:	60c3      	str	r3, [r0, #12]
}
 8003592:	2000      	movs	r0, #0
 8003594:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003596:	4b20      	ldr	r3, [pc, #128]	@ (8003618 <USB_SetTurnaroundTime+0x9c>)
 8003598:	440b      	add	r3, r1
 800359a:	4a20      	ldr	r2, [pc, #128]	@ (800361c <USB_SetTurnaroundTime+0xa0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d929      	bls.n	80035f4 <USB_SetTurnaroundTime+0x78>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80035a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003620 <USB_SetTurnaroundTime+0xa4>)
 80035a2:	440b      	add	r3, r1
 80035a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003624 <USB_SetTurnaroundTime+0xa8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d926      	bls.n	80035f8 <USB_SetTurnaroundTime+0x7c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003628 <USB_SetTurnaroundTime+0xac>)
 80035ac:	440b      	add	r3, r1
 80035ae:	4a1f      	ldr	r2, [pc, #124]	@ (800362c <USB_SetTurnaroundTime+0xb0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d923      	bls.n	80035fc <USB_SetTurnaroundTime+0x80>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80035b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003630 <USB_SetTurnaroundTime+0xb4>)
 80035b6:	440b      	add	r3, r1
 80035b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003634 <USB_SetTurnaroundTime+0xb8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d320      	bcc.n	8003600 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80035be:	4b1e      	ldr	r3, [pc, #120]	@ (8003638 <USB_SetTurnaroundTime+0xbc>)
 80035c0:	440b      	add	r3, r1
 80035c2:	4a1e      	ldr	r2, [pc, #120]	@ (800363c <USB_SetTurnaroundTime+0xc0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d91d      	bls.n	8003604 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80035c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003640 <USB_SetTurnaroundTime+0xc4>)
 80035ca:	440b      	add	r3, r1
 80035cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003644 <USB_SetTurnaroundTime+0xc8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d31a      	bcc.n	8003608 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80035d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003648 <USB_SetTurnaroundTime+0xcc>)
 80035d4:	440b      	add	r3, r1
 80035d6:	4a1d      	ldr	r2, [pc, #116]	@ (800364c <USB_SetTurnaroundTime+0xd0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d317      	bcc.n	800360c <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80035dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003650 <USB_SetTurnaroundTime+0xd4>)
 80035de:	440b      	add	r3, r1
 80035e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003654 <USB_SetTurnaroundTime+0xd8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d314      	bcc.n	8003610 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80035e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003658 <USB_SetTurnaroundTime+0xdc>)
 80035e8:	440b      	add	r3, r1
 80035ea:	4a1c      	ldr	r2, [pc, #112]	@ (800365c <USB_SetTurnaroundTime+0xe0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d211      	bcs.n	8003614 <USB_SetTurnaroundTime+0x98>
      UsbTrd = 0x7U;
 80035f0:	2207      	movs	r2, #7
 80035f2:	e7c6      	b.n	8003582 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80035f4:	220f      	movs	r2, #15
 80035f6:	e7c4      	b.n	8003582 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80035f8:	220e      	movs	r2, #14
 80035fa:	e7c2      	b.n	8003582 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80035fc:	220d      	movs	r2, #13
 80035fe:	e7c0      	b.n	8003582 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8003600:	220c      	movs	r2, #12
 8003602:	e7be      	b.n	8003582 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8003604:	220b      	movs	r2, #11
 8003606:	e7bc      	b.n	8003582 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8003608:	220a      	movs	r2, #10
 800360a:	e7ba      	b.n	8003582 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 800360c:	2209      	movs	r2, #9
 800360e:	e7b8      	b.n	8003582 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8003610:	2208      	movs	r2, #8
 8003612:	e7b6      	b.n	8003582 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8003614:	2206      	movs	r2, #6
 8003616:	e7b4      	b.n	8003582 <USB_SetTurnaroundTime+0x6>
 8003618:	ff275340 	.word	0xff275340
 800361c:	000c34ff 	.word	0x000c34ff
 8003620:	ff1b1e40 	.word	0xff1b1e40
 8003624:	000f423f 	.word	0x000f423f
 8003628:	ff0bdc00 	.word	0xff0bdc00
 800362c:	00124f7f 	.word	0x00124f7f
 8003630:	fef98c80 	.word	0xfef98c80
 8003634:	0013d620 	.word	0x0013d620
 8003638:	fee5b660 	.word	0xfee5b660
 800363c:	0016e35f 	.word	0x0016e35f
 8003640:	feced300 	.word	0xfeced300
 8003644:	001b7740 	.word	0x001b7740
 8003648:	feb35bc0 	.word	0xfeb35bc0
 800364c:	002191c0 	.word	0x002191c0
 8003650:	fe91ca00 	.word	0xfe91ca00
 8003654:	00387520 	.word	0x00387520
 8003658:	fe5954e0 	.word	0xfe5954e0
 800365c:	00419ce0 	.word	0x00419ce0

08003660 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003660:	6883      	ldr	r3, [r0, #8]
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	6083      	str	r3, [r0, #8]
}
 8003668:	2000      	movs	r0, #0
 800366a:	4770      	bx	lr

0800366c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800366c:	6883      	ldr	r3, [r0, #8]
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	6083      	str	r3, [r0, #8]
}
 8003674:	2000      	movs	r0, #0
 8003676:	4770      	bx	lr

08003678 <USB_FlushTxFifo>:
{
 8003678:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	9301      	str	r3, [sp, #4]
    count++;
 800367e:	9b01      	ldr	r3, [sp, #4]
 8003680:	3301      	adds	r3, #1
 8003682:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8003684:	9b01      	ldr	r3, [sp, #4]
 8003686:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800368a:	d815      	bhi.n	80036b8 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800368c:	6903      	ldr	r3, [r0, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	daf5      	bge.n	800367e <USB_FlushTxFifo+0x6>
  count = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003696:	0189      	lsls	r1, r1, #6
 8003698:	f041 0120 	orr.w	r1, r1, #32
 800369c:	6101      	str	r1, [r0, #16]
    count++;
 800369e:	9b01      	ldr	r3, [sp, #4]
 80036a0:	3301      	adds	r3, #1
 80036a2:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80036a4:	9b01      	ldr	r3, [sp, #4]
 80036a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80036aa:	d808      	bhi.n	80036be <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80036ac:	6903      	ldr	r3, [r0, #16]
 80036ae:	f013 0f20 	tst.w	r3, #32
 80036b2:	d1f4      	bne.n	800369e <USB_FlushTxFifo+0x26>
  return HAL_OK;
 80036b4:	2000      	movs	r0, #0
 80036b6:	e000      	b.n	80036ba <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 80036b8:	2003      	movs	r0, #3
}
 80036ba:	b002      	add	sp, #8
 80036bc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80036be:	2003      	movs	r0, #3
 80036c0:	e7fb      	b.n	80036ba <USB_FlushTxFifo+0x42>

080036c2 <USB_FlushRxFifo>:
{
 80036c2:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	9301      	str	r3, [sp, #4]
    count++;
 80036c8:	9b01      	ldr	r3, [sp, #4]
 80036ca:	3301      	adds	r3, #1
 80036cc:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80036ce:	9b01      	ldr	r3, [sp, #4]
 80036d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80036d4:	d813      	bhi.n	80036fe <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036d6:	6903      	ldr	r3, [r0, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	daf5      	bge.n	80036c8 <USB_FlushRxFifo+0x6>
  count = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80036e0:	2310      	movs	r3, #16
 80036e2:	6103      	str	r3, [r0, #16]
    count++;
 80036e4:	9b01      	ldr	r3, [sp, #4]
 80036e6:	3301      	adds	r3, #1
 80036e8:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80036ea:	9b01      	ldr	r3, [sp, #4]
 80036ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80036f0:	d808      	bhi.n	8003704 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80036f2:	6903      	ldr	r3, [r0, #16]
 80036f4:	f013 0f10 	tst.w	r3, #16
 80036f8:	d1f4      	bne.n	80036e4 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 80036fa:	2000      	movs	r0, #0
 80036fc:	e000      	b.n	8003700 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 80036fe:	2003      	movs	r0, #3
}
 8003700:	b002      	add	sp, #8
 8003702:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003704:	2003      	movs	r0, #3
 8003706:	e7fb      	b.n	8003700 <USB_FlushRxFifo+0x3e>

08003708 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8003708:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800370c:	4319      	orrs	r1, r3
 800370e:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8003712:	2000      	movs	r0, #0
 8003714:	4770      	bx	lr
	...

08003718 <USB_DevInit>:
{
 8003718:	b084      	sub	sp, #16
 800371a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371c:	4604      	mov	r4, r0
 800371e:	a807      	add	r0, sp, #28
 8003720:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8003724:	2300      	movs	r3, #0
 8003726:	e006      	b.n	8003736 <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8003728:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800372c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003730:	2100      	movs	r1, #0
 8003732:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8003734:	3301      	adds	r3, #1
 8003736:	2b0e      	cmp	r3, #14
 8003738:	d9f6      	bls.n	8003728 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 800373a:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 800373e:	bb06      	cbnz	r6, 8003782 <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003740:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8003744:	f043 0302 	orr.w	r3, r3, #2
 8003748:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800374c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800374e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003752:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800375a:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003762:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800376a:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800376e:	2b01      	cmp	r3, #1
 8003770:	d111      	bne.n	8003796 <USB_DevInit+0x7e>
    if (cfg.speed == USBD_HS_SPEED)
 8003772:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8003776:	b94b      	cbnz	r3, 800378c <USB_DevInit+0x74>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003778:	2100      	movs	r1, #0
 800377a:	4620      	mov	r0, r4
 800377c:	f7ff ffc4 	bl	8003708 <USB_SetDevSpeed>
 8003780:	e00d      	b.n	800379e <USB_DevInit+0x86>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003782:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003784:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003788:	63a3      	str	r3, [r4, #56]	@ 0x38
 800378a:	e7eb      	b.n	8003764 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800378c:	2101      	movs	r1, #1
 800378e:	4620      	mov	r0, r4
 8003790:	f7ff ffba 	bl	8003708 <USB_SetDevSpeed>
 8003794:	e003      	b.n	800379e <USB_DevInit+0x86>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003796:	2103      	movs	r1, #3
 8003798:	4620      	mov	r0, r4
 800379a:	f7ff ffb5 	bl	8003708 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800379e:	2110      	movs	r1, #16
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7ff ff69 	bl	8003678 <USB_FlushTxFifo>
 80037a6:	4605      	mov	r5, r0
 80037a8:	b100      	cbz	r0, 80037ac <USB_DevInit+0x94>
    ret = HAL_ERROR;
 80037aa:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037ac:	4620      	mov	r0, r4
 80037ae:	f7ff ff88 	bl	80036c2 <USB_FlushRxFifo>
 80037b2:	b100      	cbz	r0, 80037b6 <USB_DevInit+0x9e>
    ret = HAL_ERROR;
 80037b4:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80037b6:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 80037ba:	2300      	movs	r3, #0
 80037bc:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80037c0:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037c4:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037c8:	e00a      	b.n	80037e0 <USB_DevInit+0xc8>
      if (i == 0U)
 80037ca:	b9cb      	cbnz	r3, 8003800 <USB_DevInit+0xe8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037cc:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80037d0:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037d4:	2200      	movs	r2, #0
 80037d6:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037d8:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 80037dc:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037de:	3301      	adds	r3, #1
 80037e0:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80037e4:	4299      	cmp	r1, r3
 80037e6:	d910      	bls.n	800380a <USB_DevInit+0xf2>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037e8:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80037ec:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 80037f0:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 80037f4:	2800      	cmp	r0, #0
 80037f6:	dbe8      	blt.n	80037ca <USB_DevInit+0xb2>
      USBx_INEP(i)->DIEPCTL = 0U;
 80037f8:	2000      	movs	r0, #0
 80037fa:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 80037fe:	e7e9      	b.n	80037d4 <USB_DevInit+0xbc>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003800:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003804:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8003808:	e7e4      	b.n	80037d4 <USB_DevInit+0xbc>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800380a:	2300      	movs	r3, #0
 800380c:	e00a      	b.n	8003824 <USB_DevInit+0x10c>
      if (i == 0U)
 800380e:	b1bb      	cbz	r3, 8003840 <USB_DevInit+0x128>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003810:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 8003814:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003818:	2200      	movs	r2, #0
 800381a:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800381c:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8003820:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003822:	3301      	adds	r3, #1
 8003824:	4299      	cmp	r1, r3
 8003826:	d910      	bls.n	800384a <USB_DevInit+0x132>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003828:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800382c:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 8003830:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 8003834:	2f00      	cmp	r7, #0
 8003836:	dbea      	blt.n	800380e <USB_DevInit+0xf6>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003838:	2700      	movs	r7, #0
 800383a:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 800383e:	e7eb      	b.n	8003818 <USB_DevInit+0x100>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003840:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 8003844:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8003848:	e7e6      	b.n	8003818 <USB_DevInit+0x100>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800384a:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800384e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003852:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800385a:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 800385e:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8003860:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8003864:	b91b      	cbnz	r3, 800386e <USB_DevInit+0x156>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003866:	69a3      	ldr	r3, [r4, #24]
 8003868:	f043 0310 	orr.w	r3, r3, #16
 800386c:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800386e:	69a2      	ldr	r2, [r4, #24]
 8003870:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <USB_DevInit+0x184>)
 8003872:	4313      	orrs	r3, r2
 8003874:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8003876:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 800387a:	b11b      	cbz	r3, 8003884 <USB_DevInit+0x16c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800387c:	69a3      	ldr	r3, [r4, #24]
 800387e:	f043 0308 	orr.w	r3, r3, #8
 8003882:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003884:	2e01      	cmp	r6, #1
 8003886:	d004      	beq.n	8003892 <USB_DevInit+0x17a>
}
 8003888:	4628      	mov	r0, r5
 800388a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800388e:	b004      	add	sp, #16
 8003890:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003892:	69a2      	ldr	r2, [r4, #24]
 8003894:	4b02      	ldr	r3, [pc, #8]	@ (80038a0 <USB_DevInit+0x188>)
 8003896:	4313      	orrs	r3, r2
 8003898:	61a3      	str	r3, [r4, #24]
 800389a:	e7f5      	b.n	8003888 <USB_DevInit+0x170>
 800389c:	803c3800 	.word	0x803c3800
 80038a0:	40000004 	.word	0x40000004

080038a4 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80038a4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80038a8:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d004      	beq.n	80038ba <USB_GetDevSpeed+0x16>
 80038b0:	2b06      	cmp	r3, #6
 80038b2:	d004      	beq.n	80038be <USB_GetDevSpeed+0x1a>
 80038b4:	b92b      	cbnz	r3, 80038c2 <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80038b6:	2000      	movs	r0, #0
 80038b8:	4770      	bx	lr
 80038ba:	2002      	movs	r0, #2
 80038bc:	4770      	bx	lr
 80038be:	2002      	movs	r0, #2
 80038c0:	4770      	bx	lr
 80038c2:	200f      	movs	r0, #15
}
 80038c4:	4770      	bx	lr
	...

080038c8 <USB_ActivateEndpoint>:
{
 80038c8:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80038ca:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 80038ce:	784b      	ldrb	r3, [r1, #1]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d021      	beq.n	8003918 <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80038d4:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 80038d8:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 80038dc:	f00c 040f 	and.w	r4, ip, #15
 80038e0:	2201      	movs	r2, #1
 80038e2:	40a2      	lsls	r2, r4
 80038e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038e8:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80038ec:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80038f0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80038f4:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80038f8:	d10c      	bne.n	8003914 <USB_ActivateEndpoint+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80038fa:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 80038fe:	688b      	ldr	r3, [r1, #8]
 8003900:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003904:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003906:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800390a:	431a      	orrs	r2, r3
 800390c:	4b13      	ldr	r3, [pc, #76]	@ (800395c <USB_ActivateEndpoint+0x94>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8003914:	2000      	movs	r0, #0
 8003916:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003918:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800391c:	f00c 0e0f 	and.w	lr, ip, #15
 8003920:	fa03 f30e 	lsl.w	r3, r3, lr
 8003924:	b29b      	uxth	r3, r3
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800392c:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8003930:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003934:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8003938:	d1ec      	bne.n	8003914 <USB_ActivateEndpoint+0x4c>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800393a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 800393e:	688b      	ldr	r3, [r1, #8]
 8003940:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003944:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003946:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800394a:	ea43 538c 	orr.w	r3, r3, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800394e:	431a      	orrs	r2, r3
 8003950:	4b02      	ldr	r3, [pc, #8]	@ (800395c <USB_ActivateEndpoint+0x94>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8003958:	e7dc      	b.n	8003914 <USB_ActivateEndpoint+0x4c>
 800395a:	bf00      	nop
 800395c:	10008000 	.word	0x10008000

08003960 <USB_EPStopXfer>:
{
 8003960:	b410      	push	{r4}
 8003962:	b083      	sub	sp, #12
 8003964:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 800396a:	7848      	ldrb	r0, [r1, #1]
 800396c:	2801      	cmp	r0, #1
 800396e:	d00b      	beq.n	8003988 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003970:	780b      	ldrb	r3, [r1, #0]
 8003972:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003976:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 800397a:	2800      	cmp	r0, #0
 800397c:	db2d      	blt.n	80039da <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 800397e:	2000      	movs	r0, #0
}
 8003980:	b003      	add	sp, #12
 8003982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003986:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003988:	780b      	ldrb	r3, [r1, #0]
 800398a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800398e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8003992:	2c00      	cmp	r4, #0
 8003994:	db01      	blt.n	800399a <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 8003996:	2000      	movs	r0, #0
 8003998:	e7f2      	b.n	8003980 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800399a:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800399e:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 80039a2:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80039a6:	780b      	ldrb	r3, [r1, #0]
 80039a8:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80039ac:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80039b0:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 80039b4:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 80039b8:	9b01      	ldr	r3, [sp, #4]
 80039ba:	3301      	adds	r3, #1
 80039bc:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80039be:	9c01      	ldr	r4, [sp, #4]
 80039c0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80039c4:	429c      	cmp	r4, r3
 80039c6:	d8db      	bhi.n	8003980 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80039c8:	780b      	ldrb	r3, [r1, #0]
 80039ca:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80039ce:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	dbf0      	blt.n	80039b8 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 80039d6:	2000      	movs	r0, #0
 80039d8:	e7d2      	b.n	8003980 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80039da:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80039de:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 80039e2:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80039e6:	780b      	ldrb	r3, [r1, #0]
 80039e8:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80039ec:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80039f0:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80039f4:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 80039f8:	9b01      	ldr	r3, [sp, #4]
 80039fa:	3301      	adds	r3, #1
 80039fc:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80039fe:	9801      	ldr	r0, [sp, #4]
 8003a00:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003a04:	4298      	cmp	r0, r3
 8003a06:	d808      	bhi.n	8003a1a <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003a08:	780b      	ldrb	r3, [r1, #0]
 8003a0a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003a0e:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	dbf0      	blt.n	80039f8 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 8003a16:	2000      	movs	r0, #0
 8003a18:	e7b2      	b.n	8003980 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	e7b0      	b.n	8003980 <USB_EPStopXfer+0x20>

08003a1e <USB_WritePacket>:
{
 8003a1e:	b510      	push	{r4, lr}
 8003a20:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8003a24:	b984      	cbnz	r4, 8003a48 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a26:	3303      	adds	r3, #3
 8003a28:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8003a2c:	f04f 0c00 	mov.w	ip, #0
 8003a30:	e008      	b.n	8003a44 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a32:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8003a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a3a:	f851 4b04 	ldr.w	r4, [r1], #4
 8003a3e:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8003a40:	f10c 0c01 	add.w	ip, ip, #1
 8003a44:	45f4      	cmp	ip, lr
 8003a46:	d3f4      	bcc.n	8003a32 <USB_WritePacket+0x14>
}
 8003a48:	2000      	movs	r0, #0
 8003a4a:	bd10      	pop	{r4, pc}

08003a4c <USB_EPStartXfer>:
{
 8003a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a4e:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8003a50:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8003a52:	784b      	ldrb	r3, [r1, #1]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d02d      	beq.n	8003ab4 <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a58:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8003a5c:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8003a60:	691d      	ldr	r5, [r3, #16]
 8003a62:	f36f 0512 	bfc	r5, #0, #19
 8003a66:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a68:	691d      	ldr	r5, [r3, #16]
 8003a6a:	f36f 45dc 	bfc	r5, #19, #10
 8003a6e:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8003a70:	2c00      	cmp	r4, #0
 8003a72:	f040 80ce 	bne.w	8003c12 <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 8003a76:	690c      	ldr	r4, [r1, #16]
 8003a78:	b10c      	cbz	r4, 8003a7e <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 8003a7a:	688c      	ldr	r4, [r1, #8]
 8003a7c:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8003a7e:	688c      	ldr	r4, [r1, #8]
 8003a80:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003a82:	691d      	ldr	r5, [r3, #16]
 8003a84:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003a88:	432c      	orrs	r4, r5
 8003a8a:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a8c:	691c      	ldr	r4, [r3, #16]
 8003a8e:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8003a92:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8003a94:	2a01      	cmp	r2, #1
 8003a96:	f000 80df 	beq.w	8003c58 <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 8003a9a:	790b      	ldrb	r3, [r1, #4]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	f000 80e1 	beq.w	8003c64 <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003aa2:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8003aa6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003aaa:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8003aae:	2000      	movs	r0, #0
 8003ab0:	b003      	add	sp, #12
 8003ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8003ab4:	690b      	ldr	r3, [r1, #16]
 8003ab6:	bb73      	cbnz	r3, 8003b16 <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ab8:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8003abc:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8003ac0:	f36f 45dc 	bfc	r5, #19, #10
 8003ac4:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ac8:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8003acc:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8003ad0:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ad4:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8003ad8:	f36f 0512 	bfc	r5, #0, #19
 8003adc:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8003ae0:	2a01      	cmp	r2, #1
 8003ae2:	d054      	beq.n	8003b8e <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ae4:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8003ae8:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8003aec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003af0:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8003af4:	790b      	ldrb	r3, [r1, #4]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d072      	beq.n	8003be0 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 8003afa:	690b      	ldr	r3, [r1, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0d6      	beq.n	8003aae <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b00:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8003b04:	7809      	ldrb	r1, [r1, #0]
 8003b06:	f001 010f 	and.w	r1, r1, #15
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	408a      	lsls	r2, r1
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8003b14:	e7cb      	b.n	8003aae <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b16:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8003b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b1e:	691d      	ldr	r5, [r3, #16]
 8003b20:	f36f 0512 	bfc	r5, #0, #19
 8003b24:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b26:	691d      	ldr	r5, [r3, #16]
 8003b28:	f36f 45dc 	bfc	r5, #19, #10
 8003b2c:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8003b2e:	b984      	cbnz	r4, 8003b52 <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 8003b30:	690e      	ldr	r6, [r1, #16]
 8003b32:	688d      	ldr	r5, [r1, #8]
 8003b34:	42ae      	cmp	r6, r5
 8003b36:	d900      	bls.n	8003b3a <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 8003b38:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b3a:	691d      	ldr	r5, [r3, #16]
 8003b3c:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8003b40:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b42:	691d      	ldr	r5, [r3, #16]
 8003b44:	690e      	ldr	r6, [r1, #16]
 8003b46:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 8003b4a:	ea45 050c 	orr.w	r5, r5, ip
 8003b4e:	611d      	str	r5, [r3, #16]
 8003b50:	e7c6      	b.n	8003ae0 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b52:	690d      	ldr	r5, [r1, #16]
 8003b54:	688e      	ldr	r6, [r1, #8]
 8003b56:	4435      	add	r5, r6
 8003b58:	3d01      	subs	r5, #1
 8003b5a:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8003b5e:	691e      	ldr	r6, [r3, #16]
 8003b60:	fa1f fc85 	uxth.w	ip, r5
 8003b64:	4f49      	ldr	r7, [pc, #292]	@ (8003c8c <USB_EPStartXfer+0x240>)
 8003b66:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8003b6a:	4335      	orrs	r5, r6
 8003b6c:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8003b6e:	790d      	ldrb	r5, [r1, #4]
 8003b70:	2d01      	cmp	r5, #1
 8003b72:	d1e6      	bne.n	8003b42 <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003b74:	691d      	ldr	r5, [r3, #16]
 8003b76:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8003b7a:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8003b7c:	691d      	ldr	r5, [r3, #16]
 8003b7e:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8003b82:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 8003b86:	ea45 050c 	orr.w	r5, r5, ip
 8003b8a:	611d      	str	r5, [r3, #16]
 8003b8c:	e7d9      	b.n	8003b42 <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 8003b8e:	69cb      	ldr	r3, [r1, #28]
 8003b90:	b11b      	cbz	r3, 8003b9a <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b92:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8003b96:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8003b9a:	790b      	ldrb	r3, [r1, #4]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d008      	beq.n	8003bb2 <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ba0:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8003ba4:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8003ba8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003bac:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8003bb0:	e77d      	b.n	8003aae <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bb2:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8003bb6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003bba:	d108      	bne.n	8003bce <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003bbc:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8003bc0:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8003bc4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003bc8:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8003bcc:	e7e8      	b.n	8003ba0 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003bce:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8003bd2:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8003bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bda:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8003bde:	e7df      	b.n	8003ba0 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003be0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8003be4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003be8:	d10c      	bne.n	8003c04 <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003bea:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8003bee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003bf2:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003bf6:	9200      	str	r2, [sp, #0]
 8003bf8:	8a0b      	ldrh	r3, [r1, #16]
 8003bfa:	780a      	ldrb	r2, [r1, #0]
 8003bfc:	68c9      	ldr	r1, [r1, #12]
 8003bfe:	f7ff ff0e 	bl	8003a1e <USB_WritePacket>
 8003c02:	e754      	b.n	8003aae <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c04:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8003c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c0c:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8003c10:	e7f1      	b.n	8003bf6 <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 8003c12:	690c      	ldr	r4, [r1, #16]
 8003c14:	b954      	cbnz	r4, 8003c2c <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003c16:	691c      	ldr	r4, [r3, #16]
 8003c18:	688d      	ldr	r5, [r1, #8]
 8003c1a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003c1e:	432c      	orrs	r4, r5
 8003c20:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c22:	691c      	ldr	r4, [r3, #16]
 8003c24:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8003c28:	611c      	str	r4, [r3, #16]
 8003c2a:	e733      	b.n	8003a94 <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003c2c:	688d      	ldr	r5, [r1, #8]
 8003c2e:	442c      	add	r4, r5
 8003c30:	3c01      	subs	r4, #1
 8003c32:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003c36:	b2a4      	uxth	r4, r4
 8003c38:	fb04 f505 	mul.w	r5, r4, r5
 8003c3c:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003c3e:	691d      	ldr	r5, [r3, #16]
 8003c40:	4e12      	ldr	r6, [pc, #72]	@ (8003c8c <USB_EPStartXfer+0x240>)
 8003c42:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8003c46:	432c      	orrs	r4, r5
 8003c48:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003c4a:	691c      	ldr	r4, [r3, #16]
 8003c4c:	6a0d      	ldr	r5, [r1, #32]
 8003c4e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003c52:	432c      	orrs	r4, r5
 8003c54:	611c      	str	r4, [r3, #16]
 8003c56:	e71d      	b.n	8003a94 <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c58:	68ca      	ldr	r2, [r1, #12]
 8003c5a:	2a00      	cmp	r2, #0
 8003c5c:	f43f af1d 	beq.w	8003a9a <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c60:	615a      	str	r2, [r3, #20]
 8003c62:	e71a      	b.n	8003a9a <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c64:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8003c68:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003c6c:	d106      	bne.n	8003c7c <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003c6e:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8003c72:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c76:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8003c7a:	e712      	b.n	8003aa2 <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003c7c:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8003c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c84:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8003c88:	e70b      	b.n	8003aa2 <USB_EPStartXfer+0x56>
 8003c8a:	bf00      	nop
 8003c8c:	1ff80000 	.word	0x1ff80000

08003c90 <USB_ReadPacket>:
{
 8003c90:	b510      	push	{r4, lr}
 8003c92:	4684      	mov	ip, r0
 8003c94:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8003c96:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8003c9a:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e005      	b.n	8003cae <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003ca2:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 8003ca6:	6809      	ldr	r1, [r1, #0]
 8003ca8:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8003cac:	3301      	adds	r3, #1
 8003cae:	4573      	cmp	r3, lr
 8003cb0:	d3f7      	bcc.n	8003ca2 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8003cb2:	b17a      	cbz	r2, 8003cd4 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003cb4:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8003cb8:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8003cbc:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003cbe:	b2cb      	uxtb	r3, r1
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	fa24 f303 	lsr.w	r3, r4, r3
 8003cc6:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8003cca:	3101      	adds	r1, #1
      remaining_bytes--;
 8003ccc:	3a01      	subs	r2, #1
 8003cce:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8003cd0:	2a00      	cmp	r2, #0
 8003cd2:	d1f4      	bne.n	8003cbe <USB_ReadPacket+0x2e>
}
 8003cd4:	bd10      	pop	{r4, pc}

08003cd6 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8003cd6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003cd8:	784a      	ldrb	r2, [r1, #1]
 8003cda:	2a01      	cmp	r2, #1
 8003cdc:	d014      	beq.n	8003d08 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003cde:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003ce2:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8003ce6:	2a00      	cmp	r2, #0
 8003ce8:	db06      	blt.n	8003cf8 <USB_EPSetStall+0x22>
 8003cea:	b12b      	cbz	r3, 8003cf8 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003cec:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003cf0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003cf4:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003cf8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003cfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d00:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8003d04:	2000      	movs	r0, #0
 8003d06:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d08:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003d0c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8003d10:	2a00      	cmp	r2, #0
 8003d12:	db06      	blt.n	8003d22 <USB_EPSetStall+0x4c>
 8003d14:	b12b      	cbz	r3, 8003d22 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003d16:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003d1a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d1e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003d22:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003d26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d2a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8003d2e:	e7e9      	b.n	8003d04 <USB_EPSetStall+0x2e>

08003d30 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8003d30:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003d32:	784a      	ldrb	r2, [r1, #1]
 8003d34:	2a01      	cmp	r2, #1
 8003d36:	d00e      	beq.n	8003d56 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d38:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003d3c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003d40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d44:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d48:	790b      	ldrb	r3, [r1, #4]
 8003d4a:	3b02      	subs	r3, #2
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d915      	bls.n	8003d7e <USB_EPClearStall+0x4e>
}
 8003d52:	2000      	movs	r0, #0
 8003d54:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d56:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003d5a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003d5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d62:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d66:	790b      	ldrb	r3, [r1, #4]
 8003d68:	3b02      	subs	r3, #2
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d8f0      	bhi.n	8003d52 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d70:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d78:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8003d7c:	e7e9      	b.n	8003d52 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d7e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d86:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8003d8a:	e7e2      	b.n	8003d52 <USB_EPClearStall+0x22>

08003d8c <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003d8c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003d90:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d94:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003d98:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003d9c:	0109      	lsls	r1, r1, #4
 8003d9e:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8003da2:	430b      	orrs	r3, r1
 8003da4:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8003da8:	2000      	movs	r0, #0
 8003daa:	4770      	bx	lr

08003dac <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003dac:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003db0:	f023 0303 	bic.w	r3, r3, #3
 8003db4:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003db8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003dbc:	f023 0302 	bic.w	r3, r3, #2
 8003dc0:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	4770      	bx	lr

08003dc8 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003dc8:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003dcc:	f023 0303 	bic.w	r3, r3, #3
 8003dd0:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dd4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003de0:	2000      	movs	r0, #0
 8003de2:	4770      	bx	lr

08003de4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003de4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003de6:	6980      	ldr	r0, [r0, #24]
}
 8003de8:	4010      	ands	r0, r2
 8003dea:	4770      	bx	lr

08003dec <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003dec:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8003df0:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003df4:	69c0      	ldr	r0, [r0, #28]
 8003df6:	4018      	ands	r0, r3
}
 8003df8:	0c00      	lsrs	r0, r0, #16
 8003dfa:	4770      	bx	lr

08003dfc <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003dfc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8003e00:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e04:	69c0      	ldr	r0, [r0, #28]
 8003e06:	4018      	ands	r0, r3
}
 8003e08:	b280      	uxth	r0, r0
 8003e0a:	4770      	bx	lr

08003e0c <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003e0c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003e10:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003e14:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8003e18:	6940      	ldr	r0, [r0, #20]
}
 8003e1a:	4010      	ands	r0, r2
 8003e1c:	4770      	bx	lr

08003e1e <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8003e1e:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003e22:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003e26:	f001 0c0f 	and.w	ip, r1, #15
 8003e2a:	fa23 f30c 	lsr.w	r3, r3, ip
 8003e2e:	01db      	lsls	r3, r3, #7
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003e34:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8003e38:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8003e3c:	6880      	ldr	r0, [r0, #8]
}
 8003e3e:	4018      	ands	r0, r3
 8003e40:	4770      	bx	lr

08003e42 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003e42:	6940      	ldr	r0, [r0, #20]
}
 8003e44:	f000 0001 	and.w	r0, r0, #1
 8003e48:	4770      	bx	lr

08003e4a <USB_SetCurrentMode>:
{
 8003e4a:	b538      	push	{r3, r4, r5, lr}
 8003e4c:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e4e:	68c3      	ldr	r3, [r0, #12]
 8003e50:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003e54:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003e56:	2901      	cmp	r1, #1
 8003e58:	d013      	beq.n	8003e82 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8003e5a:	bb19      	cbnz	r1, 8003ea4 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e5c:	68c3      	ldr	r3, [r0, #12]
 8003e5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e62:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003e64:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003e66:	200a      	movs	r0, #10
 8003e68:	f7fc fe08 	bl	8000a7c <HAL_Delay>
      ms += 10U;
 8003e6c:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f7ff ffe7 	bl	8003e42 <USB_GetMode>
 8003e74:	b108      	cbz	r0, 8003e7a <USB_SetCurrentMode+0x30>
 8003e76:	2cc7      	cmp	r4, #199	@ 0xc7
 8003e78:	d9f5      	bls.n	8003e66 <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003e7a:	2cc8      	cmp	r4, #200	@ 0xc8
 8003e7c:	d014      	beq.n	8003ea8 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8003e7e:	2000      	movs	r0, #0
}
 8003e80:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e82:	68c3      	ldr	r3, [r0, #12]
 8003e84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003e88:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003e8a:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003e8c:	200a      	movs	r0, #10
 8003e8e:	f7fc fdf5 	bl	8000a7c <HAL_Delay>
      ms += 10U;
 8003e92:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e94:	4628      	mov	r0, r5
 8003e96:	f7ff ffd4 	bl	8003e42 <USB_GetMode>
 8003e9a:	2801      	cmp	r0, #1
 8003e9c:	d0ed      	beq.n	8003e7a <USB_SetCurrentMode+0x30>
 8003e9e:	2cc7      	cmp	r4, #199	@ 0xc7
 8003ea0:	d9f4      	bls.n	8003e8c <USB_SetCurrentMode+0x42>
 8003ea2:	e7ea      	b.n	8003e7a <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	e7eb      	b.n	8003e80 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	e7e9      	b.n	8003e80 <USB_SetCurrentMode+0x36>

08003eac <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003eac:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003eb0:	f36f 030a 	bfc	r3, #0, #11
 8003eb4:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003eb8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ec0:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	4770      	bx	lr

08003ec8 <USB_EP0_OutStart>:
{
 8003ec8:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003eca:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003ecc:	4b15      	ldr	r3, [pc, #84]	@ (8003f24 <USB_EP0_OutStart+0x5c>)
 8003ece:	429c      	cmp	r4, r3
 8003ed0:	d903      	bls.n	8003eda <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ed2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	db16      	blt.n	8003f08 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003eda:	2400      	movs	r4, #0
 8003edc:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ee0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003ee4:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8003ee8:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003eec:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003ef0:	f044 0418 	orr.w	r4, r4, #24
 8003ef4:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003ef8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003efc:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8003f00:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8003f04:	2901      	cmp	r1, #1
 8003f06:	d003      	beq.n	8003f10 <USB_EP0_OutStart+0x48>
}
 8003f08:	2000      	movs	r0, #0
 8003f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f0e:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003f10:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003f14:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003f18:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8003f1c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8003f20:	e7f2      	b.n	8003f08 <USB_EP0_OutStart+0x40>
 8003f22:	bf00      	nop
 8003f24:	4f54300a 	.word	0x4f54300a

08003f28 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003f28:	b198      	cbz	r0, 8003f52 <USBD_Init+0x2a>
{
 8003f2a:	b508      	push	{r3, lr}
 8003f2c:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8003f2e:	2000      	movs	r0, #0
 8003f30:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8003f34:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8003f38:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003f3c:	b109      	cbz	r1, 8003f42 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8003f3e:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003f42:	2101      	movs	r1, #1
 8003f44:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8003f48:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 fc34 	bl	80057b8 <USBD_LL_Init>

  return ret;
}
 8003f50:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003f52:	2003      	movs	r0, #3
}
 8003f54:	4770      	bx	lr

08003f56 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003f56:	b510      	push	{r4, lr}
 8003f58:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8003f60:	b1b9      	cbz	r1, 8003f92 <USBD_RegisterClass+0x3c>
 8003f62:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8003f64:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8003f68:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8003f6c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8003f6e:	b143      	cbz	r3, 8003f82 <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8003f70:	32ae      	adds	r2, #174	@ 0xae
 8003f72:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8003f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f78:	f10d 0006 	add.w	r0, sp, #6
 8003f7c:	4798      	blx	r3
 8003f7e:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8003f82:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8003f86:	3301      	adds	r3, #1
 8003f88:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8003f8c:	2000      	movs	r0, #0
}
 8003f8e:	b002      	add	sp, #8
 8003f90:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003f92:	2003      	movs	r0, #3
 8003f94:	e7fb      	b.n	8003f8e <USBD_RegisterClass+0x38>

08003f96 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003f96:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8003f98:	f001 fc6b 	bl	8005872 <USBD_LL_Start>
}
 8003f9c:	bd08      	pop	{r3, pc}

08003f9e <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8003f9e:	b510      	push	{r4, lr}
 8003fa0:	4604      	mov	r4, r0
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8003fa2:	f001 fc6e 	bl	8005882 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8003fa6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8003faa:	b11b      	cbz	r3, 8003fb4 <USBD_Stop+0x16>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	7921      	ldrb	r1, [r4, #4]
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
}
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	bd10      	pop	{r4, pc}

08003fb8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003fb8:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8003fba:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003fbe:	b113      	cbz	r3, 8003fc6 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8003fc4:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	e7fc      	b.n	8003fc4 <USBD_SetClassConfig+0xc>

08003fca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003fca:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8003fcc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	4798      	blx	r3
 8003fd4:	b900      	cbnz	r0, 8003fd8 <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8003fd6:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 8003fd8:	2003      	movs	r0, #3
 8003fda:	e7fc      	b.n	8003fd6 <USBD_ClrClassConfig+0xc>

08003fdc <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003fe0:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f000 f9a9 	bl	800433c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003ff0:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8003ff4:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003ff8:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8003ffc:	f001 031f 	and.w	r3, r1, #31
 8004000:	2b01      	cmp	r3, #1
 8004002:	d007      	beq.n	8004014 <USBD_LL_SetupStage+0x38>
 8004004:	2b02      	cmp	r3, #2
 8004006:	d00a      	beq.n	800401e <USBD_LL_SetupStage+0x42>
 8004008:	b973      	cbnz	r3, 8004028 <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800400a:	4629      	mov	r1, r5
 800400c:	4620      	mov	r0, r4
 800400e:	f000 fb99 	bl	8004744 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8004012:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004014:	4629      	mov	r1, r5
 8004016:	4620      	mov	r0, r4
 8004018:	f000 fbcf 	bl	80047ba <USBD_StdItfReq>
      break;
 800401c:	e7f9      	b.n	8004012 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800401e:	4629      	mov	r1, r5
 8004020:	4620      	mov	r0, r4
 8004022:	f000 fc0c 	bl	800483e <USBD_StdEPReq>
      break;
 8004026:	e7f4      	b.n	8004012 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004028:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800402c:	4620      	mov	r0, r4
 800402e:	f001 fc3b 	bl	80058a8 <USBD_LL_StallEP>
      break;
 8004032:	e7ee      	b.n	8004012 <USBD_LL_SetupStage+0x36>

08004034 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004036:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004038:	2301      	movs	r3, #1
 800403a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800403e:	2300      	movs	r3, #0
 8004040:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004044:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8004046:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800404a:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800404e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004052:	b1db      	cbz	r3, 800408c <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	b1db      	cbz	r3, 8004090 <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004058:	2100      	movs	r1, #0
 800405a:	4798      	blx	r3
 800405c:	4607      	mov	r7, r0
 800405e:	b9c8      	cbnz	r0, 8004094 <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004060:	2340      	movs	r3, #64	@ 0x40
 8004062:	2200      	movs	r2, #0
 8004064:	4611      	mov	r1, r2
 8004066:	4620      	mov	r0, r4
 8004068:	f001 fc13 	bl	8005892 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800406c:	2601      	movs	r6, #1
 800406e:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004072:	2540      	movs	r5, #64	@ 0x40
 8004074:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004078:	462b      	mov	r3, r5
 800407a:	2200      	movs	r2, #0
 800407c:	2180      	movs	r1, #128	@ 0x80
 800407e:	4620      	mov	r0, r4
 8004080:	f001 fc07 	bl	8005892 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004084:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004086:	6225      	str	r5, [r4, #32]

  return ret;
}
 8004088:	4638      	mov	r0, r7
 800408a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800408c:	2700      	movs	r7, #0
 800408e:	e7e7      	b.n	8004060 <USBD_LL_Reset+0x2c>
 8004090:	2700      	movs	r7, #0
 8004092:	e7e5      	b.n	8004060 <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 8004094:	2703      	movs	r7, #3
 8004096:	e7e3      	b.n	8004060 <USBD_LL_Reset+0x2c>

08004098 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004098:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800409a:	2000      	movs	r0, #0
 800409c:	4770      	bx	lr

0800409e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800409e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d004      	beq.n	80040b2 <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 80040a8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80040b2:	2304      	movs	r3, #4
 80040b4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 80040b8:	2000      	movs	r0, #0
 80040ba:	4770      	bx	lr

080040bc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80040bc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d001      	beq.n	80040ca <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 80040c6:	2000      	movs	r0, #0
 80040c8:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 80040ca:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 80040d4:	e7f7      	b.n	80040c6 <USBD_LL_Resume+0xa>

080040d6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80040d6:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80040d8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d001      	beq.n	80040e6 <USBD_LL_SOF+0x10>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 80040e2:	2000      	movs	r0, #0
 80040e4:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 80040e6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f9      	beq.n	80040e2 <USBD_LL_SOF+0xc>
      if (pdev->pClass[0]->SOF != NULL)
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f6      	beq.n	80040e2 <USBD_LL_SOF+0xc>
        (void)pdev->pClass[0]->SOF(pdev);
 80040f4:	4798      	blx	r3
 80040f6:	e7f4      	b.n	80040e2 <USBD_LL_SOF+0xc>

080040f8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80040f8:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 80040fa:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80040fe:	33ae      	adds	r3, #174	@ 0xae
 8004100:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8004104:	b15a      	cbz	r2, 800411e <USBD_LL_IsoINIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004106:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b03      	cmp	r3, #3
 800410e:	d001      	beq.n	8004114 <USBD_LL_IsoINIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8004110:	2000      	movs	r0, #0
}
 8004112:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004114:	6a13      	ldr	r3, [r2, #32]
 8004116:	b123      	cbz	r3, 8004122 <USBD_LL_IsoINIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004118:	4798      	blx	r3
  return USBD_OK;
 800411a:	2000      	movs	r0, #0
 800411c:	e7f9      	b.n	8004112 <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 800411e:	2003      	movs	r0, #3
 8004120:	e7f7      	b.n	8004112 <USBD_LL_IsoINIncomplete+0x1a>
  return USBD_OK;
 8004122:	2000      	movs	r0, #0
 8004124:	e7f5      	b.n	8004112 <USBD_LL_IsoINIncomplete+0x1a>

08004126 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004126:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8004128:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800412c:	33ae      	adds	r3, #174	@ 0xae
 800412e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8004132:	b15a      	cbz	r2, 800414c <USBD_LL_IsoOUTIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004134:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b03      	cmp	r3, #3
 800413c:	d001      	beq.n	8004142 <USBD_LL_IsoOUTIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800413e:	2000      	movs	r0, #0
}
 8004140:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004142:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8004144:	b123      	cbz	r3, 8004150 <USBD_LL_IsoOUTIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004146:	4798      	blx	r3
  return USBD_OK;
 8004148:	2000      	movs	r0, #0
 800414a:	e7f9      	b.n	8004140 <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 800414c:	2003      	movs	r0, #3
 800414e:	e7f7      	b.n	8004140 <USBD_LL_IsoOUTIncomplete+0x1a>
  return USBD_OK;
 8004150:	2000      	movs	r0, #0
 8004152:	e7f5      	b.n	8004140 <USBD_LL_IsoOUTIncomplete+0x1a>

08004154 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8004154:	2000      	movs	r0, #0
 8004156:	4770      	bx	lr

08004158 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004158:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800415a:	2301      	movs	r3, #1
 800415c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004160:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004164:	b123      	cbz	r3, 8004170 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	7901      	ldrb	r1, [r0, #4]
 800416a:	4798      	blx	r3
 800416c:	b910      	cbnz	r0, 8004174 <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800416e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8004170:	2000      	movs	r0, #0
 8004172:	e7fc      	b.n	800416e <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 8004174:	2003      	movs	r0, #3
 8004176:	e7fa      	b.n	800416e <USBD_LL_DevDisconnected+0x16>

08004178 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8004178:	2000      	movs	r0, #0
 800417a:	4770      	bx	lr

0800417c <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800417c:	2000      	movs	r0, #0
 800417e:	4770      	bx	lr

08004180 <USBD_LL_DataOutStage>:
{
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	4604      	mov	r4, r0
  if (epnum == 0U)
 8004184:	460d      	mov	r5, r1
 8004186:	2900      	cmp	r1, #0
 8004188:	d142      	bne.n	8004210 <USBD_LL_DataOutStage+0x90>
 800418a:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800418c:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8004190:	2a03      	cmp	r2, #3
 8004192:	d001      	beq.n	8004198 <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 8004194:	4608      	mov	r0, r1
}
 8004196:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8004198:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 800419c:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 80041a0:	4291      	cmp	r1, r2
 80041a2:	d809      	bhi.n	80041b8 <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 80041a4:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d00e      	beq.n	80041ce <USBD_LL_DataOutStage+0x4e>
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d01b      	beq.n	80041ec <USBD_LL_DataOutStage+0x6c>
 80041b4:	4628      	mov	r0, r5
 80041b6:	e00f      	b.n	80041d8 <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 80041b8:	1a89      	subs	r1, r1, r2
 80041ba:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80041be:	428a      	cmp	r2, r1
 80041c0:	bf28      	it	cs
 80041c2:	460a      	movcs	r2, r1
 80041c4:	4619      	mov	r1, r3
 80041c6:	f001 f8cc 	bl	8005362 <USBD_CtlContinueRx>
  return USBD_OK;
 80041ca:	4628      	mov	r0, r5
 80041cc:	e7e3      	b.n	8004196 <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80041ce:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 80041d2:	f7ff ffd1 	bl	8004178 <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80041d6:	b920      	cbnz	r0, 80041e2 <USBD_LL_DataOutStage+0x62>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80041d8:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d009      	beq.n	80041f6 <USBD_LL_DataOutStage+0x76>
        (void)USBD_CtlSendStatus(pdev);
 80041e2:	4620      	mov	r0, r4
 80041e4:	f001 f8c5 	bl	8005372 <USBD_CtlSendStatus>
  return USBD_OK;
 80041e8:	4628      	mov	r0, r5
 80041ea:	e7d4      	b.n	8004196 <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80041ec:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 80041f0:	f7ff ffc4 	bl	800417c <USBD_CoreFindEP>
            break;
 80041f4:	e7ef      	b.n	80041d6 <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80041f6:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80041fa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	2a00      	cmp	r2, #0
 8004202:	d0ee      	beq.n	80041e2 <USBD_LL_DataOutStage+0x62>
              pdev->classId = idx;
 8004204:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	4620      	mov	r0, r4
 800420c:	4798      	blx	r3
 800420e:	e7e8      	b.n	80041e2 <USBD_LL_DataOutStage+0x62>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004210:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8004214:	f7ff ffb2 	bl	800417c <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004218:	b990      	cbnz	r0, 8004240 <USBD_LL_DataOutStage+0xc0>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800421a:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b03      	cmp	r3, #3
 8004222:	d1b8      	bne.n	8004196 <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 8004224:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8004228:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	2a00      	cmp	r2, #0
 8004230:	d0b1      	beq.n	8004196 <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 8004232:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	4629      	mov	r1, r5
 800423a:	4620      	mov	r0, r4
 800423c:	4798      	blx	r3
      if (ret != USBD_OK)
 800423e:	e7aa      	b.n	8004196 <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8004240:	2000      	movs	r0, #0
 8004242:	e7a8      	b.n	8004196 <USBD_LL_DataOutStage+0x16>

08004244 <USBD_LL_DataInStage>:
{
 8004244:	b538      	push	{r3, r4, r5, lr}
 8004246:	4604      	mov	r4, r0
  if (epnum == 0U)
 8004248:	460d      	mov	r5, r1
 800424a:	2900      	cmp	r1, #0
 800424c:	d14b      	bne.n	80042e6 <USBD_LL_DataInStage+0xa2>
 800424e:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004250:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8004254:	2a02      	cmp	r2, #2
 8004256:	d007      	beq.n	8004268 <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 8004258:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 800425c:	b118      	cbz	r0, 8004266 <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8004264:	4628      	mov	r0, r5
}
 8004266:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8004268:	69c2      	ldr	r2, [r0, #28]
 800426a:	6a01      	ldr	r1, [r0, #32]
 800426c:	428a      	cmp	r2, r1
 800426e:	d80e      	bhi.n	800428e <USBD_LL_DataInStage+0x4a>
        if ((pep->maxpacket == pep->rem_length) &&
 8004270:	428a      	cmp	r2, r1
 8004272:	d018      	beq.n	80042a6 <USBD_LL_DataInStage+0x62>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004274:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b03      	cmp	r3, #3
 800427c:	d027      	beq.n	80042ce <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800427e:	2180      	movs	r1, #128	@ 0x80
 8004280:	4620      	mov	r0, r4
 8004282:	f001 fb11 	bl	80058a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004286:	4620      	mov	r0, r4
 8004288:	f001 f87e 	bl	8005388 <USBD_CtlReceiveStatus>
 800428c:	e7e4      	b.n	8004258 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800428e:	1a52      	subs	r2, r2, r1
 8004290:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004292:	4619      	mov	r1, r3
 8004294:	f001 f84e 	bl	8005334 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004298:	2300      	movs	r3, #0
 800429a:	461a      	mov	r2, r3
 800429c:	4619      	mov	r1, r3
 800429e:	4620      	mov	r0, r4
 80042a0:	f001 fb22 	bl	80058e8 <USBD_LL_PrepareReceive>
 80042a4:	e7d8      	b.n	8004258 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 80042a6:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80042a8:	4299      	cmp	r1, r3
 80042aa:	d8e3      	bhi.n	8004274 <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 80042ac:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d2df      	bcs.n	8004274 <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80042b4:	2200      	movs	r2, #0
 80042b6:	4611      	mov	r1, r2
 80042b8:	f001 f83c 	bl	8005334 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80042bc:	2100      	movs	r1, #0
 80042be:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80042c2:	460b      	mov	r3, r1
 80042c4:	460a      	mov	r2, r1
 80042c6:	4620      	mov	r0, r4
 80042c8:	f001 fb0e 	bl	80058e8 <USBD_LL_PrepareReceive>
 80042cc:	e7c4      	b.n	8004258 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80042ce:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	2a00      	cmp	r2, #0
 80042d6:	d0d2      	beq.n	800427e <USBD_LL_DataInStage+0x3a>
              pdev->classId = 0U;
 80042d8:	2200      	movs	r2, #0
 80042da:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4620      	mov	r0, r4
 80042e2:	4798      	blx	r3
 80042e4:	e7cb      	b.n	800427e <USBD_LL_DataInStage+0x3a>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80042e6:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80042ea:	f7ff ff47 	bl	800417c <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80042ee:	b990      	cbnz	r0, 8004316 <USBD_LL_DataInStage+0xd2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042f0:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d1b5      	bne.n	8004266 <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 80042fa:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80042fe:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	2a00      	cmp	r2, #0
 8004306:	d0ae      	beq.n	8004266 <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 8004308:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	4629      	mov	r1, r5
 8004310:	4620      	mov	r0, r4
 8004312:	4798      	blx	r3
          if (ret != USBD_OK)
 8004314:	e7a7      	b.n	8004266 <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 8004316:	2000      	movs	r0, #0
 8004318:	e7a5      	b.n	8004266 <USBD_LL_DataInStage+0x22>

0800431a <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800431a:	880b      	ldrh	r3, [r1, #0]
 800431c:	7802      	ldrb	r2, [r0, #0]
 800431e:	4413      	add	r3, r2
 8004320:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8004322:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 8004324:	4418      	add	r0, r3
 8004326:	4770      	bx	lr

08004328 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004328:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800432a:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800432c:	e002      	b.n	8004334 <USBD_GetLen+0xc>
  {
    len++;
 800432e:	3001      	adds	r0, #1
 8004330:	b2c0      	uxtb	r0, r0
    pbuff++;
 8004332:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8004334:	781a      	ldrb	r2, [r3, #0]
 8004336:	2a00      	cmp	r2, #0
 8004338:	d1f9      	bne.n	800432e <USBD_GetLen+0x6>
  }

  return len;
}
 800433a:	4770      	bx	lr

0800433c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800433c:	780b      	ldrb	r3, [r1, #0]
 800433e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8004340:	784b      	ldrb	r3, [r1, #1]
 8004342:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8004344:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8004346:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004348:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800434c:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800434e:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8004350:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004352:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8004356:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8004358:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800435a:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800435c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8004360:	80c3      	strh	r3, [r0, #6]
}
 8004362:	4770      	bx	lr

08004364 <USBD_CtlError>:
{
 8004364:	b510      	push	{r4, lr}
 8004366:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004368:	2180      	movs	r1, #128	@ 0x80
 800436a:	f001 fa9d 	bl	80058a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800436e:	2100      	movs	r1, #0
 8004370:	4620      	mov	r0, r4
 8004372:	f001 fa99 	bl	80058a8 <USBD_LL_StallEP>
}
 8004376:	bd10      	pop	{r4, pc}

08004378 <USBD_GetDescriptor>:
{
 8004378:	b570      	push	{r4, r5, r6, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	4604      	mov	r4, r0
 800437e:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004386:	884a      	ldrh	r2, [r1, #2]
 8004388:	0a13      	lsrs	r3, r2, #8
 800438a:	3b01      	subs	r3, #1
 800438c:	2b0e      	cmp	r3, #14
 800438e:	f200 80d9 	bhi.w	8004544 <USBD_GetDescriptor+0x1cc>
 8004392:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004396:	001c      	.short	0x001c
 8004398:	004b0037 	.word	0x004b0037
 800439c:	00d700d7 	.word	0x00d700d7
 80043a0:	00c800bb 	.word	0x00c800bb
 80043a4:	00d700d7 	.word	0x00d700d7
 80043a8:	00d700d7 	.word	0x00d700d7
 80043ac:	00d700d7 	.word	0x00d700d7
 80043b0:	000f00d7 	.word	0x000f00d7
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80043b4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	b123      	cbz	r3, 80043c6 <USBD_GetDescriptor+0x4e>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80043bc:	f10d 0106 	add.w	r1, sp, #6
 80043c0:	7c00      	ldrb	r0, [r0, #16]
 80043c2:	4798      	blx	r3
  if (err != 0U)
 80043c4:	e00a      	b.n	80043dc <USBD_GetDescriptor+0x64>
        USBD_CtlError(pdev, req);
 80043c6:	4629      	mov	r1, r5
 80043c8:	f7ff ffcc 	bl	8004364 <USBD_CtlError>
  if (err != 0U)
 80043cc:	e018      	b.n	8004400 <USBD_GetDescriptor+0x88>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80043ce:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f10d 0106 	add.w	r1, sp, #6
 80043d8:	7c00      	ldrb	r0, [r0, #16]
 80043da:	4798      	blx	r3
  if (req->wLength != 0U)
 80043dc:	88ea      	ldrh	r2, [r5, #6]
 80043de:	2a00      	cmp	r2, #0
 80043e0:	f000 80b9 	beq.w	8004556 <USBD_GetDescriptor+0x1de>
    if (len != 0U)
 80043e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80af 	beq.w	800454c <USBD_GetDescriptor+0x1d4>
      len = MIN(len, req->wLength);
 80043ee:	429a      	cmp	r2, r3
 80043f0:	bf28      	it	cs
 80043f2:	461a      	movcs	r2, r3
 80043f4:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80043f8:	4601      	mov	r1, r0
 80043fa:	4620      	mov	r0, r4
 80043fc:	f000 ff8d 	bl	800531a <USBD_CtlSendData>
}
 8004400:	b002      	add	sp, #8
 8004402:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004404:	7c03      	ldrb	r3, [r0, #16]
 8004406:	b943      	cbnz	r3, 800441a <USBD_GetDescriptor+0xa2>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8004408:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800440c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440e:	f10d 0006 	add.w	r0, sp, #6
 8004412:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004414:	2302      	movs	r3, #2
 8004416:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004418:	e7e0      	b.n	80043dc <USBD_GetDescriptor+0x64>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800441a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004420:	f10d 0006 	add.w	r0, sp, #6
 8004424:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004426:	2302      	movs	r3, #2
 8004428:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800442a:	e7d7      	b.n	80043dc <USBD_GetDescriptor+0x64>
      switch ((uint8_t)(req->wValue))
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	2a05      	cmp	r2, #5
 8004430:	d869      	bhi.n	8004506 <USBD_GetDescriptor+0x18e>
 8004432:	e8df f002 	tbb	[pc, r2]
 8004436:	1003      	.short	0x1003
 8004438:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800443c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	b123      	cbz	r3, 800444e <USBD_GetDescriptor+0xd6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004444:	f10d 0106 	add.w	r1, sp, #6
 8004448:	7c00      	ldrb	r0, [r0, #16]
 800444a:	4798      	blx	r3
  if (err != 0U)
 800444c:	e7c6      	b.n	80043dc <USBD_GetDescriptor+0x64>
            USBD_CtlError(pdev, req);
 800444e:	4629      	mov	r1, r5
 8004450:	f7ff ff88 	bl	8004364 <USBD_CtlError>
  if (err != 0U)
 8004454:	e7d4      	b.n	8004400 <USBD_GetDescriptor+0x88>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004456:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	b123      	cbz	r3, 8004468 <USBD_GetDescriptor+0xf0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800445e:	f10d 0106 	add.w	r1, sp, #6
 8004462:	7c00      	ldrb	r0, [r0, #16]
 8004464:	4798      	blx	r3
  if (err != 0U)
 8004466:	e7b9      	b.n	80043dc <USBD_GetDescriptor+0x64>
            USBD_CtlError(pdev, req);
 8004468:	4629      	mov	r1, r5
 800446a:	f7ff ff7b 	bl	8004364 <USBD_CtlError>
  if (err != 0U)
 800446e:	e7c7      	b.n	8004400 <USBD_GetDescriptor+0x88>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004470:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	b123      	cbz	r3, 8004482 <USBD_GetDescriptor+0x10a>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004478:	f10d 0106 	add.w	r1, sp, #6
 800447c:	7c00      	ldrb	r0, [r0, #16]
 800447e:	4798      	blx	r3
  if (err != 0U)
 8004480:	e7ac      	b.n	80043dc <USBD_GetDescriptor+0x64>
            USBD_CtlError(pdev, req);
 8004482:	4629      	mov	r1, r5
 8004484:	f7ff ff6e 	bl	8004364 <USBD_CtlError>
  if (err != 0U)
 8004488:	e7ba      	b.n	8004400 <USBD_GetDescriptor+0x88>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800448a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	b123      	cbz	r3, 800449c <USBD_GetDescriptor+0x124>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004492:	f10d 0106 	add.w	r1, sp, #6
 8004496:	7c00      	ldrb	r0, [r0, #16]
 8004498:	4798      	blx	r3
  if (err != 0U)
 800449a:	e79f      	b.n	80043dc <USBD_GetDescriptor+0x64>
            USBD_CtlError(pdev, req);
 800449c:	4629      	mov	r1, r5
 800449e:	f7ff ff61 	bl	8004364 <USBD_CtlError>
  if (err != 0U)
 80044a2:	e7ad      	b.n	8004400 <USBD_GetDescriptor+0x88>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80044a4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	b123      	cbz	r3, 80044b6 <USBD_GetDescriptor+0x13e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80044ac:	f10d 0106 	add.w	r1, sp, #6
 80044b0:	7c00      	ldrb	r0, [r0, #16]
 80044b2:	4798      	blx	r3
  if (err != 0U)
 80044b4:	e792      	b.n	80043dc <USBD_GetDescriptor+0x64>
            USBD_CtlError(pdev, req);
 80044b6:	4629      	mov	r1, r5
 80044b8:	f7ff ff54 	bl	8004364 <USBD_CtlError>
  if (err != 0U)
 80044bc:	e7a0      	b.n	8004400 <USBD_GetDescriptor+0x88>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80044be:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	b123      	cbz	r3, 80044d0 <USBD_GetDescriptor+0x158>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80044c6:	f10d 0106 	add.w	r1, sp, #6
 80044ca:	7c00      	ldrb	r0, [r0, #16]
 80044cc:	4798      	blx	r3
  if (err != 0U)
 80044ce:	e785      	b.n	80043dc <USBD_GetDescriptor+0x64>
            USBD_CtlError(pdev, req);
 80044d0:	4629      	mov	r1, r5
 80044d2:	f7ff ff47 	bl	8004364 <USBD_CtlError>
  if (err != 0U)
 80044d6:	e793      	b.n	8004400 <USBD_GetDescriptor+0x88>
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 80044d8:	f106 03ae 	add.w	r3, r6, #174	@ 0xae
 80044dc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80044e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044e2:	b152      	cbz	r2, 80044fa <USBD_GetDescriptor+0x182>
              pdev->classId = idx;
 80044e4:	f8c4 62d4 	str.w	r6, [r4, #724]	@ 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 80044e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ea:	f10d 0206 	add.w	r2, sp, #6
 80044ee:	78a9      	ldrb	r1, [r5, #2]
 80044f0:	4620      	mov	r0, r4
 80044f2:	4798      	blx	r3
              if (pbuf == NULL) /* This means that no class recognized the string index */
 80044f4:	2800      	cmp	r0, #0
 80044f6:	f47f af71 	bne.w	80043dc <USBD_GetDescriptor+0x64>
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 80044fa:	3601      	adds	r6, #1
 80044fc:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8004500:	42b3      	cmp	r3, r6
 8004502:	d8e9      	bhi.n	80044d8 <USBD_GetDescriptor+0x160>
 8004504:	e76a      	b.n	80043dc <USBD_GetDescriptor+0x64>
      switch ((uint8_t)(req->wValue))
 8004506:	2600      	movs	r6, #0
 8004508:	4630      	mov	r0, r6
 800450a:	e7f7      	b.n	80044fc <USBD_GetDescriptor+0x184>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800450c:	7c03      	ldrb	r3, [r0, #16]
 800450e:	b933      	cbnz	r3, 800451e <USBD_GetDescriptor+0x1a6>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8004510:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004516:	f10d 0006 	add.w	r0, sp, #6
 800451a:	4798      	blx	r3
  if (err != 0U)
 800451c:	e75e      	b.n	80043dc <USBD_GetDescriptor+0x64>
        USBD_CtlError(pdev, req);
 800451e:	4629      	mov	r1, r5
 8004520:	f7ff ff20 	bl	8004364 <USBD_CtlError>
  if (err != 0U)
 8004524:	e76c      	b.n	8004400 <USBD_GetDescriptor+0x88>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004526:	7c03      	ldrb	r3, [r0, #16]
 8004528:	b943      	cbnz	r3, 800453c <USBD_GetDescriptor+0x1c4>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800452a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800452e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004530:	f10d 0006 	add.w	r0, sp, #6
 8004534:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004536:	2307      	movs	r3, #7
 8004538:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800453a:	e74f      	b.n	80043dc <USBD_GetDescriptor+0x64>
        USBD_CtlError(pdev, req);
 800453c:	4629      	mov	r1, r5
 800453e:	f7ff ff11 	bl	8004364 <USBD_CtlError>
  if (err != 0U)
 8004542:	e75d      	b.n	8004400 <USBD_GetDescriptor+0x88>
      USBD_CtlError(pdev, req);
 8004544:	4629      	mov	r1, r5
 8004546:	f7ff ff0d 	bl	8004364 <USBD_CtlError>
    return;
 800454a:	e759      	b.n	8004400 <USBD_GetDescriptor+0x88>
      USBD_CtlError(pdev, req);
 800454c:	4629      	mov	r1, r5
 800454e:	4620      	mov	r0, r4
 8004550:	f7ff ff08 	bl	8004364 <USBD_CtlError>
 8004554:	e754      	b.n	8004400 <USBD_GetDescriptor+0x88>
    (void)USBD_CtlSendStatus(pdev);
 8004556:	4620      	mov	r0, r4
 8004558:	f000 ff0b 	bl	8005372 <USBD_CtlSendStatus>
 800455c:	e750      	b.n	8004400 <USBD_GetDescriptor+0x88>

0800455e <USBD_SetAddress>:
{
 800455e:	b538      	push	{r3, r4, r5, lr}
 8004560:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004562:	888b      	ldrh	r3, [r1, #4]
 8004564:	b9fb      	cbnz	r3, 80045a6 <USBD_SetAddress+0x48>
 8004566:	88cb      	ldrh	r3, [r1, #6]
 8004568:	b9eb      	cbnz	r3, 80045a6 <USBD_SetAddress+0x48>
 800456a:	884b      	ldrh	r3, [r1, #2]
 800456c:	2b7f      	cmp	r3, #127	@ 0x7f
 800456e:	d81a      	bhi.n	80045a6 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004570:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004574:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b03      	cmp	r3, #3
 800457c:	d00c      	beq.n	8004598 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 800457e:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004582:	4629      	mov	r1, r5
 8004584:	f001 f9a0 	bl	80058c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004588:	4620      	mov	r0, r4
 800458a:	f000 fef2 	bl	8005372 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800458e:	b135      	cbz	r5, 800459e <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004590:	2302      	movs	r3, #2
 8004592:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004596:	e009      	b.n	80045ac <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 8004598:	f7ff fee4 	bl	8004364 <USBD_CtlError>
 800459c:	e006      	b.n	80045ac <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800459e:	2301      	movs	r3, #1
 80045a0:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80045a4:	e002      	b.n	80045ac <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 80045a6:	4620      	mov	r0, r4
 80045a8:	f7ff fedc 	bl	8004364 <USBD_CtlError>
}
 80045ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080045b0 <USBD_SetConfig>:
{
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	4604      	mov	r4, r0
 80045b4:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 80045b6:	788d      	ldrb	r5, [r1, #2]
 80045b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004678 <USBD_SetConfig+0xc8>)
 80045ba:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80045bc:	2d01      	cmp	r5, #1
 80045be:	d810      	bhi.n	80045e2 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 80045c0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d00f      	beq.n	80045ea <USBD_SetConfig+0x3a>
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d026      	beq.n	800461c <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 80045ce:	f7ff fec9 	bl	8004364 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80045d2:	4b29      	ldr	r3, [pc, #164]	@ (8004678 <USBD_SetConfig+0xc8>)
 80045d4:	7819      	ldrb	r1, [r3, #0]
 80045d6:	4620      	mov	r0, r4
 80045d8:	f7ff fcf7 	bl	8003fca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80045dc:	2503      	movs	r5, #3
}
 80045de:	4628      	mov	r0, r5
 80045e0:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 80045e2:	f7ff febf 	bl	8004364 <USBD_CtlError>
    return USBD_FAIL;
 80045e6:	2503      	movs	r5, #3
 80045e8:	e7f9      	b.n	80045de <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 80045ea:	b1a5      	cbz	r5, 8004616 <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 80045ec:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80045ee:	4629      	mov	r1, r5
 80045f0:	f7ff fce2 	bl	8003fb8 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80045f4:	4605      	mov	r5, r0
 80045f6:	b138      	cbz	r0, 8004608 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 80045f8:	4631      	mov	r1, r6
 80045fa:	4620      	mov	r0, r4
 80045fc:	f7ff feb2 	bl	8004364 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004600:	2302      	movs	r3, #2
 8004602:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004606:	e7ea      	b.n	80045de <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004608:	4620      	mov	r0, r4
 800460a:	f000 feb2 	bl	8005372 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800460e:	2303      	movs	r3, #3
 8004610:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004614:	e7e3      	b.n	80045de <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8004616:	f000 feac 	bl	8005372 <USBD_CtlSendStatus>
 800461a:	e7e0      	b.n	80045de <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800461c:	b1cd      	cbz	r5, 8004652 <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 800461e:	6841      	ldr	r1, [r0, #4]
 8004620:	428d      	cmp	r5, r1
 8004622:	d025      	beq.n	8004670 <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004624:	b2c9      	uxtb	r1, r1
 8004626:	f7ff fcd0 	bl	8003fca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800462a:	4b13      	ldr	r3, [pc, #76]	@ (8004678 <USBD_SetConfig+0xc8>)
 800462c:	7819      	ldrb	r1, [r3, #0]
 800462e:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004630:	4620      	mov	r0, r4
 8004632:	f7ff fcc1 	bl	8003fb8 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004636:	4605      	mov	r5, r0
 8004638:	b1b0      	cbz	r0, 8004668 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 800463a:	4631      	mov	r1, r6
 800463c:	4620      	mov	r0, r4
 800463e:	f7ff fe91 	bl	8004364 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004642:	7921      	ldrb	r1, [r4, #4]
 8004644:	4620      	mov	r0, r4
 8004646:	f7ff fcc0 	bl	8003fca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800464a:	2302      	movs	r3, #2
 800464c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004650:	e7c5      	b.n	80045de <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004652:	2302      	movs	r3, #2
 8004654:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8004658:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800465a:	4629      	mov	r1, r5
 800465c:	f7ff fcb5 	bl	8003fca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004660:	4620      	mov	r0, r4
 8004662:	f000 fe86 	bl	8005372 <USBD_CtlSendStatus>
 8004666:	e7ba      	b.n	80045de <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004668:	4620      	mov	r0, r4
 800466a:	f000 fe82 	bl	8005372 <USBD_CtlSendStatus>
 800466e:	e7b6      	b.n	80045de <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8004670:	f000 fe7f 	bl	8005372 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004674:	2500      	movs	r5, #0
 8004676:	e7b2      	b.n	80045de <USBD_SetConfig+0x2e>
 8004678:	24000178 	.word	0x24000178

0800467c <USBD_GetConfig>:
{
 800467c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800467e:	88cb      	ldrh	r3, [r1, #6]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d10b      	bne.n	800469c <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8004684:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d909      	bls.n	80046a2 <USBD_GetConfig+0x26>
 800468e:	2b03      	cmp	r3, #3
 8004690:	d111      	bne.n	80046b6 <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004692:	2201      	movs	r2, #1
 8004694:	1d01      	adds	r1, r0, #4
 8004696:	f000 fe40 	bl	800531a <USBD_CtlSendData>
        break;
 800469a:	e001      	b.n	80046a0 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800469c:	f7ff fe62 	bl	8004364 <USBD_CtlError>
}
 80046a0:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80046a2:	b25b      	sxtb	r3, r3
 80046a4:	b13b      	cbz	r3, 80046b6 <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 80046a6:	4601      	mov	r1, r0
 80046a8:	2300      	movs	r3, #0
 80046aa:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80046ae:	2201      	movs	r2, #1
 80046b0:	f000 fe33 	bl	800531a <USBD_CtlSendData>
        break;
 80046b4:	e7f4      	b.n	80046a0 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 80046b6:	f7ff fe55 	bl	8004364 <USBD_CtlError>
}
 80046ba:	e7f1      	b.n	80046a0 <USBD_GetConfig+0x24>

080046bc <USBD_GetStatus>:
{
 80046bc:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80046be:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80046c2:	3b01      	subs	r3, #1
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d812      	bhi.n	80046ee <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80046c8:	88cb      	ldrh	r3, [r1, #6]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d10c      	bne.n	80046e8 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80046ce:	2301      	movs	r3, #1
 80046d0:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 80046d2:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 80046d6:	b10b      	cbz	r3, 80046dc <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80046d8:	2303      	movs	r3, #3
 80046da:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80046dc:	2202      	movs	r2, #2
 80046de:	f100 010c 	add.w	r1, r0, #12
 80046e2:	f000 fe1a 	bl	800531a <USBD_CtlSendData>
}
 80046e6:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 80046e8:	f7ff fe3c 	bl	8004364 <USBD_CtlError>
        break;
 80046ec:	e7fb      	b.n	80046e6 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 80046ee:	f7ff fe39 	bl	8004364 <USBD_CtlError>
}
 80046f2:	e7f8      	b.n	80046e6 <USBD_GetStatus+0x2a>

080046f4 <USBD_SetFeature>:
{
 80046f4:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80046f6:	884b      	ldrh	r3, [r1, #2]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d004      	beq.n	8004706 <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d007      	beq.n	8004710 <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 8004700:	f7ff fe30 	bl	8004364 <USBD_CtlError>
}
 8004704:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8004706:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800470a:	f000 fe32 	bl	8005372 <USBD_CtlSendStatus>
 800470e:	e7f9      	b.n	8004704 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8004710:	888b      	ldrh	r3, [r1, #4]
 8004712:	0a1b      	lsrs	r3, r3, #8
 8004714:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8004718:	f000 fe2b 	bl	8005372 <USBD_CtlSendStatus>
 800471c:	e7f2      	b.n	8004704 <USBD_SetFeature+0x10>

0800471e <USBD_ClrFeature>:
{
 800471e:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004720:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004724:	3b01      	subs	r3, #1
 8004726:	2b02      	cmp	r3, #2
 8004728:	d809      	bhi.n	800473e <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800472a:	884b      	ldrh	r3, [r1, #2]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d000      	beq.n	8004732 <USBD_ClrFeature+0x14>
}
 8004730:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004738:	f000 fe1b 	bl	8005372 <USBD_CtlSendStatus>
 800473c:	e7f8      	b.n	8004730 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800473e:	f7ff fe11 	bl	8004364 <USBD_CtlError>
}
 8004742:	e7f5      	b.n	8004730 <USBD_ClrFeature+0x12>

08004744 <USBD_StdDevReq>:
{
 8004744:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004746:	780c      	ldrb	r4, [r1, #0]
 8004748:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800474c:	2c20      	cmp	r4, #32
 800474e:	d006      	beq.n	800475e <USBD_StdDevReq+0x1a>
 8004750:	2c40      	cmp	r4, #64	@ 0x40
 8004752:	d004      	beq.n	800475e <USBD_StdDevReq+0x1a>
 8004754:	b16c      	cbz	r4, 8004772 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8004756:	f7ff fe05 	bl	8004364 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800475a:	2400      	movs	r4, #0
      break;
 800475c:	e007      	b.n	800476e <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800475e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004762:	33ae      	adds	r3, #174	@ 0xae
 8004764:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	4798      	blx	r3
 800476c:	4604      	mov	r4, r0
}
 800476e:	4620      	mov	r0, r4
 8004770:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8004772:	784d      	ldrb	r5, [r1, #1]
 8004774:	2d09      	cmp	r5, #9
 8004776:	d81d      	bhi.n	80047b4 <USBD_StdDevReq+0x70>
 8004778:	e8df f005 	tbb	[pc, r5]
 800477c:	161c1912 	.word	0x161c1912
 8004780:	1c05081c 	.word	0x1c05081c
 8004784:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8004786:	f7ff fdf7 	bl	8004378 <USBD_GetDescriptor>
          break;
 800478a:	e7f0      	b.n	800476e <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 800478c:	f7ff fee7 	bl	800455e <USBD_SetAddress>
          break;
 8004790:	e7ed      	b.n	800476e <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 8004792:	f7ff ff0d 	bl	80045b0 <USBD_SetConfig>
 8004796:	4604      	mov	r4, r0
          break;
 8004798:	e7e9      	b.n	800476e <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 800479a:	f7ff ff6f 	bl	800467c <USBD_GetConfig>
          break;
 800479e:	e7e6      	b.n	800476e <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 80047a0:	f7ff ff8c 	bl	80046bc <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80047a4:	462c      	mov	r4, r5
          break;
 80047a6:	e7e2      	b.n	800476e <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 80047a8:	f7ff ffa4 	bl	80046f4 <USBD_SetFeature>
          break;
 80047ac:	e7df      	b.n	800476e <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 80047ae:	f7ff ffb6 	bl	800471e <USBD_ClrFeature>
          break;
 80047b2:	e7dc      	b.n	800476e <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 80047b4:	f7ff fdd6 	bl	8004364 <USBD_CtlError>
          break;
 80047b8:	e7d9      	b.n	800476e <USBD_StdDevReq+0x2a>

080047ba <USBD_StdItfReq>:
{
 80047ba:	b570      	push	{r4, r5, r6, lr}
 80047bc:	4605      	mov	r5, r0
 80047be:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047c0:	780b      	ldrb	r3, [r1, #0]
 80047c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d007      	beq.n	80047da <USBD_StdItfReq+0x20>
 80047ca:	2b40      	cmp	r3, #64	@ 0x40
 80047cc:	d005      	beq.n	80047da <USBD_StdItfReq+0x20>
 80047ce:	b123      	cbz	r3, 80047da <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 80047d0:	f7ff fdc8 	bl	8004364 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80047d4:	2600      	movs	r6, #0
}
 80047d6:	4630      	mov	r0, r6
 80047d8:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 80047da:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 80047de:	3b01      	subs	r3, #1
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d826      	bhi.n	8004832 <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80047e4:	7921      	ldrb	r1, [r4, #4]
 80047e6:	2901      	cmp	r1, #1
 80047e8:	d905      	bls.n	80047f6 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 80047ea:	4621      	mov	r1, r4
 80047ec:	4628      	mov	r0, r5
 80047ee:	f7ff fdb9 	bl	8004364 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80047f2:	2600      	movs	r6, #0
 80047f4:	e7ef      	b.n	80047d6 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80047f6:	4628      	mov	r0, r5
 80047f8:	f7ff fcbe 	bl	8004178 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80047fc:	b968      	cbnz	r0, 800481a <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 80047fe:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8004802:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8004806:	6891      	ldr	r1, [r2, #8]
 8004808:	b189      	cbz	r1, 800482e <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 800480a:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800480e:	6893      	ldr	r3, [r2, #8]
 8004810:	4621      	mov	r1, r4
 8004812:	4628      	mov	r0, r5
 8004814:	4798      	blx	r3
 8004816:	4606      	mov	r6, r0
 8004818:	e000      	b.n	800481c <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 800481a:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800481c:	88e3      	ldrh	r3, [r4, #6]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1d9      	bne.n	80047d6 <USBD_StdItfReq+0x1c>
 8004822:	2e00      	cmp	r6, #0
 8004824:	d1d7      	bne.n	80047d6 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8004826:	4628      	mov	r0, r5
 8004828:	f000 fda3 	bl	8005372 <USBD_CtlSendStatus>
 800482c:	e7d3      	b.n	80047d6 <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 800482e:	2603      	movs	r6, #3
 8004830:	e7f4      	b.n	800481c <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 8004832:	4621      	mov	r1, r4
 8004834:	4628      	mov	r0, r5
 8004836:	f7ff fd95 	bl	8004364 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800483a:	2600      	movs	r6, #0
          break;
 800483c:	e7cb      	b.n	80047d6 <USBD_StdItfReq+0x1c>

0800483e <USBD_StdEPReq>:
{
 800483e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004842:	4606      	mov	r6, r0
 8004844:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8004846:	888b      	ldrh	r3, [r1, #4]
 8004848:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800484a:	780c      	ldrb	r4, [r1, #0]
 800484c:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8004850:	2c20      	cmp	r4, #32
 8004852:	d008      	beq.n	8004866 <USBD_StdEPReq+0x28>
 8004854:	2c40      	cmp	r4, #64	@ 0x40
 8004856:	d006      	beq.n	8004866 <USBD_StdEPReq+0x28>
 8004858:	b1dc      	cbz	r4, 8004892 <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 800485a:	f7ff fd83 	bl	8004364 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800485e:	2400      	movs	r4, #0
}
 8004860:	4620      	mov	r0, r4
 8004862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8004866:	4639      	mov	r1, r7
 8004868:	4630      	mov	r0, r6
 800486a:	f7ff fc87 	bl	800417c <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800486e:	4604      	mov	r4, r0
 8004870:	2800      	cmp	r0, #0
 8004872:	f040 80f9 	bne.w	8004a68 <USBD_StdEPReq+0x22a>
        pdev->classId = idx;
 8004876:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 800487a:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800487e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0eb      	beq.n	8004860 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8004888:	4629      	mov	r1, r5
 800488a:	4630      	mov	r0, r6
 800488c:	4798      	blx	r3
 800488e:	4604      	mov	r4, r0
 8004890:	e7e6      	b.n	8004860 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 8004892:	f891 8001 	ldrb.w	r8, [r1, #1]
 8004896:	f1b8 0f01 	cmp.w	r8, #1
 800489a:	d031      	beq.n	8004900 <USBD_StdEPReq+0xc2>
 800489c:	f1b8 0f03 	cmp.w	r8, #3
 80048a0:	d005      	beq.n	80048ae <USBD_StdEPReq+0x70>
 80048a2:	f1b8 0f00 	cmp.w	r8, #0
 80048a6:	d066      	beq.n	8004976 <USBD_StdEPReq+0x138>
          USBD_CtlError(pdev, req);
 80048a8:	f7ff fd5c 	bl	8004364 <USBD_CtlError>
          break;
 80048ac:	e7d8      	b.n	8004860 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 80048ae:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d004      	beq.n	80048c2 <USBD_StdEPReq+0x84>
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d011      	beq.n	80048e0 <USBD_StdEPReq+0xa2>
              USBD_CtlError(pdev, req);
 80048bc:	f7ff fd52 	bl	8004364 <USBD_CtlError>
              break;
 80048c0:	e7ce      	b.n	8004860 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80048c2:	2f00      	cmp	r7, #0
 80048c4:	bf18      	it	ne
 80048c6:	2f80      	cmpne	r7, #128	@ 0x80
 80048c8:	d007      	beq.n	80048da <USBD_StdEPReq+0x9c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80048ca:	4639      	mov	r1, r7
 80048cc:	f000 ffec 	bl	80058a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80048d0:	2180      	movs	r1, #128	@ 0x80
 80048d2:	4630      	mov	r0, r6
 80048d4:	f000 ffe8 	bl	80058a8 <USBD_LL_StallEP>
 80048d8:	e7c2      	b.n	8004860 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 80048da:	f7ff fd43 	bl	8004364 <USBD_CtlError>
 80048de:	e7bf      	b.n	8004860 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80048e0:	884b      	ldrh	r3, [r1, #2]
 80048e2:	b92b      	cbnz	r3, 80048f0 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80048e4:	2f00      	cmp	r7, #0
 80048e6:	bf18      	it	ne
 80048e8:	2f80      	cmpne	r7, #128	@ 0x80
 80048ea:	d001      	beq.n	80048f0 <USBD_StdEPReq+0xb2>
 80048ec:	88cb      	ldrh	r3, [r1, #6]
 80048ee:	b11b      	cbz	r3, 80048f8 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 80048f0:	4630      	mov	r0, r6
 80048f2:	f000 fd3e 	bl	8005372 <USBD_CtlSendStatus>
              break;
 80048f6:	e7b3      	b.n	8004860 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80048f8:	4639      	mov	r1, r7
 80048fa:	f000 ffd5 	bl	80058a8 <USBD_LL_StallEP>
 80048fe:	e7f7      	b.n	80048f0 <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 8004900:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d004      	beq.n	8004914 <USBD_StdEPReq+0xd6>
 800490a:	2b03      	cmp	r3, #3
 800490c:	d011      	beq.n	8004932 <USBD_StdEPReq+0xf4>
              USBD_CtlError(pdev, req);
 800490e:	f7ff fd29 	bl	8004364 <USBD_CtlError>
              break;
 8004912:	e7a5      	b.n	8004860 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004914:	2f00      	cmp	r7, #0
 8004916:	bf18      	it	ne
 8004918:	2f80      	cmpne	r7, #128	@ 0x80
 800491a:	d007      	beq.n	800492c <USBD_StdEPReq+0xee>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800491c:	4639      	mov	r1, r7
 800491e:	f000 ffc3 	bl	80058a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004922:	2180      	movs	r1, #128	@ 0x80
 8004924:	4630      	mov	r0, r6
 8004926:	f000 ffbf 	bl	80058a8 <USBD_LL_StallEP>
 800492a:	e799      	b.n	8004860 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800492c:	f7ff fd1a 	bl	8004364 <USBD_CtlError>
 8004930:	e796      	b.n	8004860 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004932:	884b      	ldrh	r3, [r1, #2]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d193      	bne.n	8004860 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004938:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800493c:	d117      	bne.n	800496e <USBD_StdEPReq+0x130>
                (void)USBD_CtlSendStatus(pdev);
 800493e:	4630      	mov	r0, r6
 8004940:	f000 fd17 	bl	8005372 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8004944:	4639      	mov	r1, r7
 8004946:	4630      	mov	r0, r6
 8004948:	f7ff fc18 	bl	800417c <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800494c:	2800      	cmp	r0, #0
 800494e:	d187      	bne.n	8004860 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 8004950:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8004954:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8004958:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800495c:	6892      	ldr	r2, [r2, #8]
 800495e:	2a00      	cmp	r2, #0
 8004960:	f000 8084 	beq.w	8004a6c <USBD_StdEPReq+0x22e>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004964:	4629      	mov	r1, r5
 8004966:	4630      	mov	r0, r6
 8004968:	4790      	blx	r2
 800496a:	4604      	mov	r4, r0
 800496c:	e778      	b.n	8004860 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800496e:	4639      	mov	r1, r7
 8004970:	f000 ffa2 	bl	80058b8 <USBD_LL_ClearStallEP>
 8004974:	e7e3      	b.n	800493e <USBD_StdEPReq+0x100>
          switch (pdev->dev_state)
 8004976:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	2a02      	cmp	r2, #2
 800497e:	d005      	beq.n	800498c <USBD_StdEPReq+0x14e>
 8004980:	2a03      	cmp	r2, #3
 8004982:	d028      	beq.n	80049d6 <USBD_StdEPReq+0x198>
              USBD_CtlError(pdev, req);
 8004984:	f7ff fcee 	bl	8004364 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004988:	4644      	mov	r4, r8
              break;
 800498a:	e769      	b.n	8004860 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800498c:	2f00      	cmp	r7, #0
 800498e:	bf18      	it	ne
 8004990:	2f80      	cmpne	r7, #128	@ 0x80
 8004992:	d113      	bne.n	80049bc <USBD_StdEPReq+0x17e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004994:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004998:	d114      	bne.n	80049c4 <USBD_StdEPReq+0x186>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800499a:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800499e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80049a2:	00b9      	lsls	r1, r7, #2
 80049a4:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 80049a8:	4401      	add	r1, r0
 80049aa:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80049b0:	2202      	movs	r2, #2
 80049b2:	4630      	mov	r0, r6
 80049b4:	f000 fcb1 	bl	800531a <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80049b8:	4644      	mov	r4, r8
              break;
 80049ba:	e751      	b.n	8004860 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 80049bc:	f7ff fcd2 	bl	8004364 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80049c0:	4644      	mov	r4, r8
                break;
 80049c2:	e74d      	b.n	8004860 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049c4:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 80049c8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80049cc:	00b9      	lsls	r1, r7, #2
 80049ce:	3110      	adds	r1, #16
 80049d0:	4401      	add	r1, r0
 80049d2:	3104      	adds	r1, #4
 80049d4:	e7ea      	b.n	80049ac <USBD_StdEPReq+0x16e>
              if ((ep_addr & 0x80U) == 0x80U)
 80049d6:	b25b      	sxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	db20      	blt.n	8004a1e <USBD_StdEPReq+0x1e0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80049dc:	f007 020f 	and.w	r2, r7, #15
 80049e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80049e4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80049e8:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 80049ec:	b322      	cbz	r2, 8004a38 <USBD_StdEPReq+0x1fa>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	db26      	blt.n	8004a40 <USBD_StdEPReq+0x202>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80049f2:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80049fa:	009c      	lsls	r4, r3, #2
 80049fc:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8004a00:	4434      	add	r4, r6
 8004a02:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004a04:	2f80      	cmp	r7, #128	@ 0x80
 8004a06:	bf18      	it	ne
 8004a08:	2f00      	cmpne	r7, #0
 8004a0a:	d122      	bne.n	8004a52 <USBD_StdEPReq+0x214>
                pep->status = 0x0000U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004a10:	2202      	movs	r2, #2
 8004a12:	4621      	mov	r1, r4
 8004a14:	4630      	mov	r0, r6
 8004a16:	f000 fc80 	bl	800531a <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a1a:	4644      	mov	r4, r8
              break;
 8004a1c:	e720      	b.n	8004860 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004a1e:	f007 020f 	and.w	r2, r7, #15
 8004a22:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004a26:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004a2a:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8004a2c:	2a00      	cmp	r2, #0
 8004a2e:	d1de      	bne.n	80049ee <USBD_StdEPReq+0x1b0>
                  USBD_CtlError(pdev, req);
 8004a30:	f7ff fc98 	bl	8004364 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a34:	4644      	mov	r4, r8
                  break;
 8004a36:	e713      	b.n	8004860 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 8004a38:	f7ff fc94 	bl	8004364 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a3c:	4644      	mov	r4, r8
                  break;
 8004a3e:	e70f      	b.n	8004860 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004a40:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 8004a44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004a48:	009c      	lsls	r4, r3, #2
 8004a4a:	3410      	adds	r4, #16
 8004a4c:	4434      	add	r4, r6
 8004a4e:	3404      	adds	r4, #4
 8004a50:	e7d8      	b.n	8004a04 <USBD_StdEPReq+0x1c6>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004a52:	4639      	mov	r1, r7
 8004a54:	4630      	mov	r0, r6
 8004a56:	f000 fee7 	bl	8005828 <USBD_LL_IsStallEP>
 8004a5a:	b110      	cbz	r0, 8004a62 <USBD_StdEPReq+0x224>
                pep->status = 0x0001U;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	6023      	str	r3, [r4, #0]
 8004a60:	e7d6      	b.n	8004a10 <USBD_StdEPReq+0x1d2>
                pep->status = 0x0000U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	e7d3      	b.n	8004a10 <USBD_StdEPReq+0x1d2>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a68:	2400      	movs	r4, #0
 8004a6a:	e6f9      	b.n	8004860 <USBD_StdEPReq+0x22>
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	e6f7      	b.n	8004860 <USBD_StdEPReq+0x22>

08004a70 <USBD_GetString>:
  if (desc == NULL)
 8004a70:	b300      	cbz	r0, 8004ab4 <USBD_GetString+0x44>
{
 8004a72:	b570      	push	{r4, r5, r6, lr}
 8004a74:	460d      	mov	r5, r1
 8004a76:	4616      	mov	r6, r2
 8004a78:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8004a7a:	f7ff fc55 	bl	8004328 <USBD_GetLen>
 8004a7e:	3001      	adds	r0, #1
 8004a80:	0043      	lsls	r3, r0, #1
 8004a82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a86:	d806      	bhi.n	8004a96 <USBD_GetString+0x26>
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8004a8c:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	706b      	strb	r3, [r5, #1]
  idx++;
 8004a92:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004a94:	e00a      	b.n	8004aac <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8004a96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a9a:	e7f6      	b.n	8004a8a <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 8004a9c:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8004a9e:	3401      	adds	r4, #1
    idx++;
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	54a9      	strb	r1, [r5, r2]
    idx++;
 8004aa8:	3302      	adds	r3, #2
 8004aaa:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8004aac:	7822      	ldrb	r2, [r4, #0]
 8004aae:	2a00      	cmp	r2, #0
 8004ab0:	d1f4      	bne.n	8004a9c <USBD_GetString+0x2c>
}
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
 8004ab4:	4770      	bx	lr
	...

08004ab8 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004ab8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004abc:	4905      	ldr	r1, [pc, #20]	@ (8004ad4 <__NVIC_SystemReset+0x1c>)
 8004abe:	68ca      	ldr	r2, [r1, #12]
 8004ac0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004ac4:	4b04      	ldr	r3, [pc, #16]	@ (8004ad8 <__NVIC_SystemReset+0x20>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60cb      	str	r3, [r1, #12]
 8004aca:	f3bf 8f4f 	dsb	sy
    __NOP();
 8004ace:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8004ad0:	e7fd      	b.n	8004ace <__NVIC_SystemReset+0x16>
 8004ad2:	bf00      	nop
 8004ad4:	e000ed00 	.word	0xe000ed00
 8004ad8:	05fa0004 	.word	0x05fa0004

08004adc <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8004adc:	231b      	movs	r3, #27
 8004ade:	8003      	strh	r3, [r0, #0]

  return USBD_DFU_CfgDesc;
}
 8004ae0:	4800      	ldr	r0, [pc, #0]	@ (8004ae4 <USBD_DFU_GetCfgDesc+0x8>)
 8004ae2:	4770      	bx	lr
 8004ae4:	24000024 	.word	0x24000024

08004ae8 <USBD_DFU_EP0_RxReady>:
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
}
 8004ae8:	2000      	movs	r0, #0
 8004aea:	4770      	bx	lr

08004aec <USBD_DFU_SOF>:
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
}
 8004aec:	2000      	movs	r0, #0
 8004aee:	4770      	bx	lr

08004af0 <USBD_DFU_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8004af0:	230a      	movs	r3, #10
 8004af2:	8003      	strh	r3, [r0, #0]

  return USBD_DFU_DeviceQualifierDesc;
}
 8004af4:	4800      	ldr	r0, [pc, #0]	@ (8004af8 <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 8004af6:	4770      	bx	lr
 8004af8:	24000018 	.word	0x24000018

08004afc <DFU_ClearStatus>:
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004afc:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004b00:	33b0      	adds	r3, #176	@ 0xb0
 8004b02:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hdfu == NULL)
 8004b06:	b1a3      	cbz	r3, 8004b32 <DFU_ClearStatus+0x36>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8004b08:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8004b0c:	2a0a      	cmp	r2, #10
 8004b0e:	d011      	beq.n	8004b34 <DFU_ClearStatus+0x38>
    hdfu->dev_status[5] = 0U; /* iString */
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8004b10:	210a      	movs	r1, #10
 8004b12:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8004b16:	220e      	movs	r2, #14
 8004b18:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8004b22:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8004b26:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8004b2a:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8004b2e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  }
}
 8004b32:	4770      	bx	lr
    hdfu->dev_state = DFU_STATE_IDLE;
 8004b34:	2102      	movs	r1, #2
 8004b36:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 8004b40:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8004b44:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8004b48:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8004b4c:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8004b50:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 8004b54:	4770      	bx	lr

08004b56 <DFU_Abort>:
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b56:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004b5a:	33b0      	adds	r3, #176	@ 0xb0
 8004b5c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hdfu == NULL)
 8004b60:	b1eb      	cbz	r3, 8004b9e <DFU_Abort+0x48>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8004b62:	f893 141c 	ldrb.w	r1, [r3, #1052]	@ 0x41c
 8004b66:	2909      	cmp	r1, #9
 8004b68:	d819      	bhi.n	8004b9e <DFU_Abort+0x48>
 8004b6a:	f44f 721b 	mov.w	r2, #620	@ 0x26c
 8004b6e:	40ca      	lsrs	r2, r1
 8004b70:	f012 0f01 	tst.w	r2, #1
 8004b74:	d013      	beq.n	8004b9e <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8004b76:	2102      	movs	r1, #2
 8004b78:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 8004b82:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8004b86:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8004b8a:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8004b8e:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8004b92:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 8004b96:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8004b9a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }
}
 8004b9e:	4770      	bx	lr

08004ba0 <USBD_DFU_GetUsrStringDesc>:
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8004ba0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004ba4:	33b0      	adds	r3, #176	@ 0xb0
 8004ba6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004baa:	6843      	ldr	r3, [r0, #4]
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8004bac:	2906      	cmp	r1, #6
 8004bae:	d807      	bhi.n	8004bc0 <USBD_DFU_GetUsrStringDesc+0x20>
{
 8004bb0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8004bb2:	4c05      	ldr	r4, [pc, #20]	@ (8004bc8 <USBD_DFU_GetUsrStringDesc+0x28>)
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	f7ff ff5a 	bl	8004a70 <USBD_GetString>
    return USBD_StrDesc;
 8004bbc:	4620      	mov	r0, r4
}
 8004bbe:	bd10      	pop	{r4, pc}
    *length = 0U;
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	8010      	strh	r0, [r2, #0]
}
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	2400017c 	.word	0x2400017c

08004bcc <USBD_DFU_GetDfuFuncDesc>:
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  uint8_t *pDfuDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8004bcc:	8842      	ldrh	r2, [r0, #2]
 8004bce:	7803      	ldrb	r3, [r0, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d914      	bls.n	8004bfe <USBD_DFU_GetDfuFuncDesc+0x32>
{
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	4604      	mov	r4, r0
  {
    ptr = desc->bLength;
 8004bda:	f8ad 3006 	strh.w	r3, [sp, #6]

    while (ptr < desc->wTotalLength)
 8004bde:	8863      	ldrh	r3, [r4, #2]
 8004be0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d207      	bcs.n	8004bf8 <USBD_DFU_GetDfuFuncDesc+0x2c>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8004be8:	f10d 0106 	add.w	r1, sp, #6
 8004bec:	f7ff fb95 	bl	800431a <USBD_GetNextDesc>

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 8004bf0:	7843      	ldrb	r3, [r0, #1]
 8004bf2:	2b21      	cmp	r3, #33	@ 0x21
 8004bf4:	d1f3      	bne.n	8004bde <USBD_DFU_GetDfuFuncDesc+0x12>
 8004bf6:	e000      	b.n	8004bfa <USBD_DFU_GetDfuFuncDesc+0x2e>
  uint8_t *pDfuDesc = NULL;
 8004bf8:	2000      	movs	r0, #0
        break;
      }
    }
  }
  return pDfuDesc;
}
 8004bfa:	b002      	add	sp, #8
 8004bfc:	bd10      	pop	{r4, pc}
  uint8_t *pDfuDesc = NULL;
 8004bfe:	2000      	movs	r0, #0
}
 8004c00:	4770      	bx	lr

08004c02 <DFU_Leave>:
{
 8004c02:	b570      	push	{r4, r5, r6, lr}
 8004c04:	4604      	mov	r4, r0
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c06:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004c0a:	33b0      	adds	r3, #176	@ 0xb0
 8004c0c:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8004c10:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004c14:	685d      	ldr	r5, [r3, #4]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8004c16:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8004c1a:	f7ff ffd7 	bl	8004bcc <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8004c1e:	2d00      	cmp	r5, #0
 8004c20:	bf18      	it	ne
 8004c22:	2e00      	cmpne	r6, #0
 8004c24:	d013      	beq.n	8004c4e <DFU_Leave+0x4c>
 8004c26:	b190      	cbz	r0, 8004c4e <DFU_Leave+0x4c>
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f886 341d 	strb.w	r3, [r6, #1053]	@ 0x41d
  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 8004c2e:	7883      	ldrb	r3, [r0, #2]
 8004c30:	f013 0f04 	tst.w	r3, #4
 8004c34:	d00c      	beq.n	8004c50 <DFU_Leave+0x4e>
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8004c36:	2206      	movs	r2, #6
 8004c38:	f886 241c 	strb.w	r2, [r6, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f886 3415 	strb.w	r3, [r6, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8004c42:	f886 3416 	strb.w	r3, [r6, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8004c46:	f886 3417 	strb.w	r3, [r6, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8004c4a:	f886 2418 	strb.w	r2, [r6, #1048]	@ 0x418
}
 8004c4e:	bd70      	pop	{r4, r5, r6, pc}
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8004c50:	2208      	movs	r2, #8
 8004c52:	f886 241c 	strb.w	r2, [r6, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	f886 3415 	strb.w	r3, [r6, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8004c5c:	f886 3416 	strb.w	r3, [r6, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8004c60:	f886 3417 	strb.w	r3, [r6, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8004c64:	f886 2418 	strb.w	r2, [r6, #1048]	@ 0x418
    (void)USBD_Stop(pdev);
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f7ff f998 	bl	8003f9e <USBD_Stop>
    NVIC_SystemReset();
 8004c6e:	f7ff ff23 	bl	8004ab8 <__NVIC_SystemReset>

08004c72 <USBD_DFU_EP0_TxReady>:
{
 8004c72:	b510      	push	{r4, lr}
 8004c74:	b082      	sub	sp, #8
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c76:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004c7a:	33b0      	adds	r3, #176	@ 0xb0
 8004c7c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8004c80:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004c84:	685a      	ldr	r2, [r3, #4]
  if (hdfu == NULL)
 8004c86:	2c00      	cmp	r4, #0
 8004c88:	f000 808c 	beq.w	8004da4 <USBD_DFU_EP0_TxReady+0x132>
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8004c8c:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d005      	beq.n	8004ca0 <USBD_DFU_EP0_TxReady+0x2e>
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8004c94:	2b07      	cmp	r3, #7
 8004c96:	f000 8081 	beq.w	8004d9c <USBD_DFU_EP0_TxReady+0x12a>
    return (uint8_t)USBD_FAIL;
 8004c9a:	2003      	movs	r0, #3
}
 8004c9c:	b002      	add	sp, #8
 8004c9e:	bd10      	pop	{r4, pc}
    if (hdfu->wblock_num == 0U)
 8004ca0:	f8d4 1400 	ldr.w	r1, [r4, #1024]	@ 0x400
 8004ca4:	2900      	cmp	r1, #0
 8004ca6:	d14a      	bne.n	8004d3e <USBD_DFU_EP0_TxReady+0xcc>
      if (hdfu->wlength == 1U)
 8004ca8:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d053      	beq.n	8004d58 <USBD_DFU_EP0_TxReady+0xe6>
      else if (hdfu->wlength == 5U)
 8004cb0:	2b05      	cmp	r3, #5
 8004cb2:	d136      	bne.n	8004d22 <USBD_DFU_EP0_TxReady+0xb0>
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8004cb4:	7823      	ldrb	r3, [r4, #0]
 8004cb6:	2b21      	cmp	r3, #33	@ 0x21
 8004cb8:	d020      	beq.n	8004cfc <USBD_DFU_EP0_TxReady+0x8a>
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8004cba:	2b41      	cmp	r3, #65	@ 0x41
 8004cbc:	d174      	bne.n	8004da8 <USBD_DFU_EP0_TxReady+0x136>
          app_addr_ptr = hdfu->buffer.d8[1];
 8004cbe:	7863      	ldrb	r3, [r4, #1]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8004cc0:	78a1      	ldrb	r1, [r4, #2]
 8004cc2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8004cc6:	78e1      	ldrb	r1, [r4, #3]
 8004cc8:	eb03 4301 	add.w	r3, r3, r1, lsl #16
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8004ccc:	7920      	ldrb	r0, [r4, #4]
          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 8004cce:	68d2      	ldr	r2, [r2, #12]
 8004cd0:	eb03 6000 	add.w	r0, r3, r0, lsl #24
 8004cd4:	4790      	blx	r2
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d03e      	beq.n	8004d58 <USBD_DFU_EP0_TxReady+0xe6>
            hdfu->dev_state = DFU_STATE_ERROR;
 8004cda:	220a      	movs	r2, #10
 8004cdc:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8004ce0:	230b      	movs	r3, #11
 8004ce2:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
            hdfu->dev_status[1] = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8004cec:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8004cf0:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 8004cf4:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
            return (uint8_t)USBD_FAIL;
 8004cf8:	2003      	movs	r0, #3
 8004cfa:	e7cf      	b.n	8004c9c <USBD_DFU_EP0_TxReady+0x2a>
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8004cfc:	7863      	ldrb	r3, [r4, #1]
 8004cfe:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8004d02:	78a2      	ldrb	r2, [r4, #2]
 8004d04:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004d08:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8004d0c:	78e2      	ldrb	r2, [r4, #3]
 8004d0e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8004d12:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8004d16:	7922      	ldrb	r2, [r4, #4]
 8004d18:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8004d1c:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
 8004d20:	e01a      	b.n	8004d58 <USBD_DFU_EP0_TxReady+0xe6>
        hdfu->wlength = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8004d28:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
        req.bmRequest = 0U;
 8004d2c:	f88d 3000 	strb.w	r3, [sp]
        req.wLength = 1U;
 8004d30:	2301      	movs	r3, #1
 8004d32:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError(pdev, &req);
 8004d36:	4669      	mov	r1, sp
 8004d38:	f7ff fb14 	bl	8004364 <USBD_CtlError>
 8004d3c:	e00c      	b.n	8004d58 <USBD_DFU_EP0_TxReady+0xe6>
      if (hdfu->wblock_num > 1U)
 8004d3e:	2901      	cmp	r1, #1
 8004d40:	d90a      	bls.n	8004d58 <USBD_DFU_EP0_TxReady+0xe6>
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8004d42:	3902      	subs	r1, #2
 8004d44:	f8d4 0408 	ldr.w	r0, [r4, #1032]	@ 0x408
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8004d48:	6913      	ldr	r3, [r2, #16]
 8004d4a:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
 8004d4e:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 8004d52:	4620      	mov	r0, r4
 8004d54:	4798      	blx	r3
 8004d56:	b980      	cbnz	r0, 8004d7a <USBD_DFU_EP0_TxReady+0x108>
    hdfu->wlength = 0U;
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f8c4 0404 	str.w	r0, [r4, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8004d5e:	f8c4 0400 	str.w	r0, [r4, #1024]	@ 0x400
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8004d62:	2303      	movs	r3, #3
 8004d64:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8004d68:	f884 0415 	strb.w	r0, [r4, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8004d6c:	f884 0416 	strb.w	r0, [r4, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8004d70:	f884 0417 	strb.w	r0, [r4, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8004d74:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
 8004d78:	e790      	b.n	8004c9c <USBD_DFU_EP0_TxReady+0x2a>
          hdfu->dev_state = DFU_STATE_ERROR;
 8004d7a:	220a      	movs	r2, #10
 8004d7c:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8004d80:	230b      	movs	r3, #11
 8004d82:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
          hdfu->dev_status[1] = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 8004d8c:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 8004d90:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 8004d94:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
          return (uint8_t)USBD_FAIL;
 8004d98:	2003      	movs	r0, #3
 8004d9a:	e77f      	b.n	8004c9c <USBD_DFU_EP0_TxReady+0x2a>
    DFU_Leave(pdev);
 8004d9c:	f7ff ff31 	bl	8004c02 <DFU_Leave>
  return (uint8_t)USBD_OK;
 8004da0:	2000      	movs	r0, #0
 8004da2:	e77b      	b.n	8004c9c <USBD_DFU_EP0_TxReady+0x2a>
    return (uint8_t)USBD_FAIL;
 8004da4:	2003      	movs	r0, #3
 8004da6:	e779      	b.n	8004c9c <USBD_DFU_EP0_TxReady+0x2a>
          return (uint8_t)USBD_FAIL;
 8004da8:	2003      	movs	r0, #3
 8004daa:	e777      	b.n	8004c9c <USBD_DFU_EP0_TxReady+0x2a>

08004dac <DFU_Upload>:
{
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	460e      	mov	r6, r1
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004db0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004db4:	33b0      	adds	r3, #176	@ 0xb0
 8004db6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8004dba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004dbe:	6859      	ldr	r1, [r3, #4]
  if (hdfu == NULL)
 8004dc0:	2c00      	cmp	r4, #0
 8004dc2:	f000 8087 	beq.w	8004ed4 <DFU_Upload+0x128>
 8004dc6:	4605      	mov	r5, r0
  if (req->wLength > 0U)
 8004dc8:	88f3      	ldrh	r3, [r6, #6]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d076      	beq.n	8004ebc <DFU_Upload+0x110>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8004dce:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 8004dd2:	2b09      	cmp	r3, #9
 8004dd4:	bf18      	it	ne
 8004dd6:	2b02      	cmpne	r3, #2
 8004dd8:	d167      	bne.n	8004eaa <DFU_Upload+0xfe>
      hdfu->wblock_num = req->wValue;
 8004dda:	8870      	ldrh	r0, [r6, #2]
 8004ddc:	f8c4 0400 	str.w	r0, [r4, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8004de0:	88f2      	ldrh	r2, [r6, #6]
 8004de2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004de6:	bf28      	it	cs
 8004de8:	f44f 6280 	movcs.w	r2, #1024	@ 0x400
 8004dec:	f8c4 2404 	str.w	r2, [r4, #1028]	@ 0x404
      if (hdfu->wblock_num == 0U)
 8004df0:	b9d0      	cbnz	r0, 8004e28 <DFU_Upload+0x7c>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8004df2:	2a03      	cmp	r2, #3
 8004df4:	d916      	bls.n	8004e24 <DFU_Upload+0x78>
 8004df6:	2202      	movs	r2, #2
 8004df8:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8004e02:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8004e06:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8004e0a:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8004e0e:	7023      	strb	r3, [r4, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8004e10:	2321      	movs	r3, #33	@ 0x21
 8004e12:	7063      	strb	r3, [r4, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8004e14:	2341      	movs	r3, #65	@ 0x41
 8004e16:	70a3      	strb	r3, [r4, #2]
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 8004e18:	2203      	movs	r2, #3
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	f000 fa7c 	bl	800531a <USBD_CtlSendData>
 8004e22:	e057      	b.n	8004ed4 <DFU_Upload+0x128>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8004e24:	2209      	movs	r2, #9
 8004e26:	e7e7      	b.n	8004df8 <DFU_Upload+0x4c>
      else if (hdfu->wblock_num > 1U)
 8004e28:	2801      	cmp	r0, #1
 8004e2a:	d92d      	bls.n	8004e88 <DFU_Upload+0xdc>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8004e2c:	f04f 0c09 	mov.w	ip, #9
 8004e30:	f884 c41c 	strb.w	ip, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8004e3a:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8004e3e:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8004e42:	f884 c418 	strb.w	ip, [r4, #1048]	@ 0x418
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8004e46:	3802      	subs	r0, #2
 8004e48:	f8d4 3408 	ldr.w	r3, [r4, #1032]	@ 0x408
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8004e4c:	694f      	ldr	r7, [r1, #20]
 8004e4e:	4621      	mov	r1, r4
 8004e50:	eb03 2080 	add.w	r0, r3, r0, lsl #10
 8004e54:	47b8      	blx	r7
          if (phaddr == NULL)
 8004e56:	4601      	mov	r1, r0
 8004e58:	b128      	cbz	r0, 8004e66 <DFU_Upload+0xba>
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8004e5a:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f000 fa5b 	bl	800531a <USBD_CtlSendData>
 8004e64:	e036      	b.n	8004ed4 <DFU_Upload+0x128>
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8004e66:	220f      	movs	r2, #15
 8004e68:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
            hdfu->dev_status[1] = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8004e72:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8004e76:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 8004e7a:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
            USBD_CtlError(pdev, req);
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4628      	mov	r0, r5
 8004e82:	f7ff fa6f 	bl	8004364 <USBD_CtlError>
 8004e86:	e025      	b.n	8004ed4 <DFU_Upload+0x128>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8004e88:	220f      	movs	r2, #15
 8004e8a:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8004e94:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8004e98:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8004e9c:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
        USBD_CtlError(pdev, req);
 8004ea0:	4631      	mov	r1, r6
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f7ff fa5e 	bl	8004364 <USBD_CtlError>
 8004ea8:	e014      	b.n	8004ed4 <DFU_Upload+0x128>
      hdfu->wlength = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8004eb0:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
      USBD_CtlError(pdev, req);
 8004eb4:	4631      	mov	r1, r6
 8004eb6:	f7ff fa55 	bl	8004364 <USBD_CtlError>
 8004eba:	e00b      	b.n	8004ed4 <DFU_Upload+0x128>
    hdfu->dev_state = DFU_STATE_IDLE;
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8004ec8:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8004ecc:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8004ed0:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
}
 8004ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ed6 <DFU_GetStatus>:
{
 8004ed6:	b570      	push	{r4, r5, r6, lr}
 8004ed8:	4604      	mov	r4, r0
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004eda:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004ede:	33b0      	adds	r3, #176	@ 0xb0
 8004ee0:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8004ee4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004ee8:	685e      	ldr	r6, [r3, #4]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8004eea:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8004eee:	f7ff fe6d 	bl	8004bcc <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8004ef2:	2e00      	cmp	r6, #0
 8004ef4:	bf18      	it	ne
 8004ef6:	2d00      	cmpne	r5, #0
 8004ef8:	d00c      	beq.n	8004f14 <DFU_GetStatus+0x3e>
 8004efa:	b158      	cbz	r0, 8004f14 <DFU_GetStatus+0x3e>
  switch (hdfu->dev_state)
 8004efc:	f895 341c 	ldrb.w	r3, [r5, #1052]	@ 0x41c
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d008      	beq.n	8004f16 <DFU_GetStatus+0x40>
 8004f04:	2b06      	cmp	r3, #6
 8004f06:	d038      	beq.n	8004f7a <DFU_GetStatus+0xa4>
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8004f08:	2206      	movs	r2, #6
 8004f0a:	f205 4114 	addw	r1, r5, #1044	@ 0x414
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f000 fa03 	bl	800531a <USBD_CtlSendData>
}
 8004f14:	bd70      	pop	{r4, r5, r6, pc}
      if (hdfu->wlength != 0U)
 8004f16:	f8d5 3404 	ldr.w	r3, [r5, #1028]	@ 0x404
 8004f1a:	b30b      	cbz	r3, 8004f60 <DFU_GetStatus+0x8a>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8004f28:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8004f2c:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8004f30:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8004f34:	f8d5 3400 	ldr.w	r3, [r5, #1024]	@ 0x400
 8004f38:	b913      	cbnz	r3, 8004f40 <DFU_GetStatus+0x6a>
 8004f3a:	782b      	ldrb	r3, [r5, #0]
 8004f3c:	2b41      	cmp	r3, #65	@ 0x41
 8004f3e:	d007      	beq.n	8004f50 <DFU_GetStatus+0x7a>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8004f40:	69b3      	ldr	r3, [r6, #24]
 8004f42:	f205 4214 	addw	r2, r5, #1044	@ 0x414
 8004f46:	2101      	movs	r1, #1
 8004f48:	f8d5 0408 	ldr.w	r0, [r5, #1032]	@ 0x408
 8004f4c:	4798      	blx	r3
 8004f4e:	e7db      	b.n	8004f08 <DFU_GetStatus+0x32>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8004f50:	69b3      	ldr	r3, [r6, #24]
 8004f52:	f205 4214 	addw	r2, r5, #1044	@ 0x414
 8004f56:	2100      	movs	r1, #0
 8004f58:	f8d5 0408 	ldr.w	r0, [r5, #1032]	@ 0x408
 8004f5c:	4798      	blx	r3
 8004f5e:	e7d3      	b.n	8004f08 <DFU_GetStatus+0x32>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8004f60:	2205      	movs	r2, #5
 8004f62:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8004f6c:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8004f70:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8004f74:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
 8004f78:	e7c6      	b.n	8004f08 <DFU_GetStatus+0x32>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8004f7a:	f895 341d 	ldrb.w	r3, [r5, #1053]	@ 0x41d
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d012      	beq.n	8004fa8 <DFU_GetStatus+0xd2>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1c0      	bne.n	8004f08 <DFU_GetStatus+0x32>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 8004f86:	7883      	ldrb	r3, [r0, #2]
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8004f88:	f013 0f04 	tst.w	r3, #4
 8004f8c:	d0bc      	beq.n	8004f08 <DFU_GetStatus+0x32>
          hdfu->dev_state = DFU_STATE_IDLE;
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
          hdfu->dev_status[1] = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 8004f9a:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 8004f9e:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 8004fa2:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
 8004fa6:	e7af      	b.n	8004f08 <DFU_GetStatus+0x32>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8004fa8:	2307      	movs	r3, #7
 8004faa:	f885 341c 	strb.w	r3, [r5, #1052]	@ 0x41c
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f885 2415 	strb.w	r2, [r5, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f885 2416 	strb.w	r2, [r5, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8004fba:	f885 2417 	strb.w	r2, [r5, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8004fbe:	f885 3418 	strb.w	r3, [r5, #1048]	@ 0x418
 8004fc2:	e7a1      	b.n	8004f08 <DFU_GetStatus+0x32>

08004fc4 <DFU_GetState>:
{
 8004fc4:	b508      	push	{r3, lr}
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fc6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004fca:	33b0      	adds	r3, #176	@ 0xb0
 8004fcc:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
  if (hdfu == NULL)
 8004fd0:	b121      	cbz	r1, 8004fdc <DFU_GetState+0x18>
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f201 411c 	addw	r1, r1, #1052	@ 0x41c
 8004fd8:	f000 f99f 	bl	800531a <USBD_CtlSendData>
}
 8004fdc:	bd08      	pop	{r3, pc}

08004fde <DFU_Download>:
{
 8004fde:	b508      	push	{r3, lr}
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fe0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004fe4:	33b0      	adds	r3, #176	@ 0xb0
 8004fe6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  if (hdfu == NULL)
 8004fea:	b39b      	cbz	r3, 8005054 <DFU_Download+0x76>
  if (req->wLength > 0U)
 8004fec:	88ca      	ldrh	r2, [r1, #6]
 8004fee:	b1e2      	cbz	r2, 800502a <DFU_Download+0x4c>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8004ff0:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8004ff4:	2a05      	cmp	r2, #5
 8004ff6:	bf18      	it	ne
 8004ff8:	2a02      	cmpne	r2, #2
 8004ffa:	d113      	bne.n	8005024 <DFU_Download+0x46>
      hdfu->wblock_num = req->wValue;
 8004ffc:	884a      	ldrh	r2, [r1, #2]
 8004ffe:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8005002:	88ca      	ldrh	r2, [r1, #6]
 8005004:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005008:	bf28      	it	cs
 800500a:	f44f 6280 	movcs.w	r2, #1024	@ 0x400
 800500e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8005012:	2103      	movs	r1, #3
 8005014:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
      hdfu->dev_status[4] = hdfu->dev_state;
 8005018:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800501c:	4619      	mov	r1, r3
 800501e:	f000 f991 	bl	8005344 <USBD_CtlPrepareRx>
 8005022:	e017      	b.n	8005054 <DFU_Download+0x76>
      USBD_CtlError(pdev, req);
 8005024:	f7ff f99e 	bl	8004364 <USBD_CtlError>
 8005028:	e014      	b.n	8005054 <DFU_Download+0x76>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800502a:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800502e:	2a02      	cmp	r2, #2
 8005030:	bf18      	it	ne
 8005032:	2a05      	cmpne	r2, #5
 8005034:	d10f      	bne.n	8005056 <DFU_Download+0x78>
        hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8005036:	2201      	movs	r2, #1
 8005038:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800503c:	2106      	movs	r1, #6
 800503e:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8005048:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 800504c:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8005050:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
}
 8005054:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 8005056:	f7ff f985 	bl	8004364 <USBD_CtlError>
 800505a:	e7fb      	b.n	8005054 <DFU_Download+0x76>

0800505c <DFU_Detach>:
{
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	4604      	mov	r4, r0
 8005060:	460e      	mov	r6, r1
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005062:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005066:	33b0      	adds	r3, #176	@ 0xb0
 8005068:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800506c:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8005070:	f7ff fdac 	bl	8004bcc <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (pDfuFunc == NULL))
 8005074:	2800      	cmp	r0, #0
 8005076:	bf18      	it	ne
 8005078:	2d00      	cmpne	r5, #0
 800507a:	d028      	beq.n	80050ce <DFU_Detach+0x72>
 800507c:	4601      	mov	r1, r0
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800507e:	f895 241c 	ldrb.w	r2, [r5, #1052]	@ 0x41c
 8005082:	2a09      	cmp	r2, #9
 8005084:	d819      	bhi.n	80050ba <DFU_Detach+0x5e>
 8005086:	f44f 731b 	mov.w	r3, #620	@ 0x26c
 800508a:	40d3      	lsrs	r3, r2
 800508c:	f013 0f01 	tst.w	r3, #1
 8005090:	d013      	beq.n	80050ba <DFU_Detach+0x5e>
    hdfu->dev_state = DFU_STATE_IDLE;
 8005092:	2202      	movs	r2, #2
 8005094:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005098:	2300      	movs	r3, #0
 800509a:	f885 3414 	strb.w	r3, [r5, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 800509e:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80050a2:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80050a6:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80050aa:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /*iString*/
 80050ae:	f885 3419 	strb.w	r3, [r5, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 80050b2:	f8c5 3400 	str.w	r3, [r5, #1024]	@ 0x400
    hdfu->wlength = 0U;
 80050b6:	f8c5 3404 	str.w	r3, [r5, #1028]	@ 0x404
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 80050ba:	788b      	ldrb	r3, [r1, #2]
 80050bc:	f013 0f08 	tst.w	r3, #8
 80050c0:	d006      	beq.n	80050d0 <DFU_Detach+0x74>
    (void)USBD_Stop(pdev);
 80050c2:	4620      	mov	r0, r4
 80050c4:	f7fe ff6b 	bl	8003f9e <USBD_Stop>
    (void)USBD_Start(pdev);
 80050c8:	4620      	mov	r0, r4
 80050ca:	f7fe ff64 	bl	8003f96 <USBD_Start>
}
 80050ce:	bd70      	pop	{r4, r5, r6, pc}
    USBD_Delay((uint32_t)req->wValue);
 80050d0:	8870      	ldrh	r0, [r6, #2]
 80050d2:	f7fb fcd3 	bl	8000a7c <HAL_Delay>
 80050d6:	e7fa      	b.n	80050ce <DFU_Detach+0x72>

080050d8 <USBD_DFU_Setup>:
{
 80050d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050da:	b083      	sub	sp, #12
 80050dc:	460e      	mov	r6, r1
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050de:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80050e2:	33b0      	adds	r3, #176	@ 0xb0
 80050e4:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
  uint16_t status_info = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hdfu == NULL)
 80050ee:	2900      	cmp	r1, #0
 80050f0:	f000 8098 	beq.w	8005224 <USBD_DFU_Setup+0x14c>
 80050f4:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050f6:	7834      	ldrb	r4, [r6, #0]
 80050f8:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
 80050fc:	d02e      	beq.n	800515c <USBD_DFU_Setup+0x84>
 80050fe:	2c20      	cmp	r4, #32
 8005100:	f040 8089 	bne.w	8005216 <USBD_DFU_Setup+0x13e>
      switch (req->bRequest)
 8005104:	7874      	ldrb	r4, [r6, #1]
 8005106:	2c06      	cmp	r4, #6
 8005108:	d823      	bhi.n	8005152 <USBD_DFU_Setup+0x7a>
 800510a:	e8df f004 	tbb	[pc, r4]
 800510e:	041e      	.short	0x041e
 8005110:	16120e09 	.word	0x16120e09
 8005114:	1a          	.byte	0x1a
 8005115:	00          	.byte	0x00
          DFU_Download(pdev, req);
 8005116:	4631      	mov	r1, r6
 8005118:	f7ff ff61 	bl	8004fde <DFU_Download>
  USBD_StatusTypeDef ret = USBD_OK;
 800511c:	2400      	movs	r4, #0
          break;
 800511e:	e07e      	b.n	800521e <USBD_DFU_Setup+0x146>
          DFU_Upload(pdev, req);
 8005120:	4631      	mov	r1, r6
 8005122:	f7ff fe43 	bl	8004dac <DFU_Upload>
  USBD_StatusTypeDef ret = USBD_OK;
 8005126:	2400      	movs	r4, #0
          break;
 8005128:	e079      	b.n	800521e <USBD_DFU_Setup+0x146>
          DFU_GetStatus(pdev);
 800512a:	f7ff fed4 	bl	8004ed6 <DFU_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800512e:	2400      	movs	r4, #0
          break;
 8005130:	e075      	b.n	800521e <USBD_DFU_Setup+0x146>
          DFU_ClearStatus(pdev);
 8005132:	f7ff fce3 	bl	8004afc <DFU_ClearStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8005136:	2400      	movs	r4, #0
          break;
 8005138:	e071      	b.n	800521e <USBD_DFU_Setup+0x146>
          DFU_GetState(pdev);
 800513a:	f7ff ff43 	bl	8004fc4 <DFU_GetState>
  USBD_StatusTypeDef ret = USBD_OK;
 800513e:	2400      	movs	r4, #0
          break;
 8005140:	e06d      	b.n	800521e <USBD_DFU_Setup+0x146>
          DFU_Abort(pdev);
 8005142:	f7ff fd08 	bl	8004b56 <DFU_Abort>
  USBD_StatusTypeDef ret = USBD_OK;
 8005146:	2400      	movs	r4, #0
          break;
 8005148:	e069      	b.n	800521e <USBD_DFU_Setup+0x146>
          DFU_Detach(pdev, req);
 800514a:	4631      	mov	r1, r6
 800514c:	f7ff ff86 	bl	800505c <DFU_Detach>
          break;
 8005150:	e065      	b.n	800521e <USBD_DFU_Setup+0x146>
          USBD_CtlError(pdev, req);
 8005152:	4631      	mov	r1, r6
 8005154:	f7ff f906 	bl	8004364 <USBD_CtlError>
          ret = USBD_FAIL;
 8005158:	2403      	movs	r4, #3
          break;
 800515a:	e060      	b.n	800521e <USBD_DFU_Setup+0x146>
      switch (req->bRequest)
 800515c:	7877      	ldrb	r7, [r6, #1]
 800515e:	2f0b      	cmp	r7, #11
 8005160:	d854      	bhi.n	800520c <USBD_DFU_Setup+0x134>
 8005162:	e8df f007 	tbb	[pc, r7]
 8005166:	5c06      	.short	0x5c06
 8005168:	53535353 	.word	0x53535353
 800516c:	53535317 	.word	0x53535317
 8005170:	3f2f      	.short	0x3f2f
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005172:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b03      	cmp	r3, #3
 800517a:	d004      	beq.n	8005186 <USBD_DFU_Setup+0xae>
            USBD_CtlError(pdev, req);
 800517c:	4631      	mov	r1, r6
 800517e:	f7ff f8f1 	bl	8004364 <USBD_CtlError>
            ret = USBD_FAIL;
 8005182:	2403      	movs	r4, #3
 8005184:	e04b      	b.n	800521e <USBD_DFU_Setup+0x146>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005186:	2202      	movs	r2, #2
 8005188:	f10d 0106 	add.w	r1, sp, #6
 800518c:	f000 f8c5 	bl	800531a <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005190:	463c      	mov	r4, r7
 8005192:	e044      	b.n	800521e <USBD_DFU_Setup+0x146>
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8005194:	8873      	ldrh	r3, [r6, #2]
 8005196:	0a1b      	lsrs	r3, r3, #8
 8005198:	2b21      	cmp	r3, #33	@ 0x21
 800519a:	d140      	bne.n	800521e <USBD_DFU_Setup+0x146>
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800519c:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 80051a0:	f7ff fd14 	bl	8004bcc <USBD_DFU_GetDfuFuncDesc>
            if (pbuf != NULL)
 80051a4:	4601      	mov	r1, r0
 80051a6:	b138      	cbz	r0, 80051b8 <USBD_DFU_Setup+0xe0>
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80051a8:	88f2      	ldrh	r2, [r6, #6]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 80051aa:	2a09      	cmp	r2, #9
 80051ac:	bf28      	it	cs
 80051ae:	2209      	movcs	r2, #9
 80051b0:	4628      	mov	r0, r5
 80051b2:	f000 f8b2 	bl	800531a <USBD_CtlSendData>
 80051b6:	e032      	b.n	800521e <USBD_DFU_Setup+0x146>
              USBD_CtlError(pdev, req);
 80051b8:	4631      	mov	r1, r6
 80051ba:	4628      	mov	r0, r5
 80051bc:	f7ff f8d2 	bl	8004364 <USBD_CtlError>
              ret = USBD_FAIL;
 80051c0:	2403      	movs	r4, #3
 80051c2:	e02c      	b.n	800521e <USBD_DFU_Setup+0x146>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051c4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d004      	beq.n	80051d8 <USBD_DFU_Setup+0x100>
            USBD_CtlError(pdev, req);
 80051ce:	4631      	mov	r1, r6
 80051d0:	f7ff f8c8 	bl	8004364 <USBD_CtlError>
            ret = USBD_FAIL;
 80051d4:	2403      	movs	r4, #3
 80051d6:	e022      	b.n	800521e <USBD_DFU_Setup+0x146>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 80051d8:	2201      	movs	r2, #1
 80051da:	f501 6182 	add.w	r1, r1, #1040	@ 0x410
 80051de:	f000 f89c 	bl	800531a <USBD_CtlSendData>
 80051e2:	e01c      	b.n	800521e <USBD_DFU_Setup+0x146>
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80051e4:	78b4      	ldrb	r4, [r6, #2]
 80051e6:	b964      	cbnz	r4, 8005202 <USBD_DFU_Setup+0x12a>
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051e8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d102      	bne.n	80051f8 <USBD_DFU_Setup+0x120>
              hdfu->alt_setting = (uint8_t)(req->wValue);
 80051f2:	f8c1 4410 	str.w	r4, [r1, #1040]	@ 0x410
 80051f6:	e012      	b.n	800521e <USBD_DFU_Setup+0x146>
              USBD_CtlError(pdev, req);
 80051f8:	4631      	mov	r1, r6
 80051fa:	f7ff f8b3 	bl	8004364 <USBD_CtlError>
              ret = USBD_FAIL;
 80051fe:	2403      	movs	r4, #3
 8005200:	e00d      	b.n	800521e <USBD_DFU_Setup+0x146>
            USBD_CtlError(pdev, req);
 8005202:	4631      	mov	r1, r6
 8005204:	f7ff f8ae 	bl	8004364 <USBD_CtlError>
            ret = USBD_FAIL;
 8005208:	2403      	movs	r4, #3
 800520a:	e008      	b.n	800521e <USBD_DFU_Setup+0x146>
          USBD_CtlError(pdev, req);
 800520c:	4631      	mov	r1, r6
 800520e:	f7ff f8a9 	bl	8004364 <USBD_CtlError>
          ret = USBD_FAIL;
 8005212:	2403      	movs	r4, #3
          break;
 8005214:	e003      	b.n	800521e <USBD_DFU_Setup+0x146>
      USBD_CtlError(pdev, req);
 8005216:	4631      	mov	r1, r6
 8005218:	f7ff f8a4 	bl	8004364 <USBD_CtlError>
      ret = USBD_FAIL;
 800521c:	2403      	movs	r4, #3
}
 800521e:	4620      	mov	r0, r4
 8005220:	b003      	add	sp, #12
 8005222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8005224:	2403      	movs	r4, #3
 8005226:	e7fa      	b.n	800521e <USBD_DFU_Setup+0x146>

08005228 <USBD_DFU_DeInit>:
{
 8005228:	b538      	push	{r3, r4, r5, lr}
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800522a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800522e:	33b0      	adds	r3, #176	@ 0xb0
 8005230:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005234:	b323      	cbz	r3, 8005280 <USBD_DFU_DeInit+0x58>
 8005236:	4604      	mov	r4, r0
  hdfu->wblock_num = 0U;
 8005238:	2500      	movs	r5, #0
 800523a:	f8c3 5400 	str.w	r5, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 800523e:	f8c3 5404 	str.w	r5, [r3, #1028]	@ 0x404
  hdfu->dev_state = DFU_STATE_IDLE;
 8005242:	2202      	movs	r2, #2
 8005244:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005248:	f883 5414 	strb.w	r5, [r3, #1044]	@ 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800524c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005250:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005254:	33b0      	adds	r3, #176	@ 0xb0
 8005256:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005260:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8005264:	33b0      	adds	r3, #176	@ 0xb0
 8005266:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800526a:	f000 faf7 	bl	800585c <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 800526e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8005272:	33b0      	adds	r3, #176	@ 0xb0
 8005274:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = NULL;
 8005278:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  return (uint8_t)USBD_OK;
 800527c:	4628      	mov	r0, r5
}
 800527e:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_EMEM;
 8005280:	2002      	movs	r0, #2
 8005282:	e7fc      	b.n	800527e <USBD_DFU_DeInit+0x56>

08005284 <USBD_DFU_Init>:
{
 8005284:	b510      	push	{r4, lr}
 8005286:	4604      	mov	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8005288:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 800528c:	f000 fae2 	bl	8005854 <USBD_static_malloc>
  if (hdfu == NULL)
 8005290:	b358      	cbz	r0, 80052ea <USBD_DFU_Init+0x66>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 8005292:	f8d4 22d4 	ldr.w	r2, [r4, #724]	@ 0x2d4
 8005296:	32b0      	adds	r2, #176	@ 0xb0
 8005298:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800529c:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  hdfu->alt_setting = 0U;
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8c0 2410 	str.w	r2, [r0, #1040]	@ 0x410
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80052a6:	4916      	ldr	r1, [pc, #88]	@ (8005300 <USBD_DFU_Init+0x7c>)
 80052a8:	f8c0 1408 	str.w	r1, [r0, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 80052ac:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
  hdfu->wlength = 0U;
 80052b0:	f8c0 2404 	str.w	r2, [r0, #1028]	@ 0x404
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80052b4:	f880 241d 	strb.w	r2, [r0, #1053]	@ 0x41d
  hdfu->dev_state = DFU_STATE_IDLE;
 80052b8:	2102      	movs	r1, #2
 80052ba:	f880 141c 	strb.w	r1, [r0, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80052be:	f880 2414 	strb.w	r2, [r0, #1044]	@ 0x414
  hdfu->dev_status[1] = 0U;
 80052c2:	f880 2415 	strb.w	r2, [r0, #1045]	@ 0x415
  hdfu->dev_status[2] = 0U;
 80052c6:	f880 2416 	strb.w	r2, [r0, #1046]	@ 0x416
  hdfu->dev_status[3] = 0U;
 80052ca:	f880 2417 	strb.w	r2, [r0, #1047]	@ 0x417
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80052ce:	f880 1418 	strb.w	r1, [r0, #1048]	@ 0x418
  hdfu->dev_status[5] = 0U;
 80052d2:	f880 2419 	strb.w	r2, [r0, #1049]	@ 0x419
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 80052d6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80052da:	33b0      	adds	r3, #176	@ 0xb0
 80052dc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80052e0:	6863      	ldr	r3, [r4, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	4798      	blx	r3
 80052e6:	b940      	cbnz	r0, 80052fa <USBD_DFU_Init+0x76>
}
 80052e8:	bd10      	pop	{r4, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80052ea:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80052ee:	33b0      	adds	r3, #176	@ 0xb0
 80052f0:	2200      	movs	r2, #0
 80052f2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 80052f6:	2002      	movs	r0, #2
 80052f8:	e7f6      	b.n	80052e8 <USBD_DFU_Init+0x64>
    return (uint8_t)USBD_FAIL;
 80052fa:	2003      	movs	r0, #3
 80052fc:	e7f4      	b.n	80052e8 <USBD_DFU_Init+0x64>
 80052fe:	bf00      	nop
 8005300:	08040000 	.word	0x08040000

08005304 <USBD_DFU_RegisterMedia>:
  if (fops == NULL)
 8005304:	b139      	cbz	r1, 8005316 <USBD_DFU_RegisterMedia+0x12>
  pdev->pUserData[pdev->classId] = fops;
 8005306:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800530a:	33b0      	adds	r3, #176	@ 0xb0
 800530c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005310:	6041      	str	r1, [r0, #4]
  return (uint8_t)USBD_OK;
 8005312:	2000      	movs	r0, #0
 8005314:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005316:	2003      	movs	r0, #3
}
 8005318:	4770      	bx	lr

0800531a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800531a:	b508      	push	{r3, lr}
 800531c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800531e:	2202      	movs	r2, #2
 8005320:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005324:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005326:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005328:	460a      	mov	r2, r1
 800532a:	2100      	movs	r1, #0
 800532c:	f000 fad4 	bl	80058d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005330:	2000      	movs	r0, #0
 8005332:	bd08      	pop	{r3, pc}

08005334 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005334:	b508      	push	{r3, lr}
 8005336:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005338:	460a      	mov	r2, r1
 800533a:	2100      	movs	r1, #0
 800533c:	f000 facc 	bl	80058d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005340:	2000      	movs	r0, #0
 8005342:	bd08      	pop	{r3, pc}

08005344 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005344:	b508      	push	{r3, lr}
 8005346:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005348:	2203      	movs	r2, #3
 800534a:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800534e:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005352:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005356:	460a      	mov	r2, r1
 8005358:	2100      	movs	r1, #0
 800535a:	f000 fac5 	bl	80058e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800535e:	2000      	movs	r0, #0
 8005360:	bd08      	pop	{r3, pc}

08005362 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005362:	b508      	push	{r3, lr}
 8005364:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005366:	460a      	mov	r2, r1
 8005368:	2100      	movs	r1, #0
 800536a:	f000 fabd 	bl	80058e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800536e:	2000      	movs	r0, #0
 8005370:	bd08      	pop	{r3, pc}

08005372 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005372:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005374:	2204      	movs	r2, #4
 8005376:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800537a:	2300      	movs	r3, #0
 800537c:	461a      	mov	r2, r3
 800537e:	4619      	mov	r1, r3
 8005380:	f000 faaa 	bl	80058d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005384:	2000      	movs	r0, #0
 8005386:	bd08      	pop	{r3, pc}

08005388 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005388:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800538a:	2205      	movs	r2, #5
 800538c:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005390:	2300      	movs	r3, #0
 8005392:	461a      	mov	r2, r3
 8005394:	4619      	mov	r1, r3
 8005396:	f000 faa7 	bl	80058e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800539a:	2000      	movs	r0, #0
 800539c:	bd08      	pop	{r3, pc}
	...

080053a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80053a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80053a2:	2201      	movs	r2, #1
 80053a4:	4910      	ldr	r1, [pc, #64]	@ (80053e8 <MX_USB_DEVICE_Init+0x48>)
 80053a6:	4811      	ldr	r0, [pc, #68]	@ (80053ec <MX_USB_DEVICE_Init+0x4c>)
 80053a8:	f7fe fdbe 	bl	8003f28 <USBD_Init>
 80053ac:	b980      	cbnz	r0, 80053d0 <MX_USB_DEVICE_Init+0x30>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_DFU) != USBD_OK)
 80053ae:	4910      	ldr	r1, [pc, #64]	@ (80053f0 <MX_USB_DEVICE_Init+0x50>)
 80053b0:	480e      	ldr	r0, [pc, #56]	@ (80053ec <MX_USB_DEVICE_Init+0x4c>)
 80053b2:	f7fe fdd0 	bl	8003f56 <USBD_RegisterClass>
 80053b6:	b970      	cbnz	r0, 80053d6 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceHS, &USBD_DFU_fops_HS) != USBD_OK)
 80053b8:	490e      	ldr	r1, [pc, #56]	@ (80053f4 <MX_USB_DEVICE_Init+0x54>)
 80053ba:	480c      	ldr	r0, [pc, #48]	@ (80053ec <MX_USB_DEVICE_Init+0x4c>)
 80053bc:	f7ff ffa2 	bl	8005304 <USBD_DFU_RegisterMedia>
 80053c0:	b960      	cbnz	r0, 80053dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80053c2:	480a      	ldr	r0, [pc, #40]	@ (80053ec <MX_USB_DEVICE_Init+0x4c>)
 80053c4:	f7fe fde7 	bl	8003f96 <USBD_Start>
 80053c8:	b958      	cbnz	r0, 80053e2 <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80053ca:	f7fc fbc9 	bl	8001b60 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80053ce:	bd08      	pop	{r3, pc}
    Error_Handler();
 80053d0:	f7fb f90e 	bl	80005f0 <Error_Handler>
 80053d4:	e7eb      	b.n	80053ae <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 80053d6:	f7fb f90b 	bl	80005f0 <Error_Handler>
 80053da:	e7ed      	b.n	80053b8 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80053dc:	f7fb f908 	bl	80005f0 <Error_Handler>
 80053e0:	e7ef      	b.n	80053c2 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80053e2:	f7fb f905 	bl	80005f0 <Error_Handler>
 80053e6:	e7f0      	b.n	80053ca <MX_USB_DEVICE_Init+0x2a>
 80053e8:	240000b0 	.word	0x240000b0
 80053ec:	2400027c 	.word	0x2400027c
 80053f0:	24000040 	.word	0x24000040
 80053f4:	240000d0 	.word	0x240000d0

080053f8 <USBD_HS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80053f8:	2312      	movs	r3, #18
 80053fa:	800b      	strh	r3, [r1, #0]
  return USBD_HS_DeviceDesc;
}
 80053fc:	4800      	ldr	r0, [pc, #0]	@ (8005400 <USBD_HS_DeviceDescriptor+0x8>)
 80053fe:	4770      	bx	lr
 8005400:	2400009c 	.word	0x2400009c

08005404 <USBD_HS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005404:	2304      	movs	r3, #4
 8005406:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005408:	4800      	ldr	r0, [pc, #0]	@ (800540c <USBD_HS_LangIDStrDescriptor+0x8>)
 800540a:	4770      	bx	lr
 800540c:	24000098 	.word	0x24000098

08005410 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8005410:	2300      	movs	r3, #0
 8005412:	4293      	cmp	r3, r2
 8005414:	d21e      	bcs.n	8005454 <IntToUnicode+0x44>
{
 8005416:	b500      	push	{lr}
 8005418:	e010      	b.n	800543c <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800541a:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 800541e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8005422:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8005424:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005428:	f10c 0c01 	add.w	ip, ip, #1
 800542c:	f04f 0e00 	mov.w	lr, #0
 8005430:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8005434:	3301      	adds	r3, #1
 8005436:	b2db      	uxtb	r3, r3
 8005438:	4293      	cmp	r3, r2
 800543a:	d209      	bcs.n	8005450 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800543c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8005440:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8005444:	d2e9      	bcs.n	800541a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8005446:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 800544a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800544e:	e7e8      	b.n	8005422 <IntToUnicode+0x12>
  }
}
 8005450:	f85d fb04 	ldr.w	pc, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <Get_SerialNum>:
{
 8005458:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800545a:	4b0b      	ldr	r3, [pc, #44]	@ (8005488 <Get_SerialNum+0x30>)
 800545c:	f8d3 0800 	ldr.w	r0, [r3, #2048]	@ 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005460:	f8d3 4804 	ldr.w	r4, [r3, #2052]	@ 0x804
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005464:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
  if (deviceserial0 != 0)
 8005468:	18c0      	adds	r0, r0, r3
 800546a:	d100      	bne.n	800546e <Get_SerialNum+0x16>
}
 800546c:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800546e:	4d07      	ldr	r5, [pc, #28]	@ (800548c <Get_SerialNum+0x34>)
 8005470:	2208      	movs	r2, #8
 8005472:	4629      	mov	r1, r5
 8005474:	f7ff ffcc 	bl	8005410 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005478:	2204      	movs	r2, #4
 800547a:	f105 0110 	add.w	r1, r5, #16
 800547e:	4620      	mov	r0, r4
 8005480:	f7ff ffc6 	bl	8005410 <IntToUnicode>
}
 8005484:	e7f2      	b.n	800546c <Get_SerialNum+0x14>
 8005486:	bf00      	nop
 8005488:	1ff1e000 	.word	0x1ff1e000
 800548c:	2400007e 	.word	0x2400007e

08005490 <USBD_HS_SerialStrDescriptor>:
{
 8005490:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005492:	231a      	movs	r3, #26
 8005494:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8005496:	f7ff ffdf 	bl	8005458 <Get_SerialNum>
}
 800549a:	4801      	ldr	r0, [pc, #4]	@ (80054a0 <USBD_HS_SerialStrDescriptor+0x10>)
 800549c:	bd08      	pop	{r3, pc}
 800549e:	bf00      	nop
 80054a0:	2400007c 	.word	0x2400007c

080054a4 <USBD_HS_ProductStrDescriptor>:
{
 80054a4:	b508      	push	{r3, lr}
 80054a6:	460a      	mov	r2, r1
  if(speed == 0)
 80054a8:	b928      	cbnz	r0, 80054b6 <USBD_HS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80054aa:	4905      	ldr	r1, [pc, #20]	@ (80054c0 <USBD_HS_ProductStrDescriptor+0x1c>)
 80054ac:	4805      	ldr	r0, [pc, #20]	@ (80054c4 <USBD_HS_ProductStrDescriptor+0x20>)
 80054ae:	f7ff fadf 	bl	8004a70 <USBD_GetString>
}
 80054b2:	4803      	ldr	r0, [pc, #12]	@ (80054c0 <USBD_HS_ProductStrDescriptor+0x1c>)
 80054b4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80054b6:	4902      	ldr	r1, [pc, #8]	@ (80054c0 <USBD_HS_ProductStrDescriptor+0x1c>)
 80054b8:	4802      	ldr	r0, [pc, #8]	@ (80054c4 <USBD_HS_ProductStrDescriptor+0x20>)
 80054ba:	f7ff fad9 	bl	8004a70 <USBD_GetString>
 80054be:	e7f8      	b.n	80054b2 <USBD_HS_ProductStrDescriptor+0xe>
 80054c0:	24000558 	.word	0x24000558
 80054c4:	08006814 	.word	0x08006814

080054c8 <USBD_HS_ManufacturerStrDescriptor>:
{
 80054c8:	b510      	push	{r4, lr}
 80054ca:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80054cc:	4c03      	ldr	r4, [pc, #12]	@ (80054dc <USBD_HS_ManufacturerStrDescriptor+0x14>)
 80054ce:	4621      	mov	r1, r4
 80054d0:	4803      	ldr	r0, [pc, #12]	@ (80054e0 <USBD_HS_ManufacturerStrDescriptor+0x18>)
 80054d2:	f7ff facd 	bl	8004a70 <USBD_GetString>
}
 80054d6:	4620      	mov	r0, r4
 80054d8:	bd10      	pop	{r4, pc}
 80054da:	bf00      	nop
 80054dc:	24000558 	.word	0x24000558
 80054e0:	08006834 	.word	0x08006834

080054e4 <USBD_HS_ConfigStrDescriptor>:
{
 80054e4:	b508      	push	{r3, lr}
 80054e6:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80054e8:	b928      	cbnz	r0, 80054f6 <USBD_HS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80054ea:	4905      	ldr	r1, [pc, #20]	@ (8005500 <USBD_HS_ConfigStrDescriptor+0x1c>)
 80054ec:	4805      	ldr	r0, [pc, #20]	@ (8005504 <USBD_HS_ConfigStrDescriptor+0x20>)
 80054ee:	f7ff fabf 	bl	8004a70 <USBD_GetString>
}
 80054f2:	4803      	ldr	r0, [pc, #12]	@ (8005500 <USBD_HS_ConfigStrDescriptor+0x1c>)
 80054f4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80054f6:	4902      	ldr	r1, [pc, #8]	@ (8005500 <USBD_HS_ConfigStrDescriptor+0x1c>)
 80054f8:	4802      	ldr	r0, [pc, #8]	@ (8005504 <USBD_HS_ConfigStrDescriptor+0x20>)
 80054fa:	f7ff fab9 	bl	8004a70 <USBD_GetString>
 80054fe:	e7f8      	b.n	80054f2 <USBD_HS_ConfigStrDescriptor+0xe>
 8005500:	24000558 	.word	0x24000558
 8005504:	08006848 	.word	0x08006848

08005508 <USBD_HS_InterfaceStrDescriptor>:
{
 8005508:	b508      	push	{r3, lr}
 800550a:	460a      	mov	r2, r1
  if(speed == 0)
 800550c:	b928      	cbnz	r0, 800551a <USBD_HS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800550e:	4905      	ldr	r1, [pc, #20]	@ (8005524 <USBD_HS_InterfaceStrDescriptor+0x1c>)
 8005510:	4805      	ldr	r0, [pc, #20]	@ (8005528 <USBD_HS_InterfaceStrDescriptor+0x20>)
 8005512:	f7ff faad 	bl	8004a70 <USBD_GetString>
}
 8005516:	4803      	ldr	r0, [pc, #12]	@ (8005524 <USBD_HS_InterfaceStrDescriptor+0x1c>)
 8005518:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800551a:	4902      	ldr	r1, [pc, #8]	@ (8005524 <USBD_HS_InterfaceStrDescriptor+0x1c>)
 800551c:	4802      	ldr	r0, [pc, #8]	@ (8005528 <USBD_HS_InterfaceStrDescriptor+0x20>)
 800551e:	f7ff faa7 	bl	8004a70 <USBD_GetString>
 8005522:	e7f8      	b.n	8005516 <USBD_HS_InterfaceStrDescriptor+0xe>
 8005524:	24000558 	.word	0x24000558
 8005528:	08006854 	.word	0x08006854

0800552c <MEM_If_Init_HS>:
uint16_t MEM_If_Init_HS(void)
{
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800552c:	2000      	movs	r0, #0
 800552e:	4770      	bx	lr

08005530 <MEM_If_DeInit_HS>:
uint16_t MEM_If_DeInit_HS(void)
{
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
  /* USER CODE END 7 */
}
 8005530:	2000      	movs	r0, #0
 8005532:	4770      	bx	lr

08005534 <MEM_If_Erase_HS>:
  /* USER CODE BEGIN 8 */
  UNUSED(Add);

  return (USBD_OK);
  /* USER CODE END 8 */
}
 8005534:	2000      	movs	r0, #0
 8005536:	4770      	bx	lr

08005538 <MEM_If_Write_HS>:
  UNUSED(dest);
  UNUSED(Len);

  return (USBD_OK);
  /* USER CODE END 9 */
}
 8005538:	2000      	movs	r0, #0
 800553a:	4770      	bx	lr

0800553c <MEM_If_Read_HS>:
  UNUSED(dest);
  UNUSED(Len);

  return (uint8_t*)(USBD_OK);
  /* USER CODE END 10 */
}
 800553c:	2000      	movs	r0, #0
 800553e:	4770      	bx	lr

08005540 <MEM_If_GetStatus_HS>:

    break;
  }
  return  (USBD_OK);
  /* USER CODE END 11 */
}
 8005540:	2000      	movs	r0, #0
 8005542:	4770      	bx	lr

08005544 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005546:	b0c1      	sub	sp, #260	@ 0x104
 8005548:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800554a:	2100      	movs	r1, #0
 800554c:	913b      	str	r1, [sp, #236]	@ 0xec
 800554e:	913c      	str	r1, [sp, #240]	@ 0xf0
 8005550:	913d      	str	r1, [sp, #244]	@ 0xf4
 8005552:	913e      	str	r1, [sp, #248]	@ 0xf8
 8005554:	913f      	str	r1, [sp, #252]	@ 0xfc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005556:	22c8      	movs	r2, #200	@ 0xc8
 8005558:	a808      	add	r0, sp, #32
 800555a:	f000 fc27 	bl	8005dac <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800555e:	6822      	ldr	r2, [r4, #0]
 8005560:	4b56      	ldr	r3, [pc, #344]	@ (80056bc <HAL_PCD_MspInit+0x178>)
 8005562:	429a      	cmp	r2, r3
 8005564:	d001      	beq.n	800556a <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8005566:	b041      	add	sp, #260	@ 0x104
 8005568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800556a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800556e:	2300      	movs	r3, #0
 8005570:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8005574:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005578:	932b      	str	r3, [sp, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800557a:	a808      	add	r0, sp, #32
 800557c:	f7fd fa12 	bl	80029a4 <HAL_RCCEx_PeriphCLKConfig>
 8005580:	2800      	cmp	r0, #0
 8005582:	f040 8097 	bne.w	80056b4 <HAL_PCD_MspInit+0x170>
    HAL_PWREx_EnableUSBVoltageDetector();
 8005586:	f7fc faeb 	bl	8001b60 <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800558a:	4c4d      	ldr	r4, [pc, #308]	@ (80056c0 <HAL_PCD_MspInit+0x17c>)
 800558c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8005590:	f043 0302 	orr.w	r3, r3, #2
 8005594:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8005598:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80055a4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80055a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ac:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80055b0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80055b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b8:	9302      	str	r3, [sp, #8]
 80055ba:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055bc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80055c0:	f043 0304 	orr.w	r3, r3, #4
 80055c4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80055c8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	9303      	str	r3, [sp, #12]
 80055d2:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80055d4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80055d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055dc:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80055e0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80055e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e8:	9304      	str	r3, [sp, #16]
 80055ea:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80055f0:	f043 0301 	orr.w	r3, r3, #1
 80055f4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80055f8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	9305      	str	r3, [sp, #20]
 8005602:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8005604:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8005608:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560a:	2502      	movs	r5, #2
 800560c:	953c      	str	r5, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560e:	2600      	movs	r6, #0
 8005610:	963d      	str	r6, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005612:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8005614:	270a      	movs	r7, #10
 8005616:	973f      	str	r7, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005618:	a93b      	add	r1, sp, #236	@ 0xec
 800561a:	482a      	ldr	r0, [pc, #168]	@ (80056c4 <HAL_PCD_MspInit+0x180>)
 800561c:	f7fb fac2 	bl	8000ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8005620:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005624:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005626:	953c      	str	r5, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005628:	963d      	str	r6, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800562a:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800562c:	973f      	str	r7, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 800562e:	a93b      	add	r1, sp, #236	@ 0xec
 8005630:	4825      	ldr	r0, [pc, #148]	@ (80056c8 <HAL_PCD_MspInit+0x184>)
 8005632:	f7fb fab7 	bl	8000ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8005636:	2301      	movs	r3, #1
 8005638:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800563a:	953c      	str	r5, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800563c:	963d      	str	r6, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800563e:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8005640:	973f      	str	r7, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8005642:	a93b      	add	r1, sp, #236	@ 0xec
 8005644:	4821      	ldr	r0, [pc, #132]	@ (80056cc <HAL_PCD_MspInit+0x188>)
 8005646:	f7fb faad 	bl	8000ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800564a:	2310      	movs	r3, #16
 800564c:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800564e:	953c      	str	r5, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005650:	963d      	str	r6, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005652:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8005654:	973f      	str	r7, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8005656:	a93b      	add	r1, sp, #236	@ 0xec
 8005658:	481d      	ldr	r0, [pc, #116]	@ (80056d0 <HAL_PCD_MspInit+0x18c>)
 800565a:	f7fb faa3 	bl	8000ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 800565e:	2328      	movs	r3, #40	@ 0x28
 8005660:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005662:	953c      	str	r5, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005664:	963d      	str	r6, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005666:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8005668:	973f      	str	r7, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800566a:	a93b      	add	r1, sp, #236	@ 0xec
 800566c:	4819      	ldr	r0, [pc, #100]	@ (80056d4 <HAL_PCD_MspInit+0x190>)
 800566e:	f7fb fa99 	bl	8000ba4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8005672:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8005676:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800567a:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 800567e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8005682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005686:	9306      	str	r3, [sp, #24]
 8005688:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800568a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 800568e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005692:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 8005696:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 800569a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800569e:	9307      	str	r3, [sp, #28]
 80056a0:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80056a2:	4632      	mov	r2, r6
 80056a4:	4631      	mov	r1, r6
 80056a6:	204d      	movs	r0, #77	@ 0x4d
 80056a8:	f7fb fa54 	bl	8000b54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80056ac:	204d      	movs	r0, #77	@ 0x4d
 80056ae:	f7fb fa61 	bl	8000b74 <HAL_NVIC_EnableIRQ>
}
 80056b2:	e758      	b.n	8005566 <HAL_PCD_MspInit+0x22>
      Error_Handler();
 80056b4:	f7fa ff9c 	bl	80005f0 <Error_Handler>
 80056b8:	e765      	b.n	8005586 <HAL_PCD_MspInit+0x42>
 80056ba:	bf00      	nop
 80056bc:	40040000 	.word	0x40040000
 80056c0:	58024400 	.word	0x58024400
 80056c4:	58020400 	.word	0x58020400
 80056c8:	58022000 	.word	0x58022000
 80056cc:	58020800 	.word	0x58020800
 80056d0:	58021c00 	.word	0x58021c00
 80056d4:	58020000 	.word	0x58020000

080056d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80056d8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80056da:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 80056de:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80056e2:	f7fe fc7b 	bl	8003fdc <USBD_LL_SetupStage>
}
 80056e6:	bd08      	pop	{r3, pc}

080056e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80056e8:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80056ea:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80056ee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80056f2:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 80056f6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80056fa:	f7fe fd41 	bl	8004180 <USBD_LL_DataOutStage>
}
 80056fe:	bd08      	pop	{r3, pc}

08005700 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005700:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005702:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8005706:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800570a:	6a1a      	ldr	r2, [r3, #32]
 800570c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8005710:	f7fe fd98 	bl	8004244 <USBD_LL_DataInStage>
}
 8005714:	bd08      	pop	{r3, pc}

08005716 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005716:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005718:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800571c:	f7fe fcdb 	bl	80040d6 <USBD_LL_SOF>
}
 8005720:	bd08      	pop	{r3, pc}

08005722 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005722:	b510      	push	{r4, lr}
 8005724:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005726:	79c1      	ldrb	r1, [r0, #7]
 8005728:	b111      	cbz	r1, 8005730 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800572a:	2902      	cmp	r1, #2
 800572c:	d109      	bne.n	8005742 <HAL_PCD_ResetCallback+0x20>
  {
    speed = USBD_SPEED_FULL;
 800572e:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005730:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8005734:	f7fe fcb0 	bl	8004098 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005738:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800573c:	f7fe fc7a 	bl	8004034 <USBD_LL_Reset>
}
 8005740:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005742:	f7fa ff55 	bl	80005f0 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005746:	2101      	movs	r1, #1
 8005748:	e7f2      	b.n	8005730 <HAL_PCD_ResetCallback+0xe>
	...

0800574c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800574c:	b510      	push	{r4, lr}
 800574e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005750:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8005754:	f7fe fca3 	bl	800409e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005758:	6822      	ldr	r2, [r4, #0]
 800575a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005766:	7ae3      	ldrb	r3, [r4, #11]
 8005768:	b123      	cbz	r3, 8005774 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800576a:	4a03      	ldr	r2, [pc, #12]	@ (8005778 <HAL_PCD_SuspendCallback+0x2c>)
 800576c:	6913      	ldr	r3, [r2, #16]
 800576e:	f043 0306 	orr.w	r3, r3, #6
 8005772:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005774:	bd10      	pop	{r4, pc}
 8005776:	bf00      	nop
 8005778:	e000ed00 	.word	0xe000ed00

0800577c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800577c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800577e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8005782:	f7fe fc9b 	bl	80040bc <USBD_LL_Resume>
}
 8005786:	bd08      	pop	{r3, pc}

08005788 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005788:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800578a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800578e:	f7fe fcca 	bl	8004126 <USBD_LL_IsoOUTIncomplete>
}
 8005792:	bd08      	pop	{r3, pc}

08005794 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005794:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005796:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800579a:	f7fe fcad 	bl	80040f8 <USBD_LL_IsoINIncomplete>
}
 800579e:	bd08      	pop	{r3, pc}

080057a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057a0:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80057a2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80057a6:	f7fe fcd5 	bl	8004154 <USBD_LL_DevConnected>
}
 80057aa:	bd08      	pop	{r3, pc}

080057ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057ac:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80057ae:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80057b2:	f7fe fcd1 	bl	8004158 <USBD_LL_DevDisconnected>
}
 80057b6:	bd08      	pop	{r3, pc}

080057b8 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80057b8:	7803      	ldrb	r3, [r0, #0]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d001      	beq.n	80057c2 <USBD_LL_Init+0xa>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
}
 80057be:	2000      	movs	r0, #0
 80057c0:	4770      	bx	lr
{
 80057c2:	b510      	push	{r4, lr}
  hpcd_USB_OTG_HS.pData = pdev;
 80057c4:	4b16      	ldr	r3, [pc, #88]	@ (8005820 <USBD_LL_Init+0x68>)
 80057c6:	f8c3 04e0 	str.w	r0, [r3, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 80057ca:	f8c0 32c8 	str.w	r3, [r0, #712]	@ 0x2c8
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80057ce:	4a15      	ldr	r2, [pc, #84]	@ (8005824 <USBD_LL_Init+0x6c>)
 80057d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80057d2:	2209      	movs	r2, #9
 80057d4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80057d6:	2200      	movs	r2, #0
 80057d8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80057da:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80057dc:	2101      	movs	r1, #1
 80057de:	7259      	strb	r1, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80057e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80057e2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80057e4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80057e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80057e8:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80057ea:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fb fb7f 	bl	8000ef0 <HAL_PCD_Init>
 80057f2:	b990      	cbnz	r0, 800581a <USBD_LL_Init+0x62>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80057f4:	4c0a      	ldr	r4, [pc, #40]	@ (8005820 <USBD_LL_Init+0x68>)
 80057f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80057fa:	4620      	mov	r0, r4
 80057fc:	f7fc f94c 	bl	8001a98 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8005800:	2280      	movs	r2, #128	@ 0x80
 8005802:	2100      	movs	r1, #0
 8005804:	4620      	mov	r0, r4
 8005806:	f7fc f921 	bl	8001a4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800580a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800580e:	2101      	movs	r1, #1
 8005810:	4620      	mov	r0, r4
 8005812:	f7fc f91b 	bl	8001a4c <HAL_PCDEx_SetTxFiFo>
}
 8005816:	2000      	movs	r0, #0
 8005818:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800581a:	f7fa fee9 	bl	80005f0 <Error_Handler>
 800581e:	e7e9      	b.n	80057f4 <USBD_LL_Init+0x3c>
 8005820:	24000b7c 	.word	0x24000b7c
 8005824:	40040000 	.word	0x40040000

08005828 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005828:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 800582c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005830:	d108      	bne.n	8005844 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005832:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8005836:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800583a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800583e:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 8005842:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005844:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8005848:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800584c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005850:	7d98      	ldrb	r0, [r3, #22]
 8005852:	4770      	bx	lr

08005854 <USBD_static_malloc>:
void *USBD_static_malloc(uint32_t size)
{
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8005854:	4800      	ldr	r0, [pc, #0]	@ (8005858 <USBD_static_malloc+0x4>)
 8005856:	4770      	bx	lr
 8005858:	24000758 	.word	0x24000758

0800585c <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{
  UNUSED(p);
}
 800585c:	4770      	bx	lr

0800585e <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800585e:	2803      	cmp	r0, #3
 8005860:	d805      	bhi.n	800586e <USBD_Get_USB_Status+0x10>
 8005862:	e8df f000 	tbb	[pc, r0]
 8005866:	0405      	.short	0x0405
 8005868:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800586a:	2001      	movs	r0, #1
    break;
 800586c:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800586e:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005870:	4770      	bx	lr

08005872 <USBD_LL_Start>:
{
 8005872:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8005874:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005878:	f7fb fbbb 	bl	8000ff2 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800587c:	f7ff ffef 	bl	800585e <USBD_Get_USB_Status>
}
 8005880:	bd08      	pop	{r3, pc}

08005882 <USBD_LL_Stop>:
{
 8005882:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8005884:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005888:	f7fb fbd5 	bl	8001036 <HAL_PCD_Stop>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800588c:	f7ff ffe7 	bl	800585e <USBD_Get_USB_Status>
}
 8005890:	bd08      	pop	{r3, pc}

08005892 <USBD_LL_OpenEP>:
{
 8005892:	b508      	push	{r3, lr}
 8005894:	4694      	mov	ip, r2
 8005896:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005898:	4663      	mov	r3, ip
 800589a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800589e:	f7fb fcae 	bl	80011fe <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80058a2:	f7ff ffdc 	bl	800585e <USBD_Get_USB_Status>
}
 80058a6:	bd08      	pop	{r3, pc}

080058a8 <USBD_LL_StallEP>:
{
 80058a8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80058aa:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80058ae:	f7fb fd36 	bl	800131e <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80058b2:	f7ff ffd4 	bl	800585e <USBD_Get_USB_Status>
}
 80058b6:	bd08      	pop	{r3, pc}

080058b8 <USBD_LL_ClearStallEP>:
{
 80058b8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80058ba:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80058be:	f7fb fd71 	bl	80013a4 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80058c2:	f7ff ffcc 	bl	800585e <USBD_Get_USB_Status>
}
 80058c6:	bd08      	pop	{r3, pc}

080058c8 <USBD_LL_SetUSBAddress>:
{
 80058c8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80058ca:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80058ce:	f7fb fc83 	bl	80011d8 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80058d2:	f7ff ffc4 	bl	800585e <USBD_Get_USB_Status>
}
 80058d6:	bd08      	pop	{r3, pc}

080058d8 <USBD_LL_Transmit>:
{
 80058d8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80058da:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80058de:	f7fb fcf9 	bl	80012d4 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80058e2:	f7ff ffbc 	bl	800585e <USBD_Get_USB_Status>
}
 80058e6:	bd08      	pop	{r3, pc}

080058e8 <USBD_LL_PrepareReceive>:
{
 80058e8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80058ea:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80058ee:	f7fb fccc 	bl	800128a <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80058f2:	f7ff ffb4 	bl	800585e <USBD_Get_USB_Status>
}
 80058f6:	bd08      	pop	{r3, pc}

080058f8 <sbrk_aligned>:
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	4e0f      	ldr	r6, [pc, #60]	@ (8005938 <sbrk_aligned+0x40>)
 80058fc:	460c      	mov	r4, r1
 80058fe:	6831      	ldr	r1, [r6, #0]
 8005900:	4605      	mov	r5, r0
 8005902:	b911      	cbnz	r1, 800590a <sbrk_aligned+0x12>
 8005904:	f000 fa8e 	bl	8005e24 <_sbrk_r>
 8005908:	6030      	str	r0, [r6, #0]
 800590a:	4621      	mov	r1, r4
 800590c:	4628      	mov	r0, r5
 800590e:	f000 fa89 	bl	8005e24 <_sbrk_r>
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	d103      	bne.n	800591e <sbrk_aligned+0x26>
 8005916:	f04f 34ff 	mov.w	r4, #4294967295
 800591a:	4620      	mov	r0, r4
 800591c:	bd70      	pop	{r4, r5, r6, pc}
 800591e:	1cc4      	adds	r4, r0, #3
 8005920:	f024 0403 	bic.w	r4, r4, #3
 8005924:	42a0      	cmp	r0, r4
 8005926:	d0f8      	beq.n	800591a <sbrk_aligned+0x22>
 8005928:	1a21      	subs	r1, r4, r0
 800592a:	4628      	mov	r0, r5
 800592c:	f000 fa7a 	bl	8005e24 <_sbrk_r>
 8005930:	3001      	adds	r0, #1
 8005932:	d1f2      	bne.n	800591a <sbrk_aligned+0x22>
 8005934:	e7ef      	b.n	8005916 <sbrk_aligned+0x1e>
 8005936:	bf00      	nop
 8005938:	24001060 	.word	0x24001060

0800593c <_malloc_r>:
 800593c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005940:	1ccd      	adds	r5, r1, #3
 8005942:	f025 0503 	bic.w	r5, r5, #3
 8005946:	3508      	adds	r5, #8
 8005948:	2d0c      	cmp	r5, #12
 800594a:	bf38      	it	cc
 800594c:	250c      	movcc	r5, #12
 800594e:	2d00      	cmp	r5, #0
 8005950:	4606      	mov	r6, r0
 8005952:	db01      	blt.n	8005958 <_malloc_r+0x1c>
 8005954:	42a9      	cmp	r1, r5
 8005956:	d904      	bls.n	8005962 <_malloc_r+0x26>
 8005958:	230c      	movs	r3, #12
 800595a:	6033      	str	r3, [r6, #0]
 800595c:	2000      	movs	r0, #0
 800595e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005962:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a38 <_malloc_r+0xfc>
 8005966:	f000 f869 	bl	8005a3c <__malloc_lock>
 800596a:	f8d8 3000 	ldr.w	r3, [r8]
 800596e:	461c      	mov	r4, r3
 8005970:	bb44      	cbnz	r4, 80059c4 <_malloc_r+0x88>
 8005972:	4629      	mov	r1, r5
 8005974:	4630      	mov	r0, r6
 8005976:	f7ff ffbf 	bl	80058f8 <sbrk_aligned>
 800597a:	1c43      	adds	r3, r0, #1
 800597c:	4604      	mov	r4, r0
 800597e:	d158      	bne.n	8005a32 <_malloc_r+0xf6>
 8005980:	f8d8 4000 	ldr.w	r4, [r8]
 8005984:	4627      	mov	r7, r4
 8005986:	2f00      	cmp	r7, #0
 8005988:	d143      	bne.n	8005a12 <_malloc_r+0xd6>
 800598a:	2c00      	cmp	r4, #0
 800598c:	d04b      	beq.n	8005a26 <_malloc_r+0xea>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	4639      	mov	r1, r7
 8005992:	4630      	mov	r0, r6
 8005994:	eb04 0903 	add.w	r9, r4, r3
 8005998:	f000 fa44 	bl	8005e24 <_sbrk_r>
 800599c:	4581      	cmp	r9, r0
 800599e:	d142      	bne.n	8005a26 <_malloc_r+0xea>
 80059a0:	6821      	ldr	r1, [r4, #0]
 80059a2:	1a6d      	subs	r5, r5, r1
 80059a4:	4629      	mov	r1, r5
 80059a6:	4630      	mov	r0, r6
 80059a8:	f7ff ffa6 	bl	80058f8 <sbrk_aligned>
 80059ac:	3001      	adds	r0, #1
 80059ae:	d03a      	beq.n	8005a26 <_malloc_r+0xea>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	442b      	add	r3, r5
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	f8d8 3000 	ldr.w	r3, [r8]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	bb62      	cbnz	r2, 8005a18 <_malloc_r+0xdc>
 80059be:	f8c8 7000 	str.w	r7, [r8]
 80059c2:	e00f      	b.n	80059e4 <_malloc_r+0xa8>
 80059c4:	6822      	ldr	r2, [r4, #0]
 80059c6:	1b52      	subs	r2, r2, r5
 80059c8:	d420      	bmi.n	8005a0c <_malloc_r+0xd0>
 80059ca:	2a0b      	cmp	r2, #11
 80059cc:	d917      	bls.n	80059fe <_malloc_r+0xc2>
 80059ce:	1961      	adds	r1, r4, r5
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	6025      	str	r5, [r4, #0]
 80059d4:	bf18      	it	ne
 80059d6:	6059      	strne	r1, [r3, #4]
 80059d8:	6863      	ldr	r3, [r4, #4]
 80059da:	bf08      	it	eq
 80059dc:	f8c8 1000 	streq.w	r1, [r8]
 80059e0:	5162      	str	r2, [r4, r5]
 80059e2:	604b      	str	r3, [r1, #4]
 80059e4:	4630      	mov	r0, r6
 80059e6:	f000 f82f 	bl	8005a48 <__malloc_unlock>
 80059ea:	f104 000b 	add.w	r0, r4, #11
 80059ee:	1d23      	adds	r3, r4, #4
 80059f0:	f020 0007 	bic.w	r0, r0, #7
 80059f4:	1ac2      	subs	r2, r0, r3
 80059f6:	bf1c      	itt	ne
 80059f8:	1a1b      	subne	r3, r3, r0
 80059fa:	50a3      	strne	r3, [r4, r2]
 80059fc:	e7af      	b.n	800595e <_malloc_r+0x22>
 80059fe:	6862      	ldr	r2, [r4, #4]
 8005a00:	42a3      	cmp	r3, r4
 8005a02:	bf0c      	ite	eq
 8005a04:	f8c8 2000 	streq.w	r2, [r8]
 8005a08:	605a      	strne	r2, [r3, #4]
 8005a0a:	e7eb      	b.n	80059e4 <_malloc_r+0xa8>
 8005a0c:	4623      	mov	r3, r4
 8005a0e:	6864      	ldr	r4, [r4, #4]
 8005a10:	e7ae      	b.n	8005970 <_malloc_r+0x34>
 8005a12:	463c      	mov	r4, r7
 8005a14:	687f      	ldr	r7, [r7, #4]
 8005a16:	e7b6      	b.n	8005986 <_malloc_r+0x4a>
 8005a18:	461a      	mov	r2, r3
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	42a3      	cmp	r3, r4
 8005a1e:	d1fb      	bne.n	8005a18 <_malloc_r+0xdc>
 8005a20:	2300      	movs	r3, #0
 8005a22:	6053      	str	r3, [r2, #4]
 8005a24:	e7de      	b.n	80059e4 <_malloc_r+0xa8>
 8005a26:	230c      	movs	r3, #12
 8005a28:	6033      	str	r3, [r6, #0]
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	f000 f80c 	bl	8005a48 <__malloc_unlock>
 8005a30:	e794      	b.n	800595c <_malloc_r+0x20>
 8005a32:	6005      	str	r5, [r0, #0]
 8005a34:	e7d6      	b.n	80059e4 <_malloc_r+0xa8>
 8005a36:	bf00      	nop
 8005a38:	24001064 	.word	0x24001064

08005a3c <__malloc_lock>:
 8005a3c:	4801      	ldr	r0, [pc, #4]	@ (8005a44 <__malloc_lock+0x8>)
 8005a3e:	f000 ba3e 	b.w	8005ebe <__retarget_lock_acquire_recursive>
 8005a42:	bf00      	nop
 8005a44:	240011a8 	.word	0x240011a8

08005a48 <__malloc_unlock>:
 8005a48:	4801      	ldr	r0, [pc, #4]	@ (8005a50 <__malloc_unlock+0x8>)
 8005a4a:	f000 ba39 	b.w	8005ec0 <__retarget_lock_release_recursive>
 8005a4e:	bf00      	nop
 8005a50:	240011a8 	.word	0x240011a8

08005a54 <std>:
 8005a54:	2300      	movs	r3, #0
 8005a56:	b510      	push	{r4, lr}
 8005a58:	4604      	mov	r4, r0
 8005a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a62:	6083      	str	r3, [r0, #8]
 8005a64:	8181      	strh	r1, [r0, #12]
 8005a66:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a68:	81c2      	strh	r2, [r0, #14]
 8005a6a:	6183      	str	r3, [r0, #24]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	2208      	movs	r2, #8
 8005a70:	305c      	adds	r0, #92	@ 0x5c
 8005a72:	f000 f99b 	bl	8005dac <memset>
 8005a76:	4b0d      	ldr	r3, [pc, #52]	@ (8005aac <std+0x58>)
 8005a78:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab0 <std+0x5c>)
 8005a7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab4 <std+0x60>)
 8005a80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a82:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <std+0x64>)
 8005a84:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <std+0x68>)
 8005a88:	6224      	str	r4, [r4, #32]
 8005a8a:	429c      	cmp	r4, r3
 8005a8c:	d006      	beq.n	8005a9c <std+0x48>
 8005a8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a92:	4294      	cmp	r4, r2
 8005a94:	d002      	beq.n	8005a9c <std+0x48>
 8005a96:	33d0      	adds	r3, #208	@ 0xd0
 8005a98:	429c      	cmp	r4, r3
 8005a9a:	d105      	bne.n	8005aa8 <std+0x54>
 8005a9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa4:	f000 ba0a 	b.w	8005ebc <__retarget_lock_init_recursive>
 8005aa8:	bd10      	pop	{r4, pc}
 8005aaa:	bf00      	nop
 8005aac:	08005bfd 	.word	0x08005bfd
 8005ab0:	08005c1f 	.word	0x08005c1f
 8005ab4:	08005c57 	.word	0x08005c57
 8005ab8:	08005c7b 	.word	0x08005c7b
 8005abc:	24001068 	.word	0x24001068

08005ac0 <stdio_exit_handler>:
 8005ac0:	4a02      	ldr	r2, [pc, #8]	@ (8005acc <stdio_exit_handler+0xc>)
 8005ac2:	4903      	ldr	r1, [pc, #12]	@ (8005ad0 <stdio_exit_handler+0x10>)
 8005ac4:	4803      	ldr	r0, [pc, #12]	@ (8005ad4 <stdio_exit_handler+0x14>)
 8005ac6:	f000 b869 	b.w	8005b9c <_fwalk_sglue>
 8005aca:	bf00      	nop
 8005acc:	240000ec 	.word	0x240000ec
 8005ad0:	080065fd 	.word	0x080065fd
 8005ad4:	240000fc 	.word	0x240000fc

08005ad8 <cleanup_stdio>:
 8005ad8:	6841      	ldr	r1, [r0, #4]
 8005ada:	4b0c      	ldr	r3, [pc, #48]	@ (8005b0c <cleanup_stdio+0x34>)
 8005adc:	4299      	cmp	r1, r3
 8005ade:	b510      	push	{r4, lr}
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	d001      	beq.n	8005ae8 <cleanup_stdio+0x10>
 8005ae4:	f000 fd8a 	bl	80065fc <_fflush_r>
 8005ae8:	68a1      	ldr	r1, [r4, #8]
 8005aea:	4b09      	ldr	r3, [pc, #36]	@ (8005b10 <cleanup_stdio+0x38>)
 8005aec:	4299      	cmp	r1, r3
 8005aee:	d002      	beq.n	8005af6 <cleanup_stdio+0x1e>
 8005af0:	4620      	mov	r0, r4
 8005af2:	f000 fd83 	bl	80065fc <_fflush_r>
 8005af6:	68e1      	ldr	r1, [r4, #12]
 8005af8:	4b06      	ldr	r3, [pc, #24]	@ (8005b14 <cleanup_stdio+0x3c>)
 8005afa:	4299      	cmp	r1, r3
 8005afc:	d004      	beq.n	8005b08 <cleanup_stdio+0x30>
 8005afe:	4620      	mov	r0, r4
 8005b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b04:	f000 bd7a 	b.w	80065fc <_fflush_r>
 8005b08:	bd10      	pop	{r4, pc}
 8005b0a:	bf00      	nop
 8005b0c:	24001068 	.word	0x24001068
 8005b10:	240010d0 	.word	0x240010d0
 8005b14:	24001138 	.word	0x24001138

08005b18 <global_stdio_init.part.0>:
 8005b18:	b510      	push	{r4, lr}
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b48 <global_stdio_init.part.0+0x30>)
 8005b1c:	4c0b      	ldr	r4, [pc, #44]	@ (8005b4c <global_stdio_init.part.0+0x34>)
 8005b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8005b50 <global_stdio_init.part.0+0x38>)
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	4620      	mov	r0, r4
 8005b24:	2200      	movs	r2, #0
 8005b26:	2104      	movs	r1, #4
 8005b28:	f7ff ff94 	bl	8005a54 <std>
 8005b2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b30:	2201      	movs	r2, #1
 8005b32:	2109      	movs	r1, #9
 8005b34:	f7ff ff8e 	bl	8005a54 <std>
 8005b38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b42:	2112      	movs	r1, #18
 8005b44:	f7ff bf86 	b.w	8005a54 <std>
 8005b48:	240011a0 	.word	0x240011a0
 8005b4c:	24001068 	.word	0x24001068
 8005b50:	08005ac1 	.word	0x08005ac1

08005b54 <__sfp_lock_acquire>:
 8005b54:	4801      	ldr	r0, [pc, #4]	@ (8005b5c <__sfp_lock_acquire+0x8>)
 8005b56:	f000 b9b2 	b.w	8005ebe <__retarget_lock_acquire_recursive>
 8005b5a:	bf00      	nop
 8005b5c:	240011a9 	.word	0x240011a9

08005b60 <__sfp_lock_release>:
 8005b60:	4801      	ldr	r0, [pc, #4]	@ (8005b68 <__sfp_lock_release+0x8>)
 8005b62:	f000 b9ad 	b.w	8005ec0 <__retarget_lock_release_recursive>
 8005b66:	bf00      	nop
 8005b68:	240011a9 	.word	0x240011a9

08005b6c <__sinit>:
 8005b6c:	b510      	push	{r4, lr}
 8005b6e:	4604      	mov	r4, r0
 8005b70:	f7ff fff0 	bl	8005b54 <__sfp_lock_acquire>
 8005b74:	6a23      	ldr	r3, [r4, #32]
 8005b76:	b11b      	cbz	r3, 8005b80 <__sinit+0x14>
 8005b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b7c:	f7ff bff0 	b.w	8005b60 <__sfp_lock_release>
 8005b80:	4b04      	ldr	r3, [pc, #16]	@ (8005b94 <__sinit+0x28>)
 8005b82:	6223      	str	r3, [r4, #32]
 8005b84:	4b04      	ldr	r3, [pc, #16]	@ (8005b98 <__sinit+0x2c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1f5      	bne.n	8005b78 <__sinit+0xc>
 8005b8c:	f7ff ffc4 	bl	8005b18 <global_stdio_init.part.0>
 8005b90:	e7f2      	b.n	8005b78 <__sinit+0xc>
 8005b92:	bf00      	nop
 8005b94:	08005ad9 	.word	0x08005ad9
 8005b98:	240011a0 	.word	0x240011a0

08005b9c <_fwalk_sglue>:
 8005b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba0:	4607      	mov	r7, r0
 8005ba2:	4688      	mov	r8, r1
 8005ba4:	4614      	mov	r4, r2
 8005ba6:	2600      	movs	r6, #0
 8005ba8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bac:	f1b9 0901 	subs.w	r9, r9, #1
 8005bb0:	d505      	bpl.n	8005bbe <_fwalk_sglue+0x22>
 8005bb2:	6824      	ldr	r4, [r4, #0]
 8005bb4:	2c00      	cmp	r4, #0
 8005bb6:	d1f7      	bne.n	8005ba8 <_fwalk_sglue+0xc>
 8005bb8:	4630      	mov	r0, r6
 8005bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bbe:	89ab      	ldrh	r3, [r5, #12]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d907      	bls.n	8005bd4 <_fwalk_sglue+0x38>
 8005bc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	d003      	beq.n	8005bd4 <_fwalk_sglue+0x38>
 8005bcc:	4629      	mov	r1, r5
 8005bce:	4638      	mov	r0, r7
 8005bd0:	47c0      	blx	r8
 8005bd2:	4306      	orrs	r6, r0
 8005bd4:	3568      	adds	r5, #104	@ 0x68
 8005bd6:	e7e9      	b.n	8005bac <_fwalk_sglue+0x10>

08005bd8 <iprintf>:
 8005bd8:	b40f      	push	{r0, r1, r2, r3}
 8005bda:	b507      	push	{r0, r1, r2, lr}
 8005bdc:	4906      	ldr	r1, [pc, #24]	@ (8005bf8 <iprintf+0x20>)
 8005bde:	ab04      	add	r3, sp, #16
 8005be0:	6808      	ldr	r0, [r1, #0]
 8005be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005be6:	6881      	ldr	r1, [r0, #8]
 8005be8:	9301      	str	r3, [sp, #4]
 8005bea:	f000 f9df 	bl	8005fac <_vfiprintf_r>
 8005bee:	b003      	add	sp, #12
 8005bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bf4:	b004      	add	sp, #16
 8005bf6:	4770      	bx	lr
 8005bf8:	240000f8 	.word	0x240000f8

08005bfc <__sread>:
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	460c      	mov	r4, r1
 8005c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c04:	f000 f8fc 	bl	8005e00 <_read_r>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	bfab      	itete	ge
 8005c0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c0e:	89a3      	ldrhlt	r3, [r4, #12]
 8005c10:	181b      	addge	r3, r3, r0
 8005c12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c16:	bfac      	ite	ge
 8005c18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c1a:	81a3      	strhlt	r3, [r4, #12]
 8005c1c:	bd10      	pop	{r4, pc}

08005c1e <__swrite>:
 8005c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c22:	461f      	mov	r7, r3
 8005c24:	898b      	ldrh	r3, [r1, #12]
 8005c26:	05db      	lsls	r3, r3, #23
 8005c28:	4605      	mov	r5, r0
 8005c2a:	460c      	mov	r4, r1
 8005c2c:	4616      	mov	r6, r2
 8005c2e:	d505      	bpl.n	8005c3c <__swrite+0x1e>
 8005c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c34:	2302      	movs	r3, #2
 8005c36:	2200      	movs	r2, #0
 8005c38:	f000 f8d0 	bl	8005ddc <_lseek_r>
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c46:	81a3      	strh	r3, [r4, #12]
 8005c48:	4632      	mov	r2, r6
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c52:	f000 b8f7 	b.w	8005e44 <_write_r>

08005c56 <__sseek>:
 8005c56:	b510      	push	{r4, lr}
 8005c58:	460c      	mov	r4, r1
 8005c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5e:	f000 f8bd 	bl	8005ddc <_lseek_r>
 8005c62:	1c43      	adds	r3, r0, #1
 8005c64:	89a3      	ldrh	r3, [r4, #12]
 8005c66:	bf15      	itete	ne
 8005c68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c72:	81a3      	strheq	r3, [r4, #12]
 8005c74:	bf18      	it	ne
 8005c76:	81a3      	strhne	r3, [r4, #12]
 8005c78:	bd10      	pop	{r4, pc}

08005c7a <__sclose>:
 8005c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7e:	f000 b89d 	b.w	8005dbc <_close_r>

08005c82 <__swbuf_r>:
 8005c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c84:	460e      	mov	r6, r1
 8005c86:	4614      	mov	r4, r2
 8005c88:	4605      	mov	r5, r0
 8005c8a:	b118      	cbz	r0, 8005c94 <__swbuf_r+0x12>
 8005c8c:	6a03      	ldr	r3, [r0, #32]
 8005c8e:	b90b      	cbnz	r3, 8005c94 <__swbuf_r+0x12>
 8005c90:	f7ff ff6c 	bl	8005b6c <__sinit>
 8005c94:	69a3      	ldr	r3, [r4, #24]
 8005c96:	60a3      	str	r3, [r4, #8]
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	071a      	lsls	r2, r3, #28
 8005c9c:	d501      	bpl.n	8005ca2 <__swbuf_r+0x20>
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	b943      	cbnz	r3, 8005cb4 <__swbuf_r+0x32>
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	f000 f82b 	bl	8005d00 <__swsetup_r>
 8005caa:	b118      	cbz	r0, 8005cb4 <__swbuf_r+0x32>
 8005cac:	f04f 37ff 	mov.w	r7, #4294967295
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	6922      	ldr	r2, [r4, #16]
 8005cb8:	1a98      	subs	r0, r3, r2
 8005cba:	6963      	ldr	r3, [r4, #20]
 8005cbc:	b2f6      	uxtb	r6, r6
 8005cbe:	4283      	cmp	r3, r0
 8005cc0:	4637      	mov	r7, r6
 8005cc2:	dc05      	bgt.n	8005cd0 <__swbuf_r+0x4e>
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f000 fc98 	bl	80065fc <_fflush_r>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d1ed      	bne.n	8005cac <__swbuf_r+0x2a>
 8005cd0:	68a3      	ldr	r3, [r4, #8]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	60a3      	str	r3, [r4, #8]
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	6022      	str	r2, [r4, #0]
 8005cdc:	701e      	strb	r6, [r3, #0]
 8005cde:	6962      	ldr	r2, [r4, #20]
 8005ce0:	1c43      	adds	r3, r0, #1
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d004      	beq.n	8005cf0 <__swbuf_r+0x6e>
 8005ce6:	89a3      	ldrh	r3, [r4, #12]
 8005ce8:	07db      	lsls	r3, r3, #31
 8005cea:	d5e1      	bpl.n	8005cb0 <__swbuf_r+0x2e>
 8005cec:	2e0a      	cmp	r6, #10
 8005cee:	d1df      	bne.n	8005cb0 <__swbuf_r+0x2e>
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f000 fc82 	bl	80065fc <_fflush_r>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d0d9      	beq.n	8005cb0 <__swbuf_r+0x2e>
 8005cfc:	e7d6      	b.n	8005cac <__swbuf_r+0x2a>
	...

08005d00 <__swsetup_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4b29      	ldr	r3, [pc, #164]	@ (8005da8 <__swsetup_r+0xa8>)
 8005d04:	4605      	mov	r5, r0
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	460c      	mov	r4, r1
 8005d0a:	b118      	cbz	r0, 8005d14 <__swsetup_r+0x14>
 8005d0c:	6a03      	ldr	r3, [r0, #32]
 8005d0e:	b90b      	cbnz	r3, 8005d14 <__swsetup_r+0x14>
 8005d10:	f7ff ff2c 	bl	8005b6c <__sinit>
 8005d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d18:	0719      	lsls	r1, r3, #28
 8005d1a:	d422      	bmi.n	8005d62 <__swsetup_r+0x62>
 8005d1c:	06da      	lsls	r2, r3, #27
 8005d1e:	d407      	bmi.n	8005d30 <__swsetup_r+0x30>
 8005d20:	2209      	movs	r2, #9
 8005d22:	602a      	str	r2, [r5, #0]
 8005d24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d28:	81a3      	strh	r3, [r4, #12]
 8005d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2e:	e033      	b.n	8005d98 <__swsetup_r+0x98>
 8005d30:	0758      	lsls	r0, r3, #29
 8005d32:	d512      	bpl.n	8005d5a <__swsetup_r+0x5a>
 8005d34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d36:	b141      	cbz	r1, 8005d4a <__swsetup_r+0x4a>
 8005d38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d3c:	4299      	cmp	r1, r3
 8005d3e:	d002      	beq.n	8005d46 <__swsetup_r+0x46>
 8005d40:	4628      	mov	r0, r5
 8005d42:	f000 f8bf 	bl	8005ec4 <_free_r>
 8005d46:	2300      	movs	r3, #0
 8005d48:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d4a:	89a3      	ldrh	r3, [r4, #12]
 8005d4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d50:	81a3      	strh	r3, [r4, #12]
 8005d52:	2300      	movs	r3, #0
 8005d54:	6063      	str	r3, [r4, #4]
 8005d56:	6923      	ldr	r3, [r4, #16]
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	f043 0308 	orr.w	r3, r3, #8
 8005d60:	81a3      	strh	r3, [r4, #12]
 8005d62:	6923      	ldr	r3, [r4, #16]
 8005d64:	b94b      	cbnz	r3, 8005d7a <__swsetup_r+0x7a>
 8005d66:	89a3      	ldrh	r3, [r4, #12]
 8005d68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d70:	d003      	beq.n	8005d7a <__swsetup_r+0x7a>
 8005d72:	4621      	mov	r1, r4
 8005d74:	4628      	mov	r0, r5
 8005d76:	f000 fc8f 	bl	8006698 <__smakebuf_r>
 8005d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d7e:	f013 0201 	ands.w	r2, r3, #1
 8005d82:	d00a      	beq.n	8005d9a <__swsetup_r+0x9a>
 8005d84:	2200      	movs	r2, #0
 8005d86:	60a2      	str	r2, [r4, #8]
 8005d88:	6962      	ldr	r2, [r4, #20]
 8005d8a:	4252      	negs	r2, r2
 8005d8c:	61a2      	str	r2, [r4, #24]
 8005d8e:	6922      	ldr	r2, [r4, #16]
 8005d90:	b942      	cbnz	r2, 8005da4 <__swsetup_r+0xa4>
 8005d92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d96:	d1c5      	bne.n	8005d24 <__swsetup_r+0x24>
 8005d98:	bd38      	pop	{r3, r4, r5, pc}
 8005d9a:	0799      	lsls	r1, r3, #30
 8005d9c:	bf58      	it	pl
 8005d9e:	6962      	ldrpl	r2, [r4, #20]
 8005da0:	60a2      	str	r2, [r4, #8]
 8005da2:	e7f4      	b.n	8005d8e <__swsetup_r+0x8e>
 8005da4:	2000      	movs	r0, #0
 8005da6:	e7f7      	b.n	8005d98 <__swsetup_r+0x98>
 8005da8:	240000f8 	.word	0x240000f8

08005dac <memset>:
 8005dac:	4402      	add	r2, r0
 8005dae:	4603      	mov	r3, r0
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d100      	bne.n	8005db6 <memset+0xa>
 8005db4:	4770      	bx	lr
 8005db6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dba:	e7f9      	b.n	8005db0 <memset+0x4>

08005dbc <_close_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4d06      	ldr	r5, [pc, #24]	@ (8005dd8 <_close_r+0x1c>)
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	4608      	mov	r0, r1
 8005dc6:	602b      	str	r3, [r5, #0]
 8005dc8:	f7fa fd94 	bl	80008f4 <_close>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d102      	bne.n	8005dd6 <_close_r+0x1a>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	b103      	cbz	r3, 8005dd6 <_close_r+0x1a>
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	240011a4 	.word	0x240011a4

08005ddc <_lseek_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4d07      	ldr	r5, [pc, #28]	@ (8005dfc <_lseek_r+0x20>)
 8005de0:	4604      	mov	r4, r0
 8005de2:	4608      	mov	r0, r1
 8005de4:	4611      	mov	r1, r2
 8005de6:	2200      	movs	r2, #0
 8005de8:	602a      	str	r2, [r5, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	f7fa fd8c 	bl	8000908 <_lseek>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_lseek_r+0x1e>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_lseek_r+0x1e>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	240011a4 	.word	0x240011a4

08005e00 <_read_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4d07      	ldr	r5, [pc, #28]	@ (8005e20 <_read_r+0x20>)
 8005e04:	4604      	mov	r4, r0
 8005e06:	4608      	mov	r0, r1
 8005e08:	4611      	mov	r1, r2
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	602a      	str	r2, [r5, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f7fa fd52 	bl	80008b8 <_read>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_read_r+0x1e>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_read_r+0x1e>
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	240011a4 	.word	0x240011a4

08005e24 <_sbrk_r>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	4d06      	ldr	r5, [pc, #24]	@ (8005e40 <_sbrk_r+0x1c>)
 8005e28:	2300      	movs	r3, #0
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	602b      	str	r3, [r5, #0]
 8005e30:	f7fa fd6c 	bl	800090c <_sbrk>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d102      	bne.n	8005e3e <_sbrk_r+0x1a>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	b103      	cbz	r3, 8005e3e <_sbrk_r+0x1a>
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	bd38      	pop	{r3, r4, r5, pc}
 8005e40:	240011a4 	.word	0x240011a4

08005e44 <_write_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4d07      	ldr	r5, [pc, #28]	@ (8005e64 <_write_r+0x20>)
 8005e48:	4604      	mov	r4, r0
 8005e4a:	4608      	mov	r0, r1
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	2200      	movs	r2, #0
 8005e50:	602a      	str	r2, [r5, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	f7fa fd40 	bl	80008d8 <_write>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d102      	bne.n	8005e62 <_write_r+0x1e>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	b103      	cbz	r3, 8005e62 <_write_r+0x1e>
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	bd38      	pop	{r3, r4, r5, pc}
 8005e64:	240011a4 	.word	0x240011a4

08005e68 <__errno>:
 8005e68:	4b01      	ldr	r3, [pc, #4]	@ (8005e70 <__errno+0x8>)
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	240000f8 	.word	0x240000f8

08005e74 <__libc_init_array>:
 8005e74:	b570      	push	{r4, r5, r6, lr}
 8005e76:	4d0d      	ldr	r5, [pc, #52]	@ (8005eac <__libc_init_array+0x38>)
 8005e78:	4c0d      	ldr	r4, [pc, #52]	@ (8005eb0 <__libc_init_array+0x3c>)
 8005e7a:	1b64      	subs	r4, r4, r5
 8005e7c:	10a4      	asrs	r4, r4, #2
 8005e7e:	2600      	movs	r6, #0
 8005e80:	42a6      	cmp	r6, r4
 8005e82:	d109      	bne.n	8005e98 <__libc_init_array+0x24>
 8005e84:	4d0b      	ldr	r5, [pc, #44]	@ (8005eb4 <__libc_init_array+0x40>)
 8005e86:	4c0c      	ldr	r4, [pc, #48]	@ (8005eb8 <__libc_init_array+0x44>)
 8005e88:	f000 fc64 	bl	8006754 <_init>
 8005e8c:	1b64      	subs	r4, r4, r5
 8005e8e:	10a4      	asrs	r4, r4, #2
 8005e90:	2600      	movs	r6, #0
 8005e92:	42a6      	cmp	r6, r4
 8005e94:	d105      	bne.n	8005ea2 <__libc_init_array+0x2e>
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
 8005e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e9c:	4798      	blx	r3
 8005e9e:	3601      	adds	r6, #1
 8005ea0:	e7ee      	b.n	8005e80 <__libc_init_array+0xc>
 8005ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ea6:	4798      	blx	r3
 8005ea8:	3601      	adds	r6, #1
 8005eaa:	e7f2      	b.n	8005e92 <__libc_init_array+0x1e>
 8005eac:	080068fc 	.word	0x080068fc
 8005eb0:	080068fc 	.word	0x080068fc
 8005eb4:	080068fc 	.word	0x080068fc
 8005eb8:	08006900 	.word	0x08006900

08005ebc <__retarget_lock_init_recursive>:
 8005ebc:	4770      	bx	lr

08005ebe <__retarget_lock_acquire_recursive>:
 8005ebe:	4770      	bx	lr

08005ec0 <__retarget_lock_release_recursive>:
 8005ec0:	4770      	bx	lr
	...

08005ec4 <_free_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4605      	mov	r5, r0
 8005ec8:	2900      	cmp	r1, #0
 8005eca:	d041      	beq.n	8005f50 <_free_r+0x8c>
 8005ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ed0:	1f0c      	subs	r4, r1, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	bfb8      	it	lt
 8005ed6:	18e4      	addlt	r4, r4, r3
 8005ed8:	f7ff fdb0 	bl	8005a3c <__malloc_lock>
 8005edc:	4a1d      	ldr	r2, [pc, #116]	@ (8005f54 <_free_r+0x90>)
 8005ede:	6813      	ldr	r3, [r2, #0]
 8005ee0:	b933      	cbnz	r3, 8005ef0 <_free_r+0x2c>
 8005ee2:	6063      	str	r3, [r4, #4]
 8005ee4:	6014      	str	r4, [r2, #0]
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eec:	f7ff bdac 	b.w	8005a48 <__malloc_unlock>
 8005ef0:	42a3      	cmp	r3, r4
 8005ef2:	d908      	bls.n	8005f06 <_free_r+0x42>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	1821      	adds	r1, r4, r0
 8005ef8:	428b      	cmp	r3, r1
 8005efa:	bf01      	itttt	eq
 8005efc:	6819      	ldreq	r1, [r3, #0]
 8005efe:	685b      	ldreq	r3, [r3, #4]
 8005f00:	1809      	addeq	r1, r1, r0
 8005f02:	6021      	streq	r1, [r4, #0]
 8005f04:	e7ed      	b.n	8005ee2 <_free_r+0x1e>
 8005f06:	461a      	mov	r2, r3
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	b10b      	cbz	r3, 8005f10 <_free_r+0x4c>
 8005f0c:	42a3      	cmp	r3, r4
 8005f0e:	d9fa      	bls.n	8005f06 <_free_r+0x42>
 8005f10:	6811      	ldr	r1, [r2, #0]
 8005f12:	1850      	adds	r0, r2, r1
 8005f14:	42a0      	cmp	r0, r4
 8005f16:	d10b      	bne.n	8005f30 <_free_r+0x6c>
 8005f18:	6820      	ldr	r0, [r4, #0]
 8005f1a:	4401      	add	r1, r0
 8005f1c:	1850      	adds	r0, r2, r1
 8005f1e:	4283      	cmp	r3, r0
 8005f20:	6011      	str	r1, [r2, #0]
 8005f22:	d1e0      	bne.n	8005ee6 <_free_r+0x22>
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	6053      	str	r3, [r2, #4]
 8005f2a:	4408      	add	r0, r1
 8005f2c:	6010      	str	r0, [r2, #0]
 8005f2e:	e7da      	b.n	8005ee6 <_free_r+0x22>
 8005f30:	d902      	bls.n	8005f38 <_free_r+0x74>
 8005f32:	230c      	movs	r3, #12
 8005f34:	602b      	str	r3, [r5, #0]
 8005f36:	e7d6      	b.n	8005ee6 <_free_r+0x22>
 8005f38:	6820      	ldr	r0, [r4, #0]
 8005f3a:	1821      	adds	r1, r4, r0
 8005f3c:	428b      	cmp	r3, r1
 8005f3e:	bf04      	itt	eq
 8005f40:	6819      	ldreq	r1, [r3, #0]
 8005f42:	685b      	ldreq	r3, [r3, #4]
 8005f44:	6063      	str	r3, [r4, #4]
 8005f46:	bf04      	itt	eq
 8005f48:	1809      	addeq	r1, r1, r0
 8005f4a:	6021      	streq	r1, [r4, #0]
 8005f4c:	6054      	str	r4, [r2, #4]
 8005f4e:	e7ca      	b.n	8005ee6 <_free_r+0x22>
 8005f50:	bd38      	pop	{r3, r4, r5, pc}
 8005f52:	bf00      	nop
 8005f54:	24001064 	.word	0x24001064

08005f58 <__sfputc_r>:
 8005f58:	6893      	ldr	r3, [r2, #8]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	b410      	push	{r4}
 8005f60:	6093      	str	r3, [r2, #8]
 8005f62:	da08      	bge.n	8005f76 <__sfputc_r+0x1e>
 8005f64:	6994      	ldr	r4, [r2, #24]
 8005f66:	42a3      	cmp	r3, r4
 8005f68:	db01      	blt.n	8005f6e <__sfputc_r+0x16>
 8005f6a:	290a      	cmp	r1, #10
 8005f6c:	d103      	bne.n	8005f76 <__sfputc_r+0x1e>
 8005f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f72:	f7ff be86 	b.w	8005c82 <__swbuf_r>
 8005f76:	6813      	ldr	r3, [r2, #0]
 8005f78:	1c58      	adds	r0, r3, #1
 8005f7a:	6010      	str	r0, [r2, #0]
 8005f7c:	7019      	strb	r1, [r3, #0]
 8005f7e:	4608      	mov	r0, r1
 8005f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <__sfputs_r>:
 8005f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f88:	4606      	mov	r6, r0
 8005f8a:	460f      	mov	r7, r1
 8005f8c:	4614      	mov	r4, r2
 8005f8e:	18d5      	adds	r5, r2, r3
 8005f90:	42ac      	cmp	r4, r5
 8005f92:	d101      	bne.n	8005f98 <__sfputs_r+0x12>
 8005f94:	2000      	movs	r0, #0
 8005f96:	e007      	b.n	8005fa8 <__sfputs_r+0x22>
 8005f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f9c:	463a      	mov	r2, r7
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f7ff ffda 	bl	8005f58 <__sfputc_r>
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	d1f3      	bne.n	8005f90 <__sfputs_r+0xa>
 8005fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fac <_vfiprintf_r>:
 8005fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb0:	460d      	mov	r5, r1
 8005fb2:	b09d      	sub	sp, #116	@ 0x74
 8005fb4:	4614      	mov	r4, r2
 8005fb6:	4698      	mov	r8, r3
 8005fb8:	4606      	mov	r6, r0
 8005fba:	b118      	cbz	r0, 8005fc4 <_vfiprintf_r+0x18>
 8005fbc:	6a03      	ldr	r3, [r0, #32]
 8005fbe:	b90b      	cbnz	r3, 8005fc4 <_vfiprintf_r+0x18>
 8005fc0:	f7ff fdd4 	bl	8005b6c <__sinit>
 8005fc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fc6:	07d9      	lsls	r1, r3, #31
 8005fc8:	d405      	bmi.n	8005fd6 <_vfiprintf_r+0x2a>
 8005fca:	89ab      	ldrh	r3, [r5, #12]
 8005fcc:	059a      	lsls	r2, r3, #22
 8005fce:	d402      	bmi.n	8005fd6 <_vfiprintf_r+0x2a>
 8005fd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fd2:	f7ff ff74 	bl	8005ebe <__retarget_lock_acquire_recursive>
 8005fd6:	89ab      	ldrh	r3, [r5, #12]
 8005fd8:	071b      	lsls	r3, r3, #28
 8005fda:	d501      	bpl.n	8005fe0 <_vfiprintf_r+0x34>
 8005fdc:	692b      	ldr	r3, [r5, #16]
 8005fde:	b99b      	cbnz	r3, 8006008 <_vfiprintf_r+0x5c>
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	f7ff fe8c 	bl	8005d00 <__swsetup_r>
 8005fe8:	b170      	cbz	r0, 8006008 <_vfiprintf_r+0x5c>
 8005fea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fec:	07dc      	lsls	r4, r3, #31
 8005fee:	d504      	bpl.n	8005ffa <_vfiprintf_r+0x4e>
 8005ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff4:	b01d      	add	sp, #116	@ 0x74
 8005ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffa:	89ab      	ldrh	r3, [r5, #12]
 8005ffc:	0598      	lsls	r0, r3, #22
 8005ffe:	d4f7      	bmi.n	8005ff0 <_vfiprintf_r+0x44>
 8006000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006002:	f7ff ff5d 	bl	8005ec0 <__retarget_lock_release_recursive>
 8006006:	e7f3      	b.n	8005ff0 <_vfiprintf_r+0x44>
 8006008:	2300      	movs	r3, #0
 800600a:	9309      	str	r3, [sp, #36]	@ 0x24
 800600c:	2320      	movs	r3, #32
 800600e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006012:	f8cd 800c 	str.w	r8, [sp, #12]
 8006016:	2330      	movs	r3, #48	@ 0x30
 8006018:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80061c8 <_vfiprintf_r+0x21c>
 800601c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006020:	f04f 0901 	mov.w	r9, #1
 8006024:	4623      	mov	r3, r4
 8006026:	469a      	mov	sl, r3
 8006028:	f813 2b01 	ldrb.w	r2, [r3], #1
 800602c:	b10a      	cbz	r2, 8006032 <_vfiprintf_r+0x86>
 800602e:	2a25      	cmp	r2, #37	@ 0x25
 8006030:	d1f9      	bne.n	8006026 <_vfiprintf_r+0x7a>
 8006032:	ebba 0b04 	subs.w	fp, sl, r4
 8006036:	d00b      	beq.n	8006050 <_vfiprintf_r+0xa4>
 8006038:	465b      	mov	r3, fp
 800603a:	4622      	mov	r2, r4
 800603c:	4629      	mov	r1, r5
 800603e:	4630      	mov	r0, r6
 8006040:	f7ff ffa1 	bl	8005f86 <__sfputs_r>
 8006044:	3001      	adds	r0, #1
 8006046:	f000 80a7 	beq.w	8006198 <_vfiprintf_r+0x1ec>
 800604a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800604c:	445a      	add	r2, fp
 800604e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006050:	f89a 3000 	ldrb.w	r3, [sl]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 809f 	beq.w	8006198 <_vfiprintf_r+0x1ec>
 800605a:	2300      	movs	r3, #0
 800605c:	f04f 32ff 	mov.w	r2, #4294967295
 8006060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006064:	f10a 0a01 	add.w	sl, sl, #1
 8006068:	9304      	str	r3, [sp, #16]
 800606a:	9307      	str	r3, [sp, #28]
 800606c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006070:	931a      	str	r3, [sp, #104]	@ 0x68
 8006072:	4654      	mov	r4, sl
 8006074:	2205      	movs	r2, #5
 8006076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800607a:	4853      	ldr	r0, [pc, #332]	@ (80061c8 <_vfiprintf_r+0x21c>)
 800607c:	f7fa f930 	bl	80002e0 <memchr>
 8006080:	9a04      	ldr	r2, [sp, #16]
 8006082:	b9d8      	cbnz	r0, 80060bc <_vfiprintf_r+0x110>
 8006084:	06d1      	lsls	r1, r2, #27
 8006086:	bf44      	itt	mi
 8006088:	2320      	movmi	r3, #32
 800608a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800608e:	0713      	lsls	r3, r2, #28
 8006090:	bf44      	itt	mi
 8006092:	232b      	movmi	r3, #43	@ 0x2b
 8006094:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006098:	f89a 3000 	ldrb.w	r3, [sl]
 800609c:	2b2a      	cmp	r3, #42	@ 0x2a
 800609e:	d015      	beq.n	80060cc <_vfiprintf_r+0x120>
 80060a0:	9a07      	ldr	r2, [sp, #28]
 80060a2:	4654      	mov	r4, sl
 80060a4:	2000      	movs	r0, #0
 80060a6:	f04f 0c0a 	mov.w	ip, #10
 80060aa:	4621      	mov	r1, r4
 80060ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060b0:	3b30      	subs	r3, #48	@ 0x30
 80060b2:	2b09      	cmp	r3, #9
 80060b4:	d94b      	bls.n	800614e <_vfiprintf_r+0x1a2>
 80060b6:	b1b0      	cbz	r0, 80060e6 <_vfiprintf_r+0x13a>
 80060b8:	9207      	str	r2, [sp, #28]
 80060ba:	e014      	b.n	80060e6 <_vfiprintf_r+0x13a>
 80060bc:	eba0 0308 	sub.w	r3, r0, r8
 80060c0:	fa09 f303 	lsl.w	r3, r9, r3
 80060c4:	4313      	orrs	r3, r2
 80060c6:	9304      	str	r3, [sp, #16]
 80060c8:	46a2      	mov	sl, r4
 80060ca:	e7d2      	b.n	8006072 <_vfiprintf_r+0xc6>
 80060cc:	9b03      	ldr	r3, [sp, #12]
 80060ce:	1d19      	adds	r1, r3, #4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	9103      	str	r1, [sp, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	bfbb      	ittet	lt
 80060d8:	425b      	neglt	r3, r3
 80060da:	f042 0202 	orrlt.w	r2, r2, #2
 80060de:	9307      	strge	r3, [sp, #28]
 80060e0:	9307      	strlt	r3, [sp, #28]
 80060e2:	bfb8      	it	lt
 80060e4:	9204      	strlt	r2, [sp, #16]
 80060e6:	7823      	ldrb	r3, [r4, #0]
 80060e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80060ea:	d10a      	bne.n	8006102 <_vfiprintf_r+0x156>
 80060ec:	7863      	ldrb	r3, [r4, #1]
 80060ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80060f0:	d132      	bne.n	8006158 <_vfiprintf_r+0x1ac>
 80060f2:	9b03      	ldr	r3, [sp, #12]
 80060f4:	1d1a      	adds	r2, r3, #4
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	9203      	str	r2, [sp, #12]
 80060fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060fe:	3402      	adds	r4, #2
 8006100:	9305      	str	r3, [sp, #20]
 8006102:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80061d8 <_vfiprintf_r+0x22c>
 8006106:	7821      	ldrb	r1, [r4, #0]
 8006108:	2203      	movs	r2, #3
 800610a:	4650      	mov	r0, sl
 800610c:	f7fa f8e8 	bl	80002e0 <memchr>
 8006110:	b138      	cbz	r0, 8006122 <_vfiprintf_r+0x176>
 8006112:	9b04      	ldr	r3, [sp, #16]
 8006114:	eba0 000a 	sub.w	r0, r0, sl
 8006118:	2240      	movs	r2, #64	@ 0x40
 800611a:	4082      	lsls	r2, r0
 800611c:	4313      	orrs	r3, r2
 800611e:	3401      	adds	r4, #1
 8006120:	9304      	str	r3, [sp, #16]
 8006122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006126:	4829      	ldr	r0, [pc, #164]	@ (80061cc <_vfiprintf_r+0x220>)
 8006128:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800612c:	2206      	movs	r2, #6
 800612e:	f7fa f8d7 	bl	80002e0 <memchr>
 8006132:	2800      	cmp	r0, #0
 8006134:	d03f      	beq.n	80061b6 <_vfiprintf_r+0x20a>
 8006136:	4b26      	ldr	r3, [pc, #152]	@ (80061d0 <_vfiprintf_r+0x224>)
 8006138:	bb1b      	cbnz	r3, 8006182 <_vfiprintf_r+0x1d6>
 800613a:	9b03      	ldr	r3, [sp, #12]
 800613c:	3307      	adds	r3, #7
 800613e:	f023 0307 	bic.w	r3, r3, #7
 8006142:	3308      	adds	r3, #8
 8006144:	9303      	str	r3, [sp, #12]
 8006146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006148:	443b      	add	r3, r7
 800614a:	9309      	str	r3, [sp, #36]	@ 0x24
 800614c:	e76a      	b.n	8006024 <_vfiprintf_r+0x78>
 800614e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006152:	460c      	mov	r4, r1
 8006154:	2001      	movs	r0, #1
 8006156:	e7a8      	b.n	80060aa <_vfiprintf_r+0xfe>
 8006158:	2300      	movs	r3, #0
 800615a:	3401      	adds	r4, #1
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	4619      	mov	r1, r3
 8006160:	f04f 0c0a 	mov.w	ip, #10
 8006164:	4620      	mov	r0, r4
 8006166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800616a:	3a30      	subs	r2, #48	@ 0x30
 800616c:	2a09      	cmp	r2, #9
 800616e:	d903      	bls.n	8006178 <_vfiprintf_r+0x1cc>
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0c6      	beq.n	8006102 <_vfiprintf_r+0x156>
 8006174:	9105      	str	r1, [sp, #20]
 8006176:	e7c4      	b.n	8006102 <_vfiprintf_r+0x156>
 8006178:	fb0c 2101 	mla	r1, ip, r1, r2
 800617c:	4604      	mov	r4, r0
 800617e:	2301      	movs	r3, #1
 8006180:	e7f0      	b.n	8006164 <_vfiprintf_r+0x1b8>
 8006182:	ab03      	add	r3, sp, #12
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	462a      	mov	r2, r5
 8006188:	4b12      	ldr	r3, [pc, #72]	@ (80061d4 <_vfiprintf_r+0x228>)
 800618a:	a904      	add	r1, sp, #16
 800618c:	4630      	mov	r0, r6
 800618e:	f3af 8000 	nop.w
 8006192:	4607      	mov	r7, r0
 8006194:	1c78      	adds	r0, r7, #1
 8006196:	d1d6      	bne.n	8006146 <_vfiprintf_r+0x19a>
 8006198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800619a:	07d9      	lsls	r1, r3, #31
 800619c:	d405      	bmi.n	80061aa <_vfiprintf_r+0x1fe>
 800619e:	89ab      	ldrh	r3, [r5, #12]
 80061a0:	059a      	lsls	r2, r3, #22
 80061a2:	d402      	bmi.n	80061aa <_vfiprintf_r+0x1fe>
 80061a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061a6:	f7ff fe8b 	bl	8005ec0 <__retarget_lock_release_recursive>
 80061aa:	89ab      	ldrh	r3, [r5, #12]
 80061ac:	065b      	lsls	r3, r3, #25
 80061ae:	f53f af1f 	bmi.w	8005ff0 <_vfiprintf_r+0x44>
 80061b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061b4:	e71e      	b.n	8005ff4 <_vfiprintf_r+0x48>
 80061b6:	ab03      	add	r3, sp, #12
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	462a      	mov	r2, r5
 80061bc:	4b05      	ldr	r3, [pc, #20]	@ (80061d4 <_vfiprintf_r+0x228>)
 80061be:	a904      	add	r1, sp, #16
 80061c0:	4630      	mov	r0, r6
 80061c2:	f000 f879 	bl	80062b8 <_printf_i>
 80061c6:	e7e4      	b.n	8006192 <_vfiprintf_r+0x1e6>
 80061c8:	080068c1 	.word	0x080068c1
 80061cc:	080068cb 	.word	0x080068cb
 80061d0:	00000000 	.word	0x00000000
 80061d4:	08005f87 	.word	0x08005f87
 80061d8:	080068c7 	.word	0x080068c7

080061dc <_printf_common>:
 80061dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e0:	4616      	mov	r6, r2
 80061e2:	4698      	mov	r8, r3
 80061e4:	688a      	ldr	r2, [r1, #8]
 80061e6:	690b      	ldr	r3, [r1, #16]
 80061e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061ec:	4293      	cmp	r3, r2
 80061ee:	bfb8      	it	lt
 80061f0:	4613      	movlt	r3, r2
 80061f2:	6033      	str	r3, [r6, #0]
 80061f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061f8:	4607      	mov	r7, r0
 80061fa:	460c      	mov	r4, r1
 80061fc:	b10a      	cbz	r2, 8006202 <_printf_common+0x26>
 80061fe:	3301      	adds	r3, #1
 8006200:	6033      	str	r3, [r6, #0]
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	0699      	lsls	r1, r3, #26
 8006206:	bf42      	ittt	mi
 8006208:	6833      	ldrmi	r3, [r6, #0]
 800620a:	3302      	addmi	r3, #2
 800620c:	6033      	strmi	r3, [r6, #0]
 800620e:	6825      	ldr	r5, [r4, #0]
 8006210:	f015 0506 	ands.w	r5, r5, #6
 8006214:	d106      	bne.n	8006224 <_printf_common+0x48>
 8006216:	f104 0a19 	add.w	sl, r4, #25
 800621a:	68e3      	ldr	r3, [r4, #12]
 800621c:	6832      	ldr	r2, [r6, #0]
 800621e:	1a9b      	subs	r3, r3, r2
 8006220:	42ab      	cmp	r3, r5
 8006222:	dc26      	bgt.n	8006272 <_printf_common+0x96>
 8006224:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006228:	6822      	ldr	r2, [r4, #0]
 800622a:	3b00      	subs	r3, #0
 800622c:	bf18      	it	ne
 800622e:	2301      	movne	r3, #1
 8006230:	0692      	lsls	r2, r2, #26
 8006232:	d42b      	bmi.n	800628c <_printf_common+0xb0>
 8006234:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006238:	4641      	mov	r1, r8
 800623a:	4638      	mov	r0, r7
 800623c:	47c8      	blx	r9
 800623e:	3001      	adds	r0, #1
 8006240:	d01e      	beq.n	8006280 <_printf_common+0xa4>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	6922      	ldr	r2, [r4, #16]
 8006246:	f003 0306 	and.w	r3, r3, #6
 800624a:	2b04      	cmp	r3, #4
 800624c:	bf02      	ittt	eq
 800624e:	68e5      	ldreq	r5, [r4, #12]
 8006250:	6833      	ldreq	r3, [r6, #0]
 8006252:	1aed      	subeq	r5, r5, r3
 8006254:	68a3      	ldr	r3, [r4, #8]
 8006256:	bf0c      	ite	eq
 8006258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800625c:	2500      	movne	r5, #0
 800625e:	4293      	cmp	r3, r2
 8006260:	bfc4      	itt	gt
 8006262:	1a9b      	subgt	r3, r3, r2
 8006264:	18ed      	addgt	r5, r5, r3
 8006266:	2600      	movs	r6, #0
 8006268:	341a      	adds	r4, #26
 800626a:	42b5      	cmp	r5, r6
 800626c:	d11a      	bne.n	80062a4 <_printf_common+0xc8>
 800626e:	2000      	movs	r0, #0
 8006270:	e008      	b.n	8006284 <_printf_common+0xa8>
 8006272:	2301      	movs	r3, #1
 8006274:	4652      	mov	r2, sl
 8006276:	4641      	mov	r1, r8
 8006278:	4638      	mov	r0, r7
 800627a:	47c8      	blx	r9
 800627c:	3001      	adds	r0, #1
 800627e:	d103      	bne.n	8006288 <_printf_common+0xac>
 8006280:	f04f 30ff 	mov.w	r0, #4294967295
 8006284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006288:	3501      	adds	r5, #1
 800628a:	e7c6      	b.n	800621a <_printf_common+0x3e>
 800628c:	18e1      	adds	r1, r4, r3
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	2030      	movs	r0, #48	@ 0x30
 8006292:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006296:	4422      	add	r2, r4
 8006298:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800629c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062a0:	3302      	adds	r3, #2
 80062a2:	e7c7      	b.n	8006234 <_printf_common+0x58>
 80062a4:	2301      	movs	r3, #1
 80062a6:	4622      	mov	r2, r4
 80062a8:	4641      	mov	r1, r8
 80062aa:	4638      	mov	r0, r7
 80062ac:	47c8      	blx	r9
 80062ae:	3001      	adds	r0, #1
 80062b0:	d0e6      	beq.n	8006280 <_printf_common+0xa4>
 80062b2:	3601      	adds	r6, #1
 80062b4:	e7d9      	b.n	800626a <_printf_common+0x8e>
	...

080062b8 <_printf_i>:
 80062b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062bc:	7e0f      	ldrb	r7, [r1, #24]
 80062be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062c0:	2f78      	cmp	r7, #120	@ 0x78
 80062c2:	4691      	mov	r9, r2
 80062c4:	4680      	mov	r8, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	469a      	mov	sl, r3
 80062ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062ce:	d807      	bhi.n	80062e0 <_printf_i+0x28>
 80062d0:	2f62      	cmp	r7, #98	@ 0x62
 80062d2:	d80a      	bhi.n	80062ea <_printf_i+0x32>
 80062d4:	2f00      	cmp	r7, #0
 80062d6:	f000 80d1 	beq.w	800647c <_printf_i+0x1c4>
 80062da:	2f58      	cmp	r7, #88	@ 0x58
 80062dc:	f000 80b8 	beq.w	8006450 <_printf_i+0x198>
 80062e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062e8:	e03a      	b.n	8006360 <_printf_i+0xa8>
 80062ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062ee:	2b15      	cmp	r3, #21
 80062f0:	d8f6      	bhi.n	80062e0 <_printf_i+0x28>
 80062f2:	a101      	add	r1, pc, #4	@ (adr r1, 80062f8 <_printf_i+0x40>)
 80062f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062f8:	08006351 	.word	0x08006351
 80062fc:	08006365 	.word	0x08006365
 8006300:	080062e1 	.word	0x080062e1
 8006304:	080062e1 	.word	0x080062e1
 8006308:	080062e1 	.word	0x080062e1
 800630c:	080062e1 	.word	0x080062e1
 8006310:	08006365 	.word	0x08006365
 8006314:	080062e1 	.word	0x080062e1
 8006318:	080062e1 	.word	0x080062e1
 800631c:	080062e1 	.word	0x080062e1
 8006320:	080062e1 	.word	0x080062e1
 8006324:	08006463 	.word	0x08006463
 8006328:	0800638f 	.word	0x0800638f
 800632c:	0800641d 	.word	0x0800641d
 8006330:	080062e1 	.word	0x080062e1
 8006334:	080062e1 	.word	0x080062e1
 8006338:	08006485 	.word	0x08006485
 800633c:	080062e1 	.word	0x080062e1
 8006340:	0800638f 	.word	0x0800638f
 8006344:	080062e1 	.word	0x080062e1
 8006348:	080062e1 	.word	0x080062e1
 800634c:	08006425 	.word	0x08006425
 8006350:	6833      	ldr	r3, [r6, #0]
 8006352:	1d1a      	adds	r2, r3, #4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6032      	str	r2, [r6, #0]
 8006358:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800635c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006360:	2301      	movs	r3, #1
 8006362:	e09c      	b.n	800649e <_printf_i+0x1e6>
 8006364:	6833      	ldr	r3, [r6, #0]
 8006366:	6820      	ldr	r0, [r4, #0]
 8006368:	1d19      	adds	r1, r3, #4
 800636a:	6031      	str	r1, [r6, #0]
 800636c:	0606      	lsls	r6, r0, #24
 800636e:	d501      	bpl.n	8006374 <_printf_i+0xbc>
 8006370:	681d      	ldr	r5, [r3, #0]
 8006372:	e003      	b.n	800637c <_printf_i+0xc4>
 8006374:	0645      	lsls	r5, r0, #25
 8006376:	d5fb      	bpl.n	8006370 <_printf_i+0xb8>
 8006378:	f9b3 5000 	ldrsh.w	r5, [r3]
 800637c:	2d00      	cmp	r5, #0
 800637e:	da03      	bge.n	8006388 <_printf_i+0xd0>
 8006380:	232d      	movs	r3, #45	@ 0x2d
 8006382:	426d      	negs	r5, r5
 8006384:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006388:	4858      	ldr	r0, [pc, #352]	@ (80064ec <_printf_i+0x234>)
 800638a:	230a      	movs	r3, #10
 800638c:	e011      	b.n	80063b2 <_printf_i+0xfa>
 800638e:	6821      	ldr	r1, [r4, #0]
 8006390:	6833      	ldr	r3, [r6, #0]
 8006392:	0608      	lsls	r0, r1, #24
 8006394:	f853 5b04 	ldr.w	r5, [r3], #4
 8006398:	d402      	bmi.n	80063a0 <_printf_i+0xe8>
 800639a:	0649      	lsls	r1, r1, #25
 800639c:	bf48      	it	mi
 800639e:	b2ad      	uxthmi	r5, r5
 80063a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80063a2:	4852      	ldr	r0, [pc, #328]	@ (80064ec <_printf_i+0x234>)
 80063a4:	6033      	str	r3, [r6, #0]
 80063a6:	bf14      	ite	ne
 80063a8:	230a      	movne	r3, #10
 80063aa:	2308      	moveq	r3, #8
 80063ac:	2100      	movs	r1, #0
 80063ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063b2:	6866      	ldr	r6, [r4, #4]
 80063b4:	60a6      	str	r6, [r4, #8]
 80063b6:	2e00      	cmp	r6, #0
 80063b8:	db05      	blt.n	80063c6 <_printf_i+0x10e>
 80063ba:	6821      	ldr	r1, [r4, #0]
 80063bc:	432e      	orrs	r6, r5
 80063be:	f021 0104 	bic.w	r1, r1, #4
 80063c2:	6021      	str	r1, [r4, #0]
 80063c4:	d04b      	beq.n	800645e <_printf_i+0x1a6>
 80063c6:	4616      	mov	r6, r2
 80063c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80063cc:	fb03 5711 	mls	r7, r3, r1, r5
 80063d0:	5dc7      	ldrb	r7, [r0, r7]
 80063d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063d6:	462f      	mov	r7, r5
 80063d8:	42bb      	cmp	r3, r7
 80063da:	460d      	mov	r5, r1
 80063dc:	d9f4      	bls.n	80063c8 <_printf_i+0x110>
 80063de:	2b08      	cmp	r3, #8
 80063e0:	d10b      	bne.n	80063fa <_printf_i+0x142>
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	07df      	lsls	r7, r3, #31
 80063e6:	d508      	bpl.n	80063fa <_printf_i+0x142>
 80063e8:	6923      	ldr	r3, [r4, #16]
 80063ea:	6861      	ldr	r1, [r4, #4]
 80063ec:	4299      	cmp	r1, r3
 80063ee:	bfde      	ittt	le
 80063f0:	2330      	movle	r3, #48	@ 0x30
 80063f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063fa:	1b92      	subs	r2, r2, r6
 80063fc:	6122      	str	r2, [r4, #16]
 80063fe:	f8cd a000 	str.w	sl, [sp]
 8006402:	464b      	mov	r3, r9
 8006404:	aa03      	add	r2, sp, #12
 8006406:	4621      	mov	r1, r4
 8006408:	4640      	mov	r0, r8
 800640a:	f7ff fee7 	bl	80061dc <_printf_common>
 800640e:	3001      	adds	r0, #1
 8006410:	d14a      	bne.n	80064a8 <_printf_i+0x1f0>
 8006412:	f04f 30ff 	mov.w	r0, #4294967295
 8006416:	b004      	add	sp, #16
 8006418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	f043 0320 	orr.w	r3, r3, #32
 8006422:	6023      	str	r3, [r4, #0]
 8006424:	4832      	ldr	r0, [pc, #200]	@ (80064f0 <_printf_i+0x238>)
 8006426:	2778      	movs	r7, #120	@ 0x78
 8006428:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	6831      	ldr	r1, [r6, #0]
 8006430:	061f      	lsls	r7, r3, #24
 8006432:	f851 5b04 	ldr.w	r5, [r1], #4
 8006436:	d402      	bmi.n	800643e <_printf_i+0x186>
 8006438:	065f      	lsls	r7, r3, #25
 800643a:	bf48      	it	mi
 800643c:	b2ad      	uxthmi	r5, r5
 800643e:	6031      	str	r1, [r6, #0]
 8006440:	07d9      	lsls	r1, r3, #31
 8006442:	bf44      	itt	mi
 8006444:	f043 0320 	orrmi.w	r3, r3, #32
 8006448:	6023      	strmi	r3, [r4, #0]
 800644a:	b11d      	cbz	r5, 8006454 <_printf_i+0x19c>
 800644c:	2310      	movs	r3, #16
 800644e:	e7ad      	b.n	80063ac <_printf_i+0xf4>
 8006450:	4826      	ldr	r0, [pc, #152]	@ (80064ec <_printf_i+0x234>)
 8006452:	e7e9      	b.n	8006428 <_printf_i+0x170>
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	f023 0320 	bic.w	r3, r3, #32
 800645a:	6023      	str	r3, [r4, #0]
 800645c:	e7f6      	b.n	800644c <_printf_i+0x194>
 800645e:	4616      	mov	r6, r2
 8006460:	e7bd      	b.n	80063de <_printf_i+0x126>
 8006462:	6833      	ldr	r3, [r6, #0]
 8006464:	6825      	ldr	r5, [r4, #0]
 8006466:	6961      	ldr	r1, [r4, #20]
 8006468:	1d18      	adds	r0, r3, #4
 800646a:	6030      	str	r0, [r6, #0]
 800646c:	062e      	lsls	r6, r5, #24
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	d501      	bpl.n	8006476 <_printf_i+0x1be>
 8006472:	6019      	str	r1, [r3, #0]
 8006474:	e002      	b.n	800647c <_printf_i+0x1c4>
 8006476:	0668      	lsls	r0, r5, #25
 8006478:	d5fb      	bpl.n	8006472 <_printf_i+0x1ba>
 800647a:	8019      	strh	r1, [r3, #0]
 800647c:	2300      	movs	r3, #0
 800647e:	6123      	str	r3, [r4, #16]
 8006480:	4616      	mov	r6, r2
 8006482:	e7bc      	b.n	80063fe <_printf_i+0x146>
 8006484:	6833      	ldr	r3, [r6, #0]
 8006486:	1d1a      	adds	r2, r3, #4
 8006488:	6032      	str	r2, [r6, #0]
 800648a:	681e      	ldr	r6, [r3, #0]
 800648c:	6862      	ldr	r2, [r4, #4]
 800648e:	2100      	movs	r1, #0
 8006490:	4630      	mov	r0, r6
 8006492:	f7f9 ff25 	bl	80002e0 <memchr>
 8006496:	b108      	cbz	r0, 800649c <_printf_i+0x1e4>
 8006498:	1b80      	subs	r0, r0, r6
 800649a:	6060      	str	r0, [r4, #4]
 800649c:	6863      	ldr	r3, [r4, #4]
 800649e:	6123      	str	r3, [r4, #16]
 80064a0:	2300      	movs	r3, #0
 80064a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064a6:	e7aa      	b.n	80063fe <_printf_i+0x146>
 80064a8:	6923      	ldr	r3, [r4, #16]
 80064aa:	4632      	mov	r2, r6
 80064ac:	4649      	mov	r1, r9
 80064ae:	4640      	mov	r0, r8
 80064b0:	47d0      	blx	sl
 80064b2:	3001      	adds	r0, #1
 80064b4:	d0ad      	beq.n	8006412 <_printf_i+0x15a>
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	079b      	lsls	r3, r3, #30
 80064ba:	d413      	bmi.n	80064e4 <_printf_i+0x22c>
 80064bc:	68e0      	ldr	r0, [r4, #12]
 80064be:	9b03      	ldr	r3, [sp, #12]
 80064c0:	4298      	cmp	r0, r3
 80064c2:	bfb8      	it	lt
 80064c4:	4618      	movlt	r0, r3
 80064c6:	e7a6      	b.n	8006416 <_printf_i+0x15e>
 80064c8:	2301      	movs	r3, #1
 80064ca:	4632      	mov	r2, r6
 80064cc:	4649      	mov	r1, r9
 80064ce:	4640      	mov	r0, r8
 80064d0:	47d0      	blx	sl
 80064d2:	3001      	adds	r0, #1
 80064d4:	d09d      	beq.n	8006412 <_printf_i+0x15a>
 80064d6:	3501      	adds	r5, #1
 80064d8:	68e3      	ldr	r3, [r4, #12]
 80064da:	9903      	ldr	r1, [sp, #12]
 80064dc:	1a5b      	subs	r3, r3, r1
 80064de:	42ab      	cmp	r3, r5
 80064e0:	dcf2      	bgt.n	80064c8 <_printf_i+0x210>
 80064e2:	e7eb      	b.n	80064bc <_printf_i+0x204>
 80064e4:	2500      	movs	r5, #0
 80064e6:	f104 0619 	add.w	r6, r4, #25
 80064ea:	e7f5      	b.n	80064d8 <_printf_i+0x220>
 80064ec:	080068d2 	.word	0x080068d2
 80064f0:	080068e3 	.word	0x080068e3

080064f4 <__sflush_r>:
 80064f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064fc:	0716      	lsls	r6, r2, #28
 80064fe:	4605      	mov	r5, r0
 8006500:	460c      	mov	r4, r1
 8006502:	d454      	bmi.n	80065ae <__sflush_r+0xba>
 8006504:	684b      	ldr	r3, [r1, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	dc02      	bgt.n	8006510 <__sflush_r+0x1c>
 800650a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800650c:	2b00      	cmp	r3, #0
 800650e:	dd48      	ble.n	80065a2 <__sflush_r+0xae>
 8006510:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006512:	2e00      	cmp	r6, #0
 8006514:	d045      	beq.n	80065a2 <__sflush_r+0xae>
 8006516:	2300      	movs	r3, #0
 8006518:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800651c:	682f      	ldr	r7, [r5, #0]
 800651e:	6a21      	ldr	r1, [r4, #32]
 8006520:	602b      	str	r3, [r5, #0]
 8006522:	d030      	beq.n	8006586 <__sflush_r+0x92>
 8006524:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006526:	89a3      	ldrh	r3, [r4, #12]
 8006528:	0759      	lsls	r1, r3, #29
 800652a:	d505      	bpl.n	8006538 <__sflush_r+0x44>
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	1ad2      	subs	r2, r2, r3
 8006530:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006532:	b10b      	cbz	r3, 8006538 <__sflush_r+0x44>
 8006534:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006536:	1ad2      	subs	r2, r2, r3
 8006538:	2300      	movs	r3, #0
 800653a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800653c:	6a21      	ldr	r1, [r4, #32]
 800653e:	4628      	mov	r0, r5
 8006540:	47b0      	blx	r6
 8006542:	1c43      	adds	r3, r0, #1
 8006544:	89a3      	ldrh	r3, [r4, #12]
 8006546:	d106      	bne.n	8006556 <__sflush_r+0x62>
 8006548:	6829      	ldr	r1, [r5, #0]
 800654a:	291d      	cmp	r1, #29
 800654c:	d82b      	bhi.n	80065a6 <__sflush_r+0xb2>
 800654e:	4a2a      	ldr	r2, [pc, #168]	@ (80065f8 <__sflush_r+0x104>)
 8006550:	40ca      	lsrs	r2, r1
 8006552:	07d6      	lsls	r6, r2, #31
 8006554:	d527      	bpl.n	80065a6 <__sflush_r+0xb2>
 8006556:	2200      	movs	r2, #0
 8006558:	6062      	str	r2, [r4, #4]
 800655a:	04d9      	lsls	r1, r3, #19
 800655c:	6922      	ldr	r2, [r4, #16]
 800655e:	6022      	str	r2, [r4, #0]
 8006560:	d504      	bpl.n	800656c <__sflush_r+0x78>
 8006562:	1c42      	adds	r2, r0, #1
 8006564:	d101      	bne.n	800656a <__sflush_r+0x76>
 8006566:	682b      	ldr	r3, [r5, #0]
 8006568:	b903      	cbnz	r3, 800656c <__sflush_r+0x78>
 800656a:	6560      	str	r0, [r4, #84]	@ 0x54
 800656c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800656e:	602f      	str	r7, [r5, #0]
 8006570:	b1b9      	cbz	r1, 80065a2 <__sflush_r+0xae>
 8006572:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006576:	4299      	cmp	r1, r3
 8006578:	d002      	beq.n	8006580 <__sflush_r+0x8c>
 800657a:	4628      	mov	r0, r5
 800657c:	f7ff fca2 	bl	8005ec4 <_free_r>
 8006580:	2300      	movs	r3, #0
 8006582:	6363      	str	r3, [r4, #52]	@ 0x34
 8006584:	e00d      	b.n	80065a2 <__sflush_r+0xae>
 8006586:	2301      	movs	r3, #1
 8006588:	4628      	mov	r0, r5
 800658a:	47b0      	blx	r6
 800658c:	4602      	mov	r2, r0
 800658e:	1c50      	adds	r0, r2, #1
 8006590:	d1c9      	bne.n	8006526 <__sflush_r+0x32>
 8006592:	682b      	ldr	r3, [r5, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0c6      	beq.n	8006526 <__sflush_r+0x32>
 8006598:	2b1d      	cmp	r3, #29
 800659a:	d001      	beq.n	80065a0 <__sflush_r+0xac>
 800659c:	2b16      	cmp	r3, #22
 800659e:	d11e      	bne.n	80065de <__sflush_r+0xea>
 80065a0:	602f      	str	r7, [r5, #0]
 80065a2:	2000      	movs	r0, #0
 80065a4:	e022      	b.n	80065ec <__sflush_r+0xf8>
 80065a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065aa:	b21b      	sxth	r3, r3
 80065ac:	e01b      	b.n	80065e6 <__sflush_r+0xf2>
 80065ae:	690f      	ldr	r7, [r1, #16]
 80065b0:	2f00      	cmp	r7, #0
 80065b2:	d0f6      	beq.n	80065a2 <__sflush_r+0xae>
 80065b4:	0793      	lsls	r3, r2, #30
 80065b6:	680e      	ldr	r6, [r1, #0]
 80065b8:	bf08      	it	eq
 80065ba:	694b      	ldreq	r3, [r1, #20]
 80065bc:	600f      	str	r7, [r1, #0]
 80065be:	bf18      	it	ne
 80065c0:	2300      	movne	r3, #0
 80065c2:	eba6 0807 	sub.w	r8, r6, r7
 80065c6:	608b      	str	r3, [r1, #8]
 80065c8:	f1b8 0f00 	cmp.w	r8, #0
 80065cc:	dde9      	ble.n	80065a2 <__sflush_r+0xae>
 80065ce:	6a21      	ldr	r1, [r4, #32]
 80065d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065d2:	4643      	mov	r3, r8
 80065d4:	463a      	mov	r2, r7
 80065d6:	4628      	mov	r0, r5
 80065d8:	47b0      	blx	r6
 80065da:	2800      	cmp	r0, #0
 80065dc:	dc08      	bgt.n	80065f0 <__sflush_r+0xfc>
 80065de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065e6:	81a3      	strh	r3, [r4, #12]
 80065e8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f0:	4407      	add	r7, r0
 80065f2:	eba8 0800 	sub.w	r8, r8, r0
 80065f6:	e7e7      	b.n	80065c8 <__sflush_r+0xd4>
 80065f8:	20400001 	.word	0x20400001

080065fc <_fflush_r>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	690b      	ldr	r3, [r1, #16]
 8006600:	4605      	mov	r5, r0
 8006602:	460c      	mov	r4, r1
 8006604:	b913      	cbnz	r3, 800660c <_fflush_r+0x10>
 8006606:	2500      	movs	r5, #0
 8006608:	4628      	mov	r0, r5
 800660a:	bd38      	pop	{r3, r4, r5, pc}
 800660c:	b118      	cbz	r0, 8006616 <_fflush_r+0x1a>
 800660e:	6a03      	ldr	r3, [r0, #32]
 8006610:	b90b      	cbnz	r3, 8006616 <_fflush_r+0x1a>
 8006612:	f7ff faab 	bl	8005b6c <__sinit>
 8006616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0f3      	beq.n	8006606 <_fflush_r+0xa>
 800661e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006620:	07d0      	lsls	r0, r2, #31
 8006622:	d404      	bmi.n	800662e <_fflush_r+0x32>
 8006624:	0599      	lsls	r1, r3, #22
 8006626:	d402      	bmi.n	800662e <_fflush_r+0x32>
 8006628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800662a:	f7ff fc48 	bl	8005ebe <__retarget_lock_acquire_recursive>
 800662e:	4628      	mov	r0, r5
 8006630:	4621      	mov	r1, r4
 8006632:	f7ff ff5f 	bl	80064f4 <__sflush_r>
 8006636:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006638:	07da      	lsls	r2, r3, #31
 800663a:	4605      	mov	r5, r0
 800663c:	d4e4      	bmi.n	8006608 <_fflush_r+0xc>
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	059b      	lsls	r3, r3, #22
 8006642:	d4e1      	bmi.n	8006608 <_fflush_r+0xc>
 8006644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006646:	f7ff fc3b 	bl	8005ec0 <__retarget_lock_release_recursive>
 800664a:	e7dd      	b.n	8006608 <_fflush_r+0xc>

0800664c <__swhatbuf_r>:
 800664c:	b570      	push	{r4, r5, r6, lr}
 800664e:	460c      	mov	r4, r1
 8006650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006654:	2900      	cmp	r1, #0
 8006656:	b096      	sub	sp, #88	@ 0x58
 8006658:	4615      	mov	r5, r2
 800665a:	461e      	mov	r6, r3
 800665c:	da0d      	bge.n	800667a <__swhatbuf_r+0x2e>
 800665e:	89a3      	ldrh	r3, [r4, #12]
 8006660:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006664:	f04f 0100 	mov.w	r1, #0
 8006668:	bf14      	ite	ne
 800666a:	2340      	movne	r3, #64	@ 0x40
 800666c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006670:	2000      	movs	r0, #0
 8006672:	6031      	str	r1, [r6, #0]
 8006674:	602b      	str	r3, [r5, #0]
 8006676:	b016      	add	sp, #88	@ 0x58
 8006678:	bd70      	pop	{r4, r5, r6, pc}
 800667a:	466a      	mov	r2, sp
 800667c:	f000 f848 	bl	8006710 <_fstat_r>
 8006680:	2800      	cmp	r0, #0
 8006682:	dbec      	blt.n	800665e <__swhatbuf_r+0x12>
 8006684:	9901      	ldr	r1, [sp, #4]
 8006686:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800668a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800668e:	4259      	negs	r1, r3
 8006690:	4159      	adcs	r1, r3
 8006692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006696:	e7eb      	b.n	8006670 <__swhatbuf_r+0x24>

08006698 <__smakebuf_r>:
 8006698:	898b      	ldrh	r3, [r1, #12]
 800669a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800669c:	079d      	lsls	r5, r3, #30
 800669e:	4606      	mov	r6, r0
 80066a0:	460c      	mov	r4, r1
 80066a2:	d507      	bpl.n	80066b4 <__smakebuf_r+0x1c>
 80066a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80066a8:	6023      	str	r3, [r4, #0]
 80066aa:	6123      	str	r3, [r4, #16]
 80066ac:	2301      	movs	r3, #1
 80066ae:	6163      	str	r3, [r4, #20]
 80066b0:	b003      	add	sp, #12
 80066b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b4:	ab01      	add	r3, sp, #4
 80066b6:	466a      	mov	r2, sp
 80066b8:	f7ff ffc8 	bl	800664c <__swhatbuf_r>
 80066bc:	9f00      	ldr	r7, [sp, #0]
 80066be:	4605      	mov	r5, r0
 80066c0:	4639      	mov	r1, r7
 80066c2:	4630      	mov	r0, r6
 80066c4:	f7ff f93a 	bl	800593c <_malloc_r>
 80066c8:	b948      	cbnz	r0, 80066de <__smakebuf_r+0x46>
 80066ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ce:	059a      	lsls	r2, r3, #22
 80066d0:	d4ee      	bmi.n	80066b0 <__smakebuf_r+0x18>
 80066d2:	f023 0303 	bic.w	r3, r3, #3
 80066d6:	f043 0302 	orr.w	r3, r3, #2
 80066da:	81a3      	strh	r3, [r4, #12]
 80066dc:	e7e2      	b.n	80066a4 <__smakebuf_r+0xc>
 80066de:	89a3      	ldrh	r3, [r4, #12]
 80066e0:	6020      	str	r0, [r4, #0]
 80066e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e6:	81a3      	strh	r3, [r4, #12]
 80066e8:	9b01      	ldr	r3, [sp, #4]
 80066ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066ee:	b15b      	cbz	r3, 8006708 <__smakebuf_r+0x70>
 80066f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066f4:	4630      	mov	r0, r6
 80066f6:	f000 f81d 	bl	8006734 <_isatty_r>
 80066fa:	b128      	cbz	r0, 8006708 <__smakebuf_r+0x70>
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	f023 0303 	bic.w	r3, r3, #3
 8006702:	f043 0301 	orr.w	r3, r3, #1
 8006706:	81a3      	strh	r3, [r4, #12]
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	431d      	orrs	r5, r3
 800670c:	81a5      	strh	r5, [r4, #12]
 800670e:	e7cf      	b.n	80066b0 <__smakebuf_r+0x18>

08006710 <_fstat_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	4d07      	ldr	r5, [pc, #28]	@ (8006730 <_fstat_r+0x20>)
 8006714:	2300      	movs	r3, #0
 8006716:	4604      	mov	r4, r0
 8006718:	4608      	mov	r0, r1
 800671a:	4611      	mov	r1, r2
 800671c:	602b      	str	r3, [r5, #0]
 800671e:	f7fa f8ec 	bl	80008fa <_fstat>
 8006722:	1c43      	adds	r3, r0, #1
 8006724:	d102      	bne.n	800672c <_fstat_r+0x1c>
 8006726:	682b      	ldr	r3, [r5, #0]
 8006728:	b103      	cbz	r3, 800672c <_fstat_r+0x1c>
 800672a:	6023      	str	r3, [r4, #0]
 800672c:	bd38      	pop	{r3, r4, r5, pc}
 800672e:	bf00      	nop
 8006730:	240011a4 	.word	0x240011a4

08006734 <_isatty_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4d06      	ldr	r5, [pc, #24]	@ (8006750 <_isatty_r+0x1c>)
 8006738:	2300      	movs	r3, #0
 800673a:	4604      	mov	r4, r0
 800673c:	4608      	mov	r0, r1
 800673e:	602b      	str	r3, [r5, #0]
 8006740:	f7fa f8e0 	bl	8000904 <_isatty>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d102      	bne.n	800674e <_isatty_r+0x1a>
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	b103      	cbz	r3, 800674e <_isatty_r+0x1a>
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	240011a4 	.word	0x240011a4

08006754 <_init>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	bf00      	nop
 8006758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675a:	bc08      	pop	{r3}
 800675c:	469e      	mov	lr, r3
 800675e:	4770      	bx	lr

08006760 <_fini>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	bf00      	nop
 8006764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006766:	bc08      	pop	{r3}
 8006768:	469e      	mov	lr, r3
 800676a:	4770      	bx	lr
