
h7_bootloader_application_2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  080a0000  080a0000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dc8  080a02a0  080a02a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080aa068  080aa068  0000b068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080aa128  080aa128  0000c160  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080aa128  080aa128  0000b128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080aa130  080aa130  0000c160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080aa130  080aa130  0000b130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080aa134  080aa134  0000b134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  24000000  080aa138  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d54  24000160  080aa298  0000c160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001eb4  080aa298  0000ceb4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145ec  00000000  00000000  0000c18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000356e  00000000  00000000  0002077a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00023ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c13  00000000  00000000  00024d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041cc5  00000000  00000000  00025943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016015  00000000  00000000  00067608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00194868  00000000  00000000  0007d61d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00211e85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c8  00000000  00000000  00211ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00216790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a02a0 <__do_global_dtors_aux>:
 80a02a0:	b510      	push	{r4, lr}
 80a02a2:	4c05      	ldr	r4, [pc, #20]	@ (80a02b8 <__do_global_dtors_aux+0x18>)
 80a02a4:	7823      	ldrb	r3, [r4, #0]
 80a02a6:	b933      	cbnz	r3, 80a02b6 <__do_global_dtors_aux+0x16>
 80a02a8:	4b04      	ldr	r3, [pc, #16]	@ (80a02bc <__do_global_dtors_aux+0x1c>)
 80a02aa:	b113      	cbz	r3, 80a02b2 <__do_global_dtors_aux+0x12>
 80a02ac:	4804      	ldr	r0, [pc, #16]	@ (80a02c0 <__do_global_dtors_aux+0x20>)
 80a02ae:	f3af 8000 	nop.w
 80a02b2:	2301      	movs	r3, #1
 80a02b4:	7023      	strb	r3, [r4, #0]
 80a02b6:	bd10      	pop	{r4, pc}
 80a02b8:	24000160 	.word	0x24000160
 80a02bc:	00000000 	.word	0x00000000
 80a02c0:	080aa050 	.word	0x080aa050

080a02c4 <frame_dummy>:
 80a02c4:	b508      	push	{r3, lr}
 80a02c6:	4b03      	ldr	r3, [pc, #12]	@ (80a02d4 <frame_dummy+0x10>)
 80a02c8:	b11b      	cbz	r3, 80a02d2 <frame_dummy+0xe>
 80a02ca:	4903      	ldr	r1, [pc, #12]	@ (80a02d8 <frame_dummy+0x14>)
 80a02cc:	4803      	ldr	r0, [pc, #12]	@ (80a02dc <frame_dummy+0x18>)
 80a02ce:	f3af 8000 	nop.w
 80a02d2:	bd08      	pop	{r3, pc}
 80a02d4:	00000000 	.word	0x00000000
 80a02d8:	24000164 	.word	0x24000164
 80a02dc:	080aa050 	.word	0x080aa050

080a02e0 <memchr>:
 80a02e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80a02e4:	2a10      	cmp	r2, #16
 80a02e6:	db2b      	blt.n	80a0340 <memchr+0x60>
 80a02e8:	f010 0f07 	tst.w	r0, #7
 80a02ec:	d008      	beq.n	80a0300 <memchr+0x20>
 80a02ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a02f2:	3a01      	subs	r2, #1
 80a02f4:	428b      	cmp	r3, r1
 80a02f6:	d02d      	beq.n	80a0354 <memchr+0x74>
 80a02f8:	f010 0f07 	tst.w	r0, #7
 80a02fc:	b342      	cbz	r2, 80a0350 <memchr+0x70>
 80a02fe:	d1f6      	bne.n	80a02ee <memchr+0xe>
 80a0300:	b4f0      	push	{r4, r5, r6, r7}
 80a0302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80a0306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80a030a:	f022 0407 	bic.w	r4, r2, #7
 80a030e:	f07f 0700 	mvns.w	r7, #0
 80a0312:	2300      	movs	r3, #0
 80a0314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80a0318:	3c08      	subs	r4, #8
 80a031a:	ea85 0501 	eor.w	r5, r5, r1
 80a031e:	ea86 0601 	eor.w	r6, r6, r1
 80a0322:	fa85 f547 	uadd8	r5, r5, r7
 80a0326:	faa3 f587 	sel	r5, r3, r7
 80a032a:	fa86 f647 	uadd8	r6, r6, r7
 80a032e:	faa5 f687 	sel	r6, r5, r7
 80a0332:	b98e      	cbnz	r6, 80a0358 <memchr+0x78>
 80a0334:	d1ee      	bne.n	80a0314 <memchr+0x34>
 80a0336:	bcf0      	pop	{r4, r5, r6, r7}
 80a0338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80a033c:	f002 0207 	and.w	r2, r2, #7
 80a0340:	b132      	cbz	r2, 80a0350 <memchr+0x70>
 80a0342:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a0346:	3a01      	subs	r2, #1
 80a0348:	ea83 0301 	eor.w	r3, r3, r1
 80a034c:	b113      	cbz	r3, 80a0354 <memchr+0x74>
 80a034e:	d1f8      	bne.n	80a0342 <memchr+0x62>
 80a0350:	2000      	movs	r0, #0
 80a0352:	4770      	bx	lr
 80a0354:	3801      	subs	r0, #1
 80a0356:	4770      	bx	lr
 80a0358:	2d00      	cmp	r5, #0
 80a035a:	bf06      	itte	eq
 80a035c:	4635      	moveq	r5, r6
 80a035e:	3803      	subeq	r0, #3
 80a0360:	3807      	subne	r0, #7
 80a0362:	f015 0f01 	tst.w	r5, #1
 80a0366:	d107      	bne.n	80a0378 <memchr+0x98>
 80a0368:	3001      	adds	r0, #1
 80a036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80a036e:	bf02      	ittt	eq
 80a0370:	3001      	addeq	r0, #1
 80a0372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80a0376:	3001      	addeq	r0, #1
 80a0378:	bcf0      	pop	{r4, r5, r6, r7}
 80a037a:	3801      	subs	r0, #1
 80a037c:	4770      	bx	lr
 80a037e:	bf00      	nop

080a0380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80a0380:	b480      	push	{r7}
 80a0382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80a0384:	4b4a      	ldr	r3, [pc, #296]	@ (80a04b0 <SystemInit+0x130>)
 80a0386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80a038a:	4a49      	ldr	r2, [pc, #292]	@ (80a04b0 <SystemInit+0x130>)
 80a038c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80a0390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80a0394:	4b46      	ldr	r3, [pc, #280]	@ (80a04b0 <SystemInit+0x130>)
 80a0396:	691b      	ldr	r3, [r3, #16]
 80a0398:	4a45      	ldr	r2, [pc, #276]	@ (80a04b0 <SystemInit+0x130>)
 80a039a:	f043 0310 	orr.w	r3, r3, #16
 80a039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80a03a0:	4b44      	ldr	r3, [pc, #272]	@ (80a04b4 <SystemInit+0x134>)
 80a03a2:	681b      	ldr	r3, [r3, #0]
 80a03a4:	f003 030f 	and.w	r3, r3, #15
 80a03a8:	2b06      	cmp	r3, #6
 80a03aa:	d807      	bhi.n	80a03bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80a03ac:	4b41      	ldr	r3, [pc, #260]	@ (80a04b4 <SystemInit+0x134>)
 80a03ae:	681b      	ldr	r3, [r3, #0]
 80a03b0:	f023 030f 	bic.w	r3, r3, #15
 80a03b4:	4a3f      	ldr	r2, [pc, #252]	@ (80a04b4 <SystemInit+0x134>)
 80a03b6:	f043 0307 	orr.w	r3, r3, #7
 80a03ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80a03bc:	4b3e      	ldr	r3, [pc, #248]	@ (80a04b8 <SystemInit+0x138>)
 80a03be:	681b      	ldr	r3, [r3, #0]
 80a03c0:	4a3d      	ldr	r2, [pc, #244]	@ (80a04b8 <SystemInit+0x138>)
 80a03c2:	f043 0301 	orr.w	r3, r3, #1
 80a03c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80a03c8:	4b3b      	ldr	r3, [pc, #236]	@ (80a04b8 <SystemInit+0x138>)
 80a03ca:	2200      	movs	r2, #0
 80a03cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80a03ce:	4b3a      	ldr	r3, [pc, #232]	@ (80a04b8 <SystemInit+0x138>)
 80a03d0:	681a      	ldr	r2, [r3, #0]
 80a03d2:	4939      	ldr	r1, [pc, #228]	@ (80a04b8 <SystemInit+0x138>)
 80a03d4:	4b39      	ldr	r3, [pc, #228]	@ (80a04bc <SystemInit+0x13c>)
 80a03d6:	4013      	ands	r3, r2
 80a03d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80a03da:	4b36      	ldr	r3, [pc, #216]	@ (80a04b4 <SystemInit+0x134>)
 80a03dc:	681b      	ldr	r3, [r3, #0]
 80a03de:	f003 0308 	and.w	r3, r3, #8
 80a03e2:	2b00      	cmp	r3, #0
 80a03e4:	d007      	beq.n	80a03f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80a03e6:	4b33      	ldr	r3, [pc, #204]	@ (80a04b4 <SystemInit+0x134>)
 80a03e8:	681b      	ldr	r3, [r3, #0]
 80a03ea:	f023 030f 	bic.w	r3, r3, #15
 80a03ee:	4a31      	ldr	r2, [pc, #196]	@ (80a04b4 <SystemInit+0x134>)
 80a03f0:	f043 0307 	orr.w	r3, r3, #7
 80a03f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80a03f6:	4b30      	ldr	r3, [pc, #192]	@ (80a04b8 <SystemInit+0x138>)
 80a03f8:	2200      	movs	r2, #0
 80a03fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80a03fc:	4b2e      	ldr	r3, [pc, #184]	@ (80a04b8 <SystemInit+0x138>)
 80a03fe:	2200      	movs	r2, #0
 80a0400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80a0402:	4b2d      	ldr	r3, [pc, #180]	@ (80a04b8 <SystemInit+0x138>)
 80a0404:	2200      	movs	r2, #0
 80a0406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80a0408:	4b2b      	ldr	r3, [pc, #172]	@ (80a04b8 <SystemInit+0x138>)
 80a040a:	4a2d      	ldr	r2, [pc, #180]	@ (80a04c0 <SystemInit+0x140>)
 80a040c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80a040e:	4b2a      	ldr	r3, [pc, #168]	@ (80a04b8 <SystemInit+0x138>)
 80a0410:	4a2c      	ldr	r2, [pc, #176]	@ (80a04c4 <SystemInit+0x144>)
 80a0412:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80a0414:	4b28      	ldr	r3, [pc, #160]	@ (80a04b8 <SystemInit+0x138>)
 80a0416:	4a2c      	ldr	r2, [pc, #176]	@ (80a04c8 <SystemInit+0x148>)
 80a0418:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80a041a:	4b27      	ldr	r3, [pc, #156]	@ (80a04b8 <SystemInit+0x138>)
 80a041c:	2200      	movs	r2, #0
 80a041e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80a0420:	4b25      	ldr	r3, [pc, #148]	@ (80a04b8 <SystemInit+0x138>)
 80a0422:	4a29      	ldr	r2, [pc, #164]	@ (80a04c8 <SystemInit+0x148>)
 80a0424:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80a0426:	4b24      	ldr	r3, [pc, #144]	@ (80a04b8 <SystemInit+0x138>)
 80a0428:	2200      	movs	r2, #0
 80a042a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80a042c:	4b22      	ldr	r3, [pc, #136]	@ (80a04b8 <SystemInit+0x138>)
 80a042e:	4a26      	ldr	r2, [pc, #152]	@ (80a04c8 <SystemInit+0x148>)
 80a0430:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80a0432:	4b21      	ldr	r3, [pc, #132]	@ (80a04b8 <SystemInit+0x138>)
 80a0434:	2200      	movs	r2, #0
 80a0436:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80a0438:	4b1f      	ldr	r3, [pc, #124]	@ (80a04b8 <SystemInit+0x138>)
 80a043a:	681b      	ldr	r3, [r3, #0]
 80a043c:	4a1e      	ldr	r2, [pc, #120]	@ (80a04b8 <SystemInit+0x138>)
 80a043e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80a0442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80a0444:	4b1c      	ldr	r3, [pc, #112]	@ (80a04b8 <SystemInit+0x138>)
 80a0446:	2200      	movs	r2, #0
 80a0448:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80a044a:	4b20      	ldr	r3, [pc, #128]	@ (80a04cc <SystemInit+0x14c>)
 80a044c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80a044e:	4a1f      	ldr	r2, [pc, #124]	@ (80a04cc <SystemInit+0x14c>)
 80a0450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80a0454:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80a0456:	4b1e      	ldr	r3, [pc, #120]	@ (80a04d0 <SystemInit+0x150>)
 80a0458:	681a      	ldr	r2, [r3, #0]
 80a045a:	4b1e      	ldr	r3, [pc, #120]	@ (80a04d4 <SystemInit+0x154>)
 80a045c:	4013      	ands	r3, r2
 80a045e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80a0462:	d202      	bcs.n	80a046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80a0464:	4b1c      	ldr	r3, [pc, #112]	@ (80a04d8 <SystemInit+0x158>)
 80a0466:	2201      	movs	r2, #1
 80a0468:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80a046a:	4b13      	ldr	r3, [pc, #76]	@ (80a04b8 <SystemInit+0x138>)
 80a046c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80a0470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80a0474:	2b00      	cmp	r3, #0
 80a0476:	d113      	bne.n	80a04a0 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80a0478:	4b0f      	ldr	r3, [pc, #60]	@ (80a04b8 <SystemInit+0x138>)
 80a047a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80a047e:	4a0e      	ldr	r2, [pc, #56]	@ (80a04b8 <SystemInit+0x138>)
 80a0480:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80a0484:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80a0488:	4b14      	ldr	r3, [pc, #80]	@ (80a04dc <SystemInit+0x15c>)
 80a048a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80a048e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80a0490:	4b09      	ldr	r3, [pc, #36]	@ (80a04b8 <SystemInit+0x138>)
 80a0492:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80a0496:	4a08      	ldr	r2, [pc, #32]	@ (80a04b8 <SystemInit+0x138>)
 80a0498:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80a049c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  }

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 80a04a0:	4b03      	ldr	r3, [pc, #12]	@ (80a04b0 <SystemInit+0x130>)
 80a04a2:	4a0f      	ldr	r2, [pc, #60]	@ (80a04e0 <SystemInit+0x160>)
 80a04a4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80a04a6:	bf00      	nop
 80a04a8:	46bd      	mov	sp, r7
 80a04aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a04ae:	4770      	bx	lr
 80a04b0:	e000ed00 	.word	0xe000ed00
 80a04b4:	52002000 	.word	0x52002000
 80a04b8:	58024400 	.word	0x58024400
 80a04bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80a04c0:	02020200 	.word	0x02020200
 80a04c4:	01ff0000 	.word	0x01ff0000
 80a04c8:	01010280 	.word	0x01010280
 80a04cc:	580000c0 	.word	0x580000c0
 80a04d0:	5c001000 	.word	0x5c001000
 80a04d4:	ffff0000 	.word	0xffff0000
 80a04d8:	51008108 	.word	0x51008108
 80a04dc:	52004000 	.word	0x52004000
 80a04e0:	080a0000 	.word	0x080a0000

080a04e4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80a04e4:	b480      	push	{r7}
 80a04e6:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80a04e8:	4b09      	ldr	r3, [pc, #36]	@ (80a0510 <ExitRun0Mode+0x2c>)
 80a04ea:	68db      	ldr	r3, [r3, #12]
 80a04ec:	4a08      	ldr	r2, [pc, #32]	@ (80a0510 <ExitRun0Mode+0x2c>)
 80a04ee:	f023 0302 	bic.w	r3, r3, #2
 80a04f2:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80a04f4:	bf00      	nop
 80a04f6:	4b06      	ldr	r3, [pc, #24]	@ (80a0510 <ExitRun0Mode+0x2c>)
 80a04f8:	685b      	ldr	r3, [r3, #4]
 80a04fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80a04fe:	2b00      	cmp	r3, #0
 80a0500:	d0f9      	beq.n	80a04f6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80a0502:	bf00      	nop
 80a0504:	bf00      	nop
 80a0506:	46bd      	mov	sp, r7
 80a0508:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a050c:	4770      	bx	lr
 80a050e:	bf00      	nop
 80a0510:	58024800 	.word	0x58024800

080a0514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80a0514:	b580      	push	{r7, lr}
 80a0516:	b082      	sub	sp, #8
 80a0518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	printf("Application 2\n\r");
 80a051a:	481a      	ldr	r0, [pc, #104]	@ (80a0584 <main+0x70>)
 80a051c:	f008 ff2c 	bl	80a9378 <iprintf>
//#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80a0520:	f000 fac6 	bl	80a0ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80a0524:	f000 f838 	bl	80a0598 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80a0528:	f000 f8bc 	bl	80a06a4 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
//#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80a052c:	4b16      	ldr	r3, [pc, #88]	@ (80a0588 <main+0x74>)
 80a052e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a0532:	4a15      	ldr	r2, [pc, #84]	@ (80a0588 <main+0x74>)
 80a0534:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80a0538:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a053c:	4b12      	ldr	r3, [pc, #72]	@ (80a0588 <main+0x74>)
 80a053e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a0542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80a0546:	607b      	str	r3, [r7, #4]
 80a0548:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80a054a:	2000      	movs	r0, #0
 80a054c:	f000 fe66 	bl	80a121c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80a0550:	2100      	movs	r1, #0
 80a0552:	2000      	movs	r0, #0
 80a0554:	f000 fe7c 	bl	80a1250 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80a0558:	f000 f8d4 	bl	80a0704 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80a055c:	f008 f87c 	bl	80a8658 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  printf("Firmware Application 2\n\r");
 80a0560:	480a      	ldr	r0, [pc, #40]	@ (80a058c <main+0x78>)
 80a0562:	f008 ff09 	bl	80a9378 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("loop\n\r");
 80a0566:	480a      	ldr	r0, [pc, #40]	@ (80a0590 <main+0x7c>)
 80a0568:	f008 ff06 	bl	80a9378 <iprintf>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11); // Toggle PA11
 80a056c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80a0570:	4808      	ldr	r0, [pc, #32]	@ (80a0594 <main+0x80>)
 80a0572:	f000 fe38 	bl	80a11e6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80a0576:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80a057a:	f000 fb2b 	bl	80a0bd4 <HAL_Delay>
	  printf("loop\n\r");
 80a057e:	bf00      	nop
 80a0580:	e7f1      	b.n	80a0566 <main+0x52>
 80a0582:	bf00      	nop
 80a0584:	080aa068 	.word	0x080aa068
 80a0588:	58024400 	.word	0x58024400
 80a058c:	080aa078 	.word	0x080aa078
 80a0590:	080aa094 	.word	0x080aa094
 80a0594:	58020000 	.word	0x58020000

080a0598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80a0598:	b580      	push	{r7, lr}
 80a059a:	b09c      	sub	sp, #112	@ 0x70
 80a059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80a059e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80a05a2:	224c      	movs	r2, #76	@ 0x4c
 80a05a4:	2100      	movs	r1, #0
 80a05a6:	4618      	mov	r0, r3
 80a05a8:	f008 ff3b 	bl	80a9422 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80a05ac:	1d3b      	adds	r3, r7, #4
 80a05ae:	2220      	movs	r2, #32
 80a05b0:	2100      	movs	r1, #0
 80a05b2:	4618      	mov	r0, r3
 80a05b4:	f008 ff35 	bl	80a9422 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80a05b8:	2004      	movs	r0, #4
 80a05ba:	f002 f8fd 	bl	80a27b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80a05be:	2300      	movs	r3, #0
 80a05c0:	603b      	str	r3, [r7, #0]
 80a05c2:	4b36      	ldr	r3, [pc, #216]	@ (80a069c <SystemClock_Config+0x104>)
 80a05c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a05c6:	4a35      	ldr	r2, [pc, #212]	@ (80a069c <SystemClock_Config+0x104>)
 80a05c8:	f023 0301 	bic.w	r3, r3, #1
 80a05cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80a05ce:	4b33      	ldr	r3, [pc, #204]	@ (80a069c <SystemClock_Config+0x104>)
 80a05d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a05d2:	f003 0301 	and.w	r3, r3, #1
 80a05d6:	603b      	str	r3, [r7, #0]
 80a05d8:	4b31      	ldr	r3, [pc, #196]	@ (80a06a0 <SystemClock_Config+0x108>)
 80a05da:	699b      	ldr	r3, [r3, #24]
 80a05dc:	4a30      	ldr	r2, [pc, #192]	@ (80a06a0 <SystemClock_Config+0x108>)
 80a05de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80a05e2:	6193      	str	r3, [r2, #24]
 80a05e4:	4b2e      	ldr	r3, [pc, #184]	@ (80a06a0 <SystemClock_Config+0x108>)
 80a05e6:	699b      	ldr	r3, [r3, #24]
 80a05e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80a05ec:	603b      	str	r3, [r7, #0]
 80a05ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80a05f0:	bf00      	nop
 80a05f2:	4b2b      	ldr	r3, [pc, #172]	@ (80a06a0 <SystemClock_Config+0x108>)
 80a05f4:	699b      	ldr	r3, [r3, #24]
 80a05f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80a05fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80a05fe:	d1f8      	bne.n	80a05f2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80a0600:	230b      	movs	r3, #11
 80a0602:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80a0604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80a0608:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80a060a:	2301      	movs	r3, #1
 80a060c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80a060e:	2340      	movs	r3, #64	@ 0x40
 80a0610:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80a0612:	2301      	movs	r3, #1
 80a0614:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80a0616:	2302      	movs	r3, #2
 80a0618:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80a061a:	2302      	movs	r3, #2
 80a061c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80a061e:	2305      	movs	r3, #5
 80a0620:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 80a0622:	2330      	movs	r3, #48	@ 0x30
 80a0624:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80a0626:	2302      	movs	r3, #2
 80a0628:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80a062a:	2305      	movs	r3, #5
 80a062c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80a062e:	2302      	movs	r3, #2
 80a0630:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80a0632:	2308      	movs	r3, #8
 80a0634:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80a0636:	2300      	movs	r3, #0
 80a0638:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80a063a:	2300      	movs	r3, #0
 80a063c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80a063e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80a0642:	4618      	mov	r0, r3
 80a0644:	f002 f922 	bl	80a288c <HAL_RCC_OscConfig>
 80a0648:	4603      	mov	r3, r0
 80a064a:	2b00      	cmp	r3, #0
 80a064c:	d001      	beq.n	80a0652 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80a064e:	f000 f8dd 	bl	80a080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80a0652:	233f      	movs	r3, #63	@ 0x3f
 80a0654:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80a0656:	2300      	movs	r3, #0
 80a0658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80a065a:	2300      	movs	r3, #0
 80a065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80a065e:	2300      	movs	r3, #0
 80a0660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80a0662:	2300      	movs	r3, #0
 80a0664:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80a0666:	2300      	movs	r3, #0
 80a0668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 80a066a:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80a066e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80a0670:	2300      	movs	r3, #0
 80a0672:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80a0674:	1d3b      	adds	r3, r7, #4
 80a0676:	2100      	movs	r1, #0
 80a0678:	4618      	mov	r0, r3
 80a067a:	f002 fd61 	bl	80a3140 <HAL_RCC_ClockConfig>
 80a067e:	4603      	mov	r3, r0
 80a0680:	2b00      	cmp	r3, #0
 80a0682:	d001      	beq.n	80a0688 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80a0684:	f000 f8c2 	bl	80a080c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80a0688:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80a068c:	2100      	movs	r1, #0
 80a068e:	2000      	movs	r0, #0
 80a0690:	f002 ff0c 	bl	80a34ac <HAL_RCC_MCOConfig>
}
 80a0694:	bf00      	nop
 80a0696:	3770      	adds	r7, #112	@ 0x70
 80a0698:	46bd      	mov	sp, r7
 80a069a:	bd80      	pop	{r7, pc}
 80a069c:	58000400 	.word	0x58000400
 80a06a0:	58024800 	.word	0x58024800

080a06a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80a06a4:	b580      	push	{r7, lr}
 80a06a6:	b0b2      	sub	sp, #200	@ 0xc8
 80a06a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80a06aa:	463b      	mov	r3, r7
 80a06ac:	22c8      	movs	r2, #200	@ 0xc8
 80a06ae:	2100      	movs	r1, #0
 80a06b0:	4618      	mov	r0, r3
 80a06b2:	f008 feb6 	bl	80a9422 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80a06b6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80a06ba:	f04f 0300 	mov.w	r3, #0
 80a06be:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80a06c2:	2302      	movs	r3, #2
 80a06c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80a06c6:	230c      	movs	r3, #12
 80a06c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80a06ca:	2302      	movs	r3, #2
 80a06cc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80a06ce:	2302      	movs	r3, #2
 80a06d0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80a06d2:	2302      	movs	r3, #2
 80a06d4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80a06d6:	23c0      	movs	r3, #192	@ 0xc0
 80a06d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80a06da:	2320      	movs	r3, #32
 80a06dc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80a06de:	2300      	movs	r3, #0
 80a06e0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80a06e2:	2300      	movs	r3, #0
 80a06e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80a06e8:	463b      	mov	r3, r7
 80a06ea:	4618      	mov	r0, r3
 80a06ec:	f003 f8f2 	bl	80a38d4 <HAL_RCCEx_PeriphCLKConfig>
 80a06f0:	4603      	mov	r3, r0
 80a06f2:	2b00      	cmp	r3, #0
 80a06f4:	d001      	beq.n	80a06fa <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80a06f6:	f000 f889 	bl	80a080c <Error_Handler>
  }
}
 80a06fa:	bf00      	nop
 80a06fc:	37c8      	adds	r7, #200	@ 0xc8
 80a06fe:	46bd      	mov	sp, r7
 80a0700:	bd80      	pop	{r7, pc}
	...

080a0704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80a0704:	b580      	push	{r7, lr}
 80a0706:	b08a      	sub	sp, #40	@ 0x28
 80a0708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80a070a:	f107 0314 	add.w	r3, r7, #20
 80a070e:	2200      	movs	r2, #0
 80a0710:	601a      	str	r2, [r3, #0]
 80a0712:	605a      	str	r2, [r3, #4]
 80a0714:	609a      	str	r2, [r3, #8]
 80a0716:	60da      	str	r2, [r3, #12]
 80a0718:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80a071a:	4b3a      	ldr	r3, [pc, #232]	@ (80a0804 <MX_GPIO_Init+0x100>)
 80a071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a0720:	4a38      	ldr	r2, [pc, #224]	@ (80a0804 <MX_GPIO_Init+0x100>)
 80a0722:	f043 0302 	orr.w	r3, r3, #2
 80a0726:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a072a:	4b36      	ldr	r3, [pc, #216]	@ (80a0804 <MX_GPIO_Init+0x100>)
 80a072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a0730:	f003 0302 	and.w	r3, r3, #2
 80a0734:	613b      	str	r3, [r7, #16]
 80a0736:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80a0738:	4b32      	ldr	r3, [pc, #200]	@ (80a0804 <MX_GPIO_Init+0x100>)
 80a073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a073e:	4a31      	ldr	r2, [pc, #196]	@ (80a0804 <MX_GPIO_Init+0x100>)
 80a0740:	f043 0304 	orr.w	r3, r3, #4
 80a0744:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a0748:	4b2e      	ldr	r3, [pc, #184]	@ (80a0804 <MX_GPIO_Init+0x100>)
 80a074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a074e:	f003 0304 	and.w	r3, r3, #4
 80a0752:	60fb      	str	r3, [r7, #12]
 80a0754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80a0756:	4b2b      	ldr	r3, [pc, #172]	@ (80a0804 <MX_GPIO_Init+0x100>)
 80a0758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a075c:	4a29      	ldr	r2, [pc, #164]	@ (80a0804 <MX_GPIO_Init+0x100>)
 80a075e:	f043 0301 	orr.w	r3, r3, #1
 80a0762:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a0766:	4b27      	ldr	r3, [pc, #156]	@ (80a0804 <MX_GPIO_Init+0x100>)
 80a0768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a076c:	f003 0301 	and.w	r3, r3, #1
 80a0770:	60bb      	str	r3, [r7, #8]
 80a0772:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80a0774:	4b23      	ldr	r3, [pc, #140]	@ (80a0804 <MX_GPIO_Init+0x100>)
 80a0776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a077a:	4a22      	ldr	r2, [pc, #136]	@ (80a0804 <MX_GPIO_Init+0x100>)
 80a077c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80a0780:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a0784:	4b1f      	ldr	r3, [pc, #124]	@ (80a0804 <MX_GPIO_Init+0x100>)
 80a0786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a078a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a078e:	607b      	str	r3, [r7, #4]
 80a0790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80a0792:	4b1c      	ldr	r3, [pc, #112]	@ (80a0804 <MX_GPIO_Init+0x100>)
 80a0794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a0798:	4a1a      	ldr	r2, [pc, #104]	@ (80a0804 <MX_GPIO_Init+0x100>)
 80a079a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80a079e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a07a2:	4b18      	ldr	r3, [pc, #96]	@ (80a0804 <MX_GPIO_Init+0x100>)
 80a07a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a07a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80a07ac:	603b      	str	r3, [r7, #0]
 80a07ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80a07b0:	2200      	movs	r2, #0
 80a07b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80a07b6:	4814      	ldr	r0, [pc, #80]	@ (80a0808 <MX_GPIO_Init+0x104>)
 80a07b8:	f000 fcfc 	bl	80a11b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80a07bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80a07c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a07c2:	2302      	movs	r3, #2
 80a07c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a07c6:	2300      	movs	r3, #0
 80a07c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80a07ca:	2300      	movs	r3, #0
 80a07cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80a07ce:	2300      	movs	r3, #0
 80a07d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80a07d2:	f107 0314 	add.w	r3, r7, #20
 80a07d6:	4619      	mov	r1, r3
 80a07d8:	480b      	ldr	r0, [pc, #44]	@ (80a0808 <MX_GPIO_Init+0x104>)
 80a07da:	f000 fb3b 	bl	80a0e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80a07de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80a07e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80a07e4:	2301      	movs	r3, #1
 80a07e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a07e8:	2300      	movs	r3, #0
 80a07ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80a07ec:	2300      	movs	r3, #0
 80a07ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80a07f0:	f107 0314 	add.w	r3, r7, #20
 80a07f4:	4619      	mov	r1, r3
 80a07f6:	4804      	ldr	r0, [pc, #16]	@ (80a0808 <MX_GPIO_Init+0x104>)
 80a07f8:	f000 fb2c 	bl	80a0e54 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80a07fc:	bf00      	nop
 80a07fe:	3728      	adds	r7, #40	@ 0x28
 80a0800:	46bd      	mov	sp, r7
 80a0802:	bd80      	pop	{r7, pc}
 80a0804:	58024400 	.word	0x58024400
 80a0808:	58020000 	.word	0x58020000

080a080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80a080c:	b480      	push	{r7}
 80a080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80a0810:	b672      	cpsid	i
}
 80a0812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80a0814:	bf00      	nop
 80a0816:	e7fd      	b.n	80a0814 <Error_Handler+0x8>

080a0818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80a0818:	b480      	push	{r7}
 80a081a:	b083      	sub	sp, #12
 80a081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80a081e:	4b0a      	ldr	r3, [pc, #40]	@ (80a0848 <HAL_MspInit+0x30>)
 80a0820:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80a0824:	4a08      	ldr	r2, [pc, #32]	@ (80a0848 <HAL_MspInit+0x30>)
 80a0826:	f043 0302 	orr.w	r3, r3, #2
 80a082a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80a082e:	4b06      	ldr	r3, [pc, #24]	@ (80a0848 <HAL_MspInit+0x30>)
 80a0830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80a0834:	f003 0302 	and.w	r3, r3, #2
 80a0838:	607b      	str	r3, [r7, #4]
 80a083a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80a083c:	bf00      	nop
 80a083e:	370c      	adds	r7, #12
 80a0840:	46bd      	mov	sp, r7
 80a0842:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0846:	4770      	bx	lr
 80a0848:	58024400 	.word	0x58024400

080a084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80a084c:	b480      	push	{r7}
 80a084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80a0850:	bf00      	nop
 80a0852:	e7fd      	b.n	80a0850 <NMI_Handler+0x4>

080a0854 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80a0854:	b480      	push	{r7}
 80a0856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80a0858:	bf00      	nop
 80a085a:	e7fd      	b.n	80a0858 <HardFault_Handler+0x4>

080a085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80a085c:	b480      	push	{r7}
 80a085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80a0860:	bf00      	nop
 80a0862:	e7fd      	b.n	80a0860 <MemManage_Handler+0x4>

080a0864 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80a0864:	b480      	push	{r7}
 80a0866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80a0868:	bf00      	nop
 80a086a:	e7fd      	b.n	80a0868 <BusFault_Handler+0x4>

080a086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80a086c:	b480      	push	{r7}
 80a086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80a0870:	bf00      	nop
 80a0872:	e7fd      	b.n	80a0870 <UsageFault_Handler+0x4>

080a0874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80a0874:	b480      	push	{r7}
 80a0876:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80a0878:	bf00      	nop
 80a087a:	46bd      	mov	sp, r7
 80a087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0880:	4770      	bx	lr

080a0882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80a0882:	b480      	push	{r7}
 80a0884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80a0886:	bf00      	nop
 80a0888:	46bd      	mov	sp, r7
 80a088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a088e:	4770      	bx	lr

080a0890 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80a0890:	b480      	push	{r7}
 80a0892:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80a0894:	bf00      	nop
 80a0896:	46bd      	mov	sp, r7
 80a0898:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a089c:	4770      	bx	lr

080a089e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80a089e:	b580      	push	{r7, lr}
 80a08a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80a08a2:	f000 f977 	bl	80a0b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80a08a6:	bf00      	nop
 80a08a8:	bd80      	pop	{r7, pc}
	...

080a08ac <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80a08ac:	b580      	push	{r7, lr}
 80a08ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80a08b0:	4802      	ldr	r0, [pc, #8]	@ (80a08bc <OTG_HS_IRQHandler+0x10>)
 80a08b2:	f000 fe22 	bl	80a14fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80a08b6:	bf00      	nop
 80a08b8:	bd80      	pop	{r7, pc}
 80a08ba:	bf00      	nop
 80a08bc:	24001664 	.word	0x24001664

080a08c0 <ITM_SendChar>:
#define DEMCR        			*((volatile uint32_t*) 0xE000EDFCU )
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )
void ITM_SendChar(uint8_t ch)
{
 80a08c0:	b480      	push	{r7}
 80a08c2:	b083      	sub	sp, #12
 80a08c4:	af00      	add	r7, sp, #0
 80a08c6:	4603      	mov	r3, r0
 80a08c8:	71fb      	strb	r3, [r7, #7]
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80a08ca:	4b0f      	ldr	r3, [pc, #60]	@ (80a0908 <ITM_SendChar+0x48>)
 80a08cc:	681b      	ldr	r3, [r3, #0]
 80a08ce:	4a0e      	ldr	r2, [pc, #56]	@ (80a0908 <ITM_SendChar+0x48>)
 80a08d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80a08d4:	6013      	str	r3, [r2, #0]
	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80a08d6:	4b0d      	ldr	r3, [pc, #52]	@ (80a090c <ITM_SendChar+0x4c>)
 80a08d8:	681b      	ldr	r3, [r3, #0]
 80a08da:	4a0c      	ldr	r2, [pc, #48]	@ (80a090c <ITM_SendChar+0x4c>)
 80a08dc:	f043 0301 	orr.w	r3, r3, #1
 80a08e0:	6013      	str	r3, [r2, #0]
	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80a08e2:	bf00      	nop
 80a08e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80a08e8:	681b      	ldr	r3, [r3, #0]
 80a08ea:	f003 0301 	and.w	r3, r3, #1
 80a08ee:	2b00      	cmp	r3, #0
 80a08f0:	d0f8      	beq.n	80a08e4 <ITM_SendChar+0x24>
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80a08f2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80a08f6:	79fb      	ldrb	r3, [r7, #7]
 80a08f8:	6013      	str	r3, [r2, #0]
}
 80a08fa:	bf00      	nop
 80a08fc:	370c      	adds	r7, #12
 80a08fe:	46bd      	mov	sp, r7
 80a0900:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0904:	4770      	bx	lr
 80a0906:	bf00      	nop
 80a0908:	e000edfc 	.word	0xe000edfc
 80a090c:	e0000e00 	.word	0xe0000e00

080a0910 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80a0910:	b580      	push	{r7, lr}
 80a0912:	b086      	sub	sp, #24
 80a0914:	af00      	add	r7, sp, #0
 80a0916:	60f8      	str	r0, [r7, #12]
 80a0918:	60b9      	str	r1, [r7, #8]
 80a091a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80a091c:	2300      	movs	r3, #0
 80a091e:	617b      	str	r3, [r7, #20]
 80a0920:	e00a      	b.n	80a0938 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80a0922:	f3af 8000 	nop.w
 80a0926:	4601      	mov	r1, r0
 80a0928:	68bb      	ldr	r3, [r7, #8]
 80a092a:	1c5a      	adds	r2, r3, #1
 80a092c:	60ba      	str	r2, [r7, #8]
 80a092e:	b2ca      	uxtb	r2, r1
 80a0930:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80a0932:	697b      	ldr	r3, [r7, #20]
 80a0934:	3301      	adds	r3, #1
 80a0936:	617b      	str	r3, [r7, #20]
 80a0938:	697a      	ldr	r2, [r7, #20]
 80a093a:	687b      	ldr	r3, [r7, #4]
 80a093c:	429a      	cmp	r2, r3
 80a093e:	dbf0      	blt.n	80a0922 <_read+0x12>
  }

  return len;
 80a0940:	687b      	ldr	r3, [r7, #4]
}
 80a0942:	4618      	mov	r0, r3
 80a0944:	3718      	adds	r7, #24
 80a0946:	46bd      	mov	sp, r7
 80a0948:	bd80      	pop	{r7, pc}

080a094a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80a094a:	b580      	push	{r7, lr}
 80a094c:	b086      	sub	sp, #24
 80a094e:	af00      	add	r7, sp, #0
 80a0950:	60f8      	str	r0, [r7, #12]
 80a0952:	60b9      	str	r1, [r7, #8]
 80a0954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80a0956:	2300      	movs	r3, #0
 80a0958:	617b      	str	r3, [r7, #20]
 80a095a:	e009      	b.n	80a0970 <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80a095c:	68bb      	ldr	r3, [r7, #8]
 80a095e:	1c5a      	adds	r2, r3, #1
 80a0960:	60ba      	str	r2, [r7, #8]
 80a0962:	781b      	ldrb	r3, [r3, #0]
 80a0964:	4618      	mov	r0, r3
 80a0966:	f7ff ffab 	bl	80a08c0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80a096a:	697b      	ldr	r3, [r7, #20]
 80a096c:	3301      	adds	r3, #1
 80a096e:	617b      	str	r3, [r7, #20]
 80a0970:	697a      	ldr	r2, [r7, #20]
 80a0972:	687b      	ldr	r3, [r7, #4]
 80a0974:	429a      	cmp	r2, r3
 80a0976:	dbf1      	blt.n	80a095c <_write+0x12>
  }
  return len;
 80a0978:	687b      	ldr	r3, [r7, #4]
}
 80a097a:	4618      	mov	r0, r3
 80a097c:	3718      	adds	r7, #24
 80a097e:	46bd      	mov	sp, r7
 80a0980:	bd80      	pop	{r7, pc}

080a0982 <_close>:

int _close(int file)
{
 80a0982:	b480      	push	{r7}
 80a0984:	b083      	sub	sp, #12
 80a0986:	af00      	add	r7, sp, #0
 80a0988:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80a098a:	f04f 33ff 	mov.w	r3, #4294967295
}
 80a098e:	4618      	mov	r0, r3
 80a0990:	370c      	adds	r7, #12
 80a0992:	46bd      	mov	sp, r7
 80a0994:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0998:	4770      	bx	lr

080a099a <_fstat>:


int _fstat(int file, struct stat *st)
{
 80a099a:	b480      	push	{r7}
 80a099c:	b083      	sub	sp, #12
 80a099e:	af00      	add	r7, sp, #0
 80a09a0:	6078      	str	r0, [r7, #4]
 80a09a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80a09a4:	683b      	ldr	r3, [r7, #0]
 80a09a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80a09aa:	605a      	str	r2, [r3, #4]
  return 0;
 80a09ac:	2300      	movs	r3, #0
}
 80a09ae:	4618      	mov	r0, r3
 80a09b0:	370c      	adds	r7, #12
 80a09b2:	46bd      	mov	sp, r7
 80a09b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a09b8:	4770      	bx	lr

080a09ba <_isatty>:

int _isatty(int file)
{
 80a09ba:	b480      	push	{r7}
 80a09bc:	b083      	sub	sp, #12
 80a09be:	af00      	add	r7, sp, #0
 80a09c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80a09c2:	2301      	movs	r3, #1
}
 80a09c4:	4618      	mov	r0, r3
 80a09c6:	370c      	adds	r7, #12
 80a09c8:	46bd      	mov	sp, r7
 80a09ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a09ce:	4770      	bx	lr

080a09d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80a09d0:	b480      	push	{r7}
 80a09d2:	b085      	sub	sp, #20
 80a09d4:	af00      	add	r7, sp, #0
 80a09d6:	60f8      	str	r0, [r7, #12]
 80a09d8:	60b9      	str	r1, [r7, #8]
 80a09da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80a09dc:	2300      	movs	r3, #0
}
 80a09de:	4618      	mov	r0, r3
 80a09e0:	3714      	adds	r7, #20
 80a09e2:	46bd      	mov	sp, r7
 80a09e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a09e8:	4770      	bx	lr
	...

080a09ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80a09ec:	b580      	push	{r7, lr}
 80a09ee:	b086      	sub	sp, #24
 80a09f0:	af00      	add	r7, sp, #0
 80a09f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80a09f4:	4a14      	ldr	r2, [pc, #80]	@ (80a0a48 <_sbrk+0x5c>)
 80a09f6:	4b15      	ldr	r3, [pc, #84]	@ (80a0a4c <_sbrk+0x60>)
 80a09f8:	1ad3      	subs	r3, r2, r3
 80a09fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80a09fc:	697b      	ldr	r3, [r7, #20]
 80a09fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80a0a00:	4b13      	ldr	r3, [pc, #76]	@ (80a0a50 <_sbrk+0x64>)
 80a0a02:	681b      	ldr	r3, [r3, #0]
 80a0a04:	2b00      	cmp	r3, #0
 80a0a06:	d102      	bne.n	80a0a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80a0a08:	4b11      	ldr	r3, [pc, #68]	@ (80a0a50 <_sbrk+0x64>)
 80a0a0a:	4a12      	ldr	r2, [pc, #72]	@ (80a0a54 <_sbrk+0x68>)
 80a0a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80a0a0e:	4b10      	ldr	r3, [pc, #64]	@ (80a0a50 <_sbrk+0x64>)
 80a0a10:	681a      	ldr	r2, [r3, #0]
 80a0a12:	687b      	ldr	r3, [r7, #4]
 80a0a14:	4413      	add	r3, r2
 80a0a16:	693a      	ldr	r2, [r7, #16]
 80a0a18:	429a      	cmp	r2, r3
 80a0a1a:	d207      	bcs.n	80a0a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80a0a1c:	f008 fd50 	bl	80a94c0 <__errno>
 80a0a20:	4603      	mov	r3, r0
 80a0a22:	220c      	movs	r2, #12
 80a0a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80a0a26:	f04f 33ff 	mov.w	r3, #4294967295
 80a0a2a:	e009      	b.n	80a0a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80a0a2c:	4b08      	ldr	r3, [pc, #32]	@ (80a0a50 <_sbrk+0x64>)
 80a0a2e:	681b      	ldr	r3, [r3, #0]
 80a0a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80a0a32:	4b07      	ldr	r3, [pc, #28]	@ (80a0a50 <_sbrk+0x64>)
 80a0a34:	681a      	ldr	r2, [r3, #0]
 80a0a36:	687b      	ldr	r3, [r7, #4]
 80a0a38:	4413      	add	r3, r2
 80a0a3a:	4a05      	ldr	r2, [pc, #20]	@ (80a0a50 <_sbrk+0x64>)
 80a0a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80a0a3e:	68fb      	ldr	r3, [r7, #12]
}
 80a0a40:	4618      	mov	r0, r3
 80a0a42:	3718      	adds	r7, #24
 80a0a44:	46bd      	mov	sp, r7
 80a0a46:	bd80      	pop	{r7, pc}
 80a0a48:	2407fffc 	.word	0x2407fffc
 80a0a4c:	00000400 	.word	0x00000400
 80a0a50:	2400017c 	.word	0x2400017c
 80a0a54:	24001eb8 	.word	0x24001eb8

080a0a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80a0a58:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80a0a94 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80a0a5c:	f7ff fd42 	bl	80a04e4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80a0a60:	f7ff fc8e 	bl	80a0380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80a0a64:	480c      	ldr	r0, [pc, #48]	@ (80a0a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80a0a66:	490d      	ldr	r1, [pc, #52]	@ (80a0a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80a0a68:	4a0d      	ldr	r2, [pc, #52]	@ (80a0aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80a0a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80a0a6c:	e002      	b.n	80a0a74 <LoopCopyDataInit>

080a0a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80a0a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80a0a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80a0a72:	3304      	adds	r3, #4

080a0a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80a0a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80a0a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80a0a78:	d3f9      	bcc.n	80a0a6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80a0a7a:	4a0a      	ldr	r2, [pc, #40]	@ (80a0aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80a0a7c:	4c0a      	ldr	r4, [pc, #40]	@ (80a0aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80a0a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80a0a80:	e001      	b.n	80a0a86 <LoopFillZerobss>

080a0a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80a0a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80a0a84:	3204      	adds	r2, #4

080a0a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80a0a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80a0a88:	d3fb      	bcc.n	80a0a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80a0a8a:	f008 fd1f 	bl	80a94cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80a0a8e:	f7ff fd41 	bl	80a0514 <main>
  bx  lr
 80a0a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80a0a94:	2407fffc 	.word	0x2407fffc
  ldr r0, =_sdata
 80a0a98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80a0a9c:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 80a0aa0:	080aa138 	.word	0x080aa138
  ldr r2, =_sbss
 80a0aa4:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 80a0aa8:	24001eb4 	.word	0x24001eb4

080a0aac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80a0aac:	e7fe      	b.n	80a0aac <ADC3_IRQHandler>
	...

080a0ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80a0ab0:	b580      	push	{r7, lr}
 80a0ab2:	b082      	sub	sp, #8
 80a0ab4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80a0ab6:	2003      	movs	r0, #3
 80a0ab8:	f000 f98c 	bl	80a0dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80a0abc:	f002 fd60 	bl	80a3580 <HAL_RCC_GetSysClockFreq>
 80a0ac0:	4602      	mov	r2, r0
 80a0ac2:	4b15      	ldr	r3, [pc, #84]	@ (80a0b18 <HAL_Init+0x68>)
 80a0ac4:	699b      	ldr	r3, [r3, #24]
 80a0ac6:	0a1b      	lsrs	r3, r3, #8
 80a0ac8:	f003 030f 	and.w	r3, r3, #15
 80a0acc:	4913      	ldr	r1, [pc, #76]	@ (80a0b1c <HAL_Init+0x6c>)
 80a0ace:	5ccb      	ldrb	r3, [r1, r3]
 80a0ad0:	f003 031f 	and.w	r3, r3, #31
 80a0ad4:	fa22 f303 	lsr.w	r3, r2, r3
 80a0ad8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80a0ada:	4b0f      	ldr	r3, [pc, #60]	@ (80a0b18 <HAL_Init+0x68>)
 80a0adc:	699b      	ldr	r3, [r3, #24]
 80a0ade:	f003 030f 	and.w	r3, r3, #15
 80a0ae2:	4a0e      	ldr	r2, [pc, #56]	@ (80a0b1c <HAL_Init+0x6c>)
 80a0ae4:	5cd3      	ldrb	r3, [r2, r3]
 80a0ae6:	f003 031f 	and.w	r3, r3, #31
 80a0aea:	687a      	ldr	r2, [r7, #4]
 80a0aec:	fa22 f303 	lsr.w	r3, r2, r3
 80a0af0:	4a0b      	ldr	r2, [pc, #44]	@ (80a0b20 <HAL_Init+0x70>)
 80a0af2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80a0af4:	4a0b      	ldr	r2, [pc, #44]	@ (80a0b24 <HAL_Init+0x74>)
 80a0af6:	687b      	ldr	r3, [r7, #4]
 80a0af8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80a0afa:	2000      	movs	r0, #0
 80a0afc:	f000 f814 	bl	80a0b28 <HAL_InitTick>
 80a0b00:	4603      	mov	r3, r0
 80a0b02:	2b00      	cmp	r3, #0
 80a0b04:	d001      	beq.n	80a0b0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80a0b06:	2301      	movs	r3, #1
 80a0b08:	e002      	b.n	80a0b10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80a0b0a:	f7ff fe85 	bl	80a0818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80a0b0e:	2300      	movs	r3, #0
}
 80a0b10:	4618      	mov	r0, r3
 80a0b12:	3708      	adds	r7, #8
 80a0b14:	46bd      	mov	sp, r7
 80a0b16:	bd80      	pop	{r7, pc}
 80a0b18:	58024400 	.word	0x58024400
 80a0b1c:	080aa0e4 	.word	0x080aa0e4
 80a0b20:	24000004 	.word	0x24000004
 80a0b24:	24000000 	.word	0x24000000

080a0b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80a0b28:	b580      	push	{r7, lr}
 80a0b2a:	b082      	sub	sp, #8
 80a0b2c:	af00      	add	r7, sp, #0
 80a0b2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80a0b30:	4b15      	ldr	r3, [pc, #84]	@ (80a0b88 <HAL_InitTick+0x60>)
 80a0b32:	781b      	ldrb	r3, [r3, #0]
 80a0b34:	2b00      	cmp	r3, #0
 80a0b36:	d101      	bne.n	80a0b3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80a0b38:	2301      	movs	r3, #1
 80a0b3a:	e021      	b.n	80a0b80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80a0b3c:	4b13      	ldr	r3, [pc, #76]	@ (80a0b8c <HAL_InitTick+0x64>)
 80a0b3e:	681a      	ldr	r2, [r3, #0]
 80a0b40:	4b11      	ldr	r3, [pc, #68]	@ (80a0b88 <HAL_InitTick+0x60>)
 80a0b42:	781b      	ldrb	r3, [r3, #0]
 80a0b44:	4619      	mov	r1, r3
 80a0b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80a0b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 80a0b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 80a0b52:	4618      	mov	r0, r3
 80a0b54:	f000 f971 	bl	80a0e3a <HAL_SYSTICK_Config>
 80a0b58:	4603      	mov	r3, r0
 80a0b5a:	2b00      	cmp	r3, #0
 80a0b5c:	d001      	beq.n	80a0b62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80a0b5e:	2301      	movs	r3, #1
 80a0b60:	e00e      	b.n	80a0b80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80a0b62:	687b      	ldr	r3, [r7, #4]
 80a0b64:	2b0f      	cmp	r3, #15
 80a0b66:	d80a      	bhi.n	80a0b7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80a0b68:	2200      	movs	r2, #0
 80a0b6a:	6879      	ldr	r1, [r7, #4]
 80a0b6c:	f04f 30ff 	mov.w	r0, #4294967295
 80a0b70:	f000 f93b 	bl	80a0dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80a0b74:	4a06      	ldr	r2, [pc, #24]	@ (80a0b90 <HAL_InitTick+0x68>)
 80a0b76:	687b      	ldr	r3, [r7, #4]
 80a0b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80a0b7a:	2300      	movs	r3, #0
 80a0b7c:	e000      	b.n	80a0b80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80a0b7e:	2301      	movs	r3, #1
}
 80a0b80:	4618      	mov	r0, r3
 80a0b82:	3708      	adds	r7, #8
 80a0b84:	46bd      	mov	sp, r7
 80a0b86:	bd80      	pop	{r7, pc}
 80a0b88:	2400000c 	.word	0x2400000c
 80a0b8c:	24000000 	.word	0x24000000
 80a0b90:	24000008 	.word	0x24000008

080a0b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80a0b94:	b480      	push	{r7}
 80a0b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80a0b98:	4b06      	ldr	r3, [pc, #24]	@ (80a0bb4 <HAL_IncTick+0x20>)
 80a0b9a:	781b      	ldrb	r3, [r3, #0]
 80a0b9c:	461a      	mov	r2, r3
 80a0b9e:	4b06      	ldr	r3, [pc, #24]	@ (80a0bb8 <HAL_IncTick+0x24>)
 80a0ba0:	681b      	ldr	r3, [r3, #0]
 80a0ba2:	4413      	add	r3, r2
 80a0ba4:	4a04      	ldr	r2, [pc, #16]	@ (80a0bb8 <HAL_IncTick+0x24>)
 80a0ba6:	6013      	str	r3, [r2, #0]
}
 80a0ba8:	bf00      	nop
 80a0baa:	46bd      	mov	sp, r7
 80a0bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0bb0:	4770      	bx	lr
 80a0bb2:	bf00      	nop
 80a0bb4:	2400000c 	.word	0x2400000c
 80a0bb8:	24000180 	.word	0x24000180

080a0bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80a0bbc:	b480      	push	{r7}
 80a0bbe:	af00      	add	r7, sp, #0
  return uwTick;
 80a0bc0:	4b03      	ldr	r3, [pc, #12]	@ (80a0bd0 <HAL_GetTick+0x14>)
 80a0bc2:	681b      	ldr	r3, [r3, #0]
}
 80a0bc4:	4618      	mov	r0, r3
 80a0bc6:	46bd      	mov	sp, r7
 80a0bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0bcc:	4770      	bx	lr
 80a0bce:	bf00      	nop
 80a0bd0:	24000180 	.word	0x24000180

080a0bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80a0bd4:	b580      	push	{r7, lr}
 80a0bd6:	b084      	sub	sp, #16
 80a0bd8:	af00      	add	r7, sp, #0
 80a0bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80a0bdc:	f7ff ffee 	bl	80a0bbc <HAL_GetTick>
 80a0be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80a0be2:	687b      	ldr	r3, [r7, #4]
 80a0be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80a0be6:	68fb      	ldr	r3, [r7, #12]
 80a0be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80a0bec:	d005      	beq.n	80a0bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80a0bee:	4b0a      	ldr	r3, [pc, #40]	@ (80a0c18 <HAL_Delay+0x44>)
 80a0bf0:	781b      	ldrb	r3, [r3, #0]
 80a0bf2:	461a      	mov	r2, r3
 80a0bf4:	68fb      	ldr	r3, [r7, #12]
 80a0bf6:	4413      	add	r3, r2
 80a0bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80a0bfa:	bf00      	nop
 80a0bfc:	f7ff ffde 	bl	80a0bbc <HAL_GetTick>
 80a0c00:	4602      	mov	r2, r0
 80a0c02:	68bb      	ldr	r3, [r7, #8]
 80a0c04:	1ad3      	subs	r3, r2, r3
 80a0c06:	68fa      	ldr	r2, [r7, #12]
 80a0c08:	429a      	cmp	r2, r3
 80a0c0a:	d8f7      	bhi.n	80a0bfc <HAL_Delay+0x28>
  {
  }
}
 80a0c0c:	bf00      	nop
 80a0c0e:	bf00      	nop
 80a0c10:	3710      	adds	r7, #16
 80a0c12:	46bd      	mov	sp, r7
 80a0c14:	bd80      	pop	{r7, pc}
 80a0c16:	bf00      	nop
 80a0c18:	2400000c 	.word	0x2400000c

080a0c1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80a0c1c:	b480      	push	{r7}
 80a0c1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80a0c20:	4b03      	ldr	r3, [pc, #12]	@ (80a0c30 <HAL_GetREVID+0x14>)
 80a0c22:	681b      	ldr	r3, [r3, #0]
 80a0c24:	0c1b      	lsrs	r3, r3, #16
}
 80a0c26:	4618      	mov	r0, r3
 80a0c28:	46bd      	mov	sp, r7
 80a0c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0c2e:	4770      	bx	lr
 80a0c30:	5c001000 	.word	0x5c001000

080a0c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80a0c34:	b480      	push	{r7}
 80a0c36:	b085      	sub	sp, #20
 80a0c38:	af00      	add	r7, sp, #0
 80a0c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80a0c3c:	687b      	ldr	r3, [r7, #4]
 80a0c3e:	f003 0307 	and.w	r3, r3, #7
 80a0c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80a0c44:	4b0b      	ldr	r3, [pc, #44]	@ (80a0c74 <__NVIC_SetPriorityGrouping+0x40>)
 80a0c46:	68db      	ldr	r3, [r3, #12]
 80a0c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80a0c4a:	68ba      	ldr	r2, [r7, #8]
 80a0c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80a0c50:	4013      	ands	r3, r2
 80a0c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80a0c54:	68fb      	ldr	r3, [r7, #12]
 80a0c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80a0c58:	68bb      	ldr	r3, [r7, #8]
 80a0c5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80a0c5c:	4b06      	ldr	r3, [pc, #24]	@ (80a0c78 <__NVIC_SetPriorityGrouping+0x44>)
 80a0c5e:	4313      	orrs	r3, r2
 80a0c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80a0c62:	4a04      	ldr	r2, [pc, #16]	@ (80a0c74 <__NVIC_SetPriorityGrouping+0x40>)
 80a0c64:	68bb      	ldr	r3, [r7, #8]
 80a0c66:	60d3      	str	r3, [r2, #12]
}
 80a0c68:	bf00      	nop
 80a0c6a:	3714      	adds	r7, #20
 80a0c6c:	46bd      	mov	sp, r7
 80a0c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0c72:	4770      	bx	lr
 80a0c74:	e000ed00 	.word	0xe000ed00
 80a0c78:	05fa0000 	.word	0x05fa0000

080a0c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80a0c7c:	b480      	push	{r7}
 80a0c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80a0c80:	4b04      	ldr	r3, [pc, #16]	@ (80a0c94 <__NVIC_GetPriorityGrouping+0x18>)
 80a0c82:	68db      	ldr	r3, [r3, #12]
 80a0c84:	0a1b      	lsrs	r3, r3, #8
 80a0c86:	f003 0307 	and.w	r3, r3, #7
}
 80a0c8a:	4618      	mov	r0, r3
 80a0c8c:	46bd      	mov	sp, r7
 80a0c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0c92:	4770      	bx	lr
 80a0c94:	e000ed00 	.word	0xe000ed00

080a0c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80a0c98:	b480      	push	{r7}
 80a0c9a:	b083      	sub	sp, #12
 80a0c9c:	af00      	add	r7, sp, #0
 80a0c9e:	4603      	mov	r3, r0
 80a0ca0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80a0ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80a0ca6:	2b00      	cmp	r3, #0
 80a0ca8:	db0b      	blt.n	80a0cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80a0caa:	88fb      	ldrh	r3, [r7, #6]
 80a0cac:	f003 021f 	and.w	r2, r3, #31
 80a0cb0:	4907      	ldr	r1, [pc, #28]	@ (80a0cd0 <__NVIC_EnableIRQ+0x38>)
 80a0cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80a0cb6:	095b      	lsrs	r3, r3, #5
 80a0cb8:	2001      	movs	r0, #1
 80a0cba:	fa00 f202 	lsl.w	r2, r0, r2
 80a0cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80a0cc2:	bf00      	nop
 80a0cc4:	370c      	adds	r7, #12
 80a0cc6:	46bd      	mov	sp, r7
 80a0cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0ccc:	4770      	bx	lr
 80a0cce:	bf00      	nop
 80a0cd0:	e000e100 	.word	0xe000e100

080a0cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80a0cd4:	b480      	push	{r7}
 80a0cd6:	b083      	sub	sp, #12
 80a0cd8:	af00      	add	r7, sp, #0
 80a0cda:	4603      	mov	r3, r0
 80a0cdc:	6039      	str	r1, [r7, #0]
 80a0cde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80a0ce0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80a0ce4:	2b00      	cmp	r3, #0
 80a0ce6:	db0a      	blt.n	80a0cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80a0ce8:	683b      	ldr	r3, [r7, #0]
 80a0cea:	b2da      	uxtb	r2, r3
 80a0cec:	490c      	ldr	r1, [pc, #48]	@ (80a0d20 <__NVIC_SetPriority+0x4c>)
 80a0cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80a0cf2:	0112      	lsls	r2, r2, #4
 80a0cf4:	b2d2      	uxtb	r2, r2
 80a0cf6:	440b      	add	r3, r1
 80a0cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80a0cfc:	e00a      	b.n	80a0d14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80a0cfe:	683b      	ldr	r3, [r7, #0]
 80a0d00:	b2da      	uxtb	r2, r3
 80a0d02:	4908      	ldr	r1, [pc, #32]	@ (80a0d24 <__NVIC_SetPriority+0x50>)
 80a0d04:	88fb      	ldrh	r3, [r7, #6]
 80a0d06:	f003 030f 	and.w	r3, r3, #15
 80a0d0a:	3b04      	subs	r3, #4
 80a0d0c:	0112      	lsls	r2, r2, #4
 80a0d0e:	b2d2      	uxtb	r2, r2
 80a0d10:	440b      	add	r3, r1
 80a0d12:	761a      	strb	r2, [r3, #24]
}
 80a0d14:	bf00      	nop
 80a0d16:	370c      	adds	r7, #12
 80a0d18:	46bd      	mov	sp, r7
 80a0d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0d1e:	4770      	bx	lr
 80a0d20:	e000e100 	.word	0xe000e100
 80a0d24:	e000ed00 	.word	0xe000ed00

080a0d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80a0d28:	b480      	push	{r7}
 80a0d2a:	b089      	sub	sp, #36	@ 0x24
 80a0d2c:	af00      	add	r7, sp, #0
 80a0d2e:	60f8      	str	r0, [r7, #12]
 80a0d30:	60b9      	str	r1, [r7, #8]
 80a0d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80a0d34:	68fb      	ldr	r3, [r7, #12]
 80a0d36:	f003 0307 	and.w	r3, r3, #7
 80a0d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80a0d3c:	69fb      	ldr	r3, [r7, #28]
 80a0d3e:	f1c3 0307 	rsb	r3, r3, #7
 80a0d42:	2b04      	cmp	r3, #4
 80a0d44:	bf28      	it	cs
 80a0d46:	2304      	movcs	r3, #4
 80a0d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80a0d4a:	69fb      	ldr	r3, [r7, #28]
 80a0d4c:	3304      	adds	r3, #4
 80a0d4e:	2b06      	cmp	r3, #6
 80a0d50:	d902      	bls.n	80a0d58 <NVIC_EncodePriority+0x30>
 80a0d52:	69fb      	ldr	r3, [r7, #28]
 80a0d54:	3b03      	subs	r3, #3
 80a0d56:	e000      	b.n	80a0d5a <NVIC_EncodePriority+0x32>
 80a0d58:	2300      	movs	r3, #0
 80a0d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80a0d5c:	f04f 32ff 	mov.w	r2, #4294967295
 80a0d60:	69bb      	ldr	r3, [r7, #24]
 80a0d62:	fa02 f303 	lsl.w	r3, r2, r3
 80a0d66:	43da      	mvns	r2, r3
 80a0d68:	68bb      	ldr	r3, [r7, #8]
 80a0d6a:	401a      	ands	r2, r3
 80a0d6c:	697b      	ldr	r3, [r7, #20]
 80a0d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80a0d70:	f04f 31ff 	mov.w	r1, #4294967295
 80a0d74:	697b      	ldr	r3, [r7, #20]
 80a0d76:	fa01 f303 	lsl.w	r3, r1, r3
 80a0d7a:	43d9      	mvns	r1, r3
 80a0d7c:	687b      	ldr	r3, [r7, #4]
 80a0d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80a0d80:	4313      	orrs	r3, r2
         );
}
 80a0d82:	4618      	mov	r0, r3
 80a0d84:	3724      	adds	r7, #36	@ 0x24
 80a0d86:	46bd      	mov	sp, r7
 80a0d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0d8c:	4770      	bx	lr
	...

080a0d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80a0d90:	b580      	push	{r7, lr}
 80a0d92:	b082      	sub	sp, #8
 80a0d94:	af00      	add	r7, sp, #0
 80a0d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80a0d98:	687b      	ldr	r3, [r7, #4]
 80a0d9a:	3b01      	subs	r3, #1
 80a0d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80a0da0:	d301      	bcc.n	80a0da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80a0da2:	2301      	movs	r3, #1
 80a0da4:	e00f      	b.n	80a0dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80a0da6:	4a0a      	ldr	r2, [pc, #40]	@ (80a0dd0 <SysTick_Config+0x40>)
 80a0da8:	687b      	ldr	r3, [r7, #4]
 80a0daa:	3b01      	subs	r3, #1
 80a0dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80a0dae:	210f      	movs	r1, #15
 80a0db0:	f04f 30ff 	mov.w	r0, #4294967295
 80a0db4:	f7ff ff8e 	bl	80a0cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80a0db8:	4b05      	ldr	r3, [pc, #20]	@ (80a0dd0 <SysTick_Config+0x40>)
 80a0dba:	2200      	movs	r2, #0
 80a0dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80a0dbe:	4b04      	ldr	r3, [pc, #16]	@ (80a0dd0 <SysTick_Config+0x40>)
 80a0dc0:	2207      	movs	r2, #7
 80a0dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80a0dc4:	2300      	movs	r3, #0
}
 80a0dc6:	4618      	mov	r0, r3
 80a0dc8:	3708      	adds	r7, #8
 80a0dca:	46bd      	mov	sp, r7
 80a0dcc:	bd80      	pop	{r7, pc}
 80a0dce:	bf00      	nop
 80a0dd0:	e000e010 	.word	0xe000e010

080a0dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80a0dd4:	b580      	push	{r7, lr}
 80a0dd6:	b082      	sub	sp, #8
 80a0dd8:	af00      	add	r7, sp, #0
 80a0dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80a0ddc:	6878      	ldr	r0, [r7, #4]
 80a0dde:	f7ff ff29 	bl	80a0c34 <__NVIC_SetPriorityGrouping>
}
 80a0de2:	bf00      	nop
 80a0de4:	3708      	adds	r7, #8
 80a0de6:	46bd      	mov	sp, r7
 80a0de8:	bd80      	pop	{r7, pc}

080a0dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80a0dea:	b580      	push	{r7, lr}
 80a0dec:	b086      	sub	sp, #24
 80a0dee:	af00      	add	r7, sp, #0
 80a0df0:	4603      	mov	r3, r0
 80a0df2:	60b9      	str	r1, [r7, #8]
 80a0df4:	607a      	str	r2, [r7, #4]
 80a0df6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80a0df8:	f7ff ff40 	bl	80a0c7c <__NVIC_GetPriorityGrouping>
 80a0dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80a0dfe:	687a      	ldr	r2, [r7, #4]
 80a0e00:	68b9      	ldr	r1, [r7, #8]
 80a0e02:	6978      	ldr	r0, [r7, #20]
 80a0e04:	f7ff ff90 	bl	80a0d28 <NVIC_EncodePriority>
 80a0e08:	4602      	mov	r2, r0
 80a0e0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80a0e0e:	4611      	mov	r1, r2
 80a0e10:	4618      	mov	r0, r3
 80a0e12:	f7ff ff5f 	bl	80a0cd4 <__NVIC_SetPriority>
}
 80a0e16:	bf00      	nop
 80a0e18:	3718      	adds	r7, #24
 80a0e1a:	46bd      	mov	sp, r7
 80a0e1c:	bd80      	pop	{r7, pc}

080a0e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80a0e1e:	b580      	push	{r7, lr}
 80a0e20:	b082      	sub	sp, #8
 80a0e22:	af00      	add	r7, sp, #0
 80a0e24:	4603      	mov	r3, r0
 80a0e26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80a0e28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80a0e2c:	4618      	mov	r0, r3
 80a0e2e:	f7ff ff33 	bl	80a0c98 <__NVIC_EnableIRQ>
}
 80a0e32:	bf00      	nop
 80a0e34:	3708      	adds	r7, #8
 80a0e36:	46bd      	mov	sp, r7
 80a0e38:	bd80      	pop	{r7, pc}

080a0e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80a0e3a:	b580      	push	{r7, lr}
 80a0e3c:	b082      	sub	sp, #8
 80a0e3e:	af00      	add	r7, sp, #0
 80a0e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80a0e42:	6878      	ldr	r0, [r7, #4]
 80a0e44:	f7ff ffa4 	bl	80a0d90 <SysTick_Config>
 80a0e48:	4603      	mov	r3, r0
}
 80a0e4a:	4618      	mov	r0, r3
 80a0e4c:	3708      	adds	r7, #8
 80a0e4e:	46bd      	mov	sp, r7
 80a0e50:	bd80      	pop	{r7, pc}
	...

080a0e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80a0e54:	b480      	push	{r7}
 80a0e56:	b089      	sub	sp, #36	@ 0x24
 80a0e58:	af00      	add	r7, sp, #0
 80a0e5a:	6078      	str	r0, [r7, #4]
 80a0e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80a0e5e:	2300      	movs	r3, #0
 80a0e60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80a0e62:	4b89      	ldr	r3, [pc, #548]	@ (80a1088 <HAL_GPIO_Init+0x234>)
 80a0e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80a0e66:	e194      	b.n	80a1192 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80a0e68:	683b      	ldr	r3, [r7, #0]
 80a0e6a:	681a      	ldr	r2, [r3, #0]
 80a0e6c:	2101      	movs	r1, #1
 80a0e6e:	69fb      	ldr	r3, [r7, #28]
 80a0e70:	fa01 f303 	lsl.w	r3, r1, r3
 80a0e74:	4013      	ands	r3, r2
 80a0e76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80a0e78:	693b      	ldr	r3, [r7, #16]
 80a0e7a:	2b00      	cmp	r3, #0
 80a0e7c:	f000 8186 	beq.w	80a118c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80a0e80:	683b      	ldr	r3, [r7, #0]
 80a0e82:	685b      	ldr	r3, [r3, #4]
 80a0e84:	f003 0303 	and.w	r3, r3, #3
 80a0e88:	2b01      	cmp	r3, #1
 80a0e8a:	d005      	beq.n	80a0e98 <HAL_GPIO_Init+0x44>
 80a0e8c:	683b      	ldr	r3, [r7, #0]
 80a0e8e:	685b      	ldr	r3, [r3, #4]
 80a0e90:	f003 0303 	and.w	r3, r3, #3
 80a0e94:	2b02      	cmp	r3, #2
 80a0e96:	d130      	bne.n	80a0efa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80a0e98:	687b      	ldr	r3, [r7, #4]
 80a0e9a:	689b      	ldr	r3, [r3, #8]
 80a0e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80a0e9e:	69fb      	ldr	r3, [r7, #28]
 80a0ea0:	005b      	lsls	r3, r3, #1
 80a0ea2:	2203      	movs	r2, #3
 80a0ea4:	fa02 f303 	lsl.w	r3, r2, r3
 80a0ea8:	43db      	mvns	r3, r3
 80a0eaa:	69ba      	ldr	r2, [r7, #24]
 80a0eac:	4013      	ands	r3, r2
 80a0eae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80a0eb0:	683b      	ldr	r3, [r7, #0]
 80a0eb2:	68da      	ldr	r2, [r3, #12]
 80a0eb4:	69fb      	ldr	r3, [r7, #28]
 80a0eb6:	005b      	lsls	r3, r3, #1
 80a0eb8:	fa02 f303 	lsl.w	r3, r2, r3
 80a0ebc:	69ba      	ldr	r2, [r7, #24]
 80a0ebe:	4313      	orrs	r3, r2
 80a0ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80a0ec2:	687b      	ldr	r3, [r7, #4]
 80a0ec4:	69ba      	ldr	r2, [r7, #24]
 80a0ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80a0ec8:	687b      	ldr	r3, [r7, #4]
 80a0eca:	685b      	ldr	r3, [r3, #4]
 80a0ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80a0ece:	2201      	movs	r2, #1
 80a0ed0:	69fb      	ldr	r3, [r7, #28]
 80a0ed2:	fa02 f303 	lsl.w	r3, r2, r3
 80a0ed6:	43db      	mvns	r3, r3
 80a0ed8:	69ba      	ldr	r2, [r7, #24]
 80a0eda:	4013      	ands	r3, r2
 80a0edc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80a0ede:	683b      	ldr	r3, [r7, #0]
 80a0ee0:	685b      	ldr	r3, [r3, #4]
 80a0ee2:	091b      	lsrs	r3, r3, #4
 80a0ee4:	f003 0201 	and.w	r2, r3, #1
 80a0ee8:	69fb      	ldr	r3, [r7, #28]
 80a0eea:	fa02 f303 	lsl.w	r3, r2, r3
 80a0eee:	69ba      	ldr	r2, [r7, #24]
 80a0ef0:	4313      	orrs	r3, r2
 80a0ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80a0ef4:	687b      	ldr	r3, [r7, #4]
 80a0ef6:	69ba      	ldr	r2, [r7, #24]
 80a0ef8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80a0efa:	683b      	ldr	r3, [r7, #0]
 80a0efc:	685b      	ldr	r3, [r3, #4]
 80a0efe:	f003 0303 	and.w	r3, r3, #3
 80a0f02:	2b03      	cmp	r3, #3
 80a0f04:	d017      	beq.n	80a0f36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80a0f06:	687b      	ldr	r3, [r7, #4]
 80a0f08:	68db      	ldr	r3, [r3, #12]
 80a0f0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80a0f0c:	69fb      	ldr	r3, [r7, #28]
 80a0f0e:	005b      	lsls	r3, r3, #1
 80a0f10:	2203      	movs	r2, #3
 80a0f12:	fa02 f303 	lsl.w	r3, r2, r3
 80a0f16:	43db      	mvns	r3, r3
 80a0f18:	69ba      	ldr	r2, [r7, #24]
 80a0f1a:	4013      	ands	r3, r2
 80a0f1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80a0f1e:	683b      	ldr	r3, [r7, #0]
 80a0f20:	689a      	ldr	r2, [r3, #8]
 80a0f22:	69fb      	ldr	r3, [r7, #28]
 80a0f24:	005b      	lsls	r3, r3, #1
 80a0f26:	fa02 f303 	lsl.w	r3, r2, r3
 80a0f2a:	69ba      	ldr	r2, [r7, #24]
 80a0f2c:	4313      	orrs	r3, r2
 80a0f2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80a0f30:	687b      	ldr	r3, [r7, #4]
 80a0f32:	69ba      	ldr	r2, [r7, #24]
 80a0f34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80a0f36:	683b      	ldr	r3, [r7, #0]
 80a0f38:	685b      	ldr	r3, [r3, #4]
 80a0f3a:	f003 0303 	and.w	r3, r3, #3
 80a0f3e:	2b02      	cmp	r3, #2
 80a0f40:	d123      	bne.n	80a0f8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80a0f42:	69fb      	ldr	r3, [r7, #28]
 80a0f44:	08da      	lsrs	r2, r3, #3
 80a0f46:	687b      	ldr	r3, [r7, #4]
 80a0f48:	3208      	adds	r2, #8
 80a0f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a0f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80a0f50:	69fb      	ldr	r3, [r7, #28]
 80a0f52:	f003 0307 	and.w	r3, r3, #7
 80a0f56:	009b      	lsls	r3, r3, #2
 80a0f58:	220f      	movs	r2, #15
 80a0f5a:	fa02 f303 	lsl.w	r3, r2, r3
 80a0f5e:	43db      	mvns	r3, r3
 80a0f60:	69ba      	ldr	r2, [r7, #24]
 80a0f62:	4013      	ands	r3, r2
 80a0f64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80a0f66:	683b      	ldr	r3, [r7, #0]
 80a0f68:	691a      	ldr	r2, [r3, #16]
 80a0f6a:	69fb      	ldr	r3, [r7, #28]
 80a0f6c:	f003 0307 	and.w	r3, r3, #7
 80a0f70:	009b      	lsls	r3, r3, #2
 80a0f72:	fa02 f303 	lsl.w	r3, r2, r3
 80a0f76:	69ba      	ldr	r2, [r7, #24]
 80a0f78:	4313      	orrs	r3, r2
 80a0f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80a0f7c:	69fb      	ldr	r3, [r7, #28]
 80a0f7e:	08da      	lsrs	r2, r3, #3
 80a0f80:	687b      	ldr	r3, [r7, #4]
 80a0f82:	3208      	adds	r2, #8
 80a0f84:	69b9      	ldr	r1, [r7, #24]
 80a0f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80a0f8a:	687b      	ldr	r3, [r7, #4]
 80a0f8c:	681b      	ldr	r3, [r3, #0]
 80a0f8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80a0f90:	69fb      	ldr	r3, [r7, #28]
 80a0f92:	005b      	lsls	r3, r3, #1
 80a0f94:	2203      	movs	r2, #3
 80a0f96:	fa02 f303 	lsl.w	r3, r2, r3
 80a0f9a:	43db      	mvns	r3, r3
 80a0f9c:	69ba      	ldr	r2, [r7, #24]
 80a0f9e:	4013      	ands	r3, r2
 80a0fa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80a0fa2:	683b      	ldr	r3, [r7, #0]
 80a0fa4:	685b      	ldr	r3, [r3, #4]
 80a0fa6:	f003 0203 	and.w	r2, r3, #3
 80a0faa:	69fb      	ldr	r3, [r7, #28]
 80a0fac:	005b      	lsls	r3, r3, #1
 80a0fae:	fa02 f303 	lsl.w	r3, r2, r3
 80a0fb2:	69ba      	ldr	r2, [r7, #24]
 80a0fb4:	4313      	orrs	r3, r2
 80a0fb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80a0fb8:	687b      	ldr	r3, [r7, #4]
 80a0fba:	69ba      	ldr	r2, [r7, #24]
 80a0fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80a0fbe:	683b      	ldr	r3, [r7, #0]
 80a0fc0:	685b      	ldr	r3, [r3, #4]
 80a0fc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80a0fc6:	2b00      	cmp	r3, #0
 80a0fc8:	f000 80e0 	beq.w	80a118c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80a0fcc:	4b2f      	ldr	r3, [pc, #188]	@ (80a108c <HAL_GPIO_Init+0x238>)
 80a0fce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80a0fd2:	4a2e      	ldr	r2, [pc, #184]	@ (80a108c <HAL_GPIO_Init+0x238>)
 80a0fd4:	f043 0302 	orr.w	r3, r3, #2
 80a0fd8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80a0fdc:	4b2b      	ldr	r3, [pc, #172]	@ (80a108c <HAL_GPIO_Init+0x238>)
 80a0fde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80a0fe2:	f003 0302 	and.w	r3, r3, #2
 80a0fe6:	60fb      	str	r3, [r7, #12]
 80a0fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80a0fea:	4a29      	ldr	r2, [pc, #164]	@ (80a1090 <HAL_GPIO_Init+0x23c>)
 80a0fec:	69fb      	ldr	r3, [r7, #28]
 80a0fee:	089b      	lsrs	r3, r3, #2
 80a0ff0:	3302      	adds	r3, #2
 80a0ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a0ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80a0ff8:	69fb      	ldr	r3, [r7, #28]
 80a0ffa:	f003 0303 	and.w	r3, r3, #3
 80a0ffe:	009b      	lsls	r3, r3, #2
 80a1000:	220f      	movs	r2, #15
 80a1002:	fa02 f303 	lsl.w	r3, r2, r3
 80a1006:	43db      	mvns	r3, r3
 80a1008:	69ba      	ldr	r2, [r7, #24]
 80a100a:	4013      	ands	r3, r2
 80a100c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80a100e:	687b      	ldr	r3, [r7, #4]
 80a1010:	4a20      	ldr	r2, [pc, #128]	@ (80a1094 <HAL_GPIO_Init+0x240>)
 80a1012:	4293      	cmp	r3, r2
 80a1014:	d052      	beq.n	80a10bc <HAL_GPIO_Init+0x268>
 80a1016:	687b      	ldr	r3, [r7, #4]
 80a1018:	4a1f      	ldr	r2, [pc, #124]	@ (80a1098 <HAL_GPIO_Init+0x244>)
 80a101a:	4293      	cmp	r3, r2
 80a101c:	d031      	beq.n	80a1082 <HAL_GPIO_Init+0x22e>
 80a101e:	687b      	ldr	r3, [r7, #4]
 80a1020:	4a1e      	ldr	r2, [pc, #120]	@ (80a109c <HAL_GPIO_Init+0x248>)
 80a1022:	4293      	cmp	r3, r2
 80a1024:	d02b      	beq.n	80a107e <HAL_GPIO_Init+0x22a>
 80a1026:	687b      	ldr	r3, [r7, #4]
 80a1028:	4a1d      	ldr	r2, [pc, #116]	@ (80a10a0 <HAL_GPIO_Init+0x24c>)
 80a102a:	4293      	cmp	r3, r2
 80a102c:	d025      	beq.n	80a107a <HAL_GPIO_Init+0x226>
 80a102e:	687b      	ldr	r3, [r7, #4]
 80a1030:	4a1c      	ldr	r2, [pc, #112]	@ (80a10a4 <HAL_GPIO_Init+0x250>)
 80a1032:	4293      	cmp	r3, r2
 80a1034:	d01f      	beq.n	80a1076 <HAL_GPIO_Init+0x222>
 80a1036:	687b      	ldr	r3, [r7, #4]
 80a1038:	4a1b      	ldr	r2, [pc, #108]	@ (80a10a8 <HAL_GPIO_Init+0x254>)
 80a103a:	4293      	cmp	r3, r2
 80a103c:	d019      	beq.n	80a1072 <HAL_GPIO_Init+0x21e>
 80a103e:	687b      	ldr	r3, [r7, #4]
 80a1040:	4a1a      	ldr	r2, [pc, #104]	@ (80a10ac <HAL_GPIO_Init+0x258>)
 80a1042:	4293      	cmp	r3, r2
 80a1044:	d013      	beq.n	80a106e <HAL_GPIO_Init+0x21a>
 80a1046:	687b      	ldr	r3, [r7, #4]
 80a1048:	4a19      	ldr	r2, [pc, #100]	@ (80a10b0 <HAL_GPIO_Init+0x25c>)
 80a104a:	4293      	cmp	r3, r2
 80a104c:	d00d      	beq.n	80a106a <HAL_GPIO_Init+0x216>
 80a104e:	687b      	ldr	r3, [r7, #4]
 80a1050:	4a18      	ldr	r2, [pc, #96]	@ (80a10b4 <HAL_GPIO_Init+0x260>)
 80a1052:	4293      	cmp	r3, r2
 80a1054:	d007      	beq.n	80a1066 <HAL_GPIO_Init+0x212>
 80a1056:	687b      	ldr	r3, [r7, #4]
 80a1058:	4a17      	ldr	r2, [pc, #92]	@ (80a10b8 <HAL_GPIO_Init+0x264>)
 80a105a:	4293      	cmp	r3, r2
 80a105c:	d101      	bne.n	80a1062 <HAL_GPIO_Init+0x20e>
 80a105e:	2309      	movs	r3, #9
 80a1060:	e02d      	b.n	80a10be <HAL_GPIO_Init+0x26a>
 80a1062:	230a      	movs	r3, #10
 80a1064:	e02b      	b.n	80a10be <HAL_GPIO_Init+0x26a>
 80a1066:	2308      	movs	r3, #8
 80a1068:	e029      	b.n	80a10be <HAL_GPIO_Init+0x26a>
 80a106a:	2307      	movs	r3, #7
 80a106c:	e027      	b.n	80a10be <HAL_GPIO_Init+0x26a>
 80a106e:	2306      	movs	r3, #6
 80a1070:	e025      	b.n	80a10be <HAL_GPIO_Init+0x26a>
 80a1072:	2305      	movs	r3, #5
 80a1074:	e023      	b.n	80a10be <HAL_GPIO_Init+0x26a>
 80a1076:	2304      	movs	r3, #4
 80a1078:	e021      	b.n	80a10be <HAL_GPIO_Init+0x26a>
 80a107a:	2303      	movs	r3, #3
 80a107c:	e01f      	b.n	80a10be <HAL_GPIO_Init+0x26a>
 80a107e:	2302      	movs	r3, #2
 80a1080:	e01d      	b.n	80a10be <HAL_GPIO_Init+0x26a>
 80a1082:	2301      	movs	r3, #1
 80a1084:	e01b      	b.n	80a10be <HAL_GPIO_Init+0x26a>
 80a1086:	bf00      	nop
 80a1088:	58000080 	.word	0x58000080
 80a108c:	58024400 	.word	0x58024400
 80a1090:	58000400 	.word	0x58000400
 80a1094:	58020000 	.word	0x58020000
 80a1098:	58020400 	.word	0x58020400
 80a109c:	58020800 	.word	0x58020800
 80a10a0:	58020c00 	.word	0x58020c00
 80a10a4:	58021000 	.word	0x58021000
 80a10a8:	58021400 	.word	0x58021400
 80a10ac:	58021800 	.word	0x58021800
 80a10b0:	58021c00 	.word	0x58021c00
 80a10b4:	58022000 	.word	0x58022000
 80a10b8:	58022400 	.word	0x58022400
 80a10bc:	2300      	movs	r3, #0
 80a10be:	69fa      	ldr	r2, [r7, #28]
 80a10c0:	f002 0203 	and.w	r2, r2, #3
 80a10c4:	0092      	lsls	r2, r2, #2
 80a10c6:	4093      	lsls	r3, r2
 80a10c8:	69ba      	ldr	r2, [r7, #24]
 80a10ca:	4313      	orrs	r3, r2
 80a10cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80a10ce:	4938      	ldr	r1, [pc, #224]	@ (80a11b0 <HAL_GPIO_Init+0x35c>)
 80a10d0:	69fb      	ldr	r3, [r7, #28]
 80a10d2:	089b      	lsrs	r3, r3, #2
 80a10d4:	3302      	adds	r3, #2
 80a10d6:	69ba      	ldr	r2, [r7, #24]
 80a10d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80a10dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80a10e0:	681b      	ldr	r3, [r3, #0]
 80a10e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80a10e4:	693b      	ldr	r3, [r7, #16]
 80a10e6:	43db      	mvns	r3, r3
 80a10e8:	69ba      	ldr	r2, [r7, #24]
 80a10ea:	4013      	ands	r3, r2
 80a10ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80a10ee:	683b      	ldr	r3, [r7, #0]
 80a10f0:	685b      	ldr	r3, [r3, #4]
 80a10f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80a10f6:	2b00      	cmp	r3, #0
 80a10f8:	d003      	beq.n	80a1102 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80a10fa:	69ba      	ldr	r2, [r7, #24]
 80a10fc:	693b      	ldr	r3, [r7, #16]
 80a10fe:	4313      	orrs	r3, r2
 80a1100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80a1102:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80a1106:	69bb      	ldr	r3, [r7, #24]
 80a1108:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80a110a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80a110e:	685b      	ldr	r3, [r3, #4]
 80a1110:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80a1112:	693b      	ldr	r3, [r7, #16]
 80a1114:	43db      	mvns	r3, r3
 80a1116:	69ba      	ldr	r2, [r7, #24]
 80a1118:	4013      	ands	r3, r2
 80a111a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80a111c:	683b      	ldr	r3, [r7, #0]
 80a111e:	685b      	ldr	r3, [r3, #4]
 80a1120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80a1124:	2b00      	cmp	r3, #0
 80a1126:	d003      	beq.n	80a1130 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80a1128:	69ba      	ldr	r2, [r7, #24]
 80a112a:	693b      	ldr	r3, [r7, #16]
 80a112c:	4313      	orrs	r3, r2
 80a112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80a1130:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80a1134:	69bb      	ldr	r3, [r7, #24]
 80a1136:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80a1138:	697b      	ldr	r3, [r7, #20]
 80a113a:	685b      	ldr	r3, [r3, #4]
 80a113c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80a113e:	693b      	ldr	r3, [r7, #16]
 80a1140:	43db      	mvns	r3, r3
 80a1142:	69ba      	ldr	r2, [r7, #24]
 80a1144:	4013      	ands	r3, r2
 80a1146:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80a1148:	683b      	ldr	r3, [r7, #0]
 80a114a:	685b      	ldr	r3, [r3, #4]
 80a114c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80a1150:	2b00      	cmp	r3, #0
 80a1152:	d003      	beq.n	80a115c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80a1154:	69ba      	ldr	r2, [r7, #24]
 80a1156:	693b      	ldr	r3, [r7, #16]
 80a1158:	4313      	orrs	r3, r2
 80a115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80a115c:	697b      	ldr	r3, [r7, #20]
 80a115e:	69ba      	ldr	r2, [r7, #24]
 80a1160:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80a1162:	697b      	ldr	r3, [r7, #20]
 80a1164:	681b      	ldr	r3, [r3, #0]
 80a1166:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80a1168:	693b      	ldr	r3, [r7, #16]
 80a116a:	43db      	mvns	r3, r3
 80a116c:	69ba      	ldr	r2, [r7, #24]
 80a116e:	4013      	ands	r3, r2
 80a1170:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80a1172:	683b      	ldr	r3, [r7, #0]
 80a1174:	685b      	ldr	r3, [r3, #4]
 80a1176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80a117a:	2b00      	cmp	r3, #0
 80a117c:	d003      	beq.n	80a1186 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80a117e:	69ba      	ldr	r2, [r7, #24]
 80a1180:	693b      	ldr	r3, [r7, #16]
 80a1182:	4313      	orrs	r3, r2
 80a1184:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80a1186:	697b      	ldr	r3, [r7, #20]
 80a1188:	69ba      	ldr	r2, [r7, #24]
 80a118a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80a118c:	69fb      	ldr	r3, [r7, #28]
 80a118e:	3301      	adds	r3, #1
 80a1190:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80a1192:	683b      	ldr	r3, [r7, #0]
 80a1194:	681a      	ldr	r2, [r3, #0]
 80a1196:	69fb      	ldr	r3, [r7, #28]
 80a1198:	fa22 f303 	lsr.w	r3, r2, r3
 80a119c:	2b00      	cmp	r3, #0
 80a119e:	f47f ae63 	bne.w	80a0e68 <HAL_GPIO_Init+0x14>
  }
}
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	3724      	adds	r7, #36	@ 0x24
 80a11a8:	46bd      	mov	sp, r7
 80a11aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a11ae:	4770      	bx	lr
 80a11b0:	58000400 	.word	0x58000400

080a11b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80a11b4:	b480      	push	{r7}
 80a11b6:	b083      	sub	sp, #12
 80a11b8:	af00      	add	r7, sp, #0
 80a11ba:	6078      	str	r0, [r7, #4]
 80a11bc:	460b      	mov	r3, r1
 80a11be:	807b      	strh	r3, [r7, #2]
 80a11c0:	4613      	mov	r3, r2
 80a11c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80a11c4:	787b      	ldrb	r3, [r7, #1]
 80a11c6:	2b00      	cmp	r3, #0
 80a11c8:	d003      	beq.n	80a11d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80a11ca:	887a      	ldrh	r2, [r7, #2]
 80a11cc:	687b      	ldr	r3, [r7, #4]
 80a11ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80a11d0:	e003      	b.n	80a11da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80a11d2:	887b      	ldrh	r3, [r7, #2]
 80a11d4:	041a      	lsls	r2, r3, #16
 80a11d6:	687b      	ldr	r3, [r7, #4]
 80a11d8:	619a      	str	r2, [r3, #24]
}
 80a11da:	bf00      	nop
 80a11dc:	370c      	adds	r7, #12
 80a11de:	46bd      	mov	sp, r7
 80a11e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a11e4:	4770      	bx	lr

080a11e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80a11e6:	b480      	push	{r7}
 80a11e8:	b085      	sub	sp, #20
 80a11ea:	af00      	add	r7, sp, #0
 80a11ec:	6078      	str	r0, [r7, #4]
 80a11ee:	460b      	mov	r3, r1
 80a11f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80a11f2:	687b      	ldr	r3, [r7, #4]
 80a11f4:	695b      	ldr	r3, [r3, #20]
 80a11f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80a11f8:	887a      	ldrh	r2, [r7, #2]
 80a11fa:	68fb      	ldr	r3, [r7, #12]
 80a11fc:	4013      	ands	r3, r2
 80a11fe:	041a      	lsls	r2, r3, #16
 80a1200:	68fb      	ldr	r3, [r7, #12]
 80a1202:	43d9      	mvns	r1, r3
 80a1204:	887b      	ldrh	r3, [r7, #2]
 80a1206:	400b      	ands	r3, r1
 80a1208:	431a      	orrs	r2, r3
 80a120a:	687b      	ldr	r3, [r7, #4]
 80a120c:	619a      	str	r2, [r3, #24]
}
 80a120e:	bf00      	nop
 80a1210:	3714      	adds	r7, #20
 80a1212:	46bd      	mov	sp, r7
 80a1214:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a1218:	4770      	bx	lr
	...

080a121c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80a121c:	b480      	push	{r7}
 80a121e:	b083      	sub	sp, #12
 80a1220:	af00      	add	r7, sp, #0
 80a1222:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80a1224:	4a08      	ldr	r2, [pc, #32]	@ (80a1248 <HAL_HSEM_FastTake+0x2c>)
 80a1226:	687b      	ldr	r3, [r7, #4]
 80a1228:	3320      	adds	r3, #32
 80a122a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a122e:	4a07      	ldr	r2, [pc, #28]	@ (80a124c <HAL_HSEM_FastTake+0x30>)
 80a1230:	4293      	cmp	r3, r2
 80a1232:	d101      	bne.n	80a1238 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80a1234:	2300      	movs	r3, #0
 80a1236:	e000      	b.n	80a123a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80a1238:	2301      	movs	r3, #1
}
 80a123a:	4618      	mov	r0, r3
 80a123c:	370c      	adds	r7, #12
 80a123e:	46bd      	mov	sp, r7
 80a1240:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a1244:	4770      	bx	lr
 80a1246:	bf00      	nop
 80a1248:	58026400 	.word	0x58026400
 80a124c:	80000300 	.word	0x80000300

080a1250 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80a1250:	b480      	push	{r7}
 80a1252:	b083      	sub	sp, #12
 80a1254:	af00      	add	r7, sp, #0
 80a1256:	6078      	str	r0, [r7, #4]
 80a1258:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80a125a:	4906      	ldr	r1, [pc, #24]	@ (80a1274 <HAL_HSEM_Release+0x24>)
 80a125c:	683b      	ldr	r3, [r7, #0]
 80a125e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80a1262:	687b      	ldr	r3, [r7, #4]
 80a1264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80a1268:	bf00      	nop
 80a126a:	370c      	adds	r7, #12
 80a126c:	46bd      	mov	sp, r7
 80a126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a1272:	4770      	bx	lr
 80a1274:	58026400 	.word	0x58026400

080a1278 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80a1278:	b580      	push	{r7, lr}
 80a127a:	b086      	sub	sp, #24
 80a127c:	af02      	add	r7, sp, #8
 80a127e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80a1280:	687b      	ldr	r3, [r7, #4]
 80a1282:	2b00      	cmp	r3, #0
 80a1284:	d101      	bne.n	80a128a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80a1286:	2301      	movs	r3, #1
 80a1288:	e0fe      	b.n	80a1488 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80a128a:	687b      	ldr	r3, [r7, #4]
 80a128c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80a1290:	b2db      	uxtb	r3, r3
 80a1292:	2b00      	cmp	r3, #0
 80a1294:	d106      	bne.n	80a12a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80a1296:	687b      	ldr	r3, [r7, #4]
 80a1298:	2200      	movs	r2, #0
 80a129a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80a129e:	6878      	ldr	r0, [r7, #4]
 80a12a0:	f007 fbbc 	bl	80a8a1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80a12a4:	687b      	ldr	r3, [r7, #4]
 80a12a6:	2203      	movs	r2, #3
 80a12a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80a12ac:	687b      	ldr	r3, [r7, #4]
 80a12ae:	681b      	ldr	r3, [r3, #0]
 80a12b0:	4618      	mov	r0, r3
 80a12b2:	f003 ffe2 	bl	80a527a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80a12b6:	687b      	ldr	r3, [r7, #4]
 80a12b8:	6818      	ldr	r0, [r3, #0]
 80a12ba:	687b      	ldr	r3, [r7, #4]
 80a12bc:	7c1a      	ldrb	r2, [r3, #16]
 80a12be:	f88d 2000 	strb.w	r2, [sp]
 80a12c2:	3304      	adds	r3, #4
 80a12c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80a12c6:	f003 feb3 	bl	80a5030 <USB_CoreInit>
 80a12ca:	4603      	mov	r3, r0
 80a12cc:	2b00      	cmp	r3, #0
 80a12ce:	d005      	beq.n	80a12dc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80a12d0:	687b      	ldr	r3, [r7, #4]
 80a12d2:	2202      	movs	r2, #2
 80a12d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80a12d8:	2301      	movs	r3, #1
 80a12da:	e0d5      	b.n	80a1488 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80a12dc:	687b      	ldr	r3, [r7, #4]
 80a12de:	681b      	ldr	r3, [r3, #0]
 80a12e0:	2100      	movs	r1, #0
 80a12e2:	4618      	mov	r0, r3
 80a12e4:	f003 ffda 	bl	80a529c <USB_SetCurrentMode>
 80a12e8:	4603      	mov	r3, r0
 80a12ea:	2b00      	cmp	r3, #0
 80a12ec:	d005      	beq.n	80a12fa <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80a12ee:	687b      	ldr	r3, [r7, #4]
 80a12f0:	2202      	movs	r2, #2
 80a12f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80a12f6:	2301      	movs	r3, #1
 80a12f8:	e0c6      	b.n	80a1488 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80a12fa:	2300      	movs	r3, #0
 80a12fc:	73fb      	strb	r3, [r7, #15]
 80a12fe:	e04a      	b.n	80a1396 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80a1300:	7bfa      	ldrb	r2, [r7, #15]
 80a1302:	6879      	ldr	r1, [r7, #4]
 80a1304:	4613      	mov	r3, r2
 80a1306:	00db      	lsls	r3, r3, #3
 80a1308:	4413      	add	r3, r2
 80a130a:	009b      	lsls	r3, r3, #2
 80a130c:	440b      	add	r3, r1
 80a130e:	3315      	adds	r3, #21
 80a1310:	2201      	movs	r2, #1
 80a1312:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80a1314:	7bfa      	ldrb	r2, [r7, #15]
 80a1316:	6879      	ldr	r1, [r7, #4]
 80a1318:	4613      	mov	r3, r2
 80a131a:	00db      	lsls	r3, r3, #3
 80a131c:	4413      	add	r3, r2
 80a131e:	009b      	lsls	r3, r3, #2
 80a1320:	440b      	add	r3, r1
 80a1322:	3314      	adds	r3, #20
 80a1324:	7bfa      	ldrb	r2, [r7, #15]
 80a1326:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80a1328:	7bfa      	ldrb	r2, [r7, #15]
 80a132a:	7bfb      	ldrb	r3, [r7, #15]
 80a132c:	b298      	uxth	r0, r3
 80a132e:	6879      	ldr	r1, [r7, #4]
 80a1330:	4613      	mov	r3, r2
 80a1332:	00db      	lsls	r3, r3, #3
 80a1334:	4413      	add	r3, r2
 80a1336:	009b      	lsls	r3, r3, #2
 80a1338:	440b      	add	r3, r1
 80a133a:	332e      	adds	r3, #46	@ 0x2e
 80a133c:	4602      	mov	r2, r0
 80a133e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80a1340:	7bfa      	ldrb	r2, [r7, #15]
 80a1342:	6879      	ldr	r1, [r7, #4]
 80a1344:	4613      	mov	r3, r2
 80a1346:	00db      	lsls	r3, r3, #3
 80a1348:	4413      	add	r3, r2
 80a134a:	009b      	lsls	r3, r3, #2
 80a134c:	440b      	add	r3, r1
 80a134e:	3318      	adds	r3, #24
 80a1350:	2200      	movs	r2, #0
 80a1352:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80a1354:	7bfa      	ldrb	r2, [r7, #15]
 80a1356:	6879      	ldr	r1, [r7, #4]
 80a1358:	4613      	mov	r3, r2
 80a135a:	00db      	lsls	r3, r3, #3
 80a135c:	4413      	add	r3, r2
 80a135e:	009b      	lsls	r3, r3, #2
 80a1360:	440b      	add	r3, r1
 80a1362:	331c      	adds	r3, #28
 80a1364:	2200      	movs	r2, #0
 80a1366:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80a1368:	7bfa      	ldrb	r2, [r7, #15]
 80a136a:	6879      	ldr	r1, [r7, #4]
 80a136c:	4613      	mov	r3, r2
 80a136e:	00db      	lsls	r3, r3, #3
 80a1370:	4413      	add	r3, r2
 80a1372:	009b      	lsls	r3, r3, #2
 80a1374:	440b      	add	r3, r1
 80a1376:	3320      	adds	r3, #32
 80a1378:	2200      	movs	r2, #0
 80a137a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80a137c:	7bfa      	ldrb	r2, [r7, #15]
 80a137e:	6879      	ldr	r1, [r7, #4]
 80a1380:	4613      	mov	r3, r2
 80a1382:	00db      	lsls	r3, r3, #3
 80a1384:	4413      	add	r3, r2
 80a1386:	009b      	lsls	r3, r3, #2
 80a1388:	440b      	add	r3, r1
 80a138a:	3324      	adds	r3, #36	@ 0x24
 80a138c:	2200      	movs	r2, #0
 80a138e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80a1390:	7bfb      	ldrb	r3, [r7, #15]
 80a1392:	3301      	adds	r3, #1
 80a1394:	73fb      	strb	r3, [r7, #15]
 80a1396:	687b      	ldr	r3, [r7, #4]
 80a1398:	791b      	ldrb	r3, [r3, #4]
 80a139a:	7bfa      	ldrb	r2, [r7, #15]
 80a139c:	429a      	cmp	r2, r3
 80a139e:	d3af      	bcc.n	80a1300 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80a13a0:	2300      	movs	r3, #0
 80a13a2:	73fb      	strb	r3, [r7, #15]
 80a13a4:	e044      	b.n	80a1430 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80a13a6:	7bfa      	ldrb	r2, [r7, #15]
 80a13a8:	6879      	ldr	r1, [r7, #4]
 80a13aa:	4613      	mov	r3, r2
 80a13ac:	00db      	lsls	r3, r3, #3
 80a13ae:	4413      	add	r3, r2
 80a13b0:	009b      	lsls	r3, r3, #2
 80a13b2:	440b      	add	r3, r1
 80a13b4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80a13b8:	2200      	movs	r2, #0
 80a13ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80a13bc:	7bfa      	ldrb	r2, [r7, #15]
 80a13be:	6879      	ldr	r1, [r7, #4]
 80a13c0:	4613      	mov	r3, r2
 80a13c2:	00db      	lsls	r3, r3, #3
 80a13c4:	4413      	add	r3, r2
 80a13c6:	009b      	lsls	r3, r3, #2
 80a13c8:	440b      	add	r3, r1
 80a13ca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80a13ce:	7bfa      	ldrb	r2, [r7, #15]
 80a13d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80a13d2:	7bfa      	ldrb	r2, [r7, #15]
 80a13d4:	6879      	ldr	r1, [r7, #4]
 80a13d6:	4613      	mov	r3, r2
 80a13d8:	00db      	lsls	r3, r3, #3
 80a13da:	4413      	add	r3, r2
 80a13dc:	009b      	lsls	r3, r3, #2
 80a13de:	440b      	add	r3, r1
 80a13e0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80a13e4:	2200      	movs	r2, #0
 80a13e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80a13e8:	7bfa      	ldrb	r2, [r7, #15]
 80a13ea:	6879      	ldr	r1, [r7, #4]
 80a13ec:	4613      	mov	r3, r2
 80a13ee:	00db      	lsls	r3, r3, #3
 80a13f0:	4413      	add	r3, r2
 80a13f2:	009b      	lsls	r3, r3, #2
 80a13f4:	440b      	add	r3, r1
 80a13f6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80a13fa:	2200      	movs	r2, #0
 80a13fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80a13fe:	7bfa      	ldrb	r2, [r7, #15]
 80a1400:	6879      	ldr	r1, [r7, #4]
 80a1402:	4613      	mov	r3, r2
 80a1404:	00db      	lsls	r3, r3, #3
 80a1406:	4413      	add	r3, r2
 80a1408:	009b      	lsls	r3, r3, #2
 80a140a:	440b      	add	r3, r1
 80a140c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80a1410:	2200      	movs	r2, #0
 80a1412:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80a1414:	7bfa      	ldrb	r2, [r7, #15]
 80a1416:	6879      	ldr	r1, [r7, #4]
 80a1418:	4613      	mov	r3, r2
 80a141a:	00db      	lsls	r3, r3, #3
 80a141c:	4413      	add	r3, r2
 80a141e:	009b      	lsls	r3, r3, #2
 80a1420:	440b      	add	r3, r1
 80a1422:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80a1426:	2200      	movs	r2, #0
 80a1428:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80a142a:	7bfb      	ldrb	r3, [r7, #15]
 80a142c:	3301      	adds	r3, #1
 80a142e:	73fb      	strb	r3, [r7, #15]
 80a1430:	687b      	ldr	r3, [r7, #4]
 80a1432:	791b      	ldrb	r3, [r3, #4]
 80a1434:	7bfa      	ldrb	r2, [r7, #15]
 80a1436:	429a      	cmp	r2, r3
 80a1438:	d3b5      	bcc.n	80a13a6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80a143a:	687b      	ldr	r3, [r7, #4]
 80a143c:	6818      	ldr	r0, [r3, #0]
 80a143e:	687b      	ldr	r3, [r7, #4]
 80a1440:	7c1a      	ldrb	r2, [r3, #16]
 80a1442:	f88d 2000 	strb.w	r2, [sp]
 80a1446:	3304      	adds	r3, #4
 80a1448:	cb0e      	ldmia	r3, {r1, r2, r3}
 80a144a:	f003 ff73 	bl	80a5334 <USB_DevInit>
 80a144e:	4603      	mov	r3, r0
 80a1450:	2b00      	cmp	r3, #0
 80a1452:	d005      	beq.n	80a1460 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80a1454:	687b      	ldr	r3, [r7, #4]
 80a1456:	2202      	movs	r2, #2
 80a1458:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80a145c:	2301      	movs	r3, #1
 80a145e:	e013      	b.n	80a1488 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80a1460:	687b      	ldr	r3, [r7, #4]
 80a1462:	2200      	movs	r2, #0
 80a1464:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80a1466:	687b      	ldr	r3, [r7, #4]
 80a1468:	2201      	movs	r2, #1
 80a146a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80a146e:	687b      	ldr	r3, [r7, #4]
 80a1470:	7b1b      	ldrb	r3, [r3, #12]
 80a1472:	2b01      	cmp	r3, #1
 80a1474:	d102      	bne.n	80a147c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80a1476:	6878      	ldr	r0, [r7, #4]
 80a1478:	f001 f96e 	bl	80a2758 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80a147c:	687b      	ldr	r3, [r7, #4]
 80a147e:	681b      	ldr	r3, [r3, #0]
 80a1480:	4618      	mov	r0, r3
 80a1482:	f004 ffb6 	bl	80a63f2 <USB_DevDisconnect>

  return HAL_OK;
 80a1486:	2300      	movs	r3, #0
}
 80a1488:	4618      	mov	r0, r3
 80a148a:	3710      	adds	r7, #16
 80a148c:	46bd      	mov	sp, r7
 80a148e:	bd80      	pop	{r7, pc}

080a1490 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80a1490:	b580      	push	{r7, lr}
 80a1492:	b084      	sub	sp, #16
 80a1494:	af00      	add	r7, sp, #0
 80a1496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80a1498:	687b      	ldr	r3, [r7, #4]
 80a149a:	681b      	ldr	r3, [r3, #0]
 80a149c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80a149e:	687b      	ldr	r3, [r7, #4]
 80a14a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80a14a4:	2b01      	cmp	r3, #1
 80a14a6:	d101      	bne.n	80a14ac <HAL_PCD_Start+0x1c>
 80a14a8:	2302      	movs	r3, #2
 80a14aa:	e022      	b.n	80a14f2 <HAL_PCD_Start+0x62>
 80a14ac:	687b      	ldr	r3, [r7, #4]
 80a14ae:	2201      	movs	r2, #1
 80a14b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80a14b4:	68fb      	ldr	r3, [r7, #12]
 80a14b6:	68db      	ldr	r3, [r3, #12]
 80a14b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80a14bc:	2b00      	cmp	r3, #0
 80a14be:	d009      	beq.n	80a14d4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80a14c0:	687b      	ldr	r3, [r7, #4]
 80a14c2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80a14c4:	2b01      	cmp	r3, #1
 80a14c6:	d105      	bne.n	80a14d4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80a14c8:	68fb      	ldr	r3, [r7, #12]
 80a14ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80a14cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80a14d0:	68fb      	ldr	r3, [r7, #12]
 80a14d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80a14d4:	687b      	ldr	r3, [r7, #4]
 80a14d6:	681b      	ldr	r3, [r3, #0]
 80a14d8:	4618      	mov	r0, r3
 80a14da:	f003 febd 	bl	80a5258 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80a14de:	687b      	ldr	r3, [r7, #4]
 80a14e0:	681b      	ldr	r3, [r3, #0]
 80a14e2:	4618      	mov	r0, r3
 80a14e4:	f004 ff64 	bl	80a63b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80a14e8:	687b      	ldr	r3, [r7, #4]
 80a14ea:	2200      	movs	r2, #0
 80a14ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80a14f0:	2300      	movs	r3, #0
}
 80a14f2:	4618      	mov	r0, r3
 80a14f4:	3710      	adds	r7, #16
 80a14f6:	46bd      	mov	sp, r7
 80a14f8:	bd80      	pop	{r7, pc}

080a14fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80a14fa:	b590      	push	{r4, r7, lr}
 80a14fc:	b08d      	sub	sp, #52	@ 0x34
 80a14fe:	af00      	add	r7, sp, #0
 80a1500:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80a1502:	687b      	ldr	r3, [r7, #4]
 80a1504:	681b      	ldr	r3, [r3, #0]
 80a1506:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a1508:	6a3b      	ldr	r3, [r7, #32]
 80a150a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80a150c:	687b      	ldr	r3, [r7, #4]
 80a150e:	681b      	ldr	r3, [r3, #0]
 80a1510:	4618      	mov	r0, r3
 80a1512:	f005 f822 	bl	80a655a <USB_GetMode>
 80a1516:	4603      	mov	r3, r0
 80a1518:	2b00      	cmp	r3, #0
 80a151a:	f040 84b9 	bne.w	80a1e90 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80a151e:	687b      	ldr	r3, [r7, #4]
 80a1520:	681b      	ldr	r3, [r3, #0]
 80a1522:	4618      	mov	r0, r3
 80a1524:	f004 ff86 	bl	80a6434 <USB_ReadInterrupts>
 80a1528:	4603      	mov	r3, r0
 80a152a:	2b00      	cmp	r3, #0
 80a152c:	f000 84af 	beq.w	80a1e8e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80a1530:	69fb      	ldr	r3, [r7, #28]
 80a1532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1536:	689b      	ldr	r3, [r3, #8]
 80a1538:	0a1b      	lsrs	r3, r3, #8
 80a153a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80a153e:	687b      	ldr	r3, [r7, #4]
 80a1540:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80a1544:	687b      	ldr	r3, [r7, #4]
 80a1546:	681b      	ldr	r3, [r3, #0]
 80a1548:	4618      	mov	r0, r3
 80a154a:	f004 ff73 	bl	80a6434 <USB_ReadInterrupts>
 80a154e:	4603      	mov	r3, r0
 80a1550:	f003 0302 	and.w	r3, r3, #2
 80a1554:	2b02      	cmp	r3, #2
 80a1556:	d107      	bne.n	80a1568 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80a1558:	687b      	ldr	r3, [r7, #4]
 80a155a:	681b      	ldr	r3, [r3, #0]
 80a155c:	695a      	ldr	r2, [r3, #20]
 80a155e:	687b      	ldr	r3, [r7, #4]
 80a1560:	681b      	ldr	r3, [r3, #0]
 80a1562:	f002 0202 	and.w	r2, r2, #2
 80a1566:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80a1568:	687b      	ldr	r3, [r7, #4]
 80a156a:	681b      	ldr	r3, [r3, #0]
 80a156c:	4618      	mov	r0, r3
 80a156e:	f004 ff61 	bl	80a6434 <USB_ReadInterrupts>
 80a1572:	4603      	mov	r3, r0
 80a1574:	f003 0310 	and.w	r3, r3, #16
 80a1578:	2b10      	cmp	r3, #16
 80a157a:	d161      	bne.n	80a1640 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80a157c:	687b      	ldr	r3, [r7, #4]
 80a157e:	681b      	ldr	r3, [r3, #0]
 80a1580:	699a      	ldr	r2, [r3, #24]
 80a1582:	687b      	ldr	r3, [r7, #4]
 80a1584:	681b      	ldr	r3, [r3, #0]
 80a1586:	f022 0210 	bic.w	r2, r2, #16
 80a158a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80a158c:	6a3b      	ldr	r3, [r7, #32]
 80a158e:	6a1b      	ldr	r3, [r3, #32]
 80a1590:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80a1592:	69bb      	ldr	r3, [r7, #24]
 80a1594:	f003 020f 	and.w	r2, r3, #15
 80a1598:	4613      	mov	r3, r2
 80a159a:	00db      	lsls	r3, r3, #3
 80a159c:	4413      	add	r3, r2
 80a159e:	009b      	lsls	r3, r3, #2
 80a15a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a15a4:	687a      	ldr	r2, [r7, #4]
 80a15a6:	4413      	add	r3, r2
 80a15a8:	3304      	adds	r3, #4
 80a15aa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80a15ac:	69bb      	ldr	r3, [r7, #24]
 80a15ae:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80a15b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80a15b6:	d124      	bne.n	80a1602 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80a15b8:	69ba      	ldr	r2, [r7, #24]
 80a15ba:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80a15be:	4013      	ands	r3, r2
 80a15c0:	2b00      	cmp	r3, #0
 80a15c2:	d035      	beq.n	80a1630 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80a15c4:	697b      	ldr	r3, [r7, #20]
 80a15c6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80a15c8:	69bb      	ldr	r3, [r7, #24]
 80a15ca:	091b      	lsrs	r3, r3, #4
 80a15cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80a15ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80a15d2:	b29b      	uxth	r3, r3
 80a15d4:	461a      	mov	r2, r3
 80a15d6:	6a38      	ldr	r0, [r7, #32]
 80a15d8:	f004 fd98 	bl	80a610c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80a15dc:	697b      	ldr	r3, [r7, #20]
 80a15de:	68da      	ldr	r2, [r3, #12]
 80a15e0:	69bb      	ldr	r3, [r7, #24]
 80a15e2:	091b      	lsrs	r3, r3, #4
 80a15e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80a15e8:	441a      	add	r2, r3
 80a15ea:	697b      	ldr	r3, [r7, #20]
 80a15ec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80a15ee:	697b      	ldr	r3, [r7, #20]
 80a15f0:	695a      	ldr	r2, [r3, #20]
 80a15f2:	69bb      	ldr	r3, [r7, #24]
 80a15f4:	091b      	lsrs	r3, r3, #4
 80a15f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80a15fa:	441a      	add	r2, r3
 80a15fc:	697b      	ldr	r3, [r7, #20]
 80a15fe:	615a      	str	r2, [r3, #20]
 80a1600:	e016      	b.n	80a1630 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80a1602:	69bb      	ldr	r3, [r7, #24]
 80a1604:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80a1608:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80a160c:	d110      	bne.n	80a1630 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80a160e:	687b      	ldr	r3, [r7, #4]
 80a1610:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80a1614:	2208      	movs	r2, #8
 80a1616:	4619      	mov	r1, r3
 80a1618:	6a38      	ldr	r0, [r7, #32]
 80a161a:	f004 fd77 	bl	80a610c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80a161e:	697b      	ldr	r3, [r7, #20]
 80a1620:	695a      	ldr	r2, [r3, #20]
 80a1622:	69bb      	ldr	r3, [r7, #24]
 80a1624:	091b      	lsrs	r3, r3, #4
 80a1626:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80a162a:	441a      	add	r2, r3
 80a162c:	697b      	ldr	r3, [r7, #20]
 80a162e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80a1630:	687b      	ldr	r3, [r7, #4]
 80a1632:	681b      	ldr	r3, [r3, #0]
 80a1634:	699a      	ldr	r2, [r3, #24]
 80a1636:	687b      	ldr	r3, [r7, #4]
 80a1638:	681b      	ldr	r3, [r3, #0]
 80a163a:	f042 0210 	orr.w	r2, r2, #16
 80a163e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80a1640:	687b      	ldr	r3, [r7, #4]
 80a1642:	681b      	ldr	r3, [r3, #0]
 80a1644:	4618      	mov	r0, r3
 80a1646:	f004 fef5 	bl	80a6434 <USB_ReadInterrupts>
 80a164a:	4603      	mov	r3, r0
 80a164c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80a1650:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80a1654:	f040 80a7 	bne.w	80a17a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80a1658:	2300      	movs	r3, #0
 80a165a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80a165c:	687b      	ldr	r3, [r7, #4]
 80a165e:	681b      	ldr	r3, [r3, #0]
 80a1660:	4618      	mov	r0, r3
 80a1662:	f004 fefa 	bl	80a645a <USB_ReadDevAllOutEpInterrupt>
 80a1666:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80a1668:	e099      	b.n	80a179e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80a166a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80a166c:	f003 0301 	and.w	r3, r3, #1
 80a1670:	2b00      	cmp	r3, #0
 80a1672:	f000 808e 	beq.w	80a1792 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80a1676:	687b      	ldr	r3, [r7, #4]
 80a1678:	681b      	ldr	r3, [r3, #0]
 80a167a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a167c:	b2d2      	uxtb	r2, r2
 80a167e:	4611      	mov	r1, r2
 80a1680:	4618      	mov	r0, r3
 80a1682:	f004 ff1e 	bl	80a64c2 <USB_ReadDevOutEPInterrupt>
 80a1686:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80a1688:	693b      	ldr	r3, [r7, #16]
 80a168a:	f003 0301 	and.w	r3, r3, #1
 80a168e:	2b00      	cmp	r3, #0
 80a1690:	d00c      	beq.n	80a16ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80a1692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1694:	015a      	lsls	r2, r3, #5
 80a1696:	69fb      	ldr	r3, [r7, #28]
 80a1698:	4413      	add	r3, r2
 80a169a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a169e:	461a      	mov	r2, r3
 80a16a0:	2301      	movs	r3, #1
 80a16a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80a16a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80a16a6:	6878      	ldr	r0, [r7, #4]
 80a16a8:	f000 fed0 	bl	80a244c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80a16ac:	693b      	ldr	r3, [r7, #16]
 80a16ae:	f003 0308 	and.w	r3, r3, #8
 80a16b2:	2b00      	cmp	r3, #0
 80a16b4:	d00c      	beq.n	80a16d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80a16b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a16b8:	015a      	lsls	r2, r3, #5
 80a16ba:	69fb      	ldr	r3, [r7, #28]
 80a16bc:	4413      	add	r3, r2
 80a16be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a16c2:	461a      	mov	r2, r3
 80a16c4:	2308      	movs	r3, #8
 80a16c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80a16c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80a16ca:	6878      	ldr	r0, [r7, #4]
 80a16cc:	f000 ffa6 	bl	80a261c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80a16d0:	693b      	ldr	r3, [r7, #16]
 80a16d2:	f003 0310 	and.w	r3, r3, #16
 80a16d6:	2b00      	cmp	r3, #0
 80a16d8:	d008      	beq.n	80a16ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80a16da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a16dc:	015a      	lsls	r2, r3, #5
 80a16de:	69fb      	ldr	r3, [r7, #28]
 80a16e0:	4413      	add	r3, r2
 80a16e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a16e6:	461a      	mov	r2, r3
 80a16e8:	2310      	movs	r3, #16
 80a16ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80a16ec:	693b      	ldr	r3, [r7, #16]
 80a16ee:	f003 0302 	and.w	r3, r3, #2
 80a16f2:	2b00      	cmp	r3, #0
 80a16f4:	d030      	beq.n	80a1758 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80a16f6:	6a3b      	ldr	r3, [r7, #32]
 80a16f8:	695b      	ldr	r3, [r3, #20]
 80a16fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80a16fe:	2b80      	cmp	r3, #128	@ 0x80
 80a1700:	d109      	bne.n	80a1716 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80a1702:	69fb      	ldr	r3, [r7, #28]
 80a1704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1708:	685b      	ldr	r3, [r3, #4]
 80a170a:	69fa      	ldr	r2, [r7, #28]
 80a170c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1710:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80a1714:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80a1716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1718:	4613      	mov	r3, r2
 80a171a:	00db      	lsls	r3, r3, #3
 80a171c:	4413      	add	r3, r2
 80a171e:	009b      	lsls	r3, r3, #2
 80a1720:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a1724:	687a      	ldr	r2, [r7, #4]
 80a1726:	4413      	add	r3, r2
 80a1728:	3304      	adds	r3, #4
 80a172a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80a172c:	697b      	ldr	r3, [r7, #20]
 80a172e:	78db      	ldrb	r3, [r3, #3]
 80a1730:	2b01      	cmp	r3, #1
 80a1732:	d108      	bne.n	80a1746 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80a1734:	697b      	ldr	r3, [r7, #20]
 80a1736:	2200      	movs	r2, #0
 80a1738:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80a173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a173c:	b2db      	uxtb	r3, r3
 80a173e:	4619      	mov	r1, r3
 80a1740:	6878      	ldr	r0, [r7, #4]
 80a1742:	f007 fb43 	bl	80a8dcc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80a1746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1748:	015a      	lsls	r2, r3, #5
 80a174a:	69fb      	ldr	r3, [r7, #28]
 80a174c:	4413      	add	r3, r2
 80a174e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a1752:	461a      	mov	r2, r3
 80a1754:	2302      	movs	r3, #2
 80a1756:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80a1758:	693b      	ldr	r3, [r7, #16]
 80a175a:	f003 0320 	and.w	r3, r3, #32
 80a175e:	2b00      	cmp	r3, #0
 80a1760:	d008      	beq.n	80a1774 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80a1762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1764:	015a      	lsls	r2, r3, #5
 80a1766:	69fb      	ldr	r3, [r7, #28]
 80a1768:	4413      	add	r3, r2
 80a176a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a176e:	461a      	mov	r2, r3
 80a1770:	2320      	movs	r3, #32
 80a1772:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80a1774:	693b      	ldr	r3, [r7, #16]
 80a1776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80a177a:	2b00      	cmp	r3, #0
 80a177c:	d009      	beq.n	80a1792 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80a177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1780:	015a      	lsls	r2, r3, #5
 80a1782:	69fb      	ldr	r3, [r7, #28]
 80a1784:	4413      	add	r3, r2
 80a1786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a178a:	461a      	mov	r2, r3
 80a178c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80a1790:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80a1792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1794:	3301      	adds	r3, #1
 80a1796:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80a1798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80a179a:	085b      	lsrs	r3, r3, #1
 80a179c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80a179e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80a17a0:	2b00      	cmp	r3, #0
 80a17a2:	f47f af62 	bne.w	80a166a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80a17a6:	687b      	ldr	r3, [r7, #4]
 80a17a8:	681b      	ldr	r3, [r3, #0]
 80a17aa:	4618      	mov	r0, r3
 80a17ac:	f004 fe42 	bl	80a6434 <USB_ReadInterrupts>
 80a17b0:	4603      	mov	r3, r0
 80a17b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80a17b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80a17ba:	f040 80db 	bne.w	80a1974 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80a17be:	687b      	ldr	r3, [r7, #4]
 80a17c0:	681b      	ldr	r3, [r3, #0]
 80a17c2:	4618      	mov	r0, r3
 80a17c4:	f004 fe63 	bl	80a648e <USB_ReadDevAllInEpInterrupt>
 80a17c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80a17ca:	2300      	movs	r3, #0
 80a17cc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80a17ce:	e0cd      	b.n	80a196c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80a17d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80a17d2:	f003 0301 	and.w	r3, r3, #1
 80a17d6:	2b00      	cmp	r3, #0
 80a17d8:	f000 80c2 	beq.w	80a1960 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80a17dc:	687b      	ldr	r3, [r7, #4]
 80a17de:	681b      	ldr	r3, [r3, #0]
 80a17e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a17e2:	b2d2      	uxtb	r2, r2
 80a17e4:	4611      	mov	r1, r2
 80a17e6:	4618      	mov	r0, r3
 80a17e8:	f004 fe89 	bl	80a64fe <USB_ReadDevInEPInterrupt>
 80a17ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80a17ee:	693b      	ldr	r3, [r7, #16]
 80a17f0:	f003 0301 	and.w	r3, r3, #1
 80a17f4:	2b00      	cmp	r3, #0
 80a17f6:	d057      	beq.n	80a18a8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80a17f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a17fa:	f003 030f 	and.w	r3, r3, #15
 80a17fe:	2201      	movs	r2, #1
 80a1800:	fa02 f303 	lsl.w	r3, r2, r3
 80a1804:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80a1806:	69fb      	ldr	r3, [r7, #28]
 80a1808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a180c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80a180e:	68fb      	ldr	r3, [r7, #12]
 80a1810:	43db      	mvns	r3, r3
 80a1812:	69f9      	ldr	r1, [r7, #28]
 80a1814:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a1818:	4013      	ands	r3, r2
 80a181a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80a181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a181e:	015a      	lsls	r2, r3, #5
 80a1820:	69fb      	ldr	r3, [r7, #28]
 80a1822:	4413      	add	r3, r2
 80a1824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a1828:	461a      	mov	r2, r3
 80a182a:	2301      	movs	r3, #1
 80a182c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80a182e:	687b      	ldr	r3, [r7, #4]
 80a1830:	799b      	ldrb	r3, [r3, #6]
 80a1832:	2b01      	cmp	r3, #1
 80a1834:	d132      	bne.n	80a189c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80a1836:	6879      	ldr	r1, [r7, #4]
 80a1838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a183a:	4613      	mov	r3, r2
 80a183c:	00db      	lsls	r3, r3, #3
 80a183e:	4413      	add	r3, r2
 80a1840:	009b      	lsls	r3, r3, #2
 80a1842:	440b      	add	r3, r1
 80a1844:	3320      	adds	r3, #32
 80a1846:	6819      	ldr	r1, [r3, #0]
 80a1848:	6878      	ldr	r0, [r7, #4]
 80a184a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a184c:	4613      	mov	r3, r2
 80a184e:	00db      	lsls	r3, r3, #3
 80a1850:	4413      	add	r3, r2
 80a1852:	009b      	lsls	r3, r3, #2
 80a1854:	4403      	add	r3, r0
 80a1856:	331c      	adds	r3, #28
 80a1858:	681b      	ldr	r3, [r3, #0]
 80a185a:	4419      	add	r1, r3
 80a185c:	6878      	ldr	r0, [r7, #4]
 80a185e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1860:	4613      	mov	r3, r2
 80a1862:	00db      	lsls	r3, r3, #3
 80a1864:	4413      	add	r3, r2
 80a1866:	009b      	lsls	r3, r3, #2
 80a1868:	4403      	add	r3, r0
 80a186a:	3320      	adds	r3, #32
 80a186c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80a186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1870:	2b00      	cmp	r3, #0
 80a1872:	d113      	bne.n	80a189c <HAL_PCD_IRQHandler+0x3a2>
 80a1874:	6879      	ldr	r1, [r7, #4]
 80a1876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1878:	4613      	mov	r3, r2
 80a187a:	00db      	lsls	r3, r3, #3
 80a187c:	4413      	add	r3, r2
 80a187e:	009b      	lsls	r3, r3, #2
 80a1880:	440b      	add	r3, r1
 80a1882:	3324      	adds	r3, #36	@ 0x24
 80a1884:	681b      	ldr	r3, [r3, #0]
 80a1886:	2b00      	cmp	r3, #0
 80a1888:	d108      	bne.n	80a189c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80a188a:	687b      	ldr	r3, [r7, #4]
 80a188c:	6818      	ldr	r0, [r3, #0]
 80a188e:	687b      	ldr	r3, [r7, #4]
 80a1890:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80a1894:	461a      	mov	r2, r3
 80a1896:	2101      	movs	r1, #1
 80a1898:	f004 fe92 	bl	80a65c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80a189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a189e:	b2db      	uxtb	r3, r3
 80a18a0:	4619      	mov	r1, r3
 80a18a2:	6878      	ldr	r0, [r7, #4]
 80a18a4:	f007 fa0d 	bl	80a8cc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80a18a8:	693b      	ldr	r3, [r7, #16]
 80a18aa:	f003 0308 	and.w	r3, r3, #8
 80a18ae:	2b00      	cmp	r3, #0
 80a18b0:	d008      	beq.n	80a18c4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80a18b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a18b4:	015a      	lsls	r2, r3, #5
 80a18b6:	69fb      	ldr	r3, [r7, #28]
 80a18b8:	4413      	add	r3, r2
 80a18ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a18be:	461a      	mov	r2, r3
 80a18c0:	2308      	movs	r3, #8
 80a18c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80a18c4:	693b      	ldr	r3, [r7, #16]
 80a18c6:	f003 0310 	and.w	r3, r3, #16
 80a18ca:	2b00      	cmp	r3, #0
 80a18cc:	d008      	beq.n	80a18e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80a18ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a18d0:	015a      	lsls	r2, r3, #5
 80a18d2:	69fb      	ldr	r3, [r7, #28]
 80a18d4:	4413      	add	r3, r2
 80a18d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a18da:	461a      	mov	r2, r3
 80a18dc:	2310      	movs	r3, #16
 80a18de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80a18e0:	693b      	ldr	r3, [r7, #16]
 80a18e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80a18e6:	2b00      	cmp	r3, #0
 80a18e8:	d008      	beq.n	80a18fc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80a18ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a18ec:	015a      	lsls	r2, r3, #5
 80a18ee:	69fb      	ldr	r3, [r7, #28]
 80a18f0:	4413      	add	r3, r2
 80a18f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a18f6:	461a      	mov	r2, r3
 80a18f8:	2340      	movs	r3, #64	@ 0x40
 80a18fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80a18fc:	693b      	ldr	r3, [r7, #16]
 80a18fe:	f003 0302 	and.w	r3, r3, #2
 80a1902:	2b00      	cmp	r3, #0
 80a1904:	d023      	beq.n	80a194e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80a1906:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80a1908:	6a38      	ldr	r0, [r7, #32]
 80a190a:	f003 fe71 	bl	80a55f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80a190e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1910:	4613      	mov	r3, r2
 80a1912:	00db      	lsls	r3, r3, #3
 80a1914:	4413      	add	r3, r2
 80a1916:	009b      	lsls	r3, r3, #2
 80a1918:	3310      	adds	r3, #16
 80a191a:	687a      	ldr	r2, [r7, #4]
 80a191c:	4413      	add	r3, r2
 80a191e:	3304      	adds	r3, #4
 80a1920:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80a1922:	697b      	ldr	r3, [r7, #20]
 80a1924:	78db      	ldrb	r3, [r3, #3]
 80a1926:	2b01      	cmp	r3, #1
 80a1928:	d108      	bne.n	80a193c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80a192a:	697b      	ldr	r3, [r7, #20]
 80a192c:	2200      	movs	r2, #0
 80a192e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80a1930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1932:	b2db      	uxtb	r3, r3
 80a1934:	4619      	mov	r1, r3
 80a1936:	6878      	ldr	r0, [r7, #4]
 80a1938:	f007 fa5a 	bl	80a8df0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80a193c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a193e:	015a      	lsls	r2, r3, #5
 80a1940:	69fb      	ldr	r3, [r7, #28]
 80a1942:	4413      	add	r3, r2
 80a1944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a1948:	461a      	mov	r2, r3
 80a194a:	2302      	movs	r3, #2
 80a194c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80a194e:	693b      	ldr	r3, [r7, #16]
 80a1950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80a1954:	2b00      	cmp	r3, #0
 80a1956:	d003      	beq.n	80a1960 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80a1958:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80a195a:	6878      	ldr	r0, [r7, #4]
 80a195c:	f000 fcea 	bl	80a2334 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80a1960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1962:	3301      	adds	r3, #1
 80a1964:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80a1966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80a1968:	085b      	lsrs	r3, r3, #1
 80a196a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80a196c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80a196e:	2b00      	cmp	r3, #0
 80a1970:	f47f af2e 	bne.w	80a17d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80a1974:	687b      	ldr	r3, [r7, #4]
 80a1976:	681b      	ldr	r3, [r3, #0]
 80a1978:	4618      	mov	r0, r3
 80a197a:	f004 fd5b 	bl	80a6434 <USB_ReadInterrupts>
 80a197e:	4603      	mov	r3, r0
 80a1980:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a1984:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a1988:	d122      	bne.n	80a19d0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80a198a:	69fb      	ldr	r3, [r7, #28]
 80a198c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1990:	685b      	ldr	r3, [r3, #4]
 80a1992:	69fa      	ldr	r2, [r7, #28]
 80a1994:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1998:	f023 0301 	bic.w	r3, r3, #1
 80a199c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80a199e:	687b      	ldr	r3, [r7, #4]
 80a19a0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80a19a4:	2b01      	cmp	r3, #1
 80a19a6:	d108      	bne.n	80a19ba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80a19a8:	687b      	ldr	r3, [r7, #4]
 80a19aa:	2200      	movs	r2, #0
 80a19ac:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80a19b0:	2100      	movs	r1, #0
 80a19b2:	6878      	ldr	r0, [r7, #4]
 80a19b4:	f000 fef4 	bl	80a27a0 <HAL_PCDEx_LPM_Callback>
 80a19b8:	e002      	b.n	80a19c0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80a19ba:	6878      	ldr	r0, [r7, #4]
 80a19bc:	f007 f9f8 	bl	80a8db0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80a19c0:	687b      	ldr	r3, [r7, #4]
 80a19c2:	681b      	ldr	r3, [r3, #0]
 80a19c4:	695a      	ldr	r2, [r3, #20]
 80a19c6:	687b      	ldr	r3, [r7, #4]
 80a19c8:	681b      	ldr	r3, [r3, #0]
 80a19ca:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80a19ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80a19d0:	687b      	ldr	r3, [r7, #4]
 80a19d2:	681b      	ldr	r3, [r3, #0]
 80a19d4:	4618      	mov	r0, r3
 80a19d6:	f004 fd2d 	bl	80a6434 <USB_ReadInterrupts>
 80a19da:	4603      	mov	r3, r0
 80a19dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80a19e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80a19e4:	d112      	bne.n	80a1a0c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80a19e6:	69fb      	ldr	r3, [r7, #28]
 80a19e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a19ec:	689b      	ldr	r3, [r3, #8]
 80a19ee:	f003 0301 	and.w	r3, r3, #1
 80a19f2:	2b01      	cmp	r3, #1
 80a19f4:	d102      	bne.n	80a19fc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80a19f6:	6878      	ldr	r0, [r7, #4]
 80a19f8:	f007 f9b4 	bl	80a8d64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80a19fc:	687b      	ldr	r3, [r7, #4]
 80a19fe:	681b      	ldr	r3, [r3, #0]
 80a1a00:	695a      	ldr	r2, [r3, #20]
 80a1a02:	687b      	ldr	r3, [r7, #4]
 80a1a04:	681b      	ldr	r3, [r3, #0]
 80a1a06:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80a1a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80a1a0c:	687b      	ldr	r3, [r7, #4]
 80a1a0e:	681b      	ldr	r3, [r3, #0]
 80a1a10:	4618      	mov	r0, r3
 80a1a12:	f004 fd0f 	bl	80a6434 <USB_ReadInterrupts>
 80a1a16:	4603      	mov	r3, r0
 80a1a18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80a1a1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80a1a20:	d121      	bne.n	80a1a66 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80a1a22:	687b      	ldr	r3, [r7, #4]
 80a1a24:	681b      	ldr	r3, [r3, #0]
 80a1a26:	695a      	ldr	r2, [r3, #20]
 80a1a28:	687b      	ldr	r3, [r7, #4]
 80a1a2a:	681b      	ldr	r3, [r3, #0]
 80a1a2c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80a1a30:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80a1a32:	687b      	ldr	r3, [r7, #4]
 80a1a34:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80a1a38:	2b00      	cmp	r3, #0
 80a1a3a:	d111      	bne.n	80a1a60 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80a1a3c:	687b      	ldr	r3, [r7, #4]
 80a1a3e:	2201      	movs	r2, #1
 80a1a40:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80a1a44:	687b      	ldr	r3, [r7, #4]
 80a1a46:	681b      	ldr	r3, [r3, #0]
 80a1a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a1a4a:	089b      	lsrs	r3, r3, #2
 80a1a4c:	f003 020f 	and.w	r2, r3, #15
 80a1a50:	687b      	ldr	r3, [r7, #4]
 80a1a52:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80a1a56:	2101      	movs	r1, #1
 80a1a58:	6878      	ldr	r0, [r7, #4]
 80a1a5a:	f000 fea1 	bl	80a27a0 <HAL_PCDEx_LPM_Callback>
 80a1a5e:	e002      	b.n	80a1a66 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80a1a60:	6878      	ldr	r0, [r7, #4]
 80a1a62:	f007 f97f 	bl	80a8d64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80a1a66:	687b      	ldr	r3, [r7, #4]
 80a1a68:	681b      	ldr	r3, [r3, #0]
 80a1a6a:	4618      	mov	r0, r3
 80a1a6c:	f004 fce2 	bl	80a6434 <USB_ReadInterrupts>
 80a1a70:	4603      	mov	r3, r0
 80a1a72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80a1a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80a1a7a:	f040 80b7 	bne.w	80a1bec <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80a1a7e:	69fb      	ldr	r3, [r7, #28]
 80a1a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1a84:	685b      	ldr	r3, [r3, #4]
 80a1a86:	69fa      	ldr	r2, [r7, #28]
 80a1a88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1a8c:	f023 0301 	bic.w	r3, r3, #1
 80a1a90:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80a1a92:	687b      	ldr	r3, [r7, #4]
 80a1a94:	681b      	ldr	r3, [r3, #0]
 80a1a96:	2110      	movs	r1, #16
 80a1a98:	4618      	mov	r0, r3
 80a1a9a:	f003 fda9 	bl	80a55f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80a1a9e:	2300      	movs	r3, #0
 80a1aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80a1aa2:	e046      	b.n	80a1b32 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80a1aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a1aa6:	015a      	lsls	r2, r3, #5
 80a1aa8:	69fb      	ldr	r3, [r7, #28]
 80a1aaa:	4413      	add	r3, r2
 80a1aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a1ab0:	461a      	mov	r2, r3
 80a1ab2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80a1ab6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80a1ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a1aba:	015a      	lsls	r2, r3, #5
 80a1abc:	69fb      	ldr	r3, [r7, #28]
 80a1abe:	4413      	add	r3, r2
 80a1ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a1ac4:	681b      	ldr	r3, [r3, #0]
 80a1ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80a1ac8:	0151      	lsls	r1, r2, #5
 80a1aca:	69fa      	ldr	r2, [r7, #28]
 80a1acc:	440a      	add	r2, r1
 80a1ace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a1ad2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80a1ad6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80a1ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a1ada:	015a      	lsls	r2, r3, #5
 80a1adc:	69fb      	ldr	r3, [r7, #28]
 80a1ade:	4413      	add	r3, r2
 80a1ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a1ae4:	461a      	mov	r2, r3
 80a1ae6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80a1aea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80a1aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a1aee:	015a      	lsls	r2, r3, #5
 80a1af0:	69fb      	ldr	r3, [r7, #28]
 80a1af2:	4413      	add	r3, r2
 80a1af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a1af8:	681b      	ldr	r3, [r3, #0]
 80a1afa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80a1afc:	0151      	lsls	r1, r2, #5
 80a1afe:	69fa      	ldr	r2, [r7, #28]
 80a1b00:	440a      	add	r2, r1
 80a1b02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a1b06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80a1b0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80a1b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a1b0e:	015a      	lsls	r2, r3, #5
 80a1b10:	69fb      	ldr	r3, [r7, #28]
 80a1b12:	4413      	add	r3, r2
 80a1b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a1b18:	681b      	ldr	r3, [r3, #0]
 80a1b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80a1b1c:	0151      	lsls	r1, r2, #5
 80a1b1e:	69fa      	ldr	r2, [r7, #28]
 80a1b20:	440a      	add	r2, r1
 80a1b22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a1b26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80a1b2a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80a1b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a1b2e:	3301      	adds	r3, #1
 80a1b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80a1b32:	687b      	ldr	r3, [r7, #4]
 80a1b34:	791b      	ldrb	r3, [r3, #4]
 80a1b36:	461a      	mov	r2, r3
 80a1b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a1b3a:	4293      	cmp	r3, r2
 80a1b3c:	d3b2      	bcc.n	80a1aa4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80a1b3e:	69fb      	ldr	r3, [r7, #28]
 80a1b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1b44:	69db      	ldr	r3, [r3, #28]
 80a1b46:	69fa      	ldr	r2, [r7, #28]
 80a1b48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1b4c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80a1b50:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80a1b52:	687b      	ldr	r3, [r7, #4]
 80a1b54:	7bdb      	ldrb	r3, [r3, #15]
 80a1b56:	2b00      	cmp	r3, #0
 80a1b58:	d016      	beq.n	80a1b88 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80a1b5a:	69fb      	ldr	r3, [r7, #28]
 80a1b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80a1b64:	69fa      	ldr	r2, [r7, #28]
 80a1b66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1b6a:	f043 030b 	orr.w	r3, r3, #11
 80a1b6e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80a1b72:	69fb      	ldr	r3, [r7, #28]
 80a1b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80a1b7a:	69fa      	ldr	r2, [r7, #28]
 80a1b7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1b80:	f043 030b 	orr.w	r3, r3, #11
 80a1b84:	6453      	str	r3, [r2, #68]	@ 0x44
 80a1b86:	e015      	b.n	80a1bb4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80a1b88:	69fb      	ldr	r3, [r7, #28]
 80a1b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1b8e:	695a      	ldr	r2, [r3, #20]
 80a1b90:	69fb      	ldr	r3, [r7, #28]
 80a1b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1b96:	4619      	mov	r1, r3
 80a1b98:	f242 032b 	movw	r3, #8235	@ 0x202b
 80a1b9c:	4313      	orrs	r3, r2
 80a1b9e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80a1ba0:	69fb      	ldr	r3, [r7, #28]
 80a1ba2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1ba6:	691b      	ldr	r3, [r3, #16]
 80a1ba8:	69fa      	ldr	r2, [r7, #28]
 80a1baa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1bae:	f043 030b 	orr.w	r3, r3, #11
 80a1bb2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80a1bb4:	69fb      	ldr	r3, [r7, #28]
 80a1bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1bba:	681b      	ldr	r3, [r3, #0]
 80a1bbc:	69fa      	ldr	r2, [r7, #28]
 80a1bbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1bc2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80a1bc6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80a1bc8:	687b      	ldr	r3, [r7, #4]
 80a1bca:	6818      	ldr	r0, [r3, #0]
 80a1bcc:	687b      	ldr	r3, [r7, #4]
 80a1bce:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80a1bd0:	687b      	ldr	r3, [r7, #4]
 80a1bd2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80a1bd6:	461a      	mov	r2, r3
 80a1bd8:	f004 fcf2 	bl	80a65c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80a1bdc:	687b      	ldr	r3, [r7, #4]
 80a1bde:	681b      	ldr	r3, [r3, #0]
 80a1be0:	695a      	ldr	r2, [r3, #20]
 80a1be2:	687b      	ldr	r3, [r7, #4]
 80a1be4:	681b      	ldr	r3, [r3, #0]
 80a1be6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80a1bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80a1bec:	687b      	ldr	r3, [r7, #4]
 80a1bee:	681b      	ldr	r3, [r3, #0]
 80a1bf0:	4618      	mov	r0, r3
 80a1bf2:	f004 fc1f 	bl	80a6434 <USB_ReadInterrupts>
 80a1bf6:	4603      	mov	r3, r0
 80a1bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80a1bfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80a1c00:	d123      	bne.n	80a1c4a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80a1c02:	687b      	ldr	r3, [r7, #4]
 80a1c04:	681b      	ldr	r3, [r3, #0]
 80a1c06:	4618      	mov	r0, r3
 80a1c08:	f004 fcb6 	bl	80a6578 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80a1c0c:	687b      	ldr	r3, [r7, #4]
 80a1c0e:	681b      	ldr	r3, [r3, #0]
 80a1c10:	4618      	mov	r0, r3
 80a1c12:	f003 fd66 	bl	80a56e2 <USB_GetDevSpeed>
 80a1c16:	4603      	mov	r3, r0
 80a1c18:	461a      	mov	r2, r3
 80a1c1a:	687b      	ldr	r3, [r7, #4]
 80a1c1c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80a1c1e:	687b      	ldr	r3, [r7, #4]
 80a1c20:	681c      	ldr	r4, [r3, #0]
 80a1c22:	f001 fe27 	bl	80a3874 <HAL_RCC_GetHCLKFreq>
 80a1c26:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80a1c28:	687b      	ldr	r3, [r7, #4]
 80a1c2a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80a1c2c:	461a      	mov	r2, r3
 80a1c2e:	4620      	mov	r0, r4
 80a1c30:	f003 fa70 	bl	80a5114 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80a1c34:	6878      	ldr	r0, [r7, #4]
 80a1c36:	f007 f86c 	bl	80a8d12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80a1c3a:	687b      	ldr	r3, [r7, #4]
 80a1c3c:	681b      	ldr	r3, [r3, #0]
 80a1c3e:	695a      	ldr	r2, [r3, #20]
 80a1c40:	687b      	ldr	r3, [r7, #4]
 80a1c42:	681b      	ldr	r3, [r3, #0]
 80a1c44:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80a1c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80a1c4a:	687b      	ldr	r3, [r7, #4]
 80a1c4c:	681b      	ldr	r3, [r3, #0]
 80a1c4e:	4618      	mov	r0, r3
 80a1c50:	f004 fbf0 	bl	80a6434 <USB_ReadInterrupts>
 80a1c54:	4603      	mov	r3, r0
 80a1c56:	f003 0308 	and.w	r3, r3, #8
 80a1c5a:	2b08      	cmp	r3, #8
 80a1c5c:	d10a      	bne.n	80a1c74 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80a1c5e:	6878      	ldr	r0, [r7, #4]
 80a1c60:	f007 f849 	bl	80a8cf6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80a1c64:	687b      	ldr	r3, [r7, #4]
 80a1c66:	681b      	ldr	r3, [r3, #0]
 80a1c68:	695a      	ldr	r2, [r3, #20]
 80a1c6a:	687b      	ldr	r3, [r7, #4]
 80a1c6c:	681b      	ldr	r3, [r3, #0]
 80a1c6e:	f002 0208 	and.w	r2, r2, #8
 80a1c72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80a1c74:	687b      	ldr	r3, [r7, #4]
 80a1c76:	681b      	ldr	r3, [r3, #0]
 80a1c78:	4618      	mov	r0, r3
 80a1c7a:	f004 fbdb 	bl	80a6434 <USB_ReadInterrupts>
 80a1c7e:	4603      	mov	r3, r0
 80a1c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80a1c84:	2b80      	cmp	r3, #128	@ 0x80
 80a1c86:	d123      	bne.n	80a1cd0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80a1c88:	6a3b      	ldr	r3, [r7, #32]
 80a1c8a:	699b      	ldr	r3, [r3, #24]
 80a1c8c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80a1c90:	6a3b      	ldr	r3, [r7, #32]
 80a1c92:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80a1c94:	2301      	movs	r3, #1
 80a1c96:	627b      	str	r3, [r7, #36]	@ 0x24
 80a1c98:	e014      	b.n	80a1cc4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80a1c9a:	6879      	ldr	r1, [r7, #4]
 80a1c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1c9e:	4613      	mov	r3, r2
 80a1ca0:	00db      	lsls	r3, r3, #3
 80a1ca2:	4413      	add	r3, r2
 80a1ca4:	009b      	lsls	r3, r3, #2
 80a1ca6:	440b      	add	r3, r1
 80a1ca8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80a1cac:	781b      	ldrb	r3, [r3, #0]
 80a1cae:	2b01      	cmp	r3, #1
 80a1cb0:	d105      	bne.n	80a1cbe <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80a1cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1cb4:	b2db      	uxtb	r3, r3
 80a1cb6:	4619      	mov	r1, r3
 80a1cb8:	6878      	ldr	r0, [r7, #4]
 80a1cba:	f000 fb0a 	bl	80a22d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80a1cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1cc0:	3301      	adds	r3, #1
 80a1cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 80a1cc4:	687b      	ldr	r3, [r7, #4]
 80a1cc6:	791b      	ldrb	r3, [r3, #4]
 80a1cc8:	461a      	mov	r2, r3
 80a1cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1ccc:	4293      	cmp	r3, r2
 80a1cce:	d3e4      	bcc.n	80a1c9a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80a1cd0:	687b      	ldr	r3, [r7, #4]
 80a1cd2:	681b      	ldr	r3, [r3, #0]
 80a1cd4:	4618      	mov	r0, r3
 80a1cd6:	f004 fbad 	bl	80a6434 <USB_ReadInterrupts>
 80a1cda:	4603      	mov	r3, r0
 80a1cdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80a1ce0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80a1ce4:	d13c      	bne.n	80a1d60 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80a1ce6:	2301      	movs	r3, #1
 80a1ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 80a1cea:	e02b      	b.n	80a1d44 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80a1cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1cee:	015a      	lsls	r2, r3, #5
 80a1cf0:	69fb      	ldr	r3, [r7, #28]
 80a1cf2:	4413      	add	r3, r2
 80a1cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a1cf8:	681b      	ldr	r3, [r3, #0]
 80a1cfa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80a1cfc:	6879      	ldr	r1, [r7, #4]
 80a1cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1d00:	4613      	mov	r3, r2
 80a1d02:	00db      	lsls	r3, r3, #3
 80a1d04:	4413      	add	r3, r2
 80a1d06:	009b      	lsls	r3, r3, #2
 80a1d08:	440b      	add	r3, r1
 80a1d0a:	3318      	adds	r3, #24
 80a1d0c:	781b      	ldrb	r3, [r3, #0]
 80a1d0e:	2b01      	cmp	r3, #1
 80a1d10:	d115      	bne.n	80a1d3e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80a1d12:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80a1d14:	2b00      	cmp	r3, #0
 80a1d16:	da12      	bge.n	80a1d3e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80a1d18:	6879      	ldr	r1, [r7, #4]
 80a1d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1d1c:	4613      	mov	r3, r2
 80a1d1e:	00db      	lsls	r3, r3, #3
 80a1d20:	4413      	add	r3, r2
 80a1d22:	009b      	lsls	r3, r3, #2
 80a1d24:	440b      	add	r3, r1
 80a1d26:	3317      	adds	r3, #23
 80a1d28:	2201      	movs	r2, #1
 80a1d2a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80a1d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1d2e:	b2db      	uxtb	r3, r3
 80a1d30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80a1d34:	b2db      	uxtb	r3, r3
 80a1d36:	4619      	mov	r1, r3
 80a1d38:	6878      	ldr	r0, [r7, #4]
 80a1d3a:	f000 faca 	bl	80a22d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80a1d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1d40:	3301      	adds	r3, #1
 80a1d42:	627b      	str	r3, [r7, #36]	@ 0x24
 80a1d44:	687b      	ldr	r3, [r7, #4]
 80a1d46:	791b      	ldrb	r3, [r3, #4]
 80a1d48:	461a      	mov	r2, r3
 80a1d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1d4c:	4293      	cmp	r3, r2
 80a1d4e:	d3cd      	bcc.n	80a1cec <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80a1d50:	687b      	ldr	r3, [r7, #4]
 80a1d52:	681b      	ldr	r3, [r3, #0]
 80a1d54:	695a      	ldr	r2, [r3, #20]
 80a1d56:	687b      	ldr	r3, [r7, #4]
 80a1d58:	681b      	ldr	r3, [r3, #0]
 80a1d5a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80a1d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80a1d60:	687b      	ldr	r3, [r7, #4]
 80a1d62:	681b      	ldr	r3, [r3, #0]
 80a1d64:	4618      	mov	r0, r3
 80a1d66:	f004 fb65 	bl	80a6434 <USB_ReadInterrupts>
 80a1d6a:	4603      	mov	r3, r0
 80a1d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80a1d70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80a1d74:	d156      	bne.n	80a1e24 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80a1d76:	2301      	movs	r3, #1
 80a1d78:	627b      	str	r3, [r7, #36]	@ 0x24
 80a1d7a:	e045      	b.n	80a1e08 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80a1d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1d7e:	015a      	lsls	r2, r3, #5
 80a1d80:	69fb      	ldr	r3, [r7, #28]
 80a1d82:	4413      	add	r3, r2
 80a1d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a1d88:	681b      	ldr	r3, [r3, #0]
 80a1d8a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80a1d8c:	6879      	ldr	r1, [r7, #4]
 80a1d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1d90:	4613      	mov	r3, r2
 80a1d92:	00db      	lsls	r3, r3, #3
 80a1d94:	4413      	add	r3, r2
 80a1d96:	009b      	lsls	r3, r3, #2
 80a1d98:	440b      	add	r3, r1
 80a1d9a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80a1d9e:	781b      	ldrb	r3, [r3, #0]
 80a1da0:	2b01      	cmp	r3, #1
 80a1da2:	d12e      	bne.n	80a1e02 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80a1da4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80a1da6:	2b00      	cmp	r3, #0
 80a1da8:	da2b      	bge.n	80a1e02 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80a1daa:	69bb      	ldr	r3, [r7, #24]
 80a1dac:	0c1a      	lsrs	r2, r3, #16
 80a1dae:	687b      	ldr	r3, [r7, #4]
 80a1db0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80a1db4:	4053      	eors	r3, r2
 80a1db6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80a1dba:	2b00      	cmp	r3, #0
 80a1dbc:	d121      	bne.n	80a1e02 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80a1dbe:	6879      	ldr	r1, [r7, #4]
 80a1dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1dc2:	4613      	mov	r3, r2
 80a1dc4:	00db      	lsls	r3, r3, #3
 80a1dc6:	4413      	add	r3, r2
 80a1dc8:	009b      	lsls	r3, r3, #2
 80a1dca:	440b      	add	r3, r1
 80a1dcc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80a1dd0:	2201      	movs	r2, #1
 80a1dd2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80a1dd4:	6a3b      	ldr	r3, [r7, #32]
 80a1dd6:	699b      	ldr	r3, [r3, #24]
 80a1dd8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80a1ddc:	6a3b      	ldr	r3, [r7, #32]
 80a1dde:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80a1de0:	6a3b      	ldr	r3, [r7, #32]
 80a1de2:	695b      	ldr	r3, [r3, #20]
 80a1de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80a1de8:	2b00      	cmp	r3, #0
 80a1dea:	d10a      	bne.n	80a1e02 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80a1dec:	69fb      	ldr	r3, [r7, #28]
 80a1dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1df2:	685b      	ldr	r3, [r3, #4]
 80a1df4:	69fa      	ldr	r2, [r7, #28]
 80a1df6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1dfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80a1dfe:	6053      	str	r3, [r2, #4]
            break;
 80a1e00:	e008      	b.n	80a1e14 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80a1e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1e04:	3301      	adds	r3, #1
 80a1e06:	627b      	str	r3, [r7, #36]	@ 0x24
 80a1e08:	687b      	ldr	r3, [r7, #4]
 80a1e0a:	791b      	ldrb	r3, [r3, #4]
 80a1e0c:	461a      	mov	r2, r3
 80a1e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1e10:	4293      	cmp	r3, r2
 80a1e12:	d3b3      	bcc.n	80a1d7c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80a1e14:	687b      	ldr	r3, [r7, #4]
 80a1e16:	681b      	ldr	r3, [r3, #0]
 80a1e18:	695a      	ldr	r2, [r3, #20]
 80a1e1a:	687b      	ldr	r3, [r7, #4]
 80a1e1c:	681b      	ldr	r3, [r3, #0]
 80a1e1e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80a1e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80a1e24:	687b      	ldr	r3, [r7, #4]
 80a1e26:	681b      	ldr	r3, [r3, #0]
 80a1e28:	4618      	mov	r0, r3
 80a1e2a:	f004 fb03 	bl	80a6434 <USB_ReadInterrupts>
 80a1e2e:	4603      	mov	r3, r0
 80a1e30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80a1e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80a1e38:	d10a      	bne.n	80a1e50 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80a1e3a:	6878      	ldr	r0, [r7, #4]
 80a1e3c:	f006 ffea 	bl	80a8e14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80a1e40:	687b      	ldr	r3, [r7, #4]
 80a1e42:	681b      	ldr	r3, [r3, #0]
 80a1e44:	695a      	ldr	r2, [r3, #20]
 80a1e46:	687b      	ldr	r3, [r7, #4]
 80a1e48:	681b      	ldr	r3, [r3, #0]
 80a1e4a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80a1e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80a1e50:	687b      	ldr	r3, [r7, #4]
 80a1e52:	681b      	ldr	r3, [r3, #0]
 80a1e54:	4618      	mov	r0, r3
 80a1e56:	f004 faed 	bl	80a6434 <USB_ReadInterrupts>
 80a1e5a:	4603      	mov	r3, r0
 80a1e5c:	f003 0304 	and.w	r3, r3, #4
 80a1e60:	2b04      	cmp	r3, #4
 80a1e62:	d115      	bne.n	80a1e90 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80a1e64:	687b      	ldr	r3, [r7, #4]
 80a1e66:	681b      	ldr	r3, [r3, #0]
 80a1e68:	685b      	ldr	r3, [r3, #4]
 80a1e6a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80a1e6c:	69bb      	ldr	r3, [r7, #24]
 80a1e6e:	f003 0304 	and.w	r3, r3, #4
 80a1e72:	2b00      	cmp	r3, #0
 80a1e74:	d002      	beq.n	80a1e7c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80a1e76:	6878      	ldr	r0, [r7, #4]
 80a1e78:	f006 ffda 	bl	80a8e30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80a1e7c:	687b      	ldr	r3, [r7, #4]
 80a1e7e:	681b      	ldr	r3, [r3, #0]
 80a1e80:	6859      	ldr	r1, [r3, #4]
 80a1e82:	687b      	ldr	r3, [r7, #4]
 80a1e84:	681b      	ldr	r3, [r3, #0]
 80a1e86:	69ba      	ldr	r2, [r7, #24]
 80a1e88:	430a      	orrs	r2, r1
 80a1e8a:	605a      	str	r2, [r3, #4]
 80a1e8c:	e000      	b.n	80a1e90 <HAL_PCD_IRQHandler+0x996>
      return;
 80a1e8e:	bf00      	nop
    }
  }
}
 80a1e90:	3734      	adds	r7, #52	@ 0x34
 80a1e92:	46bd      	mov	sp, r7
 80a1e94:	bd90      	pop	{r4, r7, pc}

080a1e96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80a1e96:	b580      	push	{r7, lr}
 80a1e98:	b082      	sub	sp, #8
 80a1e9a:	af00      	add	r7, sp, #0
 80a1e9c:	6078      	str	r0, [r7, #4]
 80a1e9e:	460b      	mov	r3, r1
 80a1ea0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80a1ea2:	687b      	ldr	r3, [r7, #4]
 80a1ea4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80a1ea8:	2b01      	cmp	r3, #1
 80a1eaa:	d101      	bne.n	80a1eb0 <HAL_PCD_SetAddress+0x1a>
 80a1eac:	2302      	movs	r3, #2
 80a1eae:	e012      	b.n	80a1ed6 <HAL_PCD_SetAddress+0x40>
 80a1eb0:	687b      	ldr	r3, [r7, #4]
 80a1eb2:	2201      	movs	r2, #1
 80a1eb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80a1eb8:	687b      	ldr	r3, [r7, #4]
 80a1eba:	78fa      	ldrb	r2, [r7, #3]
 80a1ebc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80a1ebe:	687b      	ldr	r3, [r7, #4]
 80a1ec0:	681b      	ldr	r3, [r3, #0]
 80a1ec2:	78fa      	ldrb	r2, [r7, #3]
 80a1ec4:	4611      	mov	r1, r2
 80a1ec6:	4618      	mov	r0, r3
 80a1ec8:	f004 fa4c 	bl	80a6364 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80a1ecc:	687b      	ldr	r3, [r7, #4]
 80a1ece:	2200      	movs	r2, #0
 80a1ed0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80a1ed4:	2300      	movs	r3, #0
}
 80a1ed6:	4618      	mov	r0, r3
 80a1ed8:	3708      	adds	r7, #8
 80a1eda:	46bd      	mov	sp, r7
 80a1edc:	bd80      	pop	{r7, pc}

080a1ede <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80a1ede:	b580      	push	{r7, lr}
 80a1ee0:	b084      	sub	sp, #16
 80a1ee2:	af00      	add	r7, sp, #0
 80a1ee4:	6078      	str	r0, [r7, #4]
 80a1ee6:	4608      	mov	r0, r1
 80a1ee8:	4611      	mov	r1, r2
 80a1eea:	461a      	mov	r2, r3
 80a1eec:	4603      	mov	r3, r0
 80a1eee:	70fb      	strb	r3, [r7, #3]
 80a1ef0:	460b      	mov	r3, r1
 80a1ef2:	803b      	strh	r3, [r7, #0]
 80a1ef4:	4613      	mov	r3, r2
 80a1ef6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80a1ef8:	2300      	movs	r3, #0
 80a1efa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80a1efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80a1f00:	2b00      	cmp	r3, #0
 80a1f02:	da0f      	bge.n	80a1f24 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80a1f04:	78fb      	ldrb	r3, [r7, #3]
 80a1f06:	f003 020f 	and.w	r2, r3, #15
 80a1f0a:	4613      	mov	r3, r2
 80a1f0c:	00db      	lsls	r3, r3, #3
 80a1f0e:	4413      	add	r3, r2
 80a1f10:	009b      	lsls	r3, r3, #2
 80a1f12:	3310      	adds	r3, #16
 80a1f14:	687a      	ldr	r2, [r7, #4]
 80a1f16:	4413      	add	r3, r2
 80a1f18:	3304      	adds	r3, #4
 80a1f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80a1f1c:	68fb      	ldr	r3, [r7, #12]
 80a1f1e:	2201      	movs	r2, #1
 80a1f20:	705a      	strb	r2, [r3, #1]
 80a1f22:	e00f      	b.n	80a1f44 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80a1f24:	78fb      	ldrb	r3, [r7, #3]
 80a1f26:	f003 020f 	and.w	r2, r3, #15
 80a1f2a:	4613      	mov	r3, r2
 80a1f2c:	00db      	lsls	r3, r3, #3
 80a1f2e:	4413      	add	r3, r2
 80a1f30:	009b      	lsls	r3, r3, #2
 80a1f32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a1f36:	687a      	ldr	r2, [r7, #4]
 80a1f38:	4413      	add	r3, r2
 80a1f3a:	3304      	adds	r3, #4
 80a1f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80a1f3e:	68fb      	ldr	r3, [r7, #12]
 80a1f40:	2200      	movs	r2, #0
 80a1f42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80a1f44:	78fb      	ldrb	r3, [r7, #3]
 80a1f46:	f003 030f 	and.w	r3, r3, #15
 80a1f4a:	b2da      	uxtb	r2, r3
 80a1f4c:	68fb      	ldr	r3, [r7, #12]
 80a1f4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80a1f50:	883b      	ldrh	r3, [r7, #0]
 80a1f52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80a1f56:	68fb      	ldr	r3, [r7, #12]
 80a1f58:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80a1f5a:	68fb      	ldr	r3, [r7, #12]
 80a1f5c:	78ba      	ldrb	r2, [r7, #2]
 80a1f5e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80a1f60:	68fb      	ldr	r3, [r7, #12]
 80a1f62:	785b      	ldrb	r3, [r3, #1]
 80a1f64:	2b00      	cmp	r3, #0
 80a1f66:	d004      	beq.n	80a1f72 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80a1f68:	68fb      	ldr	r3, [r7, #12]
 80a1f6a:	781b      	ldrb	r3, [r3, #0]
 80a1f6c:	461a      	mov	r2, r3
 80a1f6e:	68fb      	ldr	r3, [r7, #12]
 80a1f70:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80a1f72:	78bb      	ldrb	r3, [r7, #2]
 80a1f74:	2b02      	cmp	r3, #2
 80a1f76:	d102      	bne.n	80a1f7e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80a1f78:	68fb      	ldr	r3, [r7, #12]
 80a1f7a:	2200      	movs	r2, #0
 80a1f7c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80a1f7e:	687b      	ldr	r3, [r7, #4]
 80a1f80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80a1f84:	2b01      	cmp	r3, #1
 80a1f86:	d101      	bne.n	80a1f8c <HAL_PCD_EP_Open+0xae>
 80a1f88:	2302      	movs	r3, #2
 80a1f8a:	e00e      	b.n	80a1faa <HAL_PCD_EP_Open+0xcc>
 80a1f8c:	687b      	ldr	r3, [r7, #4]
 80a1f8e:	2201      	movs	r2, #1
 80a1f90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80a1f94:	687b      	ldr	r3, [r7, #4]
 80a1f96:	681b      	ldr	r3, [r3, #0]
 80a1f98:	68f9      	ldr	r1, [r7, #12]
 80a1f9a:	4618      	mov	r0, r3
 80a1f9c:	f003 fbc6 	bl	80a572c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80a1fa0:	687b      	ldr	r3, [r7, #4]
 80a1fa2:	2200      	movs	r2, #0
 80a1fa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80a1fa8:	7afb      	ldrb	r3, [r7, #11]
}
 80a1faa:	4618      	mov	r0, r3
 80a1fac:	3710      	adds	r7, #16
 80a1fae:	46bd      	mov	sp, r7
 80a1fb0:	bd80      	pop	{r7, pc}

080a1fb2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80a1fb2:	b580      	push	{r7, lr}
 80a1fb4:	b084      	sub	sp, #16
 80a1fb6:	af00      	add	r7, sp, #0
 80a1fb8:	6078      	str	r0, [r7, #4]
 80a1fba:	460b      	mov	r3, r1
 80a1fbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80a1fbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80a1fc2:	2b00      	cmp	r3, #0
 80a1fc4:	da0f      	bge.n	80a1fe6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80a1fc6:	78fb      	ldrb	r3, [r7, #3]
 80a1fc8:	f003 020f 	and.w	r2, r3, #15
 80a1fcc:	4613      	mov	r3, r2
 80a1fce:	00db      	lsls	r3, r3, #3
 80a1fd0:	4413      	add	r3, r2
 80a1fd2:	009b      	lsls	r3, r3, #2
 80a1fd4:	3310      	adds	r3, #16
 80a1fd6:	687a      	ldr	r2, [r7, #4]
 80a1fd8:	4413      	add	r3, r2
 80a1fda:	3304      	adds	r3, #4
 80a1fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80a1fde:	68fb      	ldr	r3, [r7, #12]
 80a1fe0:	2201      	movs	r2, #1
 80a1fe2:	705a      	strb	r2, [r3, #1]
 80a1fe4:	e00f      	b.n	80a2006 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80a1fe6:	78fb      	ldrb	r3, [r7, #3]
 80a1fe8:	f003 020f 	and.w	r2, r3, #15
 80a1fec:	4613      	mov	r3, r2
 80a1fee:	00db      	lsls	r3, r3, #3
 80a1ff0:	4413      	add	r3, r2
 80a1ff2:	009b      	lsls	r3, r3, #2
 80a1ff4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a1ff8:	687a      	ldr	r2, [r7, #4]
 80a1ffa:	4413      	add	r3, r2
 80a1ffc:	3304      	adds	r3, #4
 80a1ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80a2000:	68fb      	ldr	r3, [r7, #12]
 80a2002:	2200      	movs	r2, #0
 80a2004:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80a2006:	78fb      	ldrb	r3, [r7, #3]
 80a2008:	f003 030f 	and.w	r3, r3, #15
 80a200c:	b2da      	uxtb	r2, r3
 80a200e:	68fb      	ldr	r3, [r7, #12]
 80a2010:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80a2012:	687b      	ldr	r3, [r7, #4]
 80a2014:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80a2018:	2b01      	cmp	r3, #1
 80a201a:	d101      	bne.n	80a2020 <HAL_PCD_EP_Close+0x6e>
 80a201c:	2302      	movs	r3, #2
 80a201e:	e00e      	b.n	80a203e <HAL_PCD_EP_Close+0x8c>
 80a2020:	687b      	ldr	r3, [r7, #4]
 80a2022:	2201      	movs	r2, #1
 80a2024:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80a2028:	687b      	ldr	r3, [r7, #4]
 80a202a:	681b      	ldr	r3, [r3, #0]
 80a202c:	68f9      	ldr	r1, [r7, #12]
 80a202e:	4618      	mov	r0, r3
 80a2030:	f003 fc04 	bl	80a583c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80a2034:	687b      	ldr	r3, [r7, #4]
 80a2036:	2200      	movs	r2, #0
 80a2038:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80a203c:	2300      	movs	r3, #0
}
 80a203e:	4618      	mov	r0, r3
 80a2040:	3710      	adds	r7, #16
 80a2042:	46bd      	mov	sp, r7
 80a2044:	bd80      	pop	{r7, pc}

080a2046 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80a2046:	b580      	push	{r7, lr}
 80a2048:	b086      	sub	sp, #24
 80a204a:	af00      	add	r7, sp, #0
 80a204c:	60f8      	str	r0, [r7, #12]
 80a204e:	607a      	str	r2, [r7, #4]
 80a2050:	603b      	str	r3, [r7, #0]
 80a2052:	460b      	mov	r3, r1
 80a2054:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80a2056:	7afb      	ldrb	r3, [r7, #11]
 80a2058:	f003 020f 	and.w	r2, r3, #15
 80a205c:	4613      	mov	r3, r2
 80a205e:	00db      	lsls	r3, r3, #3
 80a2060:	4413      	add	r3, r2
 80a2062:	009b      	lsls	r3, r3, #2
 80a2064:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a2068:	68fa      	ldr	r2, [r7, #12]
 80a206a:	4413      	add	r3, r2
 80a206c:	3304      	adds	r3, #4
 80a206e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80a2070:	697b      	ldr	r3, [r7, #20]
 80a2072:	687a      	ldr	r2, [r7, #4]
 80a2074:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80a2076:	697b      	ldr	r3, [r7, #20]
 80a2078:	683a      	ldr	r2, [r7, #0]
 80a207a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80a207c:	697b      	ldr	r3, [r7, #20]
 80a207e:	2200      	movs	r2, #0
 80a2080:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80a2082:	697b      	ldr	r3, [r7, #20]
 80a2084:	2200      	movs	r2, #0
 80a2086:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80a2088:	7afb      	ldrb	r3, [r7, #11]
 80a208a:	f003 030f 	and.w	r3, r3, #15
 80a208e:	b2da      	uxtb	r2, r3
 80a2090:	697b      	ldr	r3, [r7, #20]
 80a2092:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80a2094:	68fb      	ldr	r3, [r7, #12]
 80a2096:	799b      	ldrb	r3, [r3, #6]
 80a2098:	2b01      	cmp	r3, #1
 80a209a:	d102      	bne.n	80a20a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80a209c:	687a      	ldr	r2, [r7, #4]
 80a209e:	697b      	ldr	r3, [r7, #20]
 80a20a0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80a20a2:	68fb      	ldr	r3, [r7, #12]
 80a20a4:	6818      	ldr	r0, [r3, #0]
 80a20a6:	68fb      	ldr	r3, [r7, #12]
 80a20a8:	799b      	ldrb	r3, [r3, #6]
 80a20aa:	461a      	mov	r2, r3
 80a20ac:	6979      	ldr	r1, [r7, #20]
 80a20ae:	f003 fca1 	bl	80a59f4 <USB_EPStartXfer>

  return HAL_OK;
 80a20b2:	2300      	movs	r3, #0
}
 80a20b4:	4618      	mov	r0, r3
 80a20b6:	3718      	adds	r7, #24
 80a20b8:	46bd      	mov	sp, r7
 80a20ba:	bd80      	pop	{r7, pc}

080a20bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80a20bc:	b480      	push	{r7}
 80a20be:	b083      	sub	sp, #12
 80a20c0:	af00      	add	r7, sp, #0
 80a20c2:	6078      	str	r0, [r7, #4]
 80a20c4:	460b      	mov	r3, r1
 80a20c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80a20c8:	78fb      	ldrb	r3, [r7, #3]
 80a20ca:	f003 020f 	and.w	r2, r3, #15
 80a20ce:	6879      	ldr	r1, [r7, #4]
 80a20d0:	4613      	mov	r3, r2
 80a20d2:	00db      	lsls	r3, r3, #3
 80a20d4:	4413      	add	r3, r2
 80a20d6:	009b      	lsls	r3, r3, #2
 80a20d8:	440b      	add	r3, r1
 80a20da:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80a20de:	681b      	ldr	r3, [r3, #0]
}
 80a20e0:	4618      	mov	r0, r3
 80a20e2:	370c      	adds	r7, #12
 80a20e4:	46bd      	mov	sp, r7
 80a20e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a20ea:	4770      	bx	lr

080a20ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80a20ec:	b580      	push	{r7, lr}
 80a20ee:	b086      	sub	sp, #24
 80a20f0:	af00      	add	r7, sp, #0
 80a20f2:	60f8      	str	r0, [r7, #12]
 80a20f4:	607a      	str	r2, [r7, #4]
 80a20f6:	603b      	str	r3, [r7, #0]
 80a20f8:	460b      	mov	r3, r1
 80a20fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80a20fc:	7afb      	ldrb	r3, [r7, #11]
 80a20fe:	f003 020f 	and.w	r2, r3, #15
 80a2102:	4613      	mov	r3, r2
 80a2104:	00db      	lsls	r3, r3, #3
 80a2106:	4413      	add	r3, r2
 80a2108:	009b      	lsls	r3, r3, #2
 80a210a:	3310      	adds	r3, #16
 80a210c:	68fa      	ldr	r2, [r7, #12]
 80a210e:	4413      	add	r3, r2
 80a2110:	3304      	adds	r3, #4
 80a2112:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80a2114:	697b      	ldr	r3, [r7, #20]
 80a2116:	687a      	ldr	r2, [r7, #4]
 80a2118:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80a211a:	697b      	ldr	r3, [r7, #20]
 80a211c:	683a      	ldr	r2, [r7, #0]
 80a211e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80a2120:	697b      	ldr	r3, [r7, #20]
 80a2122:	2200      	movs	r2, #0
 80a2124:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80a2126:	697b      	ldr	r3, [r7, #20]
 80a2128:	2201      	movs	r2, #1
 80a212a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80a212c:	7afb      	ldrb	r3, [r7, #11]
 80a212e:	f003 030f 	and.w	r3, r3, #15
 80a2132:	b2da      	uxtb	r2, r3
 80a2134:	697b      	ldr	r3, [r7, #20]
 80a2136:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80a2138:	68fb      	ldr	r3, [r7, #12]
 80a213a:	799b      	ldrb	r3, [r3, #6]
 80a213c:	2b01      	cmp	r3, #1
 80a213e:	d102      	bne.n	80a2146 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80a2140:	687a      	ldr	r2, [r7, #4]
 80a2142:	697b      	ldr	r3, [r7, #20]
 80a2144:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80a2146:	68fb      	ldr	r3, [r7, #12]
 80a2148:	6818      	ldr	r0, [r3, #0]
 80a214a:	68fb      	ldr	r3, [r7, #12]
 80a214c:	799b      	ldrb	r3, [r3, #6]
 80a214e:	461a      	mov	r2, r3
 80a2150:	6979      	ldr	r1, [r7, #20]
 80a2152:	f003 fc4f 	bl	80a59f4 <USB_EPStartXfer>

  return HAL_OK;
 80a2156:	2300      	movs	r3, #0
}
 80a2158:	4618      	mov	r0, r3
 80a215a:	3718      	adds	r7, #24
 80a215c:	46bd      	mov	sp, r7
 80a215e:	bd80      	pop	{r7, pc}

080a2160 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80a2160:	b580      	push	{r7, lr}
 80a2162:	b084      	sub	sp, #16
 80a2164:	af00      	add	r7, sp, #0
 80a2166:	6078      	str	r0, [r7, #4]
 80a2168:	460b      	mov	r3, r1
 80a216a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80a216c:	78fb      	ldrb	r3, [r7, #3]
 80a216e:	f003 030f 	and.w	r3, r3, #15
 80a2172:	687a      	ldr	r2, [r7, #4]
 80a2174:	7912      	ldrb	r2, [r2, #4]
 80a2176:	4293      	cmp	r3, r2
 80a2178:	d901      	bls.n	80a217e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80a217a:	2301      	movs	r3, #1
 80a217c:	e04f      	b.n	80a221e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80a217e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80a2182:	2b00      	cmp	r3, #0
 80a2184:	da0f      	bge.n	80a21a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80a2186:	78fb      	ldrb	r3, [r7, #3]
 80a2188:	f003 020f 	and.w	r2, r3, #15
 80a218c:	4613      	mov	r3, r2
 80a218e:	00db      	lsls	r3, r3, #3
 80a2190:	4413      	add	r3, r2
 80a2192:	009b      	lsls	r3, r3, #2
 80a2194:	3310      	adds	r3, #16
 80a2196:	687a      	ldr	r2, [r7, #4]
 80a2198:	4413      	add	r3, r2
 80a219a:	3304      	adds	r3, #4
 80a219c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80a219e:	68fb      	ldr	r3, [r7, #12]
 80a21a0:	2201      	movs	r2, #1
 80a21a2:	705a      	strb	r2, [r3, #1]
 80a21a4:	e00d      	b.n	80a21c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80a21a6:	78fa      	ldrb	r2, [r7, #3]
 80a21a8:	4613      	mov	r3, r2
 80a21aa:	00db      	lsls	r3, r3, #3
 80a21ac:	4413      	add	r3, r2
 80a21ae:	009b      	lsls	r3, r3, #2
 80a21b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a21b4:	687a      	ldr	r2, [r7, #4]
 80a21b6:	4413      	add	r3, r2
 80a21b8:	3304      	adds	r3, #4
 80a21ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80a21bc:	68fb      	ldr	r3, [r7, #12]
 80a21be:	2200      	movs	r2, #0
 80a21c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80a21c2:	68fb      	ldr	r3, [r7, #12]
 80a21c4:	2201      	movs	r2, #1
 80a21c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80a21c8:	78fb      	ldrb	r3, [r7, #3]
 80a21ca:	f003 030f 	and.w	r3, r3, #15
 80a21ce:	b2da      	uxtb	r2, r3
 80a21d0:	68fb      	ldr	r3, [r7, #12]
 80a21d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80a21d4:	687b      	ldr	r3, [r7, #4]
 80a21d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80a21da:	2b01      	cmp	r3, #1
 80a21dc:	d101      	bne.n	80a21e2 <HAL_PCD_EP_SetStall+0x82>
 80a21de:	2302      	movs	r3, #2
 80a21e0:	e01d      	b.n	80a221e <HAL_PCD_EP_SetStall+0xbe>
 80a21e2:	687b      	ldr	r3, [r7, #4]
 80a21e4:	2201      	movs	r2, #1
 80a21e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80a21ea:	687b      	ldr	r3, [r7, #4]
 80a21ec:	681b      	ldr	r3, [r3, #0]
 80a21ee:	68f9      	ldr	r1, [r7, #12]
 80a21f0:	4618      	mov	r0, r3
 80a21f2:	f003 ffe3 	bl	80a61bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80a21f6:	78fb      	ldrb	r3, [r7, #3]
 80a21f8:	f003 030f 	and.w	r3, r3, #15
 80a21fc:	2b00      	cmp	r3, #0
 80a21fe:	d109      	bne.n	80a2214 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80a2200:	687b      	ldr	r3, [r7, #4]
 80a2202:	6818      	ldr	r0, [r3, #0]
 80a2204:	687b      	ldr	r3, [r7, #4]
 80a2206:	7999      	ldrb	r1, [r3, #6]
 80a2208:	687b      	ldr	r3, [r7, #4]
 80a220a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80a220e:	461a      	mov	r2, r3
 80a2210:	f004 f9d6 	bl	80a65c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80a2214:	687b      	ldr	r3, [r7, #4]
 80a2216:	2200      	movs	r2, #0
 80a2218:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80a221c:	2300      	movs	r3, #0
}
 80a221e:	4618      	mov	r0, r3
 80a2220:	3710      	adds	r7, #16
 80a2222:	46bd      	mov	sp, r7
 80a2224:	bd80      	pop	{r7, pc}

080a2226 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80a2226:	b580      	push	{r7, lr}
 80a2228:	b084      	sub	sp, #16
 80a222a:	af00      	add	r7, sp, #0
 80a222c:	6078      	str	r0, [r7, #4]
 80a222e:	460b      	mov	r3, r1
 80a2230:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80a2232:	78fb      	ldrb	r3, [r7, #3]
 80a2234:	f003 030f 	and.w	r3, r3, #15
 80a2238:	687a      	ldr	r2, [r7, #4]
 80a223a:	7912      	ldrb	r2, [r2, #4]
 80a223c:	4293      	cmp	r3, r2
 80a223e:	d901      	bls.n	80a2244 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80a2240:	2301      	movs	r3, #1
 80a2242:	e042      	b.n	80a22ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80a2244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80a2248:	2b00      	cmp	r3, #0
 80a224a:	da0f      	bge.n	80a226c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80a224c:	78fb      	ldrb	r3, [r7, #3]
 80a224e:	f003 020f 	and.w	r2, r3, #15
 80a2252:	4613      	mov	r3, r2
 80a2254:	00db      	lsls	r3, r3, #3
 80a2256:	4413      	add	r3, r2
 80a2258:	009b      	lsls	r3, r3, #2
 80a225a:	3310      	adds	r3, #16
 80a225c:	687a      	ldr	r2, [r7, #4]
 80a225e:	4413      	add	r3, r2
 80a2260:	3304      	adds	r3, #4
 80a2262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80a2264:	68fb      	ldr	r3, [r7, #12]
 80a2266:	2201      	movs	r2, #1
 80a2268:	705a      	strb	r2, [r3, #1]
 80a226a:	e00f      	b.n	80a228c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80a226c:	78fb      	ldrb	r3, [r7, #3]
 80a226e:	f003 020f 	and.w	r2, r3, #15
 80a2272:	4613      	mov	r3, r2
 80a2274:	00db      	lsls	r3, r3, #3
 80a2276:	4413      	add	r3, r2
 80a2278:	009b      	lsls	r3, r3, #2
 80a227a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a227e:	687a      	ldr	r2, [r7, #4]
 80a2280:	4413      	add	r3, r2
 80a2282:	3304      	adds	r3, #4
 80a2284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80a2286:	68fb      	ldr	r3, [r7, #12]
 80a2288:	2200      	movs	r2, #0
 80a228a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80a228c:	68fb      	ldr	r3, [r7, #12]
 80a228e:	2200      	movs	r2, #0
 80a2290:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80a2292:	78fb      	ldrb	r3, [r7, #3]
 80a2294:	f003 030f 	and.w	r3, r3, #15
 80a2298:	b2da      	uxtb	r2, r3
 80a229a:	68fb      	ldr	r3, [r7, #12]
 80a229c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80a229e:	687b      	ldr	r3, [r7, #4]
 80a22a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80a22a4:	2b01      	cmp	r3, #1
 80a22a6:	d101      	bne.n	80a22ac <HAL_PCD_EP_ClrStall+0x86>
 80a22a8:	2302      	movs	r3, #2
 80a22aa:	e00e      	b.n	80a22ca <HAL_PCD_EP_ClrStall+0xa4>
 80a22ac:	687b      	ldr	r3, [r7, #4]
 80a22ae:	2201      	movs	r2, #1
 80a22b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80a22b4:	687b      	ldr	r3, [r7, #4]
 80a22b6:	681b      	ldr	r3, [r3, #0]
 80a22b8:	68f9      	ldr	r1, [r7, #12]
 80a22ba:	4618      	mov	r0, r3
 80a22bc:	f003 ffec 	bl	80a6298 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80a22c0:	687b      	ldr	r3, [r7, #4]
 80a22c2:	2200      	movs	r2, #0
 80a22c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80a22c8:	2300      	movs	r3, #0
}
 80a22ca:	4618      	mov	r0, r3
 80a22cc:	3710      	adds	r7, #16
 80a22ce:	46bd      	mov	sp, r7
 80a22d0:	bd80      	pop	{r7, pc}

080a22d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80a22d2:	b580      	push	{r7, lr}
 80a22d4:	b084      	sub	sp, #16
 80a22d6:	af00      	add	r7, sp, #0
 80a22d8:	6078      	str	r0, [r7, #4]
 80a22da:	460b      	mov	r3, r1
 80a22dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80a22de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80a22e2:	2b00      	cmp	r3, #0
 80a22e4:	da0c      	bge.n	80a2300 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80a22e6:	78fb      	ldrb	r3, [r7, #3]
 80a22e8:	f003 020f 	and.w	r2, r3, #15
 80a22ec:	4613      	mov	r3, r2
 80a22ee:	00db      	lsls	r3, r3, #3
 80a22f0:	4413      	add	r3, r2
 80a22f2:	009b      	lsls	r3, r3, #2
 80a22f4:	3310      	adds	r3, #16
 80a22f6:	687a      	ldr	r2, [r7, #4]
 80a22f8:	4413      	add	r3, r2
 80a22fa:	3304      	adds	r3, #4
 80a22fc:	60fb      	str	r3, [r7, #12]
 80a22fe:	e00c      	b.n	80a231a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80a2300:	78fb      	ldrb	r3, [r7, #3]
 80a2302:	f003 020f 	and.w	r2, r3, #15
 80a2306:	4613      	mov	r3, r2
 80a2308:	00db      	lsls	r3, r3, #3
 80a230a:	4413      	add	r3, r2
 80a230c:	009b      	lsls	r3, r3, #2
 80a230e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a2312:	687a      	ldr	r2, [r7, #4]
 80a2314:	4413      	add	r3, r2
 80a2316:	3304      	adds	r3, #4
 80a2318:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80a231a:	687b      	ldr	r3, [r7, #4]
 80a231c:	681b      	ldr	r3, [r3, #0]
 80a231e:	68f9      	ldr	r1, [r7, #12]
 80a2320:	4618      	mov	r0, r3
 80a2322:	f003 fe0b 	bl	80a5f3c <USB_EPStopXfer>
 80a2326:	4603      	mov	r3, r0
 80a2328:	72fb      	strb	r3, [r7, #11]

  return ret;
 80a232a:	7afb      	ldrb	r3, [r7, #11]
}
 80a232c:	4618      	mov	r0, r3
 80a232e:	3710      	adds	r7, #16
 80a2330:	46bd      	mov	sp, r7
 80a2332:	bd80      	pop	{r7, pc}

080a2334 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80a2334:	b580      	push	{r7, lr}
 80a2336:	b08a      	sub	sp, #40	@ 0x28
 80a2338:	af02      	add	r7, sp, #8
 80a233a:	6078      	str	r0, [r7, #4]
 80a233c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80a233e:	687b      	ldr	r3, [r7, #4]
 80a2340:	681b      	ldr	r3, [r3, #0]
 80a2342:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a2344:	697b      	ldr	r3, [r7, #20]
 80a2346:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80a2348:	683a      	ldr	r2, [r7, #0]
 80a234a:	4613      	mov	r3, r2
 80a234c:	00db      	lsls	r3, r3, #3
 80a234e:	4413      	add	r3, r2
 80a2350:	009b      	lsls	r3, r3, #2
 80a2352:	3310      	adds	r3, #16
 80a2354:	687a      	ldr	r2, [r7, #4]
 80a2356:	4413      	add	r3, r2
 80a2358:	3304      	adds	r3, #4
 80a235a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80a235c:	68fb      	ldr	r3, [r7, #12]
 80a235e:	695a      	ldr	r2, [r3, #20]
 80a2360:	68fb      	ldr	r3, [r7, #12]
 80a2362:	691b      	ldr	r3, [r3, #16]
 80a2364:	429a      	cmp	r2, r3
 80a2366:	d901      	bls.n	80a236c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80a2368:	2301      	movs	r3, #1
 80a236a:	e06b      	b.n	80a2444 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80a236c:	68fb      	ldr	r3, [r7, #12]
 80a236e:	691a      	ldr	r2, [r3, #16]
 80a2370:	68fb      	ldr	r3, [r7, #12]
 80a2372:	695b      	ldr	r3, [r3, #20]
 80a2374:	1ad3      	subs	r3, r2, r3
 80a2376:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80a2378:	68fb      	ldr	r3, [r7, #12]
 80a237a:	689b      	ldr	r3, [r3, #8]
 80a237c:	69fa      	ldr	r2, [r7, #28]
 80a237e:	429a      	cmp	r2, r3
 80a2380:	d902      	bls.n	80a2388 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80a2382:	68fb      	ldr	r3, [r7, #12]
 80a2384:	689b      	ldr	r3, [r3, #8]
 80a2386:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80a2388:	69fb      	ldr	r3, [r7, #28]
 80a238a:	3303      	adds	r3, #3
 80a238c:	089b      	lsrs	r3, r3, #2
 80a238e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80a2390:	e02a      	b.n	80a23e8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80a2392:	68fb      	ldr	r3, [r7, #12]
 80a2394:	691a      	ldr	r2, [r3, #16]
 80a2396:	68fb      	ldr	r3, [r7, #12]
 80a2398:	695b      	ldr	r3, [r3, #20]
 80a239a:	1ad3      	subs	r3, r2, r3
 80a239c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80a239e:	68fb      	ldr	r3, [r7, #12]
 80a23a0:	689b      	ldr	r3, [r3, #8]
 80a23a2:	69fa      	ldr	r2, [r7, #28]
 80a23a4:	429a      	cmp	r2, r3
 80a23a6:	d902      	bls.n	80a23ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80a23a8:	68fb      	ldr	r3, [r7, #12]
 80a23aa:	689b      	ldr	r3, [r3, #8]
 80a23ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80a23ae:	69fb      	ldr	r3, [r7, #28]
 80a23b0:	3303      	adds	r3, #3
 80a23b2:	089b      	lsrs	r3, r3, #2
 80a23b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80a23b6:	68fb      	ldr	r3, [r7, #12]
 80a23b8:	68d9      	ldr	r1, [r3, #12]
 80a23ba:	683b      	ldr	r3, [r7, #0]
 80a23bc:	b2da      	uxtb	r2, r3
 80a23be:	69fb      	ldr	r3, [r7, #28]
 80a23c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80a23c2:	687b      	ldr	r3, [r7, #4]
 80a23c4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80a23c6:	9300      	str	r3, [sp, #0]
 80a23c8:	4603      	mov	r3, r0
 80a23ca:	6978      	ldr	r0, [r7, #20]
 80a23cc:	f003 fe60 	bl	80a6090 <USB_WritePacket>

    ep->xfer_buff  += len;
 80a23d0:	68fb      	ldr	r3, [r7, #12]
 80a23d2:	68da      	ldr	r2, [r3, #12]
 80a23d4:	69fb      	ldr	r3, [r7, #28]
 80a23d6:	441a      	add	r2, r3
 80a23d8:	68fb      	ldr	r3, [r7, #12]
 80a23da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80a23dc:	68fb      	ldr	r3, [r7, #12]
 80a23de:	695a      	ldr	r2, [r3, #20]
 80a23e0:	69fb      	ldr	r3, [r7, #28]
 80a23e2:	441a      	add	r2, r3
 80a23e4:	68fb      	ldr	r3, [r7, #12]
 80a23e6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80a23e8:	683b      	ldr	r3, [r7, #0]
 80a23ea:	015a      	lsls	r2, r3, #5
 80a23ec:	693b      	ldr	r3, [r7, #16]
 80a23ee:	4413      	add	r3, r2
 80a23f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a23f4:	699b      	ldr	r3, [r3, #24]
 80a23f6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80a23f8:	69ba      	ldr	r2, [r7, #24]
 80a23fa:	429a      	cmp	r2, r3
 80a23fc:	d809      	bhi.n	80a2412 <PCD_WriteEmptyTxFifo+0xde>
 80a23fe:	68fb      	ldr	r3, [r7, #12]
 80a2400:	695a      	ldr	r2, [r3, #20]
 80a2402:	68fb      	ldr	r3, [r7, #12]
 80a2404:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80a2406:	429a      	cmp	r2, r3
 80a2408:	d203      	bcs.n	80a2412 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80a240a:	68fb      	ldr	r3, [r7, #12]
 80a240c:	691b      	ldr	r3, [r3, #16]
 80a240e:	2b00      	cmp	r3, #0
 80a2410:	d1bf      	bne.n	80a2392 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80a2412:	68fb      	ldr	r3, [r7, #12]
 80a2414:	691a      	ldr	r2, [r3, #16]
 80a2416:	68fb      	ldr	r3, [r7, #12]
 80a2418:	695b      	ldr	r3, [r3, #20]
 80a241a:	429a      	cmp	r2, r3
 80a241c:	d811      	bhi.n	80a2442 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80a241e:	683b      	ldr	r3, [r7, #0]
 80a2420:	f003 030f 	and.w	r3, r3, #15
 80a2424:	2201      	movs	r2, #1
 80a2426:	fa02 f303 	lsl.w	r3, r2, r3
 80a242a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80a242c:	693b      	ldr	r3, [r7, #16]
 80a242e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a2432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80a2434:	68bb      	ldr	r3, [r7, #8]
 80a2436:	43db      	mvns	r3, r3
 80a2438:	6939      	ldr	r1, [r7, #16]
 80a243a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a243e:	4013      	ands	r3, r2
 80a2440:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80a2442:	2300      	movs	r3, #0
}
 80a2444:	4618      	mov	r0, r3
 80a2446:	3720      	adds	r7, #32
 80a2448:	46bd      	mov	sp, r7
 80a244a:	bd80      	pop	{r7, pc}

080a244c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80a244c:	b580      	push	{r7, lr}
 80a244e:	b088      	sub	sp, #32
 80a2450:	af00      	add	r7, sp, #0
 80a2452:	6078      	str	r0, [r7, #4]
 80a2454:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80a2456:	687b      	ldr	r3, [r7, #4]
 80a2458:	681b      	ldr	r3, [r3, #0]
 80a245a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a245c:	69fb      	ldr	r3, [r7, #28]
 80a245e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80a2460:	69fb      	ldr	r3, [r7, #28]
 80a2462:	333c      	adds	r3, #60	@ 0x3c
 80a2464:	3304      	adds	r3, #4
 80a2466:	681b      	ldr	r3, [r3, #0]
 80a2468:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80a246a:	683b      	ldr	r3, [r7, #0]
 80a246c:	015a      	lsls	r2, r3, #5
 80a246e:	69bb      	ldr	r3, [r7, #24]
 80a2470:	4413      	add	r3, r2
 80a2472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a2476:	689b      	ldr	r3, [r3, #8]
 80a2478:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80a247a:	687b      	ldr	r3, [r7, #4]
 80a247c:	799b      	ldrb	r3, [r3, #6]
 80a247e:	2b01      	cmp	r3, #1
 80a2480:	d17b      	bne.n	80a257a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80a2482:	693b      	ldr	r3, [r7, #16]
 80a2484:	f003 0308 	and.w	r3, r3, #8
 80a2488:	2b00      	cmp	r3, #0
 80a248a:	d015      	beq.n	80a24b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80a248c:	697b      	ldr	r3, [r7, #20]
 80a248e:	4a61      	ldr	r2, [pc, #388]	@ (80a2614 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80a2490:	4293      	cmp	r3, r2
 80a2492:	f240 80b9 	bls.w	80a2608 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80a2496:	693b      	ldr	r3, [r7, #16]
 80a2498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80a249c:	2b00      	cmp	r3, #0
 80a249e:	f000 80b3 	beq.w	80a2608 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80a24a2:	683b      	ldr	r3, [r7, #0]
 80a24a4:	015a      	lsls	r2, r3, #5
 80a24a6:	69bb      	ldr	r3, [r7, #24]
 80a24a8:	4413      	add	r3, r2
 80a24aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a24ae:	461a      	mov	r2, r3
 80a24b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80a24b4:	6093      	str	r3, [r2, #8]
 80a24b6:	e0a7      	b.n	80a2608 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80a24b8:	693b      	ldr	r3, [r7, #16]
 80a24ba:	f003 0320 	and.w	r3, r3, #32
 80a24be:	2b00      	cmp	r3, #0
 80a24c0:	d009      	beq.n	80a24d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80a24c2:	683b      	ldr	r3, [r7, #0]
 80a24c4:	015a      	lsls	r2, r3, #5
 80a24c6:	69bb      	ldr	r3, [r7, #24]
 80a24c8:	4413      	add	r3, r2
 80a24ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a24ce:	461a      	mov	r2, r3
 80a24d0:	2320      	movs	r3, #32
 80a24d2:	6093      	str	r3, [r2, #8]
 80a24d4:	e098      	b.n	80a2608 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80a24d6:	693b      	ldr	r3, [r7, #16]
 80a24d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80a24dc:	2b00      	cmp	r3, #0
 80a24de:	f040 8093 	bne.w	80a2608 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80a24e2:	697b      	ldr	r3, [r7, #20]
 80a24e4:	4a4b      	ldr	r2, [pc, #300]	@ (80a2614 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80a24e6:	4293      	cmp	r3, r2
 80a24e8:	d90f      	bls.n	80a250a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80a24ea:	693b      	ldr	r3, [r7, #16]
 80a24ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80a24f0:	2b00      	cmp	r3, #0
 80a24f2:	d00a      	beq.n	80a250a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80a24f4:	683b      	ldr	r3, [r7, #0]
 80a24f6:	015a      	lsls	r2, r3, #5
 80a24f8:	69bb      	ldr	r3, [r7, #24]
 80a24fa:	4413      	add	r3, r2
 80a24fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a2500:	461a      	mov	r2, r3
 80a2502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80a2506:	6093      	str	r3, [r2, #8]
 80a2508:	e07e      	b.n	80a2608 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80a250a:	683a      	ldr	r2, [r7, #0]
 80a250c:	4613      	mov	r3, r2
 80a250e:	00db      	lsls	r3, r3, #3
 80a2510:	4413      	add	r3, r2
 80a2512:	009b      	lsls	r3, r3, #2
 80a2514:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a2518:	687a      	ldr	r2, [r7, #4]
 80a251a:	4413      	add	r3, r2
 80a251c:	3304      	adds	r3, #4
 80a251e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80a2520:	68fb      	ldr	r3, [r7, #12]
 80a2522:	6a1a      	ldr	r2, [r3, #32]
 80a2524:	683b      	ldr	r3, [r7, #0]
 80a2526:	0159      	lsls	r1, r3, #5
 80a2528:	69bb      	ldr	r3, [r7, #24]
 80a252a:	440b      	add	r3, r1
 80a252c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a2530:	691b      	ldr	r3, [r3, #16]
 80a2532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80a2536:	1ad2      	subs	r2, r2, r3
 80a2538:	68fb      	ldr	r3, [r7, #12]
 80a253a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80a253c:	683b      	ldr	r3, [r7, #0]
 80a253e:	2b00      	cmp	r3, #0
 80a2540:	d114      	bne.n	80a256c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80a2542:	68fb      	ldr	r3, [r7, #12]
 80a2544:	691b      	ldr	r3, [r3, #16]
 80a2546:	2b00      	cmp	r3, #0
 80a2548:	d109      	bne.n	80a255e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80a254a:	687b      	ldr	r3, [r7, #4]
 80a254c:	6818      	ldr	r0, [r3, #0]
 80a254e:	687b      	ldr	r3, [r7, #4]
 80a2550:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80a2554:	461a      	mov	r2, r3
 80a2556:	2101      	movs	r1, #1
 80a2558:	f004 f832 	bl	80a65c0 <USB_EP0_OutStart>
 80a255c:	e006      	b.n	80a256c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80a255e:	68fb      	ldr	r3, [r7, #12]
 80a2560:	68da      	ldr	r2, [r3, #12]
 80a2562:	68fb      	ldr	r3, [r7, #12]
 80a2564:	695b      	ldr	r3, [r3, #20]
 80a2566:	441a      	add	r2, r3
 80a2568:	68fb      	ldr	r3, [r7, #12]
 80a256a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80a256c:	683b      	ldr	r3, [r7, #0]
 80a256e:	b2db      	uxtb	r3, r3
 80a2570:	4619      	mov	r1, r3
 80a2572:	6878      	ldr	r0, [r7, #4]
 80a2574:	f006 fb8a 	bl	80a8c8c <HAL_PCD_DataOutStageCallback>
 80a2578:	e046      	b.n	80a2608 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80a257a:	697b      	ldr	r3, [r7, #20]
 80a257c:	4a26      	ldr	r2, [pc, #152]	@ (80a2618 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80a257e:	4293      	cmp	r3, r2
 80a2580:	d124      	bne.n	80a25cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80a2582:	693b      	ldr	r3, [r7, #16]
 80a2584:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80a2588:	2b00      	cmp	r3, #0
 80a258a:	d00a      	beq.n	80a25a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80a258c:	683b      	ldr	r3, [r7, #0]
 80a258e:	015a      	lsls	r2, r3, #5
 80a2590:	69bb      	ldr	r3, [r7, #24]
 80a2592:	4413      	add	r3, r2
 80a2594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a2598:	461a      	mov	r2, r3
 80a259a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80a259e:	6093      	str	r3, [r2, #8]
 80a25a0:	e032      	b.n	80a2608 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80a25a2:	693b      	ldr	r3, [r7, #16]
 80a25a4:	f003 0320 	and.w	r3, r3, #32
 80a25a8:	2b00      	cmp	r3, #0
 80a25aa:	d008      	beq.n	80a25be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80a25ac:	683b      	ldr	r3, [r7, #0]
 80a25ae:	015a      	lsls	r2, r3, #5
 80a25b0:	69bb      	ldr	r3, [r7, #24]
 80a25b2:	4413      	add	r3, r2
 80a25b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a25b8:	461a      	mov	r2, r3
 80a25ba:	2320      	movs	r3, #32
 80a25bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80a25be:	683b      	ldr	r3, [r7, #0]
 80a25c0:	b2db      	uxtb	r3, r3
 80a25c2:	4619      	mov	r1, r3
 80a25c4:	6878      	ldr	r0, [r7, #4]
 80a25c6:	f006 fb61 	bl	80a8c8c <HAL_PCD_DataOutStageCallback>
 80a25ca:	e01d      	b.n	80a2608 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80a25cc:	683b      	ldr	r3, [r7, #0]
 80a25ce:	2b00      	cmp	r3, #0
 80a25d0:	d114      	bne.n	80a25fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80a25d2:	6879      	ldr	r1, [r7, #4]
 80a25d4:	683a      	ldr	r2, [r7, #0]
 80a25d6:	4613      	mov	r3, r2
 80a25d8:	00db      	lsls	r3, r3, #3
 80a25da:	4413      	add	r3, r2
 80a25dc:	009b      	lsls	r3, r3, #2
 80a25de:	440b      	add	r3, r1
 80a25e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80a25e4:	681b      	ldr	r3, [r3, #0]
 80a25e6:	2b00      	cmp	r3, #0
 80a25e8:	d108      	bne.n	80a25fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80a25ea:	687b      	ldr	r3, [r7, #4]
 80a25ec:	6818      	ldr	r0, [r3, #0]
 80a25ee:	687b      	ldr	r3, [r7, #4]
 80a25f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80a25f4:	461a      	mov	r2, r3
 80a25f6:	2100      	movs	r1, #0
 80a25f8:	f003 ffe2 	bl	80a65c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80a25fc:	683b      	ldr	r3, [r7, #0]
 80a25fe:	b2db      	uxtb	r3, r3
 80a2600:	4619      	mov	r1, r3
 80a2602:	6878      	ldr	r0, [r7, #4]
 80a2604:	f006 fb42 	bl	80a8c8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80a2608:	2300      	movs	r3, #0
}
 80a260a:	4618      	mov	r0, r3
 80a260c:	3720      	adds	r7, #32
 80a260e:	46bd      	mov	sp, r7
 80a2610:	bd80      	pop	{r7, pc}
 80a2612:	bf00      	nop
 80a2614:	4f54300a 	.word	0x4f54300a
 80a2618:	4f54310a 	.word	0x4f54310a

080a261c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80a261c:	b580      	push	{r7, lr}
 80a261e:	b086      	sub	sp, #24
 80a2620:	af00      	add	r7, sp, #0
 80a2622:	6078      	str	r0, [r7, #4]
 80a2624:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80a2626:	687b      	ldr	r3, [r7, #4]
 80a2628:	681b      	ldr	r3, [r3, #0]
 80a262a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a262c:	697b      	ldr	r3, [r7, #20]
 80a262e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80a2630:	697b      	ldr	r3, [r7, #20]
 80a2632:	333c      	adds	r3, #60	@ 0x3c
 80a2634:	3304      	adds	r3, #4
 80a2636:	681b      	ldr	r3, [r3, #0]
 80a2638:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80a263a:	683b      	ldr	r3, [r7, #0]
 80a263c:	015a      	lsls	r2, r3, #5
 80a263e:	693b      	ldr	r3, [r7, #16]
 80a2640:	4413      	add	r3, r2
 80a2642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a2646:	689b      	ldr	r3, [r3, #8]
 80a2648:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80a264a:	68fb      	ldr	r3, [r7, #12]
 80a264c:	4a15      	ldr	r2, [pc, #84]	@ (80a26a4 <PCD_EP_OutSetupPacket_int+0x88>)
 80a264e:	4293      	cmp	r3, r2
 80a2650:	d90e      	bls.n	80a2670 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80a2652:	68bb      	ldr	r3, [r7, #8]
 80a2654:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80a2658:	2b00      	cmp	r3, #0
 80a265a:	d009      	beq.n	80a2670 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80a265c:	683b      	ldr	r3, [r7, #0]
 80a265e:	015a      	lsls	r2, r3, #5
 80a2660:	693b      	ldr	r3, [r7, #16]
 80a2662:	4413      	add	r3, r2
 80a2664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a2668:	461a      	mov	r2, r3
 80a266a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80a266e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80a2670:	6878      	ldr	r0, [r7, #4]
 80a2672:	f006 faf9 	bl	80a8c68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80a2676:	68fb      	ldr	r3, [r7, #12]
 80a2678:	4a0a      	ldr	r2, [pc, #40]	@ (80a26a4 <PCD_EP_OutSetupPacket_int+0x88>)
 80a267a:	4293      	cmp	r3, r2
 80a267c:	d90c      	bls.n	80a2698 <PCD_EP_OutSetupPacket_int+0x7c>
 80a267e:	687b      	ldr	r3, [r7, #4]
 80a2680:	799b      	ldrb	r3, [r3, #6]
 80a2682:	2b01      	cmp	r3, #1
 80a2684:	d108      	bne.n	80a2698 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80a2686:	687b      	ldr	r3, [r7, #4]
 80a2688:	6818      	ldr	r0, [r3, #0]
 80a268a:	687b      	ldr	r3, [r7, #4]
 80a268c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80a2690:	461a      	mov	r2, r3
 80a2692:	2101      	movs	r1, #1
 80a2694:	f003 ff94 	bl	80a65c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80a2698:	2300      	movs	r3, #0
}
 80a269a:	4618      	mov	r0, r3
 80a269c:	3718      	adds	r7, #24
 80a269e:	46bd      	mov	sp, r7
 80a26a0:	bd80      	pop	{r7, pc}
 80a26a2:	bf00      	nop
 80a26a4:	4f54300a 	.word	0x4f54300a

080a26a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80a26a8:	b480      	push	{r7}
 80a26aa:	b085      	sub	sp, #20
 80a26ac:	af00      	add	r7, sp, #0
 80a26ae:	6078      	str	r0, [r7, #4]
 80a26b0:	460b      	mov	r3, r1
 80a26b2:	70fb      	strb	r3, [r7, #3]
 80a26b4:	4613      	mov	r3, r2
 80a26b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80a26b8:	687b      	ldr	r3, [r7, #4]
 80a26ba:	681b      	ldr	r3, [r3, #0]
 80a26bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80a26be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80a26c0:	78fb      	ldrb	r3, [r7, #3]
 80a26c2:	2b00      	cmp	r3, #0
 80a26c4:	d107      	bne.n	80a26d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80a26c6:	883b      	ldrh	r3, [r7, #0]
 80a26c8:	0419      	lsls	r1, r3, #16
 80a26ca:	687b      	ldr	r3, [r7, #4]
 80a26cc:	681b      	ldr	r3, [r3, #0]
 80a26ce:	68ba      	ldr	r2, [r7, #8]
 80a26d0:	430a      	orrs	r2, r1
 80a26d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80a26d4:	e028      	b.n	80a2728 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80a26d6:	687b      	ldr	r3, [r7, #4]
 80a26d8:	681b      	ldr	r3, [r3, #0]
 80a26da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a26dc:	0c1b      	lsrs	r3, r3, #16
 80a26de:	68ba      	ldr	r2, [r7, #8]
 80a26e0:	4413      	add	r3, r2
 80a26e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80a26e4:	2300      	movs	r3, #0
 80a26e6:	73fb      	strb	r3, [r7, #15]
 80a26e8:	e00d      	b.n	80a2706 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80a26ea:	687b      	ldr	r3, [r7, #4]
 80a26ec:	681a      	ldr	r2, [r3, #0]
 80a26ee:	7bfb      	ldrb	r3, [r7, #15]
 80a26f0:	3340      	adds	r3, #64	@ 0x40
 80a26f2:	009b      	lsls	r3, r3, #2
 80a26f4:	4413      	add	r3, r2
 80a26f6:	685b      	ldr	r3, [r3, #4]
 80a26f8:	0c1b      	lsrs	r3, r3, #16
 80a26fa:	68ba      	ldr	r2, [r7, #8]
 80a26fc:	4413      	add	r3, r2
 80a26fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80a2700:	7bfb      	ldrb	r3, [r7, #15]
 80a2702:	3301      	adds	r3, #1
 80a2704:	73fb      	strb	r3, [r7, #15]
 80a2706:	7bfa      	ldrb	r2, [r7, #15]
 80a2708:	78fb      	ldrb	r3, [r7, #3]
 80a270a:	3b01      	subs	r3, #1
 80a270c:	429a      	cmp	r2, r3
 80a270e:	d3ec      	bcc.n	80a26ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80a2710:	883b      	ldrh	r3, [r7, #0]
 80a2712:	0418      	lsls	r0, r3, #16
 80a2714:	687b      	ldr	r3, [r7, #4]
 80a2716:	6819      	ldr	r1, [r3, #0]
 80a2718:	78fb      	ldrb	r3, [r7, #3]
 80a271a:	3b01      	subs	r3, #1
 80a271c:	68ba      	ldr	r2, [r7, #8]
 80a271e:	4302      	orrs	r2, r0
 80a2720:	3340      	adds	r3, #64	@ 0x40
 80a2722:	009b      	lsls	r3, r3, #2
 80a2724:	440b      	add	r3, r1
 80a2726:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80a2728:	2300      	movs	r3, #0
}
 80a272a:	4618      	mov	r0, r3
 80a272c:	3714      	adds	r7, #20
 80a272e:	46bd      	mov	sp, r7
 80a2730:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a2734:	4770      	bx	lr

080a2736 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80a2736:	b480      	push	{r7}
 80a2738:	b083      	sub	sp, #12
 80a273a:	af00      	add	r7, sp, #0
 80a273c:	6078      	str	r0, [r7, #4]
 80a273e:	460b      	mov	r3, r1
 80a2740:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80a2742:	687b      	ldr	r3, [r7, #4]
 80a2744:	681b      	ldr	r3, [r3, #0]
 80a2746:	887a      	ldrh	r2, [r7, #2]
 80a2748:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80a274a:	2300      	movs	r3, #0
}
 80a274c:	4618      	mov	r0, r3
 80a274e:	370c      	adds	r7, #12
 80a2750:	46bd      	mov	sp, r7
 80a2752:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a2756:	4770      	bx	lr

080a2758 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80a2758:	b480      	push	{r7}
 80a275a:	b085      	sub	sp, #20
 80a275c:	af00      	add	r7, sp, #0
 80a275e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80a2760:	687b      	ldr	r3, [r7, #4]
 80a2762:	681b      	ldr	r3, [r3, #0]
 80a2764:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80a2766:	687b      	ldr	r3, [r7, #4]
 80a2768:	2201      	movs	r2, #1
 80a276a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80a276e:	687b      	ldr	r3, [r7, #4]
 80a2770:	2200      	movs	r2, #0
 80a2772:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80a2776:	68fb      	ldr	r3, [r7, #12]
 80a2778:	699b      	ldr	r3, [r3, #24]
 80a277a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80a277e:	68fb      	ldr	r3, [r7, #12]
 80a2780:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80a2782:	68fb      	ldr	r3, [r7, #12]
 80a2784:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80a2786:	4b05      	ldr	r3, [pc, #20]	@ (80a279c <HAL_PCDEx_ActivateLPM+0x44>)
 80a2788:	4313      	orrs	r3, r2
 80a278a:	68fa      	ldr	r2, [r7, #12]
 80a278c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80a278e:	2300      	movs	r3, #0
}
 80a2790:	4618      	mov	r0, r3
 80a2792:	3714      	adds	r7, #20
 80a2794:	46bd      	mov	sp, r7
 80a2796:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a279a:	4770      	bx	lr
 80a279c:	10000003 	.word	0x10000003

080a27a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80a27a0:	b480      	push	{r7}
 80a27a2:	b083      	sub	sp, #12
 80a27a4:	af00      	add	r7, sp, #0
 80a27a6:	6078      	str	r0, [r7, #4]
 80a27a8:	460b      	mov	r3, r1
 80a27aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80a27ac:	bf00      	nop
 80a27ae:	370c      	adds	r7, #12
 80a27b0:	46bd      	mov	sp, r7
 80a27b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a27b6:	4770      	bx	lr

080a27b8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80a27b8:	b580      	push	{r7, lr}
 80a27ba:	b084      	sub	sp, #16
 80a27bc:	af00      	add	r7, sp, #0
 80a27be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80a27c0:	4b29      	ldr	r3, [pc, #164]	@ (80a2868 <HAL_PWREx_ConfigSupply+0xb0>)
 80a27c2:	68db      	ldr	r3, [r3, #12]
 80a27c4:	f003 0307 	and.w	r3, r3, #7
 80a27c8:	2b06      	cmp	r3, #6
 80a27ca:	d00a      	beq.n	80a27e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80a27cc:	4b26      	ldr	r3, [pc, #152]	@ (80a2868 <HAL_PWREx_ConfigSupply+0xb0>)
 80a27ce:	68db      	ldr	r3, [r3, #12]
 80a27d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80a27d4:	687a      	ldr	r2, [r7, #4]
 80a27d6:	429a      	cmp	r2, r3
 80a27d8:	d001      	beq.n	80a27de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80a27da:	2301      	movs	r3, #1
 80a27dc:	e040      	b.n	80a2860 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80a27de:	2300      	movs	r3, #0
 80a27e0:	e03e      	b.n	80a2860 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80a27e2:	4b21      	ldr	r3, [pc, #132]	@ (80a2868 <HAL_PWREx_ConfigSupply+0xb0>)
 80a27e4:	68db      	ldr	r3, [r3, #12]
 80a27e6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80a27ea:	491f      	ldr	r1, [pc, #124]	@ (80a2868 <HAL_PWREx_ConfigSupply+0xb0>)
 80a27ec:	687b      	ldr	r3, [r7, #4]
 80a27ee:	4313      	orrs	r3, r2
 80a27f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80a27f2:	f7fe f9e3 	bl	80a0bbc <HAL_GetTick>
 80a27f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80a27f8:	e009      	b.n	80a280e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80a27fa:	f7fe f9df 	bl	80a0bbc <HAL_GetTick>
 80a27fe:	4602      	mov	r2, r0
 80a2800:	68fb      	ldr	r3, [r7, #12]
 80a2802:	1ad3      	subs	r3, r2, r3
 80a2804:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80a2808:	d901      	bls.n	80a280e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80a280a:	2301      	movs	r3, #1
 80a280c:	e028      	b.n	80a2860 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80a280e:	4b16      	ldr	r3, [pc, #88]	@ (80a2868 <HAL_PWREx_ConfigSupply+0xb0>)
 80a2810:	685b      	ldr	r3, [r3, #4]
 80a2812:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80a2816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80a281a:	d1ee      	bne.n	80a27fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80a281c:	687b      	ldr	r3, [r7, #4]
 80a281e:	2b1e      	cmp	r3, #30
 80a2820:	d008      	beq.n	80a2834 <HAL_PWREx_ConfigSupply+0x7c>
 80a2822:	687b      	ldr	r3, [r7, #4]
 80a2824:	2b2e      	cmp	r3, #46	@ 0x2e
 80a2826:	d005      	beq.n	80a2834 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80a2828:	687b      	ldr	r3, [r7, #4]
 80a282a:	2b1d      	cmp	r3, #29
 80a282c:	d002      	beq.n	80a2834 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80a282e:	687b      	ldr	r3, [r7, #4]
 80a2830:	2b2d      	cmp	r3, #45	@ 0x2d
 80a2832:	d114      	bne.n	80a285e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80a2834:	f7fe f9c2 	bl	80a0bbc <HAL_GetTick>
 80a2838:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80a283a:	e009      	b.n	80a2850 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80a283c:	f7fe f9be 	bl	80a0bbc <HAL_GetTick>
 80a2840:	4602      	mov	r2, r0
 80a2842:	68fb      	ldr	r3, [r7, #12]
 80a2844:	1ad3      	subs	r3, r2, r3
 80a2846:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80a284a:	d901      	bls.n	80a2850 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80a284c:	2301      	movs	r3, #1
 80a284e:	e007      	b.n	80a2860 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80a2850:	4b05      	ldr	r3, [pc, #20]	@ (80a2868 <HAL_PWREx_ConfigSupply+0xb0>)
 80a2852:	68db      	ldr	r3, [r3, #12]
 80a2854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80a2858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80a285c:	d1ee      	bne.n	80a283c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80a285e:	2300      	movs	r3, #0
}
 80a2860:	4618      	mov	r0, r3
 80a2862:	3710      	adds	r7, #16
 80a2864:	46bd      	mov	sp, r7
 80a2866:	bd80      	pop	{r7, pc}
 80a2868:	58024800 	.word	0x58024800

080a286c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80a286c:	b480      	push	{r7}
 80a286e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80a2870:	4b05      	ldr	r3, [pc, #20]	@ (80a2888 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80a2872:	68db      	ldr	r3, [r3, #12]
 80a2874:	4a04      	ldr	r2, [pc, #16]	@ (80a2888 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80a2876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80a287a:	60d3      	str	r3, [r2, #12]
}
 80a287c:	bf00      	nop
 80a287e:	46bd      	mov	sp, r7
 80a2880:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a2884:	4770      	bx	lr
 80a2886:	bf00      	nop
 80a2888:	58024800 	.word	0x58024800

080a288c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80a288c:	b580      	push	{r7, lr}
 80a288e:	b08c      	sub	sp, #48	@ 0x30
 80a2890:	af00      	add	r7, sp, #0
 80a2892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80a2894:	687b      	ldr	r3, [r7, #4]
 80a2896:	2b00      	cmp	r3, #0
 80a2898:	d102      	bne.n	80a28a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80a289a:	2301      	movs	r3, #1
 80a289c:	f000 bc48 	b.w	80a3130 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80a28a0:	687b      	ldr	r3, [r7, #4]
 80a28a2:	681b      	ldr	r3, [r3, #0]
 80a28a4:	f003 0301 	and.w	r3, r3, #1
 80a28a8:	2b00      	cmp	r3, #0
 80a28aa:	f000 8088 	beq.w	80a29be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80a28ae:	4b99      	ldr	r3, [pc, #612]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a28b0:	691b      	ldr	r3, [r3, #16]
 80a28b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80a28b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80a28b8:	4b96      	ldr	r3, [pc, #600]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a28ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a28bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80a28be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a28c0:	2b10      	cmp	r3, #16
 80a28c2:	d007      	beq.n	80a28d4 <HAL_RCC_OscConfig+0x48>
 80a28c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a28c6:	2b18      	cmp	r3, #24
 80a28c8:	d111      	bne.n	80a28ee <HAL_RCC_OscConfig+0x62>
 80a28ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80a28cc:	f003 0303 	and.w	r3, r3, #3
 80a28d0:	2b02      	cmp	r3, #2
 80a28d2:	d10c      	bne.n	80a28ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80a28d4:	4b8f      	ldr	r3, [pc, #572]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a28d6:	681b      	ldr	r3, [r3, #0]
 80a28d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80a28dc:	2b00      	cmp	r3, #0
 80a28de:	d06d      	beq.n	80a29bc <HAL_RCC_OscConfig+0x130>
 80a28e0:	687b      	ldr	r3, [r7, #4]
 80a28e2:	685b      	ldr	r3, [r3, #4]
 80a28e4:	2b00      	cmp	r3, #0
 80a28e6:	d169      	bne.n	80a29bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80a28e8:	2301      	movs	r3, #1
 80a28ea:	f000 bc21 	b.w	80a3130 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80a28ee:	687b      	ldr	r3, [r7, #4]
 80a28f0:	685b      	ldr	r3, [r3, #4]
 80a28f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80a28f6:	d106      	bne.n	80a2906 <HAL_RCC_OscConfig+0x7a>
 80a28f8:	4b86      	ldr	r3, [pc, #536]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a28fa:	681b      	ldr	r3, [r3, #0]
 80a28fc:	4a85      	ldr	r2, [pc, #532]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a28fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80a2902:	6013      	str	r3, [r2, #0]
 80a2904:	e02e      	b.n	80a2964 <HAL_RCC_OscConfig+0xd8>
 80a2906:	687b      	ldr	r3, [r7, #4]
 80a2908:	685b      	ldr	r3, [r3, #4]
 80a290a:	2b00      	cmp	r3, #0
 80a290c:	d10c      	bne.n	80a2928 <HAL_RCC_OscConfig+0x9c>
 80a290e:	4b81      	ldr	r3, [pc, #516]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2910:	681b      	ldr	r3, [r3, #0]
 80a2912:	4a80      	ldr	r2, [pc, #512]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80a2918:	6013      	str	r3, [r2, #0]
 80a291a:	4b7e      	ldr	r3, [pc, #504]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a291c:	681b      	ldr	r3, [r3, #0]
 80a291e:	4a7d      	ldr	r2, [pc, #500]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2920:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80a2924:	6013      	str	r3, [r2, #0]
 80a2926:	e01d      	b.n	80a2964 <HAL_RCC_OscConfig+0xd8>
 80a2928:	687b      	ldr	r3, [r7, #4]
 80a292a:	685b      	ldr	r3, [r3, #4]
 80a292c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80a2930:	d10c      	bne.n	80a294c <HAL_RCC_OscConfig+0xc0>
 80a2932:	4b78      	ldr	r3, [pc, #480]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2934:	681b      	ldr	r3, [r3, #0]
 80a2936:	4a77      	ldr	r2, [pc, #476]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80a293c:	6013      	str	r3, [r2, #0]
 80a293e:	4b75      	ldr	r3, [pc, #468]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2940:	681b      	ldr	r3, [r3, #0]
 80a2942:	4a74      	ldr	r2, [pc, #464]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80a2948:	6013      	str	r3, [r2, #0]
 80a294a:	e00b      	b.n	80a2964 <HAL_RCC_OscConfig+0xd8>
 80a294c:	4b71      	ldr	r3, [pc, #452]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a294e:	681b      	ldr	r3, [r3, #0]
 80a2950:	4a70      	ldr	r2, [pc, #448]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80a2956:	6013      	str	r3, [r2, #0]
 80a2958:	4b6e      	ldr	r3, [pc, #440]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a295a:	681b      	ldr	r3, [r3, #0]
 80a295c:	4a6d      	ldr	r2, [pc, #436]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a295e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80a2962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80a2964:	687b      	ldr	r3, [r7, #4]
 80a2966:	685b      	ldr	r3, [r3, #4]
 80a2968:	2b00      	cmp	r3, #0
 80a296a:	d013      	beq.n	80a2994 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a296c:	f7fe f926 	bl	80a0bbc <HAL_GetTick>
 80a2970:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80a2972:	e008      	b.n	80a2986 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80a2974:	f7fe f922 	bl	80a0bbc <HAL_GetTick>
 80a2978:	4602      	mov	r2, r0
 80a297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a297c:	1ad3      	subs	r3, r2, r3
 80a297e:	2b64      	cmp	r3, #100	@ 0x64
 80a2980:	d901      	bls.n	80a2986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80a2982:	2303      	movs	r3, #3
 80a2984:	e3d4      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80a2986:	4b63      	ldr	r3, [pc, #396]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2988:	681b      	ldr	r3, [r3, #0]
 80a298a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80a298e:	2b00      	cmp	r3, #0
 80a2990:	d0f0      	beq.n	80a2974 <HAL_RCC_OscConfig+0xe8>
 80a2992:	e014      	b.n	80a29be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a2994:	f7fe f912 	bl	80a0bbc <HAL_GetTick>
 80a2998:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80a299a:	e008      	b.n	80a29ae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80a299c:	f7fe f90e 	bl	80a0bbc <HAL_GetTick>
 80a29a0:	4602      	mov	r2, r0
 80a29a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a29a4:	1ad3      	subs	r3, r2, r3
 80a29a6:	2b64      	cmp	r3, #100	@ 0x64
 80a29a8:	d901      	bls.n	80a29ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80a29aa:	2303      	movs	r3, #3
 80a29ac:	e3c0      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80a29ae:	4b59      	ldr	r3, [pc, #356]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a29b0:	681b      	ldr	r3, [r3, #0]
 80a29b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80a29b6:	2b00      	cmp	r3, #0
 80a29b8:	d1f0      	bne.n	80a299c <HAL_RCC_OscConfig+0x110>
 80a29ba:	e000      	b.n	80a29be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80a29bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80a29be:	687b      	ldr	r3, [r7, #4]
 80a29c0:	681b      	ldr	r3, [r3, #0]
 80a29c2:	f003 0302 	and.w	r3, r3, #2
 80a29c6:	2b00      	cmp	r3, #0
 80a29c8:	f000 80ca 	beq.w	80a2b60 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80a29cc:	4b51      	ldr	r3, [pc, #324]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a29ce:	691b      	ldr	r3, [r3, #16]
 80a29d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80a29d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80a29d6:	4b4f      	ldr	r3, [pc, #316]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a29d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a29da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80a29dc:	6a3b      	ldr	r3, [r7, #32]
 80a29de:	2b00      	cmp	r3, #0
 80a29e0:	d007      	beq.n	80a29f2 <HAL_RCC_OscConfig+0x166>
 80a29e2:	6a3b      	ldr	r3, [r7, #32]
 80a29e4:	2b18      	cmp	r3, #24
 80a29e6:	d156      	bne.n	80a2a96 <HAL_RCC_OscConfig+0x20a>
 80a29e8:	69fb      	ldr	r3, [r7, #28]
 80a29ea:	f003 0303 	and.w	r3, r3, #3
 80a29ee:	2b00      	cmp	r3, #0
 80a29f0:	d151      	bne.n	80a2a96 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80a29f2:	4b48      	ldr	r3, [pc, #288]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a29f4:	681b      	ldr	r3, [r3, #0]
 80a29f6:	f003 0304 	and.w	r3, r3, #4
 80a29fa:	2b00      	cmp	r3, #0
 80a29fc:	d005      	beq.n	80a2a0a <HAL_RCC_OscConfig+0x17e>
 80a29fe:	687b      	ldr	r3, [r7, #4]
 80a2a00:	68db      	ldr	r3, [r3, #12]
 80a2a02:	2b00      	cmp	r3, #0
 80a2a04:	d101      	bne.n	80a2a0a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80a2a06:	2301      	movs	r3, #1
 80a2a08:	e392      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80a2a0a:	4b42      	ldr	r3, [pc, #264]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2a0c:	681b      	ldr	r3, [r3, #0]
 80a2a0e:	f023 0219 	bic.w	r2, r3, #25
 80a2a12:	687b      	ldr	r3, [r7, #4]
 80a2a14:	68db      	ldr	r3, [r3, #12]
 80a2a16:	493f      	ldr	r1, [pc, #252]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2a18:	4313      	orrs	r3, r2
 80a2a1a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a2a1c:	f7fe f8ce 	bl	80a0bbc <HAL_GetTick>
 80a2a20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80a2a22:	e008      	b.n	80a2a36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80a2a24:	f7fe f8ca 	bl	80a0bbc <HAL_GetTick>
 80a2a28:	4602      	mov	r2, r0
 80a2a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2a2c:	1ad3      	subs	r3, r2, r3
 80a2a2e:	2b02      	cmp	r3, #2
 80a2a30:	d901      	bls.n	80a2a36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80a2a32:	2303      	movs	r3, #3
 80a2a34:	e37c      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80a2a36:	4b37      	ldr	r3, [pc, #220]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2a38:	681b      	ldr	r3, [r3, #0]
 80a2a3a:	f003 0304 	and.w	r3, r3, #4
 80a2a3e:	2b00      	cmp	r3, #0
 80a2a40:	d0f0      	beq.n	80a2a24 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80a2a42:	f7fe f8eb 	bl	80a0c1c <HAL_GetREVID>
 80a2a46:	4603      	mov	r3, r0
 80a2a48:	f241 0203 	movw	r2, #4099	@ 0x1003
 80a2a4c:	4293      	cmp	r3, r2
 80a2a4e:	d817      	bhi.n	80a2a80 <HAL_RCC_OscConfig+0x1f4>
 80a2a50:	687b      	ldr	r3, [r7, #4]
 80a2a52:	691b      	ldr	r3, [r3, #16]
 80a2a54:	2b40      	cmp	r3, #64	@ 0x40
 80a2a56:	d108      	bne.n	80a2a6a <HAL_RCC_OscConfig+0x1de>
 80a2a58:	4b2e      	ldr	r3, [pc, #184]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2a5a:	685b      	ldr	r3, [r3, #4]
 80a2a5c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80a2a60:	4a2c      	ldr	r2, [pc, #176]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a2a66:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80a2a68:	e07a      	b.n	80a2b60 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80a2a6a:	4b2a      	ldr	r3, [pc, #168]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2a6c:	685b      	ldr	r3, [r3, #4]
 80a2a6e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80a2a72:	687b      	ldr	r3, [r7, #4]
 80a2a74:	691b      	ldr	r3, [r3, #16]
 80a2a76:	031b      	lsls	r3, r3, #12
 80a2a78:	4926      	ldr	r1, [pc, #152]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2a7a:	4313      	orrs	r3, r2
 80a2a7c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80a2a7e:	e06f      	b.n	80a2b60 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80a2a80:	4b24      	ldr	r3, [pc, #144]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2a82:	685b      	ldr	r3, [r3, #4]
 80a2a84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80a2a88:	687b      	ldr	r3, [r7, #4]
 80a2a8a:	691b      	ldr	r3, [r3, #16]
 80a2a8c:	061b      	lsls	r3, r3, #24
 80a2a8e:	4921      	ldr	r1, [pc, #132]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2a90:	4313      	orrs	r3, r2
 80a2a92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80a2a94:	e064      	b.n	80a2b60 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80a2a96:	687b      	ldr	r3, [r7, #4]
 80a2a98:	68db      	ldr	r3, [r3, #12]
 80a2a9a:	2b00      	cmp	r3, #0
 80a2a9c:	d047      	beq.n	80a2b2e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80a2a9e:	4b1d      	ldr	r3, [pc, #116]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2aa0:	681b      	ldr	r3, [r3, #0]
 80a2aa2:	f023 0219 	bic.w	r2, r3, #25
 80a2aa6:	687b      	ldr	r3, [r7, #4]
 80a2aa8:	68db      	ldr	r3, [r3, #12]
 80a2aaa:	491a      	ldr	r1, [pc, #104]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2aac:	4313      	orrs	r3, r2
 80a2aae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a2ab0:	f7fe f884 	bl	80a0bbc <HAL_GetTick>
 80a2ab4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80a2ab6:	e008      	b.n	80a2aca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80a2ab8:	f7fe f880 	bl	80a0bbc <HAL_GetTick>
 80a2abc:	4602      	mov	r2, r0
 80a2abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2ac0:	1ad3      	subs	r3, r2, r3
 80a2ac2:	2b02      	cmp	r3, #2
 80a2ac4:	d901      	bls.n	80a2aca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80a2ac6:	2303      	movs	r3, #3
 80a2ac8:	e332      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80a2aca:	4b12      	ldr	r3, [pc, #72]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2acc:	681b      	ldr	r3, [r3, #0]
 80a2ace:	f003 0304 	and.w	r3, r3, #4
 80a2ad2:	2b00      	cmp	r3, #0
 80a2ad4:	d0f0      	beq.n	80a2ab8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80a2ad6:	f7fe f8a1 	bl	80a0c1c <HAL_GetREVID>
 80a2ada:	4603      	mov	r3, r0
 80a2adc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80a2ae0:	4293      	cmp	r3, r2
 80a2ae2:	d819      	bhi.n	80a2b18 <HAL_RCC_OscConfig+0x28c>
 80a2ae4:	687b      	ldr	r3, [r7, #4]
 80a2ae6:	691b      	ldr	r3, [r3, #16]
 80a2ae8:	2b40      	cmp	r3, #64	@ 0x40
 80a2aea:	d108      	bne.n	80a2afe <HAL_RCC_OscConfig+0x272>
 80a2aec:	4b09      	ldr	r3, [pc, #36]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2aee:	685b      	ldr	r3, [r3, #4]
 80a2af0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80a2af4:	4a07      	ldr	r2, [pc, #28]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a2afa:	6053      	str	r3, [r2, #4]
 80a2afc:	e030      	b.n	80a2b60 <HAL_RCC_OscConfig+0x2d4>
 80a2afe:	4b05      	ldr	r3, [pc, #20]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2b00:	685b      	ldr	r3, [r3, #4]
 80a2b02:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80a2b06:	687b      	ldr	r3, [r7, #4]
 80a2b08:	691b      	ldr	r3, [r3, #16]
 80a2b0a:	031b      	lsls	r3, r3, #12
 80a2b0c:	4901      	ldr	r1, [pc, #4]	@ (80a2b14 <HAL_RCC_OscConfig+0x288>)
 80a2b0e:	4313      	orrs	r3, r2
 80a2b10:	604b      	str	r3, [r1, #4]
 80a2b12:	e025      	b.n	80a2b60 <HAL_RCC_OscConfig+0x2d4>
 80a2b14:	58024400 	.word	0x58024400
 80a2b18:	4b9a      	ldr	r3, [pc, #616]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2b1a:	685b      	ldr	r3, [r3, #4]
 80a2b1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80a2b20:	687b      	ldr	r3, [r7, #4]
 80a2b22:	691b      	ldr	r3, [r3, #16]
 80a2b24:	061b      	lsls	r3, r3, #24
 80a2b26:	4997      	ldr	r1, [pc, #604]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2b28:	4313      	orrs	r3, r2
 80a2b2a:	604b      	str	r3, [r1, #4]
 80a2b2c:	e018      	b.n	80a2b60 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80a2b2e:	4b95      	ldr	r3, [pc, #596]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2b30:	681b      	ldr	r3, [r3, #0]
 80a2b32:	4a94      	ldr	r2, [pc, #592]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2b34:	f023 0301 	bic.w	r3, r3, #1
 80a2b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a2b3a:	f7fe f83f 	bl	80a0bbc <HAL_GetTick>
 80a2b3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80a2b40:	e008      	b.n	80a2b54 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80a2b42:	f7fe f83b 	bl	80a0bbc <HAL_GetTick>
 80a2b46:	4602      	mov	r2, r0
 80a2b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2b4a:	1ad3      	subs	r3, r2, r3
 80a2b4c:	2b02      	cmp	r3, #2
 80a2b4e:	d901      	bls.n	80a2b54 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80a2b50:	2303      	movs	r3, #3
 80a2b52:	e2ed      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80a2b54:	4b8b      	ldr	r3, [pc, #556]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2b56:	681b      	ldr	r3, [r3, #0]
 80a2b58:	f003 0304 	and.w	r3, r3, #4
 80a2b5c:	2b00      	cmp	r3, #0
 80a2b5e:	d1f0      	bne.n	80a2b42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80a2b60:	687b      	ldr	r3, [r7, #4]
 80a2b62:	681b      	ldr	r3, [r3, #0]
 80a2b64:	f003 0310 	and.w	r3, r3, #16
 80a2b68:	2b00      	cmp	r3, #0
 80a2b6a:	f000 80a9 	beq.w	80a2cc0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80a2b6e:	4b85      	ldr	r3, [pc, #532]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2b70:	691b      	ldr	r3, [r3, #16]
 80a2b72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80a2b76:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80a2b78:	4b82      	ldr	r3, [pc, #520]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a2b7c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80a2b7e:	69bb      	ldr	r3, [r7, #24]
 80a2b80:	2b08      	cmp	r3, #8
 80a2b82:	d007      	beq.n	80a2b94 <HAL_RCC_OscConfig+0x308>
 80a2b84:	69bb      	ldr	r3, [r7, #24]
 80a2b86:	2b18      	cmp	r3, #24
 80a2b88:	d13a      	bne.n	80a2c00 <HAL_RCC_OscConfig+0x374>
 80a2b8a:	697b      	ldr	r3, [r7, #20]
 80a2b8c:	f003 0303 	and.w	r3, r3, #3
 80a2b90:	2b01      	cmp	r3, #1
 80a2b92:	d135      	bne.n	80a2c00 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80a2b94:	4b7b      	ldr	r3, [pc, #492]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2b96:	681b      	ldr	r3, [r3, #0]
 80a2b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a2b9c:	2b00      	cmp	r3, #0
 80a2b9e:	d005      	beq.n	80a2bac <HAL_RCC_OscConfig+0x320>
 80a2ba0:	687b      	ldr	r3, [r7, #4]
 80a2ba2:	69db      	ldr	r3, [r3, #28]
 80a2ba4:	2b80      	cmp	r3, #128	@ 0x80
 80a2ba6:	d001      	beq.n	80a2bac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80a2ba8:	2301      	movs	r3, #1
 80a2baa:	e2c1      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80a2bac:	f7fe f836 	bl	80a0c1c <HAL_GetREVID>
 80a2bb0:	4603      	mov	r3, r0
 80a2bb2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80a2bb6:	4293      	cmp	r3, r2
 80a2bb8:	d817      	bhi.n	80a2bea <HAL_RCC_OscConfig+0x35e>
 80a2bba:	687b      	ldr	r3, [r7, #4]
 80a2bbc:	6a1b      	ldr	r3, [r3, #32]
 80a2bbe:	2b20      	cmp	r3, #32
 80a2bc0:	d108      	bne.n	80a2bd4 <HAL_RCC_OscConfig+0x348>
 80a2bc2:	4b70      	ldr	r3, [pc, #448]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2bc4:	685b      	ldr	r3, [r3, #4]
 80a2bc6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80a2bca:	4a6e      	ldr	r2, [pc, #440]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2bcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80a2bd0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80a2bd2:	e075      	b.n	80a2cc0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80a2bd4:	4b6b      	ldr	r3, [pc, #428]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2bd6:	685b      	ldr	r3, [r3, #4]
 80a2bd8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80a2bdc:	687b      	ldr	r3, [r7, #4]
 80a2bde:	6a1b      	ldr	r3, [r3, #32]
 80a2be0:	069b      	lsls	r3, r3, #26
 80a2be2:	4968      	ldr	r1, [pc, #416]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2be4:	4313      	orrs	r3, r2
 80a2be6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80a2be8:	e06a      	b.n	80a2cc0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80a2bea:	4b66      	ldr	r3, [pc, #408]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2bec:	68db      	ldr	r3, [r3, #12]
 80a2bee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80a2bf2:	687b      	ldr	r3, [r7, #4]
 80a2bf4:	6a1b      	ldr	r3, [r3, #32]
 80a2bf6:	061b      	lsls	r3, r3, #24
 80a2bf8:	4962      	ldr	r1, [pc, #392]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2bfa:	4313      	orrs	r3, r2
 80a2bfc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80a2bfe:	e05f      	b.n	80a2cc0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80a2c00:	687b      	ldr	r3, [r7, #4]
 80a2c02:	69db      	ldr	r3, [r3, #28]
 80a2c04:	2b00      	cmp	r3, #0
 80a2c06:	d042      	beq.n	80a2c8e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80a2c08:	4b5e      	ldr	r3, [pc, #376]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2c0a:	681b      	ldr	r3, [r3, #0]
 80a2c0c:	4a5d      	ldr	r2, [pc, #372]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80a2c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a2c14:	f7fd ffd2 	bl	80a0bbc <HAL_GetTick>
 80a2c18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80a2c1a:	e008      	b.n	80a2c2e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80a2c1c:	f7fd ffce 	bl	80a0bbc <HAL_GetTick>
 80a2c20:	4602      	mov	r2, r0
 80a2c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2c24:	1ad3      	subs	r3, r2, r3
 80a2c26:	2b02      	cmp	r3, #2
 80a2c28:	d901      	bls.n	80a2c2e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80a2c2a:	2303      	movs	r3, #3
 80a2c2c:	e280      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80a2c2e:	4b55      	ldr	r3, [pc, #340]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2c30:	681b      	ldr	r3, [r3, #0]
 80a2c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a2c36:	2b00      	cmp	r3, #0
 80a2c38:	d0f0      	beq.n	80a2c1c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80a2c3a:	f7fd ffef 	bl	80a0c1c <HAL_GetREVID>
 80a2c3e:	4603      	mov	r3, r0
 80a2c40:	f241 0203 	movw	r2, #4099	@ 0x1003
 80a2c44:	4293      	cmp	r3, r2
 80a2c46:	d817      	bhi.n	80a2c78 <HAL_RCC_OscConfig+0x3ec>
 80a2c48:	687b      	ldr	r3, [r7, #4]
 80a2c4a:	6a1b      	ldr	r3, [r3, #32]
 80a2c4c:	2b20      	cmp	r3, #32
 80a2c4e:	d108      	bne.n	80a2c62 <HAL_RCC_OscConfig+0x3d6>
 80a2c50:	4b4c      	ldr	r3, [pc, #304]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2c52:	685b      	ldr	r3, [r3, #4]
 80a2c54:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80a2c58:	4a4a      	ldr	r2, [pc, #296]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2c5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80a2c5e:	6053      	str	r3, [r2, #4]
 80a2c60:	e02e      	b.n	80a2cc0 <HAL_RCC_OscConfig+0x434>
 80a2c62:	4b48      	ldr	r3, [pc, #288]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2c64:	685b      	ldr	r3, [r3, #4]
 80a2c66:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80a2c6a:	687b      	ldr	r3, [r7, #4]
 80a2c6c:	6a1b      	ldr	r3, [r3, #32]
 80a2c6e:	069b      	lsls	r3, r3, #26
 80a2c70:	4944      	ldr	r1, [pc, #272]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2c72:	4313      	orrs	r3, r2
 80a2c74:	604b      	str	r3, [r1, #4]
 80a2c76:	e023      	b.n	80a2cc0 <HAL_RCC_OscConfig+0x434>
 80a2c78:	4b42      	ldr	r3, [pc, #264]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2c7a:	68db      	ldr	r3, [r3, #12]
 80a2c7c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80a2c80:	687b      	ldr	r3, [r7, #4]
 80a2c82:	6a1b      	ldr	r3, [r3, #32]
 80a2c84:	061b      	lsls	r3, r3, #24
 80a2c86:	493f      	ldr	r1, [pc, #252]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2c88:	4313      	orrs	r3, r2
 80a2c8a:	60cb      	str	r3, [r1, #12]
 80a2c8c:	e018      	b.n	80a2cc0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80a2c8e:	4b3d      	ldr	r3, [pc, #244]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2c90:	681b      	ldr	r3, [r3, #0]
 80a2c92:	4a3c      	ldr	r2, [pc, #240]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2c94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80a2c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a2c9a:	f7fd ff8f 	bl	80a0bbc <HAL_GetTick>
 80a2c9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80a2ca0:	e008      	b.n	80a2cb4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80a2ca2:	f7fd ff8b 	bl	80a0bbc <HAL_GetTick>
 80a2ca6:	4602      	mov	r2, r0
 80a2ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2caa:	1ad3      	subs	r3, r2, r3
 80a2cac:	2b02      	cmp	r3, #2
 80a2cae:	d901      	bls.n	80a2cb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80a2cb0:	2303      	movs	r3, #3
 80a2cb2:	e23d      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80a2cb4:	4b33      	ldr	r3, [pc, #204]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2cb6:	681b      	ldr	r3, [r3, #0]
 80a2cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a2cbc:	2b00      	cmp	r3, #0
 80a2cbe:	d1f0      	bne.n	80a2ca2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80a2cc0:	687b      	ldr	r3, [r7, #4]
 80a2cc2:	681b      	ldr	r3, [r3, #0]
 80a2cc4:	f003 0308 	and.w	r3, r3, #8
 80a2cc8:	2b00      	cmp	r3, #0
 80a2cca:	d036      	beq.n	80a2d3a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80a2ccc:	687b      	ldr	r3, [r7, #4]
 80a2cce:	695b      	ldr	r3, [r3, #20]
 80a2cd0:	2b00      	cmp	r3, #0
 80a2cd2:	d019      	beq.n	80a2d08 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80a2cd4:	4b2b      	ldr	r3, [pc, #172]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2cd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80a2cd8:	4a2a      	ldr	r2, [pc, #168]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2cda:	f043 0301 	orr.w	r3, r3, #1
 80a2cde:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80a2ce0:	f7fd ff6c 	bl	80a0bbc <HAL_GetTick>
 80a2ce4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80a2ce6:	e008      	b.n	80a2cfa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80a2ce8:	f7fd ff68 	bl	80a0bbc <HAL_GetTick>
 80a2cec:	4602      	mov	r2, r0
 80a2cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2cf0:	1ad3      	subs	r3, r2, r3
 80a2cf2:	2b02      	cmp	r3, #2
 80a2cf4:	d901      	bls.n	80a2cfa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80a2cf6:	2303      	movs	r3, #3
 80a2cf8:	e21a      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80a2cfa:	4b22      	ldr	r3, [pc, #136]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80a2cfe:	f003 0302 	and.w	r3, r3, #2
 80a2d02:	2b00      	cmp	r3, #0
 80a2d04:	d0f0      	beq.n	80a2ce8 <HAL_RCC_OscConfig+0x45c>
 80a2d06:	e018      	b.n	80a2d3a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80a2d08:	4b1e      	ldr	r3, [pc, #120]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80a2d0c:	4a1d      	ldr	r2, [pc, #116]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2d0e:	f023 0301 	bic.w	r3, r3, #1
 80a2d12:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80a2d14:	f7fd ff52 	bl	80a0bbc <HAL_GetTick>
 80a2d18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80a2d1a:	e008      	b.n	80a2d2e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80a2d1c:	f7fd ff4e 	bl	80a0bbc <HAL_GetTick>
 80a2d20:	4602      	mov	r2, r0
 80a2d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2d24:	1ad3      	subs	r3, r2, r3
 80a2d26:	2b02      	cmp	r3, #2
 80a2d28:	d901      	bls.n	80a2d2e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80a2d2a:	2303      	movs	r3, #3
 80a2d2c:	e200      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80a2d2e:	4b15      	ldr	r3, [pc, #84]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80a2d32:	f003 0302 	and.w	r3, r3, #2
 80a2d36:	2b00      	cmp	r3, #0
 80a2d38:	d1f0      	bne.n	80a2d1c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80a2d3a:	687b      	ldr	r3, [r7, #4]
 80a2d3c:	681b      	ldr	r3, [r3, #0]
 80a2d3e:	f003 0320 	and.w	r3, r3, #32
 80a2d42:	2b00      	cmp	r3, #0
 80a2d44:	d039      	beq.n	80a2dba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80a2d46:	687b      	ldr	r3, [r7, #4]
 80a2d48:	699b      	ldr	r3, [r3, #24]
 80a2d4a:	2b00      	cmp	r3, #0
 80a2d4c:	d01c      	beq.n	80a2d88 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80a2d4e:	4b0d      	ldr	r3, [pc, #52]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2d50:	681b      	ldr	r3, [r3, #0]
 80a2d52:	4a0c      	ldr	r2, [pc, #48]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2d54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80a2d58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80a2d5a:	f7fd ff2f 	bl	80a0bbc <HAL_GetTick>
 80a2d5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80a2d60:	e008      	b.n	80a2d74 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80a2d62:	f7fd ff2b 	bl	80a0bbc <HAL_GetTick>
 80a2d66:	4602      	mov	r2, r0
 80a2d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2d6a:	1ad3      	subs	r3, r2, r3
 80a2d6c:	2b02      	cmp	r3, #2
 80a2d6e:	d901      	bls.n	80a2d74 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80a2d70:	2303      	movs	r3, #3
 80a2d72:	e1dd      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80a2d74:	4b03      	ldr	r3, [pc, #12]	@ (80a2d84 <HAL_RCC_OscConfig+0x4f8>)
 80a2d76:	681b      	ldr	r3, [r3, #0]
 80a2d78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80a2d7c:	2b00      	cmp	r3, #0
 80a2d7e:	d0f0      	beq.n	80a2d62 <HAL_RCC_OscConfig+0x4d6>
 80a2d80:	e01b      	b.n	80a2dba <HAL_RCC_OscConfig+0x52e>
 80a2d82:	bf00      	nop
 80a2d84:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80a2d88:	4b9b      	ldr	r3, [pc, #620]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2d8a:	681b      	ldr	r3, [r3, #0]
 80a2d8c:	4a9a      	ldr	r2, [pc, #616]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2d8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80a2d92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80a2d94:	f7fd ff12 	bl	80a0bbc <HAL_GetTick>
 80a2d98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80a2d9a:	e008      	b.n	80a2dae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80a2d9c:	f7fd ff0e 	bl	80a0bbc <HAL_GetTick>
 80a2da0:	4602      	mov	r2, r0
 80a2da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2da4:	1ad3      	subs	r3, r2, r3
 80a2da6:	2b02      	cmp	r3, #2
 80a2da8:	d901      	bls.n	80a2dae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80a2daa:	2303      	movs	r3, #3
 80a2dac:	e1c0      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80a2dae:	4b92      	ldr	r3, [pc, #584]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2db0:	681b      	ldr	r3, [r3, #0]
 80a2db2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80a2db6:	2b00      	cmp	r3, #0
 80a2db8:	d1f0      	bne.n	80a2d9c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80a2dba:	687b      	ldr	r3, [r7, #4]
 80a2dbc:	681b      	ldr	r3, [r3, #0]
 80a2dbe:	f003 0304 	and.w	r3, r3, #4
 80a2dc2:	2b00      	cmp	r3, #0
 80a2dc4:	f000 8081 	beq.w	80a2eca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80a2dc8:	4b8c      	ldr	r3, [pc, #560]	@ (80a2ffc <HAL_RCC_OscConfig+0x770>)
 80a2dca:	681b      	ldr	r3, [r3, #0]
 80a2dcc:	4a8b      	ldr	r2, [pc, #556]	@ (80a2ffc <HAL_RCC_OscConfig+0x770>)
 80a2dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80a2dd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80a2dd4:	f7fd fef2 	bl	80a0bbc <HAL_GetTick>
 80a2dd8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80a2dda:	e008      	b.n	80a2dee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80a2ddc:	f7fd feee 	bl	80a0bbc <HAL_GetTick>
 80a2de0:	4602      	mov	r2, r0
 80a2de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2de4:	1ad3      	subs	r3, r2, r3
 80a2de6:	2b64      	cmp	r3, #100	@ 0x64
 80a2de8:	d901      	bls.n	80a2dee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80a2dea:	2303      	movs	r3, #3
 80a2dec:	e1a0      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80a2dee:	4b83      	ldr	r3, [pc, #524]	@ (80a2ffc <HAL_RCC_OscConfig+0x770>)
 80a2df0:	681b      	ldr	r3, [r3, #0]
 80a2df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a2df6:	2b00      	cmp	r3, #0
 80a2df8:	d0f0      	beq.n	80a2ddc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80a2dfa:	687b      	ldr	r3, [r7, #4]
 80a2dfc:	689b      	ldr	r3, [r3, #8]
 80a2dfe:	2b01      	cmp	r3, #1
 80a2e00:	d106      	bne.n	80a2e10 <HAL_RCC_OscConfig+0x584>
 80a2e02:	4b7d      	ldr	r3, [pc, #500]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2e06:	4a7c      	ldr	r2, [pc, #496]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2e08:	f043 0301 	orr.w	r3, r3, #1
 80a2e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 80a2e0e:	e02d      	b.n	80a2e6c <HAL_RCC_OscConfig+0x5e0>
 80a2e10:	687b      	ldr	r3, [r7, #4]
 80a2e12:	689b      	ldr	r3, [r3, #8]
 80a2e14:	2b00      	cmp	r3, #0
 80a2e16:	d10c      	bne.n	80a2e32 <HAL_RCC_OscConfig+0x5a6>
 80a2e18:	4b77      	ldr	r3, [pc, #476]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2e1c:	4a76      	ldr	r2, [pc, #472]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2e1e:	f023 0301 	bic.w	r3, r3, #1
 80a2e22:	6713      	str	r3, [r2, #112]	@ 0x70
 80a2e24:	4b74      	ldr	r3, [pc, #464]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2e28:	4a73      	ldr	r2, [pc, #460]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2e2a:	f023 0304 	bic.w	r3, r3, #4
 80a2e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 80a2e30:	e01c      	b.n	80a2e6c <HAL_RCC_OscConfig+0x5e0>
 80a2e32:	687b      	ldr	r3, [r7, #4]
 80a2e34:	689b      	ldr	r3, [r3, #8]
 80a2e36:	2b05      	cmp	r3, #5
 80a2e38:	d10c      	bne.n	80a2e54 <HAL_RCC_OscConfig+0x5c8>
 80a2e3a:	4b6f      	ldr	r3, [pc, #444]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2e3e:	4a6e      	ldr	r2, [pc, #440]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2e40:	f043 0304 	orr.w	r3, r3, #4
 80a2e44:	6713      	str	r3, [r2, #112]	@ 0x70
 80a2e46:	4b6c      	ldr	r3, [pc, #432]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2e4a:	4a6b      	ldr	r2, [pc, #428]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2e4c:	f043 0301 	orr.w	r3, r3, #1
 80a2e50:	6713      	str	r3, [r2, #112]	@ 0x70
 80a2e52:	e00b      	b.n	80a2e6c <HAL_RCC_OscConfig+0x5e0>
 80a2e54:	4b68      	ldr	r3, [pc, #416]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2e58:	4a67      	ldr	r2, [pc, #412]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2e5a:	f023 0301 	bic.w	r3, r3, #1
 80a2e5e:	6713      	str	r3, [r2, #112]	@ 0x70
 80a2e60:	4b65      	ldr	r3, [pc, #404]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2e64:	4a64      	ldr	r2, [pc, #400]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2e66:	f023 0304 	bic.w	r3, r3, #4
 80a2e6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80a2e6c:	687b      	ldr	r3, [r7, #4]
 80a2e6e:	689b      	ldr	r3, [r3, #8]
 80a2e70:	2b00      	cmp	r3, #0
 80a2e72:	d015      	beq.n	80a2ea0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80a2e74:	f7fd fea2 	bl	80a0bbc <HAL_GetTick>
 80a2e78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80a2e7a:	e00a      	b.n	80a2e92 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80a2e7c:	f7fd fe9e 	bl	80a0bbc <HAL_GetTick>
 80a2e80:	4602      	mov	r2, r0
 80a2e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2e84:	1ad3      	subs	r3, r2, r3
 80a2e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 80a2e8a:	4293      	cmp	r3, r2
 80a2e8c:	d901      	bls.n	80a2e92 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80a2e8e:	2303      	movs	r3, #3
 80a2e90:	e14e      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80a2e92:	4b59      	ldr	r3, [pc, #356]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2e96:	f003 0302 	and.w	r3, r3, #2
 80a2e9a:	2b00      	cmp	r3, #0
 80a2e9c:	d0ee      	beq.n	80a2e7c <HAL_RCC_OscConfig+0x5f0>
 80a2e9e:	e014      	b.n	80a2eca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80a2ea0:	f7fd fe8c 	bl	80a0bbc <HAL_GetTick>
 80a2ea4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80a2ea6:	e00a      	b.n	80a2ebe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80a2ea8:	f7fd fe88 	bl	80a0bbc <HAL_GetTick>
 80a2eac:	4602      	mov	r2, r0
 80a2eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2eb0:	1ad3      	subs	r3, r2, r3
 80a2eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80a2eb6:	4293      	cmp	r3, r2
 80a2eb8:	d901      	bls.n	80a2ebe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80a2eba:	2303      	movs	r3, #3
 80a2ebc:	e138      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80a2ebe:	4b4e      	ldr	r3, [pc, #312]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2ec2:	f003 0302 	and.w	r3, r3, #2
 80a2ec6:	2b00      	cmp	r3, #0
 80a2ec8:	d1ee      	bne.n	80a2ea8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80a2eca:	687b      	ldr	r3, [r7, #4]
 80a2ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80a2ece:	2b00      	cmp	r3, #0
 80a2ed0:	f000 812d 	beq.w	80a312e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80a2ed4:	4b48      	ldr	r3, [pc, #288]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2ed6:	691b      	ldr	r3, [r3, #16]
 80a2ed8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80a2edc:	2b18      	cmp	r3, #24
 80a2ede:	f000 80bd 	beq.w	80a305c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80a2ee2:	687b      	ldr	r3, [r7, #4]
 80a2ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80a2ee6:	2b02      	cmp	r3, #2
 80a2ee8:	f040 809e 	bne.w	80a3028 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80a2eec:	4b42      	ldr	r3, [pc, #264]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2eee:	681b      	ldr	r3, [r3, #0]
 80a2ef0:	4a41      	ldr	r2, [pc, #260]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2ef2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80a2ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a2ef8:	f7fd fe60 	bl	80a0bbc <HAL_GetTick>
 80a2efc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80a2efe:	e008      	b.n	80a2f12 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80a2f00:	f7fd fe5c 	bl	80a0bbc <HAL_GetTick>
 80a2f04:	4602      	mov	r2, r0
 80a2f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2f08:	1ad3      	subs	r3, r2, r3
 80a2f0a:	2b02      	cmp	r3, #2
 80a2f0c:	d901      	bls.n	80a2f12 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80a2f0e:	2303      	movs	r3, #3
 80a2f10:	e10e      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80a2f12:	4b39      	ldr	r3, [pc, #228]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2f14:	681b      	ldr	r3, [r3, #0]
 80a2f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80a2f1a:	2b00      	cmp	r3, #0
 80a2f1c:	d1f0      	bne.n	80a2f00 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80a2f1e:	4b36      	ldr	r3, [pc, #216]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2f20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80a2f22:	4b37      	ldr	r3, [pc, #220]	@ (80a3000 <HAL_RCC_OscConfig+0x774>)
 80a2f24:	4013      	ands	r3, r2
 80a2f26:	687a      	ldr	r2, [r7, #4]
 80a2f28:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80a2f2a:	687a      	ldr	r2, [r7, #4]
 80a2f2c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80a2f2e:	0112      	lsls	r2, r2, #4
 80a2f30:	430a      	orrs	r2, r1
 80a2f32:	4931      	ldr	r1, [pc, #196]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2f34:	4313      	orrs	r3, r2
 80a2f36:	628b      	str	r3, [r1, #40]	@ 0x28
 80a2f38:	687b      	ldr	r3, [r7, #4]
 80a2f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a2f3c:	3b01      	subs	r3, #1
 80a2f3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80a2f42:	687b      	ldr	r3, [r7, #4]
 80a2f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80a2f46:	3b01      	subs	r3, #1
 80a2f48:	025b      	lsls	r3, r3, #9
 80a2f4a:	b29b      	uxth	r3, r3
 80a2f4c:	431a      	orrs	r2, r3
 80a2f4e:	687b      	ldr	r3, [r7, #4]
 80a2f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80a2f52:	3b01      	subs	r3, #1
 80a2f54:	041b      	lsls	r3, r3, #16
 80a2f56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80a2f5a:	431a      	orrs	r2, r3
 80a2f5c:	687b      	ldr	r3, [r7, #4]
 80a2f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80a2f60:	3b01      	subs	r3, #1
 80a2f62:	061b      	lsls	r3, r3, #24
 80a2f64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80a2f68:	4923      	ldr	r1, [pc, #140]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2f6a:	4313      	orrs	r3, r2
 80a2f6c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80a2f6e:	4b22      	ldr	r3, [pc, #136]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a2f72:	4a21      	ldr	r2, [pc, #132]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2f74:	f023 0301 	bic.w	r3, r3, #1
 80a2f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80a2f7a:	4b1f      	ldr	r3, [pc, #124]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2f7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80a2f7e:	4b21      	ldr	r3, [pc, #132]	@ (80a3004 <HAL_RCC_OscConfig+0x778>)
 80a2f80:	4013      	ands	r3, r2
 80a2f82:	687a      	ldr	r2, [r7, #4]
 80a2f84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80a2f86:	00d2      	lsls	r2, r2, #3
 80a2f88:	491b      	ldr	r1, [pc, #108]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2f8a:	4313      	orrs	r3, r2
 80a2f8c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80a2f8e:	4b1a      	ldr	r3, [pc, #104]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a2f92:	f023 020c 	bic.w	r2, r3, #12
 80a2f96:	687b      	ldr	r3, [r7, #4]
 80a2f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80a2f9a:	4917      	ldr	r1, [pc, #92]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2f9c:	4313      	orrs	r3, r2
 80a2f9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80a2fa0:	4b15      	ldr	r3, [pc, #84]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a2fa4:	f023 0202 	bic.w	r2, r3, #2
 80a2fa8:	687b      	ldr	r3, [r7, #4]
 80a2faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80a2fac:	4912      	ldr	r1, [pc, #72]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2fae:	4313      	orrs	r3, r2
 80a2fb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80a2fb2:	4b11      	ldr	r3, [pc, #68]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a2fb6:	4a10      	ldr	r2, [pc, #64]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80a2fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a2fbe:	4b0e      	ldr	r3, [pc, #56]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a2fc2:	4a0d      	ldr	r2, [pc, #52]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a2fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80a2fca:	4b0b      	ldr	r3, [pc, #44]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a2fce:	4a0a      	ldr	r2, [pc, #40]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2fd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80a2fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80a2fd6:	4b08      	ldr	r3, [pc, #32]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a2fda:	4a07      	ldr	r2, [pc, #28]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2fdc:	f043 0301 	orr.w	r3, r3, #1
 80a2fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80a2fe2:	4b05      	ldr	r3, [pc, #20]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2fe4:	681b      	ldr	r3, [r3, #0]
 80a2fe6:	4a04      	ldr	r2, [pc, #16]	@ (80a2ff8 <HAL_RCC_OscConfig+0x76c>)
 80a2fe8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80a2fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a2fee:	f7fd fde5 	bl	80a0bbc <HAL_GetTick>
 80a2ff2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80a2ff4:	e011      	b.n	80a301a <HAL_RCC_OscConfig+0x78e>
 80a2ff6:	bf00      	nop
 80a2ff8:	58024400 	.word	0x58024400
 80a2ffc:	58024800 	.word	0x58024800
 80a3000:	fffffc0c 	.word	0xfffffc0c
 80a3004:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80a3008:	f7fd fdd8 	bl	80a0bbc <HAL_GetTick>
 80a300c:	4602      	mov	r2, r0
 80a300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a3010:	1ad3      	subs	r3, r2, r3
 80a3012:	2b02      	cmp	r3, #2
 80a3014:	d901      	bls.n	80a301a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80a3016:	2303      	movs	r3, #3
 80a3018:	e08a      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80a301a:	4b47      	ldr	r3, [pc, #284]	@ (80a3138 <HAL_RCC_OscConfig+0x8ac>)
 80a301c:	681b      	ldr	r3, [r3, #0]
 80a301e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80a3022:	2b00      	cmp	r3, #0
 80a3024:	d0f0      	beq.n	80a3008 <HAL_RCC_OscConfig+0x77c>
 80a3026:	e082      	b.n	80a312e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80a3028:	4b43      	ldr	r3, [pc, #268]	@ (80a3138 <HAL_RCC_OscConfig+0x8ac>)
 80a302a:	681b      	ldr	r3, [r3, #0]
 80a302c:	4a42      	ldr	r2, [pc, #264]	@ (80a3138 <HAL_RCC_OscConfig+0x8ac>)
 80a302e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80a3032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a3034:	f7fd fdc2 	bl	80a0bbc <HAL_GetTick>
 80a3038:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80a303a:	e008      	b.n	80a304e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80a303c:	f7fd fdbe 	bl	80a0bbc <HAL_GetTick>
 80a3040:	4602      	mov	r2, r0
 80a3042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a3044:	1ad3      	subs	r3, r2, r3
 80a3046:	2b02      	cmp	r3, #2
 80a3048:	d901      	bls.n	80a304e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80a304a:	2303      	movs	r3, #3
 80a304c:	e070      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80a304e:	4b3a      	ldr	r3, [pc, #232]	@ (80a3138 <HAL_RCC_OscConfig+0x8ac>)
 80a3050:	681b      	ldr	r3, [r3, #0]
 80a3052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80a3056:	2b00      	cmp	r3, #0
 80a3058:	d1f0      	bne.n	80a303c <HAL_RCC_OscConfig+0x7b0>
 80a305a:	e068      	b.n	80a312e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80a305c:	4b36      	ldr	r3, [pc, #216]	@ (80a3138 <HAL_RCC_OscConfig+0x8ac>)
 80a305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a3060:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80a3062:	4b35      	ldr	r3, [pc, #212]	@ (80a3138 <HAL_RCC_OscConfig+0x8ac>)
 80a3064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a3066:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80a3068:	687b      	ldr	r3, [r7, #4]
 80a306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80a306c:	2b01      	cmp	r3, #1
 80a306e:	d031      	beq.n	80a30d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80a3070:	693b      	ldr	r3, [r7, #16]
 80a3072:	f003 0203 	and.w	r2, r3, #3
 80a3076:	687b      	ldr	r3, [r7, #4]
 80a3078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80a307a:	429a      	cmp	r2, r3
 80a307c:	d12a      	bne.n	80a30d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80a307e:	693b      	ldr	r3, [r7, #16]
 80a3080:	091b      	lsrs	r3, r3, #4
 80a3082:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80a3086:	687b      	ldr	r3, [r7, #4]
 80a3088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80a308a:	429a      	cmp	r2, r3
 80a308c:	d122      	bne.n	80a30d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80a308e:	68fb      	ldr	r3, [r7, #12]
 80a3090:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80a3094:	687b      	ldr	r3, [r7, #4]
 80a3096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a3098:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80a309a:	429a      	cmp	r2, r3
 80a309c:	d11a      	bne.n	80a30d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80a309e:	68fb      	ldr	r3, [r7, #12]
 80a30a0:	0a5b      	lsrs	r3, r3, #9
 80a30a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80a30a6:	687b      	ldr	r3, [r7, #4]
 80a30a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80a30aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80a30ac:	429a      	cmp	r2, r3
 80a30ae:	d111      	bne.n	80a30d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80a30b0:	68fb      	ldr	r3, [r7, #12]
 80a30b2:	0c1b      	lsrs	r3, r3, #16
 80a30b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80a30b8:	687b      	ldr	r3, [r7, #4]
 80a30ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80a30bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80a30be:	429a      	cmp	r2, r3
 80a30c0:	d108      	bne.n	80a30d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80a30c2:	68fb      	ldr	r3, [r7, #12]
 80a30c4:	0e1b      	lsrs	r3, r3, #24
 80a30c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80a30ca:	687b      	ldr	r3, [r7, #4]
 80a30cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80a30ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80a30d0:	429a      	cmp	r2, r3
 80a30d2:	d001      	beq.n	80a30d8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80a30d4:	2301      	movs	r3, #1
 80a30d6:	e02b      	b.n	80a3130 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80a30d8:	4b17      	ldr	r3, [pc, #92]	@ (80a3138 <HAL_RCC_OscConfig+0x8ac>)
 80a30da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80a30dc:	08db      	lsrs	r3, r3, #3
 80a30de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80a30e2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80a30e4:	687b      	ldr	r3, [r7, #4]
 80a30e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80a30e8:	693a      	ldr	r2, [r7, #16]
 80a30ea:	429a      	cmp	r2, r3
 80a30ec:	d01f      	beq.n	80a312e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80a30ee:	4b12      	ldr	r3, [pc, #72]	@ (80a3138 <HAL_RCC_OscConfig+0x8ac>)
 80a30f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a30f2:	4a11      	ldr	r2, [pc, #68]	@ (80a3138 <HAL_RCC_OscConfig+0x8ac>)
 80a30f4:	f023 0301 	bic.w	r3, r3, #1
 80a30f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80a30fa:	f7fd fd5f 	bl	80a0bbc <HAL_GetTick>
 80a30fe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80a3100:	bf00      	nop
 80a3102:	f7fd fd5b 	bl	80a0bbc <HAL_GetTick>
 80a3106:	4602      	mov	r2, r0
 80a3108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a310a:	4293      	cmp	r3, r2
 80a310c:	d0f9      	beq.n	80a3102 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80a310e:	4b0a      	ldr	r3, [pc, #40]	@ (80a3138 <HAL_RCC_OscConfig+0x8ac>)
 80a3110:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80a3112:	4b0a      	ldr	r3, [pc, #40]	@ (80a313c <HAL_RCC_OscConfig+0x8b0>)
 80a3114:	4013      	ands	r3, r2
 80a3116:	687a      	ldr	r2, [r7, #4]
 80a3118:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80a311a:	00d2      	lsls	r2, r2, #3
 80a311c:	4906      	ldr	r1, [pc, #24]	@ (80a3138 <HAL_RCC_OscConfig+0x8ac>)
 80a311e:	4313      	orrs	r3, r2
 80a3120:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80a3122:	4b05      	ldr	r3, [pc, #20]	@ (80a3138 <HAL_RCC_OscConfig+0x8ac>)
 80a3124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a3126:	4a04      	ldr	r2, [pc, #16]	@ (80a3138 <HAL_RCC_OscConfig+0x8ac>)
 80a3128:	f043 0301 	orr.w	r3, r3, #1
 80a312c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80a312e:	2300      	movs	r3, #0
}
 80a3130:	4618      	mov	r0, r3
 80a3132:	3730      	adds	r7, #48	@ 0x30
 80a3134:	46bd      	mov	sp, r7
 80a3136:	bd80      	pop	{r7, pc}
 80a3138:	58024400 	.word	0x58024400
 80a313c:	ffff0007 	.word	0xffff0007

080a3140 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80a3140:	b580      	push	{r7, lr}
 80a3142:	b086      	sub	sp, #24
 80a3144:	af00      	add	r7, sp, #0
 80a3146:	6078      	str	r0, [r7, #4]
 80a3148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80a314a:	687b      	ldr	r3, [r7, #4]
 80a314c:	2b00      	cmp	r3, #0
 80a314e:	d101      	bne.n	80a3154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80a3150:	2301      	movs	r3, #1
 80a3152:	e19c      	b.n	80a348e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80a3154:	4b8a      	ldr	r3, [pc, #552]	@ (80a3380 <HAL_RCC_ClockConfig+0x240>)
 80a3156:	681b      	ldr	r3, [r3, #0]
 80a3158:	f003 030f 	and.w	r3, r3, #15
 80a315c:	683a      	ldr	r2, [r7, #0]
 80a315e:	429a      	cmp	r2, r3
 80a3160:	d910      	bls.n	80a3184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80a3162:	4b87      	ldr	r3, [pc, #540]	@ (80a3380 <HAL_RCC_ClockConfig+0x240>)
 80a3164:	681b      	ldr	r3, [r3, #0]
 80a3166:	f023 020f 	bic.w	r2, r3, #15
 80a316a:	4985      	ldr	r1, [pc, #532]	@ (80a3380 <HAL_RCC_ClockConfig+0x240>)
 80a316c:	683b      	ldr	r3, [r7, #0]
 80a316e:	4313      	orrs	r3, r2
 80a3170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80a3172:	4b83      	ldr	r3, [pc, #524]	@ (80a3380 <HAL_RCC_ClockConfig+0x240>)
 80a3174:	681b      	ldr	r3, [r3, #0]
 80a3176:	f003 030f 	and.w	r3, r3, #15
 80a317a:	683a      	ldr	r2, [r7, #0]
 80a317c:	429a      	cmp	r2, r3
 80a317e:	d001      	beq.n	80a3184 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80a3180:	2301      	movs	r3, #1
 80a3182:	e184      	b.n	80a348e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80a3184:	687b      	ldr	r3, [r7, #4]
 80a3186:	681b      	ldr	r3, [r3, #0]
 80a3188:	f003 0304 	and.w	r3, r3, #4
 80a318c:	2b00      	cmp	r3, #0
 80a318e:	d010      	beq.n	80a31b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80a3190:	687b      	ldr	r3, [r7, #4]
 80a3192:	691a      	ldr	r2, [r3, #16]
 80a3194:	4b7b      	ldr	r3, [pc, #492]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a3196:	699b      	ldr	r3, [r3, #24]
 80a3198:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80a319c:	429a      	cmp	r2, r3
 80a319e:	d908      	bls.n	80a31b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80a31a0:	4b78      	ldr	r3, [pc, #480]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a31a2:	699b      	ldr	r3, [r3, #24]
 80a31a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80a31a8:	687b      	ldr	r3, [r7, #4]
 80a31aa:	691b      	ldr	r3, [r3, #16]
 80a31ac:	4975      	ldr	r1, [pc, #468]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a31ae:	4313      	orrs	r3, r2
 80a31b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80a31b2:	687b      	ldr	r3, [r7, #4]
 80a31b4:	681b      	ldr	r3, [r3, #0]
 80a31b6:	f003 0308 	and.w	r3, r3, #8
 80a31ba:	2b00      	cmp	r3, #0
 80a31bc:	d010      	beq.n	80a31e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80a31be:	687b      	ldr	r3, [r7, #4]
 80a31c0:	695a      	ldr	r2, [r3, #20]
 80a31c2:	4b70      	ldr	r3, [pc, #448]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a31c4:	69db      	ldr	r3, [r3, #28]
 80a31c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80a31ca:	429a      	cmp	r2, r3
 80a31cc:	d908      	bls.n	80a31e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80a31ce:	4b6d      	ldr	r3, [pc, #436]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a31d0:	69db      	ldr	r3, [r3, #28]
 80a31d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80a31d6:	687b      	ldr	r3, [r7, #4]
 80a31d8:	695b      	ldr	r3, [r3, #20]
 80a31da:	496a      	ldr	r1, [pc, #424]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a31dc:	4313      	orrs	r3, r2
 80a31de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80a31e0:	687b      	ldr	r3, [r7, #4]
 80a31e2:	681b      	ldr	r3, [r3, #0]
 80a31e4:	f003 0310 	and.w	r3, r3, #16
 80a31e8:	2b00      	cmp	r3, #0
 80a31ea:	d010      	beq.n	80a320e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80a31ec:	687b      	ldr	r3, [r7, #4]
 80a31ee:	699a      	ldr	r2, [r3, #24]
 80a31f0:	4b64      	ldr	r3, [pc, #400]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a31f2:	69db      	ldr	r3, [r3, #28]
 80a31f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80a31f8:	429a      	cmp	r2, r3
 80a31fa:	d908      	bls.n	80a320e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80a31fc:	4b61      	ldr	r3, [pc, #388]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a31fe:	69db      	ldr	r3, [r3, #28]
 80a3200:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80a3204:	687b      	ldr	r3, [r7, #4]
 80a3206:	699b      	ldr	r3, [r3, #24]
 80a3208:	495e      	ldr	r1, [pc, #376]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a320a:	4313      	orrs	r3, r2
 80a320c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80a320e:	687b      	ldr	r3, [r7, #4]
 80a3210:	681b      	ldr	r3, [r3, #0]
 80a3212:	f003 0320 	and.w	r3, r3, #32
 80a3216:	2b00      	cmp	r3, #0
 80a3218:	d010      	beq.n	80a323c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80a321a:	687b      	ldr	r3, [r7, #4]
 80a321c:	69da      	ldr	r2, [r3, #28]
 80a321e:	4b59      	ldr	r3, [pc, #356]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a3220:	6a1b      	ldr	r3, [r3, #32]
 80a3222:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80a3226:	429a      	cmp	r2, r3
 80a3228:	d908      	bls.n	80a323c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80a322a:	4b56      	ldr	r3, [pc, #344]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a322c:	6a1b      	ldr	r3, [r3, #32]
 80a322e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80a3232:	687b      	ldr	r3, [r7, #4]
 80a3234:	69db      	ldr	r3, [r3, #28]
 80a3236:	4953      	ldr	r1, [pc, #332]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a3238:	4313      	orrs	r3, r2
 80a323a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80a323c:	687b      	ldr	r3, [r7, #4]
 80a323e:	681b      	ldr	r3, [r3, #0]
 80a3240:	f003 0302 	and.w	r3, r3, #2
 80a3244:	2b00      	cmp	r3, #0
 80a3246:	d010      	beq.n	80a326a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80a3248:	687b      	ldr	r3, [r7, #4]
 80a324a:	68da      	ldr	r2, [r3, #12]
 80a324c:	4b4d      	ldr	r3, [pc, #308]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a324e:	699b      	ldr	r3, [r3, #24]
 80a3250:	f003 030f 	and.w	r3, r3, #15
 80a3254:	429a      	cmp	r2, r3
 80a3256:	d908      	bls.n	80a326a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80a3258:	4b4a      	ldr	r3, [pc, #296]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a325a:	699b      	ldr	r3, [r3, #24]
 80a325c:	f023 020f 	bic.w	r2, r3, #15
 80a3260:	687b      	ldr	r3, [r7, #4]
 80a3262:	68db      	ldr	r3, [r3, #12]
 80a3264:	4947      	ldr	r1, [pc, #284]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a3266:	4313      	orrs	r3, r2
 80a3268:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80a326a:	687b      	ldr	r3, [r7, #4]
 80a326c:	681b      	ldr	r3, [r3, #0]
 80a326e:	f003 0301 	and.w	r3, r3, #1
 80a3272:	2b00      	cmp	r3, #0
 80a3274:	d055      	beq.n	80a3322 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80a3276:	4b43      	ldr	r3, [pc, #268]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a3278:	699b      	ldr	r3, [r3, #24]
 80a327a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80a327e:	687b      	ldr	r3, [r7, #4]
 80a3280:	689b      	ldr	r3, [r3, #8]
 80a3282:	4940      	ldr	r1, [pc, #256]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a3284:	4313      	orrs	r3, r2
 80a3286:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80a3288:	687b      	ldr	r3, [r7, #4]
 80a328a:	685b      	ldr	r3, [r3, #4]
 80a328c:	2b02      	cmp	r3, #2
 80a328e:	d107      	bne.n	80a32a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80a3290:	4b3c      	ldr	r3, [pc, #240]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a3292:	681b      	ldr	r3, [r3, #0]
 80a3294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80a3298:	2b00      	cmp	r3, #0
 80a329a:	d121      	bne.n	80a32e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80a329c:	2301      	movs	r3, #1
 80a329e:	e0f6      	b.n	80a348e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80a32a0:	687b      	ldr	r3, [r7, #4]
 80a32a2:	685b      	ldr	r3, [r3, #4]
 80a32a4:	2b03      	cmp	r3, #3
 80a32a6:	d107      	bne.n	80a32b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80a32a8:	4b36      	ldr	r3, [pc, #216]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a32aa:	681b      	ldr	r3, [r3, #0]
 80a32ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80a32b0:	2b00      	cmp	r3, #0
 80a32b2:	d115      	bne.n	80a32e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80a32b4:	2301      	movs	r3, #1
 80a32b6:	e0ea      	b.n	80a348e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80a32b8:	687b      	ldr	r3, [r7, #4]
 80a32ba:	685b      	ldr	r3, [r3, #4]
 80a32bc:	2b01      	cmp	r3, #1
 80a32be:	d107      	bne.n	80a32d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80a32c0:	4b30      	ldr	r3, [pc, #192]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a32c2:	681b      	ldr	r3, [r3, #0]
 80a32c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a32c8:	2b00      	cmp	r3, #0
 80a32ca:	d109      	bne.n	80a32e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80a32cc:	2301      	movs	r3, #1
 80a32ce:	e0de      	b.n	80a348e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80a32d0:	4b2c      	ldr	r3, [pc, #176]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a32d2:	681b      	ldr	r3, [r3, #0]
 80a32d4:	f003 0304 	and.w	r3, r3, #4
 80a32d8:	2b00      	cmp	r3, #0
 80a32da:	d101      	bne.n	80a32e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80a32dc:	2301      	movs	r3, #1
 80a32de:	e0d6      	b.n	80a348e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80a32e0:	4b28      	ldr	r3, [pc, #160]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a32e2:	691b      	ldr	r3, [r3, #16]
 80a32e4:	f023 0207 	bic.w	r2, r3, #7
 80a32e8:	687b      	ldr	r3, [r7, #4]
 80a32ea:	685b      	ldr	r3, [r3, #4]
 80a32ec:	4925      	ldr	r1, [pc, #148]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a32ee:	4313      	orrs	r3, r2
 80a32f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80a32f2:	f7fd fc63 	bl	80a0bbc <HAL_GetTick>
 80a32f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80a32f8:	e00a      	b.n	80a3310 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80a32fa:	f7fd fc5f 	bl	80a0bbc <HAL_GetTick>
 80a32fe:	4602      	mov	r2, r0
 80a3300:	697b      	ldr	r3, [r7, #20]
 80a3302:	1ad3      	subs	r3, r2, r3
 80a3304:	f241 3288 	movw	r2, #5000	@ 0x1388
 80a3308:	4293      	cmp	r3, r2
 80a330a:	d901      	bls.n	80a3310 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80a330c:	2303      	movs	r3, #3
 80a330e:	e0be      	b.n	80a348e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80a3310:	4b1c      	ldr	r3, [pc, #112]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a3312:	691b      	ldr	r3, [r3, #16]
 80a3314:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80a3318:	687b      	ldr	r3, [r7, #4]
 80a331a:	685b      	ldr	r3, [r3, #4]
 80a331c:	00db      	lsls	r3, r3, #3
 80a331e:	429a      	cmp	r2, r3
 80a3320:	d1eb      	bne.n	80a32fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80a3322:	687b      	ldr	r3, [r7, #4]
 80a3324:	681b      	ldr	r3, [r3, #0]
 80a3326:	f003 0302 	and.w	r3, r3, #2
 80a332a:	2b00      	cmp	r3, #0
 80a332c:	d010      	beq.n	80a3350 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80a332e:	687b      	ldr	r3, [r7, #4]
 80a3330:	68da      	ldr	r2, [r3, #12]
 80a3332:	4b14      	ldr	r3, [pc, #80]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a3334:	699b      	ldr	r3, [r3, #24]
 80a3336:	f003 030f 	and.w	r3, r3, #15
 80a333a:	429a      	cmp	r2, r3
 80a333c:	d208      	bcs.n	80a3350 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80a333e:	4b11      	ldr	r3, [pc, #68]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a3340:	699b      	ldr	r3, [r3, #24]
 80a3342:	f023 020f 	bic.w	r2, r3, #15
 80a3346:	687b      	ldr	r3, [r7, #4]
 80a3348:	68db      	ldr	r3, [r3, #12]
 80a334a:	490e      	ldr	r1, [pc, #56]	@ (80a3384 <HAL_RCC_ClockConfig+0x244>)
 80a334c:	4313      	orrs	r3, r2
 80a334e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80a3350:	4b0b      	ldr	r3, [pc, #44]	@ (80a3380 <HAL_RCC_ClockConfig+0x240>)
 80a3352:	681b      	ldr	r3, [r3, #0]
 80a3354:	f003 030f 	and.w	r3, r3, #15
 80a3358:	683a      	ldr	r2, [r7, #0]
 80a335a:	429a      	cmp	r2, r3
 80a335c:	d214      	bcs.n	80a3388 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80a335e:	4b08      	ldr	r3, [pc, #32]	@ (80a3380 <HAL_RCC_ClockConfig+0x240>)
 80a3360:	681b      	ldr	r3, [r3, #0]
 80a3362:	f023 020f 	bic.w	r2, r3, #15
 80a3366:	4906      	ldr	r1, [pc, #24]	@ (80a3380 <HAL_RCC_ClockConfig+0x240>)
 80a3368:	683b      	ldr	r3, [r7, #0]
 80a336a:	4313      	orrs	r3, r2
 80a336c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80a336e:	4b04      	ldr	r3, [pc, #16]	@ (80a3380 <HAL_RCC_ClockConfig+0x240>)
 80a3370:	681b      	ldr	r3, [r3, #0]
 80a3372:	f003 030f 	and.w	r3, r3, #15
 80a3376:	683a      	ldr	r2, [r7, #0]
 80a3378:	429a      	cmp	r2, r3
 80a337a:	d005      	beq.n	80a3388 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80a337c:	2301      	movs	r3, #1
 80a337e:	e086      	b.n	80a348e <HAL_RCC_ClockConfig+0x34e>
 80a3380:	52002000 	.word	0x52002000
 80a3384:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80a3388:	687b      	ldr	r3, [r7, #4]
 80a338a:	681b      	ldr	r3, [r3, #0]
 80a338c:	f003 0304 	and.w	r3, r3, #4
 80a3390:	2b00      	cmp	r3, #0
 80a3392:	d010      	beq.n	80a33b6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80a3394:	687b      	ldr	r3, [r7, #4]
 80a3396:	691a      	ldr	r2, [r3, #16]
 80a3398:	4b3f      	ldr	r3, [pc, #252]	@ (80a3498 <HAL_RCC_ClockConfig+0x358>)
 80a339a:	699b      	ldr	r3, [r3, #24]
 80a339c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80a33a0:	429a      	cmp	r2, r3
 80a33a2:	d208      	bcs.n	80a33b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80a33a4:	4b3c      	ldr	r3, [pc, #240]	@ (80a3498 <HAL_RCC_ClockConfig+0x358>)
 80a33a6:	699b      	ldr	r3, [r3, #24]
 80a33a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80a33ac:	687b      	ldr	r3, [r7, #4]
 80a33ae:	691b      	ldr	r3, [r3, #16]
 80a33b0:	4939      	ldr	r1, [pc, #228]	@ (80a3498 <HAL_RCC_ClockConfig+0x358>)
 80a33b2:	4313      	orrs	r3, r2
 80a33b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80a33b6:	687b      	ldr	r3, [r7, #4]
 80a33b8:	681b      	ldr	r3, [r3, #0]
 80a33ba:	f003 0308 	and.w	r3, r3, #8
 80a33be:	2b00      	cmp	r3, #0
 80a33c0:	d010      	beq.n	80a33e4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80a33c2:	687b      	ldr	r3, [r7, #4]
 80a33c4:	695a      	ldr	r2, [r3, #20]
 80a33c6:	4b34      	ldr	r3, [pc, #208]	@ (80a3498 <HAL_RCC_ClockConfig+0x358>)
 80a33c8:	69db      	ldr	r3, [r3, #28]
 80a33ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80a33ce:	429a      	cmp	r2, r3
 80a33d0:	d208      	bcs.n	80a33e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80a33d2:	4b31      	ldr	r3, [pc, #196]	@ (80a3498 <HAL_RCC_ClockConfig+0x358>)
 80a33d4:	69db      	ldr	r3, [r3, #28]
 80a33d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80a33da:	687b      	ldr	r3, [r7, #4]
 80a33dc:	695b      	ldr	r3, [r3, #20]
 80a33de:	492e      	ldr	r1, [pc, #184]	@ (80a3498 <HAL_RCC_ClockConfig+0x358>)
 80a33e0:	4313      	orrs	r3, r2
 80a33e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80a33e4:	687b      	ldr	r3, [r7, #4]
 80a33e6:	681b      	ldr	r3, [r3, #0]
 80a33e8:	f003 0310 	and.w	r3, r3, #16
 80a33ec:	2b00      	cmp	r3, #0
 80a33ee:	d010      	beq.n	80a3412 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80a33f0:	687b      	ldr	r3, [r7, #4]
 80a33f2:	699a      	ldr	r2, [r3, #24]
 80a33f4:	4b28      	ldr	r3, [pc, #160]	@ (80a3498 <HAL_RCC_ClockConfig+0x358>)
 80a33f6:	69db      	ldr	r3, [r3, #28]
 80a33f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80a33fc:	429a      	cmp	r2, r3
 80a33fe:	d208      	bcs.n	80a3412 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80a3400:	4b25      	ldr	r3, [pc, #148]	@ (80a3498 <HAL_RCC_ClockConfig+0x358>)
 80a3402:	69db      	ldr	r3, [r3, #28]
 80a3404:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80a3408:	687b      	ldr	r3, [r7, #4]
 80a340a:	699b      	ldr	r3, [r3, #24]
 80a340c:	4922      	ldr	r1, [pc, #136]	@ (80a3498 <HAL_RCC_ClockConfig+0x358>)
 80a340e:	4313      	orrs	r3, r2
 80a3410:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80a3412:	687b      	ldr	r3, [r7, #4]
 80a3414:	681b      	ldr	r3, [r3, #0]
 80a3416:	f003 0320 	and.w	r3, r3, #32
 80a341a:	2b00      	cmp	r3, #0
 80a341c:	d010      	beq.n	80a3440 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80a341e:	687b      	ldr	r3, [r7, #4]
 80a3420:	69da      	ldr	r2, [r3, #28]
 80a3422:	4b1d      	ldr	r3, [pc, #116]	@ (80a3498 <HAL_RCC_ClockConfig+0x358>)
 80a3424:	6a1b      	ldr	r3, [r3, #32]
 80a3426:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80a342a:	429a      	cmp	r2, r3
 80a342c:	d208      	bcs.n	80a3440 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80a342e:	4b1a      	ldr	r3, [pc, #104]	@ (80a3498 <HAL_RCC_ClockConfig+0x358>)
 80a3430:	6a1b      	ldr	r3, [r3, #32]
 80a3432:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80a3436:	687b      	ldr	r3, [r7, #4]
 80a3438:	69db      	ldr	r3, [r3, #28]
 80a343a:	4917      	ldr	r1, [pc, #92]	@ (80a3498 <HAL_RCC_ClockConfig+0x358>)
 80a343c:	4313      	orrs	r3, r2
 80a343e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80a3440:	f000 f89e 	bl	80a3580 <HAL_RCC_GetSysClockFreq>
 80a3444:	4602      	mov	r2, r0
 80a3446:	4b14      	ldr	r3, [pc, #80]	@ (80a3498 <HAL_RCC_ClockConfig+0x358>)
 80a3448:	699b      	ldr	r3, [r3, #24]
 80a344a:	0a1b      	lsrs	r3, r3, #8
 80a344c:	f003 030f 	and.w	r3, r3, #15
 80a3450:	4912      	ldr	r1, [pc, #72]	@ (80a349c <HAL_RCC_ClockConfig+0x35c>)
 80a3452:	5ccb      	ldrb	r3, [r1, r3]
 80a3454:	f003 031f 	and.w	r3, r3, #31
 80a3458:	fa22 f303 	lsr.w	r3, r2, r3
 80a345c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80a345e:	4b0e      	ldr	r3, [pc, #56]	@ (80a3498 <HAL_RCC_ClockConfig+0x358>)
 80a3460:	699b      	ldr	r3, [r3, #24]
 80a3462:	f003 030f 	and.w	r3, r3, #15
 80a3466:	4a0d      	ldr	r2, [pc, #52]	@ (80a349c <HAL_RCC_ClockConfig+0x35c>)
 80a3468:	5cd3      	ldrb	r3, [r2, r3]
 80a346a:	f003 031f 	and.w	r3, r3, #31
 80a346e:	693a      	ldr	r2, [r7, #16]
 80a3470:	fa22 f303 	lsr.w	r3, r2, r3
 80a3474:	4a0a      	ldr	r2, [pc, #40]	@ (80a34a0 <HAL_RCC_ClockConfig+0x360>)
 80a3476:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80a3478:	4a0a      	ldr	r2, [pc, #40]	@ (80a34a4 <HAL_RCC_ClockConfig+0x364>)
 80a347a:	693b      	ldr	r3, [r7, #16]
 80a347c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80a347e:	4b0a      	ldr	r3, [pc, #40]	@ (80a34a8 <HAL_RCC_ClockConfig+0x368>)
 80a3480:	681b      	ldr	r3, [r3, #0]
 80a3482:	4618      	mov	r0, r3
 80a3484:	f7fd fb50 	bl	80a0b28 <HAL_InitTick>
 80a3488:	4603      	mov	r3, r0
 80a348a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80a348c:	7bfb      	ldrb	r3, [r7, #15]
}
 80a348e:	4618      	mov	r0, r3
 80a3490:	3718      	adds	r7, #24
 80a3492:	46bd      	mov	sp, r7
 80a3494:	bd80      	pop	{r7, pc}
 80a3496:	bf00      	nop
 80a3498:	58024400 	.word	0x58024400
 80a349c:	080aa0e4 	.word	0x080aa0e4
 80a34a0:	24000004 	.word	0x24000004
 80a34a4:	24000000 	.word	0x24000000
 80a34a8:	24000008 	.word	0x24000008

080a34ac <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80a34ac:	b580      	push	{r7, lr}
 80a34ae:	b08c      	sub	sp, #48	@ 0x30
 80a34b0:	af00      	add	r7, sp, #0
 80a34b2:	60f8      	str	r0, [r7, #12]
 80a34b4:	60b9      	str	r1, [r7, #8]
 80a34b6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80a34b8:	68fb      	ldr	r3, [r7, #12]
 80a34ba:	2b00      	cmp	r3, #0
 80a34bc:	d12a      	bne.n	80a3514 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80a34be:	4b2d      	ldr	r3, [pc, #180]	@ (80a3574 <HAL_RCC_MCOConfig+0xc8>)
 80a34c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a34c4:	4a2b      	ldr	r2, [pc, #172]	@ (80a3574 <HAL_RCC_MCOConfig+0xc8>)
 80a34c6:	f043 0301 	orr.w	r3, r3, #1
 80a34ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a34ce:	4b29      	ldr	r3, [pc, #164]	@ (80a3574 <HAL_RCC_MCOConfig+0xc8>)
 80a34d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a34d4:	f003 0301 	and.w	r3, r3, #1
 80a34d8:	61bb      	str	r3, [r7, #24]
 80a34da:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80a34dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80a34e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a34e2:	2302      	movs	r3, #2
 80a34e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80a34e6:	2303      	movs	r3, #3
 80a34e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a34ea:	2300      	movs	r3, #0
 80a34ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80a34ee:	2300      	movs	r3, #0
 80a34f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80a34f2:	f107 031c 	add.w	r3, r7, #28
 80a34f6:	4619      	mov	r1, r3
 80a34f8:	481f      	ldr	r0, [pc, #124]	@ (80a3578 <HAL_RCC_MCOConfig+0xcc>)
 80a34fa:	f7fd fcab 	bl	80a0e54 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80a34fe:	4b1d      	ldr	r3, [pc, #116]	@ (80a3574 <HAL_RCC_MCOConfig+0xc8>)
 80a3500:	691b      	ldr	r3, [r3, #16]
 80a3502:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 80a3506:	68b9      	ldr	r1, [r7, #8]
 80a3508:	687b      	ldr	r3, [r7, #4]
 80a350a:	430b      	orrs	r3, r1
 80a350c:	4919      	ldr	r1, [pc, #100]	@ (80a3574 <HAL_RCC_MCOConfig+0xc8>)
 80a350e:	4313      	orrs	r3, r2
 80a3510:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80a3512:	e02a      	b.n	80a356a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80a3514:	4b17      	ldr	r3, [pc, #92]	@ (80a3574 <HAL_RCC_MCOConfig+0xc8>)
 80a3516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a351a:	4a16      	ldr	r2, [pc, #88]	@ (80a3574 <HAL_RCC_MCOConfig+0xc8>)
 80a351c:	f043 0304 	orr.w	r3, r3, #4
 80a3520:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a3524:	4b13      	ldr	r3, [pc, #76]	@ (80a3574 <HAL_RCC_MCOConfig+0xc8>)
 80a3526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a352a:	f003 0304 	and.w	r3, r3, #4
 80a352e:	617b      	str	r3, [r7, #20]
 80a3530:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80a3532:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80a3536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a3538:	2302      	movs	r3, #2
 80a353a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80a353c:	2303      	movs	r3, #3
 80a353e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a3540:	2300      	movs	r3, #0
 80a3542:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80a3544:	2300      	movs	r3, #0
 80a3546:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80a3548:	f107 031c 	add.w	r3, r7, #28
 80a354c:	4619      	mov	r1, r3
 80a354e:	480b      	ldr	r0, [pc, #44]	@ (80a357c <HAL_RCC_MCOConfig+0xd0>)
 80a3550:	f7fd fc80 	bl	80a0e54 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80a3554:	4b07      	ldr	r3, [pc, #28]	@ (80a3574 <HAL_RCC_MCOConfig+0xc8>)
 80a3556:	691b      	ldr	r3, [r3, #16]
 80a3558:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80a355c:	687b      	ldr	r3, [r7, #4]
 80a355e:	01d9      	lsls	r1, r3, #7
 80a3560:	68bb      	ldr	r3, [r7, #8]
 80a3562:	430b      	orrs	r3, r1
 80a3564:	4903      	ldr	r1, [pc, #12]	@ (80a3574 <HAL_RCC_MCOConfig+0xc8>)
 80a3566:	4313      	orrs	r3, r2
 80a3568:	610b      	str	r3, [r1, #16]
}
 80a356a:	bf00      	nop
 80a356c:	3730      	adds	r7, #48	@ 0x30
 80a356e:	46bd      	mov	sp, r7
 80a3570:	bd80      	pop	{r7, pc}
 80a3572:	bf00      	nop
 80a3574:	58024400 	.word	0x58024400
 80a3578:	58020000 	.word	0x58020000
 80a357c:	58020800 	.word	0x58020800

080a3580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80a3580:	b480      	push	{r7}
 80a3582:	b089      	sub	sp, #36	@ 0x24
 80a3584:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80a3586:	4bb3      	ldr	r3, [pc, #716]	@ (80a3854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a3588:	691b      	ldr	r3, [r3, #16]
 80a358a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80a358e:	2b18      	cmp	r3, #24
 80a3590:	f200 8155 	bhi.w	80a383e <HAL_RCC_GetSysClockFreq+0x2be>
 80a3594:	a201      	add	r2, pc, #4	@ (adr r2, 80a359c <HAL_RCC_GetSysClockFreq+0x1c>)
 80a3596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a359a:	bf00      	nop
 80a359c:	080a3601 	.word	0x080a3601
 80a35a0:	080a383f 	.word	0x080a383f
 80a35a4:	080a383f 	.word	0x080a383f
 80a35a8:	080a383f 	.word	0x080a383f
 80a35ac:	080a383f 	.word	0x080a383f
 80a35b0:	080a383f 	.word	0x080a383f
 80a35b4:	080a383f 	.word	0x080a383f
 80a35b8:	080a383f 	.word	0x080a383f
 80a35bc:	080a3627 	.word	0x080a3627
 80a35c0:	080a383f 	.word	0x080a383f
 80a35c4:	080a383f 	.word	0x080a383f
 80a35c8:	080a383f 	.word	0x080a383f
 80a35cc:	080a383f 	.word	0x080a383f
 80a35d0:	080a383f 	.word	0x080a383f
 80a35d4:	080a383f 	.word	0x080a383f
 80a35d8:	080a383f 	.word	0x080a383f
 80a35dc:	080a362d 	.word	0x080a362d
 80a35e0:	080a383f 	.word	0x080a383f
 80a35e4:	080a383f 	.word	0x080a383f
 80a35e8:	080a383f 	.word	0x080a383f
 80a35ec:	080a383f 	.word	0x080a383f
 80a35f0:	080a383f 	.word	0x080a383f
 80a35f4:	080a383f 	.word	0x080a383f
 80a35f8:	080a383f 	.word	0x080a383f
 80a35fc:	080a3633 	.word	0x080a3633
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80a3600:	4b94      	ldr	r3, [pc, #592]	@ (80a3854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a3602:	681b      	ldr	r3, [r3, #0]
 80a3604:	f003 0320 	and.w	r3, r3, #32
 80a3608:	2b00      	cmp	r3, #0
 80a360a:	d009      	beq.n	80a3620 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80a360c:	4b91      	ldr	r3, [pc, #580]	@ (80a3854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a360e:	681b      	ldr	r3, [r3, #0]
 80a3610:	08db      	lsrs	r3, r3, #3
 80a3612:	f003 0303 	and.w	r3, r3, #3
 80a3616:	4a90      	ldr	r2, [pc, #576]	@ (80a3858 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80a3618:	fa22 f303 	lsr.w	r3, r2, r3
 80a361c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80a361e:	e111      	b.n	80a3844 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80a3620:	4b8d      	ldr	r3, [pc, #564]	@ (80a3858 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80a3622:	61bb      	str	r3, [r7, #24]
      break;
 80a3624:	e10e      	b.n	80a3844 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80a3626:	4b8d      	ldr	r3, [pc, #564]	@ (80a385c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80a3628:	61bb      	str	r3, [r7, #24]
      break;
 80a362a:	e10b      	b.n	80a3844 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80a362c:	4b8c      	ldr	r3, [pc, #560]	@ (80a3860 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80a362e:	61bb      	str	r3, [r7, #24]
      break;
 80a3630:	e108      	b.n	80a3844 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80a3632:	4b88      	ldr	r3, [pc, #544]	@ (80a3854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a3634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a3636:	f003 0303 	and.w	r3, r3, #3
 80a363a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80a363c:	4b85      	ldr	r3, [pc, #532]	@ (80a3854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a363e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a3640:	091b      	lsrs	r3, r3, #4
 80a3642:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80a3646:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80a3648:	4b82      	ldr	r3, [pc, #520]	@ (80a3854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a364c:	f003 0301 	and.w	r3, r3, #1
 80a3650:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80a3652:	4b80      	ldr	r3, [pc, #512]	@ (80a3854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a3654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80a3656:	08db      	lsrs	r3, r3, #3
 80a3658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80a365c:	68fa      	ldr	r2, [r7, #12]
 80a365e:	fb02 f303 	mul.w	r3, r2, r3
 80a3662:	ee07 3a90 	vmov	s15, r3
 80a3666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a366a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80a366e:	693b      	ldr	r3, [r7, #16]
 80a3670:	2b00      	cmp	r3, #0
 80a3672:	f000 80e1 	beq.w	80a3838 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80a3676:	697b      	ldr	r3, [r7, #20]
 80a3678:	2b02      	cmp	r3, #2
 80a367a:	f000 8083 	beq.w	80a3784 <HAL_RCC_GetSysClockFreq+0x204>
 80a367e:	697b      	ldr	r3, [r7, #20]
 80a3680:	2b02      	cmp	r3, #2
 80a3682:	f200 80a1 	bhi.w	80a37c8 <HAL_RCC_GetSysClockFreq+0x248>
 80a3686:	697b      	ldr	r3, [r7, #20]
 80a3688:	2b00      	cmp	r3, #0
 80a368a:	d003      	beq.n	80a3694 <HAL_RCC_GetSysClockFreq+0x114>
 80a368c:	697b      	ldr	r3, [r7, #20]
 80a368e:	2b01      	cmp	r3, #1
 80a3690:	d056      	beq.n	80a3740 <HAL_RCC_GetSysClockFreq+0x1c0>
 80a3692:	e099      	b.n	80a37c8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80a3694:	4b6f      	ldr	r3, [pc, #444]	@ (80a3854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a3696:	681b      	ldr	r3, [r3, #0]
 80a3698:	f003 0320 	and.w	r3, r3, #32
 80a369c:	2b00      	cmp	r3, #0
 80a369e:	d02d      	beq.n	80a36fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80a36a0:	4b6c      	ldr	r3, [pc, #432]	@ (80a3854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a36a2:	681b      	ldr	r3, [r3, #0]
 80a36a4:	08db      	lsrs	r3, r3, #3
 80a36a6:	f003 0303 	and.w	r3, r3, #3
 80a36aa:	4a6b      	ldr	r2, [pc, #428]	@ (80a3858 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80a36ac:	fa22 f303 	lsr.w	r3, r2, r3
 80a36b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80a36b2:	687b      	ldr	r3, [r7, #4]
 80a36b4:	ee07 3a90 	vmov	s15, r3
 80a36b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80a36bc:	693b      	ldr	r3, [r7, #16]
 80a36be:	ee07 3a90 	vmov	s15, r3
 80a36c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a36c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80a36ca:	4b62      	ldr	r3, [pc, #392]	@ (80a3854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a36cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a36ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a36d2:	ee07 3a90 	vmov	s15, r3
 80a36d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80a36da:	ed97 6a02 	vldr	s12, [r7, #8]
 80a36de:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80a3864 <HAL_RCC_GetSysClockFreq+0x2e4>
 80a36e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80a36e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80a36ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80a36ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80a36f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a36f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80a36fa:	e087      	b.n	80a380c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80a36fc:	693b      	ldr	r3, [r7, #16]
 80a36fe:	ee07 3a90 	vmov	s15, r3
 80a3702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a3706:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80a3868 <HAL_RCC_GetSysClockFreq+0x2e8>
 80a370a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80a370e:	4b51      	ldr	r3, [pc, #324]	@ (80a3854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a3710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a3712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a3716:	ee07 3a90 	vmov	s15, r3
 80a371a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80a371e:	ed97 6a02 	vldr	s12, [r7, #8]
 80a3722:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80a3864 <HAL_RCC_GetSysClockFreq+0x2e4>
 80a3726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80a372a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80a372e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80a3732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80a3736:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a373a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80a373e:	e065      	b.n	80a380c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80a3740:	693b      	ldr	r3, [r7, #16]
 80a3742:	ee07 3a90 	vmov	s15, r3
 80a3746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a374a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80a386c <HAL_RCC_GetSysClockFreq+0x2ec>
 80a374e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80a3752:	4b40      	ldr	r3, [pc, #256]	@ (80a3854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a3754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a3756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a375a:	ee07 3a90 	vmov	s15, r3
 80a375e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80a3762:	ed97 6a02 	vldr	s12, [r7, #8]
 80a3766:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80a3864 <HAL_RCC_GetSysClockFreq+0x2e4>
 80a376a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80a376e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80a3772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80a3776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80a377a:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a377e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80a3782:	e043      	b.n	80a380c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80a3784:	693b      	ldr	r3, [r7, #16]
 80a3786:	ee07 3a90 	vmov	s15, r3
 80a378a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a378e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80a3870 <HAL_RCC_GetSysClockFreq+0x2f0>
 80a3792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80a3796:	4b2f      	ldr	r3, [pc, #188]	@ (80a3854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a3798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a379a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a379e:	ee07 3a90 	vmov	s15, r3
 80a37a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80a37a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80a37aa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80a3864 <HAL_RCC_GetSysClockFreq+0x2e4>
 80a37ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80a37b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80a37b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80a37ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80a37be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a37c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80a37c6:	e021      	b.n	80a380c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80a37c8:	693b      	ldr	r3, [r7, #16]
 80a37ca:	ee07 3a90 	vmov	s15, r3
 80a37ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a37d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80a386c <HAL_RCC_GetSysClockFreq+0x2ec>
 80a37d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80a37da:	4b1e      	ldr	r3, [pc, #120]	@ (80a3854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a37dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a37de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a37e2:	ee07 3a90 	vmov	s15, r3
 80a37e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80a37ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80a37ee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80a3864 <HAL_RCC_GetSysClockFreq+0x2e4>
 80a37f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80a37f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80a37fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80a37fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80a3802:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a3806:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80a380a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80a380c:	4b11      	ldr	r3, [pc, #68]	@ (80a3854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a380e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a3810:	0a5b      	lsrs	r3, r3, #9
 80a3812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80a3816:	3301      	adds	r3, #1
 80a3818:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80a381a:	683b      	ldr	r3, [r7, #0]
 80a381c:	ee07 3a90 	vmov	s15, r3
 80a3820:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80a3824:	edd7 6a07 	vldr	s13, [r7, #28]
 80a3828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80a382c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80a3830:	ee17 3a90 	vmov	r3, s15
 80a3834:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80a3836:	e005      	b.n	80a3844 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80a3838:	2300      	movs	r3, #0
 80a383a:	61bb      	str	r3, [r7, #24]
      break;
 80a383c:	e002      	b.n	80a3844 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80a383e:	4b07      	ldr	r3, [pc, #28]	@ (80a385c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80a3840:	61bb      	str	r3, [r7, #24]
      break;
 80a3842:	bf00      	nop
  }

  return sysclockfreq;
 80a3844:	69bb      	ldr	r3, [r7, #24]
}
 80a3846:	4618      	mov	r0, r3
 80a3848:	3724      	adds	r7, #36	@ 0x24
 80a384a:	46bd      	mov	sp, r7
 80a384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a3850:	4770      	bx	lr
 80a3852:	bf00      	nop
 80a3854:	58024400 	.word	0x58024400
 80a3858:	03d09000 	.word	0x03d09000
 80a385c:	003d0900 	.word	0x003d0900
 80a3860:	017d7840 	.word	0x017d7840
 80a3864:	46000000 	.word	0x46000000
 80a3868:	4c742400 	.word	0x4c742400
 80a386c:	4a742400 	.word	0x4a742400
 80a3870:	4bbebc20 	.word	0x4bbebc20

080a3874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80a3874:	b580      	push	{r7, lr}
 80a3876:	b082      	sub	sp, #8
 80a3878:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80a387a:	f7ff fe81 	bl	80a3580 <HAL_RCC_GetSysClockFreq>
 80a387e:	4602      	mov	r2, r0
 80a3880:	4b10      	ldr	r3, [pc, #64]	@ (80a38c4 <HAL_RCC_GetHCLKFreq+0x50>)
 80a3882:	699b      	ldr	r3, [r3, #24]
 80a3884:	0a1b      	lsrs	r3, r3, #8
 80a3886:	f003 030f 	and.w	r3, r3, #15
 80a388a:	490f      	ldr	r1, [pc, #60]	@ (80a38c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80a388c:	5ccb      	ldrb	r3, [r1, r3]
 80a388e:	f003 031f 	and.w	r3, r3, #31
 80a3892:	fa22 f303 	lsr.w	r3, r2, r3
 80a3896:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80a3898:	4b0a      	ldr	r3, [pc, #40]	@ (80a38c4 <HAL_RCC_GetHCLKFreq+0x50>)
 80a389a:	699b      	ldr	r3, [r3, #24]
 80a389c:	f003 030f 	and.w	r3, r3, #15
 80a38a0:	4a09      	ldr	r2, [pc, #36]	@ (80a38c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80a38a2:	5cd3      	ldrb	r3, [r2, r3]
 80a38a4:	f003 031f 	and.w	r3, r3, #31
 80a38a8:	687a      	ldr	r2, [r7, #4]
 80a38aa:	fa22 f303 	lsr.w	r3, r2, r3
 80a38ae:	4a07      	ldr	r2, [pc, #28]	@ (80a38cc <HAL_RCC_GetHCLKFreq+0x58>)
 80a38b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80a38b2:	4a07      	ldr	r2, [pc, #28]	@ (80a38d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80a38b4:	687b      	ldr	r3, [r7, #4]
 80a38b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80a38b8:	4b04      	ldr	r3, [pc, #16]	@ (80a38cc <HAL_RCC_GetHCLKFreq+0x58>)
 80a38ba:	681b      	ldr	r3, [r3, #0]
}
 80a38bc:	4618      	mov	r0, r3
 80a38be:	3708      	adds	r7, #8
 80a38c0:	46bd      	mov	sp, r7
 80a38c2:	bd80      	pop	{r7, pc}
 80a38c4:	58024400 	.word	0x58024400
 80a38c8:	080aa0e4 	.word	0x080aa0e4
 80a38cc:	24000004 	.word	0x24000004
 80a38d0:	24000000 	.word	0x24000000

080a38d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80a38d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80a38d8:	b0cc      	sub	sp, #304	@ 0x130
 80a38da:	af00      	add	r7, sp, #0
 80a38dc:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80a38e0:	2300      	movs	r3, #0
 80a38e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80a38e6:	2300      	movs	r3, #0
 80a38e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80a38ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a38f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a38f4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80a38f8:	2500      	movs	r5, #0
 80a38fa:	ea54 0305 	orrs.w	r3, r4, r5
 80a38fe:	d049      	beq.n	80a3994 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80a3900:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80a3906:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80a390a:	d02f      	beq.n	80a396c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80a390c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80a3910:	d828      	bhi.n	80a3964 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80a3912:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80a3916:	d01a      	beq.n	80a394e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80a3918:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80a391c:	d822      	bhi.n	80a3964 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80a391e:	2b00      	cmp	r3, #0
 80a3920:	d003      	beq.n	80a392a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80a3922:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80a3926:	d007      	beq.n	80a3938 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80a3928:	e01c      	b.n	80a3964 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a392a:	4bb8      	ldr	r3, [pc, #736]	@ (80a3c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a392c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a392e:	4ab7      	ldr	r2, [pc, #732]	@ (80a3c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a3934:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80a3936:	e01a      	b.n	80a396e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80a3938:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a393c:	3308      	adds	r3, #8
 80a393e:	2102      	movs	r1, #2
 80a3940:	4618      	mov	r0, r3
 80a3942:	f001 fa11 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a3946:	4603      	mov	r3, r0
 80a3948:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80a394c:	e00f      	b.n	80a396e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80a394e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3952:	3328      	adds	r3, #40	@ 0x28
 80a3954:	2102      	movs	r1, #2
 80a3956:	4618      	mov	r0, r3
 80a3958:	f001 fab8 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a395c:	4603      	mov	r3, r0
 80a395e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80a3962:	e004      	b.n	80a396e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a3964:	2301      	movs	r3, #1
 80a3966:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a396a:	e000      	b.n	80a396e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80a396c:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a396e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3972:	2b00      	cmp	r3, #0
 80a3974:	d10a      	bne.n	80a398c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80a3976:	4ba5      	ldr	r3, [pc, #660]	@ (80a3c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a397a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80a397e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80a3984:	4aa1      	ldr	r2, [pc, #644]	@ (80a3c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3986:	430b      	orrs	r3, r1
 80a3988:	6513      	str	r3, [r2, #80]	@ 0x50
 80a398a:	e003      	b.n	80a3994 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a398c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3990:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80a3994:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3998:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a399c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80a39a0:	f04f 0900 	mov.w	r9, #0
 80a39a4:	ea58 0309 	orrs.w	r3, r8, r9
 80a39a8:	d047      	beq.n	80a3a3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80a39aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a39ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80a39b0:	2b04      	cmp	r3, #4
 80a39b2:	d82a      	bhi.n	80a3a0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80a39b4:	a201      	add	r2, pc, #4	@ (adr r2, 80a39bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80a39b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a39ba:	bf00      	nop
 80a39bc:	080a39d1 	.word	0x080a39d1
 80a39c0:	080a39df 	.word	0x080a39df
 80a39c4:	080a39f5 	.word	0x080a39f5
 80a39c8:	080a3a13 	.word	0x080a3a13
 80a39cc:	080a3a13 	.word	0x080a3a13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a39d0:	4b8e      	ldr	r3, [pc, #568]	@ (80a3c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a39d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a39d4:	4a8d      	ldr	r2, [pc, #564]	@ (80a3c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a39d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a39da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80a39dc:	e01a      	b.n	80a3a14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a39de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a39e2:	3308      	adds	r3, #8
 80a39e4:	2100      	movs	r1, #0
 80a39e6:	4618      	mov	r0, r3
 80a39e8:	f001 f9be 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a39ec:	4603      	mov	r3, r0
 80a39ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80a39f2:	e00f      	b.n	80a3a14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80a39f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a39f8:	3328      	adds	r3, #40	@ 0x28
 80a39fa:	2100      	movs	r1, #0
 80a39fc:	4618      	mov	r0, r3
 80a39fe:	f001 fa65 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a3a02:	4603      	mov	r3, r0
 80a3a04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80a3a08:	e004      	b.n	80a3a14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a3a0a:	2301      	movs	r3, #1
 80a3a0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3a10:	e000      	b.n	80a3a14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80a3a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3a14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3a18:	2b00      	cmp	r3, #0
 80a3a1a:	d10a      	bne.n	80a3a32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80a3a1c:	4b7b      	ldr	r3, [pc, #492]	@ (80a3c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a3a20:	f023 0107 	bic.w	r1, r3, #7
 80a3a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80a3a2a:	4a78      	ldr	r2, [pc, #480]	@ (80a3c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3a2c:	430b      	orrs	r3, r1
 80a3a2e:	6513      	str	r3, [r2, #80]	@ 0x50
 80a3a30:	e003      	b.n	80a3a3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3a32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3a36:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80a3a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a42:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80a3a46:	f04f 0b00 	mov.w	fp, #0
 80a3a4a:	ea5a 030b 	orrs.w	r3, sl, fp
 80a3a4e:	d04c      	beq.n	80a3aea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80a3a50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80a3a56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80a3a5a:	d030      	beq.n	80a3abe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80a3a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80a3a60:	d829      	bhi.n	80a3ab6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80a3a62:	2bc0      	cmp	r3, #192	@ 0xc0
 80a3a64:	d02d      	beq.n	80a3ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80a3a66:	2bc0      	cmp	r3, #192	@ 0xc0
 80a3a68:	d825      	bhi.n	80a3ab6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80a3a6a:	2b80      	cmp	r3, #128	@ 0x80
 80a3a6c:	d018      	beq.n	80a3aa0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80a3a6e:	2b80      	cmp	r3, #128	@ 0x80
 80a3a70:	d821      	bhi.n	80a3ab6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80a3a72:	2b00      	cmp	r3, #0
 80a3a74:	d002      	beq.n	80a3a7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80a3a76:	2b40      	cmp	r3, #64	@ 0x40
 80a3a78:	d007      	beq.n	80a3a8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80a3a7a:	e01c      	b.n	80a3ab6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a3a7c:	4b63      	ldr	r3, [pc, #396]	@ (80a3c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a3a80:	4a62      	ldr	r2, [pc, #392]	@ (80a3c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a3a86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80a3a88:	e01c      	b.n	80a3ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a3a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3a8e:	3308      	adds	r3, #8
 80a3a90:	2100      	movs	r1, #0
 80a3a92:	4618      	mov	r0, r3
 80a3a94:	f001 f968 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a3a98:	4603      	mov	r3, r0
 80a3a9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80a3a9e:	e011      	b.n	80a3ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80a3aa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3aa4:	3328      	adds	r3, #40	@ 0x28
 80a3aa6:	2100      	movs	r1, #0
 80a3aa8:	4618      	mov	r0, r3
 80a3aaa:	f001 fa0f 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a3aae:	4603      	mov	r3, r0
 80a3ab0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80a3ab4:	e006      	b.n	80a3ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a3ab6:	2301      	movs	r3, #1
 80a3ab8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3abc:	e002      	b.n	80a3ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80a3abe:	bf00      	nop
 80a3ac0:	e000      	b.n	80a3ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80a3ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3ac4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3ac8:	2b00      	cmp	r3, #0
 80a3aca:	d10a      	bne.n	80a3ae2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80a3acc:	4b4f      	ldr	r3, [pc, #316]	@ (80a3c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a3ad0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80a3ad4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80a3ada:	4a4c      	ldr	r2, [pc, #304]	@ (80a3c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3adc:	430b      	orrs	r3, r1
 80a3ade:	6513      	str	r3, [r2, #80]	@ 0x50
 80a3ae0:	e003      	b.n	80a3aea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3ae2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3ae6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80a3aea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3af2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80a3af6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80a3afa:	2300      	movs	r3, #0
 80a3afc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80a3b00:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80a3b04:	460b      	mov	r3, r1
 80a3b06:	4313      	orrs	r3, r2
 80a3b08:	d053      	beq.n	80a3bb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80a3b0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3b0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80a3b12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80a3b16:	d035      	beq.n	80a3b84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80a3b18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80a3b1c:	d82e      	bhi.n	80a3b7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80a3b1e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80a3b22:	d031      	beq.n	80a3b88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80a3b24:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80a3b28:	d828      	bhi.n	80a3b7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80a3b2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80a3b2e:	d01a      	beq.n	80a3b66 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80a3b30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80a3b34:	d822      	bhi.n	80a3b7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80a3b36:	2b00      	cmp	r3, #0
 80a3b38:	d003      	beq.n	80a3b42 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80a3b3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80a3b3e:	d007      	beq.n	80a3b50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80a3b40:	e01c      	b.n	80a3b7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a3b42:	4b32      	ldr	r3, [pc, #200]	@ (80a3c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a3b46:	4a31      	ldr	r2, [pc, #196]	@ (80a3c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a3b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80a3b4e:	e01c      	b.n	80a3b8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a3b50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3b54:	3308      	adds	r3, #8
 80a3b56:	2100      	movs	r1, #0
 80a3b58:	4618      	mov	r0, r3
 80a3b5a:	f001 f905 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a3b5e:	4603      	mov	r3, r0
 80a3b60:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80a3b64:	e011      	b.n	80a3b8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80a3b66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3b6a:	3328      	adds	r3, #40	@ 0x28
 80a3b6c:	2100      	movs	r1, #0
 80a3b6e:	4618      	mov	r0, r3
 80a3b70:	f001 f9ac 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a3b74:	4603      	mov	r3, r0
 80a3b76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80a3b7a:	e006      	b.n	80a3b8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80a3b7c:	2301      	movs	r3, #1
 80a3b7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3b82:	e002      	b.n	80a3b8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80a3b84:	bf00      	nop
 80a3b86:	e000      	b.n	80a3b8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80a3b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3b8a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3b8e:	2b00      	cmp	r3, #0
 80a3b90:	d10b      	bne.n	80a3baa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80a3b92:	4b1e      	ldr	r3, [pc, #120]	@ (80a3c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a3b96:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80a3b9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3b9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80a3ba2:	4a1a      	ldr	r2, [pc, #104]	@ (80a3c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3ba4:	430b      	orrs	r3, r1
 80a3ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 80a3ba8:	e003      	b.n	80a3bb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3baa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3bae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80a3bb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3bba:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80a3bbe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80a3bc2:	2300      	movs	r3, #0
 80a3bc4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80a3bc8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80a3bcc:	460b      	mov	r3, r1
 80a3bce:	4313      	orrs	r3, r2
 80a3bd0:	d056      	beq.n	80a3c80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80a3bd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3bd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80a3bda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80a3bde:	d038      	beq.n	80a3c52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80a3be0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80a3be4:	d831      	bhi.n	80a3c4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80a3be6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80a3bea:	d034      	beq.n	80a3c56 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80a3bec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80a3bf0:	d82b      	bhi.n	80a3c4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80a3bf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80a3bf6:	d01d      	beq.n	80a3c34 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80a3bf8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80a3bfc:	d825      	bhi.n	80a3c4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80a3bfe:	2b00      	cmp	r3, #0
 80a3c00:	d006      	beq.n	80a3c10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80a3c02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80a3c06:	d00a      	beq.n	80a3c1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80a3c08:	e01f      	b.n	80a3c4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80a3c0a:	bf00      	nop
 80a3c0c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a3c10:	4ba2      	ldr	r3, [pc, #648]	@ (80a3e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a3c14:	4aa1      	ldr	r2, [pc, #644]	@ (80a3e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a3c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80a3c1c:	e01c      	b.n	80a3c58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a3c1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3c22:	3308      	adds	r3, #8
 80a3c24:	2100      	movs	r1, #0
 80a3c26:	4618      	mov	r0, r3
 80a3c28:	f001 f89e 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a3c2c:	4603      	mov	r3, r0
 80a3c2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80a3c32:	e011      	b.n	80a3c58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80a3c34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3c38:	3328      	adds	r3, #40	@ 0x28
 80a3c3a:	2100      	movs	r1, #0
 80a3c3c:	4618      	mov	r0, r3
 80a3c3e:	f001 f945 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a3c42:	4603      	mov	r3, r0
 80a3c44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80a3c48:	e006      	b.n	80a3c58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80a3c4a:	2301      	movs	r3, #1
 80a3c4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3c50:	e002      	b.n	80a3c58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80a3c52:	bf00      	nop
 80a3c54:	e000      	b.n	80a3c58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80a3c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3c58:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3c5c:	2b00      	cmp	r3, #0
 80a3c5e:	d10b      	bne.n	80a3c78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80a3c60:	4b8e      	ldr	r3, [pc, #568]	@ (80a3e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a3c64:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80a3c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3c6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80a3c70:	4a8a      	ldr	r2, [pc, #552]	@ (80a3e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3c72:	430b      	orrs	r3, r1
 80a3c74:	6593      	str	r3, [r2, #88]	@ 0x58
 80a3c76:	e003      	b.n	80a3c80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3c78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3c7c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80a3c80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c88:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80a3c8c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80a3c90:	2300      	movs	r3, #0
 80a3c92:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80a3c96:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80a3c9a:	460b      	mov	r3, r1
 80a3c9c:	4313      	orrs	r3, r2
 80a3c9e:	d03a      	beq.n	80a3d16 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80a3ca0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80a3ca6:	2b30      	cmp	r3, #48	@ 0x30
 80a3ca8:	d01f      	beq.n	80a3cea <HAL_RCCEx_PeriphCLKConfig+0x416>
 80a3caa:	2b30      	cmp	r3, #48	@ 0x30
 80a3cac:	d819      	bhi.n	80a3ce2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80a3cae:	2b20      	cmp	r3, #32
 80a3cb0:	d00c      	beq.n	80a3ccc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80a3cb2:	2b20      	cmp	r3, #32
 80a3cb4:	d815      	bhi.n	80a3ce2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80a3cb6:	2b00      	cmp	r3, #0
 80a3cb8:	d019      	beq.n	80a3cee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80a3cba:	2b10      	cmp	r3, #16
 80a3cbc:	d111      	bne.n	80a3ce2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a3cbe:	4b77      	ldr	r3, [pc, #476]	@ (80a3e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a3cc2:	4a76      	ldr	r2, [pc, #472]	@ (80a3e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a3cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80a3cca:	e011      	b.n	80a3cf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80a3ccc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3cd0:	3308      	adds	r3, #8
 80a3cd2:	2102      	movs	r1, #2
 80a3cd4:	4618      	mov	r0, r3
 80a3cd6:	f001 f847 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a3cda:	4603      	mov	r3, r0
 80a3cdc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80a3ce0:	e006      	b.n	80a3cf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80a3ce2:	2301      	movs	r3, #1
 80a3ce4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3ce8:	e002      	b.n	80a3cf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80a3cea:	bf00      	nop
 80a3cec:	e000      	b.n	80a3cf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80a3cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3cf0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3cf4:	2b00      	cmp	r3, #0
 80a3cf6:	d10a      	bne.n	80a3d0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80a3cf8:	4b68      	ldr	r3, [pc, #416]	@ (80a3e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80a3cfc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80a3d00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80a3d06:	4a65      	ldr	r2, [pc, #404]	@ (80a3e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3d08:	430b      	orrs	r3, r1
 80a3d0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80a3d0c:	e003      	b.n	80a3d16 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3d0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3d12:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80a3d16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d1e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80a3d22:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80a3d26:	2300      	movs	r3, #0
 80a3d28:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80a3d2c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80a3d30:	460b      	mov	r3, r1
 80a3d32:	4313      	orrs	r3, r2
 80a3d34:	d051      	beq.n	80a3dda <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80a3d36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80a3d3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80a3d40:	d035      	beq.n	80a3dae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80a3d42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80a3d46:	d82e      	bhi.n	80a3da6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80a3d48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80a3d4c:	d031      	beq.n	80a3db2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80a3d4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80a3d52:	d828      	bhi.n	80a3da6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80a3d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80a3d58:	d01a      	beq.n	80a3d90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80a3d5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80a3d5e:	d822      	bhi.n	80a3da6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80a3d60:	2b00      	cmp	r3, #0
 80a3d62:	d003      	beq.n	80a3d6c <HAL_RCCEx_PeriphCLKConfig+0x498>
 80a3d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80a3d68:	d007      	beq.n	80a3d7a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80a3d6a:	e01c      	b.n	80a3da6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a3d6c:	4b4b      	ldr	r3, [pc, #300]	@ (80a3e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a3d70:	4a4a      	ldr	r2, [pc, #296]	@ (80a3e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a3d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80a3d78:	e01c      	b.n	80a3db4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a3d7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3d7e:	3308      	adds	r3, #8
 80a3d80:	2100      	movs	r1, #0
 80a3d82:	4618      	mov	r0, r3
 80a3d84:	f000 fff0 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a3d88:	4603      	mov	r3, r0
 80a3d8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80a3d8e:	e011      	b.n	80a3db4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80a3d90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3d94:	3328      	adds	r3, #40	@ 0x28
 80a3d96:	2100      	movs	r1, #0
 80a3d98:	4618      	mov	r0, r3
 80a3d9a:	f001 f897 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a3d9e:	4603      	mov	r3, r0
 80a3da0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80a3da4:	e006      	b.n	80a3db4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a3da6:	2301      	movs	r3, #1
 80a3da8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3dac:	e002      	b.n	80a3db4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80a3dae:	bf00      	nop
 80a3db0:	e000      	b.n	80a3db4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80a3db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3db4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3db8:	2b00      	cmp	r3, #0
 80a3dba:	d10a      	bne.n	80a3dd2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80a3dbc:	4b37      	ldr	r3, [pc, #220]	@ (80a3e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a3dc0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80a3dc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3dc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80a3dca:	4a34      	ldr	r2, [pc, #208]	@ (80a3e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3dcc:	430b      	orrs	r3, r1
 80a3dce:	6513      	str	r3, [r2, #80]	@ 0x50
 80a3dd0:	e003      	b.n	80a3dda <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3dd2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3dd6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80a3dda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3de2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80a3de6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80a3dea:	2300      	movs	r3, #0
 80a3dec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80a3df0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80a3df4:	460b      	mov	r3, r1
 80a3df6:	4313      	orrs	r3, r2
 80a3df8:	d056      	beq.n	80a3ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80a3dfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3dfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80a3e00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80a3e04:	d033      	beq.n	80a3e6e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80a3e06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80a3e0a:	d82c      	bhi.n	80a3e66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80a3e0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80a3e10:	d02f      	beq.n	80a3e72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80a3e12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80a3e16:	d826      	bhi.n	80a3e66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80a3e18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80a3e1c:	d02b      	beq.n	80a3e76 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80a3e1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80a3e22:	d820      	bhi.n	80a3e66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80a3e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80a3e28:	d012      	beq.n	80a3e50 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80a3e2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80a3e2e:	d81a      	bhi.n	80a3e66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80a3e30:	2b00      	cmp	r3, #0
 80a3e32:	d022      	beq.n	80a3e7a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80a3e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80a3e38:	d115      	bne.n	80a3e66 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80a3e3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3e3e:	3308      	adds	r3, #8
 80a3e40:	2101      	movs	r1, #1
 80a3e42:	4618      	mov	r0, r3
 80a3e44:	f000 ff90 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a3e48:	4603      	mov	r3, r0
 80a3e4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80a3e4e:	e015      	b.n	80a3e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80a3e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3e54:	3328      	adds	r3, #40	@ 0x28
 80a3e56:	2101      	movs	r1, #1
 80a3e58:	4618      	mov	r0, r3
 80a3e5a:	f001 f837 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a3e5e:	4603      	mov	r3, r0
 80a3e60:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80a3e64:	e00a      	b.n	80a3e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a3e66:	2301      	movs	r3, #1
 80a3e68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3e6c:	e006      	b.n	80a3e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80a3e6e:	bf00      	nop
 80a3e70:	e004      	b.n	80a3e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80a3e72:	bf00      	nop
 80a3e74:	e002      	b.n	80a3e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80a3e76:	bf00      	nop
 80a3e78:	e000      	b.n	80a3e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80a3e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3e7c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3e80:	2b00      	cmp	r3, #0
 80a3e82:	d10d      	bne.n	80a3ea0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80a3e84:	4b05      	ldr	r3, [pc, #20]	@ (80a3e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a3e88:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80a3e8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3e90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80a3e92:	4a02      	ldr	r2, [pc, #8]	@ (80a3e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3e94:	430b      	orrs	r3, r1
 80a3e96:	6513      	str	r3, [r2, #80]	@ 0x50
 80a3e98:	e006      	b.n	80a3ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80a3e9a:	bf00      	nop
 80a3e9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3ea0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3ea4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80a3ea8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3eb0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80a3eb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80a3eb8:	2300      	movs	r3, #0
 80a3eba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80a3ebe:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80a3ec2:	460b      	mov	r3, r1
 80a3ec4:	4313      	orrs	r3, r2
 80a3ec6:	d055      	beq.n	80a3f74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80a3ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3ecc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80a3ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80a3ed4:	d033      	beq.n	80a3f3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80a3ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80a3eda:	d82c      	bhi.n	80a3f36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80a3edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80a3ee0:	d02f      	beq.n	80a3f42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80a3ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80a3ee6:	d826      	bhi.n	80a3f36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80a3ee8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80a3eec:	d02b      	beq.n	80a3f46 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80a3eee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80a3ef2:	d820      	bhi.n	80a3f36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80a3ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80a3ef8:	d012      	beq.n	80a3f20 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80a3efa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80a3efe:	d81a      	bhi.n	80a3f36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80a3f00:	2b00      	cmp	r3, #0
 80a3f02:	d022      	beq.n	80a3f4a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80a3f04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80a3f08:	d115      	bne.n	80a3f36 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80a3f0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3f0e:	3308      	adds	r3, #8
 80a3f10:	2101      	movs	r1, #1
 80a3f12:	4618      	mov	r0, r3
 80a3f14:	f000 ff28 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a3f18:	4603      	mov	r3, r0
 80a3f1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80a3f1e:	e015      	b.n	80a3f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80a3f20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3f24:	3328      	adds	r3, #40	@ 0x28
 80a3f26:	2101      	movs	r1, #1
 80a3f28:	4618      	mov	r0, r3
 80a3f2a:	f000 ffcf 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a3f2e:	4603      	mov	r3, r0
 80a3f30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80a3f34:	e00a      	b.n	80a3f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80a3f36:	2301      	movs	r3, #1
 80a3f38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3f3c:	e006      	b.n	80a3f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80a3f3e:	bf00      	nop
 80a3f40:	e004      	b.n	80a3f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80a3f42:	bf00      	nop
 80a3f44:	e002      	b.n	80a3f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80a3f46:	bf00      	nop
 80a3f48:	e000      	b.n	80a3f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80a3f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3f4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3f50:	2b00      	cmp	r3, #0
 80a3f52:	d10b      	bne.n	80a3f6c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80a3f54:	4bb6      	ldr	r3, [pc, #728]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a3f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a3f58:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80a3f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3f60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80a3f64:	4ab2      	ldr	r2, [pc, #712]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a3f66:	430b      	orrs	r3, r1
 80a3f68:	6593      	str	r3, [r2, #88]	@ 0x58
 80a3f6a:	e003      	b.n	80a3f74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3f6c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3f70:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80a3f74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f7c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80a3f80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80a3f84:	2300      	movs	r3, #0
 80a3f86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80a3f8a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80a3f8e:	460b      	mov	r3, r1
 80a3f90:	4313      	orrs	r3, r2
 80a3f92:	d02a      	beq.n	80a3fea <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80a3f94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a3f9a:	2b00      	cmp	r3, #0
 80a3f9c:	d011      	beq.n	80a3fc2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80a3f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80a3fa2:	d10a      	bne.n	80a3fba <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80a3fa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3fa8:	3308      	adds	r3, #8
 80a3faa:	2101      	movs	r1, #1
 80a3fac:	4618      	mov	r0, r3
 80a3fae:	f000 fedb 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a3fb2:	4603      	mov	r3, r0
 80a3fb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80a3fb8:	e004      	b.n	80a3fc4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a3fba:	2301      	movs	r3, #1
 80a3fbc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3fc0:	e000      	b.n	80a3fc4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80a3fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3fc4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3fc8:	2b00      	cmp	r3, #0
 80a3fca:	d10a      	bne.n	80a3fe2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80a3fcc:	4b98      	ldr	r3, [pc, #608]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a3fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80a3fd0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80a3fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a3fda:	4a95      	ldr	r2, [pc, #596]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a3fdc:	430b      	orrs	r3, r1
 80a3fde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80a3fe0:	e003      	b.n	80a3fea <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3fe2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3fe6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80a3fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3ff2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80a3ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80a3ffa:	2300      	movs	r3, #0
 80a3ffc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80a4000:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80a4004:	460b      	mov	r3, r1
 80a4006:	4313      	orrs	r3, r2
 80a4008:	d037      	beq.n	80a407a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80a400a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a400e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80a4010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80a4014:	d00e      	beq.n	80a4034 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80a4016:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80a401a:	d816      	bhi.n	80a404a <HAL_RCCEx_PeriphCLKConfig+0x776>
 80a401c:	2b00      	cmp	r3, #0
 80a401e:	d018      	beq.n	80a4052 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80a4020:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80a4024:	d111      	bne.n	80a404a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a4026:	4b82      	ldr	r3, [pc, #520]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a4028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a402a:	4a81      	ldr	r2, [pc, #516]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a402c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a4030:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80a4032:	e00f      	b.n	80a4054 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80a4034:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4038:	3308      	adds	r3, #8
 80a403a:	2101      	movs	r1, #1
 80a403c:	4618      	mov	r0, r3
 80a403e:	f000 fe93 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a4042:	4603      	mov	r3, r0
 80a4044:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80a4048:	e004      	b.n	80a4054 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a404a:	2301      	movs	r3, #1
 80a404c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a4050:	e000      	b.n	80a4054 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80a4052:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a4054:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4058:	2b00      	cmp	r3, #0
 80a405a:	d10a      	bne.n	80a4072 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80a405c:	4b74      	ldr	r3, [pc, #464]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a405e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a4060:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80a4064:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80a406a:	4a71      	ldr	r2, [pc, #452]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a406c:	430b      	orrs	r3, r1
 80a406e:	6513      	str	r3, [r2, #80]	@ 0x50
 80a4070:	e003      	b.n	80a407a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4072:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4076:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80a407a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4082:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80a4086:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80a408a:	2300      	movs	r3, #0
 80a408c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80a4090:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80a4094:	460b      	mov	r3, r1
 80a4096:	4313      	orrs	r3, r2
 80a4098:	d03a      	beq.n	80a4110 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80a409a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a409e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80a40a0:	2b03      	cmp	r3, #3
 80a40a2:	d81d      	bhi.n	80a40e0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80a40a4:	a201      	add	r2, pc, #4	@ (adr r2, 80a40ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80a40a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a40aa:	bf00      	nop
 80a40ac:	080a40e9 	.word	0x080a40e9
 80a40b0:	080a40bd 	.word	0x080a40bd
 80a40b4:	080a40cb 	.word	0x080a40cb
 80a40b8:	080a40e9 	.word	0x080a40e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a40bc:	4b5c      	ldr	r3, [pc, #368]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a40be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a40c0:	4a5b      	ldr	r2, [pc, #364]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a40c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a40c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80a40c8:	e00f      	b.n	80a40ea <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80a40ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a40ce:	3308      	adds	r3, #8
 80a40d0:	2102      	movs	r1, #2
 80a40d2:	4618      	mov	r0, r3
 80a40d4:	f000 fe48 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a40d8:	4603      	mov	r3, r0
 80a40da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80a40de:	e004      	b.n	80a40ea <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80a40e0:	2301      	movs	r3, #1
 80a40e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a40e6:	e000      	b.n	80a40ea <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80a40e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a40ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a40ee:	2b00      	cmp	r3, #0
 80a40f0:	d10a      	bne.n	80a4108 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80a40f2:	4b4f      	ldr	r3, [pc, #316]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a40f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80a40f6:	f023 0103 	bic.w	r1, r3, #3
 80a40fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a40fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80a4100:	4a4b      	ldr	r2, [pc, #300]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a4102:	430b      	orrs	r3, r1
 80a4104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80a4106:	e003      	b.n	80a4110 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4108:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a410c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80a4110:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4114:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4118:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80a411c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80a4120:	2300      	movs	r3, #0
 80a4122:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80a4126:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80a412a:	460b      	mov	r3, r1
 80a412c:	4313      	orrs	r3, r2
 80a412e:	f000 80a0 	beq.w	80a4272 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80a4132:	4b40      	ldr	r3, [pc, #256]	@ (80a4234 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80a4134:	681b      	ldr	r3, [r3, #0]
 80a4136:	4a3f      	ldr	r2, [pc, #252]	@ (80a4234 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80a4138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80a413c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80a413e:	f7fc fd3d 	bl	80a0bbc <HAL_GetTick>
 80a4142:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80a4146:	e00b      	b.n	80a4160 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80a4148:	f7fc fd38 	bl	80a0bbc <HAL_GetTick>
 80a414c:	4602      	mov	r2, r0
 80a414e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80a4152:	1ad3      	subs	r3, r2, r3
 80a4154:	2b64      	cmp	r3, #100	@ 0x64
 80a4156:	d903      	bls.n	80a4160 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80a4158:	2303      	movs	r3, #3
 80a415a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a415e:	e005      	b.n	80a416c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80a4160:	4b34      	ldr	r3, [pc, #208]	@ (80a4234 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80a4162:	681b      	ldr	r3, [r3, #0]
 80a4164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a4168:	2b00      	cmp	r3, #0
 80a416a:	d0ed      	beq.n	80a4148 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80a416c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4170:	2b00      	cmp	r3, #0
 80a4172:	d17a      	bne.n	80a426a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80a4174:	4b2e      	ldr	r3, [pc, #184]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a4176:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80a4178:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a417c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80a4180:	4053      	eors	r3, r2
 80a4182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80a4186:	2b00      	cmp	r3, #0
 80a4188:	d015      	beq.n	80a41b6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80a418a:	4b29      	ldr	r3, [pc, #164]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a418c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a418e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80a4192:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80a4196:	4b26      	ldr	r3, [pc, #152]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a4198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a419a:	4a25      	ldr	r2, [pc, #148]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a419c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80a41a0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80a41a2:	4b23      	ldr	r3, [pc, #140]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a41a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a41a6:	4a22      	ldr	r2, [pc, #136]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a41a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80a41ac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80a41ae:	4a20      	ldr	r2, [pc, #128]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a41b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80a41b4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80a41b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a41ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80a41be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80a41c2:	d118      	bne.n	80a41f6 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a41c4:	f7fc fcfa 	bl	80a0bbc <HAL_GetTick>
 80a41c8:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80a41cc:	e00d      	b.n	80a41ea <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80a41ce:	f7fc fcf5 	bl	80a0bbc <HAL_GetTick>
 80a41d2:	4602      	mov	r2, r0
 80a41d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80a41d8:	1ad2      	subs	r2, r2, r3
 80a41da:	f241 3388 	movw	r3, #5000	@ 0x1388
 80a41de:	429a      	cmp	r2, r3
 80a41e0:	d903      	bls.n	80a41ea <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80a41e2:	2303      	movs	r3, #3
 80a41e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 80a41e8:	e005      	b.n	80a41f6 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80a41ea:	4b11      	ldr	r3, [pc, #68]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a41ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a41ee:	f003 0302 	and.w	r3, r3, #2
 80a41f2:	2b00      	cmp	r3, #0
 80a41f4:	d0eb      	beq.n	80a41ce <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80a41f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a41fa:	2b00      	cmp	r3, #0
 80a41fc:	d130      	bne.n	80a4260 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80a41fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4202:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80a4206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80a420a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80a420e:	d115      	bne.n	80a423c <HAL_RCCEx_PeriphCLKConfig+0x968>
 80a4210:	4b07      	ldr	r3, [pc, #28]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a4212:	691b      	ldr	r3, [r3, #16]
 80a4214:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80a4218:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a421c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80a4220:	091a      	lsrs	r2, r3, #4
 80a4222:	4b05      	ldr	r3, [pc, #20]	@ (80a4238 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80a4224:	4013      	ands	r3, r2
 80a4226:	4a02      	ldr	r2, [pc, #8]	@ (80a4230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a4228:	430b      	orrs	r3, r1
 80a422a:	6113      	str	r3, [r2, #16]
 80a422c:	e00c      	b.n	80a4248 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80a422e:	bf00      	nop
 80a4230:	58024400 	.word	0x58024400
 80a4234:	58024800 	.word	0x58024800
 80a4238:	00ffffcf 	.word	0x00ffffcf
 80a423c:	4bd4      	ldr	r3, [pc, #848]	@ (80a4590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a423e:	691b      	ldr	r3, [r3, #16]
 80a4240:	4ad3      	ldr	r2, [pc, #844]	@ (80a4590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a4242:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80a4246:	6113      	str	r3, [r2, #16]
 80a4248:	4bd1      	ldr	r3, [pc, #836]	@ (80a4590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a424a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80a424c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4250:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80a4254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80a4258:	4acd      	ldr	r2, [pc, #820]	@ (80a4590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a425a:	430b      	orrs	r3, r1
 80a425c:	6713      	str	r3, [r2, #112]	@ 0x70
 80a425e:	e008      	b.n	80a4272 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80a4260:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4264:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80a4268:	e003      	b.n	80a4272 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a426a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a426e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80a4272:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4276:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a427a:	f002 0301 	and.w	r3, r2, #1
 80a427e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80a4282:	2300      	movs	r3, #0
 80a4284:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80a4288:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80a428c:	460b      	mov	r3, r1
 80a428e:	4313      	orrs	r3, r2
 80a4290:	f000 808b 	beq.w	80a43aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80a4294:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4298:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80a429c:	2b28      	cmp	r3, #40	@ 0x28
 80a429e:	d86b      	bhi.n	80a4378 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80a42a0:	a201      	add	r2, pc, #4	@ (adr r2, 80a42a8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80a42a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a42a6:	bf00      	nop
 80a42a8:	080a4381 	.word	0x080a4381
 80a42ac:	080a4379 	.word	0x080a4379
 80a42b0:	080a4379 	.word	0x080a4379
 80a42b4:	080a4379 	.word	0x080a4379
 80a42b8:	080a4379 	.word	0x080a4379
 80a42bc:	080a4379 	.word	0x080a4379
 80a42c0:	080a4379 	.word	0x080a4379
 80a42c4:	080a4379 	.word	0x080a4379
 80a42c8:	080a434d 	.word	0x080a434d
 80a42cc:	080a4379 	.word	0x080a4379
 80a42d0:	080a4379 	.word	0x080a4379
 80a42d4:	080a4379 	.word	0x080a4379
 80a42d8:	080a4379 	.word	0x080a4379
 80a42dc:	080a4379 	.word	0x080a4379
 80a42e0:	080a4379 	.word	0x080a4379
 80a42e4:	080a4379 	.word	0x080a4379
 80a42e8:	080a4363 	.word	0x080a4363
 80a42ec:	080a4379 	.word	0x080a4379
 80a42f0:	080a4379 	.word	0x080a4379
 80a42f4:	080a4379 	.word	0x080a4379
 80a42f8:	080a4379 	.word	0x080a4379
 80a42fc:	080a4379 	.word	0x080a4379
 80a4300:	080a4379 	.word	0x080a4379
 80a4304:	080a4379 	.word	0x080a4379
 80a4308:	080a4381 	.word	0x080a4381
 80a430c:	080a4379 	.word	0x080a4379
 80a4310:	080a4379 	.word	0x080a4379
 80a4314:	080a4379 	.word	0x080a4379
 80a4318:	080a4379 	.word	0x080a4379
 80a431c:	080a4379 	.word	0x080a4379
 80a4320:	080a4379 	.word	0x080a4379
 80a4324:	080a4379 	.word	0x080a4379
 80a4328:	080a4381 	.word	0x080a4381
 80a432c:	080a4379 	.word	0x080a4379
 80a4330:	080a4379 	.word	0x080a4379
 80a4334:	080a4379 	.word	0x080a4379
 80a4338:	080a4379 	.word	0x080a4379
 80a433c:	080a4379 	.word	0x080a4379
 80a4340:	080a4379 	.word	0x080a4379
 80a4344:	080a4379 	.word	0x080a4379
 80a4348:	080a4381 	.word	0x080a4381
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80a434c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4350:	3308      	adds	r3, #8
 80a4352:	2101      	movs	r1, #1
 80a4354:	4618      	mov	r0, r3
 80a4356:	f000 fd07 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a435a:	4603      	mov	r3, r0
 80a435c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80a4360:	e00f      	b.n	80a4382 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80a4362:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4366:	3328      	adds	r3, #40	@ 0x28
 80a4368:	2101      	movs	r1, #1
 80a436a:	4618      	mov	r0, r3
 80a436c:	f000 fdae 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a4370:	4603      	mov	r3, r0
 80a4372:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80a4376:	e004      	b.n	80a4382 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a4378:	2301      	movs	r3, #1
 80a437a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a437e:	e000      	b.n	80a4382 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80a4380:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a4382:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4386:	2b00      	cmp	r3, #0
 80a4388:	d10b      	bne.n	80a43a2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80a438a:	4b81      	ldr	r3, [pc, #516]	@ (80a4590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a438c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a438e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80a4392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80a439a:	4a7d      	ldr	r2, [pc, #500]	@ (80a4590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a439c:	430b      	orrs	r3, r1
 80a439e:	6553      	str	r3, [r2, #84]	@ 0x54
 80a43a0:	e003      	b.n	80a43aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a43a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a43a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80a43aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a43ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a43b2:	f002 0302 	and.w	r3, r2, #2
 80a43b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80a43ba:	2300      	movs	r3, #0
 80a43bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80a43c0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80a43c4:	460b      	mov	r3, r1
 80a43c6:	4313      	orrs	r3, r2
 80a43c8:	d042      	beq.n	80a4450 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80a43ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a43ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80a43d0:	2b05      	cmp	r3, #5
 80a43d2:	d825      	bhi.n	80a4420 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80a43d4:	a201      	add	r2, pc, #4	@ (adr r2, 80a43dc <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 80a43d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a43da:	bf00      	nop
 80a43dc:	080a4429 	.word	0x080a4429
 80a43e0:	080a43f5 	.word	0x080a43f5
 80a43e4:	080a440b 	.word	0x080a440b
 80a43e8:	080a4429 	.word	0x080a4429
 80a43ec:	080a4429 	.word	0x080a4429
 80a43f0:	080a4429 	.word	0x080a4429
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80a43f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a43f8:	3308      	adds	r3, #8
 80a43fa:	2101      	movs	r1, #1
 80a43fc:	4618      	mov	r0, r3
 80a43fe:	f000 fcb3 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a4402:	4603      	mov	r3, r0
 80a4404:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80a4408:	e00f      	b.n	80a442a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80a440a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a440e:	3328      	adds	r3, #40	@ 0x28
 80a4410:	2101      	movs	r1, #1
 80a4412:	4618      	mov	r0, r3
 80a4414:	f000 fd5a 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a4418:	4603      	mov	r3, r0
 80a441a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80a441e:	e004      	b.n	80a442a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a4420:	2301      	movs	r3, #1
 80a4422:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a4426:	e000      	b.n	80a442a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80a4428:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a442a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a442e:	2b00      	cmp	r3, #0
 80a4430:	d10a      	bne.n	80a4448 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80a4432:	4b57      	ldr	r3, [pc, #348]	@ (80a4590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a4434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a4436:	f023 0107 	bic.w	r1, r3, #7
 80a443a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a443e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80a4440:	4a53      	ldr	r2, [pc, #332]	@ (80a4590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a4442:	430b      	orrs	r3, r1
 80a4444:	6553      	str	r3, [r2, #84]	@ 0x54
 80a4446:	e003      	b.n	80a4450 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4448:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a444c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80a4450:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4454:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4458:	f002 0304 	and.w	r3, r2, #4
 80a445c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80a4460:	2300      	movs	r3, #0
 80a4462:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80a4466:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80a446a:	460b      	mov	r3, r1
 80a446c:	4313      	orrs	r3, r2
 80a446e:	d044      	beq.n	80a44fa <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80a4470:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4474:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80a4478:	2b05      	cmp	r3, #5
 80a447a:	d825      	bhi.n	80a44c8 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80a447c:	a201      	add	r2, pc, #4	@ (adr r2, 80a4484 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80a447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a4482:	bf00      	nop
 80a4484:	080a44d1 	.word	0x080a44d1
 80a4488:	080a449d 	.word	0x080a449d
 80a448c:	080a44b3 	.word	0x080a44b3
 80a4490:	080a44d1 	.word	0x080a44d1
 80a4494:	080a44d1 	.word	0x080a44d1
 80a4498:	080a44d1 	.word	0x080a44d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80a449c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a44a0:	3308      	adds	r3, #8
 80a44a2:	2101      	movs	r1, #1
 80a44a4:	4618      	mov	r0, r3
 80a44a6:	f000 fc5f 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a44aa:	4603      	mov	r3, r0
 80a44ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80a44b0:	e00f      	b.n	80a44d2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80a44b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a44b6:	3328      	adds	r3, #40	@ 0x28
 80a44b8:	2101      	movs	r1, #1
 80a44ba:	4618      	mov	r0, r3
 80a44bc:	f000 fd06 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a44c0:	4603      	mov	r3, r0
 80a44c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80a44c6:	e004      	b.n	80a44d2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a44c8:	2301      	movs	r3, #1
 80a44ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a44ce:	e000      	b.n	80a44d2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80a44d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a44d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a44d6:	2b00      	cmp	r3, #0
 80a44d8:	d10b      	bne.n	80a44f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80a44da:	4b2d      	ldr	r3, [pc, #180]	@ (80a4590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a44dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a44de:	f023 0107 	bic.w	r1, r3, #7
 80a44e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a44e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80a44ea:	4a29      	ldr	r2, [pc, #164]	@ (80a4590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a44ec:	430b      	orrs	r3, r1
 80a44ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80a44f0:	e003      	b.n	80a44fa <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a44f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a44f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80a44fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a44fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4502:	f002 0320 	and.w	r3, r2, #32
 80a4506:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80a450a:	2300      	movs	r3, #0
 80a450c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80a4510:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80a4514:	460b      	mov	r3, r1
 80a4516:	4313      	orrs	r3, r2
 80a4518:	d057      	beq.n	80a45ca <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80a451a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a451e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80a4522:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80a4526:	d035      	beq.n	80a4594 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80a4528:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80a452c:	d82c      	bhi.n	80a4588 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80a452e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80a4532:	d031      	beq.n	80a4598 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80a4534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80a4538:	d826      	bhi.n	80a4588 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80a453a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80a453e:	d02d      	beq.n	80a459c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80a4540:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80a4544:	d820      	bhi.n	80a4588 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80a4546:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80a454a:	d012      	beq.n	80a4572 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80a454c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80a4550:	d81a      	bhi.n	80a4588 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80a4552:	2b00      	cmp	r3, #0
 80a4554:	d024      	beq.n	80a45a0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80a4556:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80a455a:	d115      	bne.n	80a4588 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a455c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4560:	3308      	adds	r3, #8
 80a4562:	2100      	movs	r1, #0
 80a4564:	4618      	mov	r0, r3
 80a4566:	f000 fbff 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a456a:	4603      	mov	r3, r0
 80a456c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80a4570:	e017      	b.n	80a45a2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80a4572:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4576:	3328      	adds	r3, #40	@ 0x28
 80a4578:	2102      	movs	r1, #2
 80a457a:	4618      	mov	r0, r3
 80a457c:	f000 fca6 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a4580:	4603      	mov	r3, r0
 80a4582:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80a4586:	e00c      	b.n	80a45a2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a4588:	2301      	movs	r3, #1
 80a458a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a458e:	e008      	b.n	80a45a2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80a4590:	58024400 	.word	0x58024400
        break;
 80a4594:	bf00      	nop
 80a4596:	e004      	b.n	80a45a2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80a4598:	bf00      	nop
 80a459a:	e002      	b.n	80a45a2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80a459c:	bf00      	nop
 80a459e:	e000      	b.n	80a45a2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80a45a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a45a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a45a6:	2b00      	cmp	r3, #0
 80a45a8:	d10b      	bne.n	80a45c2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80a45aa:	4bc2      	ldr	r3, [pc, #776]	@ (80a48b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a45ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a45ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80a45b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a45b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80a45ba:	4abe      	ldr	r2, [pc, #760]	@ (80a48b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a45bc:	430b      	orrs	r3, r1
 80a45be:	6553      	str	r3, [r2, #84]	@ 0x54
 80a45c0:	e003      	b.n	80a45ca <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a45c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a45c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80a45ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a45ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a45d2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80a45d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80a45da:	2300      	movs	r3, #0
 80a45dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80a45e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80a45e4:	460b      	mov	r3, r1
 80a45e6:	4313      	orrs	r3, r2
 80a45e8:	d055      	beq.n	80a4696 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80a45ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a45ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80a45f2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80a45f6:	d033      	beq.n	80a4660 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80a45f8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80a45fc:	d82c      	bhi.n	80a4658 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80a45fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80a4602:	d02f      	beq.n	80a4664 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80a4604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80a4608:	d826      	bhi.n	80a4658 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80a460a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80a460e:	d02b      	beq.n	80a4668 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80a4610:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80a4614:	d820      	bhi.n	80a4658 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80a4616:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80a461a:	d012      	beq.n	80a4642 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80a461c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80a4620:	d81a      	bhi.n	80a4658 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80a4622:	2b00      	cmp	r3, #0
 80a4624:	d022      	beq.n	80a466c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80a4626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80a462a:	d115      	bne.n	80a4658 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a462c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4630:	3308      	adds	r3, #8
 80a4632:	2100      	movs	r1, #0
 80a4634:	4618      	mov	r0, r3
 80a4636:	f000 fb97 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a463a:	4603      	mov	r3, r0
 80a463c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80a4640:	e015      	b.n	80a466e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80a4642:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4646:	3328      	adds	r3, #40	@ 0x28
 80a4648:	2102      	movs	r1, #2
 80a464a:	4618      	mov	r0, r3
 80a464c:	f000 fc3e 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a4650:	4603      	mov	r3, r0
 80a4652:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80a4656:	e00a      	b.n	80a466e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a4658:	2301      	movs	r3, #1
 80a465a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a465e:	e006      	b.n	80a466e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80a4660:	bf00      	nop
 80a4662:	e004      	b.n	80a466e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80a4664:	bf00      	nop
 80a4666:	e002      	b.n	80a466e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80a4668:	bf00      	nop
 80a466a:	e000      	b.n	80a466e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80a466c:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a466e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4672:	2b00      	cmp	r3, #0
 80a4674:	d10b      	bne.n	80a468e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80a4676:	4b8f      	ldr	r3, [pc, #572]	@ (80a48b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a4678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a467a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80a467e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4682:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80a4686:	4a8b      	ldr	r2, [pc, #556]	@ (80a48b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a4688:	430b      	orrs	r3, r1
 80a468a:	6593      	str	r3, [r2, #88]	@ 0x58
 80a468c:	e003      	b.n	80a4696 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a468e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4692:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80a4696:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a469a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a469e:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80a46a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80a46a6:	2300      	movs	r3, #0
 80a46a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80a46ac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80a46b0:	460b      	mov	r3, r1
 80a46b2:	4313      	orrs	r3, r2
 80a46b4:	d055      	beq.n	80a4762 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80a46b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a46ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80a46be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80a46c2:	d033      	beq.n	80a472c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80a46c4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80a46c8:	d82c      	bhi.n	80a4724 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80a46ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80a46ce:	d02f      	beq.n	80a4730 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80a46d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80a46d4:	d826      	bhi.n	80a4724 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80a46d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80a46da:	d02b      	beq.n	80a4734 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80a46dc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80a46e0:	d820      	bhi.n	80a4724 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80a46e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80a46e6:	d012      	beq.n	80a470e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80a46e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80a46ec:	d81a      	bhi.n	80a4724 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80a46ee:	2b00      	cmp	r3, #0
 80a46f0:	d022      	beq.n	80a4738 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80a46f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80a46f6:	d115      	bne.n	80a4724 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a46f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a46fc:	3308      	adds	r3, #8
 80a46fe:	2100      	movs	r1, #0
 80a4700:	4618      	mov	r0, r3
 80a4702:	f000 fb31 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a4706:	4603      	mov	r3, r0
 80a4708:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80a470c:	e015      	b.n	80a473a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80a470e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4712:	3328      	adds	r3, #40	@ 0x28
 80a4714:	2102      	movs	r1, #2
 80a4716:	4618      	mov	r0, r3
 80a4718:	f000 fbd8 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a471c:	4603      	mov	r3, r0
 80a471e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80a4722:	e00a      	b.n	80a473a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a4724:	2301      	movs	r3, #1
 80a4726:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a472a:	e006      	b.n	80a473a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80a472c:	bf00      	nop
 80a472e:	e004      	b.n	80a473a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80a4730:	bf00      	nop
 80a4732:	e002      	b.n	80a473a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80a4734:	bf00      	nop
 80a4736:	e000      	b.n	80a473a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80a4738:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a473a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a473e:	2b00      	cmp	r3, #0
 80a4740:	d10b      	bne.n	80a475a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80a4742:	4b5c      	ldr	r3, [pc, #368]	@ (80a48b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a4744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a4746:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80a474a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a474e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80a4752:	4a58      	ldr	r2, [pc, #352]	@ (80a48b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a4754:	430b      	orrs	r3, r1
 80a4756:	6593      	str	r3, [r2, #88]	@ 0x58
 80a4758:	e003      	b.n	80a4762 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a475a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a475e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80a4762:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4766:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a476a:	f002 0308 	and.w	r3, r2, #8
 80a476e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80a4772:	2300      	movs	r3, #0
 80a4774:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80a4778:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80a477c:	460b      	mov	r3, r1
 80a477e:	4313      	orrs	r3, r2
 80a4780:	d01e      	beq.n	80a47c0 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80a4782:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80a478a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80a478e:	d10c      	bne.n	80a47aa <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80a4790:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4794:	3328      	adds	r3, #40	@ 0x28
 80a4796:	2102      	movs	r1, #2
 80a4798:	4618      	mov	r0, r3
 80a479a:	f000 fb97 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a479e:	4603      	mov	r3, r0
 80a47a0:	2b00      	cmp	r3, #0
 80a47a2:	d002      	beq.n	80a47aa <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80a47a4:	2301      	movs	r3, #1
 80a47a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80a47aa:	4b42      	ldr	r3, [pc, #264]	@ (80a48b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a47ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a47ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80a47b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a47b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80a47ba:	4a3e      	ldr	r2, [pc, #248]	@ (80a48b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a47bc:	430b      	orrs	r3, r1
 80a47be:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80a47c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a47c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a47c8:	f002 0310 	and.w	r3, r2, #16
 80a47cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80a47d0:	2300      	movs	r3, #0
 80a47d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80a47d6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80a47da:	460b      	mov	r3, r1
 80a47dc:	4313      	orrs	r3, r2
 80a47de:	d01e      	beq.n	80a481e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80a47e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a47e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80a47e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80a47ec:	d10c      	bne.n	80a4808 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80a47ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a47f2:	3328      	adds	r3, #40	@ 0x28
 80a47f4:	2102      	movs	r1, #2
 80a47f6:	4618      	mov	r0, r3
 80a47f8:	f000 fb68 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a47fc:	4603      	mov	r3, r0
 80a47fe:	2b00      	cmp	r3, #0
 80a4800:	d002      	beq.n	80a4808 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80a4802:	2301      	movs	r3, #1
 80a4804:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80a4808:	4b2a      	ldr	r3, [pc, #168]	@ (80a48b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a480a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a480c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80a4810:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4814:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80a4818:	4a26      	ldr	r2, [pc, #152]	@ (80a48b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a481a:	430b      	orrs	r3, r1
 80a481c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80a481e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4822:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4826:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80a482a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80a482e:	2300      	movs	r3, #0
 80a4830:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80a4834:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80a4838:	460b      	mov	r3, r1
 80a483a:	4313      	orrs	r3, r2
 80a483c:	d040      	beq.n	80a48c0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80a483e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4842:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80a4846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80a484a:	d022      	beq.n	80a4892 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80a484c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80a4850:	d81b      	bhi.n	80a488a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80a4852:	2b00      	cmp	r3, #0
 80a4854:	d003      	beq.n	80a485e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80a4856:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80a485a:	d00b      	beq.n	80a4874 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80a485c:	e015      	b.n	80a488a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a485e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4862:	3308      	adds	r3, #8
 80a4864:	2100      	movs	r1, #0
 80a4866:	4618      	mov	r0, r3
 80a4868:	f000 fa7e 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a486c:	4603      	mov	r3, r0
 80a486e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80a4872:	e00f      	b.n	80a4894 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80a4874:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4878:	3328      	adds	r3, #40	@ 0x28
 80a487a:	2102      	movs	r1, #2
 80a487c:	4618      	mov	r0, r3
 80a487e:	f000 fb25 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a4882:	4603      	mov	r3, r0
 80a4884:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80a4888:	e004      	b.n	80a4894 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a488a:	2301      	movs	r3, #1
 80a488c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a4890:	e000      	b.n	80a4894 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80a4892:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a4894:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4898:	2b00      	cmp	r3, #0
 80a489a:	d10d      	bne.n	80a48b8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80a489c:	4b05      	ldr	r3, [pc, #20]	@ (80a48b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a489e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a48a0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80a48a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a48a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80a48ac:	4a01      	ldr	r2, [pc, #4]	@ (80a48b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a48ae:	430b      	orrs	r3, r1
 80a48b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80a48b2:	e005      	b.n	80a48c0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80a48b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a48b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a48bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80a48c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a48c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a48c8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80a48cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80a48ce:	2300      	movs	r3, #0
 80a48d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80a48d2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80a48d6:	460b      	mov	r3, r1
 80a48d8:	4313      	orrs	r3, r2
 80a48da:	d03b      	beq.n	80a4954 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80a48dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a48e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80a48e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80a48e8:	d01f      	beq.n	80a492a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80a48ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80a48ee:	d818      	bhi.n	80a4922 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80a48f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80a48f4:	d003      	beq.n	80a48fe <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80a48f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80a48fa:	d007      	beq.n	80a490c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80a48fc:	e011      	b.n	80a4922 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a48fe:	4b64      	ldr	r3, [pc, #400]	@ (80a4a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4902:	4a63      	ldr	r2, [pc, #396]	@ (80a4a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a4908:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80a490a:	e00f      	b.n	80a492c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80a490c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4910:	3328      	adds	r3, #40	@ 0x28
 80a4912:	2101      	movs	r1, #1
 80a4914:	4618      	mov	r0, r3
 80a4916:	f000 fad9 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a491a:	4603      	mov	r3, r0
 80a491c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80a4920:	e004      	b.n	80a492c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a4922:	2301      	movs	r3, #1
 80a4924:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a4928:	e000      	b.n	80a492c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80a492a:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a492c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4930:	2b00      	cmp	r3, #0
 80a4932:	d10b      	bne.n	80a494c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80a4934:	4b56      	ldr	r3, [pc, #344]	@ (80a4a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a4938:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80a493c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80a4944:	4a52      	ldr	r2, [pc, #328]	@ (80a4a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4946:	430b      	orrs	r3, r1
 80a4948:	6553      	str	r3, [r2, #84]	@ 0x54
 80a494a:	e003      	b.n	80a4954 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a494c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4950:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80a4954:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4958:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a495c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80a4960:	673b      	str	r3, [r7, #112]	@ 0x70
 80a4962:	2300      	movs	r3, #0
 80a4964:	677b      	str	r3, [r7, #116]	@ 0x74
 80a4966:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80a496a:	460b      	mov	r3, r1
 80a496c:	4313      	orrs	r3, r2
 80a496e:	d031      	beq.n	80a49d4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80a4970:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a4976:	2b00      	cmp	r3, #0
 80a4978:	d003      	beq.n	80a4982 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80a497a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80a497e:	d007      	beq.n	80a4990 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80a4980:	e011      	b.n	80a49a6 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a4982:	4b43      	ldr	r3, [pc, #268]	@ (80a4a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4986:	4a42      	ldr	r2, [pc, #264]	@ (80a4a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a498c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80a498e:	e00e      	b.n	80a49ae <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80a4990:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4994:	3308      	adds	r3, #8
 80a4996:	2102      	movs	r1, #2
 80a4998:	4618      	mov	r0, r3
 80a499a:	f000 f9e5 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a499e:	4603      	mov	r3, r0
 80a49a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80a49a4:	e003      	b.n	80a49ae <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80a49a6:	2301      	movs	r3, #1
 80a49a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a49ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a49ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a49b2:	2b00      	cmp	r3, #0
 80a49b4:	d10a      	bne.n	80a49cc <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80a49b6:	4b36      	ldr	r3, [pc, #216]	@ (80a4a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a49b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80a49ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80a49be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a49c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a49c4:	4a32      	ldr	r2, [pc, #200]	@ (80a4a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a49c6:	430b      	orrs	r3, r1
 80a49c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80a49ca:	e003      	b.n	80a49d4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a49cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a49d0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80a49d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a49d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a49dc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80a49e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80a49e2:	2300      	movs	r3, #0
 80a49e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80a49e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80a49ea:	460b      	mov	r3, r1
 80a49ec:	4313      	orrs	r3, r2
 80a49ee:	d00c      	beq.n	80a4a0a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80a49f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a49f4:	3328      	adds	r3, #40	@ 0x28
 80a49f6:	2102      	movs	r1, #2
 80a49f8:	4618      	mov	r0, r3
 80a49fa:	f000 fa67 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a49fe:	4603      	mov	r3, r0
 80a4a00:	2b00      	cmp	r3, #0
 80a4a02:	d002      	beq.n	80a4a0a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80a4a04:	2301      	movs	r3, #1
 80a4a06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80a4a0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4a12:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80a4a16:	663b      	str	r3, [r7, #96]	@ 0x60
 80a4a18:	2300      	movs	r3, #0
 80a4a1a:	667b      	str	r3, [r7, #100]	@ 0x64
 80a4a1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80a4a20:	460b      	mov	r3, r1
 80a4a22:	4313      	orrs	r3, r2
 80a4a24:	d03a      	beq.n	80a4a9c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80a4a26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80a4a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80a4a32:	d018      	beq.n	80a4a66 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80a4a34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80a4a38:	d811      	bhi.n	80a4a5e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80a4a3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80a4a3e:	d014      	beq.n	80a4a6a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80a4a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80a4a44:	d80b      	bhi.n	80a4a5e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80a4a46:	2b00      	cmp	r3, #0
 80a4a48:	d011      	beq.n	80a4a6e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80a4a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80a4a4e:	d106      	bne.n	80a4a5e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a4a50:	4b0f      	ldr	r3, [pc, #60]	@ (80a4a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4a54:	4a0e      	ldr	r2, [pc, #56]	@ (80a4a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a4a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80a4a5c:	e008      	b.n	80a4a70 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a4a5e:	2301      	movs	r3, #1
 80a4a60:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a4a64:	e004      	b.n	80a4a70 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80a4a66:	bf00      	nop
 80a4a68:	e002      	b.n	80a4a70 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80a4a6a:	bf00      	nop
 80a4a6c:	e000      	b.n	80a4a70 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80a4a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a4a70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4a74:	2b00      	cmp	r3, #0
 80a4a76:	d10d      	bne.n	80a4a94 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80a4a78:	4b05      	ldr	r3, [pc, #20]	@ (80a4a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a4a7c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80a4a80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80a4a88:	4a01      	ldr	r2, [pc, #4]	@ (80a4a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4a8a:	430b      	orrs	r3, r1
 80a4a8c:	6553      	str	r3, [r2, #84]	@ 0x54
 80a4a8e:	e005      	b.n	80a4a9c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80a4a90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4a94:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4a98:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80a4a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4aa4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80a4aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80a4aaa:	2300      	movs	r3, #0
 80a4aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80a4aae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80a4ab2:	460b      	mov	r3, r1
 80a4ab4:	4313      	orrs	r3, r2
 80a4ab6:	d009      	beq.n	80a4acc <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80a4ab8:	4baa      	ldr	r3, [pc, #680]	@ (80a4d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a4abc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80a4ac0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4ac4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80a4ac6:	4aa7      	ldr	r2, [pc, #668]	@ (80a4d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4ac8:	430b      	orrs	r3, r1
 80a4aca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80a4acc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4ad4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80a4ad8:	653b      	str	r3, [r7, #80]	@ 0x50
 80a4ada:	2300      	movs	r3, #0
 80a4adc:	657b      	str	r3, [r7, #84]	@ 0x54
 80a4ade:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80a4ae2:	460b      	mov	r3, r1
 80a4ae4:	4313      	orrs	r3, r2
 80a4ae6:	d00a      	beq.n	80a4afe <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80a4ae8:	4b9e      	ldr	r3, [pc, #632]	@ (80a4d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4aea:	691b      	ldr	r3, [r3, #16]
 80a4aec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80a4af0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4af4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80a4af8:	4a9a      	ldr	r2, [pc, #616]	@ (80a4d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4afa:	430b      	orrs	r3, r1
 80a4afc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80a4afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b06:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80a4b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 80a4b0c:	2300      	movs	r3, #0
 80a4b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80a4b10:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80a4b14:	460b      	mov	r3, r1
 80a4b16:	4313      	orrs	r3, r2
 80a4b18:	d009      	beq.n	80a4b2e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80a4b1a:	4b92      	ldr	r3, [pc, #584]	@ (80a4d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a4b1e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80a4b22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a4b28:	4a8e      	ldr	r2, [pc, #568]	@ (80a4d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4b2a:	430b      	orrs	r3, r1
 80a4b2c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80a4b2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b36:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80a4b3a:	643b      	str	r3, [r7, #64]	@ 0x40
 80a4b3c:	2300      	movs	r3, #0
 80a4b3e:	647b      	str	r3, [r7, #68]	@ 0x44
 80a4b40:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80a4b44:	460b      	mov	r3, r1
 80a4b46:	4313      	orrs	r3, r2
 80a4b48:	d00e      	beq.n	80a4b68 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80a4b4a:	4b86      	ldr	r3, [pc, #536]	@ (80a4d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4b4c:	691b      	ldr	r3, [r3, #16]
 80a4b4e:	4a85      	ldr	r2, [pc, #532]	@ (80a4d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4b50:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80a4b54:	6113      	str	r3, [r2, #16]
 80a4b56:	4b83      	ldr	r3, [pc, #524]	@ (80a4d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4b58:	6919      	ldr	r1, [r3, #16]
 80a4b5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4b5e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80a4b62:	4a80      	ldr	r2, [pc, #512]	@ (80a4d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4b64:	430b      	orrs	r3, r1
 80a4b66:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80a4b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b70:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80a4b74:	63bb      	str	r3, [r7, #56]	@ 0x38
 80a4b76:	2300      	movs	r3, #0
 80a4b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80a4b7a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80a4b7e:	460b      	mov	r3, r1
 80a4b80:	4313      	orrs	r3, r2
 80a4b82:	d009      	beq.n	80a4b98 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80a4b84:	4b77      	ldr	r3, [pc, #476]	@ (80a4d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80a4b88:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80a4b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a4b92:	4a74      	ldr	r2, [pc, #464]	@ (80a4d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4b94:	430b      	orrs	r3, r1
 80a4b96:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80a4b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4ba0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80a4ba4:	633b      	str	r3, [r7, #48]	@ 0x30
 80a4ba6:	2300      	movs	r3, #0
 80a4ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 80a4baa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80a4bae:	460b      	mov	r3, r1
 80a4bb0:	4313      	orrs	r3, r2
 80a4bb2:	d00a      	beq.n	80a4bca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80a4bb4:	4b6b      	ldr	r3, [pc, #428]	@ (80a4d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a4bb8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80a4bbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80a4bc4:	4a67      	ldr	r2, [pc, #412]	@ (80a4d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4bc6:	430b      	orrs	r3, r1
 80a4bc8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80a4bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4bd2:	2100      	movs	r1, #0
 80a4bd4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80a4bd6:	f003 0301 	and.w	r3, r3, #1
 80a4bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80a4bdc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80a4be0:	460b      	mov	r3, r1
 80a4be2:	4313      	orrs	r3, r2
 80a4be4:	d011      	beq.n	80a4c0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a4be6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4bea:	3308      	adds	r3, #8
 80a4bec:	2100      	movs	r1, #0
 80a4bee:	4618      	mov	r0, r3
 80a4bf0:	f000 f8ba 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a4bf4:	4603      	mov	r3, r0
 80a4bf6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80a4bfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4bfe:	2b00      	cmp	r3, #0
 80a4c00:	d003      	beq.n	80a4c0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4c02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4c06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80a4c0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c12:	2100      	movs	r1, #0
 80a4c14:	6239      	str	r1, [r7, #32]
 80a4c16:	f003 0302 	and.w	r3, r3, #2
 80a4c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 80a4c1c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80a4c20:	460b      	mov	r3, r1
 80a4c22:	4313      	orrs	r3, r2
 80a4c24:	d011      	beq.n	80a4c4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80a4c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4c2a:	3308      	adds	r3, #8
 80a4c2c:	2101      	movs	r1, #1
 80a4c2e:	4618      	mov	r0, r3
 80a4c30:	f000 f89a 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a4c34:	4603      	mov	r3, r0
 80a4c36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80a4c3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4c3e:	2b00      	cmp	r3, #0
 80a4c40:	d003      	beq.n	80a4c4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4c42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4c46:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80a4c4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c52:	2100      	movs	r1, #0
 80a4c54:	61b9      	str	r1, [r7, #24]
 80a4c56:	f003 0304 	and.w	r3, r3, #4
 80a4c5a:	61fb      	str	r3, [r7, #28]
 80a4c5c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80a4c60:	460b      	mov	r3, r1
 80a4c62:	4313      	orrs	r3, r2
 80a4c64:	d011      	beq.n	80a4c8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80a4c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4c6a:	3308      	adds	r3, #8
 80a4c6c:	2102      	movs	r1, #2
 80a4c6e:	4618      	mov	r0, r3
 80a4c70:	f000 f87a 	bl	80a4d68 <RCCEx_PLL2_Config>
 80a4c74:	4603      	mov	r3, r0
 80a4c76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80a4c7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4c7e:	2b00      	cmp	r3, #0
 80a4c80:	d003      	beq.n	80a4c8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4c82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4c86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80a4c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c92:	2100      	movs	r1, #0
 80a4c94:	6139      	str	r1, [r7, #16]
 80a4c96:	f003 0308 	and.w	r3, r3, #8
 80a4c9a:	617b      	str	r3, [r7, #20]
 80a4c9c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80a4ca0:	460b      	mov	r3, r1
 80a4ca2:	4313      	orrs	r3, r2
 80a4ca4:	d011      	beq.n	80a4cca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80a4ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4caa:	3328      	adds	r3, #40	@ 0x28
 80a4cac:	2100      	movs	r1, #0
 80a4cae:	4618      	mov	r0, r3
 80a4cb0:	f000 f90c 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a4cb4:	4603      	mov	r3, r0
 80a4cb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80a4cba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4cbe:	2b00      	cmp	r3, #0
 80a4cc0:	d003      	beq.n	80a4cca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4cc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4cc6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80a4cca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4cd2:	2100      	movs	r1, #0
 80a4cd4:	60b9      	str	r1, [r7, #8]
 80a4cd6:	f003 0310 	and.w	r3, r3, #16
 80a4cda:	60fb      	str	r3, [r7, #12]
 80a4cdc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80a4ce0:	460b      	mov	r3, r1
 80a4ce2:	4313      	orrs	r3, r2
 80a4ce4:	d011      	beq.n	80a4d0a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80a4ce6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4cea:	3328      	adds	r3, #40	@ 0x28
 80a4cec:	2101      	movs	r1, #1
 80a4cee:	4618      	mov	r0, r3
 80a4cf0:	f000 f8ec 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a4cf4:	4603      	mov	r3, r0
 80a4cf6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80a4cfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4cfe:	2b00      	cmp	r3, #0
 80a4d00:	d003      	beq.n	80a4d0a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4d02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4d06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80a4d0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d12:	2100      	movs	r1, #0
 80a4d14:	6039      	str	r1, [r7, #0]
 80a4d16:	f003 0320 	and.w	r3, r3, #32
 80a4d1a:	607b      	str	r3, [r7, #4]
 80a4d1c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80a4d20:	460b      	mov	r3, r1
 80a4d22:	4313      	orrs	r3, r2
 80a4d24:	d011      	beq.n	80a4d4a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80a4d26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4d2a:	3328      	adds	r3, #40	@ 0x28
 80a4d2c:	2102      	movs	r1, #2
 80a4d2e:	4618      	mov	r0, r3
 80a4d30:	f000 f8cc 	bl	80a4ecc <RCCEx_PLL3_Config>
 80a4d34:	4603      	mov	r3, r0
 80a4d36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80a4d3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4d3e:	2b00      	cmp	r3, #0
 80a4d40:	d003      	beq.n	80a4d4a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4d42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4d46:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80a4d4a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80a4d4e:	2b00      	cmp	r3, #0
 80a4d50:	d101      	bne.n	80a4d56 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80a4d52:	2300      	movs	r3, #0
 80a4d54:	e000      	b.n	80a4d58 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80a4d56:	2301      	movs	r3, #1
}
 80a4d58:	4618      	mov	r0, r3
 80a4d5a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80a4d5e:	46bd      	mov	sp, r7
 80a4d60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80a4d64:	58024400 	.word	0x58024400

080a4d68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80a4d68:	b580      	push	{r7, lr}
 80a4d6a:	b084      	sub	sp, #16
 80a4d6c:	af00      	add	r7, sp, #0
 80a4d6e:	6078      	str	r0, [r7, #4]
 80a4d70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80a4d72:	2300      	movs	r3, #0
 80a4d74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80a4d76:	4b53      	ldr	r3, [pc, #332]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a4d7a:	f003 0303 	and.w	r3, r3, #3
 80a4d7e:	2b03      	cmp	r3, #3
 80a4d80:	d101      	bne.n	80a4d86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80a4d82:	2301      	movs	r3, #1
 80a4d84:	e099      	b.n	80a4eba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80a4d86:	4b4f      	ldr	r3, [pc, #316]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4d88:	681b      	ldr	r3, [r3, #0]
 80a4d8a:	4a4e      	ldr	r2, [pc, #312]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4d8c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80a4d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80a4d92:	f7fb ff13 	bl	80a0bbc <HAL_GetTick>
 80a4d96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80a4d98:	e008      	b.n	80a4dac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80a4d9a:	f7fb ff0f 	bl	80a0bbc <HAL_GetTick>
 80a4d9e:	4602      	mov	r2, r0
 80a4da0:	68bb      	ldr	r3, [r7, #8]
 80a4da2:	1ad3      	subs	r3, r2, r3
 80a4da4:	2b02      	cmp	r3, #2
 80a4da6:	d901      	bls.n	80a4dac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80a4da8:	2303      	movs	r3, #3
 80a4daa:	e086      	b.n	80a4eba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80a4dac:	4b45      	ldr	r3, [pc, #276]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4dae:	681b      	ldr	r3, [r3, #0]
 80a4db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80a4db4:	2b00      	cmp	r3, #0
 80a4db6:	d1f0      	bne.n	80a4d9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80a4db8:	4b42      	ldr	r3, [pc, #264]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a4dbc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80a4dc0:	687b      	ldr	r3, [r7, #4]
 80a4dc2:	681b      	ldr	r3, [r3, #0]
 80a4dc4:	031b      	lsls	r3, r3, #12
 80a4dc6:	493f      	ldr	r1, [pc, #252]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4dc8:	4313      	orrs	r3, r2
 80a4dca:	628b      	str	r3, [r1, #40]	@ 0x28
 80a4dcc:	687b      	ldr	r3, [r7, #4]
 80a4dce:	685b      	ldr	r3, [r3, #4]
 80a4dd0:	3b01      	subs	r3, #1
 80a4dd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80a4dd6:	687b      	ldr	r3, [r7, #4]
 80a4dd8:	689b      	ldr	r3, [r3, #8]
 80a4dda:	3b01      	subs	r3, #1
 80a4ddc:	025b      	lsls	r3, r3, #9
 80a4dde:	b29b      	uxth	r3, r3
 80a4de0:	431a      	orrs	r2, r3
 80a4de2:	687b      	ldr	r3, [r7, #4]
 80a4de4:	68db      	ldr	r3, [r3, #12]
 80a4de6:	3b01      	subs	r3, #1
 80a4de8:	041b      	lsls	r3, r3, #16
 80a4dea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80a4dee:	431a      	orrs	r2, r3
 80a4df0:	687b      	ldr	r3, [r7, #4]
 80a4df2:	691b      	ldr	r3, [r3, #16]
 80a4df4:	3b01      	subs	r3, #1
 80a4df6:	061b      	lsls	r3, r3, #24
 80a4df8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80a4dfc:	4931      	ldr	r1, [pc, #196]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4dfe:	4313      	orrs	r3, r2
 80a4e00:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80a4e02:	4b30      	ldr	r3, [pc, #192]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4e06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80a4e0a:	687b      	ldr	r3, [r7, #4]
 80a4e0c:	695b      	ldr	r3, [r3, #20]
 80a4e0e:	492d      	ldr	r1, [pc, #180]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e10:	4313      	orrs	r3, r2
 80a4e12:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80a4e14:	4b2b      	ldr	r3, [pc, #172]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4e18:	f023 0220 	bic.w	r2, r3, #32
 80a4e1c:	687b      	ldr	r3, [r7, #4]
 80a4e1e:	699b      	ldr	r3, [r3, #24]
 80a4e20:	4928      	ldr	r1, [pc, #160]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e22:	4313      	orrs	r3, r2
 80a4e24:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80a4e26:	4b27      	ldr	r3, [pc, #156]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4e2a:	4a26      	ldr	r2, [pc, #152]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e2c:	f023 0310 	bic.w	r3, r3, #16
 80a4e30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80a4e32:	4b24      	ldr	r3, [pc, #144]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80a4e36:	4b24      	ldr	r3, [pc, #144]	@ (80a4ec8 <RCCEx_PLL2_Config+0x160>)
 80a4e38:	4013      	ands	r3, r2
 80a4e3a:	687a      	ldr	r2, [r7, #4]
 80a4e3c:	69d2      	ldr	r2, [r2, #28]
 80a4e3e:	00d2      	lsls	r2, r2, #3
 80a4e40:	4920      	ldr	r1, [pc, #128]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e42:	4313      	orrs	r3, r2
 80a4e44:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80a4e46:	4b1f      	ldr	r3, [pc, #124]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4e4a:	4a1e      	ldr	r2, [pc, #120]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e4c:	f043 0310 	orr.w	r3, r3, #16
 80a4e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80a4e52:	683b      	ldr	r3, [r7, #0]
 80a4e54:	2b00      	cmp	r3, #0
 80a4e56:	d106      	bne.n	80a4e66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80a4e58:	4b1a      	ldr	r3, [pc, #104]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4e5c:	4a19      	ldr	r2, [pc, #100]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80a4e62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80a4e64:	e00f      	b.n	80a4e86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80a4e66:	683b      	ldr	r3, [r7, #0]
 80a4e68:	2b01      	cmp	r3, #1
 80a4e6a:	d106      	bne.n	80a4e7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80a4e6c:	4b15      	ldr	r3, [pc, #84]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4e70:	4a14      	ldr	r2, [pc, #80]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80a4e76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80a4e78:	e005      	b.n	80a4e86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80a4e7a:	4b12      	ldr	r3, [pc, #72]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4e7e:	4a11      	ldr	r2, [pc, #68]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80a4e84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80a4e86:	4b0f      	ldr	r3, [pc, #60]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e88:	681b      	ldr	r3, [r3, #0]
 80a4e8a:	4a0e      	ldr	r2, [pc, #56]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4e8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80a4e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80a4e92:	f7fb fe93 	bl	80a0bbc <HAL_GetTick>
 80a4e96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80a4e98:	e008      	b.n	80a4eac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80a4e9a:	f7fb fe8f 	bl	80a0bbc <HAL_GetTick>
 80a4e9e:	4602      	mov	r2, r0
 80a4ea0:	68bb      	ldr	r3, [r7, #8]
 80a4ea2:	1ad3      	subs	r3, r2, r3
 80a4ea4:	2b02      	cmp	r3, #2
 80a4ea6:	d901      	bls.n	80a4eac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80a4ea8:	2303      	movs	r3, #3
 80a4eaa:	e006      	b.n	80a4eba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80a4eac:	4b05      	ldr	r3, [pc, #20]	@ (80a4ec4 <RCCEx_PLL2_Config+0x15c>)
 80a4eae:	681b      	ldr	r3, [r3, #0]
 80a4eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80a4eb4:	2b00      	cmp	r3, #0
 80a4eb6:	d0f0      	beq.n	80a4e9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80a4eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 80a4eba:	4618      	mov	r0, r3
 80a4ebc:	3710      	adds	r7, #16
 80a4ebe:	46bd      	mov	sp, r7
 80a4ec0:	bd80      	pop	{r7, pc}
 80a4ec2:	bf00      	nop
 80a4ec4:	58024400 	.word	0x58024400
 80a4ec8:	ffff0007 	.word	0xffff0007

080a4ecc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80a4ecc:	b580      	push	{r7, lr}
 80a4ece:	b084      	sub	sp, #16
 80a4ed0:	af00      	add	r7, sp, #0
 80a4ed2:	6078      	str	r0, [r7, #4]
 80a4ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80a4ed6:	2300      	movs	r3, #0
 80a4ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80a4eda:	4b53      	ldr	r3, [pc, #332]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a4ede:	f003 0303 	and.w	r3, r3, #3
 80a4ee2:	2b03      	cmp	r3, #3
 80a4ee4:	d101      	bne.n	80a4eea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80a4ee6:	2301      	movs	r3, #1
 80a4ee8:	e099      	b.n	80a501e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80a4eea:	4b4f      	ldr	r3, [pc, #316]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4eec:	681b      	ldr	r3, [r3, #0]
 80a4eee:	4a4e      	ldr	r2, [pc, #312]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80a4ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80a4ef6:	f7fb fe61 	bl	80a0bbc <HAL_GetTick>
 80a4efa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80a4efc:	e008      	b.n	80a4f10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80a4efe:	f7fb fe5d 	bl	80a0bbc <HAL_GetTick>
 80a4f02:	4602      	mov	r2, r0
 80a4f04:	68bb      	ldr	r3, [r7, #8]
 80a4f06:	1ad3      	subs	r3, r2, r3
 80a4f08:	2b02      	cmp	r3, #2
 80a4f0a:	d901      	bls.n	80a4f10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80a4f0c:	2303      	movs	r3, #3
 80a4f0e:	e086      	b.n	80a501e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80a4f10:	4b45      	ldr	r3, [pc, #276]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4f12:	681b      	ldr	r3, [r3, #0]
 80a4f14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80a4f18:	2b00      	cmp	r3, #0
 80a4f1a:	d1f0      	bne.n	80a4efe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80a4f1c:	4b42      	ldr	r3, [pc, #264]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a4f20:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80a4f24:	687b      	ldr	r3, [r7, #4]
 80a4f26:	681b      	ldr	r3, [r3, #0]
 80a4f28:	051b      	lsls	r3, r3, #20
 80a4f2a:	493f      	ldr	r1, [pc, #252]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4f2c:	4313      	orrs	r3, r2
 80a4f2e:	628b      	str	r3, [r1, #40]	@ 0x28
 80a4f30:	687b      	ldr	r3, [r7, #4]
 80a4f32:	685b      	ldr	r3, [r3, #4]
 80a4f34:	3b01      	subs	r3, #1
 80a4f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80a4f3a:	687b      	ldr	r3, [r7, #4]
 80a4f3c:	689b      	ldr	r3, [r3, #8]
 80a4f3e:	3b01      	subs	r3, #1
 80a4f40:	025b      	lsls	r3, r3, #9
 80a4f42:	b29b      	uxth	r3, r3
 80a4f44:	431a      	orrs	r2, r3
 80a4f46:	687b      	ldr	r3, [r7, #4]
 80a4f48:	68db      	ldr	r3, [r3, #12]
 80a4f4a:	3b01      	subs	r3, #1
 80a4f4c:	041b      	lsls	r3, r3, #16
 80a4f4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80a4f52:	431a      	orrs	r2, r3
 80a4f54:	687b      	ldr	r3, [r7, #4]
 80a4f56:	691b      	ldr	r3, [r3, #16]
 80a4f58:	3b01      	subs	r3, #1
 80a4f5a:	061b      	lsls	r3, r3, #24
 80a4f5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80a4f60:	4931      	ldr	r1, [pc, #196]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4f62:	4313      	orrs	r3, r2
 80a4f64:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80a4f66:	4b30      	ldr	r3, [pc, #192]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4f6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80a4f6e:	687b      	ldr	r3, [r7, #4]
 80a4f70:	695b      	ldr	r3, [r3, #20]
 80a4f72:	492d      	ldr	r1, [pc, #180]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4f74:	4313      	orrs	r3, r2
 80a4f76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80a4f78:	4b2b      	ldr	r3, [pc, #172]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4f7c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80a4f80:	687b      	ldr	r3, [r7, #4]
 80a4f82:	699b      	ldr	r3, [r3, #24]
 80a4f84:	4928      	ldr	r1, [pc, #160]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4f86:	4313      	orrs	r3, r2
 80a4f88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80a4f8a:	4b27      	ldr	r3, [pc, #156]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4f8e:	4a26      	ldr	r2, [pc, #152]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80a4f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80a4f96:	4b24      	ldr	r3, [pc, #144]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80a4f9a:	4b24      	ldr	r3, [pc, #144]	@ (80a502c <RCCEx_PLL3_Config+0x160>)
 80a4f9c:	4013      	ands	r3, r2
 80a4f9e:	687a      	ldr	r2, [r7, #4]
 80a4fa0:	69d2      	ldr	r2, [r2, #28]
 80a4fa2:	00d2      	lsls	r2, r2, #3
 80a4fa4:	4920      	ldr	r1, [pc, #128]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4fa6:	4313      	orrs	r3, r2
 80a4fa8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80a4faa:	4b1f      	ldr	r3, [pc, #124]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4fae:	4a1e      	ldr	r2, [pc, #120]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80a4fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80a4fb6:	683b      	ldr	r3, [r7, #0]
 80a4fb8:	2b00      	cmp	r3, #0
 80a4fba:	d106      	bne.n	80a4fca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80a4fbc:	4b1a      	ldr	r3, [pc, #104]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4fc0:	4a19      	ldr	r2, [pc, #100]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4fc2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80a4fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80a4fc8:	e00f      	b.n	80a4fea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80a4fca:	683b      	ldr	r3, [r7, #0]
 80a4fcc:	2b01      	cmp	r3, #1
 80a4fce:	d106      	bne.n	80a4fde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80a4fd0:	4b15      	ldr	r3, [pc, #84]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4fd4:	4a14      	ldr	r2, [pc, #80]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4fd6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80a4fda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80a4fdc:	e005      	b.n	80a4fea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80a4fde:	4b12      	ldr	r3, [pc, #72]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4fe2:	4a11      	ldr	r2, [pc, #68]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4fe4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80a4fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80a4fea:	4b0f      	ldr	r3, [pc, #60]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4fec:	681b      	ldr	r3, [r3, #0]
 80a4fee:	4a0e      	ldr	r2, [pc, #56]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a4ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80a4ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80a4ff6:	f7fb fde1 	bl	80a0bbc <HAL_GetTick>
 80a4ffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80a4ffc:	e008      	b.n	80a5010 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80a4ffe:	f7fb fddd 	bl	80a0bbc <HAL_GetTick>
 80a5002:	4602      	mov	r2, r0
 80a5004:	68bb      	ldr	r3, [r7, #8]
 80a5006:	1ad3      	subs	r3, r2, r3
 80a5008:	2b02      	cmp	r3, #2
 80a500a:	d901      	bls.n	80a5010 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80a500c:	2303      	movs	r3, #3
 80a500e:	e006      	b.n	80a501e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80a5010:	4b05      	ldr	r3, [pc, #20]	@ (80a5028 <RCCEx_PLL3_Config+0x15c>)
 80a5012:	681b      	ldr	r3, [r3, #0]
 80a5014:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80a5018:	2b00      	cmp	r3, #0
 80a501a:	d0f0      	beq.n	80a4ffe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80a501c:	7bfb      	ldrb	r3, [r7, #15]
}
 80a501e:	4618      	mov	r0, r3
 80a5020:	3710      	adds	r7, #16
 80a5022:	46bd      	mov	sp, r7
 80a5024:	bd80      	pop	{r7, pc}
 80a5026:	bf00      	nop
 80a5028:	58024400 	.word	0x58024400
 80a502c:	ffff0007 	.word	0xffff0007

080a5030 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80a5030:	b084      	sub	sp, #16
 80a5032:	b580      	push	{r7, lr}
 80a5034:	b084      	sub	sp, #16
 80a5036:	af00      	add	r7, sp, #0
 80a5038:	6078      	str	r0, [r7, #4]
 80a503a:	f107 001c 	add.w	r0, r7, #28
 80a503e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80a5042:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80a5046:	2b01      	cmp	r3, #1
 80a5048:	d121      	bne.n	80a508e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80a504a:	687b      	ldr	r3, [r7, #4]
 80a504c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80a504e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80a5052:	687b      	ldr	r3, [r7, #4]
 80a5054:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80a5056:	687b      	ldr	r3, [r7, #4]
 80a5058:	68da      	ldr	r2, [r3, #12]
 80a505a:	4b2c      	ldr	r3, [pc, #176]	@ (80a510c <USB_CoreInit+0xdc>)
 80a505c:	4013      	ands	r3, r2
 80a505e:	687a      	ldr	r2, [r7, #4]
 80a5060:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80a5062:	687b      	ldr	r3, [r7, #4]
 80a5064:	68db      	ldr	r3, [r3, #12]
 80a5066:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80a506a:	687b      	ldr	r3, [r7, #4]
 80a506c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80a506e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80a5072:	2b01      	cmp	r3, #1
 80a5074:	d105      	bne.n	80a5082 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80a5076:	687b      	ldr	r3, [r7, #4]
 80a5078:	68db      	ldr	r3, [r3, #12]
 80a507a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80a507e:	687b      	ldr	r3, [r7, #4]
 80a5080:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80a5082:	6878      	ldr	r0, [r7, #4]
 80a5084:	f001 fafa 	bl	80a667c <USB_CoreReset>
 80a5088:	4603      	mov	r3, r0
 80a508a:	73fb      	strb	r3, [r7, #15]
 80a508c:	e01b      	b.n	80a50c6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80a508e:	687b      	ldr	r3, [r7, #4]
 80a5090:	68db      	ldr	r3, [r3, #12]
 80a5092:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80a5096:	687b      	ldr	r3, [r7, #4]
 80a5098:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80a509a:	6878      	ldr	r0, [r7, #4]
 80a509c:	f001 faee 	bl	80a667c <USB_CoreReset>
 80a50a0:	4603      	mov	r3, r0
 80a50a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80a50a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80a50a8:	2b00      	cmp	r3, #0
 80a50aa:	d106      	bne.n	80a50ba <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80a50ac:	687b      	ldr	r3, [r7, #4]
 80a50ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80a50b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80a50b4:	687b      	ldr	r3, [r7, #4]
 80a50b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80a50b8:	e005      	b.n	80a50c6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80a50ba:	687b      	ldr	r3, [r7, #4]
 80a50bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80a50be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80a50c2:	687b      	ldr	r3, [r7, #4]
 80a50c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80a50c6:	7fbb      	ldrb	r3, [r7, #30]
 80a50c8:	2b01      	cmp	r3, #1
 80a50ca:	d116      	bne.n	80a50fa <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80a50cc:	687b      	ldr	r3, [r7, #4]
 80a50ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80a50d0:	b29a      	uxth	r2, r3
 80a50d2:	687b      	ldr	r3, [r7, #4]
 80a50d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80a50d6:	687b      	ldr	r3, [r7, #4]
 80a50d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80a50da:	4b0d      	ldr	r3, [pc, #52]	@ (80a5110 <USB_CoreInit+0xe0>)
 80a50dc:	4313      	orrs	r3, r2
 80a50de:	687a      	ldr	r2, [r7, #4]
 80a50e0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80a50e2:	687b      	ldr	r3, [r7, #4]
 80a50e4:	689b      	ldr	r3, [r3, #8]
 80a50e6:	f043 0206 	orr.w	r2, r3, #6
 80a50ea:	687b      	ldr	r3, [r7, #4]
 80a50ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80a50ee:	687b      	ldr	r3, [r7, #4]
 80a50f0:	689b      	ldr	r3, [r3, #8]
 80a50f2:	f043 0220 	orr.w	r2, r3, #32
 80a50f6:	687b      	ldr	r3, [r7, #4]
 80a50f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80a50fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80a50fc:	4618      	mov	r0, r3
 80a50fe:	3710      	adds	r7, #16
 80a5100:	46bd      	mov	sp, r7
 80a5102:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80a5106:	b004      	add	sp, #16
 80a5108:	4770      	bx	lr
 80a510a:	bf00      	nop
 80a510c:	ffbdffbf 	.word	0xffbdffbf
 80a5110:	03ee0000 	.word	0x03ee0000

080a5114 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80a5114:	b480      	push	{r7}
 80a5116:	b087      	sub	sp, #28
 80a5118:	af00      	add	r7, sp, #0
 80a511a:	60f8      	str	r0, [r7, #12]
 80a511c:	60b9      	str	r1, [r7, #8]
 80a511e:	4613      	mov	r3, r2
 80a5120:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80a5122:	79fb      	ldrb	r3, [r7, #7]
 80a5124:	2b02      	cmp	r3, #2
 80a5126:	d165      	bne.n	80a51f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80a5128:	68bb      	ldr	r3, [r7, #8]
 80a512a:	4a41      	ldr	r2, [pc, #260]	@ (80a5230 <USB_SetTurnaroundTime+0x11c>)
 80a512c:	4293      	cmp	r3, r2
 80a512e:	d906      	bls.n	80a513e <USB_SetTurnaroundTime+0x2a>
 80a5130:	68bb      	ldr	r3, [r7, #8]
 80a5132:	4a40      	ldr	r2, [pc, #256]	@ (80a5234 <USB_SetTurnaroundTime+0x120>)
 80a5134:	4293      	cmp	r3, r2
 80a5136:	d202      	bcs.n	80a513e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80a5138:	230f      	movs	r3, #15
 80a513a:	617b      	str	r3, [r7, #20]
 80a513c:	e062      	b.n	80a5204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80a513e:	68bb      	ldr	r3, [r7, #8]
 80a5140:	4a3c      	ldr	r2, [pc, #240]	@ (80a5234 <USB_SetTurnaroundTime+0x120>)
 80a5142:	4293      	cmp	r3, r2
 80a5144:	d306      	bcc.n	80a5154 <USB_SetTurnaroundTime+0x40>
 80a5146:	68bb      	ldr	r3, [r7, #8]
 80a5148:	4a3b      	ldr	r2, [pc, #236]	@ (80a5238 <USB_SetTurnaroundTime+0x124>)
 80a514a:	4293      	cmp	r3, r2
 80a514c:	d202      	bcs.n	80a5154 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80a514e:	230e      	movs	r3, #14
 80a5150:	617b      	str	r3, [r7, #20]
 80a5152:	e057      	b.n	80a5204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80a5154:	68bb      	ldr	r3, [r7, #8]
 80a5156:	4a38      	ldr	r2, [pc, #224]	@ (80a5238 <USB_SetTurnaroundTime+0x124>)
 80a5158:	4293      	cmp	r3, r2
 80a515a:	d306      	bcc.n	80a516a <USB_SetTurnaroundTime+0x56>
 80a515c:	68bb      	ldr	r3, [r7, #8]
 80a515e:	4a37      	ldr	r2, [pc, #220]	@ (80a523c <USB_SetTurnaroundTime+0x128>)
 80a5160:	4293      	cmp	r3, r2
 80a5162:	d202      	bcs.n	80a516a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80a5164:	230d      	movs	r3, #13
 80a5166:	617b      	str	r3, [r7, #20]
 80a5168:	e04c      	b.n	80a5204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80a516a:	68bb      	ldr	r3, [r7, #8]
 80a516c:	4a33      	ldr	r2, [pc, #204]	@ (80a523c <USB_SetTurnaroundTime+0x128>)
 80a516e:	4293      	cmp	r3, r2
 80a5170:	d306      	bcc.n	80a5180 <USB_SetTurnaroundTime+0x6c>
 80a5172:	68bb      	ldr	r3, [r7, #8]
 80a5174:	4a32      	ldr	r2, [pc, #200]	@ (80a5240 <USB_SetTurnaroundTime+0x12c>)
 80a5176:	4293      	cmp	r3, r2
 80a5178:	d802      	bhi.n	80a5180 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80a517a:	230c      	movs	r3, #12
 80a517c:	617b      	str	r3, [r7, #20]
 80a517e:	e041      	b.n	80a5204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80a5180:	68bb      	ldr	r3, [r7, #8]
 80a5182:	4a2f      	ldr	r2, [pc, #188]	@ (80a5240 <USB_SetTurnaroundTime+0x12c>)
 80a5184:	4293      	cmp	r3, r2
 80a5186:	d906      	bls.n	80a5196 <USB_SetTurnaroundTime+0x82>
 80a5188:	68bb      	ldr	r3, [r7, #8]
 80a518a:	4a2e      	ldr	r2, [pc, #184]	@ (80a5244 <USB_SetTurnaroundTime+0x130>)
 80a518c:	4293      	cmp	r3, r2
 80a518e:	d802      	bhi.n	80a5196 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80a5190:	230b      	movs	r3, #11
 80a5192:	617b      	str	r3, [r7, #20]
 80a5194:	e036      	b.n	80a5204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80a5196:	68bb      	ldr	r3, [r7, #8]
 80a5198:	4a2a      	ldr	r2, [pc, #168]	@ (80a5244 <USB_SetTurnaroundTime+0x130>)
 80a519a:	4293      	cmp	r3, r2
 80a519c:	d906      	bls.n	80a51ac <USB_SetTurnaroundTime+0x98>
 80a519e:	68bb      	ldr	r3, [r7, #8]
 80a51a0:	4a29      	ldr	r2, [pc, #164]	@ (80a5248 <USB_SetTurnaroundTime+0x134>)
 80a51a2:	4293      	cmp	r3, r2
 80a51a4:	d802      	bhi.n	80a51ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80a51a6:	230a      	movs	r3, #10
 80a51a8:	617b      	str	r3, [r7, #20]
 80a51aa:	e02b      	b.n	80a5204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80a51ac:	68bb      	ldr	r3, [r7, #8]
 80a51ae:	4a26      	ldr	r2, [pc, #152]	@ (80a5248 <USB_SetTurnaroundTime+0x134>)
 80a51b0:	4293      	cmp	r3, r2
 80a51b2:	d906      	bls.n	80a51c2 <USB_SetTurnaroundTime+0xae>
 80a51b4:	68bb      	ldr	r3, [r7, #8]
 80a51b6:	4a25      	ldr	r2, [pc, #148]	@ (80a524c <USB_SetTurnaroundTime+0x138>)
 80a51b8:	4293      	cmp	r3, r2
 80a51ba:	d202      	bcs.n	80a51c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80a51bc:	2309      	movs	r3, #9
 80a51be:	617b      	str	r3, [r7, #20]
 80a51c0:	e020      	b.n	80a5204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80a51c2:	68bb      	ldr	r3, [r7, #8]
 80a51c4:	4a21      	ldr	r2, [pc, #132]	@ (80a524c <USB_SetTurnaroundTime+0x138>)
 80a51c6:	4293      	cmp	r3, r2
 80a51c8:	d306      	bcc.n	80a51d8 <USB_SetTurnaroundTime+0xc4>
 80a51ca:	68bb      	ldr	r3, [r7, #8]
 80a51cc:	4a20      	ldr	r2, [pc, #128]	@ (80a5250 <USB_SetTurnaroundTime+0x13c>)
 80a51ce:	4293      	cmp	r3, r2
 80a51d0:	d802      	bhi.n	80a51d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80a51d2:	2308      	movs	r3, #8
 80a51d4:	617b      	str	r3, [r7, #20]
 80a51d6:	e015      	b.n	80a5204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80a51d8:	68bb      	ldr	r3, [r7, #8]
 80a51da:	4a1d      	ldr	r2, [pc, #116]	@ (80a5250 <USB_SetTurnaroundTime+0x13c>)
 80a51dc:	4293      	cmp	r3, r2
 80a51de:	d906      	bls.n	80a51ee <USB_SetTurnaroundTime+0xda>
 80a51e0:	68bb      	ldr	r3, [r7, #8]
 80a51e2:	4a1c      	ldr	r2, [pc, #112]	@ (80a5254 <USB_SetTurnaroundTime+0x140>)
 80a51e4:	4293      	cmp	r3, r2
 80a51e6:	d202      	bcs.n	80a51ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80a51e8:	2307      	movs	r3, #7
 80a51ea:	617b      	str	r3, [r7, #20]
 80a51ec:	e00a      	b.n	80a5204 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80a51ee:	2306      	movs	r3, #6
 80a51f0:	617b      	str	r3, [r7, #20]
 80a51f2:	e007      	b.n	80a5204 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80a51f4:	79fb      	ldrb	r3, [r7, #7]
 80a51f6:	2b00      	cmp	r3, #0
 80a51f8:	d102      	bne.n	80a5200 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80a51fa:	2309      	movs	r3, #9
 80a51fc:	617b      	str	r3, [r7, #20]
 80a51fe:	e001      	b.n	80a5204 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80a5200:	2309      	movs	r3, #9
 80a5202:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80a5204:	68fb      	ldr	r3, [r7, #12]
 80a5206:	68db      	ldr	r3, [r3, #12]
 80a5208:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80a520c:	68fb      	ldr	r3, [r7, #12]
 80a520e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80a5210:	68fb      	ldr	r3, [r7, #12]
 80a5212:	68da      	ldr	r2, [r3, #12]
 80a5214:	697b      	ldr	r3, [r7, #20]
 80a5216:	029b      	lsls	r3, r3, #10
 80a5218:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80a521c:	431a      	orrs	r2, r3
 80a521e:	68fb      	ldr	r3, [r7, #12]
 80a5220:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80a5222:	2300      	movs	r3, #0
}
 80a5224:	4618      	mov	r0, r3
 80a5226:	371c      	adds	r7, #28
 80a5228:	46bd      	mov	sp, r7
 80a522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a522e:	4770      	bx	lr
 80a5230:	00d8acbf 	.word	0x00d8acbf
 80a5234:	00e4e1c0 	.word	0x00e4e1c0
 80a5238:	00f42400 	.word	0x00f42400
 80a523c:	01067380 	.word	0x01067380
 80a5240:	011a499f 	.word	0x011a499f
 80a5244:	01312cff 	.word	0x01312cff
 80a5248:	014ca43f 	.word	0x014ca43f
 80a524c:	016e3600 	.word	0x016e3600
 80a5250:	01a6ab1f 	.word	0x01a6ab1f
 80a5254:	01e84800 	.word	0x01e84800

080a5258 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80a5258:	b480      	push	{r7}
 80a525a:	b083      	sub	sp, #12
 80a525c:	af00      	add	r7, sp, #0
 80a525e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80a5260:	687b      	ldr	r3, [r7, #4]
 80a5262:	689b      	ldr	r3, [r3, #8]
 80a5264:	f043 0201 	orr.w	r2, r3, #1
 80a5268:	687b      	ldr	r3, [r7, #4]
 80a526a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80a526c:	2300      	movs	r3, #0
}
 80a526e:	4618      	mov	r0, r3
 80a5270:	370c      	adds	r7, #12
 80a5272:	46bd      	mov	sp, r7
 80a5274:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a5278:	4770      	bx	lr

080a527a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80a527a:	b480      	push	{r7}
 80a527c:	b083      	sub	sp, #12
 80a527e:	af00      	add	r7, sp, #0
 80a5280:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80a5282:	687b      	ldr	r3, [r7, #4]
 80a5284:	689b      	ldr	r3, [r3, #8]
 80a5286:	f023 0201 	bic.w	r2, r3, #1
 80a528a:	687b      	ldr	r3, [r7, #4]
 80a528c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80a528e:	2300      	movs	r3, #0
}
 80a5290:	4618      	mov	r0, r3
 80a5292:	370c      	adds	r7, #12
 80a5294:	46bd      	mov	sp, r7
 80a5296:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a529a:	4770      	bx	lr

080a529c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80a529c:	b580      	push	{r7, lr}
 80a529e:	b084      	sub	sp, #16
 80a52a0:	af00      	add	r7, sp, #0
 80a52a2:	6078      	str	r0, [r7, #4]
 80a52a4:	460b      	mov	r3, r1
 80a52a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80a52a8:	2300      	movs	r3, #0
 80a52aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80a52ac:	687b      	ldr	r3, [r7, #4]
 80a52ae:	68db      	ldr	r3, [r3, #12]
 80a52b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80a52b4:	687b      	ldr	r3, [r7, #4]
 80a52b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80a52b8:	78fb      	ldrb	r3, [r7, #3]
 80a52ba:	2b01      	cmp	r3, #1
 80a52bc:	d115      	bne.n	80a52ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80a52be:	687b      	ldr	r3, [r7, #4]
 80a52c0:	68db      	ldr	r3, [r3, #12]
 80a52c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80a52c6:	687b      	ldr	r3, [r7, #4]
 80a52c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80a52ca:	200a      	movs	r0, #10
 80a52cc:	f7fb fc82 	bl	80a0bd4 <HAL_Delay>
      ms += 10U;
 80a52d0:	68fb      	ldr	r3, [r7, #12]
 80a52d2:	330a      	adds	r3, #10
 80a52d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80a52d6:	6878      	ldr	r0, [r7, #4]
 80a52d8:	f001 f93f 	bl	80a655a <USB_GetMode>
 80a52dc:	4603      	mov	r3, r0
 80a52de:	2b01      	cmp	r3, #1
 80a52e0:	d01e      	beq.n	80a5320 <USB_SetCurrentMode+0x84>
 80a52e2:	68fb      	ldr	r3, [r7, #12]
 80a52e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80a52e6:	d9f0      	bls.n	80a52ca <USB_SetCurrentMode+0x2e>
 80a52e8:	e01a      	b.n	80a5320 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80a52ea:	78fb      	ldrb	r3, [r7, #3]
 80a52ec:	2b00      	cmp	r3, #0
 80a52ee:	d115      	bne.n	80a531c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80a52f0:	687b      	ldr	r3, [r7, #4]
 80a52f2:	68db      	ldr	r3, [r3, #12]
 80a52f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80a52f8:	687b      	ldr	r3, [r7, #4]
 80a52fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80a52fc:	200a      	movs	r0, #10
 80a52fe:	f7fb fc69 	bl	80a0bd4 <HAL_Delay>
      ms += 10U;
 80a5302:	68fb      	ldr	r3, [r7, #12]
 80a5304:	330a      	adds	r3, #10
 80a5306:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80a5308:	6878      	ldr	r0, [r7, #4]
 80a530a:	f001 f926 	bl	80a655a <USB_GetMode>
 80a530e:	4603      	mov	r3, r0
 80a5310:	2b00      	cmp	r3, #0
 80a5312:	d005      	beq.n	80a5320 <USB_SetCurrentMode+0x84>
 80a5314:	68fb      	ldr	r3, [r7, #12]
 80a5316:	2bc7      	cmp	r3, #199	@ 0xc7
 80a5318:	d9f0      	bls.n	80a52fc <USB_SetCurrentMode+0x60>
 80a531a:	e001      	b.n	80a5320 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80a531c:	2301      	movs	r3, #1
 80a531e:	e005      	b.n	80a532c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80a5320:	68fb      	ldr	r3, [r7, #12]
 80a5322:	2bc8      	cmp	r3, #200	@ 0xc8
 80a5324:	d101      	bne.n	80a532a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80a5326:	2301      	movs	r3, #1
 80a5328:	e000      	b.n	80a532c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80a532a:	2300      	movs	r3, #0
}
 80a532c:	4618      	mov	r0, r3
 80a532e:	3710      	adds	r7, #16
 80a5330:	46bd      	mov	sp, r7
 80a5332:	bd80      	pop	{r7, pc}

080a5334 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80a5334:	b084      	sub	sp, #16
 80a5336:	b580      	push	{r7, lr}
 80a5338:	b086      	sub	sp, #24
 80a533a:	af00      	add	r7, sp, #0
 80a533c:	6078      	str	r0, [r7, #4]
 80a533e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80a5342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80a5346:	2300      	movs	r3, #0
 80a5348:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a534a:	687b      	ldr	r3, [r7, #4]
 80a534c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80a534e:	2300      	movs	r3, #0
 80a5350:	613b      	str	r3, [r7, #16]
 80a5352:	e009      	b.n	80a5368 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80a5354:	687a      	ldr	r2, [r7, #4]
 80a5356:	693b      	ldr	r3, [r7, #16]
 80a5358:	3340      	adds	r3, #64	@ 0x40
 80a535a:	009b      	lsls	r3, r3, #2
 80a535c:	4413      	add	r3, r2
 80a535e:	2200      	movs	r2, #0
 80a5360:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80a5362:	693b      	ldr	r3, [r7, #16]
 80a5364:	3301      	adds	r3, #1
 80a5366:	613b      	str	r3, [r7, #16]
 80a5368:	693b      	ldr	r3, [r7, #16]
 80a536a:	2b0e      	cmp	r3, #14
 80a536c:	d9f2      	bls.n	80a5354 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80a536e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80a5372:	2b00      	cmp	r3, #0
 80a5374:	d11c      	bne.n	80a53b0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80a5376:	68fb      	ldr	r3, [r7, #12]
 80a5378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a537c:	685b      	ldr	r3, [r3, #4]
 80a537e:	68fa      	ldr	r2, [r7, #12]
 80a5380:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a5384:	f043 0302 	orr.w	r3, r3, #2
 80a5388:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80a538a:	687b      	ldr	r3, [r7, #4]
 80a538c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80a538e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80a5392:	687b      	ldr	r3, [r7, #4]
 80a5394:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80a5396:	687b      	ldr	r3, [r7, #4]
 80a5398:	681b      	ldr	r3, [r3, #0]
 80a539a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80a539e:	687b      	ldr	r3, [r7, #4]
 80a53a0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80a53a2:	687b      	ldr	r3, [r7, #4]
 80a53a4:	681b      	ldr	r3, [r3, #0]
 80a53a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80a53aa:	687b      	ldr	r3, [r7, #4]
 80a53ac:	601a      	str	r2, [r3, #0]
 80a53ae:	e005      	b.n	80a53bc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80a53b0:	687b      	ldr	r3, [r7, #4]
 80a53b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80a53b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80a53b8:	687b      	ldr	r3, [r7, #4]
 80a53ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80a53bc:	68fb      	ldr	r3, [r7, #12]
 80a53be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80a53c2:	461a      	mov	r2, r3
 80a53c4:	2300      	movs	r3, #0
 80a53c6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80a53c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80a53cc:	2b01      	cmp	r3, #1
 80a53ce:	d10d      	bne.n	80a53ec <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80a53d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80a53d4:	2b00      	cmp	r3, #0
 80a53d6:	d104      	bne.n	80a53e2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80a53d8:	2100      	movs	r1, #0
 80a53da:	6878      	ldr	r0, [r7, #4]
 80a53dc:	f000 f968 	bl	80a56b0 <USB_SetDevSpeed>
 80a53e0:	e008      	b.n	80a53f4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80a53e2:	2101      	movs	r1, #1
 80a53e4:	6878      	ldr	r0, [r7, #4]
 80a53e6:	f000 f963 	bl	80a56b0 <USB_SetDevSpeed>
 80a53ea:	e003      	b.n	80a53f4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80a53ec:	2103      	movs	r1, #3
 80a53ee:	6878      	ldr	r0, [r7, #4]
 80a53f0:	f000 f95e 	bl	80a56b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80a53f4:	2110      	movs	r1, #16
 80a53f6:	6878      	ldr	r0, [r7, #4]
 80a53f8:	f000 f8fa 	bl	80a55f0 <USB_FlushTxFifo>
 80a53fc:	4603      	mov	r3, r0
 80a53fe:	2b00      	cmp	r3, #0
 80a5400:	d001      	beq.n	80a5406 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80a5402:	2301      	movs	r3, #1
 80a5404:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80a5406:	6878      	ldr	r0, [r7, #4]
 80a5408:	f000 f924 	bl	80a5654 <USB_FlushRxFifo>
 80a540c:	4603      	mov	r3, r0
 80a540e:	2b00      	cmp	r3, #0
 80a5410:	d001      	beq.n	80a5416 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80a5412:	2301      	movs	r3, #1
 80a5414:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80a5416:	68fb      	ldr	r3, [r7, #12]
 80a5418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a541c:	461a      	mov	r2, r3
 80a541e:	2300      	movs	r3, #0
 80a5420:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80a5422:	68fb      	ldr	r3, [r7, #12]
 80a5424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5428:	461a      	mov	r2, r3
 80a542a:	2300      	movs	r3, #0
 80a542c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80a542e:	68fb      	ldr	r3, [r7, #12]
 80a5430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5434:	461a      	mov	r2, r3
 80a5436:	2300      	movs	r3, #0
 80a5438:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80a543a:	2300      	movs	r3, #0
 80a543c:	613b      	str	r3, [r7, #16]
 80a543e:	e043      	b.n	80a54c8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80a5440:	693b      	ldr	r3, [r7, #16]
 80a5442:	015a      	lsls	r2, r3, #5
 80a5444:	68fb      	ldr	r3, [r7, #12]
 80a5446:	4413      	add	r3, r2
 80a5448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a544c:	681b      	ldr	r3, [r3, #0]
 80a544e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a5452:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a5456:	d118      	bne.n	80a548a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80a5458:	693b      	ldr	r3, [r7, #16]
 80a545a:	2b00      	cmp	r3, #0
 80a545c:	d10a      	bne.n	80a5474 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80a545e:	693b      	ldr	r3, [r7, #16]
 80a5460:	015a      	lsls	r2, r3, #5
 80a5462:	68fb      	ldr	r3, [r7, #12]
 80a5464:	4413      	add	r3, r2
 80a5466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a546a:	461a      	mov	r2, r3
 80a546c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80a5470:	6013      	str	r3, [r2, #0]
 80a5472:	e013      	b.n	80a549c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80a5474:	693b      	ldr	r3, [r7, #16]
 80a5476:	015a      	lsls	r2, r3, #5
 80a5478:	68fb      	ldr	r3, [r7, #12]
 80a547a:	4413      	add	r3, r2
 80a547c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5480:	461a      	mov	r2, r3
 80a5482:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80a5486:	6013      	str	r3, [r2, #0]
 80a5488:	e008      	b.n	80a549c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80a548a:	693b      	ldr	r3, [r7, #16]
 80a548c:	015a      	lsls	r2, r3, #5
 80a548e:	68fb      	ldr	r3, [r7, #12]
 80a5490:	4413      	add	r3, r2
 80a5492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5496:	461a      	mov	r2, r3
 80a5498:	2300      	movs	r3, #0
 80a549a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80a549c:	693b      	ldr	r3, [r7, #16]
 80a549e:	015a      	lsls	r2, r3, #5
 80a54a0:	68fb      	ldr	r3, [r7, #12]
 80a54a2:	4413      	add	r3, r2
 80a54a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a54a8:	461a      	mov	r2, r3
 80a54aa:	2300      	movs	r3, #0
 80a54ac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80a54ae:	693b      	ldr	r3, [r7, #16]
 80a54b0:	015a      	lsls	r2, r3, #5
 80a54b2:	68fb      	ldr	r3, [r7, #12]
 80a54b4:	4413      	add	r3, r2
 80a54b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a54ba:	461a      	mov	r2, r3
 80a54bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80a54c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80a54c2:	693b      	ldr	r3, [r7, #16]
 80a54c4:	3301      	adds	r3, #1
 80a54c6:	613b      	str	r3, [r7, #16]
 80a54c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80a54cc:	461a      	mov	r2, r3
 80a54ce:	693b      	ldr	r3, [r7, #16]
 80a54d0:	4293      	cmp	r3, r2
 80a54d2:	d3b5      	bcc.n	80a5440 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80a54d4:	2300      	movs	r3, #0
 80a54d6:	613b      	str	r3, [r7, #16]
 80a54d8:	e043      	b.n	80a5562 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80a54da:	693b      	ldr	r3, [r7, #16]
 80a54dc:	015a      	lsls	r2, r3, #5
 80a54de:	68fb      	ldr	r3, [r7, #12]
 80a54e0:	4413      	add	r3, r2
 80a54e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a54e6:	681b      	ldr	r3, [r3, #0]
 80a54e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a54ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a54f0:	d118      	bne.n	80a5524 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80a54f2:	693b      	ldr	r3, [r7, #16]
 80a54f4:	2b00      	cmp	r3, #0
 80a54f6:	d10a      	bne.n	80a550e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80a54f8:	693b      	ldr	r3, [r7, #16]
 80a54fa:	015a      	lsls	r2, r3, #5
 80a54fc:	68fb      	ldr	r3, [r7, #12]
 80a54fe:	4413      	add	r3, r2
 80a5500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5504:	461a      	mov	r2, r3
 80a5506:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80a550a:	6013      	str	r3, [r2, #0]
 80a550c:	e013      	b.n	80a5536 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80a550e:	693b      	ldr	r3, [r7, #16]
 80a5510:	015a      	lsls	r2, r3, #5
 80a5512:	68fb      	ldr	r3, [r7, #12]
 80a5514:	4413      	add	r3, r2
 80a5516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a551a:	461a      	mov	r2, r3
 80a551c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80a5520:	6013      	str	r3, [r2, #0]
 80a5522:	e008      	b.n	80a5536 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80a5524:	693b      	ldr	r3, [r7, #16]
 80a5526:	015a      	lsls	r2, r3, #5
 80a5528:	68fb      	ldr	r3, [r7, #12]
 80a552a:	4413      	add	r3, r2
 80a552c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5530:	461a      	mov	r2, r3
 80a5532:	2300      	movs	r3, #0
 80a5534:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80a5536:	693b      	ldr	r3, [r7, #16]
 80a5538:	015a      	lsls	r2, r3, #5
 80a553a:	68fb      	ldr	r3, [r7, #12]
 80a553c:	4413      	add	r3, r2
 80a553e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5542:	461a      	mov	r2, r3
 80a5544:	2300      	movs	r3, #0
 80a5546:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80a5548:	693b      	ldr	r3, [r7, #16]
 80a554a:	015a      	lsls	r2, r3, #5
 80a554c:	68fb      	ldr	r3, [r7, #12]
 80a554e:	4413      	add	r3, r2
 80a5550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5554:	461a      	mov	r2, r3
 80a5556:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80a555a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80a555c:	693b      	ldr	r3, [r7, #16]
 80a555e:	3301      	adds	r3, #1
 80a5560:	613b      	str	r3, [r7, #16]
 80a5562:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80a5566:	461a      	mov	r2, r3
 80a5568:	693b      	ldr	r3, [r7, #16]
 80a556a:	4293      	cmp	r3, r2
 80a556c:	d3b5      	bcc.n	80a54da <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80a556e:	68fb      	ldr	r3, [r7, #12]
 80a5570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5574:	691b      	ldr	r3, [r3, #16]
 80a5576:	68fa      	ldr	r2, [r7, #12]
 80a5578:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a557c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80a5580:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80a5582:	687b      	ldr	r3, [r7, #4]
 80a5584:	2200      	movs	r2, #0
 80a5586:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80a5588:	687b      	ldr	r3, [r7, #4]
 80a558a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80a558e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80a5590:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80a5594:	2b00      	cmp	r3, #0
 80a5596:	d105      	bne.n	80a55a4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80a5598:	687b      	ldr	r3, [r7, #4]
 80a559a:	699b      	ldr	r3, [r3, #24]
 80a559c:	f043 0210 	orr.w	r2, r3, #16
 80a55a0:	687b      	ldr	r3, [r7, #4]
 80a55a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80a55a4:	687b      	ldr	r3, [r7, #4]
 80a55a6:	699a      	ldr	r2, [r3, #24]
 80a55a8:	4b0f      	ldr	r3, [pc, #60]	@ (80a55e8 <USB_DevInit+0x2b4>)
 80a55aa:	4313      	orrs	r3, r2
 80a55ac:	687a      	ldr	r2, [r7, #4]
 80a55ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80a55b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80a55b4:	2b00      	cmp	r3, #0
 80a55b6:	d005      	beq.n	80a55c4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80a55b8:	687b      	ldr	r3, [r7, #4]
 80a55ba:	699b      	ldr	r3, [r3, #24]
 80a55bc:	f043 0208 	orr.w	r2, r3, #8
 80a55c0:	687b      	ldr	r3, [r7, #4]
 80a55c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80a55c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80a55c8:	2b01      	cmp	r3, #1
 80a55ca:	d105      	bne.n	80a55d8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80a55cc:	687b      	ldr	r3, [r7, #4]
 80a55ce:	699a      	ldr	r2, [r3, #24]
 80a55d0:	4b06      	ldr	r3, [pc, #24]	@ (80a55ec <USB_DevInit+0x2b8>)
 80a55d2:	4313      	orrs	r3, r2
 80a55d4:	687a      	ldr	r2, [r7, #4]
 80a55d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80a55d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80a55da:	4618      	mov	r0, r3
 80a55dc:	3718      	adds	r7, #24
 80a55de:	46bd      	mov	sp, r7
 80a55e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80a55e4:	b004      	add	sp, #16
 80a55e6:	4770      	bx	lr
 80a55e8:	803c3800 	.word	0x803c3800
 80a55ec:	40000004 	.word	0x40000004

080a55f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80a55f0:	b480      	push	{r7}
 80a55f2:	b085      	sub	sp, #20
 80a55f4:	af00      	add	r7, sp, #0
 80a55f6:	6078      	str	r0, [r7, #4]
 80a55f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80a55fa:	2300      	movs	r3, #0
 80a55fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80a55fe:	68fb      	ldr	r3, [r7, #12]
 80a5600:	3301      	adds	r3, #1
 80a5602:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80a5604:	68fb      	ldr	r3, [r7, #12]
 80a5606:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80a560a:	d901      	bls.n	80a5610 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80a560c:	2303      	movs	r3, #3
 80a560e:	e01b      	b.n	80a5648 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80a5610:	687b      	ldr	r3, [r7, #4]
 80a5612:	691b      	ldr	r3, [r3, #16]
 80a5614:	2b00      	cmp	r3, #0
 80a5616:	daf2      	bge.n	80a55fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80a5618:	2300      	movs	r3, #0
 80a561a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80a561c:	683b      	ldr	r3, [r7, #0]
 80a561e:	019b      	lsls	r3, r3, #6
 80a5620:	f043 0220 	orr.w	r2, r3, #32
 80a5624:	687b      	ldr	r3, [r7, #4]
 80a5626:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80a5628:	68fb      	ldr	r3, [r7, #12]
 80a562a:	3301      	adds	r3, #1
 80a562c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80a562e:	68fb      	ldr	r3, [r7, #12]
 80a5630:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80a5634:	d901      	bls.n	80a563a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80a5636:	2303      	movs	r3, #3
 80a5638:	e006      	b.n	80a5648 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80a563a:	687b      	ldr	r3, [r7, #4]
 80a563c:	691b      	ldr	r3, [r3, #16]
 80a563e:	f003 0320 	and.w	r3, r3, #32
 80a5642:	2b20      	cmp	r3, #32
 80a5644:	d0f0      	beq.n	80a5628 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80a5646:	2300      	movs	r3, #0
}
 80a5648:	4618      	mov	r0, r3
 80a564a:	3714      	adds	r7, #20
 80a564c:	46bd      	mov	sp, r7
 80a564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a5652:	4770      	bx	lr

080a5654 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80a5654:	b480      	push	{r7}
 80a5656:	b085      	sub	sp, #20
 80a5658:	af00      	add	r7, sp, #0
 80a565a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80a565c:	2300      	movs	r3, #0
 80a565e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80a5660:	68fb      	ldr	r3, [r7, #12]
 80a5662:	3301      	adds	r3, #1
 80a5664:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80a5666:	68fb      	ldr	r3, [r7, #12]
 80a5668:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80a566c:	d901      	bls.n	80a5672 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80a566e:	2303      	movs	r3, #3
 80a5670:	e018      	b.n	80a56a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80a5672:	687b      	ldr	r3, [r7, #4]
 80a5674:	691b      	ldr	r3, [r3, #16]
 80a5676:	2b00      	cmp	r3, #0
 80a5678:	daf2      	bge.n	80a5660 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80a567a:	2300      	movs	r3, #0
 80a567c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80a567e:	687b      	ldr	r3, [r7, #4]
 80a5680:	2210      	movs	r2, #16
 80a5682:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80a5684:	68fb      	ldr	r3, [r7, #12]
 80a5686:	3301      	adds	r3, #1
 80a5688:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80a568a:	68fb      	ldr	r3, [r7, #12]
 80a568c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80a5690:	d901      	bls.n	80a5696 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80a5692:	2303      	movs	r3, #3
 80a5694:	e006      	b.n	80a56a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80a5696:	687b      	ldr	r3, [r7, #4]
 80a5698:	691b      	ldr	r3, [r3, #16]
 80a569a:	f003 0310 	and.w	r3, r3, #16
 80a569e:	2b10      	cmp	r3, #16
 80a56a0:	d0f0      	beq.n	80a5684 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80a56a2:	2300      	movs	r3, #0
}
 80a56a4:	4618      	mov	r0, r3
 80a56a6:	3714      	adds	r7, #20
 80a56a8:	46bd      	mov	sp, r7
 80a56aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a56ae:	4770      	bx	lr

080a56b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80a56b0:	b480      	push	{r7}
 80a56b2:	b085      	sub	sp, #20
 80a56b4:	af00      	add	r7, sp, #0
 80a56b6:	6078      	str	r0, [r7, #4]
 80a56b8:	460b      	mov	r3, r1
 80a56ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a56bc:	687b      	ldr	r3, [r7, #4]
 80a56be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80a56c0:	68fb      	ldr	r3, [r7, #12]
 80a56c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a56c6:	681a      	ldr	r2, [r3, #0]
 80a56c8:	78fb      	ldrb	r3, [r7, #3]
 80a56ca:	68f9      	ldr	r1, [r7, #12]
 80a56cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a56d0:	4313      	orrs	r3, r2
 80a56d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80a56d4:	2300      	movs	r3, #0
}
 80a56d6:	4618      	mov	r0, r3
 80a56d8:	3714      	adds	r7, #20
 80a56da:	46bd      	mov	sp, r7
 80a56dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a56e0:	4770      	bx	lr

080a56e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80a56e2:	b480      	push	{r7}
 80a56e4:	b087      	sub	sp, #28
 80a56e6:	af00      	add	r7, sp, #0
 80a56e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a56ea:	687b      	ldr	r3, [r7, #4]
 80a56ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80a56ee:	693b      	ldr	r3, [r7, #16]
 80a56f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a56f4:	689b      	ldr	r3, [r3, #8]
 80a56f6:	f003 0306 	and.w	r3, r3, #6
 80a56fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80a56fc:	68fb      	ldr	r3, [r7, #12]
 80a56fe:	2b00      	cmp	r3, #0
 80a5700:	d102      	bne.n	80a5708 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80a5702:	2300      	movs	r3, #0
 80a5704:	75fb      	strb	r3, [r7, #23]
 80a5706:	e00a      	b.n	80a571e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80a5708:	68fb      	ldr	r3, [r7, #12]
 80a570a:	2b02      	cmp	r3, #2
 80a570c:	d002      	beq.n	80a5714 <USB_GetDevSpeed+0x32>
 80a570e:	68fb      	ldr	r3, [r7, #12]
 80a5710:	2b06      	cmp	r3, #6
 80a5712:	d102      	bne.n	80a571a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80a5714:	2302      	movs	r3, #2
 80a5716:	75fb      	strb	r3, [r7, #23]
 80a5718:	e001      	b.n	80a571e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80a571a:	230f      	movs	r3, #15
 80a571c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80a571e:	7dfb      	ldrb	r3, [r7, #23]
}
 80a5720:	4618      	mov	r0, r3
 80a5722:	371c      	adds	r7, #28
 80a5724:	46bd      	mov	sp, r7
 80a5726:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a572a:	4770      	bx	lr

080a572c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80a572c:	b480      	push	{r7}
 80a572e:	b085      	sub	sp, #20
 80a5730:	af00      	add	r7, sp, #0
 80a5732:	6078      	str	r0, [r7, #4]
 80a5734:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a5736:	687b      	ldr	r3, [r7, #4]
 80a5738:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80a573a:	683b      	ldr	r3, [r7, #0]
 80a573c:	781b      	ldrb	r3, [r3, #0]
 80a573e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80a5740:	683b      	ldr	r3, [r7, #0]
 80a5742:	785b      	ldrb	r3, [r3, #1]
 80a5744:	2b01      	cmp	r3, #1
 80a5746:	d139      	bne.n	80a57bc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80a5748:	68fb      	ldr	r3, [r7, #12]
 80a574a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a574e:	69da      	ldr	r2, [r3, #28]
 80a5750:	683b      	ldr	r3, [r7, #0]
 80a5752:	781b      	ldrb	r3, [r3, #0]
 80a5754:	f003 030f 	and.w	r3, r3, #15
 80a5758:	2101      	movs	r1, #1
 80a575a:	fa01 f303 	lsl.w	r3, r1, r3
 80a575e:	b29b      	uxth	r3, r3
 80a5760:	68f9      	ldr	r1, [r7, #12]
 80a5762:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a5766:	4313      	orrs	r3, r2
 80a5768:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80a576a:	68bb      	ldr	r3, [r7, #8]
 80a576c:	015a      	lsls	r2, r3, #5
 80a576e:	68fb      	ldr	r3, [r7, #12]
 80a5770:	4413      	add	r3, r2
 80a5772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5776:	681b      	ldr	r3, [r3, #0]
 80a5778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80a577c:	2b00      	cmp	r3, #0
 80a577e:	d153      	bne.n	80a5828 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80a5780:	68bb      	ldr	r3, [r7, #8]
 80a5782:	015a      	lsls	r2, r3, #5
 80a5784:	68fb      	ldr	r3, [r7, #12]
 80a5786:	4413      	add	r3, r2
 80a5788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a578c:	681a      	ldr	r2, [r3, #0]
 80a578e:	683b      	ldr	r3, [r7, #0]
 80a5790:	689b      	ldr	r3, [r3, #8]
 80a5792:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80a5796:	683b      	ldr	r3, [r7, #0]
 80a5798:	791b      	ldrb	r3, [r3, #4]
 80a579a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80a579c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80a579e:	68bb      	ldr	r3, [r7, #8]
 80a57a0:	059b      	lsls	r3, r3, #22
 80a57a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80a57a4:	431a      	orrs	r2, r3
 80a57a6:	68bb      	ldr	r3, [r7, #8]
 80a57a8:	0159      	lsls	r1, r3, #5
 80a57aa:	68fb      	ldr	r3, [r7, #12]
 80a57ac:	440b      	add	r3, r1
 80a57ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a57b2:	4619      	mov	r1, r3
 80a57b4:	4b20      	ldr	r3, [pc, #128]	@ (80a5838 <USB_ActivateEndpoint+0x10c>)
 80a57b6:	4313      	orrs	r3, r2
 80a57b8:	600b      	str	r3, [r1, #0]
 80a57ba:	e035      	b.n	80a5828 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80a57bc:	68fb      	ldr	r3, [r7, #12]
 80a57be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a57c2:	69da      	ldr	r2, [r3, #28]
 80a57c4:	683b      	ldr	r3, [r7, #0]
 80a57c6:	781b      	ldrb	r3, [r3, #0]
 80a57c8:	f003 030f 	and.w	r3, r3, #15
 80a57cc:	2101      	movs	r1, #1
 80a57ce:	fa01 f303 	lsl.w	r3, r1, r3
 80a57d2:	041b      	lsls	r3, r3, #16
 80a57d4:	68f9      	ldr	r1, [r7, #12]
 80a57d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a57da:	4313      	orrs	r3, r2
 80a57dc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80a57de:	68bb      	ldr	r3, [r7, #8]
 80a57e0:	015a      	lsls	r2, r3, #5
 80a57e2:	68fb      	ldr	r3, [r7, #12]
 80a57e4:	4413      	add	r3, r2
 80a57e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a57ea:	681b      	ldr	r3, [r3, #0]
 80a57ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80a57f0:	2b00      	cmp	r3, #0
 80a57f2:	d119      	bne.n	80a5828 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80a57f4:	68bb      	ldr	r3, [r7, #8]
 80a57f6:	015a      	lsls	r2, r3, #5
 80a57f8:	68fb      	ldr	r3, [r7, #12]
 80a57fa:	4413      	add	r3, r2
 80a57fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5800:	681a      	ldr	r2, [r3, #0]
 80a5802:	683b      	ldr	r3, [r7, #0]
 80a5804:	689b      	ldr	r3, [r3, #8]
 80a5806:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80a580a:	683b      	ldr	r3, [r7, #0]
 80a580c:	791b      	ldrb	r3, [r3, #4]
 80a580e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80a5810:	430b      	orrs	r3, r1
 80a5812:	431a      	orrs	r2, r3
 80a5814:	68bb      	ldr	r3, [r7, #8]
 80a5816:	0159      	lsls	r1, r3, #5
 80a5818:	68fb      	ldr	r3, [r7, #12]
 80a581a:	440b      	add	r3, r1
 80a581c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5820:	4619      	mov	r1, r3
 80a5822:	4b05      	ldr	r3, [pc, #20]	@ (80a5838 <USB_ActivateEndpoint+0x10c>)
 80a5824:	4313      	orrs	r3, r2
 80a5826:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80a5828:	2300      	movs	r3, #0
}
 80a582a:	4618      	mov	r0, r3
 80a582c:	3714      	adds	r7, #20
 80a582e:	46bd      	mov	sp, r7
 80a5830:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a5834:	4770      	bx	lr
 80a5836:	bf00      	nop
 80a5838:	10008000 	.word	0x10008000

080a583c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80a583c:	b480      	push	{r7}
 80a583e:	b085      	sub	sp, #20
 80a5840:	af00      	add	r7, sp, #0
 80a5842:	6078      	str	r0, [r7, #4]
 80a5844:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a5846:	687b      	ldr	r3, [r7, #4]
 80a5848:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80a584a:	683b      	ldr	r3, [r7, #0]
 80a584c:	781b      	ldrb	r3, [r3, #0]
 80a584e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80a5850:	683b      	ldr	r3, [r7, #0]
 80a5852:	785b      	ldrb	r3, [r3, #1]
 80a5854:	2b01      	cmp	r3, #1
 80a5856:	d161      	bne.n	80a591c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80a5858:	68bb      	ldr	r3, [r7, #8]
 80a585a:	015a      	lsls	r2, r3, #5
 80a585c:	68fb      	ldr	r3, [r7, #12]
 80a585e:	4413      	add	r3, r2
 80a5860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5864:	681b      	ldr	r3, [r3, #0]
 80a5866:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a586a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a586e:	d11f      	bne.n	80a58b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80a5870:	68bb      	ldr	r3, [r7, #8]
 80a5872:	015a      	lsls	r2, r3, #5
 80a5874:	68fb      	ldr	r3, [r7, #12]
 80a5876:	4413      	add	r3, r2
 80a5878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a587c:	681b      	ldr	r3, [r3, #0]
 80a587e:	68ba      	ldr	r2, [r7, #8]
 80a5880:	0151      	lsls	r1, r2, #5
 80a5882:	68fa      	ldr	r2, [r7, #12]
 80a5884:	440a      	add	r2, r1
 80a5886:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a588a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80a588e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80a5890:	68bb      	ldr	r3, [r7, #8]
 80a5892:	015a      	lsls	r2, r3, #5
 80a5894:	68fb      	ldr	r3, [r7, #12]
 80a5896:	4413      	add	r3, r2
 80a5898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a589c:	681b      	ldr	r3, [r3, #0]
 80a589e:	68ba      	ldr	r2, [r7, #8]
 80a58a0:	0151      	lsls	r1, r2, #5
 80a58a2:	68fa      	ldr	r2, [r7, #12]
 80a58a4:	440a      	add	r2, r1
 80a58a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a58aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80a58ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80a58b0:	68fb      	ldr	r3, [r7, #12]
 80a58b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a58b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80a58b8:	683b      	ldr	r3, [r7, #0]
 80a58ba:	781b      	ldrb	r3, [r3, #0]
 80a58bc:	f003 030f 	and.w	r3, r3, #15
 80a58c0:	2101      	movs	r1, #1
 80a58c2:	fa01 f303 	lsl.w	r3, r1, r3
 80a58c6:	b29b      	uxth	r3, r3
 80a58c8:	43db      	mvns	r3, r3
 80a58ca:	68f9      	ldr	r1, [r7, #12]
 80a58cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a58d0:	4013      	ands	r3, r2
 80a58d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80a58d4:	68fb      	ldr	r3, [r7, #12]
 80a58d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a58da:	69da      	ldr	r2, [r3, #28]
 80a58dc:	683b      	ldr	r3, [r7, #0]
 80a58de:	781b      	ldrb	r3, [r3, #0]
 80a58e0:	f003 030f 	and.w	r3, r3, #15
 80a58e4:	2101      	movs	r1, #1
 80a58e6:	fa01 f303 	lsl.w	r3, r1, r3
 80a58ea:	b29b      	uxth	r3, r3
 80a58ec:	43db      	mvns	r3, r3
 80a58ee:	68f9      	ldr	r1, [r7, #12]
 80a58f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a58f4:	4013      	ands	r3, r2
 80a58f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80a58f8:	68bb      	ldr	r3, [r7, #8]
 80a58fa:	015a      	lsls	r2, r3, #5
 80a58fc:	68fb      	ldr	r3, [r7, #12]
 80a58fe:	4413      	add	r3, r2
 80a5900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5904:	681a      	ldr	r2, [r3, #0]
 80a5906:	68bb      	ldr	r3, [r7, #8]
 80a5908:	0159      	lsls	r1, r3, #5
 80a590a:	68fb      	ldr	r3, [r7, #12]
 80a590c:	440b      	add	r3, r1
 80a590e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5912:	4619      	mov	r1, r3
 80a5914:	4b35      	ldr	r3, [pc, #212]	@ (80a59ec <USB_DeactivateEndpoint+0x1b0>)
 80a5916:	4013      	ands	r3, r2
 80a5918:	600b      	str	r3, [r1, #0]
 80a591a:	e060      	b.n	80a59de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80a591c:	68bb      	ldr	r3, [r7, #8]
 80a591e:	015a      	lsls	r2, r3, #5
 80a5920:	68fb      	ldr	r3, [r7, #12]
 80a5922:	4413      	add	r3, r2
 80a5924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5928:	681b      	ldr	r3, [r3, #0]
 80a592a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a592e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a5932:	d11f      	bne.n	80a5974 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80a5934:	68bb      	ldr	r3, [r7, #8]
 80a5936:	015a      	lsls	r2, r3, #5
 80a5938:	68fb      	ldr	r3, [r7, #12]
 80a593a:	4413      	add	r3, r2
 80a593c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5940:	681b      	ldr	r3, [r3, #0]
 80a5942:	68ba      	ldr	r2, [r7, #8]
 80a5944:	0151      	lsls	r1, r2, #5
 80a5946:	68fa      	ldr	r2, [r7, #12]
 80a5948:	440a      	add	r2, r1
 80a594a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a594e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80a5952:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80a5954:	68bb      	ldr	r3, [r7, #8]
 80a5956:	015a      	lsls	r2, r3, #5
 80a5958:	68fb      	ldr	r3, [r7, #12]
 80a595a:	4413      	add	r3, r2
 80a595c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5960:	681b      	ldr	r3, [r3, #0]
 80a5962:	68ba      	ldr	r2, [r7, #8]
 80a5964:	0151      	lsls	r1, r2, #5
 80a5966:	68fa      	ldr	r2, [r7, #12]
 80a5968:	440a      	add	r2, r1
 80a596a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a596e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80a5972:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80a5974:	68fb      	ldr	r3, [r7, #12]
 80a5976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a597a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80a597c:	683b      	ldr	r3, [r7, #0]
 80a597e:	781b      	ldrb	r3, [r3, #0]
 80a5980:	f003 030f 	and.w	r3, r3, #15
 80a5984:	2101      	movs	r1, #1
 80a5986:	fa01 f303 	lsl.w	r3, r1, r3
 80a598a:	041b      	lsls	r3, r3, #16
 80a598c:	43db      	mvns	r3, r3
 80a598e:	68f9      	ldr	r1, [r7, #12]
 80a5990:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a5994:	4013      	ands	r3, r2
 80a5996:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80a5998:	68fb      	ldr	r3, [r7, #12]
 80a599a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a599e:	69da      	ldr	r2, [r3, #28]
 80a59a0:	683b      	ldr	r3, [r7, #0]
 80a59a2:	781b      	ldrb	r3, [r3, #0]
 80a59a4:	f003 030f 	and.w	r3, r3, #15
 80a59a8:	2101      	movs	r1, #1
 80a59aa:	fa01 f303 	lsl.w	r3, r1, r3
 80a59ae:	041b      	lsls	r3, r3, #16
 80a59b0:	43db      	mvns	r3, r3
 80a59b2:	68f9      	ldr	r1, [r7, #12]
 80a59b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a59b8:	4013      	ands	r3, r2
 80a59ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80a59bc:	68bb      	ldr	r3, [r7, #8]
 80a59be:	015a      	lsls	r2, r3, #5
 80a59c0:	68fb      	ldr	r3, [r7, #12]
 80a59c2:	4413      	add	r3, r2
 80a59c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a59c8:	681a      	ldr	r2, [r3, #0]
 80a59ca:	68bb      	ldr	r3, [r7, #8]
 80a59cc:	0159      	lsls	r1, r3, #5
 80a59ce:	68fb      	ldr	r3, [r7, #12]
 80a59d0:	440b      	add	r3, r1
 80a59d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a59d6:	4619      	mov	r1, r3
 80a59d8:	4b05      	ldr	r3, [pc, #20]	@ (80a59f0 <USB_DeactivateEndpoint+0x1b4>)
 80a59da:	4013      	ands	r3, r2
 80a59dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80a59de:	2300      	movs	r3, #0
}
 80a59e0:	4618      	mov	r0, r3
 80a59e2:	3714      	adds	r7, #20
 80a59e4:	46bd      	mov	sp, r7
 80a59e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a59ea:	4770      	bx	lr
 80a59ec:	ec337800 	.word	0xec337800
 80a59f0:	eff37800 	.word	0xeff37800

080a59f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80a59f4:	b580      	push	{r7, lr}
 80a59f6:	b08a      	sub	sp, #40	@ 0x28
 80a59f8:	af02      	add	r7, sp, #8
 80a59fa:	60f8      	str	r0, [r7, #12]
 80a59fc:	60b9      	str	r1, [r7, #8]
 80a59fe:	4613      	mov	r3, r2
 80a5a00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a5a02:	68fb      	ldr	r3, [r7, #12]
 80a5a04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80a5a06:	68bb      	ldr	r3, [r7, #8]
 80a5a08:	781b      	ldrb	r3, [r3, #0]
 80a5a0a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80a5a0c:	68bb      	ldr	r3, [r7, #8]
 80a5a0e:	785b      	ldrb	r3, [r3, #1]
 80a5a10:	2b01      	cmp	r3, #1
 80a5a12:	f040 8185 	bne.w	80a5d20 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80a5a16:	68bb      	ldr	r3, [r7, #8]
 80a5a18:	691b      	ldr	r3, [r3, #16]
 80a5a1a:	2b00      	cmp	r3, #0
 80a5a1c:	d132      	bne.n	80a5a84 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80a5a1e:	69bb      	ldr	r3, [r7, #24]
 80a5a20:	015a      	lsls	r2, r3, #5
 80a5a22:	69fb      	ldr	r3, [r7, #28]
 80a5a24:	4413      	add	r3, r2
 80a5a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5a2a:	691a      	ldr	r2, [r3, #16]
 80a5a2c:	69bb      	ldr	r3, [r7, #24]
 80a5a2e:	0159      	lsls	r1, r3, #5
 80a5a30:	69fb      	ldr	r3, [r7, #28]
 80a5a32:	440b      	add	r3, r1
 80a5a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5a38:	4619      	mov	r1, r3
 80a5a3a:	4ba7      	ldr	r3, [pc, #668]	@ (80a5cd8 <USB_EPStartXfer+0x2e4>)
 80a5a3c:	4013      	ands	r3, r2
 80a5a3e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80a5a40:	69bb      	ldr	r3, [r7, #24]
 80a5a42:	015a      	lsls	r2, r3, #5
 80a5a44:	69fb      	ldr	r3, [r7, #28]
 80a5a46:	4413      	add	r3, r2
 80a5a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5a4c:	691b      	ldr	r3, [r3, #16]
 80a5a4e:	69ba      	ldr	r2, [r7, #24]
 80a5a50:	0151      	lsls	r1, r2, #5
 80a5a52:	69fa      	ldr	r2, [r7, #28]
 80a5a54:	440a      	add	r2, r1
 80a5a56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5a5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80a5a5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80a5a60:	69bb      	ldr	r3, [r7, #24]
 80a5a62:	015a      	lsls	r2, r3, #5
 80a5a64:	69fb      	ldr	r3, [r7, #28]
 80a5a66:	4413      	add	r3, r2
 80a5a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5a6c:	691a      	ldr	r2, [r3, #16]
 80a5a6e:	69bb      	ldr	r3, [r7, #24]
 80a5a70:	0159      	lsls	r1, r3, #5
 80a5a72:	69fb      	ldr	r3, [r7, #28]
 80a5a74:	440b      	add	r3, r1
 80a5a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5a7a:	4619      	mov	r1, r3
 80a5a7c:	4b97      	ldr	r3, [pc, #604]	@ (80a5cdc <USB_EPStartXfer+0x2e8>)
 80a5a7e:	4013      	ands	r3, r2
 80a5a80:	610b      	str	r3, [r1, #16]
 80a5a82:	e097      	b.n	80a5bb4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80a5a84:	69bb      	ldr	r3, [r7, #24]
 80a5a86:	015a      	lsls	r2, r3, #5
 80a5a88:	69fb      	ldr	r3, [r7, #28]
 80a5a8a:	4413      	add	r3, r2
 80a5a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5a90:	691a      	ldr	r2, [r3, #16]
 80a5a92:	69bb      	ldr	r3, [r7, #24]
 80a5a94:	0159      	lsls	r1, r3, #5
 80a5a96:	69fb      	ldr	r3, [r7, #28]
 80a5a98:	440b      	add	r3, r1
 80a5a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5a9e:	4619      	mov	r1, r3
 80a5aa0:	4b8e      	ldr	r3, [pc, #568]	@ (80a5cdc <USB_EPStartXfer+0x2e8>)
 80a5aa2:	4013      	ands	r3, r2
 80a5aa4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80a5aa6:	69bb      	ldr	r3, [r7, #24]
 80a5aa8:	015a      	lsls	r2, r3, #5
 80a5aaa:	69fb      	ldr	r3, [r7, #28]
 80a5aac:	4413      	add	r3, r2
 80a5aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5ab2:	691a      	ldr	r2, [r3, #16]
 80a5ab4:	69bb      	ldr	r3, [r7, #24]
 80a5ab6:	0159      	lsls	r1, r3, #5
 80a5ab8:	69fb      	ldr	r3, [r7, #28]
 80a5aba:	440b      	add	r3, r1
 80a5abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5ac0:	4619      	mov	r1, r3
 80a5ac2:	4b85      	ldr	r3, [pc, #532]	@ (80a5cd8 <USB_EPStartXfer+0x2e4>)
 80a5ac4:	4013      	ands	r3, r2
 80a5ac6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80a5ac8:	69bb      	ldr	r3, [r7, #24]
 80a5aca:	2b00      	cmp	r3, #0
 80a5acc:	d11a      	bne.n	80a5b04 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80a5ace:	68bb      	ldr	r3, [r7, #8]
 80a5ad0:	691a      	ldr	r2, [r3, #16]
 80a5ad2:	68bb      	ldr	r3, [r7, #8]
 80a5ad4:	689b      	ldr	r3, [r3, #8]
 80a5ad6:	429a      	cmp	r2, r3
 80a5ad8:	d903      	bls.n	80a5ae2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80a5ada:	68bb      	ldr	r3, [r7, #8]
 80a5adc:	689a      	ldr	r2, [r3, #8]
 80a5ade:	68bb      	ldr	r3, [r7, #8]
 80a5ae0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80a5ae2:	69bb      	ldr	r3, [r7, #24]
 80a5ae4:	015a      	lsls	r2, r3, #5
 80a5ae6:	69fb      	ldr	r3, [r7, #28]
 80a5ae8:	4413      	add	r3, r2
 80a5aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5aee:	691b      	ldr	r3, [r3, #16]
 80a5af0:	69ba      	ldr	r2, [r7, #24]
 80a5af2:	0151      	lsls	r1, r2, #5
 80a5af4:	69fa      	ldr	r2, [r7, #28]
 80a5af6:	440a      	add	r2, r1
 80a5af8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5afc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80a5b00:	6113      	str	r3, [r2, #16]
 80a5b02:	e044      	b.n	80a5b8e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80a5b04:	68bb      	ldr	r3, [r7, #8]
 80a5b06:	691a      	ldr	r2, [r3, #16]
 80a5b08:	68bb      	ldr	r3, [r7, #8]
 80a5b0a:	689b      	ldr	r3, [r3, #8]
 80a5b0c:	4413      	add	r3, r2
 80a5b0e:	1e5a      	subs	r2, r3, #1
 80a5b10:	68bb      	ldr	r3, [r7, #8]
 80a5b12:	689b      	ldr	r3, [r3, #8]
 80a5b14:	fbb2 f3f3 	udiv	r3, r2, r3
 80a5b18:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80a5b1a:	69bb      	ldr	r3, [r7, #24]
 80a5b1c:	015a      	lsls	r2, r3, #5
 80a5b1e:	69fb      	ldr	r3, [r7, #28]
 80a5b20:	4413      	add	r3, r2
 80a5b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5b26:	691a      	ldr	r2, [r3, #16]
 80a5b28:	8afb      	ldrh	r3, [r7, #22]
 80a5b2a:	04d9      	lsls	r1, r3, #19
 80a5b2c:	4b6c      	ldr	r3, [pc, #432]	@ (80a5ce0 <USB_EPStartXfer+0x2ec>)
 80a5b2e:	400b      	ands	r3, r1
 80a5b30:	69b9      	ldr	r1, [r7, #24]
 80a5b32:	0148      	lsls	r0, r1, #5
 80a5b34:	69f9      	ldr	r1, [r7, #28]
 80a5b36:	4401      	add	r1, r0
 80a5b38:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80a5b3c:	4313      	orrs	r3, r2
 80a5b3e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80a5b40:	68bb      	ldr	r3, [r7, #8]
 80a5b42:	791b      	ldrb	r3, [r3, #4]
 80a5b44:	2b01      	cmp	r3, #1
 80a5b46:	d122      	bne.n	80a5b8e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80a5b48:	69bb      	ldr	r3, [r7, #24]
 80a5b4a:	015a      	lsls	r2, r3, #5
 80a5b4c:	69fb      	ldr	r3, [r7, #28]
 80a5b4e:	4413      	add	r3, r2
 80a5b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5b54:	691b      	ldr	r3, [r3, #16]
 80a5b56:	69ba      	ldr	r2, [r7, #24]
 80a5b58:	0151      	lsls	r1, r2, #5
 80a5b5a:	69fa      	ldr	r2, [r7, #28]
 80a5b5c:	440a      	add	r2, r1
 80a5b5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5b62:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80a5b66:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80a5b68:	69bb      	ldr	r3, [r7, #24]
 80a5b6a:	015a      	lsls	r2, r3, #5
 80a5b6c:	69fb      	ldr	r3, [r7, #28]
 80a5b6e:	4413      	add	r3, r2
 80a5b70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5b74:	691a      	ldr	r2, [r3, #16]
 80a5b76:	8afb      	ldrh	r3, [r7, #22]
 80a5b78:	075b      	lsls	r3, r3, #29
 80a5b7a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80a5b7e:	69b9      	ldr	r1, [r7, #24]
 80a5b80:	0148      	lsls	r0, r1, #5
 80a5b82:	69f9      	ldr	r1, [r7, #28]
 80a5b84:	4401      	add	r1, r0
 80a5b86:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80a5b8a:	4313      	orrs	r3, r2
 80a5b8c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80a5b8e:	69bb      	ldr	r3, [r7, #24]
 80a5b90:	015a      	lsls	r2, r3, #5
 80a5b92:	69fb      	ldr	r3, [r7, #28]
 80a5b94:	4413      	add	r3, r2
 80a5b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5b9a:	691a      	ldr	r2, [r3, #16]
 80a5b9c:	68bb      	ldr	r3, [r7, #8]
 80a5b9e:	691b      	ldr	r3, [r3, #16]
 80a5ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80a5ba4:	69b9      	ldr	r1, [r7, #24]
 80a5ba6:	0148      	lsls	r0, r1, #5
 80a5ba8:	69f9      	ldr	r1, [r7, #28]
 80a5baa:	4401      	add	r1, r0
 80a5bac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80a5bb0:	4313      	orrs	r3, r2
 80a5bb2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80a5bb4:	79fb      	ldrb	r3, [r7, #7]
 80a5bb6:	2b01      	cmp	r3, #1
 80a5bb8:	d14b      	bne.n	80a5c52 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80a5bba:	68bb      	ldr	r3, [r7, #8]
 80a5bbc:	69db      	ldr	r3, [r3, #28]
 80a5bbe:	2b00      	cmp	r3, #0
 80a5bc0:	d009      	beq.n	80a5bd6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80a5bc2:	69bb      	ldr	r3, [r7, #24]
 80a5bc4:	015a      	lsls	r2, r3, #5
 80a5bc6:	69fb      	ldr	r3, [r7, #28]
 80a5bc8:	4413      	add	r3, r2
 80a5bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5bce:	461a      	mov	r2, r3
 80a5bd0:	68bb      	ldr	r3, [r7, #8]
 80a5bd2:	69db      	ldr	r3, [r3, #28]
 80a5bd4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80a5bd6:	68bb      	ldr	r3, [r7, #8]
 80a5bd8:	791b      	ldrb	r3, [r3, #4]
 80a5bda:	2b01      	cmp	r3, #1
 80a5bdc:	d128      	bne.n	80a5c30 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80a5bde:	69fb      	ldr	r3, [r7, #28]
 80a5be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5be4:	689b      	ldr	r3, [r3, #8]
 80a5be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a5bea:	2b00      	cmp	r3, #0
 80a5bec:	d110      	bne.n	80a5c10 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80a5bee:	69bb      	ldr	r3, [r7, #24]
 80a5bf0:	015a      	lsls	r2, r3, #5
 80a5bf2:	69fb      	ldr	r3, [r7, #28]
 80a5bf4:	4413      	add	r3, r2
 80a5bf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5bfa:	681b      	ldr	r3, [r3, #0]
 80a5bfc:	69ba      	ldr	r2, [r7, #24]
 80a5bfe:	0151      	lsls	r1, r2, #5
 80a5c00:	69fa      	ldr	r2, [r7, #28]
 80a5c02:	440a      	add	r2, r1
 80a5c04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5c08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80a5c0c:	6013      	str	r3, [r2, #0]
 80a5c0e:	e00f      	b.n	80a5c30 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80a5c10:	69bb      	ldr	r3, [r7, #24]
 80a5c12:	015a      	lsls	r2, r3, #5
 80a5c14:	69fb      	ldr	r3, [r7, #28]
 80a5c16:	4413      	add	r3, r2
 80a5c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5c1c:	681b      	ldr	r3, [r3, #0]
 80a5c1e:	69ba      	ldr	r2, [r7, #24]
 80a5c20:	0151      	lsls	r1, r2, #5
 80a5c22:	69fa      	ldr	r2, [r7, #28]
 80a5c24:	440a      	add	r2, r1
 80a5c26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80a5c2e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80a5c30:	69bb      	ldr	r3, [r7, #24]
 80a5c32:	015a      	lsls	r2, r3, #5
 80a5c34:	69fb      	ldr	r3, [r7, #28]
 80a5c36:	4413      	add	r3, r2
 80a5c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5c3c:	681b      	ldr	r3, [r3, #0]
 80a5c3e:	69ba      	ldr	r2, [r7, #24]
 80a5c40:	0151      	lsls	r1, r2, #5
 80a5c42:	69fa      	ldr	r2, [r7, #28]
 80a5c44:	440a      	add	r2, r1
 80a5c46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5c4a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80a5c4e:	6013      	str	r3, [r2, #0]
 80a5c50:	e169      	b.n	80a5f26 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80a5c52:	69bb      	ldr	r3, [r7, #24]
 80a5c54:	015a      	lsls	r2, r3, #5
 80a5c56:	69fb      	ldr	r3, [r7, #28]
 80a5c58:	4413      	add	r3, r2
 80a5c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5c5e:	681b      	ldr	r3, [r3, #0]
 80a5c60:	69ba      	ldr	r2, [r7, #24]
 80a5c62:	0151      	lsls	r1, r2, #5
 80a5c64:	69fa      	ldr	r2, [r7, #28]
 80a5c66:	440a      	add	r2, r1
 80a5c68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5c6c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80a5c70:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80a5c72:	68bb      	ldr	r3, [r7, #8]
 80a5c74:	791b      	ldrb	r3, [r3, #4]
 80a5c76:	2b01      	cmp	r3, #1
 80a5c78:	d015      	beq.n	80a5ca6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80a5c7a:	68bb      	ldr	r3, [r7, #8]
 80a5c7c:	691b      	ldr	r3, [r3, #16]
 80a5c7e:	2b00      	cmp	r3, #0
 80a5c80:	f000 8151 	beq.w	80a5f26 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80a5c84:	69fb      	ldr	r3, [r7, #28]
 80a5c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80a5c8c:	68bb      	ldr	r3, [r7, #8]
 80a5c8e:	781b      	ldrb	r3, [r3, #0]
 80a5c90:	f003 030f 	and.w	r3, r3, #15
 80a5c94:	2101      	movs	r1, #1
 80a5c96:	fa01 f303 	lsl.w	r3, r1, r3
 80a5c9a:	69f9      	ldr	r1, [r7, #28]
 80a5c9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a5ca0:	4313      	orrs	r3, r2
 80a5ca2:	634b      	str	r3, [r1, #52]	@ 0x34
 80a5ca4:	e13f      	b.n	80a5f26 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80a5ca6:	69fb      	ldr	r3, [r7, #28]
 80a5ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5cac:	689b      	ldr	r3, [r3, #8]
 80a5cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a5cb2:	2b00      	cmp	r3, #0
 80a5cb4:	d116      	bne.n	80a5ce4 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80a5cb6:	69bb      	ldr	r3, [r7, #24]
 80a5cb8:	015a      	lsls	r2, r3, #5
 80a5cba:	69fb      	ldr	r3, [r7, #28]
 80a5cbc:	4413      	add	r3, r2
 80a5cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5cc2:	681b      	ldr	r3, [r3, #0]
 80a5cc4:	69ba      	ldr	r2, [r7, #24]
 80a5cc6:	0151      	lsls	r1, r2, #5
 80a5cc8:	69fa      	ldr	r2, [r7, #28]
 80a5cca:	440a      	add	r2, r1
 80a5ccc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5cd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80a5cd4:	6013      	str	r3, [r2, #0]
 80a5cd6:	e015      	b.n	80a5d04 <USB_EPStartXfer+0x310>
 80a5cd8:	e007ffff 	.word	0xe007ffff
 80a5cdc:	fff80000 	.word	0xfff80000
 80a5ce0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80a5ce4:	69bb      	ldr	r3, [r7, #24]
 80a5ce6:	015a      	lsls	r2, r3, #5
 80a5ce8:	69fb      	ldr	r3, [r7, #28]
 80a5cea:	4413      	add	r3, r2
 80a5cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5cf0:	681b      	ldr	r3, [r3, #0]
 80a5cf2:	69ba      	ldr	r2, [r7, #24]
 80a5cf4:	0151      	lsls	r1, r2, #5
 80a5cf6:	69fa      	ldr	r2, [r7, #28]
 80a5cf8:	440a      	add	r2, r1
 80a5cfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80a5d02:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80a5d04:	68bb      	ldr	r3, [r7, #8]
 80a5d06:	68d9      	ldr	r1, [r3, #12]
 80a5d08:	68bb      	ldr	r3, [r7, #8]
 80a5d0a:	781a      	ldrb	r2, [r3, #0]
 80a5d0c:	68bb      	ldr	r3, [r7, #8]
 80a5d0e:	691b      	ldr	r3, [r3, #16]
 80a5d10:	b298      	uxth	r0, r3
 80a5d12:	79fb      	ldrb	r3, [r7, #7]
 80a5d14:	9300      	str	r3, [sp, #0]
 80a5d16:	4603      	mov	r3, r0
 80a5d18:	68f8      	ldr	r0, [r7, #12]
 80a5d1a:	f000 f9b9 	bl	80a6090 <USB_WritePacket>
 80a5d1e:	e102      	b.n	80a5f26 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80a5d20:	69bb      	ldr	r3, [r7, #24]
 80a5d22:	015a      	lsls	r2, r3, #5
 80a5d24:	69fb      	ldr	r3, [r7, #28]
 80a5d26:	4413      	add	r3, r2
 80a5d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5d2c:	691a      	ldr	r2, [r3, #16]
 80a5d2e:	69bb      	ldr	r3, [r7, #24]
 80a5d30:	0159      	lsls	r1, r3, #5
 80a5d32:	69fb      	ldr	r3, [r7, #28]
 80a5d34:	440b      	add	r3, r1
 80a5d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5d3a:	4619      	mov	r1, r3
 80a5d3c:	4b7c      	ldr	r3, [pc, #496]	@ (80a5f30 <USB_EPStartXfer+0x53c>)
 80a5d3e:	4013      	ands	r3, r2
 80a5d40:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80a5d42:	69bb      	ldr	r3, [r7, #24]
 80a5d44:	015a      	lsls	r2, r3, #5
 80a5d46:	69fb      	ldr	r3, [r7, #28]
 80a5d48:	4413      	add	r3, r2
 80a5d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5d4e:	691a      	ldr	r2, [r3, #16]
 80a5d50:	69bb      	ldr	r3, [r7, #24]
 80a5d52:	0159      	lsls	r1, r3, #5
 80a5d54:	69fb      	ldr	r3, [r7, #28]
 80a5d56:	440b      	add	r3, r1
 80a5d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5d5c:	4619      	mov	r1, r3
 80a5d5e:	4b75      	ldr	r3, [pc, #468]	@ (80a5f34 <USB_EPStartXfer+0x540>)
 80a5d60:	4013      	ands	r3, r2
 80a5d62:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80a5d64:	69bb      	ldr	r3, [r7, #24]
 80a5d66:	2b00      	cmp	r3, #0
 80a5d68:	d12f      	bne.n	80a5dca <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80a5d6a:	68bb      	ldr	r3, [r7, #8]
 80a5d6c:	691b      	ldr	r3, [r3, #16]
 80a5d6e:	2b00      	cmp	r3, #0
 80a5d70:	d003      	beq.n	80a5d7a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80a5d72:	68bb      	ldr	r3, [r7, #8]
 80a5d74:	689a      	ldr	r2, [r3, #8]
 80a5d76:	68bb      	ldr	r3, [r7, #8]
 80a5d78:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80a5d7a:	68bb      	ldr	r3, [r7, #8]
 80a5d7c:	689a      	ldr	r2, [r3, #8]
 80a5d7e:	68bb      	ldr	r3, [r7, #8]
 80a5d80:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80a5d82:	69bb      	ldr	r3, [r7, #24]
 80a5d84:	015a      	lsls	r2, r3, #5
 80a5d86:	69fb      	ldr	r3, [r7, #28]
 80a5d88:	4413      	add	r3, r2
 80a5d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5d8e:	691a      	ldr	r2, [r3, #16]
 80a5d90:	68bb      	ldr	r3, [r7, #8]
 80a5d92:	6a1b      	ldr	r3, [r3, #32]
 80a5d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80a5d98:	69b9      	ldr	r1, [r7, #24]
 80a5d9a:	0148      	lsls	r0, r1, #5
 80a5d9c:	69f9      	ldr	r1, [r7, #28]
 80a5d9e:	4401      	add	r1, r0
 80a5da0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80a5da4:	4313      	orrs	r3, r2
 80a5da6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80a5da8:	69bb      	ldr	r3, [r7, #24]
 80a5daa:	015a      	lsls	r2, r3, #5
 80a5dac:	69fb      	ldr	r3, [r7, #28]
 80a5dae:	4413      	add	r3, r2
 80a5db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5db4:	691b      	ldr	r3, [r3, #16]
 80a5db6:	69ba      	ldr	r2, [r7, #24]
 80a5db8:	0151      	lsls	r1, r2, #5
 80a5dba:	69fa      	ldr	r2, [r7, #28]
 80a5dbc:	440a      	add	r2, r1
 80a5dbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a5dc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80a5dc6:	6113      	str	r3, [r2, #16]
 80a5dc8:	e05f      	b.n	80a5e8a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80a5dca:	68bb      	ldr	r3, [r7, #8]
 80a5dcc:	691b      	ldr	r3, [r3, #16]
 80a5dce:	2b00      	cmp	r3, #0
 80a5dd0:	d123      	bne.n	80a5e1a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80a5dd2:	69bb      	ldr	r3, [r7, #24]
 80a5dd4:	015a      	lsls	r2, r3, #5
 80a5dd6:	69fb      	ldr	r3, [r7, #28]
 80a5dd8:	4413      	add	r3, r2
 80a5dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5dde:	691a      	ldr	r2, [r3, #16]
 80a5de0:	68bb      	ldr	r3, [r7, #8]
 80a5de2:	689b      	ldr	r3, [r3, #8]
 80a5de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80a5de8:	69b9      	ldr	r1, [r7, #24]
 80a5dea:	0148      	lsls	r0, r1, #5
 80a5dec:	69f9      	ldr	r1, [r7, #28]
 80a5dee:	4401      	add	r1, r0
 80a5df0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80a5df4:	4313      	orrs	r3, r2
 80a5df6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80a5df8:	69bb      	ldr	r3, [r7, #24]
 80a5dfa:	015a      	lsls	r2, r3, #5
 80a5dfc:	69fb      	ldr	r3, [r7, #28]
 80a5dfe:	4413      	add	r3, r2
 80a5e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5e04:	691b      	ldr	r3, [r3, #16]
 80a5e06:	69ba      	ldr	r2, [r7, #24]
 80a5e08:	0151      	lsls	r1, r2, #5
 80a5e0a:	69fa      	ldr	r2, [r7, #28]
 80a5e0c:	440a      	add	r2, r1
 80a5e0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a5e12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80a5e16:	6113      	str	r3, [r2, #16]
 80a5e18:	e037      	b.n	80a5e8a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80a5e1a:	68bb      	ldr	r3, [r7, #8]
 80a5e1c:	691a      	ldr	r2, [r3, #16]
 80a5e1e:	68bb      	ldr	r3, [r7, #8]
 80a5e20:	689b      	ldr	r3, [r3, #8]
 80a5e22:	4413      	add	r3, r2
 80a5e24:	1e5a      	subs	r2, r3, #1
 80a5e26:	68bb      	ldr	r3, [r7, #8]
 80a5e28:	689b      	ldr	r3, [r3, #8]
 80a5e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 80a5e2e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80a5e30:	68bb      	ldr	r3, [r7, #8]
 80a5e32:	689b      	ldr	r3, [r3, #8]
 80a5e34:	8afa      	ldrh	r2, [r7, #22]
 80a5e36:	fb03 f202 	mul.w	r2, r3, r2
 80a5e3a:	68bb      	ldr	r3, [r7, #8]
 80a5e3c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80a5e3e:	69bb      	ldr	r3, [r7, #24]
 80a5e40:	015a      	lsls	r2, r3, #5
 80a5e42:	69fb      	ldr	r3, [r7, #28]
 80a5e44:	4413      	add	r3, r2
 80a5e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5e4a:	691a      	ldr	r2, [r3, #16]
 80a5e4c:	8afb      	ldrh	r3, [r7, #22]
 80a5e4e:	04d9      	lsls	r1, r3, #19
 80a5e50:	4b39      	ldr	r3, [pc, #228]	@ (80a5f38 <USB_EPStartXfer+0x544>)
 80a5e52:	400b      	ands	r3, r1
 80a5e54:	69b9      	ldr	r1, [r7, #24]
 80a5e56:	0148      	lsls	r0, r1, #5
 80a5e58:	69f9      	ldr	r1, [r7, #28]
 80a5e5a:	4401      	add	r1, r0
 80a5e5c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80a5e60:	4313      	orrs	r3, r2
 80a5e62:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80a5e64:	69bb      	ldr	r3, [r7, #24]
 80a5e66:	015a      	lsls	r2, r3, #5
 80a5e68:	69fb      	ldr	r3, [r7, #28]
 80a5e6a:	4413      	add	r3, r2
 80a5e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5e70:	691a      	ldr	r2, [r3, #16]
 80a5e72:	68bb      	ldr	r3, [r7, #8]
 80a5e74:	6a1b      	ldr	r3, [r3, #32]
 80a5e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80a5e7a:	69b9      	ldr	r1, [r7, #24]
 80a5e7c:	0148      	lsls	r0, r1, #5
 80a5e7e:	69f9      	ldr	r1, [r7, #28]
 80a5e80:	4401      	add	r1, r0
 80a5e82:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80a5e86:	4313      	orrs	r3, r2
 80a5e88:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80a5e8a:	79fb      	ldrb	r3, [r7, #7]
 80a5e8c:	2b01      	cmp	r3, #1
 80a5e8e:	d10d      	bne.n	80a5eac <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80a5e90:	68bb      	ldr	r3, [r7, #8]
 80a5e92:	68db      	ldr	r3, [r3, #12]
 80a5e94:	2b00      	cmp	r3, #0
 80a5e96:	d009      	beq.n	80a5eac <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80a5e98:	68bb      	ldr	r3, [r7, #8]
 80a5e9a:	68d9      	ldr	r1, [r3, #12]
 80a5e9c:	69bb      	ldr	r3, [r7, #24]
 80a5e9e:	015a      	lsls	r2, r3, #5
 80a5ea0:	69fb      	ldr	r3, [r7, #28]
 80a5ea2:	4413      	add	r3, r2
 80a5ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5ea8:	460a      	mov	r2, r1
 80a5eaa:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80a5eac:	68bb      	ldr	r3, [r7, #8]
 80a5eae:	791b      	ldrb	r3, [r3, #4]
 80a5eb0:	2b01      	cmp	r3, #1
 80a5eb2:	d128      	bne.n	80a5f06 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80a5eb4:	69fb      	ldr	r3, [r7, #28]
 80a5eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5eba:	689b      	ldr	r3, [r3, #8]
 80a5ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a5ec0:	2b00      	cmp	r3, #0
 80a5ec2:	d110      	bne.n	80a5ee6 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80a5ec4:	69bb      	ldr	r3, [r7, #24]
 80a5ec6:	015a      	lsls	r2, r3, #5
 80a5ec8:	69fb      	ldr	r3, [r7, #28]
 80a5eca:	4413      	add	r3, r2
 80a5ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5ed0:	681b      	ldr	r3, [r3, #0]
 80a5ed2:	69ba      	ldr	r2, [r7, #24]
 80a5ed4:	0151      	lsls	r1, r2, #5
 80a5ed6:	69fa      	ldr	r2, [r7, #28]
 80a5ed8:	440a      	add	r2, r1
 80a5eda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a5ede:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80a5ee2:	6013      	str	r3, [r2, #0]
 80a5ee4:	e00f      	b.n	80a5f06 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80a5ee6:	69bb      	ldr	r3, [r7, #24]
 80a5ee8:	015a      	lsls	r2, r3, #5
 80a5eea:	69fb      	ldr	r3, [r7, #28]
 80a5eec:	4413      	add	r3, r2
 80a5eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5ef2:	681b      	ldr	r3, [r3, #0]
 80a5ef4:	69ba      	ldr	r2, [r7, #24]
 80a5ef6:	0151      	lsls	r1, r2, #5
 80a5ef8:	69fa      	ldr	r2, [r7, #28]
 80a5efa:	440a      	add	r2, r1
 80a5efc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a5f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80a5f04:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80a5f06:	69bb      	ldr	r3, [r7, #24]
 80a5f08:	015a      	lsls	r2, r3, #5
 80a5f0a:	69fb      	ldr	r3, [r7, #28]
 80a5f0c:	4413      	add	r3, r2
 80a5f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5f12:	681b      	ldr	r3, [r3, #0]
 80a5f14:	69ba      	ldr	r2, [r7, #24]
 80a5f16:	0151      	lsls	r1, r2, #5
 80a5f18:	69fa      	ldr	r2, [r7, #28]
 80a5f1a:	440a      	add	r2, r1
 80a5f1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a5f20:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80a5f24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80a5f26:	2300      	movs	r3, #0
}
 80a5f28:	4618      	mov	r0, r3
 80a5f2a:	3720      	adds	r7, #32
 80a5f2c:	46bd      	mov	sp, r7
 80a5f2e:	bd80      	pop	{r7, pc}
 80a5f30:	fff80000 	.word	0xfff80000
 80a5f34:	e007ffff 	.word	0xe007ffff
 80a5f38:	1ff80000 	.word	0x1ff80000

080a5f3c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80a5f3c:	b480      	push	{r7}
 80a5f3e:	b087      	sub	sp, #28
 80a5f40:	af00      	add	r7, sp, #0
 80a5f42:	6078      	str	r0, [r7, #4]
 80a5f44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80a5f46:	2300      	movs	r3, #0
 80a5f48:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80a5f4a:	2300      	movs	r3, #0
 80a5f4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a5f4e:	687b      	ldr	r3, [r7, #4]
 80a5f50:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80a5f52:	683b      	ldr	r3, [r7, #0]
 80a5f54:	785b      	ldrb	r3, [r3, #1]
 80a5f56:	2b01      	cmp	r3, #1
 80a5f58:	d14a      	bne.n	80a5ff0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80a5f5a:	683b      	ldr	r3, [r7, #0]
 80a5f5c:	781b      	ldrb	r3, [r3, #0]
 80a5f5e:	015a      	lsls	r2, r3, #5
 80a5f60:	693b      	ldr	r3, [r7, #16]
 80a5f62:	4413      	add	r3, r2
 80a5f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5f68:	681b      	ldr	r3, [r3, #0]
 80a5f6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a5f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a5f72:	f040 8086 	bne.w	80a6082 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80a5f76:	683b      	ldr	r3, [r7, #0]
 80a5f78:	781b      	ldrb	r3, [r3, #0]
 80a5f7a:	015a      	lsls	r2, r3, #5
 80a5f7c:	693b      	ldr	r3, [r7, #16]
 80a5f7e:	4413      	add	r3, r2
 80a5f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5f84:	681b      	ldr	r3, [r3, #0]
 80a5f86:	683a      	ldr	r2, [r7, #0]
 80a5f88:	7812      	ldrb	r2, [r2, #0]
 80a5f8a:	0151      	lsls	r1, r2, #5
 80a5f8c:	693a      	ldr	r2, [r7, #16]
 80a5f8e:	440a      	add	r2, r1
 80a5f90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5f94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80a5f98:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80a5f9a:	683b      	ldr	r3, [r7, #0]
 80a5f9c:	781b      	ldrb	r3, [r3, #0]
 80a5f9e:	015a      	lsls	r2, r3, #5
 80a5fa0:	693b      	ldr	r3, [r7, #16]
 80a5fa2:	4413      	add	r3, r2
 80a5fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5fa8:	681b      	ldr	r3, [r3, #0]
 80a5faa:	683a      	ldr	r2, [r7, #0]
 80a5fac:	7812      	ldrb	r2, [r2, #0]
 80a5fae:	0151      	lsls	r1, r2, #5
 80a5fb0:	693a      	ldr	r2, [r7, #16]
 80a5fb2:	440a      	add	r2, r1
 80a5fb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5fb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80a5fbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80a5fbe:	68fb      	ldr	r3, [r7, #12]
 80a5fc0:	3301      	adds	r3, #1
 80a5fc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80a5fc4:	68fb      	ldr	r3, [r7, #12]
 80a5fc6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80a5fca:	4293      	cmp	r3, r2
 80a5fcc:	d902      	bls.n	80a5fd4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80a5fce:	2301      	movs	r3, #1
 80a5fd0:	75fb      	strb	r3, [r7, #23]
          break;
 80a5fd2:	e056      	b.n	80a6082 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80a5fd4:	683b      	ldr	r3, [r7, #0]
 80a5fd6:	781b      	ldrb	r3, [r3, #0]
 80a5fd8:	015a      	lsls	r2, r3, #5
 80a5fda:	693b      	ldr	r3, [r7, #16]
 80a5fdc:	4413      	add	r3, r2
 80a5fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5fe2:	681b      	ldr	r3, [r3, #0]
 80a5fe4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a5fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a5fec:	d0e7      	beq.n	80a5fbe <USB_EPStopXfer+0x82>
 80a5fee:	e048      	b.n	80a6082 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80a5ff0:	683b      	ldr	r3, [r7, #0]
 80a5ff2:	781b      	ldrb	r3, [r3, #0]
 80a5ff4:	015a      	lsls	r2, r3, #5
 80a5ff6:	693b      	ldr	r3, [r7, #16]
 80a5ff8:	4413      	add	r3, r2
 80a5ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5ffe:	681b      	ldr	r3, [r3, #0]
 80a6000:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a6004:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a6008:	d13b      	bne.n	80a6082 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80a600a:	683b      	ldr	r3, [r7, #0]
 80a600c:	781b      	ldrb	r3, [r3, #0]
 80a600e:	015a      	lsls	r2, r3, #5
 80a6010:	693b      	ldr	r3, [r7, #16]
 80a6012:	4413      	add	r3, r2
 80a6014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6018:	681b      	ldr	r3, [r3, #0]
 80a601a:	683a      	ldr	r2, [r7, #0]
 80a601c:	7812      	ldrb	r2, [r2, #0]
 80a601e:	0151      	lsls	r1, r2, #5
 80a6020:	693a      	ldr	r2, [r7, #16]
 80a6022:	440a      	add	r2, r1
 80a6024:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6028:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80a602c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80a602e:	683b      	ldr	r3, [r7, #0]
 80a6030:	781b      	ldrb	r3, [r3, #0]
 80a6032:	015a      	lsls	r2, r3, #5
 80a6034:	693b      	ldr	r3, [r7, #16]
 80a6036:	4413      	add	r3, r2
 80a6038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a603c:	681b      	ldr	r3, [r3, #0]
 80a603e:	683a      	ldr	r2, [r7, #0]
 80a6040:	7812      	ldrb	r2, [r2, #0]
 80a6042:	0151      	lsls	r1, r2, #5
 80a6044:	693a      	ldr	r2, [r7, #16]
 80a6046:	440a      	add	r2, r1
 80a6048:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a604c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80a6050:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80a6052:	68fb      	ldr	r3, [r7, #12]
 80a6054:	3301      	adds	r3, #1
 80a6056:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80a6058:	68fb      	ldr	r3, [r7, #12]
 80a605a:	f242 7210 	movw	r2, #10000	@ 0x2710
 80a605e:	4293      	cmp	r3, r2
 80a6060:	d902      	bls.n	80a6068 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80a6062:	2301      	movs	r3, #1
 80a6064:	75fb      	strb	r3, [r7, #23]
          break;
 80a6066:	e00c      	b.n	80a6082 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80a6068:	683b      	ldr	r3, [r7, #0]
 80a606a:	781b      	ldrb	r3, [r3, #0]
 80a606c:	015a      	lsls	r2, r3, #5
 80a606e:	693b      	ldr	r3, [r7, #16]
 80a6070:	4413      	add	r3, r2
 80a6072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6076:	681b      	ldr	r3, [r3, #0]
 80a6078:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a607c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a6080:	d0e7      	beq.n	80a6052 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80a6082:	7dfb      	ldrb	r3, [r7, #23]
}
 80a6084:	4618      	mov	r0, r3
 80a6086:	371c      	adds	r7, #28
 80a6088:	46bd      	mov	sp, r7
 80a608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a608e:	4770      	bx	lr

080a6090 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80a6090:	b480      	push	{r7}
 80a6092:	b089      	sub	sp, #36	@ 0x24
 80a6094:	af00      	add	r7, sp, #0
 80a6096:	60f8      	str	r0, [r7, #12]
 80a6098:	60b9      	str	r1, [r7, #8]
 80a609a:	4611      	mov	r1, r2
 80a609c:	461a      	mov	r2, r3
 80a609e:	460b      	mov	r3, r1
 80a60a0:	71fb      	strb	r3, [r7, #7]
 80a60a2:	4613      	mov	r3, r2
 80a60a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a60a6:	68fb      	ldr	r3, [r7, #12]
 80a60a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80a60aa:	68bb      	ldr	r3, [r7, #8]
 80a60ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80a60ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80a60b2:	2b00      	cmp	r3, #0
 80a60b4:	d123      	bne.n	80a60fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80a60b6:	88bb      	ldrh	r3, [r7, #4]
 80a60b8:	3303      	adds	r3, #3
 80a60ba:	089b      	lsrs	r3, r3, #2
 80a60bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80a60be:	2300      	movs	r3, #0
 80a60c0:	61bb      	str	r3, [r7, #24]
 80a60c2:	e018      	b.n	80a60f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80a60c4:	79fb      	ldrb	r3, [r7, #7]
 80a60c6:	031a      	lsls	r2, r3, #12
 80a60c8:	697b      	ldr	r3, [r7, #20]
 80a60ca:	4413      	add	r3, r2
 80a60cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80a60d0:	461a      	mov	r2, r3
 80a60d2:	69fb      	ldr	r3, [r7, #28]
 80a60d4:	681b      	ldr	r3, [r3, #0]
 80a60d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80a60d8:	69fb      	ldr	r3, [r7, #28]
 80a60da:	3301      	adds	r3, #1
 80a60dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80a60de:	69fb      	ldr	r3, [r7, #28]
 80a60e0:	3301      	adds	r3, #1
 80a60e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80a60e4:	69fb      	ldr	r3, [r7, #28]
 80a60e6:	3301      	adds	r3, #1
 80a60e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80a60ea:	69fb      	ldr	r3, [r7, #28]
 80a60ec:	3301      	adds	r3, #1
 80a60ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80a60f0:	69bb      	ldr	r3, [r7, #24]
 80a60f2:	3301      	adds	r3, #1
 80a60f4:	61bb      	str	r3, [r7, #24]
 80a60f6:	69ba      	ldr	r2, [r7, #24]
 80a60f8:	693b      	ldr	r3, [r7, #16]
 80a60fa:	429a      	cmp	r2, r3
 80a60fc:	d3e2      	bcc.n	80a60c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80a60fe:	2300      	movs	r3, #0
}
 80a6100:	4618      	mov	r0, r3
 80a6102:	3724      	adds	r7, #36	@ 0x24
 80a6104:	46bd      	mov	sp, r7
 80a6106:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a610a:	4770      	bx	lr

080a610c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80a610c:	b480      	push	{r7}
 80a610e:	b08b      	sub	sp, #44	@ 0x2c
 80a6110:	af00      	add	r7, sp, #0
 80a6112:	60f8      	str	r0, [r7, #12]
 80a6114:	60b9      	str	r1, [r7, #8]
 80a6116:	4613      	mov	r3, r2
 80a6118:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a611a:	68fb      	ldr	r3, [r7, #12]
 80a611c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80a611e:	68bb      	ldr	r3, [r7, #8]
 80a6120:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80a6122:	88fb      	ldrh	r3, [r7, #6]
 80a6124:	089b      	lsrs	r3, r3, #2
 80a6126:	b29b      	uxth	r3, r3
 80a6128:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80a612a:	88fb      	ldrh	r3, [r7, #6]
 80a612c:	f003 0303 	and.w	r3, r3, #3
 80a6130:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80a6132:	2300      	movs	r3, #0
 80a6134:	623b      	str	r3, [r7, #32]
 80a6136:	e014      	b.n	80a6162 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80a6138:	69bb      	ldr	r3, [r7, #24]
 80a613a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80a613e:	681a      	ldr	r2, [r3, #0]
 80a6140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a6142:	601a      	str	r2, [r3, #0]
    pDest++;
 80a6144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a6146:	3301      	adds	r3, #1
 80a6148:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80a614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a614c:	3301      	adds	r3, #1
 80a614e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80a6150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a6152:	3301      	adds	r3, #1
 80a6154:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80a6156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a6158:	3301      	adds	r3, #1
 80a615a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80a615c:	6a3b      	ldr	r3, [r7, #32]
 80a615e:	3301      	adds	r3, #1
 80a6160:	623b      	str	r3, [r7, #32]
 80a6162:	6a3a      	ldr	r2, [r7, #32]
 80a6164:	697b      	ldr	r3, [r7, #20]
 80a6166:	429a      	cmp	r2, r3
 80a6168:	d3e6      	bcc.n	80a6138 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80a616a:	8bfb      	ldrh	r3, [r7, #30]
 80a616c:	2b00      	cmp	r3, #0
 80a616e:	d01e      	beq.n	80a61ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80a6170:	2300      	movs	r3, #0
 80a6172:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80a6174:	69bb      	ldr	r3, [r7, #24]
 80a6176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80a617a:	461a      	mov	r2, r3
 80a617c:	f107 0310 	add.w	r3, r7, #16
 80a6180:	6812      	ldr	r2, [r2, #0]
 80a6182:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80a6184:	693a      	ldr	r2, [r7, #16]
 80a6186:	6a3b      	ldr	r3, [r7, #32]
 80a6188:	b2db      	uxtb	r3, r3
 80a618a:	00db      	lsls	r3, r3, #3
 80a618c:	fa22 f303 	lsr.w	r3, r2, r3
 80a6190:	b2da      	uxtb	r2, r3
 80a6192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a6194:	701a      	strb	r2, [r3, #0]
      i++;
 80a6196:	6a3b      	ldr	r3, [r7, #32]
 80a6198:	3301      	adds	r3, #1
 80a619a:	623b      	str	r3, [r7, #32]
      pDest++;
 80a619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a619e:	3301      	adds	r3, #1
 80a61a0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80a61a2:	8bfb      	ldrh	r3, [r7, #30]
 80a61a4:	3b01      	subs	r3, #1
 80a61a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80a61a8:	8bfb      	ldrh	r3, [r7, #30]
 80a61aa:	2b00      	cmp	r3, #0
 80a61ac:	d1ea      	bne.n	80a6184 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80a61ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80a61b0:	4618      	mov	r0, r3
 80a61b2:	372c      	adds	r7, #44	@ 0x2c
 80a61b4:	46bd      	mov	sp, r7
 80a61b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a61ba:	4770      	bx	lr

080a61bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80a61bc:	b480      	push	{r7}
 80a61be:	b085      	sub	sp, #20
 80a61c0:	af00      	add	r7, sp, #0
 80a61c2:	6078      	str	r0, [r7, #4]
 80a61c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a61c6:	687b      	ldr	r3, [r7, #4]
 80a61c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80a61ca:	683b      	ldr	r3, [r7, #0]
 80a61cc:	781b      	ldrb	r3, [r3, #0]
 80a61ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80a61d0:	683b      	ldr	r3, [r7, #0]
 80a61d2:	785b      	ldrb	r3, [r3, #1]
 80a61d4:	2b01      	cmp	r3, #1
 80a61d6:	d12c      	bne.n	80a6232 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80a61d8:	68bb      	ldr	r3, [r7, #8]
 80a61da:	015a      	lsls	r2, r3, #5
 80a61dc:	68fb      	ldr	r3, [r7, #12]
 80a61de:	4413      	add	r3, r2
 80a61e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a61e4:	681b      	ldr	r3, [r3, #0]
 80a61e6:	2b00      	cmp	r3, #0
 80a61e8:	db12      	blt.n	80a6210 <USB_EPSetStall+0x54>
 80a61ea:	68bb      	ldr	r3, [r7, #8]
 80a61ec:	2b00      	cmp	r3, #0
 80a61ee:	d00f      	beq.n	80a6210 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80a61f0:	68bb      	ldr	r3, [r7, #8]
 80a61f2:	015a      	lsls	r2, r3, #5
 80a61f4:	68fb      	ldr	r3, [r7, #12]
 80a61f6:	4413      	add	r3, r2
 80a61f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a61fc:	681b      	ldr	r3, [r3, #0]
 80a61fe:	68ba      	ldr	r2, [r7, #8]
 80a6200:	0151      	lsls	r1, r2, #5
 80a6202:	68fa      	ldr	r2, [r7, #12]
 80a6204:	440a      	add	r2, r1
 80a6206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a620a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80a620e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80a6210:	68bb      	ldr	r3, [r7, #8]
 80a6212:	015a      	lsls	r2, r3, #5
 80a6214:	68fb      	ldr	r3, [r7, #12]
 80a6216:	4413      	add	r3, r2
 80a6218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a621c:	681b      	ldr	r3, [r3, #0]
 80a621e:	68ba      	ldr	r2, [r7, #8]
 80a6220:	0151      	lsls	r1, r2, #5
 80a6222:	68fa      	ldr	r2, [r7, #12]
 80a6224:	440a      	add	r2, r1
 80a6226:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a622a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80a622e:	6013      	str	r3, [r2, #0]
 80a6230:	e02b      	b.n	80a628a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80a6232:	68bb      	ldr	r3, [r7, #8]
 80a6234:	015a      	lsls	r2, r3, #5
 80a6236:	68fb      	ldr	r3, [r7, #12]
 80a6238:	4413      	add	r3, r2
 80a623a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a623e:	681b      	ldr	r3, [r3, #0]
 80a6240:	2b00      	cmp	r3, #0
 80a6242:	db12      	blt.n	80a626a <USB_EPSetStall+0xae>
 80a6244:	68bb      	ldr	r3, [r7, #8]
 80a6246:	2b00      	cmp	r3, #0
 80a6248:	d00f      	beq.n	80a626a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80a624a:	68bb      	ldr	r3, [r7, #8]
 80a624c:	015a      	lsls	r2, r3, #5
 80a624e:	68fb      	ldr	r3, [r7, #12]
 80a6250:	4413      	add	r3, r2
 80a6252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6256:	681b      	ldr	r3, [r3, #0]
 80a6258:	68ba      	ldr	r2, [r7, #8]
 80a625a:	0151      	lsls	r1, r2, #5
 80a625c:	68fa      	ldr	r2, [r7, #12]
 80a625e:	440a      	add	r2, r1
 80a6260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6264:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80a6268:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80a626a:	68bb      	ldr	r3, [r7, #8]
 80a626c:	015a      	lsls	r2, r3, #5
 80a626e:	68fb      	ldr	r3, [r7, #12]
 80a6270:	4413      	add	r3, r2
 80a6272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6276:	681b      	ldr	r3, [r3, #0]
 80a6278:	68ba      	ldr	r2, [r7, #8]
 80a627a:	0151      	lsls	r1, r2, #5
 80a627c:	68fa      	ldr	r2, [r7, #12]
 80a627e:	440a      	add	r2, r1
 80a6280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6284:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80a6288:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80a628a:	2300      	movs	r3, #0
}
 80a628c:	4618      	mov	r0, r3
 80a628e:	3714      	adds	r7, #20
 80a6290:	46bd      	mov	sp, r7
 80a6292:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6296:	4770      	bx	lr

080a6298 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80a6298:	b480      	push	{r7}
 80a629a:	b085      	sub	sp, #20
 80a629c:	af00      	add	r7, sp, #0
 80a629e:	6078      	str	r0, [r7, #4]
 80a62a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a62a2:	687b      	ldr	r3, [r7, #4]
 80a62a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80a62a6:	683b      	ldr	r3, [r7, #0]
 80a62a8:	781b      	ldrb	r3, [r3, #0]
 80a62aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80a62ac:	683b      	ldr	r3, [r7, #0]
 80a62ae:	785b      	ldrb	r3, [r3, #1]
 80a62b0:	2b01      	cmp	r3, #1
 80a62b2:	d128      	bne.n	80a6306 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80a62b4:	68bb      	ldr	r3, [r7, #8]
 80a62b6:	015a      	lsls	r2, r3, #5
 80a62b8:	68fb      	ldr	r3, [r7, #12]
 80a62ba:	4413      	add	r3, r2
 80a62bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a62c0:	681b      	ldr	r3, [r3, #0]
 80a62c2:	68ba      	ldr	r2, [r7, #8]
 80a62c4:	0151      	lsls	r1, r2, #5
 80a62c6:	68fa      	ldr	r2, [r7, #12]
 80a62c8:	440a      	add	r2, r1
 80a62ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a62ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80a62d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80a62d4:	683b      	ldr	r3, [r7, #0]
 80a62d6:	791b      	ldrb	r3, [r3, #4]
 80a62d8:	2b03      	cmp	r3, #3
 80a62da:	d003      	beq.n	80a62e4 <USB_EPClearStall+0x4c>
 80a62dc:	683b      	ldr	r3, [r7, #0]
 80a62de:	791b      	ldrb	r3, [r3, #4]
 80a62e0:	2b02      	cmp	r3, #2
 80a62e2:	d138      	bne.n	80a6356 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80a62e4:	68bb      	ldr	r3, [r7, #8]
 80a62e6:	015a      	lsls	r2, r3, #5
 80a62e8:	68fb      	ldr	r3, [r7, #12]
 80a62ea:	4413      	add	r3, r2
 80a62ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a62f0:	681b      	ldr	r3, [r3, #0]
 80a62f2:	68ba      	ldr	r2, [r7, #8]
 80a62f4:	0151      	lsls	r1, r2, #5
 80a62f6:	68fa      	ldr	r2, [r7, #12]
 80a62f8:	440a      	add	r2, r1
 80a62fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a62fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80a6302:	6013      	str	r3, [r2, #0]
 80a6304:	e027      	b.n	80a6356 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80a6306:	68bb      	ldr	r3, [r7, #8]
 80a6308:	015a      	lsls	r2, r3, #5
 80a630a:	68fb      	ldr	r3, [r7, #12]
 80a630c:	4413      	add	r3, r2
 80a630e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6312:	681b      	ldr	r3, [r3, #0]
 80a6314:	68ba      	ldr	r2, [r7, #8]
 80a6316:	0151      	lsls	r1, r2, #5
 80a6318:	68fa      	ldr	r2, [r7, #12]
 80a631a:	440a      	add	r2, r1
 80a631c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6320:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80a6324:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80a6326:	683b      	ldr	r3, [r7, #0]
 80a6328:	791b      	ldrb	r3, [r3, #4]
 80a632a:	2b03      	cmp	r3, #3
 80a632c:	d003      	beq.n	80a6336 <USB_EPClearStall+0x9e>
 80a632e:	683b      	ldr	r3, [r7, #0]
 80a6330:	791b      	ldrb	r3, [r3, #4]
 80a6332:	2b02      	cmp	r3, #2
 80a6334:	d10f      	bne.n	80a6356 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80a6336:	68bb      	ldr	r3, [r7, #8]
 80a6338:	015a      	lsls	r2, r3, #5
 80a633a:	68fb      	ldr	r3, [r7, #12]
 80a633c:	4413      	add	r3, r2
 80a633e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6342:	681b      	ldr	r3, [r3, #0]
 80a6344:	68ba      	ldr	r2, [r7, #8]
 80a6346:	0151      	lsls	r1, r2, #5
 80a6348:	68fa      	ldr	r2, [r7, #12]
 80a634a:	440a      	add	r2, r1
 80a634c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80a6354:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80a6356:	2300      	movs	r3, #0
}
 80a6358:	4618      	mov	r0, r3
 80a635a:	3714      	adds	r7, #20
 80a635c:	46bd      	mov	sp, r7
 80a635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6362:	4770      	bx	lr

080a6364 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80a6364:	b480      	push	{r7}
 80a6366:	b085      	sub	sp, #20
 80a6368:	af00      	add	r7, sp, #0
 80a636a:	6078      	str	r0, [r7, #4]
 80a636c:	460b      	mov	r3, r1
 80a636e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a6370:	687b      	ldr	r3, [r7, #4]
 80a6372:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80a6374:	68fb      	ldr	r3, [r7, #12]
 80a6376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a637a:	681b      	ldr	r3, [r3, #0]
 80a637c:	68fa      	ldr	r2, [r7, #12]
 80a637e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a6382:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80a6386:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80a6388:	68fb      	ldr	r3, [r7, #12]
 80a638a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a638e:	681a      	ldr	r2, [r3, #0]
 80a6390:	78fb      	ldrb	r3, [r7, #3]
 80a6392:	011b      	lsls	r3, r3, #4
 80a6394:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80a6398:	68f9      	ldr	r1, [r7, #12]
 80a639a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a639e:	4313      	orrs	r3, r2
 80a63a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80a63a2:	2300      	movs	r3, #0
}
 80a63a4:	4618      	mov	r0, r3
 80a63a6:	3714      	adds	r7, #20
 80a63a8:	46bd      	mov	sp, r7
 80a63aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a63ae:	4770      	bx	lr

080a63b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80a63b0:	b480      	push	{r7}
 80a63b2:	b085      	sub	sp, #20
 80a63b4:	af00      	add	r7, sp, #0
 80a63b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a63b8:	687b      	ldr	r3, [r7, #4]
 80a63ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80a63bc:	68fb      	ldr	r3, [r7, #12]
 80a63be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80a63c2:	681b      	ldr	r3, [r3, #0]
 80a63c4:	68fa      	ldr	r2, [r7, #12]
 80a63c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80a63ca:	f023 0303 	bic.w	r3, r3, #3
 80a63ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80a63d0:	68fb      	ldr	r3, [r7, #12]
 80a63d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a63d6:	685b      	ldr	r3, [r3, #4]
 80a63d8:	68fa      	ldr	r2, [r7, #12]
 80a63da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a63de:	f023 0302 	bic.w	r3, r3, #2
 80a63e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80a63e4:	2300      	movs	r3, #0
}
 80a63e6:	4618      	mov	r0, r3
 80a63e8:	3714      	adds	r7, #20
 80a63ea:	46bd      	mov	sp, r7
 80a63ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a63f0:	4770      	bx	lr

080a63f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80a63f2:	b480      	push	{r7}
 80a63f4:	b085      	sub	sp, #20
 80a63f6:	af00      	add	r7, sp, #0
 80a63f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a63fa:	687b      	ldr	r3, [r7, #4]
 80a63fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80a63fe:	68fb      	ldr	r3, [r7, #12]
 80a6400:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80a6404:	681b      	ldr	r3, [r3, #0]
 80a6406:	68fa      	ldr	r2, [r7, #12]
 80a6408:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80a640c:	f023 0303 	bic.w	r3, r3, #3
 80a6410:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80a6412:	68fb      	ldr	r3, [r7, #12]
 80a6414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a6418:	685b      	ldr	r3, [r3, #4]
 80a641a:	68fa      	ldr	r2, [r7, #12]
 80a641c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a6420:	f043 0302 	orr.w	r3, r3, #2
 80a6424:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80a6426:	2300      	movs	r3, #0
}
 80a6428:	4618      	mov	r0, r3
 80a642a:	3714      	adds	r7, #20
 80a642c:	46bd      	mov	sp, r7
 80a642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6432:	4770      	bx	lr

080a6434 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80a6434:	b480      	push	{r7}
 80a6436:	b085      	sub	sp, #20
 80a6438:	af00      	add	r7, sp, #0
 80a643a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80a643c:	687b      	ldr	r3, [r7, #4]
 80a643e:	695b      	ldr	r3, [r3, #20]
 80a6440:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80a6442:	687b      	ldr	r3, [r7, #4]
 80a6444:	699b      	ldr	r3, [r3, #24]
 80a6446:	68fa      	ldr	r2, [r7, #12]
 80a6448:	4013      	ands	r3, r2
 80a644a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80a644c:	68fb      	ldr	r3, [r7, #12]
}
 80a644e:	4618      	mov	r0, r3
 80a6450:	3714      	adds	r7, #20
 80a6452:	46bd      	mov	sp, r7
 80a6454:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6458:	4770      	bx	lr

080a645a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80a645a:	b480      	push	{r7}
 80a645c:	b085      	sub	sp, #20
 80a645e:	af00      	add	r7, sp, #0
 80a6460:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a6462:	687b      	ldr	r3, [r7, #4]
 80a6464:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80a6466:	68fb      	ldr	r3, [r7, #12]
 80a6468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a646c:	699b      	ldr	r3, [r3, #24]
 80a646e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80a6470:	68fb      	ldr	r3, [r7, #12]
 80a6472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a6476:	69db      	ldr	r3, [r3, #28]
 80a6478:	68ba      	ldr	r2, [r7, #8]
 80a647a:	4013      	ands	r3, r2
 80a647c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80a647e:	68bb      	ldr	r3, [r7, #8]
 80a6480:	0c1b      	lsrs	r3, r3, #16
}
 80a6482:	4618      	mov	r0, r3
 80a6484:	3714      	adds	r7, #20
 80a6486:	46bd      	mov	sp, r7
 80a6488:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a648c:	4770      	bx	lr

080a648e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80a648e:	b480      	push	{r7}
 80a6490:	b085      	sub	sp, #20
 80a6492:	af00      	add	r7, sp, #0
 80a6494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a6496:	687b      	ldr	r3, [r7, #4]
 80a6498:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80a649a:	68fb      	ldr	r3, [r7, #12]
 80a649c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a64a0:	699b      	ldr	r3, [r3, #24]
 80a64a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80a64a4:	68fb      	ldr	r3, [r7, #12]
 80a64a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a64aa:	69db      	ldr	r3, [r3, #28]
 80a64ac:	68ba      	ldr	r2, [r7, #8]
 80a64ae:	4013      	ands	r3, r2
 80a64b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80a64b2:	68bb      	ldr	r3, [r7, #8]
 80a64b4:	b29b      	uxth	r3, r3
}
 80a64b6:	4618      	mov	r0, r3
 80a64b8:	3714      	adds	r7, #20
 80a64ba:	46bd      	mov	sp, r7
 80a64bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a64c0:	4770      	bx	lr

080a64c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80a64c2:	b480      	push	{r7}
 80a64c4:	b085      	sub	sp, #20
 80a64c6:	af00      	add	r7, sp, #0
 80a64c8:	6078      	str	r0, [r7, #4]
 80a64ca:	460b      	mov	r3, r1
 80a64cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a64ce:	687b      	ldr	r3, [r7, #4]
 80a64d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80a64d2:	78fb      	ldrb	r3, [r7, #3]
 80a64d4:	015a      	lsls	r2, r3, #5
 80a64d6:	68fb      	ldr	r3, [r7, #12]
 80a64d8:	4413      	add	r3, r2
 80a64da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a64de:	689b      	ldr	r3, [r3, #8]
 80a64e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80a64e2:	68fb      	ldr	r3, [r7, #12]
 80a64e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a64e8:	695b      	ldr	r3, [r3, #20]
 80a64ea:	68ba      	ldr	r2, [r7, #8]
 80a64ec:	4013      	ands	r3, r2
 80a64ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80a64f0:	68bb      	ldr	r3, [r7, #8]
}
 80a64f2:	4618      	mov	r0, r3
 80a64f4:	3714      	adds	r7, #20
 80a64f6:	46bd      	mov	sp, r7
 80a64f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a64fc:	4770      	bx	lr

080a64fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80a64fe:	b480      	push	{r7}
 80a6500:	b087      	sub	sp, #28
 80a6502:	af00      	add	r7, sp, #0
 80a6504:	6078      	str	r0, [r7, #4]
 80a6506:	460b      	mov	r3, r1
 80a6508:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a650a:	687b      	ldr	r3, [r7, #4]
 80a650c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80a650e:	697b      	ldr	r3, [r7, #20]
 80a6510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a6514:	691b      	ldr	r3, [r3, #16]
 80a6516:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80a6518:	697b      	ldr	r3, [r7, #20]
 80a651a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a651e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80a6520:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80a6522:	78fb      	ldrb	r3, [r7, #3]
 80a6524:	f003 030f 	and.w	r3, r3, #15
 80a6528:	68fa      	ldr	r2, [r7, #12]
 80a652a:	fa22 f303 	lsr.w	r3, r2, r3
 80a652e:	01db      	lsls	r3, r3, #7
 80a6530:	b2db      	uxtb	r3, r3
 80a6532:	693a      	ldr	r2, [r7, #16]
 80a6534:	4313      	orrs	r3, r2
 80a6536:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80a6538:	78fb      	ldrb	r3, [r7, #3]
 80a653a:	015a      	lsls	r2, r3, #5
 80a653c:	697b      	ldr	r3, [r7, #20]
 80a653e:	4413      	add	r3, r2
 80a6540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a6544:	689b      	ldr	r3, [r3, #8]
 80a6546:	693a      	ldr	r2, [r7, #16]
 80a6548:	4013      	ands	r3, r2
 80a654a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80a654c:	68bb      	ldr	r3, [r7, #8]
}
 80a654e:	4618      	mov	r0, r3
 80a6550:	371c      	adds	r7, #28
 80a6552:	46bd      	mov	sp, r7
 80a6554:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6558:	4770      	bx	lr

080a655a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80a655a:	b480      	push	{r7}
 80a655c:	b083      	sub	sp, #12
 80a655e:	af00      	add	r7, sp, #0
 80a6560:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80a6562:	687b      	ldr	r3, [r7, #4]
 80a6564:	695b      	ldr	r3, [r3, #20]
 80a6566:	f003 0301 	and.w	r3, r3, #1
}
 80a656a:	4618      	mov	r0, r3
 80a656c:	370c      	adds	r7, #12
 80a656e:	46bd      	mov	sp, r7
 80a6570:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6574:	4770      	bx	lr
	...

080a6578 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80a6578:	b480      	push	{r7}
 80a657a:	b085      	sub	sp, #20
 80a657c:	af00      	add	r7, sp, #0
 80a657e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a6580:	687b      	ldr	r3, [r7, #4]
 80a6582:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80a6584:	68fb      	ldr	r3, [r7, #12]
 80a6586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a658a:	681a      	ldr	r2, [r3, #0]
 80a658c:	68fb      	ldr	r3, [r7, #12]
 80a658e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a6592:	4619      	mov	r1, r3
 80a6594:	4b09      	ldr	r3, [pc, #36]	@ (80a65bc <USB_ActivateSetup+0x44>)
 80a6596:	4013      	ands	r3, r2
 80a6598:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80a659a:	68fb      	ldr	r3, [r7, #12]
 80a659c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a65a0:	685b      	ldr	r3, [r3, #4]
 80a65a2:	68fa      	ldr	r2, [r7, #12]
 80a65a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a65a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80a65ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80a65ae:	2300      	movs	r3, #0
}
 80a65b0:	4618      	mov	r0, r3
 80a65b2:	3714      	adds	r7, #20
 80a65b4:	46bd      	mov	sp, r7
 80a65b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a65ba:	4770      	bx	lr
 80a65bc:	fffff800 	.word	0xfffff800

080a65c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80a65c0:	b480      	push	{r7}
 80a65c2:	b087      	sub	sp, #28
 80a65c4:	af00      	add	r7, sp, #0
 80a65c6:	60f8      	str	r0, [r7, #12]
 80a65c8:	460b      	mov	r3, r1
 80a65ca:	607a      	str	r2, [r7, #4]
 80a65cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a65ce:	68fb      	ldr	r3, [r7, #12]
 80a65d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80a65d2:	68fb      	ldr	r3, [r7, #12]
 80a65d4:	333c      	adds	r3, #60	@ 0x3c
 80a65d6:	3304      	adds	r3, #4
 80a65d8:	681b      	ldr	r3, [r3, #0]
 80a65da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80a65dc:	693b      	ldr	r3, [r7, #16]
 80a65de:	4a26      	ldr	r2, [pc, #152]	@ (80a6678 <USB_EP0_OutStart+0xb8>)
 80a65e0:	4293      	cmp	r3, r2
 80a65e2:	d90a      	bls.n	80a65fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80a65e4:	697b      	ldr	r3, [r7, #20]
 80a65e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a65ea:	681b      	ldr	r3, [r3, #0]
 80a65ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a65f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a65f4:	d101      	bne.n	80a65fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80a65f6:	2300      	movs	r3, #0
 80a65f8:	e037      	b.n	80a666a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80a65fa:	697b      	ldr	r3, [r7, #20]
 80a65fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6600:	461a      	mov	r2, r3
 80a6602:	2300      	movs	r3, #0
 80a6604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80a6606:	697b      	ldr	r3, [r7, #20]
 80a6608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a660c:	691b      	ldr	r3, [r3, #16]
 80a660e:	697a      	ldr	r2, [r7, #20]
 80a6610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6614:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80a6618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80a661a:	697b      	ldr	r3, [r7, #20]
 80a661c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6620:	691b      	ldr	r3, [r3, #16]
 80a6622:	697a      	ldr	r2, [r7, #20]
 80a6624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6628:	f043 0318 	orr.w	r3, r3, #24
 80a662c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80a662e:	697b      	ldr	r3, [r7, #20]
 80a6630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6634:	691b      	ldr	r3, [r3, #16]
 80a6636:	697a      	ldr	r2, [r7, #20]
 80a6638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a663c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80a6640:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80a6642:	7afb      	ldrb	r3, [r7, #11]
 80a6644:	2b01      	cmp	r3, #1
 80a6646:	d10f      	bne.n	80a6668 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80a6648:	697b      	ldr	r3, [r7, #20]
 80a664a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a664e:	461a      	mov	r2, r3
 80a6650:	687b      	ldr	r3, [r7, #4]
 80a6652:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80a6654:	697b      	ldr	r3, [r7, #20]
 80a6656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a665a:	681b      	ldr	r3, [r3, #0]
 80a665c:	697a      	ldr	r2, [r7, #20]
 80a665e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6662:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80a6666:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80a6668:	2300      	movs	r3, #0
}
 80a666a:	4618      	mov	r0, r3
 80a666c:	371c      	adds	r7, #28
 80a666e:	46bd      	mov	sp, r7
 80a6670:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6674:	4770      	bx	lr
 80a6676:	bf00      	nop
 80a6678:	4f54300a 	.word	0x4f54300a

080a667c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80a667c:	b480      	push	{r7}
 80a667e:	b085      	sub	sp, #20
 80a6680:	af00      	add	r7, sp, #0
 80a6682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80a6684:	2300      	movs	r3, #0
 80a6686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80a6688:	68fb      	ldr	r3, [r7, #12]
 80a668a:	3301      	adds	r3, #1
 80a668c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80a668e:	68fb      	ldr	r3, [r7, #12]
 80a6690:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80a6694:	d901      	bls.n	80a669a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80a6696:	2303      	movs	r3, #3
 80a6698:	e01b      	b.n	80a66d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80a669a:	687b      	ldr	r3, [r7, #4]
 80a669c:	691b      	ldr	r3, [r3, #16]
 80a669e:	2b00      	cmp	r3, #0
 80a66a0:	daf2      	bge.n	80a6688 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80a66a2:	2300      	movs	r3, #0
 80a66a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80a66a6:	687b      	ldr	r3, [r7, #4]
 80a66a8:	691b      	ldr	r3, [r3, #16]
 80a66aa:	f043 0201 	orr.w	r2, r3, #1
 80a66ae:	687b      	ldr	r3, [r7, #4]
 80a66b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80a66b2:	68fb      	ldr	r3, [r7, #12]
 80a66b4:	3301      	adds	r3, #1
 80a66b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80a66b8:	68fb      	ldr	r3, [r7, #12]
 80a66ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80a66be:	d901      	bls.n	80a66c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80a66c0:	2303      	movs	r3, #3
 80a66c2:	e006      	b.n	80a66d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80a66c4:	687b      	ldr	r3, [r7, #4]
 80a66c6:	691b      	ldr	r3, [r3, #16]
 80a66c8:	f003 0301 	and.w	r3, r3, #1
 80a66cc:	2b01      	cmp	r3, #1
 80a66ce:	d0f0      	beq.n	80a66b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80a66d0:	2300      	movs	r3, #0
}
 80a66d2:	4618      	mov	r0, r3
 80a66d4:	3714      	adds	r7, #20
 80a66d6:	46bd      	mov	sp, r7
 80a66d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a66dc:	4770      	bx	lr
	...

080a66e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80a66e0:	b580      	push	{r7, lr}
 80a66e2:	b084      	sub	sp, #16
 80a66e4:	af00      	add	r7, sp, #0
 80a66e6:	6078      	str	r0, [r7, #4]
 80a66e8:	460b      	mov	r3, r1
 80a66ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80a66ec:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80a66f0:	f002 fd3c 	bl	80a916c <USBD_static_malloc>
 80a66f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80a66f6:	68fb      	ldr	r3, [r7, #12]
 80a66f8:	2b00      	cmp	r3, #0
 80a66fa:	d109      	bne.n	80a6710 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80a66fc:	687b      	ldr	r3, [r7, #4]
 80a66fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6702:	687b      	ldr	r3, [r7, #4]
 80a6704:	32b0      	adds	r2, #176	@ 0xb0
 80a6706:	2100      	movs	r1, #0
 80a6708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80a670c:	2302      	movs	r3, #2
 80a670e:	e0d4      	b.n	80a68ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80a6710:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80a6714:	2100      	movs	r1, #0
 80a6716:	68f8      	ldr	r0, [r7, #12]
 80a6718:	f002 fe83 	bl	80a9422 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80a671c:	687b      	ldr	r3, [r7, #4]
 80a671e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6722:	687b      	ldr	r3, [r7, #4]
 80a6724:	32b0      	adds	r2, #176	@ 0xb0
 80a6726:	68f9      	ldr	r1, [r7, #12]
 80a6728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80a672c:	687b      	ldr	r3, [r7, #4]
 80a672e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6732:	687b      	ldr	r3, [r7, #4]
 80a6734:	32b0      	adds	r2, #176	@ 0xb0
 80a6736:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80a673a:	687b      	ldr	r3, [r7, #4]
 80a673c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80a6740:	687b      	ldr	r3, [r7, #4]
 80a6742:	7c1b      	ldrb	r3, [r3, #16]
 80a6744:	2b00      	cmp	r3, #0
 80a6746:	d138      	bne.n	80a67ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80a6748:	4b5e      	ldr	r3, [pc, #376]	@ (80a68c4 <USBD_CDC_Init+0x1e4>)
 80a674a:	7819      	ldrb	r1, [r3, #0]
 80a674c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80a6750:	2202      	movs	r2, #2
 80a6752:	6878      	ldr	r0, [r7, #4]
 80a6754:	f002 fbe7 	bl	80a8f26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80a6758:	4b5a      	ldr	r3, [pc, #360]	@ (80a68c4 <USBD_CDC_Init+0x1e4>)
 80a675a:	781b      	ldrb	r3, [r3, #0]
 80a675c:	f003 020f 	and.w	r2, r3, #15
 80a6760:	6879      	ldr	r1, [r7, #4]
 80a6762:	4613      	mov	r3, r2
 80a6764:	009b      	lsls	r3, r3, #2
 80a6766:	4413      	add	r3, r2
 80a6768:	009b      	lsls	r3, r3, #2
 80a676a:	440b      	add	r3, r1
 80a676c:	3324      	adds	r3, #36	@ 0x24
 80a676e:	2201      	movs	r2, #1
 80a6770:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80a6772:	4b55      	ldr	r3, [pc, #340]	@ (80a68c8 <USBD_CDC_Init+0x1e8>)
 80a6774:	7819      	ldrb	r1, [r3, #0]
 80a6776:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80a677a:	2202      	movs	r2, #2
 80a677c:	6878      	ldr	r0, [r7, #4]
 80a677e:	f002 fbd2 	bl	80a8f26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80a6782:	4b51      	ldr	r3, [pc, #324]	@ (80a68c8 <USBD_CDC_Init+0x1e8>)
 80a6784:	781b      	ldrb	r3, [r3, #0]
 80a6786:	f003 020f 	and.w	r2, r3, #15
 80a678a:	6879      	ldr	r1, [r7, #4]
 80a678c:	4613      	mov	r3, r2
 80a678e:	009b      	lsls	r3, r3, #2
 80a6790:	4413      	add	r3, r2
 80a6792:	009b      	lsls	r3, r3, #2
 80a6794:	440b      	add	r3, r1
 80a6796:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80a679a:	2201      	movs	r2, #1
 80a679c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80a679e:	4b4b      	ldr	r3, [pc, #300]	@ (80a68cc <USBD_CDC_Init+0x1ec>)
 80a67a0:	781b      	ldrb	r3, [r3, #0]
 80a67a2:	f003 020f 	and.w	r2, r3, #15
 80a67a6:	6879      	ldr	r1, [r7, #4]
 80a67a8:	4613      	mov	r3, r2
 80a67aa:	009b      	lsls	r3, r3, #2
 80a67ac:	4413      	add	r3, r2
 80a67ae:	009b      	lsls	r3, r3, #2
 80a67b0:	440b      	add	r3, r1
 80a67b2:	3326      	adds	r3, #38	@ 0x26
 80a67b4:	2210      	movs	r2, #16
 80a67b6:	801a      	strh	r2, [r3, #0]
 80a67b8:	e035      	b.n	80a6826 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80a67ba:	4b42      	ldr	r3, [pc, #264]	@ (80a68c4 <USBD_CDC_Init+0x1e4>)
 80a67bc:	7819      	ldrb	r1, [r3, #0]
 80a67be:	2340      	movs	r3, #64	@ 0x40
 80a67c0:	2202      	movs	r2, #2
 80a67c2:	6878      	ldr	r0, [r7, #4]
 80a67c4:	f002 fbaf 	bl	80a8f26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80a67c8:	4b3e      	ldr	r3, [pc, #248]	@ (80a68c4 <USBD_CDC_Init+0x1e4>)
 80a67ca:	781b      	ldrb	r3, [r3, #0]
 80a67cc:	f003 020f 	and.w	r2, r3, #15
 80a67d0:	6879      	ldr	r1, [r7, #4]
 80a67d2:	4613      	mov	r3, r2
 80a67d4:	009b      	lsls	r3, r3, #2
 80a67d6:	4413      	add	r3, r2
 80a67d8:	009b      	lsls	r3, r3, #2
 80a67da:	440b      	add	r3, r1
 80a67dc:	3324      	adds	r3, #36	@ 0x24
 80a67de:	2201      	movs	r2, #1
 80a67e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80a67e2:	4b39      	ldr	r3, [pc, #228]	@ (80a68c8 <USBD_CDC_Init+0x1e8>)
 80a67e4:	7819      	ldrb	r1, [r3, #0]
 80a67e6:	2340      	movs	r3, #64	@ 0x40
 80a67e8:	2202      	movs	r2, #2
 80a67ea:	6878      	ldr	r0, [r7, #4]
 80a67ec:	f002 fb9b 	bl	80a8f26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80a67f0:	4b35      	ldr	r3, [pc, #212]	@ (80a68c8 <USBD_CDC_Init+0x1e8>)
 80a67f2:	781b      	ldrb	r3, [r3, #0]
 80a67f4:	f003 020f 	and.w	r2, r3, #15
 80a67f8:	6879      	ldr	r1, [r7, #4]
 80a67fa:	4613      	mov	r3, r2
 80a67fc:	009b      	lsls	r3, r3, #2
 80a67fe:	4413      	add	r3, r2
 80a6800:	009b      	lsls	r3, r3, #2
 80a6802:	440b      	add	r3, r1
 80a6804:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80a6808:	2201      	movs	r2, #1
 80a680a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80a680c:	4b2f      	ldr	r3, [pc, #188]	@ (80a68cc <USBD_CDC_Init+0x1ec>)
 80a680e:	781b      	ldrb	r3, [r3, #0]
 80a6810:	f003 020f 	and.w	r2, r3, #15
 80a6814:	6879      	ldr	r1, [r7, #4]
 80a6816:	4613      	mov	r3, r2
 80a6818:	009b      	lsls	r3, r3, #2
 80a681a:	4413      	add	r3, r2
 80a681c:	009b      	lsls	r3, r3, #2
 80a681e:	440b      	add	r3, r1
 80a6820:	3326      	adds	r3, #38	@ 0x26
 80a6822:	2210      	movs	r2, #16
 80a6824:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80a6826:	4b29      	ldr	r3, [pc, #164]	@ (80a68cc <USBD_CDC_Init+0x1ec>)
 80a6828:	7819      	ldrb	r1, [r3, #0]
 80a682a:	2308      	movs	r3, #8
 80a682c:	2203      	movs	r2, #3
 80a682e:	6878      	ldr	r0, [r7, #4]
 80a6830:	f002 fb79 	bl	80a8f26 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80a6834:	4b25      	ldr	r3, [pc, #148]	@ (80a68cc <USBD_CDC_Init+0x1ec>)
 80a6836:	781b      	ldrb	r3, [r3, #0]
 80a6838:	f003 020f 	and.w	r2, r3, #15
 80a683c:	6879      	ldr	r1, [r7, #4]
 80a683e:	4613      	mov	r3, r2
 80a6840:	009b      	lsls	r3, r3, #2
 80a6842:	4413      	add	r3, r2
 80a6844:	009b      	lsls	r3, r3, #2
 80a6846:	440b      	add	r3, r1
 80a6848:	3324      	adds	r3, #36	@ 0x24
 80a684a:	2201      	movs	r2, #1
 80a684c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80a684e:	68fb      	ldr	r3, [r7, #12]
 80a6850:	2200      	movs	r2, #0
 80a6852:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80a6856:	687b      	ldr	r3, [r7, #4]
 80a6858:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a685c:	687a      	ldr	r2, [r7, #4]
 80a685e:	33b0      	adds	r3, #176	@ 0xb0
 80a6860:	009b      	lsls	r3, r3, #2
 80a6862:	4413      	add	r3, r2
 80a6864:	685b      	ldr	r3, [r3, #4]
 80a6866:	681b      	ldr	r3, [r3, #0]
 80a6868:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80a686a:	68fb      	ldr	r3, [r7, #12]
 80a686c:	2200      	movs	r2, #0
 80a686e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80a6872:	68fb      	ldr	r3, [r7, #12]
 80a6874:	2200      	movs	r2, #0
 80a6876:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80a687a:	68fb      	ldr	r3, [r7, #12]
 80a687c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80a6880:	2b00      	cmp	r3, #0
 80a6882:	d101      	bne.n	80a6888 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80a6884:	2302      	movs	r3, #2
 80a6886:	e018      	b.n	80a68ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80a6888:	687b      	ldr	r3, [r7, #4]
 80a688a:	7c1b      	ldrb	r3, [r3, #16]
 80a688c:	2b00      	cmp	r3, #0
 80a688e:	d10a      	bne.n	80a68a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80a6890:	4b0d      	ldr	r3, [pc, #52]	@ (80a68c8 <USBD_CDC_Init+0x1e8>)
 80a6892:	7819      	ldrb	r1, [r3, #0]
 80a6894:	68fb      	ldr	r3, [r7, #12]
 80a6896:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80a689a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80a689e:	6878      	ldr	r0, [r7, #4]
 80a68a0:	f002 fc30 	bl	80a9104 <USBD_LL_PrepareReceive>
 80a68a4:	e008      	b.n	80a68b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80a68a6:	4b08      	ldr	r3, [pc, #32]	@ (80a68c8 <USBD_CDC_Init+0x1e8>)
 80a68a8:	7819      	ldrb	r1, [r3, #0]
 80a68aa:	68fb      	ldr	r3, [r7, #12]
 80a68ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80a68b0:	2340      	movs	r3, #64	@ 0x40
 80a68b2:	6878      	ldr	r0, [r7, #4]
 80a68b4:	f002 fc26 	bl	80a9104 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80a68b8:	2300      	movs	r3, #0
}
 80a68ba:	4618      	mov	r0, r3
 80a68bc:	3710      	adds	r7, #16
 80a68be:	46bd      	mov	sp, r7
 80a68c0:	bd80      	pop	{r7, pc}
 80a68c2:	bf00      	nop
 80a68c4:	24000097 	.word	0x24000097
 80a68c8:	24000098 	.word	0x24000098
 80a68cc:	24000099 	.word	0x24000099

080a68d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80a68d0:	b580      	push	{r7, lr}
 80a68d2:	b082      	sub	sp, #8
 80a68d4:	af00      	add	r7, sp, #0
 80a68d6:	6078      	str	r0, [r7, #4]
 80a68d8:	460b      	mov	r3, r1
 80a68da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80a68dc:	4b3a      	ldr	r3, [pc, #232]	@ (80a69c8 <USBD_CDC_DeInit+0xf8>)
 80a68de:	781b      	ldrb	r3, [r3, #0]
 80a68e0:	4619      	mov	r1, r3
 80a68e2:	6878      	ldr	r0, [r7, #4]
 80a68e4:	f002 fb45 	bl	80a8f72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80a68e8:	4b37      	ldr	r3, [pc, #220]	@ (80a69c8 <USBD_CDC_DeInit+0xf8>)
 80a68ea:	781b      	ldrb	r3, [r3, #0]
 80a68ec:	f003 020f 	and.w	r2, r3, #15
 80a68f0:	6879      	ldr	r1, [r7, #4]
 80a68f2:	4613      	mov	r3, r2
 80a68f4:	009b      	lsls	r3, r3, #2
 80a68f6:	4413      	add	r3, r2
 80a68f8:	009b      	lsls	r3, r3, #2
 80a68fa:	440b      	add	r3, r1
 80a68fc:	3324      	adds	r3, #36	@ 0x24
 80a68fe:	2200      	movs	r2, #0
 80a6900:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80a6902:	4b32      	ldr	r3, [pc, #200]	@ (80a69cc <USBD_CDC_DeInit+0xfc>)
 80a6904:	781b      	ldrb	r3, [r3, #0]
 80a6906:	4619      	mov	r1, r3
 80a6908:	6878      	ldr	r0, [r7, #4]
 80a690a:	f002 fb32 	bl	80a8f72 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80a690e:	4b2f      	ldr	r3, [pc, #188]	@ (80a69cc <USBD_CDC_DeInit+0xfc>)
 80a6910:	781b      	ldrb	r3, [r3, #0]
 80a6912:	f003 020f 	and.w	r2, r3, #15
 80a6916:	6879      	ldr	r1, [r7, #4]
 80a6918:	4613      	mov	r3, r2
 80a691a:	009b      	lsls	r3, r3, #2
 80a691c:	4413      	add	r3, r2
 80a691e:	009b      	lsls	r3, r3, #2
 80a6920:	440b      	add	r3, r1
 80a6922:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80a6926:	2200      	movs	r2, #0
 80a6928:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80a692a:	4b29      	ldr	r3, [pc, #164]	@ (80a69d0 <USBD_CDC_DeInit+0x100>)
 80a692c:	781b      	ldrb	r3, [r3, #0]
 80a692e:	4619      	mov	r1, r3
 80a6930:	6878      	ldr	r0, [r7, #4]
 80a6932:	f002 fb1e 	bl	80a8f72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80a6936:	4b26      	ldr	r3, [pc, #152]	@ (80a69d0 <USBD_CDC_DeInit+0x100>)
 80a6938:	781b      	ldrb	r3, [r3, #0]
 80a693a:	f003 020f 	and.w	r2, r3, #15
 80a693e:	6879      	ldr	r1, [r7, #4]
 80a6940:	4613      	mov	r3, r2
 80a6942:	009b      	lsls	r3, r3, #2
 80a6944:	4413      	add	r3, r2
 80a6946:	009b      	lsls	r3, r3, #2
 80a6948:	440b      	add	r3, r1
 80a694a:	3324      	adds	r3, #36	@ 0x24
 80a694c:	2200      	movs	r2, #0
 80a694e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80a6950:	4b1f      	ldr	r3, [pc, #124]	@ (80a69d0 <USBD_CDC_DeInit+0x100>)
 80a6952:	781b      	ldrb	r3, [r3, #0]
 80a6954:	f003 020f 	and.w	r2, r3, #15
 80a6958:	6879      	ldr	r1, [r7, #4]
 80a695a:	4613      	mov	r3, r2
 80a695c:	009b      	lsls	r3, r3, #2
 80a695e:	4413      	add	r3, r2
 80a6960:	009b      	lsls	r3, r3, #2
 80a6962:	440b      	add	r3, r1
 80a6964:	3326      	adds	r3, #38	@ 0x26
 80a6966:	2200      	movs	r2, #0
 80a6968:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80a696a:	687b      	ldr	r3, [r7, #4]
 80a696c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6970:	687b      	ldr	r3, [r7, #4]
 80a6972:	32b0      	adds	r2, #176	@ 0xb0
 80a6974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6978:	2b00      	cmp	r3, #0
 80a697a:	d01f      	beq.n	80a69bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80a697c:	687b      	ldr	r3, [r7, #4]
 80a697e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6982:	687a      	ldr	r2, [r7, #4]
 80a6984:	33b0      	adds	r3, #176	@ 0xb0
 80a6986:	009b      	lsls	r3, r3, #2
 80a6988:	4413      	add	r3, r2
 80a698a:	685b      	ldr	r3, [r3, #4]
 80a698c:	685b      	ldr	r3, [r3, #4]
 80a698e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80a6990:	687b      	ldr	r3, [r7, #4]
 80a6992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6996:	687b      	ldr	r3, [r7, #4]
 80a6998:	32b0      	adds	r2, #176	@ 0xb0
 80a699a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a699e:	4618      	mov	r0, r3
 80a69a0:	f002 fbf2 	bl	80a9188 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80a69a4:	687b      	ldr	r3, [r7, #4]
 80a69a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a69aa:	687b      	ldr	r3, [r7, #4]
 80a69ac:	32b0      	adds	r2, #176	@ 0xb0
 80a69ae:	2100      	movs	r1, #0
 80a69b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80a69b4:	687b      	ldr	r3, [r7, #4]
 80a69b6:	2200      	movs	r2, #0
 80a69b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80a69bc:	2300      	movs	r3, #0
}
 80a69be:	4618      	mov	r0, r3
 80a69c0:	3708      	adds	r7, #8
 80a69c2:	46bd      	mov	sp, r7
 80a69c4:	bd80      	pop	{r7, pc}
 80a69c6:	bf00      	nop
 80a69c8:	24000097 	.word	0x24000097
 80a69cc:	24000098 	.word	0x24000098
 80a69d0:	24000099 	.word	0x24000099

080a69d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80a69d4:	b580      	push	{r7, lr}
 80a69d6:	b086      	sub	sp, #24
 80a69d8:	af00      	add	r7, sp, #0
 80a69da:	6078      	str	r0, [r7, #4]
 80a69dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80a69de:	687b      	ldr	r3, [r7, #4]
 80a69e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a69e4:	687b      	ldr	r3, [r7, #4]
 80a69e6:	32b0      	adds	r2, #176	@ 0xb0
 80a69e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a69ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80a69ee:	2300      	movs	r3, #0
 80a69f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80a69f2:	2300      	movs	r3, #0
 80a69f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80a69f6:	2300      	movs	r3, #0
 80a69f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80a69fa:	693b      	ldr	r3, [r7, #16]
 80a69fc:	2b00      	cmp	r3, #0
 80a69fe:	d101      	bne.n	80a6a04 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80a6a00:	2303      	movs	r3, #3
 80a6a02:	e0bf      	b.n	80a6b84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80a6a04:	683b      	ldr	r3, [r7, #0]
 80a6a06:	781b      	ldrb	r3, [r3, #0]
 80a6a08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80a6a0c:	2b00      	cmp	r3, #0
 80a6a0e:	d050      	beq.n	80a6ab2 <USBD_CDC_Setup+0xde>
 80a6a10:	2b20      	cmp	r3, #32
 80a6a12:	f040 80af 	bne.w	80a6b74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80a6a16:	683b      	ldr	r3, [r7, #0]
 80a6a18:	88db      	ldrh	r3, [r3, #6]
 80a6a1a:	2b00      	cmp	r3, #0
 80a6a1c:	d03a      	beq.n	80a6a94 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80a6a1e:	683b      	ldr	r3, [r7, #0]
 80a6a20:	781b      	ldrb	r3, [r3, #0]
 80a6a22:	b25b      	sxtb	r3, r3
 80a6a24:	2b00      	cmp	r3, #0
 80a6a26:	da1b      	bge.n	80a6a60 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80a6a28:	687b      	ldr	r3, [r7, #4]
 80a6a2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6a2e:	687a      	ldr	r2, [r7, #4]
 80a6a30:	33b0      	adds	r3, #176	@ 0xb0
 80a6a32:	009b      	lsls	r3, r3, #2
 80a6a34:	4413      	add	r3, r2
 80a6a36:	685b      	ldr	r3, [r3, #4]
 80a6a38:	689b      	ldr	r3, [r3, #8]
 80a6a3a:	683a      	ldr	r2, [r7, #0]
 80a6a3c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80a6a3e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80a6a40:	683a      	ldr	r2, [r7, #0]
 80a6a42:	88d2      	ldrh	r2, [r2, #6]
 80a6a44:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80a6a46:	683b      	ldr	r3, [r7, #0]
 80a6a48:	88db      	ldrh	r3, [r3, #6]
 80a6a4a:	2b07      	cmp	r3, #7
 80a6a4c:	bf28      	it	cs
 80a6a4e:	2307      	movcs	r3, #7
 80a6a50:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80a6a52:	693b      	ldr	r3, [r7, #16]
 80a6a54:	89fa      	ldrh	r2, [r7, #14]
 80a6a56:	4619      	mov	r1, r3
 80a6a58:	6878      	ldr	r0, [r7, #4]
 80a6a5a:	f001 fd7d 	bl	80a8558 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80a6a5e:	e090      	b.n	80a6b82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80a6a60:	683b      	ldr	r3, [r7, #0]
 80a6a62:	785a      	ldrb	r2, [r3, #1]
 80a6a64:	693b      	ldr	r3, [r7, #16]
 80a6a66:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80a6a6a:	683b      	ldr	r3, [r7, #0]
 80a6a6c:	88db      	ldrh	r3, [r3, #6]
 80a6a6e:	2b3f      	cmp	r3, #63	@ 0x3f
 80a6a70:	d803      	bhi.n	80a6a7a <USBD_CDC_Setup+0xa6>
 80a6a72:	683b      	ldr	r3, [r7, #0]
 80a6a74:	88db      	ldrh	r3, [r3, #6]
 80a6a76:	b2da      	uxtb	r2, r3
 80a6a78:	e000      	b.n	80a6a7c <USBD_CDC_Setup+0xa8>
 80a6a7a:	2240      	movs	r2, #64	@ 0x40
 80a6a7c:	693b      	ldr	r3, [r7, #16]
 80a6a7e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80a6a82:	6939      	ldr	r1, [r7, #16]
 80a6a84:	693b      	ldr	r3, [r7, #16]
 80a6a86:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80a6a8a:	461a      	mov	r2, r3
 80a6a8c:	6878      	ldr	r0, [r7, #4]
 80a6a8e:	f001 fd8f 	bl	80a85b0 <USBD_CtlPrepareRx>
      break;
 80a6a92:	e076      	b.n	80a6b82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80a6a94:	687b      	ldr	r3, [r7, #4]
 80a6a96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6a9a:	687a      	ldr	r2, [r7, #4]
 80a6a9c:	33b0      	adds	r3, #176	@ 0xb0
 80a6a9e:	009b      	lsls	r3, r3, #2
 80a6aa0:	4413      	add	r3, r2
 80a6aa2:	685b      	ldr	r3, [r3, #4]
 80a6aa4:	689b      	ldr	r3, [r3, #8]
 80a6aa6:	683a      	ldr	r2, [r7, #0]
 80a6aa8:	7850      	ldrb	r0, [r2, #1]
 80a6aaa:	2200      	movs	r2, #0
 80a6aac:	6839      	ldr	r1, [r7, #0]
 80a6aae:	4798      	blx	r3
      break;
 80a6ab0:	e067      	b.n	80a6b82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80a6ab2:	683b      	ldr	r3, [r7, #0]
 80a6ab4:	785b      	ldrb	r3, [r3, #1]
 80a6ab6:	2b0b      	cmp	r3, #11
 80a6ab8:	d851      	bhi.n	80a6b5e <USBD_CDC_Setup+0x18a>
 80a6aba:	a201      	add	r2, pc, #4	@ (adr r2, 80a6ac0 <USBD_CDC_Setup+0xec>)
 80a6abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a6ac0:	080a6af1 	.word	0x080a6af1
 80a6ac4:	080a6b6d 	.word	0x080a6b6d
 80a6ac8:	080a6b5f 	.word	0x080a6b5f
 80a6acc:	080a6b5f 	.word	0x080a6b5f
 80a6ad0:	080a6b5f 	.word	0x080a6b5f
 80a6ad4:	080a6b5f 	.word	0x080a6b5f
 80a6ad8:	080a6b5f 	.word	0x080a6b5f
 80a6adc:	080a6b5f 	.word	0x080a6b5f
 80a6ae0:	080a6b5f 	.word	0x080a6b5f
 80a6ae4:	080a6b5f 	.word	0x080a6b5f
 80a6ae8:	080a6b1b 	.word	0x080a6b1b
 80a6aec:	080a6b45 	.word	0x080a6b45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a6af0:	687b      	ldr	r3, [r7, #4]
 80a6af2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a6af6:	b2db      	uxtb	r3, r3
 80a6af8:	2b03      	cmp	r3, #3
 80a6afa:	d107      	bne.n	80a6b0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80a6afc:	f107 030a 	add.w	r3, r7, #10
 80a6b00:	2202      	movs	r2, #2
 80a6b02:	4619      	mov	r1, r3
 80a6b04:	6878      	ldr	r0, [r7, #4]
 80a6b06:	f001 fd27 	bl	80a8558 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80a6b0a:	e032      	b.n	80a6b72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80a6b0c:	6839      	ldr	r1, [r7, #0]
 80a6b0e:	6878      	ldr	r0, [r7, #4]
 80a6b10:	f001 fca5 	bl	80a845e <USBD_CtlError>
            ret = USBD_FAIL;
 80a6b14:	2303      	movs	r3, #3
 80a6b16:	75fb      	strb	r3, [r7, #23]
          break;
 80a6b18:	e02b      	b.n	80a6b72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a6b1a:	687b      	ldr	r3, [r7, #4]
 80a6b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a6b20:	b2db      	uxtb	r3, r3
 80a6b22:	2b03      	cmp	r3, #3
 80a6b24:	d107      	bne.n	80a6b36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80a6b26:	f107 030d 	add.w	r3, r7, #13
 80a6b2a:	2201      	movs	r2, #1
 80a6b2c:	4619      	mov	r1, r3
 80a6b2e:	6878      	ldr	r0, [r7, #4]
 80a6b30:	f001 fd12 	bl	80a8558 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80a6b34:	e01d      	b.n	80a6b72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80a6b36:	6839      	ldr	r1, [r7, #0]
 80a6b38:	6878      	ldr	r0, [r7, #4]
 80a6b3a:	f001 fc90 	bl	80a845e <USBD_CtlError>
            ret = USBD_FAIL;
 80a6b3e:	2303      	movs	r3, #3
 80a6b40:	75fb      	strb	r3, [r7, #23]
          break;
 80a6b42:	e016      	b.n	80a6b72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80a6b44:	687b      	ldr	r3, [r7, #4]
 80a6b46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a6b4a:	b2db      	uxtb	r3, r3
 80a6b4c:	2b03      	cmp	r3, #3
 80a6b4e:	d00f      	beq.n	80a6b70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80a6b50:	6839      	ldr	r1, [r7, #0]
 80a6b52:	6878      	ldr	r0, [r7, #4]
 80a6b54:	f001 fc83 	bl	80a845e <USBD_CtlError>
            ret = USBD_FAIL;
 80a6b58:	2303      	movs	r3, #3
 80a6b5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80a6b5c:	e008      	b.n	80a6b70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80a6b5e:	6839      	ldr	r1, [r7, #0]
 80a6b60:	6878      	ldr	r0, [r7, #4]
 80a6b62:	f001 fc7c 	bl	80a845e <USBD_CtlError>
          ret = USBD_FAIL;
 80a6b66:	2303      	movs	r3, #3
 80a6b68:	75fb      	strb	r3, [r7, #23]
          break;
 80a6b6a:	e002      	b.n	80a6b72 <USBD_CDC_Setup+0x19e>
          break;
 80a6b6c:	bf00      	nop
 80a6b6e:	e008      	b.n	80a6b82 <USBD_CDC_Setup+0x1ae>
          break;
 80a6b70:	bf00      	nop
      }
      break;
 80a6b72:	e006      	b.n	80a6b82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80a6b74:	6839      	ldr	r1, [r7, #0]
 80a6b76:	6878      	ldr	r0, [r7, #4]
 80a6b78:	f001 fc71 	bl	80a845e <USBD_CtlError>
      ret = USBD_FAIL;
 80a6b7c:	2303      	movs	r3, #3
 80a6b7e:	75fb      	strb	r3, [r7, #23]
      break;
 80a6b80:	bf00      	nop
  }

  return (uint8_t)ret;
 80a6b82:	7dfb      	ldrb	r3, [r7, #23]
}
 80a6b84:	4618      	mov	r0, r3
 80a6b86:	3718      	adds	r7, #24
 80a6b88:	46bd      	mov	sp, r7
 80a6b8a:	bd80      	pop	{r7, pc}

080a6b8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80a6b8c:	b580      	push	{r7, lr}
 80a6b8e:	b084      	sub	sp, #16
 80a6b90:	af00      	add	r7, sp, #0
 80a6b92:	6078      	str	r0, [r7, #4]
 80a6b94:	460b      	mov	r3, r1
 80a6b96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80a6b98:	687b      	ldr	r3, [r7, #4]
 80a6b9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80a6b9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80a6ba0:	687b      	ldr	r3, [r7, #4]
 80a6ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6ba6:	687b      	ldr	r3, [r7, #4]
 80a6ba8:	32b0      	adds	r2, #176	@ 0xb0
 80a6baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6bae:	2b00      	cmp	r3, #0
 80a6bb0:	d101      	bne.n	80a6bb6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80a6bb2:	2303      	movs	r3, #3
 80a6bb4:	e065      	b.n	80a6c82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80a6bb6:	687b      	ldr	r3, [r7, #4]
 80a6bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6bbc:	687b      	ldr	r3, [r7, #4]
 80a6bbe:	32b0      	adds	r2, #176	@ 0xb0
 80a6bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6bc4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80a6bc6:	78fb      	ldrb	r3, [r7, #3]
 80a6bc8:	f003 020f 	and.w	r2, r3, #15
 80a6bcc:	6879      	ldr	r1, [r7, #4]
 80a6bce:	4613      	mov	r3, r2
 80a6bd0:	009b      	lsls	r3, r3, #2
 80a6bd2:	4413      	add	r3, r2
 80a6bd4:	009b      	lsls	r3, r3, #2
 80a6bd6:	440b      	add	r3, r1
 80a6bd8:	3318      	adds	r3, #24
 80a6bda:	681b      	ldr	r3, [r3, #0]
 80a6bdc:	2b00      	cmp	r3, #0
 80a6bde:	d02f      	beq.n	80a6c40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80a6be0:	78fb      	ldrb	r3, [r7, #3]
 80a6be2:	f003 020f 	and.w	r2, r3, #15
 80a6be6:	6879      	ldr	r1, [r7, #4]
 80a6be8:	4613      	mov	r3, r2
 80a6bea:	009b      	lsls	r3, r3, #2
 80a6bec:	4413      	add	r3, r2
 80a6bee:	009b      	lsls	r3, r3, #2
 80a6bf0:	440b      	add	r3, r1
 80a6bf2:	3318      	adds	r3, #24
 80a6bf4:	681a      	ldr	r2, [r3, #0]
 80a6bf6:	78fb      	ldrb	r3, [r7, #3]
 80a6bf8:	f003 010f 	and.w	r1, r3, #15
 80a6bfc:	68f8      	ldr	r0, [r7, #12]
 80a6bfe:	460b      	mov	r3, r1
 80a6c00:	00db      	lsls	r3, r3, #3
 80a6c02:	440b      	add	r3, r1
 80a6c04:	009b      	lsls	r3, r3, #2
 80a6c06:	4403      	add	r3, r0
 80a6c08:	331c      	adds	r3, #28
 80a6c0a:	681b      	ldr	r3, [r3, #0]
 80a6c0c:	fbb2 f1f3 	udiv	r1, r2, r3
 80a6c10:	fb01 f303 	mul.w	r3, r1, r3
 80a6c14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80a6c16:	2b00      	cmp	r3, #0
 80a6c18:	d112      	bne.n	80a6c40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80a6c1a:	78fb      	ldrb	r3, [r7, #3]
 80a6c1c:	f003 020f 	and.w	r2, r3, #15
 80a6c20:	6879      	ldr	r1, [r7, #4]
 80a6c22:	4613      	mov	r3, r2
 80a6c24:	009b      	lsls	r3, r3, #2
 80a6c26:	4413      	add	r3, r2
 80a6c28:	009b      	lsls	r3, r3, #2
 80a6c2a:	440b      	add	r3, r1
 80a6c2c:	3318      	adds	r3, #24
 80a6c2e:	2200      	movs	r2, #0
 80a6c30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80a6c32:	78f9      	ldrb	r1, [r7, #3]
 80a6c34:	2300      	movs	r3, #0
 80a6c36:	2200      	movs	r2, #0
 80a6c38:	6878      	ldr	r0, [r7, #4]
 80a6c3a:	f002 fa42 	bl	80a90c2 <USBD_LL_Transmit>
 80a6c3e:	e01f      	b.n	80a6c80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80a6c40:	68bb      	ldr	r3, [r7, #8]
 80a6c42:	2200      	movs	r2, #0
 80a6c44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80a6c48:	687b      	ldr	r3, [r7, #4]
 80a6c4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6c4e:	687a      	ldr	r2, [r7, #4]
 80a6c50:	33b0      	adds	r3, #176	@ 0xb0
 80a6c52:	009b      	lsls	r3, r3, #2
 80a6c54:	4413      	add	r3, r2
 80a6c56:	685b      	ldr	r3, [r3, #4]
 80a6c58:	691b      	ldr	r3, [r3, #16]
 80a6c5a:	2b00      	cmp	r3, #0
 80a6c5c:	d010      	beq.n	80a6c80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80a6c5e:	687b      	ldr	r3, [r7, #4]
 80a6c60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6c64:	687a      	ldr	r2, [r7, #4]
 80a6c66:	33b0      	adds	r3, #176	@ 0xb0
 80a6c68:	009b      	lsls	r3, r3, #2
 80a6c6a:	4413      	add	r3, r2
 80a6c6c:	685b      	ldr	r3, [r3, #4]
 80a6c6e:	691b      	ldr	r3, [r3, #16]
 80a6c70:	68ba      	ldr	r2, [r7, #8]
 80a6c72:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80a6c76:	68ba      	ldr	r2, [r7, #8]
 80a6c78:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80a6c7c:	78fa      	ldrb	r2, [r7, #3]
 80a6c7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80a6c80:	2300      	movs	r3, #0
}
 80a6c82:	4618      	mov	r0, r3
 80a6c84:	3710      	adds	r7, #16
 80a6c86:	46bd      	mov	sp, r7
 80a6c88:	bd80      	pop	{r7, pc}

080a6c8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80a6c8a:	b580      	push	{r7, lr}
 80a6c8c:	b084      	sub	sp, #16
 80a6c8e:	af00      	add	r7, sp, #0
 80a6c90:	6078      	str	r0, [r7, #4]
 80a6c92:	460b      	mov	r3, r1
 80a6c94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80a6c96:	687b      	ldr	r3, [r7, #4]
 80a6c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6c9c:	687b      	ldr	r3, [r7, #4]
 80a6c9e:	32b0      	adds	r2, #176	@ 0xb0
 80a6ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6ca4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80a6ca6:	687b      	ldr	r3, [r7, #4]
 80a6ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6cac:	687b      	ldr	r3, [r7, #4]
 80a6cae:	32b0      	adds	r2, #176	@ 0xb0
 80a6cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6cb4:	2b00      	cmp	r3, #0
 80a6cb6:	d101      	bne.n	80a6cbc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80a6cb8:	2303      	movs	r3, #3
 80a6cba:	e01a      	b.n	80a6cf2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80a6cbc:	78fb      	ldrb	r3, [r7, #3]
 80a6cbe:	4619      	mov	r1, r3
 80a6cc0:	6878      	ldr	r0, [r7, #4]
 80a6cc2:	f002 fa40 	bl	80a9146 <USBD_LL_GetRxDataSize>
 80a6cc6:	4602      	mov	r2, r0
 80a6cc8:	68fb      	ldr	r3, [r7, #12]
 80a6cca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80a6cce:	687b      	ldr	r3, [r7, #4]
 80a6cd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6cd4:	687a      	ldr	r2, [r7, #4]
 80a6cd6:	33b0      	adds	r3, #176	@ 0xb0
 80a6cd8:	009b      	lsls	r3, r3, #2
 80a6cda:	4413      	add	r3, r2
 80a6cdc:	685b      	ldr	r3, [r3, #4]
 80a6cde:	68db      	ldr	r3, [r3, #12]
 80a6ce0:	68fa      	ldr	r2, [r7, #12]
 80a6ce2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80a6ce6:	68fa      	ldr	r2, [r7, #12]
 80a6ce8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80a6cec:	4611      	mov	r1, r2
 80a6cee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80a6cf0:	2300      	movs	r3, #0
}
 80a6cf2:	4618      	mov	r0, r3
 80a6cf4:	3710      	adds	r7, #16
 80a6cf6:	46bd      	mov	sp, r7
 80a6cf8:	bd80      	pop	{r7, pc}

080a6cfa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80a6cfa:	b580      	push	{r7, lr}
 80a6cfc:	b084      	sub	sp, #16
 80a6cfe:	af00      	add	r7, sp, #0
 80a6d00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80a6d02:	687b      	ldr	r3, [r7, #4]
 80a6d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6d08:	687b      	ldr	r3, [r7, #4]
 80a6d0a:	32b0      	adds	r2, #176	@ 0xb0
 80a6d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6d10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80a6d12:	68fb      	ldr	r3, [r7, #12]
 80a6d14:	2b00      	cmp	r3, #0
 80a6d16:	d101      	bne.n	80a6d1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80a6d18:	2303      	movs	r3, #3
 80a6d1a:	e024      	b.n	80a6d66 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80a6d1c:	687b      	ldr	r3, [r7, #4]
 80a6d1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6d22:	687a      	ldr	r2, [r7, #4]
 80a6d24:	33b0      	adds	r3, #176	@ 0xb0
 80a6d26:	009b      	lsls	r3, r3, #2
 80a6d28:	4413      	add	r3, r2
 80a6d2a:	685b      	ldr	r3, [r3, #4]
 80a6d2c:	2b00      	cmp	r3, #0
 80a6d2e:	d019      	beq.n	80a6d64 <USBD_CDC_EP0_RxReady+0x6a>
 80a6d30:	68fb      	ldr	r3, [r7, #12]
 80a6d32:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80a6d36:	2bff      	cmp	r3, #255	@ 0xff
 80a6d38:	d014      	beq.n	80a6d64 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80a6d3a:	687b      	ldr	r3, [r7, #4]
 80a6d3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6d40:	687a      	ldr	r2, [r7, #4]
 80a6d42:	33b0      	adds	r3, #176	@ 0xb0
 80a6d44:	009b      	lsls	r3, r3, #2
 80a6d46:	4413      	add	r3, r2
 80a6d48:	685b      	ldr	r3, [r3, #4]
 80a6d4a:	689b      	ldr	r3, [r3, #8]
 80a6d4c:	68fa      	ldr	r2, [r7, #12]
 80a6d4e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80a6d52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80a6d54:	68fa      	ldr	r2, [r7, #12]
 80a6d56:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80a6d5a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80a6d5c:	68fb      	ldr	r3, [r7, #12]
 80a6d5e:	22ff      	movs	r2, #255	@ 0xff
 80a6d60:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80a6d64:	2300      	movs	r3, #0
}
 80a6d66:	4618      	mov	r0, r3
 80a6d68:	3710      	adds	r7, #16
 80a6d6a:	46bd      	mov	sp, r7
 80a6d6c:	bd80      	pop	{r7, pc}
	...

080a6d70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80a6d70:	b580      	push	{r7, lr}
 80a6d72:	b086      	sub	sp, #24
 80a6d74:	af00      	add	r7, sp, #0
 80a6d76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80a6d78:	2182      	movs	r1, #130	@ 0x82
 80a6d7a:	4818      	ldr	r0, [pc, #96]	@ (80a6ddc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80a6d7c:	f000 fd0f 	bl	80a779e <USBD_GetEpDesc>
 80a6d80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80a6d82:	2101      	movs	r1, #1
 80a6d84:	4815      	ldr	r0, [pc, #84]	@ (80a6ddc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80a6d86:	f000 fd0a 	bl	80a779e <USBD_GetEpDesc>
 80a6d8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80a6d8c:	2181      	movs	r1, #129	@ 0x81
 80a6d8e:	4813      	ldr	r0, [pc, #76]	@ (80a6ddc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80a6d90:	f000 fd05 	bl	80a779e <USBD_GetEpDesc>
 80a6d94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80a6d96:	697b      	ldr	r3, [r7, #20]
 80a6d98:	2b00      	cmp	r3, #0
 80a6d9a:	d002      	beq.n	80a6da2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80a6d9c:	697b      	ldr	r3, [r7, #20]
 80a6d9e:	2210      	movs	r2, #16
 80a6da0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80a6da2:	693b      	ldr	r3, [r7, #16]
 80a6da4:	2b00      	cmp	r3, #0
 80a6da6:	d006      	beq.n	80a6db6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80a6da8:	693b      	ldr	r3, [r7, #16]
 80a6daa:	2200      	movs	r2, #0
 80a6dac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80a6db0:	711a      	strb	r2, [r3, #4]
 80a6db2:	2200      	movs	r2, #0
 80a6db4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80a6db6:	68fb      	ldr	r3, [r7, #12]
 80a6db8:	2b00      	cmp	r3, #0
 80a6dba:	d006      	beq.n	80a6dca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80a6dbc:	68fb      	ldr	r3, [r7, #12]
 80a6dbe:	2200      	movs	r2, #0
 80a6dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80a6dc4:	711a      	strb	r2, [r3, #4]
 80a6dc6:	2200      	movs	r2, #0
 80a6dc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80a6dca:	687b      	ldr	r3, [r7, #4]
 80a6dcc:	2243      	movs	r2, #67	@ 0x43
 80a6dce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80a6dd0:	4b02      	ldr	r3, [pc, #8]	@ (80a6ddc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80a6dd2:	4618      	mov	r0, r3
 80a6dd4:	3718      	adds	r7, #24
 80a6dd6:	46bd      	mov	sp, r7
 80a6dd8:	bd80      	pop	{r7, pc}
 80a6dda:	bf00      	nop
 80a6ddc:	24000054 	.word	0x24000054

080a6de0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80a6de0:	b580      	push	{r7, lr}
 80a6de2:	b086      	sub	sp, #24
 80a6de4:	af00      	add	r7, sp, #0
 80a6de6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80a6de8:	2182      	movs	r1, #130	@ 0x82
 80a6dea:	4818      	ldr	r0, [pc, #96]	@ (80a6e4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80a6dec:	f000 fcd7 	bl	80a779e <USBD_GetEpDesc>
 80a6df0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80a6df2:	2101      	movs	r1, #1
 80a6df4:	4815      	ldr	r0, [pc, #84]	@ (80a6e4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80a6df6:	f000 fcd2 	bl	80a779e <USBD_GetEpDesc>
 80a6dfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80a6dfc:	2181      	movs	r1, #129	@ 0x81
 80a6dfe:	4813      	ldr	r0, [pc, #76]	@ (80a6e4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80a6e00:	f000 fccd 	bl	80a779e <USBD_GetEpDesc>
 80a6e04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80a6e06:	697b      	ldr	r3, [r7, #20]
 80a6e08:	2b00      	cmp	r3, #0
 80a6e0a:	d002      	beq.n	80a6e12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80a6e0c:	697b      	ldr	r3, [r7, #20]
 80a6e0e:	2210      	movs	r2, #16
 80a6e10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80a6e12:	693b      	ldr	r3, [r7, #16]
 80a6e14:	2b00      	cmp	r3, #0
 80a6e16:	d006      	beq.n	80a6e26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80a6e18:	693b      	ldr	r3, [r7, #16]
 80a6e1a:	2200      	movs	r2, #0
 80a6e1c:	711a      	strb	r2, [r3, #4]
 80a6e1e:	2200      	movs	r2, #0
 80a6e20:	f042 0202 	orr.w	r2, r2, #2
 80a6e24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80a6e26:	68fb      	ldr	r3, [r7, #12]
 80a6e28:	2b00      	cmp	r3, #0
 80a6e2a:	d006      	beq.n	80a6e3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80a6e2c:	68fb      	ldr	r3, [r7, #12]
 80a6e2e:	2200      	movs	r2, #0
 80a6e30:	711a      	strb	r2, [r3, #4]
 80a6e32:	2200      	movs	r2, #0
 80a6e34:	f042 0202 	orr.w	r2, r2, #2
 80a6e38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80a6e3a:	687b      	ldr	r3, [r7, #4]
 80a6e3c:	2243      	movs	r2, #67	@ 0x43
 80a6e3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80a6e40:	4b02      	ldr	r3, [pc, #8]	@ (80a6e4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80a6e42:	4618      	mov	r0, r3
 80a6e44:	3718      	adds	r7, #24
 80a6e46:	46bd      	mov	sp, r7
 80a6e48:	bd80      	pop	{r7, pc}
 80a6e4a:	bf00      	nop
 80a6e4c:	24000054 	.word	0x24000054

080a6e50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80a6e50:	b580      	push	{r7, lr}
 80a6e52:	b086      	sub	sp, #24
 80a6e54:	af00      	add	r7, sp, #0
 80a6e56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80a6e58:	2182      	movs	r1, #130	@ 0x82
 80a6e5a:	4818      	ldr	r0, [pc, #96]	@ (80a6ebc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80a6e5c:	f000 fc9f 	bl	80a779e <USBD_GetEpDesc>
 80a6e60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80a6e62:	2101      	movs	r1, #1
 80a6e64:	4815      	ldr	r0, [pc, #84]	@ (80a6ebc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80a6e66:	f000 fc9a 	bl	80a779e <USBD_GetEpDesc>
 80a6e6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80a6e6c:	2181      	movs	r1, #129	@ 0x81
 80a6e6e:	4813      	ldr	r0, [pc, #76]	@ (80a6ebc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80a6e70:	f000 fc95 	bl	80a779e <USBD_GetEpDesc>
 80a6e74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80a6e76:	697b      	ldr	r3, [r7, #20]
 80a6e78:	2b00      	cmp	r3, #0
 80a6e7a:	d002      	beq.n	80a6e82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80a6e7c:	697b      	ldr	r3, [r7, #20]
 80a6e7e:	2210      	movs	r2, #16
 80a6e80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80a6e82:	693b      	ldr	r3, [r7, #16]
 80a6e84:	2b00      	cmp	r3, #0
 80a6e86:	d006      	beq.n	80a6e96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80a6e88:	693b      	ldr	r3, [r7, #16]
 80a6e8a:	2200      	movs	r2, #0
 80a6e8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80a6e90:	711a      	strb	r2, [r3, #4]
 80a6e92:	2200      	movs	r2, #0
 80a6e94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80a6e96:	68fb      	ldr	r3, [r7, #12]
 80a6e98:	2b00      	cmp	r3, #0
 80a6e9a:	d006      	beq.n	80a6eaa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80a6e9c:	68fb      	ldr	r3, [r7, #12]
 80a6e9e:	2200      	movs	r2, #0
 80a6ea0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80a6ea4:	711a      	strb	r2, [r3, #4]
 80a6ea6:	2200      	movs	r2, #0
 80a6ea8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80a6eaa:	687b      	ldr	r3, [r7, #4]
 80a6eac:	2243      	movs	r2, #67	@ 0x43
 80a6eae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80a6eb0:	4b02      	ldr	r3, [pc, #8]	@ (80a6ebc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80a6eb2:	4618      	mov	r0, r3
 80a6eb4:	3718      	adds	r7, #24
 80a6eb6:	46bd      	mov	sp, r7
 80a6eb8:	bd80      	pop	{r7, pc}
 80a6eba:	bf00      	nop
 80a6ebc:	24000054 	.word	0x24000054

080a6ec0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80a6ec0:	b480      	push	{r7}
 80a6ec2:	b083      	sub	sp, #12
 80a6ec4:	af00      	add	r7, sp, #0
 80a6ec6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80a6ec8:	687b      	ldr	r3, [r7, #4]
 80a6eca:	220a      	movs	r2, #10
 80a6ecc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80a6ece:	4b03      	ldr	r3, [pc, #12]	@ (80a6edc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80a6ed0:	4618      	mov	r0, r3
 80a6ed2:	370c      	adds	r7, #12
 80a6ed4:	46bd      	mov	sp, r7
 80a6ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6eda:	4770      	bx	lr
 80a6edc:	24000010 	.word	0x24000010

080a6ee0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80a6ee0:	b480      	push	{r7}
 80a6ee2:	b083      	sub	sp, #12
 80a6ee4:	af00      	add	r7, sp, #0
 80a6ee6:	6078      	str	r0, [r7, #4]
 80a6ee8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80a6eea:	683b      	ldr	r3, [r7, #0]
 80a6eec:	2b00      	cmp	r3, #0
 80a6eee:	d101      	bne.n	80a6ef4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80a6ef0:	2303      	movs	r3, #3
 80a6ef2:	e009      	b.n	80a6f08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80a6ef4:	687b      	ldr	r3, [r7, #4]
 80a6ef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6efa:	687a      	ldr	r2, [r7, #4]
 80a6efc:	33b0      	adds	r3, #176	@ 0xb0
 80a6efe:	009b      	lsls	r3, r3, #2
 80a6f00:	4413      	add	r3, r2
 80a6f02:	683a      	ldr	r2, [r7, #0]
 80a6f04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80a6f06:	2300      	movs	r3, #0
}
 80a6f08:	4618      	mov	r0, r3
 80a6f0a:	370c      	adds	r7, #12
 80a6f0c:	46bd      	mov	sp, r7
 80a6f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6f12:	4770      	bx	lr

080a6f14 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80a6f14:	b480      	push	{r7}
 80a6f16:	b087      	sub	sp, #28
 80a6f18:	af00      	add	r7, sp, #0
 80a6f1a:	60f8      	str	r0, [r7, #12]
 80a6f1c:	60b9      	str	r1, [r7, #8]
 80a6f1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80a6f20:	68fb      	ldr	r3, [r7, #12]
 80a6f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6f26:	68fb      	ldr	r3, [r7, #12]
 80a6f28:	32b0      	adds	r2, #176	@ 0xb0
 80a6f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6f2e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80a6f30:	697b      	ldr	r3, [r7, #20]
 80a6f32:	2b00      	cmp	r3, #0
 80a6f34:	d101      	bne.n	80a6f3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80a6f36:	2303      	movs	r3, #3
 80a6f38:	e008      	b.n	80a6f4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80a6f3a:	697b      	ldr	r3, [r7, #20]
 80a6f3c:	68ba      	ldr	r2, [r7, #8]
 80a6f3e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80a6f42:	697b      	ldr	r3, [r7, #20]
 80a6f44:	687a      	ldr	r2, [r7, #4]
 80a6f46:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80a6f4a:	2300      	movs	r3, #0
}
 80a6f4c:	4618      	mov	r0, r3
 80a6f4e:	371c      	adds	r7, #28
 80a6f50:	46bd      	mov	sp, r7
 80a6f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6f56:	4770      	bx	lr

080a6f58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80a6f58:	b480      	push	{r7}
 80a6f5a:	b085      	sub	sp, #20
 80a6f5c:	af00      	add	r7, sp, #0
 80a6f5e:	6078      	str	r0, [r7, #4]
 80a6f60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80a6f62:	687b      	ldr	r3, [r7, #4]
 80a6f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6f68:	687b      	ldr	r3, [r7, #4]
 80a6f6a:	32b0      	adds	r2, #176	@ 0xb0
 80a6f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6f70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80a6f72:	68fb      	ldr	r3, [r7, #12]
 80a6f74:	2b00      	cmp	r3, #0
 80a6f76:	d101      	bne.n	80a6f7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80a6f78:	2303      	movs	r3, #3
 80a6f7a:	e004      	b.n	80a6f86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80a6f7c:	68fb      	ldr	r3, [r7, #12]
 80a6f7e:	683a      	ldr	r2, [r7, #0]
 80a6f80:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80a6f84:	2300      	movs	r3, #0
}
 80a6f86:	4618      	mov	r0, r3
 80a6f88:	3714      	adds	r7, #20
 80a6f8a:	46bd      	mov	sp, r7
 80a6f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6f90:	4770      	bx	lr
	...

080a6f94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80a6f94:	b580      	push	{r7, lr}
 80a6f96:	b084      	sub	sp, #16
 80a6f98:	af00      	add	r7, sp, #0
 80a6f9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80a6f9c:	687b      	ldr	r3, [r7, #4]
 80a6f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6fa2:	687b      	ldr	r3, [r7, #4]
 80a6fa4:	32b0      	adds	r2, #176	@ 0xb0
 80a6fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6faa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80a6fac:	687b      	ldr	r3, [r7, #4]
 80a6fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6fb2:	687b      	ldr	r3, [r7, #4]
 80a6fb4:	32b0      	adds	r2, #176	@ 0xb0
 80a6fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6fba:	2b00      	cmp	r3, #0
 80a6fbc:	d101      	bne.n	80a6fc2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80a6fbe:	2303      	movs	r3, #3
 80a6fc0:	e018      	b.n	80a6ff4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80a6fc2:	687b      	ldr	r3, [r7, #4]
 80a6fc4:	7c1b      	ldrb	r3, [r3, #16]
 80a6fc6:	2b00      	cmp	r3, #0
 80a6fc8:	d10a      	bne.n	80a6fe0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80a6fca:	4b0c      	ldr	r3, [pc, #48]	@ (80a6ffc <USBD_CDC_ReceivePacket+0x68>)
 80a6fcc:	7819      	ldrb	r1, [r3, #0]
 80a6fce:	68fb      	ldr	r3, [r7, #12]
 80a6fd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80a6fd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80a6fd8:	6878      	ldr	r0, [r7, #4]
 80a6fda:	f002 f893 	bl	80a9104 <USBD_LL_PrepareReceive>
 80a6fde:	e008      	b.n	80a6ff2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80a6fe0:	4b06      	ldr	r3, [pc, #24]	@ (80a6ffc <USBD_CDC_ReceivePacket+0x68>)
 80a6fe2:	7819      	ldrb	r1, [r3, #0]
 80a6fe4:	68fb      	ldr	r3, [r7, #12]
 80a6fe6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80a6fea:	2340      	movs	r3, #64	@ 0x40
 80a6fec:	6878      	ldr	r0, [r7, #4]
 80a6fee:	f002 f889 	bl	80a9104 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80a6ff2:	2300      	movs	r3, #0
}
 80a6ff4:	4618      	mov	r0, r3
 80a6ff6:	3710      	adds	r7, #16
 80a6ff8:	46bd      	mov	sp, r7
 80a6ffa:	bd80      	pop	{r7, pc}
 80a6ffc:	24000098 	.word	0x24000098

080a7000 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80a7000:	b580      	push	{r7, lr}
 80a7002:	b086      	sub	sp, #24
 80a7004:	af00      	add	r7, sp, #0
 80a7006:	60f8      	str	r0, [r7, #12]
 80a7008:	60b9      	str	r1, [r7, #8]
 80a700a:	4613      	mov	r3, r2
 80a700c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80a700e:	68fb      	ldr	r3, [r7, #12]
 80a7010:	2b00      	cmp	r3, #0
 80a7012:	d101      	bne.n	80a7018 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80a7014:	2303      	movs	r3, #3
 80a7016:	e01f      	b.n	80a7058 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80a7018:	68fb      	ldr	r3, [r7, #12]
 80a701a:	2200      	movs	r2, #0
 80a701c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80a7020:	68fb      	ldr	r3, [r7, #12]
 80a7022:	2200      	movs	r2, #0
 80a7024:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80a7028:	68fb      	ldr	r3, [r7, #12]
 80a702a:	2200      	movs	r2, #0
 80a702c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80a7030:	68bb      	ldr	r3, [r7, #8]
 80a7032:	2b00      	cmp	r3, #0
 80a7034:	d003      	beq.n	80a703e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80a7036:	68fb      	ldr	r3, [r7, #12]
 80a7038:	68ba      	ldr	r2, [r7, #8]
 80a703a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80a703e:	68fb      	ldr	r3, [r7, #12]
 80a7040:	2201      	movs	r2, #1
 80a7042:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80a7046:	68fb      	ldr	r3, [r7, #12]
 80a7048:	79fa      	ldrb	r2, [r7, #7]
 80a704a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80a704c:	68f8      	ldr	r0, [r7, #12]
 80a704e:	f001 fefd 	bl	80a8e4c <USBD_LL_Init>
 80a7052:	4603      	mov	r3, r0
 80a7054:	75fb      	strb	r3, [r7, #23]

  return ret;
 80a7056:	7dfb      	ldrb	r3, [r7, #23]
}
 80a7058:	4618      	mov	r0, r3
 80a705a:	3718      	adds	r7, #24
 80a705c:	46bd      	mov	sp, r7
 80a705e:	bd80      	pop	{r7, pc}

080a7060 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80a7060:	b580      	push	{r7, lr}
 80a7062:	b084      	sub	sp, #16
 80a7064:	af00      	add	r7, sp, #0
 80a7066:	6078      	str	r0, [r7, #4]
 80a7068:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80a706a:	2300      	movs	r3, #0
 80a706c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80a706e:	683b      	ldr	r3, [r7, #0]
 80a7070:	2b00      	cmp	r3, #0
 80a7072:	d101      	bne.n	80a7078 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80a7074:	2303      	movs	r3, #3
 80a7076:	e025      	b.n	80a70c4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80a7078:	687b      	ldr	r3, [r7, #4]
 80a707a:	683a      	ldr	r2, [r7, #0]
 80a707c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80a7080:	687b      	ldr	r3, [r7, #4]
 80a7082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a7086:	687b      	ldr	r3, [r7, #4]
 80a7088:	32ae      	adds	r2, #174	@ 0xae
 80a708a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a708e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a7090:	2b00      	cmp	r3, #0
 80a7092:	d00f      	beq.n	80a70b4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80a7094:	687b      	ldr	r3, [r7, #4]
 80a7096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a709a:	687b      	ldr	r3, [r7, #4]
 80a709c:	32ae      	adds	r2, #174	@ 0xae
 80a709e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a70a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a70a4:	f107 020e 	add.w	r2, r7, #14
 80a70a8:	4610      	mov	r0, r2
 80a70aa:	4798      	blx	r3
 80a70ac:	4602      	mov	r2, r0
 80a70ae:	687b      	ldr	r3, [r7, #4]
 80a70b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80a70b4:	687b      	ldr	r3, [r7, #4]
 80a70b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80a70ba:	1c5a      	adds	r2, r3, #1
 80a70bc:	687b      	ldr	r3, [r7, #4]
 80a70be:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80a70c2:	2300      	movs	r3, #0
}
 80a70c4:	4618      	mov	r0, r3
 80a70c6:	3710      	adds	r7, #16
 80a70c8:	46bd      	mov	sp, r7
 80a70ca:	bd80      	pop	{r7, pc}

080a70cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80a70cc:	b580      	push	{r7, lr}
 80a70ce:	b082      	sub	sp, #8
 80a70d0:	af00      	add	r7, sp, #0
 80a70d2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80a70d4:	6878      	ldr	r0, [r7, #4]
 80a70d6:	f001 ff0b 	bl	80a8ef0 <USBD_LL_Start>
 80a70da:	4603      	mov	r3, r0
}
 80a70dc:	4618      	mov	r0, r3
 80a70de:	3708      	adds	r7, #8
 80a70e0:	46bd      	mov	sp, r7
 80a70e2:	bd80      	pop	{r7, pc}

080a70e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80a70e4:	b480      	push	{r7}
 80a70e6:	b083      	sub	sp, #12
 80a70e8:	af00      	add	r7, sp, #0
 80a70ea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80a70ec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80a70ee:	4618      	mov	r0, r3
 80a70f0:	370c      	adds	r7, #12
 80a70f2:	46bd      	mov	sp, r7
 80a70f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a70f8:	4770      	bx	lr

080a70fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80a70fa:	b580      	push	{r7, lr}
 80a70fc:	b084      	sub	sp, #16
 80a70fe:	af00      	add	r7, sp, #0
 80a7100:	6078      	str	r0, [r7, #4]
 80a7102:	460b      	mov	r3, r1
 80a7104:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80a7106:	2300      	movs	r3, #0
 80a7108:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80a710a:	687b      	ldr	r3, [r7, #4]
 80a710c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7110:	2b00      	cmp	r3, #0
 80a7112:	d009      	beq.n	80a7128 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80a7114:	687b      	ldr	r3, [r7, #4]
 80a7116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a711a:	681b      	ldr	r3, [r3, #0]
 80a711c:	78fa      	ldrb	r2, [r7, #3]
 80a711e:	4611      	mov	r1, r2
 80a7120:	6878      	ldr	r0, [r7, #4]
 80a7122:	4798      	blx	r3
 80a7124:	4603      	mov	r3, r0
 80a7126:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80a7128:	7bfb      	ldrb	r3, [r7, #15]
}
 80a712a:	4618      	mov	r0, r3
 80a712c:	3710      	adds	r7, #16
 80a712e:	46bd      	mov	sp, r7
 80a7130:	bd80      	pop	{r7, pc}

080a7132 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80a7132:	b580      	push	{r7, lr}
 80a7134:	b084      	sub	sp, #16
 80a7136:	af00      	add	r7, sp, #0
 80a7138:	6078      	str	r0, [r7, #4]
 80a713a:	460b      	mov	r3, r1
 80a713c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80a713e:	2300      	movs	r3, #0
 80a7140:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80a7142:	687b      	ldr	r3, [r7, #4]
 80a7144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7148:	685b      	ldr	r3, [r3, #4]
 80a714a:	78fa      	ldrb	r2, [r7, #3]
 80a714c:	4611      	mov	r1, r2
 80a714e:	6878      	ldr	r0, [r7, #4]
 80a7150:	4798      	blx	r3
 80a7152:	4603      	mov	r3, r0
 80a7154:	2b00      	cmp	r3, #0
 80a7156:	d001      	beq.n	80a715c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80a7158:	2303      	movs	r3, #3
 80a715a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80a715c:	7bfb      	ldrb	r3, [r7, #15]
}
 80a715e:	4618      	mov	r0, r3
 80a7160:	3710      	adds	r7, #16
 80a7162:	46bd      	mov	sp, r7
 80a7164:	bd80      	pop	{r7, pc}

080a7166 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80a7166:	b580      	push	{r7, lr}
 80a7168:	b084      	sub	sp, #16
 80a716a:	af00      	add	r7, sp, #0
 80a716c:	6078      	str	r0, [r7, #4]
 80a716e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80a7170:	687b      	ldr	r3, [r7, #4]
 80a7172:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80a7176:	6839      	ldr	r1, [r7, #0]
 80a7178:	4618      	mov	r0, r3
 80a717a:	f001 f936 	bl	80a83ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80a717e:	687b      	ldr	r3, [r7, #4]
 80a7180:	2201      	movs	r2, #1
 80a7182:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80a7186:	687b      	ldr	r3, [r7, #4]
 80a7188:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80a718c:	461a      	mov	r2, r3
 80a718e:	687b      	ldr	r3, [r7, #4]
 80a7190:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80a7194:	687b      	ldr	r3, [r7, #4]
 80a7196:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80a719a:	f003 031f 	and.w	r3, r3, #31
 80a719e:	2b02      	cmp	r3, #2
 80a71a0:	d01a      	beq.n	80a71d8 <USBD_LL_SetupStage+0x72>
 80a71a2:	2b02      	cmp	r3, #2
 80a71a4:	d822      	bhi.n	80a71ec <USBD_LL_SetupStage+0x86>
 80a71a6:	2b00      	cmp	r3, #0
 80a71a8:	d002      	beq.n	80a71b0 <USBD_LL_SetupStage+0x4a>
 80a71aa:	2b01      	cmp	r3, #1
 80a71ac:	d00a      	beq.n	80a71c4 <USBD_LL_SetupStage+0x5e>
 80a71ae:	e01d      	b.n	80a71ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80a71b0:	687b      	ldr	r3, [r7, #4]
 80a71b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80a71b6:	4619      	mov	r1, r3
 80a71b8:	6878      	ldr	r0, [r7, #4]
 80a71ba:	f000 fb63 	bl	80a7884 <USBD_StdDevReq>
 80a71be:	4603      	mov	r3, r0
 80a71c0:	73fb      	strb	r3, [r7, #15]
      break;
 80a71c2:	e020      	b.n	80a7206 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80a71c4:	687b      	ldr	r3, [r7, #4]
 80a71c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80a71ca:	4619      	mov	r1, r3
 80a71cc:	6878      	ldr	r0, [r7, #4]
 80a71ce:	f000 fbcb 	bl	80a7968 <USBD_StdItfReq>
 80a71d2:	4603      	mov	r3, r0
 80a71d4:	73fb      	strb	r3, [r7, #15]
      break;
 80a71d6:	e016      	b.n	80a7206 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80a71d8:	687b      	ldr	r3, [r7, #4]
 80a71da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80a71de:	4619      	mov	r1, r3
 80a71e0:	6878      	ldr	r0, [r7, #4]
 80a71e2:	f000 fc2d 	bl	80a7a40 <USBD_StdEPReq>
 80a71e6:	4603      	mov	r3, r0
 80a71e8:	73fb      	strb	r3, [r7, #15]
      break;
 80a71ea:	e00c      	b.n	80a7206 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80a71ec:	687b      	ldr	r3, [r7, #4]
 80a71ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80a71f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80a71f6:	b2db      	uxtb	r3, r3
 80a71f8:	4619      	mov	r1, r3
 80a71fa:	6878      	ldr	r0, [r7, #4]
 80a71fc:	f001 fed8 	bl	80a8fb0 <USBD_LL_StallEP>
 80a7200:	4603      	mov	r3, r0
 80a7202:	73fb      	strb	r3, [r7, #15]
      break;
 80a7204:	bf00      	nop
  }

  return ret;
 80a7206:	7bfb      	ldrb	r3, [r7, #15]
}
 80a7208:	4618      	mov	r0, r3
 80a720a:	3710      	adds	r7, #16
 80a720c:	46bd      	mov	sp, r7
 80a720e:	bd80      	pop	{r7, pc}

080a7210 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80a7210:	b580      	push	{r7, lr}
 80a7212:	b086      	sub	sp, #24
 80a7214:	af00      	add	r7, sp, #0
 80a7216:	60f8      	str	r0, [r7, #12]
 80a7218:	460b      	mov	r3, r1
 80a721a:	607a      	str	r2, [r7, #4]
 80a721c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80a721e:	2300      	movs	r3, #0
 80a7220:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80a7222:	7afb      	ldrb	r3, [r7, #11]
 80a7224:	2b00      	cmp	r3, #0
 80a7226:	d16e      	bne.n	80a7306 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80a7228:	68fb      	ldr	r3, [r7, #12]
 80a722a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80a722e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80a7230:	68fb      	ldr	r3, [r7, #12]
 80a7232:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80a7236:	2b03      	cmp	r3, #3
 80a7238:	f040 8098 	bne.w	80a736c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80a723c:	693b      	ldr	r3, [r7, #16]
 80a723e:	689a      	ldr	r2, [r3, #8]
 80a7240:	693b      	ldr	r3, [r7, #16]
 80a7242:	68db      	ldr	r3, [r3, #12]
 80a7244:	429a      	cmp	r2, r3
 80a7246:	d913      	bls.n	80a7270 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80a7248:	693b      	ldr	r3, [r7, #16]
 80a724a:	689a      	ldr	r2, [r3, #8]
 80a724c:	693b      	ldr	r3, [r7, #16]
 80a724e:	68db      	ldr	r3, [r3, #12]
 80a7250:	1ad2      	subs	r2, r2, r3
 80a7252:	693b      	ldr	r3, [r7, #16]
 80a7254:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80a7256:	693b      	ldr	r3, [r7, #16]
 80a7258:	68da      	ldr	r2, [r3, #12]
 80a725a:	693b      	ldr	r3, [r7, #16]
 80a725c:	689b      	ldr	r3, [r3, #8]
 80a725e:	4293      	cmp	r3, r2
 80a7260:	bf28      	it	cs
 80a7262:	4613      	movcs	r3, r2
 80a7264:	461a      	mov	r2, r3
 80a7266:	6879      	ldr	r1, [r7, #4]
 80a7268:	68f8      	ldr	r0, [r7, #12]
 80a726a:	f001 f9be 	bl	80a85ea <USBD_CtlContinueRx>
 80a726e:	e07d      	b.n	80a736c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80a7270:	68fb      	ldr	r3, [r7, #12]
 80a7272:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80a7276:	f003 031f 	and.w	r3, r3, #31
 80a727a:	2b02      	cmp	r3, #2
 80a727c:	d014      	beq.n	80a72a8 <USBD_LL_DataOutStage+0x98>
 80a727e:	2b02      	cmp	r3, #2
 80a7280:	d81d      	bhi.n	80a72be <USBD_LL_DataOutStage+0xae>
 80a7282:	2b00      	cmp	r3, #0
 80a7284:	d002      	beq.n	80a728c <USBD_LL_DataOutStage+0x7c>
 80a7286:	2b01      	cmp	r3, #1
 80a7288:	d003      	beq.n	80a7292 <USBD_LL_DataOutStage+0x82>
 80a728a:	e018      	b.n	80a72be <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80a728c:	2300      	movs	r3, #0
 80a728e:	75bb      	strb	r3, [r7, #22]
            break;
 80a7290:	e018      	b.n	80a72c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80a7292:	68fb      	ldr	r3, [r7, #12]
 80a7294:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80a7298:	b2db      	uxtb	r3, r3
 80a729a:	4619      	mov	r1, r3
 80a729c:	68f8      	ldr	r0, [r7, #12]
 80a729e:	f000 fa64 	bl	80a776a <USBD_CoreFindIF>
 80a72a2:	4603      	mov	r3, r0
 80a72a4:	75bb      	strb	r3, [r7, #22]
            break;
 80a72a6:	e00d      	b.n	80a72c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80a72a8:	68fb      	ldr	r3, [r7, #12]
 80a72aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80a72ae:	b2db      	uxtb	r3, r3
 80a72b0:	4619      	mov	r1, r3
 80a72b2:	68f8      	ldr	r0, [r7, #12]
 80a72b4:	f000 fa66 	bl	80a7784 <USBD_CoreFindEP>
 80a72b8:	4603      	mov	r3, r0
 80a72ba:	75bb      	strb	r3, [r7, #22]
            break;
 80a72bc:	e002      	b.n	80a72c4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80a72be:	2300      	movs	r3, #0
 80a72c0:	75bb      	strb	r3, [r7, #22]
            break;
 80a72c2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80a72c4:	7dbb      	ldrb	r3, [r7, #22]
 80a72c6:	2b00      	cmp	r3, #0
 80a72c8:	d119      	bne.n	80a72fe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a72ca:	68fb      	ldr	r3, [r7, #12]
 80a72cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a72d0:	b2db      	uxtb	r3, r3
 80a72d2:	2b03      	cmp	r3, #3
 80a72d4:	d113      	bne.n	80a72fe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80a72d6:	7dba      	ldrb	r2, [r7, #22]
 80a72d8:	68fb      	ldr	r3, [r7, #12]
 80a72da:	32ae      	adds	r2, #174	@ 0xae
 80a72dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a72e0:	691b      	ldr	r3, [r3, #16]
 80a72e2:	2b00      	cmp	r3, #0
 80a72e4:	d00b      	beq.n	80a72fe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80a72e6:	7dba      	ldrb	r2, [r7, #22]
 80a72e8:	68fb      	ldr	r3, [r7, #12]
 80a72ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80a72ee:	7dba      	ldrb	r2, [r7, #22]
 80a72f0:	68fb      	ldr	r3, [r7, #12]
 80a72f2:	32ae      	adds	r2, #174	@ 0xae
 80a72f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a72f8:	691b      	ldr	r3, [r3, #16]
 80a72fa:	68f8      	ldr	r0, [r7, #12]
 80a72fc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80a72fe:	68f8      	ldr	r0, [r7, #12]
 80a7300:	f001 f984 	bl	80a860c <USBD_CtlSendStatus>
 80a7304:	e032      	b.n	80a736c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80a7306:	7afb      	ldrb	r3, [r7, #11]
 80a7308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80a730c:	b2db      	uxtb	r3, r3
 80a730e:	4619      	mov	r1, r3
 80a7310:	68f8      	ldr	r0, [r7, #12]
 80a7312:	f000 fa37 	bl	80a7784 <USBD_CoreFindEP>
 80a7316:	4603      	mov	r3, r0
 80a7318:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80a731a:	7dbb      	ldrb	r3, [r7, #22]
 80a731c:	2bff      	cmp	r3, #255	@ 0xff
 80a731e:	d025      	beq.n	80a736c <USBD_LL_DataOutStage+0x15c>
 80a7320:	7dbb      	ldrb	r3, [r7, #22]
 80a7322:	2b00      	cmp	r3, #0
 80a7324:	d122      	bne.n	80a736c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a7326:	68fb      	ldr	r3, [r7, #12]
 80a7328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a732c:	b2db      	uxtb	r3, r3
 80a732e:	2b03      	cmp	r3, #3
 80a7330:	d117      	bne.n	80a7362 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80a7332:	7dba      	ldrb	r2, [r7, #22]
 80a7334:	68fb      	ldr	r3, [r7, #12]
 80a7336:	32ae      	adds	r2, #174	@ 0xae
 80a7338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a733c:	699b      	ldr	r3, [r3, #24]
 80a733e:	2b00      	cmp	r3, #0
 80a7340:	d00f      	beq.n	80a7362 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80a7342:	7dba      	ldrb	r2, [r7, #22]
 80a7344:	68fb      	ldr	r3, [r7, #12]
 80a7346:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80a734a:	7dba      	ldrb	r2, [r7, #22]
 80a734c:	68fb      	ldr	r3, [r7, #12]
 80a734e:	32ae      	adds	r2, #174	@ 0xae
 80a7350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7354:	699b      	ldr	r3, [r3, #24]
 80a7356:	7afa      	ldrb	r2, [r7, #11]
 80a7358:	4611      	mov	r1, r2
 80a735a:	68f8      	ldr	r0, [r7, #12]
 80a735c:	4798      	blx	r3
 80a735e:	4603      	mov	r3, r0
 80a7360:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80a7362:	7dfb      	ldrb	r3, [r7, #23]
 80a7364:	2b00      	cmp	r3, #0
 80a7366:	d001      	beq.n	80a736c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80a7368:	7dfb      	ldrb	r3, [r7, #23]
 80a736a:	e000      	b.n	80a736e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80a736c:	2300      	movs	r3, #0
}
 80a736e:	4618      	mov	r0, r3
 80a7370:	3718      	adds	r7, #24
 80a7372:	46bd      	mov	sp, r7
 80a7374:	bd80      	pop	{r7, pc}

080a7376 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80a7376:	b580      	push	{r7, lr}
 80a7378:	b086      	sub	sp, #24
 80a737a:	af00      	add	r7, sp, #0
 80a737c:	60f8      	str	r0, [r7, #12]
 80a737e:	460b      	mov	r3, r1
 80a7380:	607a      	str	r2, [r7, #4]
 80a7382:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80a7384:	7afb      	ldrb	r3, [r7, #11]
 80a7386:	2b00      	cmp	r3, #0
 80a7388:	d16f      	bne.n	80a746a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80a738a:	68fb      	ldr	r3, [r7, #12]
 80a738c:	3314      	adds	r3, #20
 80a738e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80a7390:	68fb      	ldr	r3, [r7, #12]
 80a7392:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80a7396:	2b02      	cmp	r3, #2
 80a7398:	d15a      	bne.n	80a7450 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80a739a:	693b      	ldr	r3, [r7, #16]
 80a739c:	689a      	ldr	r2, [r3, #8]
 80a739e:	693b      	ldr	r3, [r7, #16]
 80a73a0:	68db      	ldr	r3, [r3, #12]
 80a73a2:	429a      	cmp	r2, r3
 80a73a4:	d914      	bls.n	80a73d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80a73a6:	693b      	ldr	r3, [r7, #16]
 80a73a8:	689a      	ldr	r2, [r3, #8]
 80a73aa:	693b      	ldr	r3, [r7, #16]
 80a73ac:	68db      	ldr	r3, [r3, #12]
 80a73ae:	1ad2      	subs	r2, r2, r3
 80a73b0:	693b      	ldr	r3, [r7, #16]
 80a73b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80a73b4:	693b      	ldr	r3, [r7, #16]
 80a73b6:	689b      	ldr	r3, [r3, #8]
 80a73b8:	461a      	mov	r2, r3
 80a73ba:	6879      	ldr	r1, [r7, #4]
 80a73bc:	68f8      	ldr	r0, [r7, #12]
 80a73be:	f001 f8e6 	bl	80a858e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80a73c2:	2300      	movs	r3, #0
 80a73c4:	2200      	movs	r2, #0
 80a73c6:	2100      	movs	r1, #0
 80a73c8:	68f8      	ldr	r0, [r7, #12]
 80a73ca:	f001 fe9b 	bl	80a9104 <USBD_LL_PrepareReceive>
 80a73ce:	e03f      	b.n	80a7450 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80a73d0:	693b      	ldr	r3, [r7, #16]
 80a73d2:	68da      	ldr	r2, [r3, #12]
 80a73d4:	693b      	ldr	r3, [r7, #16]
 80a73d6:	689b      	ldr	r3, [r3, #8]
 80a73d8:	429a      	cmp	r2, r3
 80a73da:	d11c      	bne.n	80a7416 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80a73dc:	693b      	ldr	r3, [r7, #16]
 80a73de:	685a      	ldr	r2, [r3, #4]
 80a73e0:	693b      	ldr	r3, [r7, #16]
 80a73e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80a73e4:	429a      	cmp	r2, r3
 80a73e6:	d316      	bcc.n	80a7416 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80a73e8:	693b      	ldr	r3, [r7, #16]
 80a73ea:	685a      	ldr	r2, [r3, #4]
 80a73ec:	68fb      	ldr	r3, [r7, #12]
 80a73ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80a73f2:	429a      	cmp	r2, r3
 80a73f4:	d20f      	bcs.n	80a7416 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80a73f6:	2200      	movs	r2, #0
 80a73f8:	2100      	movs	r1, #0
 80a73fa:	68f8      	ldr	r0, [r7, #12]
 80a73fc:	f001 f8c7 	bl	80a858e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80a7400:	68fb      	ldr	r3, [r7, #12]
 80a7402:	2200      	movs	r2, #0
 80a7404:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80a7408:	2300      	movs	r3, #0
 80a740a:	2200      	movs	r2, #0
 80a740c:	2100      	movs	r1, #0
 80a740e:	68f8      	ldr	r0, [r7, #12]
 80a7410:	f001 fe78 	bl	80a9104 <USBD_LL_PrepareReceive>
 80a7414:	e01c      	b.n	80a7450 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a7416:	68fb      	ldr	r3, [r7, #12]
 80a7418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a741c:	b2db      	uxtb	r3, r3
 80a741e:	2b03      	cmp	r3, #3
 80a7420:	d10f      	bne.n	80a7442 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80a7422:	68fb      	ldr	r3, [r7, #12]
 80a7424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7428:	68db      	ldr	r3, [r3, #12]
 80a742a:	2b00      	cmp	r3, #0
 80a742c:	d009      	beq.n	80a7442 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80a742e:	68fb      	ldr	r3, [r7, #12]
 80a7430:	2200      	movs	r2, #0
 80a7432:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80a7436:	68fb      	ldr	r3, [r7, #12]
 80a7438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a743c:	68db      	ldr	r3, [r3, #12]
 80a743e:	68f8      	ldr	r0, [r7, #12]
 80a7440:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80a7442:	2180      	movs	r1, #128	@ 0x80
 80a7444:	68f8      	ldr	r0, [r7, #12]
 80a7446:	f001 fdb3 	bl	80a8fb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80a744a:	68f8      	ldr	r0, [r7, #12]
 80a744c:	f001 f8f1 	bl	80a8632 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80a7450:	68fb      	ldr	r3, [r7, #12]
 80a7452:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80a7456:	2b00      	cmp	r3, #0
 80a7458:	d03a      	beq.n	80a74d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80a745a:	68f8      	ldr	r0, [r7, #12]
 80a745c:	f7ff fe42 	bl	80a70e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80a7460:	68fb      	ldr	r3, [r7, #12]
 80a7462:	2200      	movs	r2, #0
 80a7464:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80a7468:	e032      	b.n	80a74d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80a746a:	7afb      	ldrb	r3, [r7, #11]
 80a746c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80a7470:	b2db      	uxtb	r3, r3
 80a7472:	4619      	mov	r1, r3
 80a7474:	68f8      	ldr	r0, [r7, #12]
 80a7476:	f000 f985 	bl	80a7784 <USBD_CoreFindEP>
 80a747a:	4603      	mov	r3, r0
 80a747c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80a747e:	7dfb      	ldrb	r3, [r7, #23]
 80a7480:	2bff      	cmp	r3, #255	@ 0xff
 80a7482:	d025      	beq.n	80a74d0 <USBD_LL_DataInStage+0x15a>
 80a7484:	7dfb      	ldrb	r3, [r7, #23]
 80a7486:	2b00      	cmp	r3, #0
 80a7488:	d122      	bne.n	80a74d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a748a:	68fb      	ldr	r3, [r7, #12]
 80a748c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a7490:	b2db      	uxtb	r3, r3
 80a7492:	2b03      	cmp	r3, #3
 80a7494:	d11c      	bne.n	80a74d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80a7496:	7dfa      	ldrb	r2, [r7, #23]
 80a7498:	68fb      	ldr	r3, [r7, #12]
 80a749a:	32ae      	adds	r2, #174	@ 0xae
 80a749c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a74a0:	695b      	ldr	r3, [r3, #20]
 80a74a2:	2b00      	cmp	r3, #0
 80a74a4:	d014      	beq.n	80a74d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80a74a6:	7dfa      	ldrb	r2, [r7, #23]
 80a74a8:	68fb      	ldr	r3, [r7, #12]
 80a74aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80a74ae:	7dfa      	ldrb	r2, [r7, #23]
 80a74b0:	68fb      	ldr	r3, [r7, #12]
 80a74b2:	32ae      	adds	r2, #174	@ 0xae
 80a74b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a74b8:	695b      	ldr	r3, [r3, #20]
 80a74ba:	7afa      	ldrb	r2, [r7, #11]
 80a74bc:	4611      	mov	r1, r2
 80a74be:	68f8      	ldr	r0, [r7, #12]
 80a74c0:	4798      	blx	r3
 80a74c2:	4603      	mov	r3, r0
 80a74c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80a74c6:	7dbb      	ldrb	r3, [r7, #22]
 80a74c8:	2b00      	cmp	r3, #0
 80a74ca:	d001      	beq.n	80a74d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80a74cc:	7dbb      	ldrb	r3, [r7, #22]
 80a74ce:	e000      	b.n	80a74d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80a74d0:	2300      	movs	r3, #0
}
 80a74d2:	4618      	mov	r0, r3
 80a74d4:	3718      	adds	r7, #24
 80a74d6:	46bd      	mov	sp, r7
 80a74d8:	bd80      	pop	{r7, pc}

080a74da <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80a74da:	b580      	push	{r7, lr}
 80a74dc:	b084      	sub	sp, #16
 80a74de:	af00      	add	r7, sp, #0
 80a74e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80a74e2:	2300      	movs	r3, #0
 80a74e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80a74e6:	687b      	ldr	r3, [r7, #4]
 80a74e8:	2201      	movs	r2, #1
 80a74ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80a74ee:	687b      	ldr	r3, [r7, #4]
 80a74f0:	2200      	movs	r2, #0
 80a74f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80a74f6:	687b      	ldr	r3, [r7, #4]
 80a74f8:	2200      	movs	r2, #0
 80a74fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80a74fc:	687b      	ldr	r3, [r7, #4]
 80a74fe:	2200      	movs	r2, #0
 80a7500:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80a7504:	687b      	ldr	r3, [r7, #4]
 80a7506:	2200      	movs	r2, #0
 80a7508:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80a750c:	687b      	ldr	r3, [r7, #4]
 80a750e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7512:	2b00      	cmp	r3, #0
 80a7514:	d014      	beq.n	80a7540 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80a7516:	687b      	ldr	r3, [r7, #4]
 80a7518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a751c:	685b      	ldr	r3, [r3, #4]
 80a751e:	2b00      	cmp	r3, #0
 80a7520:	d00e      	beq.n	80a7540 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80a7522:	687b      	ldr	r3, [r7, #4]
 80a7524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7528:	685b      	ldr	r3, [r3, #4]
 80a752a:	687a      	ldr	r2, [r7, #4]
 80a752c:	6852      	ldr	r2, [r2, #4]
 80a752e:	b2d2      	uxtb	r2, r2
 80a7530:	4611      	mov	r1, r2
 80a7532:	6878      	ldr	r0, [r7, #4]
 80a7534:	4798      	blx	r3
 80a7536:	4603      	mov	r3, r0
 80a7538:	2b00      	cmp	r3, #0
 80a753a:	d001      	beq.n	80a7540 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80a753c:	2303      	movs	r3, #3
 80a753e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80a7540:	2340      	movs	r3, #64	@ 0x40
 80a7542:	2200      	movs	r2, #0
 80a7544:	2100      	movs	r1, #0
 80a7546:	6878      	ldr	r0, [r7, #4]
 80a7548:	f001 fced 	bl	80a8f26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80a754c:	687b      	ldr	r3, [r7, #4]
 80a754e:	2201      	movs	r2, #1
 80a7550:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80a7554:	687b      	ldr	r3, [r7, #4]
 80a7556:	2240      	movs	r2, #64	@ 0x40
 80a7558:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80a755c:	2340      	movs	r3, #64	@ 0x40
 80a755e:	2200      	movs	r2, #0
 80a7560:	2180      	movs	r1, #128	@ 0x80
 80a7562:	6878      	ldr	r0, [r7, #4]
 80a7564:	f001 fcdf 	bl	80a8f26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80a7568:	687b      	ldr	r3, [r7, #4]
 80a756a:	2201      	movs	r2, #1
 80a756c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80a756e:	687b      	ldr	r3, [r7, #4]
 80a7570:	2240      	movs	r2, #64	@ 0x40
 80a7572:	621a      	str	r2, [r3, #32]

  return ret;
 80a7574:	7bfb      	ldrb	r3, [r7, #15]
}
 80a7576:	4618      	mov	r0, r3
 80a7578:	3710      	adds	r7, #16
 80a757a:	46bd      	mov	sp, r7
 80a757c:	bd80      	pop	{r7, pc}

080a757e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80a757e:	b480      	push	{r7}
 80a7580:	b083      	sub	sp, #12
 80a7582:	af00      	add	r7, sp, #0
 80a7584:	6078      	str	r0, [r7, #4]
 80a7586:	460b      	mov	r3, r1
 80a7588:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80a758a:	687b      	ldr	r3, [r7, #4]
 80a758c:	78fa      	ldrb	r2, [r7, #3]
 80a758e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80a7590:	2300      	movs	r3, #0
}
 80a7592:	4618      	mov	r0, r3
 80a7594:	370c      	adds	r7, #12
 80a7596:	46bd      	mov	sp, r7
 80a7598:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a759c:	4770      	bx	lr

080a759e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80a759e:	b480      	push	{r7}
 80a75a0:	b083      	sub	sp, #12
 80a75a2:	af00      	add	r7, sp, #0
 80a75a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80a75a6:	687b      	ldr	r3, [r7, #4]
 80a75a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a75ac:	b2db      	uxtb	r3, r3
 80a75ae:	2b04      	cmp	r3, #4
 80a75b0:	d006      	beq.n	80a75c0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80a75b2:	687b      	ldr	r3, [r7, #4]
 80a75b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a75b8:	b2da      	uxtb	r2, r3
 80a75ba:	687b      	ldr	r3, [r7, #4]
 80a75bc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80a75c0:	687b      	ldr	r3, [r7, #4]
 80a75c2:	2204      	movs	r2, #4
 80a75c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80a75c8:	2300      	movs	r3, #0
}
 80a75ca:	4618      	mov	r0, r3
 80a75cc:	370c      	adds	r7, #12
 80a75ce:	46bd      	mov	sp, r7
 80a75d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a75d4:	4770      	bx	lr

080a75d6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80a75d6:	b480      	push	{r7}
 80a75d8:	b083      	sub	sp, #12
 80a75da:	af00      	add	r7, sp, #0
 80a75dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80a75de:	687b      	ldr	r3, [r7, #4]
 80a75e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a75e4:	b2db      	uxtb	r3, r3
 80a75e6:	2b04      	cmp	r3, #4
 80a75e8:	d106      	bne.n	80a75f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80a75ea:	687b      	ldr	r3, [r7, #4]
 80a75ec:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80a75f0:	b2da      	uxtb	r2, r3
 80a75f2:	687b      	ldr	r3, [r7, #4]
 80a75f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80a75f8:	2300      	movs	r3, #0
}
 80a75fa:	4618      	mov	r0, r3
 80a75fc:	370c      	adds	r7, #12
 80a75fe:	46bd      	mov	sp, r7
 80a7600:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a7604:	4770      	bx	lr

080a7606 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80a7606:	b580      	push	{r7, lr}
 80a7608:	b082      	sub	sp, #8
 80a760a:	af00      	add	r7, sp, #0
 80a760c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a760e:	687b      	ldr	r3, [r7, #4]
 80a7610:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a7614:	b2db      	uxtb	r3, r3
 80a7616:	2b03      	cmp	r3, #3
 80a7618:	d110      	bne.n	80a763c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80a761a:	687b      	ldr	r3, [r7, #4]
 80a761c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7620:	2b00      	cmp	r3, #0
 80a7622:	d00b      	beq.n	80a763c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80a7624:	687b      	ldr	r3, [r7, #4]
 80a7626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a762a:	69db      	ldr	r3, [r3, #28]
 80a762c:	2b00      	cmp	r3, #0
 80a762e:	d005      	beq.n	80a763c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80a7630:	687b      	ldr	r3, [r7, #4]
 80a7632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7636:	69db      	ldr	r3, [r3, #28]
 80a7638:	6878      	ldr	r0, [r7, #4]
 80a763a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80a763c:	2300      	movs	r3, #0
}
 80a763e:	4618      	mov	r0, r3
 80a7640:	3708      	adds	r7, #8
 80a7642:	46bd      	mov	sp, r7
 80a7644:	bd80      	pop	{r7, pc}

080a7646 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80a7646:	b580      	push	{r7, lr}
 80a7648:	b082      	sub	sp, #8
 80a764a:	af00      	add	r7, sp, #0
 80a764c:	6078      	str	r0, [r7, #4]
 80a764e:	460b      	mov	r3, r1
 80a7650:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80a7652:	687b      	ldr	r3, [r7, #4]
 80a7654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a7658:	687b      	ldr	r3, [r7, #4]
 80a765a:	32ae      	adds	r2, #174	@ 0xae
 80a765c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7660:	2b00      	cmp	r3, #0
 80a7662:	d101      	bne.n	80a7668 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80a7664:	2303      	movs	r3, #3
 80a7666:	e01c      	b.n	80a76a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a7668:	687b      	ldr	r3, [r7, #4]
 80a766a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a766e:	b2db      	uxtb	r3, r3
 80a7670:	2b03      	cmp	r3, #3
 80a7672:	d115      	bne.n	80a76a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80a7674:	687b      	ldr	r3, [r7, #4]
 80a7676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a767a:	687b      	ldr	r3, [r7, #4]
 80a767c:	32ae      	adds	r2, #174	@ 0xae
 80a767e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7682:	6a1b      	ldr	r3, [r3, #32]
 80a7684:	2b00      	cmp	r3, #0
 80a7686:	d00b      	beq.n	80a76a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80a7688:	687b      	ldr	r3, [r7, #4]
 80a768a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a768e:	687b      	ldr	r3, [r7, #4]
 80a7690:	32ae      	adds	r2, #174	@ 0xae
 80a7692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7696:	6a1b      	ldr	r3, [r3, #32]
 80a7698:	78fa      	ldrb	r2, [r7, #3]
 80a769a:	4611      	mov	r1, r2
 80a769c:	6878      	ldr	r0, [r7, #4]
 80a769e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80a76a0:	2300      	movs	r3, #0
}
 80a76a2:	4618      	mov	r0, r3
 80a76a4:	3708      	adds	r7, #8
 80a76a6:	46bd      	mov	sp, r7
 80a76a8:	bd80      	pop	{r7, pc}

080a76aa <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80a76aa:	b580      	push	{r7, lr}
 80a76ac:	b082      	sub	sp, #8
 80a76ae:	af00      	add	r7, sp, #0
 80a76b0:	6078      	str	r0, [r7, #4]
 80a76b2:	460b      	mov	r3, r1
 80a76b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80a76b6:	687b      	ldr	r3, [r7, #4]
 80a76b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a76bc:	687b      	ldr	r3, [r7, #4]
 80a76be:	32ae      	adds	r2, #174	@ 0xae
 80a76c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a76c4:	2b00      	cmp	r3, #0
 80a76c6:	d101      	bne.n	80a76cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80a76c8:	2303      	movs	r3, #3
 80a76ca:	e01c      	b.n	80a7706 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a76cc:	687b      	ldr	r3, [r7, #4]
 80a76ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a76d2:	b2db      	uxtb	r3, r3
 80a76d4:	2b03      	cmp	r3, #3
 80a76d6:	d115      	bne.n	80a7704 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80a76d8:	687b      	ldr	r3, [r7, #4]
 80a76da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a76de:	687b      	ldr	r3, [r7, #4]
 80a76e0:	32ae      	adds	r2, #174	@ 0xae
 80a76e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a76e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80a76e8:	2b00      	cmp	r3, #0
 80a76ea:	d00b      	beq.n	80a7704 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80a76ec:	687b      	ldr	r3, [r7, #4]
 80a76ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a76f2:	687b      	ldr	r3, [r7, #4]
 80a76f4:	32ae      	adds	r2, #174	@ 0xae
 80a76f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a76fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80a76fc:	78fa      	ldrb	r2, [r7, #3]
 80a76fe:	4611      	mov	r1, r2
 80a7700:	6878      	ldr	r0, [r7, #4]
 80a7702:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80a7704:	2300      	movs	r3, #0
}
 80a7706:	4618      	mov	r0, r3
 80a7708:	3708      	adds	r7, #8
 80a770a:	46bd      	mov	sp, r7
 80a770c:	bd80      	pop	{r7, pc}

080a770e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80a770e:	b480      	push	{r7}
 80a7710:	b083      	sub	sp, #12
 80a7712:	af00      	add	r7, sp, #0
 80a7714:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80a7716:	2300      	movs	r3, #0
}
 80a7718:	4618      	mov	r0, r3
 80a771a:	370c      	adds	r7, #12
 80a771c:	46bd      	mov	sp, r7
 80a771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a7722:	4770      	bx	lr

080a7724 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80a7724:	b580      	push	{r7, lr}
 80a7726:	b084      	sub	sp, #16
 80a7728:	af00      	add	r7, sp, #0
 80a772a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80a772c:	2300      	movs	r3, #0
 80a772e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80a7730:	687b      	ldr	r3, [r7, #4]
 80a7732:	2201      	movs	r2, #1
 80a7734:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80a7738:	687b      	ldr	r3, [r7, #4]
 80a773a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a773e:	2b00      	cmp	r3, #0
 80a7740:	d00e      	beq.n	80a7760 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80a7742:	687b      	ldr	r3, [r7, #4]
 80a7744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7748:	685b      	ldr	r3, [r3, #4]
 80a774a:	687a      	ldr	r2, [r7, #4]
 80a774c:	6852      	ldr	r2, [r2, #4]
 80a774e:	b2d2      	uxtb	r2, r2
 80a7750:	4611      	mov	r1, r2
 80a7752:	6878      	ldr	r0, [r7, #4]
 80a7754:	4798      	blx	r3
 80a7756:	4603      	mov	r3, r0
 80a7758:	2b00      	cmp	r3, #0
 80a775a:	d001      	beq.n	80a7760 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80a775c:	2303      	movs	r3, #3
 80a775e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80a7760:	7bfb      	ldrb	r3, [r7, #15]
}
 80a7762:	4618      	mov	r0, r3
 80a7764:	3710      	adds	r7, #16
 80a7766:	46bd      	mov	sp, r7
 80a7768:	bd80      	pop	{r7, pc}

080a776a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80a776a:	b480      	push	{r7}
 80a776c:	b083      	sub	sp, #12
 80a776e:	af00      	add	r7, sp, #0
 80a7770:	6078      	str	r0, [r7, #4]
 80a7772:	460b      	mov	r3, r1
 80a7774:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80a7776:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80a7778:	4618      	mov	r0, r3
 80a777a:	370c      	adds	r7, #12
 80a777c:	46bd      	mov	sp, r7
 80a777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a7782:	4770      	bx	lr

080a7784 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80a7784:	b480      	push	{r7}
 80a7786:	b083      	sub	sp, #12
 80a7788:	af00      	add	r7, sp, #0
 80a778a:	6078      	str	r0, [r7, #4]
 80a778c:	460b      	mov	r3, r1
 80a778e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80a7790:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80a7792:	4618      	mov	r0, r3
 80a7794:	370c      	adds	r7, #12
 80a7796:	46bd      	mov	sp, r7
 80a7798:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a779c:	4770      	bx	lr

080a779e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80a779e:	b580      	push	{r7, lr}
 80a77a0:	b086      	sub	sp, #24
 80a77a2:	af00      	add	r7, sp, #0
 80a77a4:	6078      	str	r0, [r7, #4]
 80a77a6:	460b      	mov	r3, r1
 80a77a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80a77aa:	687b      	ldr	r3, [r7, #4]
 80a77ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80a77ae:	687b      	ldr	r3, [r7, #4]
 80a77b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80a77b2:	2300      	movs	r3, #0
 80a77b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80a77b6:	68fb      	ldr	r3, [r7, #12]
 80a77b8:	885b      	ldrh	r3, [r3, #2]
 80a77ba:	b29b      	uxth	r3, r3
 80a77bc:	68fa      	ldr	r2, [r7, #12]
 80a77be:	7812      	ldrb	r2, [r2, #0]
 80a77c0:	4293      	cmp	r3, r2
 80a77c2:	d91f      	bls.n	80a7804 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80a77c4:	68fb      	ldr	r3, [r7, #12]
 80a77c6:	781b      	ldrb	r3, [r3, #0]
 80a77c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80a77ca:	e013      	b.n	80a77f4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80a77cc:	f107 030a 	add.w	r3, r7, #10
 80a77d0:	4619      	mov	r1, r3
 80a77d2:	6978      	ldr	r0, [r7, #20]
 80a77d4:	f000 f81b 	bl	80a780e <USBD_GetNextDesc>
 80a77d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80a77da:	697b      	ldr	r3, [r7, #20]
 80a77dc:	785b      	ldrb	r3, [r3, #1]
 80a77de:	2b05      	cmp	r3, #5
 80a77e0:	d108      	bne.n	80a77f4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80a77e2:	697b      	ldr	r3, [r7, #20]
 80a77e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80a77e6:	693b      	ldr	r3, [r7, #16]
 80a77e8:	789b      	ldrb	r3, [r3, #2]
 80a77ea:	78fa      	ldrb	r2, [r7, #3]
 80a77ec:	429a      	cmp	r2, r3
 80a77ee:	d008      	beq.n	80a7802 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80a77f0:	2300      	movs	r3, #0
 80a77f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80a77f4:	68fb      	ldr	r3, [r7, #12]
 80a77f6:	885b      	ldrh	r3, [r3, #2]
 80a77f8:	b29a      	uxth	r2, r3
 80a77fa:	897b      	ldrh	r3, [r7, #10]
 80a77fc:	429a      	cmp	r2, r3
 80a77fe:	d8e5      	bhi.n	80a77cc <USBD_GetEpDesc+0x2e>
 80a7800:	e000      	b.n	80a7804 <USBD_GetEpDesc+0x66>
          break;
 80a7802:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80a7804:	693b      	ldr	r3, [r7, #16]
}
 80a7806:	4618      	mov	r0, r3
 80a7808:	3718      	adds	r7, #24
 80a780a:	46bd      	mov	sp, r7
 80a780c:	bd80      	pop	{r7, pc}

080a780e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80a780e:	b480      	push	{r7}
 80a7810:	b085      	sub	sp, #20
 80a7812:	af00      	add	r7, sp, #0
 80a7814:	6078      	str	r0, [r7, #4]
 80a7816:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80a7818:	687b      	ldr	r3, [r7, #4]
 80a781a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80a781c:	683b      	ldr	r3, [r7, #0]
 80a781e:	881b      	ldrh	r3, [r3, #0]
 80a7820:	68fa      	ldr	r2, [r7, #12]
 80a7822:	7812      	ldrb	r2, [r2, #0]
 80a7824:	4413      	add	r3, r2
 80a7826:	b29a      	uxth	r2, r3
 80a7828:	683b      	ldr	r3, [r7, #0]
 80a782a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80a782c:	68fb      	ldr	r3, [r7, #12]
 80a782e:	781b      	ldrb	r3, [r3, #0]
 80a7830:	461a      	mov	r2, r3
 80a7832:	687b      	ldr	r3, [r7, #4]
 80a7834:	4413      	add	r3, r2
 80a7836:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80a7838:	68fb      	ldr	r3, [r7, #12]
}
 80a783a:	4618      	mov	r0, r3
 80a783c:	3714      	adds	r7, #20
 80a783e:	46bd      	mov	sp, r7
 80a7840:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a7844:	4770      	bx	lr

080a7846 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80a7846:	b480      	push	{r7}
 80a7848:	b087      	sub	sp, #28
 80a784a:	af00      	add	r7, sp, #0
 80a784c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80a784e:	687b      	ldr	r3, [r7, #4]
 80a7850:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80a7852:	697b      	ldr	r3, [r7, #20]
 80a7854:	781b      	ldrb	r3, [r3, #0]
 80a7856:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80a7858:	697b      	ldr	r3, [r7, #20]
 80a785a:	3301      	adds	r3, #1
 80a785c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80a785e:	697b      	ldr	r3, [r7, #20]
 80a7860:	781b      	ldrb	r3, [r3, #0]
 80a7862:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80a7864:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80a7868:	021b      	lsls	r3, r3, #8
 80a786a:	b21a      	sxth	r2, r3
 80a786c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80a7870:	4313      	orrs	r3, r2
 80a7872:	b21b      	sxth	r3, r3
 80a7874:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80a7876:	89fb      	ldrh	r3, [r7, #14]
}
 80a7878:	4618      	mov	r0, r3
 80a787a:	371c      	adds	r7, #28
 80a787c:	46bd      	mov	sp, r7
 80a787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a7882:	4770      	bx	lr

080a7884 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a7884:	b580      	push	{r7, lr}
 80a7886:	b084      	sub	sp, #16
 80a7888:	af00      	add	r7, sp, #0
 80a788a:	6078      	str	r0, [r7, #4]
 80a788c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80a788e:	2300      	movs	r3, #0
 80a7890:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80a7892:	683b      	ldr	r3, [r7, #0]
 80a7894:	781b      	ldrb	r3, [r3, #0]
 80a7896:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80a789a:	2b40      	cmp	r3, #64	@ 0x40
 80a789c:	d005      	beq.n	80a78aa <USBD_StdDevReq+0x26>
 80a789e:	2b40      	cmp	r3, #64	@ 0x40
 80a78a0:	d857      	bhi.n	80a7952 <USBD_StdDevReq+0xce>
 80a78a2:	2b00      	cmp	r3, #0
 80a78a4:	d00f      	beq.n	80a78c6 <USBD_StdDevReq+0x42>
 80a78a6:	2b20      	cmp	r3, #32
 80a78a8:	d153      	bne.n	80a7952 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80a78aa:	687b      	ldr	r3, [r7, #4]
 80a78ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a78b0:	687b      	ldr	r3, [r7, #4]
 80a78b2:	32ae      	adds	r2, #174	@ 0xae
 80a78b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a78b8:	689b      	ldr	r3, [r3, #8]
 80a78ba:	6839      	ldr	r1, [r7, #0]
 80a78bc:	6878      	ldr	r0, [r7, #4]
 80a78be:	4798      	blx	r3
 80a78c0:	4603      	mov	r3, r0
 80a78c2:	73fb      	strb	r3, [r7, #15]
      break;
 80a78c4:	e04a      	b.n	80a795c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80a78c6:	683b      	ldr	r3, [r7, #0]
 80a78c8:	785b      	ldrb	r3, [r3, #1]
 80a78ca:	2b09      	cmp	r3, #9
 80a78cc:	d83b      	bhi.n	80a7946 <USBD_StdDevReq+0xc2>
 80a78ce:	a201      	add	r2, pc, #4	@ (adr r2, 80a78d4 <USBD_StdDevReq+0x50>)
 80a78d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a78d4:	080a7929 	.word	0x080a7929
 80a78d8:	080a793d 	.word	0x080a793d
 80a78dc:	080a7947 	.word	0x080a7947
 80a78e0:	080a7933 	.word	0x080a7933
 80a78e4:	080a7947 	.word	0x080a7947
 80a78e8:	080a7907 	.word	0x080a7907
 80a78ec:	080a78fd 	.word	0x080a78fd
 80a78f0:	080a7947 	.word	0x080a7947
 80a78f4:	080a791f 	.word	0x080a791f
 80a78f8:	080a7911 	.word	0x080a7911
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80a78fc:	6839      	ldr	r1, [r7, #0]
 80a78fe:	6878      	ldr	r0, [r7, #4]
 80a7900:	f000 fa3c 	bl	80a7d7c <USBD_GetDescriptor>
          break;
 80a7904:	e024      	b.n	80a7950 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80a7906:	6839      	ldr	r1, [r7, #0]
 80a7908:	6878      	ldr	r0, [r7, #4]
 80a790a:	f000 fbcb 	bl	80a80a4 <USBD_SetAddress>
          break;
 80a790e:	e01f      	b.n	80a7950 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80a7910:	6839      	ldr	r1, [r7, #0]
 80a7912:	6878      	ldr	r0, [r7, #4]
 80a7914:	f000 fc0a 	bl	80a812c <USBD_SetConfig>
 80a7918:	4603      	mov	r3, r0
 80a791a:	73fb      	strb	r3, [r7, #15]
          break;
 80a791c:	e018      	b.n	80a7950 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80a791e:	6839      	ldr	r1, [r7, #0]
 80a7920:	6878      	ldr	r0, [r7, #4]
 80a7922:	f000 fcad 	bl	80a8280 <USBD_GetConfig>
          break;
 80a7926:	e013      	b.n	80a7950 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80a7928:	6839      	ldr	r1, [r7, #0]
 80a792a:	6878      	ldr	r0, [r7, #4]
 80a792c:	f000 fcde 	bl	80a82ec <USBD_GetStatus>
          break;
 80a7930:	e00e      	b.n	80a7950 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80a7932:	6839      	ldr	r1, [r7, #0]
 80a7934:	6878      	ldr	r0, [r7, #4]
 80a7936:	f000 fd0d 	bl	80a8354 <USBD_SetFeature>
          break;
 80a793a:	e009      	b.n	80a7950 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80a793c:	6839      	ldr	r1, [r7, #0]
 80a793e:	6878      	ldr	r0, [r7, #4]
 80a7940:	f000 fd31 	bl	80a83a6 <USBD_ClrFeature>
          break;
 80a7944:	e004      	b.n	80a7950 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80a7946:	6839      	ldr	r1, [r7, #0]
 80a7948:	6878      	ldr	r0, [r7, #4]
 80a794a:	f000 fd88 	bl	80a845e <USBD_CtlError>
          break;
 80a794e:	bf00      	nop
      }
      break;
 80a7950:	e004      	b.n	80a795c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80a7952:	6839      	ldr	r1, [r7, #0]
 80a7954:	6878      	ldr	r0, [r7, #4]
 80a7956:	f000 fd82 	bl	80a845e <USBD_CtlError>
      break;
 80a795a:	bf00      	nop
  }

  return ret;
 80a795c:	7bfb      	ldrb	r3, [r7, #15]
}
 80a795e:	4618      	mov	r0, r3
 80a7960:	3710      	adds	r7, #16
 80a7962:	46bd      	mov	sp, r7
 80a7964:	bd80      	pop	{r7, pc}
 80a7966:	bf00      	nop

080a7968 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a7968:	b580      	push	{r7, lr}
 80a796a:	b084      	sub	sp, #16
 80a796c:	af00      	add	r7, sp, #0
 80a796e:	6078      	str	r0, [r7, #4]
 80a7970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80a7972:	2300      	movs	r3, #0
 80a7974:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80a7976:	683b      	ldr	r3, [r7, #0]
 80a7978:	781b      	ldrb	r3, [r3, #0]
 80a797a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80a797e:	2b40      	cmp	r3, #64	@ 0x40
 80a7980:	d005      	beq.n	80a798e <USBD_StdItfReq+0x26>
 80a7982:	2b40      	cmp	r3, #64	@ 0x40
 80a7984:	d852      	bhi.n	80a7a2c <USBD_StdItfReq+0xc4>
 80a7986:	2b00      	cmp	r3, #0
 80a7988:	d001      	beq.n	80a798e <USBD_StdItfReq+0x26>
 80a798a:	2b20      	cmp	r3, #32
 80a798c:	d14e      	bne.n	80a7a2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80a798e:	687b      	ldr	r3, [r7, #4]
 80a7990:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a7994:	b2db      	uxtb	r3, r3
 80a7996:	3b01      	subs	r3, #1
 80a7998:	2b02      	cmp	r3, #2
 80a799a:	d840      	bhi.n	80a7a1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80a799c:	683b      	ldr	r3, [r7, #0]
 80a799e:	889b      	ldrh	r3, [r3, #4]
 80a79a0:	b2db      	uxtb	r3, r3
 80a79a2:	2b01      	cmp	r3, #1
 80a79a4:	d836      	bhi.n	80a7a14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80a79a6:	683b      	ldr	r3, [r7, #0]
 80a79a8:	889b      	ldrh	r3, [r3, #4]
 80a79aa:	b2db      	uxtb	r3, r3
 80a79ac:	4619      	mov	r1, r3
 80a79ae:	6878      	ldr	r0, [r7, #4]
 80a79b0:	f7ff fedb 	bl	80a776a <USBD_CoreFindIF>
 80a79b4:	4603      	mov	r3, r0
 80a79b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80a79b8:	7bbb      	ldrb	r3, [r7, #14]
 80a79ba:	2bff      	cmp	r3, #255	@ 0xff
 80a79bc:	d01d      	beq.n	80a79fa <USBD_StdItfReq+0x92>
 80a79be:	7bbb      	ldrb	r3, [r7, #14]
 80a79c0:	2b00      	cmp	r3, #0
 80a79c2:	d11a      	bne.n	80a79fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80a79c4:	7bba      	ldrb	r2, [r7, #14]
 80a79c6:	687b      	ldr	r3, [r7, #4]
 80a79c8:	32ae      	adds	r2, #174	@ 0xae
 80a79ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a79ce:	689b      	ldr	r3, [r3, #8]
 80a79d0:	2b00      	cmp	r3, #0
 80a79d2:	d00f      	beq.n	80a79f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80a79d4:	7bba      	ldrb	r2, [r7, #14]
 80a79d6:	687b      	ldr	r3, [r7, #4]
 80a79d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80a79dc:	7bba      	ldrb	r2, [r7, #14]
 80a79de:	687b      	ldr	r3, [r7, #4]
 80a79e0:	32ae      	adds	r2, #174	@ 0xae
 80a79e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a79e6:	689b      	ldr	r3, [r3, #8]
 80a79e8:	6839      	ldr	r1, [r7, #0]
 80a79ea:	6878      	ldr	r0, [r7, #4]
 80a79ec:	4798      	blx	r3
 80a79ee:	4603      	mov	r3, r0
 80a79f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80a79f2:	e004      	b.n	80a79fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80a79f4:	2303      	movs	r3, #3
 80a79f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80a79f8:	e001      	b.n	80a79fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80a79fa:	2303      	movs	r3, #3
 80a79fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80a79fe:	683b      	ldr	r3, [r7, #0]
 80a7a00:	88db      	ldrh	r3, [r3, #6]
 80a7a02:	2b00      	cmp	r3, #0
 80a7a04:	d110      	bne.n	80a7a28 <USBD_StdItfReq+0xc0>
 80a7a06:	7bfb      	ldrb	r3, [r7, #15]
 80a7a08:	2b00      	cmp	r3, #0
 80a7a0a:	d10d      	bne.n	80a7a28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80a7a0c:	6878      	ldr	r0, [r7, #4]
 80a7a0e:	f000 fdfd 	bl	80a860c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80a7a12:	e009      	b.n	80a7a28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80a7a14:	6839      	ldr	r1, [r7, #0]
 80a7a16:	6878      	ldr	r0, [r7, #4]
 80a7a18:	f000 fd21 	bl	80a845e <USBD_CtlError>
          break;
 80a7a1c:	e004      	b.n	80a7a28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80a7a1e:	6839      	ldr	r1, [r7, #0]
 80a7a20:	6878      	ldr	r0, [r7, #4]
 80a7a22:	f000 fd1c 	bl	80a845e <USBD_CtlError>
          break;
 80a7a26:	e000      	b.n	80a7a2a <USBD_StdItfReq+0xc2>
          break;
 80a7a28:	bf00      	nop
      }
      break;
 80a7a2a:	e004      	b.n	80a7a36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80a7a2c:	6839      	ldr	r1, [r7, #0]
 80a7a2e:	6878      	ldr	r0, [r7, #4]
 80a7a30:	f000 fd15 	bl	80a845e <USBD_CtlError>
      break;
 80a7a34:	bf00      	nop
  }

  return ret;
 80a7a36:	7bfb      	ldrb	r3, [r7, #15]
}
 80a7a38:	4618      	mov	r0, r3
 80a7a3a:	3710      	adds	r7, #16
 80a7a3c:	46bd      	mov	sp, r7
 80a7a3e:	bd80      	pop	{r7, pc}

080a7a40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a7a40:	b580      	push	{r7, lr}
 80a7a42:	b084      	sub	sp, #16
 80a7a44:	af00      	add	r7, sp, #0
 80a7a46:	6078      	str	r0, [r7, #4]
 80a7a48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80a7a4a:	2300      	movs	r3, #0
 80a7a4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80a7a4e:	683b      	ldr	r3, [r7, #0]
 80a7a50:	889b      	ldrh	r3, [r3, #4]
 80a7a52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80a7a54:	683b      	ldr	r3, [r7, #0]
 80a7a56:	781b      	ldrb	r3, [r3, #0]
 80a7a58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80a7a5c:	2b40      	cmp	r3, #64	@ 0x40
 80a7a5e:	d007      	beq.n	80a7a70 <USBD_StdEPReq+0x30>
 80a7a60:	2b40      	cmp	r3, #64	@ 0x40
 80a7a62:	f200 817f 	bhi.w	80a7d64 <USBD_StdEPReq+0x324>
 80a7a66:	2b00      	cmp	r3, #0
 80a7a68:	d02a      	beq.n	80a7ac0 <USBD_StdEPReq+0x80>
 80a7a6a:	2b20      	cmp	r3, #32
 80a7a6c:	f040 817a 	bne.w	80a7d64 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80a7a70:	7bbb      	ldrb	r3, [r7, #14]
 80a7a72:	4619      	mov	r1, r3
 80a7a74:	6878      	ldr	r0, [r7, #4]
 80a7a76:	f7ff fe85 	bl	80a7784 <USBD_CoreFindEP>
 80a7a7a:	4603      	mov	r3, r0
 80a7a7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80a7a7e:	7b7b      	ldrb	r3, [r7, #13]
 80a7a80:	2bff      	cmp	r3, #255	@ 0xff
 80a7a82:	f000 8174 	beq.w	80a7d6e <USBD_StdEPReq+0x32e>
 80a7a86:	7b7b      	ldrb	r3, [r7, #13]
 80a7a88:	2b00      	cmp	r3, #0
 80a7a8a:	f040 8170 	bne.w	80a7d6e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80a7a8e:	7b7a      	ldrb	r2, [r7, #13]
 80a7a90:	687b      	ldr	r3, [r7, #4]
 80a7a92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80a7a96:	7b7a      	ldrb	r2, [r7, #13]
 80a7a98:	687b      	ldr	r3, [r7, #4]
 80a7a9a:	32ae      	adds	r2, #174	@ 0xae
 80a7a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7aa0:	689b      	ldr	r3, [r3, #8]
 80a7aa2:	2b00      	cmp	r3, #0
 80a7aa4:	f000 8163 	beq.w	80a7d6e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80a7aa8:	7b7a      	ldrb	r2, [r7, #13]
 80a7aaa:	687b      	ldr	r3, [r7, #4]
 80a7aac:	32ae      	adds	r2, #174	@ 0xae
 80a7aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7ab2:	689b      	ldr	r3, [r3, #8]
 80a7ab4:	6839      	ldr	r1, [r7, #0]
 80a7ab6:	6878      	ldr	r0, [r7, #4]
 80a7ab8:	4798      	blx	r3
 80a7aba:	4603      	mov	r3, r0
 80a7abc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80a7abe:	e156      	b.n	80a7d6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80a7ac0:	683b      	ldr	r3, [r7, #0]
 80a7ac2:	785b      	ldrb	r3, [r3, #1]
 80a7ac4:	2b03      	cmp	r3, #3
 80a7ac6:	d008      	beq.n	80a7ada <USBD_StdEPReq+0x9a>
 80a7ac8:	2b03      	cmp	r3, #3
 80a7aca:	f300 8145 	bgt.w	80a7d58 <USBD_StdEPReq+0x318>
 80a7ace:	2b00      	cmp	r3, #0
 80a7ad0:	f000 809b 	beq.w	80a7c0a <USBD_StdEPReq+0x1ca>
 80a7ad4:	2b01      	cmp	r3, #1
 80a7ad6:	d03c      	beq.n	80a7b52 <USBD_StdEPReq+0x112>
 80a7ad8:	e13e      	b.n	80a7d58 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80a7ada:	687b      	ldr	r3, [r7, #4]
 80a7adc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a7ae0:	b2db      	uxtb	r3, r3
 80a7ae2:	2b02      	cmp	r3, #2
 80a7ae4:	d002      	beq.n	80a7aec <USBD_StdEPReq+0xac>
 80a7ae6:	2b03      	cmp	r3, #3
 80a7ae8:	d016      	beq.n	80a7b18 <USBD_StdEPReq+0xd8>
 80a7aea:	e02c      	b.n	80a7b46 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80a7aec:	7bbb      	ldrb	r3, [r7, #14]
 80a7aee:	2b00      	cmp	r3, #0
 80a7af0:	d00d      	beq.n	80a7b0e <USBD_StdEPReq+0xce>
 80a7af2:	7bbb      	ldrb	r3, [r7, #14]
 80a7af4:	2b80      	cmp	r3, #128	@ 0x80
 80a7af6:	d00a      	beq.n	80a7b0e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80a7af8:	7bbb      	ldrb	r3, [r7, #14]
 80a7afa:	4619      	mov	r1, r3
 80a7afc:	6878      	ldr	r0, [r7, #4]
 80a7afe:	f001 fa57 	bl	80a8fb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80a7b02:	2180      	movs	r1, #128	@ 0x80
 80a7b04:	6878      	ldr	r0, [r7, #4]
 80a7b06:	f001 fa53 	bl	80a8fb0 <USBD_LL_StallEP>
 80a7b0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80a7b0c:	e020      	b.n	80a7b50 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80a7b0e:	6839      	ldr	r1, [r7, #0]
 80a7b10:	6878      	ldr	r0, [r7, #4]
 80a7b12:	f000 fca4 	bl	80a845e <USBD_CtlError>
              break;
 80a7b16:	e01b      	b.n	80a7b50 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80a7b18:	683b      	ldr	r3, [r7, #0]
 80a7b1a:	885b      	ldrh	r3, [r3, #2]
 80a7b1c:	2b00      	cmp	r3, #0
 80a7b1e:	d10e      	bne.n	80a7b3e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80a7b20:	7bbb      	ldrb	r3, [r7, #14]
 80a7b22:	2b00      	cmp	r3, #0
 80a7b24:	d00b      	beq.n	80a7b3e <USBD_StdEPReq+0xfe>
 80a7b26:	7bbb      	ldrb	r3, [r7, #14]
 80a7b28:	2b80      	cmp	r3, #128	@ 0x80
 80a7b2a:	d008      	beq.n	80a7b3e <USBD_StdEPReq+0xfe>
 80a7b2c:	683b      	ldr	r3, [r7, #0]
 80a7b2e:	88db      	ldrh	r3, [r3, #6]
 80a7b30:	2b00      	cmp	r3, #0
 80a7b32:	d104      	bne.n	80a7b3e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80a7b34:	7bbb      	ldrb	r3, [r7, #14]
 80a7b36:	4619      	mov	r1, r3
 80a7b38:	6878      	ldr	r0, [r7, #4]
 80a7b3a:	f001 fa39 	bl	80a8fb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80a7b3e:	6878      	ldr	r0, [r7, #4]
 80a7b40:	f000 fd64 	bl	80a860c <USBD_CtlSendStatus>

              break;
 80a7b44:	e004      	b.n	80a7b50 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80a7b46:	6839      	ldr	r1, [r7, #0]
 80a7b48:	6878      	ldr	r0, [r7, #4]
 80a7b4a:	f000 fc88 	bl	80a845e <USBD_CtlError>
              break;
 80a7b4e:	bf00      	nop
          }
          break;
 80a7b50:	e107      	b.n	80a7d62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80a7b52:	687b      	ldr	r3, [r7, #4]
 80a7b54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a7b58:	b2db      	uxtb	r3, r3
 80a7b5a:	2b02      	cmp	r3, #2
 80a7b5c:	d002      	beq.n	80a7b64 <USBD_StdEPReq+0x124>
 80a7b5e:	2b03      	cmp	r3, #3
 80a7b60:	d016      	beq.n	80a7b90 <USBD_StdEPReq+0x150>
 80a7b62:	e04b      	b.n	80a7bfc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80a7b64:	7bbb      	ldrb	r3, [r7, #14]
 80a7b66:	2b00      	cmp	r3, #0
 80a7b68:	d00d      	beq.n	80a7b86 <USBD_StdEPReq+0x146>
 80a7b6a:	7bbb      	ldrb	r3, [r7, #14]
 80a7b6c:	2b80      	cmp	r3, #128	@ 0x80
 80a7b6e:	d00a      	beq.n	80a7b86 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80a7b70:	7bbb      	ldrb	r3, [r7, #14]
 80a7b72:	4619      	mov	r1, r3
 80a7b74:	6878      	ldr	r0, [r7, #4]
 80a7b76:	f001 fa1b 	bl	80a8fb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80a7b7a:	2180      	movs	r1, #128	@ 0x80
 80a7b7c:	6878      	ldr	r0, [r7, #4]
 80a7b7e:	f001 fa17 	bl	80a8fb0 <USBD_LL_StallEP>
 80a7b82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80a7b84:	e040      	b.n	80a7c08 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80a7b86:	6839      	ldr	r1, [r7, #0]
 80a7b88:	6878      	ldr	r0, [r7, #4]
 80a7b8a:	f000 fc68 	bl	80a845e <USBD_CtlError>
              break;
 80a7b8e:	e03b      	b.n	80a7c08 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80a7b90:	683b      	ldr	r3, [r7, #0]
 80a7b92:	885b      	ldrh	r3, [r3, #2]
 80a7b94:	2b00      	cmp	r3, #0
 80a7b96:	d136      	bne.n	80a7c06 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80a7b98:	7bbb      	ldrb	r3, [r7, #14]
 80a7b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80a7b9e:	2b00      	cmp	r3, #0
 80a7ba0:	d004      	beq.n	80a7bac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80a7ba2:	7bbb      	ldrb	r3, [r7, #14]
 80a7ba4:	4619      	mov	r1, r3
 80a7ba6:	6878      	ldr	r0, [r7, #4]
 80a7ba8:	f001 fa21 	bl	80a8fee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80a7bac:	6878      	ldr	r0, [r7, #4]
 80a7bae:	f000 fd2d 	bl	80a860c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80a7bb2:	7bbb      	ldrb	r3, [r7, #14]
 80a7bb4:	4619      	mov	r1, r3
 80a7bb6:	6878      	ldr	r0, [r7, #4]
 80a7bb8:	f7ff fde4 	bl	80a7784 <USBD_CoreFindEP>
 80a7bbc:	4603      	mov	r3, r0
 80a7bbe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80a7bc0:	7b7b      	ldrb	r3, [r7, #13]
 80a7bc2:	2bff      	cmp	r3, #255	@ 0xff
 80a7bc4:	d01f      	beq.n	80a7c06 <USBD_StdEPReq+0x1c6>
 80a7bc6:	7b7b      	ldrb	r3, [r7, #13]
 80a7bc8:	2b00      	cmp	r3, #0
 80a7bca:	d11c      	bne.n	80a7c06 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80a7bcc:	7b7a      	ldrb	r2, [r7, #13]
 80a7bce:	687b      	ldr	r3, [r7, #4]
 80a7bd0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80a7bd4:	7b7a      	ldrb	r2, [r7, #13]
 80a7bd6:	687b      	ldr	r3, [r7, #4]
 80a7bd8:	32ae      	adds	r2, #174	@ 0xae
 80a7bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7bde:	689b      	ldr	r3, [r3, #8]
 80a7be0:	2b00      	cmp	r3, #0
 80a7be2:	d010      	beq.n	80a7c06 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80a7be4:	7b7a      	ldrb	r2, [r7, #13]
 80a7be6:	687b      	ldr	r3, [r7, #4]
 80a7be8:	32ae      	adds	r2, #174	@ 0xae
 80a7bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7bee:	689b      	ldr	r3, [r3, #8]
 80a7bf0:	6839      	ldr	r1, [r7, #0]
 80a7bf2:	6878      	ldr	r0, [r7, #4]
 80a7bf4:	4798      	blx	r3
 80a7bf6:	4603      	mov	r3, r0
 80a7bf8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80a7bfa:	e004      	b.n	80a7c06 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80a7bfc:	6839      	ldr	r1, [r7, #0]
 80a7bfe:	6878      	ldr	r0, [r7, #4]
 80a7c00:	f000 fc2d 	bl	80a845e <USBD_CtlError>
              break;
 80a7c04:	e000      	b.n	80a7c08 <USBD_StdEPReq+0x1c8>
              break;
 80a7c06:	bf00      	nop
          }
          break;
 80a7c08:	e0ab      	b.n	80a7d62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80a7c0a:	687b      	ldr	r3, [r7, #4]
 80a7c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a7c10:	b2db      	uxtb	r3, r3
 80a7c12:	2b02      	cmp	r3, #2
 80a7c14:	d002      	beq.n	80a7c1c <USBD_StdEPReq+0x1dc>
 80a7c16:	2b03      	cmp	r3, #3
 80a7c18:	d032      	beq.n	80a7c80 <USBD_StdEPReq+0x240>
 80a7c1a:	e097      	b.n	80a7d4c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80a7c1c:	7bbb      	ldrb	r3, [r7, #14]
 80a7c1e:	2b00      	cmp	r3, #0
 80a7c20:	d007      	beq.n	80a7c32 <USBD_StdEPReq+0x1f2>
 80a7c22:	7bbb      	ldrb	r3, [r7, #14]
 80a7c24:	2b80      	cmp	r3, #128	@ 0x80
 80a7c26:	d004      	beq.n	80a7c32 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80a7c28:	6839      	ldr	r1, [r7, #0]
 80a7c2a:	6878      	ldr	r0, [r7, #4]
 80a7c2c:	f000 fc17 	bl	80a845e <USBD_CtlError>
                break;
 80a7c30:	e091      	b.n	80a7d56 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80a7c32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80a7c36:	2b00      	cmp	r3, #0
 80a7c38:	da0b      	bge.n	80a7c52 <USBD_StdEPReq+0x212>
 80a7c3a:	7bbb      	ldrb	r3, [r7, #14]
 80a7c3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80a7c40:	4613      	mov	r3, r2
 80a7c42:	009b      	lsls	r3, r3, #2
 80a7c44:	4413      	add	r3, r2
 80a7c46:	009b      	lsls	r3, r3, #2
 80a7c48:	3310      	adds	r3, #16
 80a7c4a:	687a      	ldr	r2, [r7, #4]
 80a7c4c:	4413      	add	r3, r2
 80a7c4e:	3304      	adds	r3, #4
 80a7c50:	e00b      	b.n	80a7c6a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80a7c52:	7bbb      	ldrb	r3, [r7, #14]
 80a7c54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80a7c58:	4613      	mov	r3, r2
 80a7c5a:	009b      	lsls	r3, r3, #2
 80a7c5c:	4413      	add	r3, r2
 80a7c5e:	009b      	lsls	r3, r3, #2
 80a7c60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80a7c64:	687a      	ldr	r2, [r7, #4]
 80a7c66:	4413      	add	r3, r2
 80a7c68:	3304      	adds	r3, #4
 80a7c6a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80a7c6c:	68bb      	ldr	r3, [r7, #8]
 80a7c6e:	2200      	movs	r2, #0
 80a7c70:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80a7c72:	68bb      	ldr	r3, [r7, #8]
 80a7c74:	2202      	movs	r2, #2
 80a7c76:	4619      	mov	r1, r3
 80a7c78:	6878      	ldr	r0, [r7, #4]
 80a7c7a:	f000 fc6d 	bl	80a8558 <USBD_CtlSendData>
              break;
 80a7c7e:	e06a      	b.n	80a7d56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80a7c80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80a7c84:	2b00      	cmp	r3, #0
 80a7c86:	da11      	bge.n	80a7cac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80a7c88:	7bbb      	ldrb	r3, [r7, #14]
 80a7c8a:	f003 020f 	and.w	r2, r3, #15
 80a7c8e:	6879      	ldr	r1, [r7, #4]
 80a7c90:	4613      	mov	r3, r2
 80a7c92:	009b      	lsls	r3, r3, #2
 80a7c94:	4413      	add	r3, r2
 80a7c96:	009b      	lsls	r3, r3, #2
 80a7c98:	440b      	add	r3, r1
 80a7c9a:	3324      	adds	r3, #36	@ 0x24
 80a7c9c:	881b      	ldrh	r3, [r3, #0]
 80a7c9e:	2b00      	cmp	r3, #0
 80a7ca0:	d117      	bne.n	80a7cd2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80a7ca2:	6839      	ldr	r1, [r7, #0]
 80a7ca4:	6878      	ldr	r0, [r7, #4]
 80a7ca6:	f000 fbda 	bl	80a845e <USBD_CtlError>
                  break;
 80a7caa:	e054      	b.n	80a7d56 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80a7cac:	7bbb      	ldrb	r3, [r7, #14]
 80a7cae:	f003 020f 	and.w	r2, r3, #15
 80a7cb2:	6879      	ldr	r1, [r7, #4]
 80a7cb4:	4613      	mov	r3, r2
 80a7cb6:	009b      	lsls	r3, r3, #2
 80a7cb8:	4413      	add	r3, r2
 80a7cba:	009b      	lsls	r3, r3, #2
 80a7cbc:	440b      	add	r3, r1
 80a7cbe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80a7cc2:	881b      	ldrh	r3, [r3, #0]
 80a7cc4:	2b00      	cmp	r3, #0
 80a7cc6:	d104      	bne.n	80a7cd2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80a7cc8:	6839      	ldr	r1, [r7, #0]
 80a7cca:	6878      	ldr	r0, [r7, #4]
 80a7ccc:	f000 fbc7 	bl	80a845e <USBD_CtlError>
                  break;
 80a7cd0:	e041      	b.n	80a7d56 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80a7cd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80a7cd6:	2b00      	cmp	r3, #0
 80a7cd8:	da0b      	bge.n	80a7cf2 <USBD_StdEPReq+0x2b2>
 80a7cda:	7bbb      	ldrb	r3, [r7, #14]
 80a7cdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80a7ce0:	4613      	mov	r3, r2
 80a7ce2:	009b      	lsls	r3, r3, #2
 80a7ce4:	4413      	add	r3, r2
 80a7ce6:	009b      	lsls	r3, r3, #2
 80a7ce8:	3310      	adds	r3, #16
 80a7cea:	687a      	ldr	r2, [r7, #4]
 80a7cec:	4413      	add	r3, r2
 80a7cee:	3304      	adds	r3, #4
 80a7cf0:	e00b      	b.n	80a7d0a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80a7cf2:	7bbb      	ldrb	r3, [r7, #14]
 80a7cf4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80a7cf8:	4613      	mov	r3, r2
 80a7cfa:	009b      	lsls	r3, r3, #2
 80a7cfc:	4413      	add	r3, r2
 80a7cfe:	009b      	lsls	r3, r3, #2
 80a7d00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80a7d04:	687a      	ldr	r2, [r7, #4]
 80a7d06:	4413      	add	r3, r2
 80a7d08:	3304      	adds	r3, #4
 80a7d0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80a7d0c:	7bbb      	ldrb	r3, [r7, #14]
 80a7d0e:	2b00      	cmp	r3, #0
 80a7d10:	d002      	beq.n	80a7d18 <USBD_StdEPReq+0x2d8>
 80a7d12:	7bbb      	ldrb	r3, [r7, #14]
 80a7d14:	2b80      	cmp	r3, #128	@ 0x80
 80a7d16:	d103      	bne.n	80a7d20 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80a7d18:	68bb      	ldr	r3, [r7, #8]
 80a7d1a:	2200      	movs	r2, #0
 80a7d1c:	601a      	str	r2, [r3, #0]
 80a7d1e:	e00e      	b.n	80a7d3e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80a7d20:	7bbb      	ldrb	r3, [r7, #14]
 80a7d22:	4619      	mov	r1, r3
 80a7d24:	6878      	ldr	r0, [r7, #4]
 80a7d26:	f001 f981 	bl	80a902c <USBD_LL_IsStallEP>
 80a7d2a:	4603      	mov	r3, r0
 80a7d2c:	2b00      	cmp	r3, #0
 80a7d2e:	d003      	beq.n	80a7d38 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80a7d30:	68bb      	ldr	r3, [r7, #8]
 80a7d32:	2201      	movs	r2, #1
 80a7d34:	601a      	str	r2, [r3, #0]
 80a7d36:	e002      	b.n	80a7d3e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80a7d38:	68bb      	ldr	r3, [r7, #8]
 80a7d3a:	2200      	movs	r2, #0
 80a7d3c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80a7d3e:	68bb      	ldr	r3, [r7, #8]
 80a7d40:	2202      	movs	r2, #2
 80a7d42:	4619      	mov	r1, r3
 80a7d44:	6878      	ldr	r0, [r7, #4]
 80a7d46:	f000 fc07 	bl	80a8558 <USBD_CtlSendData>
              break;
 80a7d4a:	e004      	b.n	80a7d56 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80a7d4c:	6839      	ldr	r1, [r7, #0]
 80a7d4e:	6878      	ldr	r0, [r7, #4]
 80a7d50:	f000 fb85 	bl	80a845e <USBD_CtlError>
              break;
 80a7d54:	bf00      	nop
          }
          break;
 80a7d56:	e004      	b.n	80a7d62 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80a7d58:	6839      	ldr	r1, [r7, #0]
 80a7d5a:	6878      	ldr	r0, [r7, #4]
 80a7d5c:	f000 fb7f 	bl	80a845e <USBD_CtlError>
          break;
 80a7d60:	bf00      	nop
      }
      break;
 80a7d62:	e005      	b.n	80a7d70 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80a7d64:	6839      	ldr	r1, [r7, #0]
 80a7d66:	6878      	ldr	r0, [r7, #4]
 80a7d68:	f000 fb79 	bl	80a845e <USBD_CtlError>
      break;
 80a7d6c:	e000      	b.n	80a7d70 <USBD_StdEPReq+0x330>
      break;
 80a7d6e:	bf00      	nop
  }

  return ret;
 80a7d70:	7bfb      	ldrb	r3, [r7, #15]
}
 80a7d72:	4618      	mov	r0, r3
 80a7d74:	3710      	adds	r7, #16
 80a7d76:	46bd      	mov	sp, r7
 80a7d78:	bd80      	pop	{r7, pc}
	...

080a7d7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a7d7c:	b580      	push	{r7, lr}
 80a7d7e:	b084      	sub	sp, #16
 80a7d80:	af00      	add	r7, sp, #0
 80a7d82:	6078      	str	r0, [r7, #4]
 80a7d84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80a7d86:	2300      	movs	r3, #0
 80a7d88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80a7d8a:	2300      	movs	r3, #0
 80a7d8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80a7d8e:	2300      	movs	r3, #0
 80a7d90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80a7d92:	683b      	ldr	r3, [r7, #0]
 80a7d94:	885b      	ldrh	r3, [r3, #2]
 80a7d96:	0a1b      	lsrs	r3, r3, #8
 80a7d98:	b29b      	uxth	r3, r3
 80a7d9a:	3b01      	subs	r3, #1
 80a7d9c:	2b0e      	cmp	r3, #14
 80a7d9e:	f200 8152 	bhi.w	80a8046 <USBD_GetDescriptor+0x2ca>
 80a7da2:	a201      	add	r2, pc, #4	@ (adr r2, 80a7da8 <USBD_GetDescriptor+0x2c>)
 80a7da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a7da8:	080a7e19 	.word	0x080a7e19
 80a7dac:	080a7e31 	.word	0x080a7e31
 80a7db0:	080a7e71 	.word	0x080a7e71
 80a7db4:	080a8047 	.word	0x080a8047
 80a7db8:	080a8047 	.word	0x080a8047
 80a7dbc:	080a7fe7 	.word	0x080a7fe7
 80a7dc0:	080a8013 	.word	0x080a8013
 80a7dc4:	080a8047 	.word	0x080a8047
 80a7dc8:	080a8047 	.word	0x080a8047
 80a7dcc:	080a8047 	.word	0x080a8047
 80a7dd0:	080a8047 	.word	0x080a8047
 80a7dd4:	080a8047 	.word	0x080a8047
 80a7dd8:	080a8047 	.word	0x080a8047
 80a7ddc:	080a8047 	.word	0x080a8047
 80a7de0:	080a7de5 	.word	0x080a7de5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80a7de4:	687b      	ldr	r3, [r7, #4]
 80a7de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7dea:	69db      	ldr	r3, [r3, #28]
 80a7dec:	2b00      	cmp	r3, #0
 80a7dee:	d00b      	beq.n	80a7e08 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80a7df0:	687b      	ldr	r3, [r7, #4]
 80a7df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7df6:	69db      	ldr	r3, [r3, #28]
 80a7df8:	687a      	ldr	r2, [r7, #4]
 80a7dfa:	7c12      	ldrb	r2, [r2, #16]
 80a7dfc:	f107 0108 	add.w	r1, r7, #8
 80a7e00:	4610      	mov	r0, r2
 80a7e02:	4798      	blx	r3
 80a7e04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80a7e06:	e126      	b.n	80a8056 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80a7e08:	6839      	ldr	r1, [r7, #0]
 80a7e0a:	6878      	ldr	r0, [r7, #4]
 80a7e0c:	f000 fb27 	bl	80a845e <USBD_CtlError>
        err++;
 80a7e10:	7afb      	ldrb	r3, [r7, #11]
 80a7e12:	3301      	adds	r3, #1
 80a7e14:	72fb      	strb	r3, [r7, #11]
      break;
 80a7e16:	e11e      	b.n	80a8056 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80a7e18:	687b      	ldr	r3, [r7, #4]
 80a7e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7e1e:	681b      	ldr	r3, [r3, #0]
 80a7e20:	687a      	ldr	r2, [r7, #4]
 80a7e22:	7c12      	ldrb	r2, [r2, #16]
 80a7e24:	f107 0108 	add.w	r1, r7, #8
 80a7e28:	4610      	mov	r0, r2
 80a7e2a:	4798      	blx	r3
 80a7e2c:	60f8      	str	r0, [r7, #12]
      break;
 80a7e2e:	e112      	b.n	80a8056 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80a7e30:	687b      	ldr	r3, [r7, #4]
 80a7e32:	7c1b      	ldrb	r3, [r3, #16]
 80a7e34:	2b00      	cmp	r3, #0
 80a7e36:	d10d      	bne.n	80a7e54 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80a7e38:	687b      	ldr	r3, [r7, #4]
 80a7e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a7e40:	f107 0208 	add.w	r2, r7, #8
 80a7e44:	4610      	mov	r0, r2
 80a7e46:	4798      	blx	r3
 80a7e48:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80a7e4a:	68fb      	ldr	r3, [r7, #12]
 80a7e4c:	3301      	adds	r3, #1
 80a7e4e:	2202      	movs	r2, #2
 80a7e50:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80a7e52:	e100      	b.n	80a8056 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80a7e54:	687b      	ldr	r3, [r7, #4]
 80a7e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a7e5c:	f107 0208 	add.w	r2, r7, #8
 80a7e60:	4610      	mov	r0, r2
 80a7e62:	4798      	blx	r3
 80a7e64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80a7e66:	68fb      	ldr	r3, [r7, #12]
 80a7e68:	3301      	adds	r3, #1
 80a7e6a:	2202      	movs	r2, #2
 80a7e6c:	701a      	strb	r2, [r3, #0]
      break;
 80a7e6e:	e0f2      	b.n	80a8056 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80a7e70:	683b      	ldr	r3, [r7, #0]
 80a7e72:	885b      	ldrh	r3, [r3, #2]
 80a7e74:	b2db      	uxtb	r3, r3
 80a7e76:	2b05      	cmp	r3, #5
 80a7e78:	f200 80ac 	bhi.w	80a7fd4 <USBD_GetDescriptor+0x258>
 80a7e7c:	a201      	add	r2, pc, #4	@ (adr r2, 80a7e84 <USBD_GetDescriptor+0x108>)
 80a7e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a7e82:	bf00      	nop
 80a7e84:	080a7e9d 	.word	0x080a7e9d
 80a7e88:	080a7ed1 	.word	0x080a7ed1
 80a7e8c:	080a7f05 	.word	0x080a7f05
 80a7e90:	080a7f39 	.word	0x080a7f39
 80a7e94:	080a7f6d 	.word	0x080a7f6d
 80a7e98:	080a7fa1 	.word	0x080a7fa1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80a7e9c:	687b      	ldr	r3, [r7, #4]
 80a7e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7ea2:	685b      	ldr	r3, [r3, #4]
 80a7ea4:	2b00      	cmp	r3, #0
 80a7ea6:	d00b      	beq.n	80a7ec0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80a7ea8:	687b      	ldr	r3, [r7, #4]
 80a7eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7eae:	685b      	ldr	r3, [r3, #4]
 80a7eb0:	687a      	ldr	r2, [r7, #4]
 80a7eb2:	7c12      	ldrb	r2, [r2, #16]
 80a7eb4:	f107 0108 	add.w	r1, r7, #8
 80a7eb8:	4610      	mov	r0, r2
 80a7eba:	4798      	blx	r3
 80a7ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80a7ebe:	e091      	b.n	80a7fe4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80a7ec0:	6839      	ldr	r1, [r7, #0]
 80a7ec2:	6878      	ldr	r0, [r7, #4]
 80a7ec4:	f000 facb 	bl	80a845e <USBD_CtlError>
            err++;
 80a7ec8:	7afb      	ldrb	r3, [r7, #11]
 80a7eca:	3301      	adds	r3, #1
 80a7ecc:	72fb      	strb	r3, [r7, #11]
          break;
 80a7ece:	e089      	b.n	80a7fe4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80a7ed0:	687b      	ldr	r3, [r7, #4]
 80a7ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7ed6:	689b      	ldr	r3, [r3, #8]
 80a7ed8:	2b00      	cmp	r3, #0
 80a7eda:	d00b      	beq.n	80a7ef4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80a7edc:	687b      	ldr	r3, [r7, #4]
 80a7ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7ee2:	689b      	ldr	r3, [r3, #8]
 80a7ee4:	687a      	ldr	r2, [r7, #4]
 80a7ee6:	7c12      	ldrb	r2, [r2, #16]
 80a7ee8:	f107 0108 	add.w	r1, r7, #8
 80a7eec:	4610      	mov	r0, r2
 80a7eee:	4798      	blx	r3
 80a7ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80a7ef2:	e077      	b.n	80a7fe4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80a7ef4:	6839      	ldr	r1, [r7, #0]
 80a7ef6:	6878      	ldr	r0, [r7, #4]
 80a7ef8:	f000 fab1 	bl	80a845e <USBD_CtlError>
            err++;
 80a7efc:	7afb      	ldrb	r3, [r7, #11]
 80a7efe:	3301      	adds	r3, #1
 80a7f00:	72fb      	strb	r3, [r7, #11]
          break;
 80a7f02:	e06f      	b.n	80a7fe4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80a7f04:	687b      	ldr	r3, [r7, #4]
 80a7f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7f0a:	68db      	ldr	r3, [r3, #12]
 80a7f0c:	2b00      	cmp	r3, #0
 80a7f0e:	d00b      	beq.n	80a7f28 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80a7f10:	687b      	ldr	r3, [r7, #4]
 80a7f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7f16:	68db      	ldr	r3, [r3, #12]
 80a7f18:	687a      	ldr	r2, [r7, #4]
 80a7f1a:	7c12      	ldrb	r2, [r2, #16]
 80a7f1c:	f107 0108 	add.w	r1, r7, #8
 80a7f20:	4610      	mov	r0, r2
 80a7f22:	4798      	blx	r3
 80a7f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80a7f26:	e05d      	b.n	80a7fe4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80a7f28:	6839      	ldr	r1, [r7, #0]
 80a7f2a:	6878      	ldr	r0, [r7, #4]
 80a7f2c:	f000 fa97 	bl	80a845e <USBD_CtlError>
            err++;
 80a7f30:	7afb      	ldrb	r3, [r7, #11]
 80a7f32:	3301      	adds	r3, #1
 80a7f34:	72fb      	strb	r3, [r7, #11]
          break;
 80a7f36:	e055      	b.n	80a7fe4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80a7f38:	687b      	ldr	r3, [r7, #4]
 80a7f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7f3e:	691b      	ldr	r3, [r3, #16]
 80a7f40:	2b00      	cmp	r3, #0
 80a7f42:	d00b      	beq.n	80a7f5c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80a7f44:	687b      	ldr	r3, [r7, #4]
 80a7f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7f4a:	691b      	ldr	r3, [r3, #16]
 80a7f4c:	687a      	ldr	r2, [r7, #4]
 80a7f4e:	7c12      	ldrb	r2, [r2, #16]
 80a7f50:	f107 0108 	add.w	r1, r7, #8
 80a7f54:	4610      	mov	r0, r2
 80a7f56:	4798      	blx	r3
 80a7f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80a7f5a:	e043      	b.n	80a7fe4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80a7f5c:	6839      	ldr	r1, [r7, #0]
 80a7f5e:	6878      	ldr	r0, [r7, #4]
 80a7f60:	f000 fa7d 	bl	80a845e <USBD_CtlError>
            err++;
 80a7f64:	7afb      	ldrb	r3, [r7, #11]
 80a7f66:	3301      	adds	r3, #1
 80a7f68:	72fb      	strb	r3, [r7, #11]
          break;
 80a7f6a:	e03b      	b.n	80a7fe4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80a7f6c:	687b      	ldr	r3, [r7, #4]
 80a7f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7f72:	695b      	ldr	r3, [r3, #20]
 80a7f74:	2b00      	cmp	r3, #0
 80a7f76:	d00b      	beq.n	80a7f90 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80a7f78:	687b      	ldr	r3, [r7, #4]
 80a7f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7f7e:	695b      	ldr	r3, [r3, #20]
 80a7f80:	687a      	ldr	r2, [r7, #4]
 80a7f82:	7c12      	ldrb	r2, [r2, #16]
 80a7f84:	f107 0108 	add.w	r1, r7, #8
 80a7f88:	4610      	mov	r0, r2
 80a7f8a:	4798      	blx	r3
 80a7f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80a7f8e:	e029      	b.n	80a7fe4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80a7f90:	6839      	ldr	r1, [r7, #0]
 80a7f92:	6878      	ldr	r0, [r7, #4]
 80a7f94:	f000 fa63 	bl	80a845e <USBD_CtlError>
            err++;
 80a7f98:	7afb      	ldrb	r3, [r7, #11]
 80a7f9a:	3301      	adds	r3, #1
 80a7f9c:	72fb      	strb	r3, [r7, #11]
          break;
 80a7f9e:	e021      	b.n	80a7fe4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80a7fa0:	687b      	ldr	r3, [r7, #4]
 80a7fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7fa6:	699b      	ldr	r3, [r3, #24]
 80a7fa8:	2b00      	cmp	r3, #0
 80a7faa:	d00b      	beq.n	80a7fc4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80a7fac:	687b      	ldr	r3, [r7, #4]
 80a7fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7fb2:	699b      	ldr	r3, [r3, #24]
 80a7fb4:	687a      	ldr	r2, [r7, #4]
 80a7fb6:	7c12      	ldrb	r2, [r2, #16]
 80a7fb8:	f107 0108 	add.w	r1, r7, #8
 80a7fbc:	4610      	mov	r0, r2
 80a7fbe:	4798      	blx	r3
 80a7fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80a7fc2:	e00f      	b.n	80a7fe4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80a7fc4:	6839      	ldr	r1, [r7, #0]
 80a7fc6:	6878      	ldr	r0, [r7, #4]
 80a7fc8:	f000 fa49 	bl	80a845e <USBD_CtlError>
            err++;
 80a7fcc:	7afb      	ldrb	r3, [r7, #11]
 80a7fce:	3301      	adds	r3, #1
 80a7fd0:	72fb      	strb	r3, [r7, #11]
          break;
 80a7fd2:	e007      	b.n	80a7fe4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80a7fd4:	6839      	ldr	r1, [r7, #0]
 80a7fd6:	6878      	ldr	r0, [r7, #4]
 80a7fd8:	f000 fa41 	bl	80a845e <USBD_CtlError>
          err++;
 80a7fdc:	7afb      	ldrb	r3, [r7, #11]
 80a7fde:	3301      	adds	r3, #1
 80a7fe0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80a7fe2:	bf00      	nop
      }
      break;
 80a7fe4:	e037      	b.n	80a8056 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80a7fe6:	687b      	ldr	r3, [r7, #4]
 80a7fe8:	7c1b      	ldrb	r3, [r3, #16]
 80a7fea:	2b00      	cmp	r3, #0
 80a7fec:	d109      	bne.n	80a8002 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80a7fee:	687b      	ldr	r3, [r7, #4]
 80a7ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80a7ff6:	f107 0208 	add.w	r2, r7, #8
 80a7ffa:	4610      	mov	r0, r2
 80a7ffc:	4798      	blx	r3
 80a7ffe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80a8000:	e029      	b.n	80a8056 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80a8002:	6839      	ldr	r1, [r7, #0]
 80a8004:	6878      	ldr	r0, [r7, #4]
 80a8006:	f000 fa2a 	bl	80a845e <USBD_CtlError>
        err++;
 80a800a:	7afb      	ldrb	r3, [r7, #11]
 80a800c:	3301      	adds	r3, #1
 80a800e:	72fb      	strb	r3, [r7, #11]
      break;
 80a8010:	e021      	b.n	80a8056 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80a8012:	687b      	ldr	r3, [r7, #4]
 80a8014:	7c1b      	ldrb	r3, [r3, #16]
 80a8016:	2b00      	cmp	r3, #0
 80a8018:	d10d      	bne.n	80a8036 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80a801a:	687b      	ldr	r3, [r7, #4]
 80a801c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a8020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a8022:	f107 0208 	add.w	r2, r7, #8
 80a8026:	4610      	mov	r0, r2
 80a8028:	4798      	blx	r3
 80a802a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80a802c:	68fb      	ldr	r3, [r7, #12]
 80a802e:	3301      	adds	r3, #1
 80a8030:	2207      	movs	r2, #7
 80a8032:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80a8034:	e00f      	b.n	80a8056 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80a8036:	6839      	ldr	r1, [r7, #0]
 80a8038:	6878      	ldr	r0, [r7, #4]
 80a803a:	f000 fa10 	bl	80a845e <USBD_CtlError>
        err++;
 80a803e:	7afb      	ldrb	r3, [r7, #11]
 80a8040:	3301      	adds	r3, #1
 80a8042:	72fb      	strb	r3, [r7, #11]
      break;
 80a8044:	e007      	b.n	80a8056 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80a8046:	6839      	ldr	r1, [r7, #0]
 80a8048:	6878      	ldr	r0, [r7, #4]
 80a804a:	f000 fa08 	bl	80a845e <USBD_CtlError>
      err++;
 80a804e:	7afb      	ldrb	r3, [r7, #11]
 80a8050:	3301      	adds	r3, #1
 80a8052:	72fb      	strb	r3, [r7, #11]
      break;
 80a8054:	bf00      	nop
  }

  if (err != 0U)
 80a8056:	7afb      	ldrb	r3, [r7, #11]
 80a8058:	2b00      	cmp	r3, #0
 80a805a:	d11e      	bne.n	80a809a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80a805c:	683b      	ldr	r3, [r7, #0]
 80a805e:	88db      	ldrh	r3, [r3, #6]
 80a8060:	2b00      	cmp	r3, #0
 80a8062:	d016      	beq.n	80a8092 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80a8064:	893b      	ldrh	r3, [r7, #8]
 80a8066:	2b00      	cmp	r3, #0
 80a8068:	d00e      	beq.n	80a8088 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80a806a:	683b      	ldr	r3, [r7, #0]
 80a806c:	88da      	ldrh	r2, [r3, #6]
 80a806e:	893b      	ldrh	r3, [r7, #8]
 80a8070:	4293      	cmp	r3, r2
 80a8072:	bf28      	it	cs
 80a8074:	4613      	movcs	r3, r2
 80a8076:	b29b      	uxth	r3, r3
 80a8078:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80a807a:	893b      	ldrh	r3, [r7, #8]
 80a807c:	461a      	mov	r2, r3
 80a807e:	68f9      	ldr	r1, [r7, #12]
 80a8080:	6878      	ldr	r0, [r7, #4]
 80a8082:	f000 fa69 	bl	80a8558 <USBD_CtlSendData>
 80a8086:	e009      	b.n	80a809c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80a8088:	6839      	ldr	r1, [r7, #0]
 80a808a:	6878      	ldr	r0, [r7, #4]
 80a808c:	f000 f9e7 	bl	80a845e <USBD_CtlError>
 80a8090:	e004      	b.n	80a809c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80a8092:	6878      	ldr	r0, [r7, #4]
 80a8094:	f000 faba 	bl	80a860c <USBD_CtlSendStatus>
 80a8098:	e000      	b.n	80a809c <USBD_GetDescriptor+0x320>
    return;
 80a809a:	bf00      	nop
  }
}
 80a809c:	3710      	adds	r7, #16
 80a809e:	46bd      	mov	sp, r7
 80a80a0:	bd80      	pop	{r7, pc}
 80a80a2:	bf00      	nop

080a80a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a80a4:	b580      	push	{r7, lr}
 80a80a6:	b084      	sub	sp, #16
 80a80a8:	af00      	add	r7, sp, #0
 80a80aa:	6078      	str	r0, [r7, #4]
 80a80ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80a80ae:	683b      	ldr	r3, [r7, #0]
 80a80b0:	889b      	ldrh	r3, [r3, #4]
 80a80b2:	2b00      	cmp	r3, #0
 80a80b4:	d131      	bne.n	80a811a <USBD_SetAddress+0x76>
 80a80b6:	683b      	ldr	r3, [r7, #0]
 80a80b8:	88db      	ldrh	r3, [r3, #6]
 80a80ba:	2b00      	cmp	r3, #0
 80a80bc:	d12d      	bne.n	80a811a <USBD_SetAddress+0x76>
 80a80be:	683b      	ldr	r3, [r7, #0]
 80a80c0:	885b      	ldrh	r3, [r3, #2]
 80a80c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80a80c4:	d829      	bhi.n	80a811a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80a80c6:	683b      	ldr	r3, [r7, #0]
 80a80c8:	885b      	ldrh	r3, [r3, #2]
 80a80ca:	b2db      	uxtb	r3, r3
 80a80cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80a80d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a80d2:	687b      	ldr	r3, [r7, #4]
 80a80d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a80d8:	b2db      	uxtb	r3, r3
 80a80da:	2b03      	cmp	r3, #3
 80a80dc:	d104      	bne.n	80a80e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80a80de:	6839      	ldr	r1, [r7, #0]
 80a80e0:	6878      	ldr	r0, [r7, #4]
 80a80e2:	f000 f9bc 	bl	80a845e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a80e6:	e01d      	b.n	80a8124 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80a80e8:	687b      	ldr	r3, [r7, #4]
 80a80ea:	7bfa      	ldrb	r2, [r7, #15]
 80a80ec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80a80f0:	7bfb      	ldrb	r3, [r7, #15]
 80a80f2:	4619      	mov	r1, r3
 80a80f4:	6878      	ldr	r0, [r7, #4]
 80a80f6:	f000 ffc5 	bl	80a9084 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80a80fa:	6878      	ldr	r0, [r7, #4]
 80a80fc:	f000 fa86 	bl	80a860c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80a8100:	7bfb      	ldrb	r3, [r7, #15]
 80a8102:	2b00      	cmp	r3, #0
 80a8104:	d004      	beq.n	80a8110 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80a8106:	687b      	ldr	r3, [r7, #4]
 80a8108:	2202      	movs	r2, #2
 80a810a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a810e:	e009      	b.n	80a8124 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80a8110:	687b      	ldr	r3, [r7, #4]
 80a8112:	2201      	movs	r2, #1
 80a8114:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a8118:	e004      	b.n	80a8124 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80a811a:	6839      	ldr	r1, [r7, #0]
 80a811c:	6878      	ldr	r0, [r7, #4]
 80a811e:	f000 f99e 	bl	80a845e <USBD_CtlError>
  }
}
 80a8122:	bf00      	nop
 80a8124:	bf00      	nop
 80a8126:	3710      	adds	r7, #16
 80a8128:	46bd      	mov	sp, r7
 80a812a:	bd80      	pop	{r7, pc}

080a812c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a812c:	b580      	push	{r7, lr}
 80a812e:	b084      	sub	sp, #16
 80a8130:	af00      	add	r7, sp, #0
 80a8132:	6078      	str	r0, [r7, #4]
 80a8134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80a8136:	2300      	movs	r3, #0
 80a8138:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80a813a:	683b      	ldr	r3, [r7, #0]
 80a813c:	885b      	ldrh	r3, [r3, #2]
 80a813e:	b2da      	uxtb	r2, r3
 80a8140:	4b4e      	ldr	r3, [pc, #312]	@ (80a827c <USBD_SetConfig+0x150>)
 80a8142:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80a8144:	4b4d      	ldr	r3, [pc, #308]	@ (80a827c <USBD_SetConfig+0x150>)
 80a8146:	781b      	ldrb	r3, [r3, #0]
 80a8148:	2b01      	cmp	r3, #1
 80a814a:	d905      	bls.n	80a8158 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80a814c:	6839      	ldr	r1, [r7, #0]
 80a814e:	6878      	ldr	r0, [r7, #4]
 80a8150:	f000 f985 	bl	80a845e <USBD_CtlError>
    return USBD_FAIL;
 80a8154:	2303      	movs	r3, #3
 80a8156:	e08c      	b.n	80a8272 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80a8158:	687b      	ldr	r3, [r7, #4]
 80a815a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a815e:	b2db      	uxtb	r3, r3
 80a8160:	2b02      	cmp	r3, #2
 80a8162:	d002      	beq.n	80a816a <USBD_SetConfig+0x3e>
 80a8164:	2b03      	cmp	r3, #3
 80a8166:	d029      	beq.n	80a81bc <USBD_SetConfig+0x90>
 80a8168:	e075      	b.n	80a8256 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80a816a:	4b44      	ldr	r3, [pc, #272]	@ (80a827c <USBD_SetConfig+0x150>)
 80a816c:	781b      	ldrb	r3, [r3, #0]
 80a816e:	2b00      	cmp	r3, #0
 80a8170:	d020      	beq.n	80a81b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80a8172:	4b42      	ldr	r3, [pc, #264]	@ (80a827c <USBD_SetConfig+0x150>)
 80a8174:	781b      	ldrb	r3, [r3, #0]
 80a8176:	461a      	mov	r2, r3
 80a8178:	687b      	ldr	r3, [r7, #4]
 80a817a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80a817c:	4b3f      	ldr	r3, [pc, #252]	@ (80a827c <USBD_SetConfig+0x150>)
 80a817e:	781b      	ldrb	r3, [r3, #0]
 80a8180:	4619      	mov	r1, r3
 80a8182:	6878      	ldr	r0, [r7, #4]
 80a8184:	f7fe ffb9 	bl	80a70fa <USBD_SetClassConfig>
 80a8188:	4603      	mov	r3, r0
 80a818a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80a818c:	7bfb      	ldrb	r3, [r7, #15]
 80a818e:	2b00      	cmp	r3, #0
 80a8190:	d008      	beq.n	80a81a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80a8192:	6839      	ldr	r1, [r7, #0]
 80a8194:	6878      	ldr	r0, [r7, #4]
 80a8196:	f000 f962 	bl	80a845e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80a819a:	687b      	ldr	r3, [r7, #4]
 80a819c:	2202      	movs	r2, #2
 80a819e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80a81a2:	e065      	b.n	80a8270 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80a81a4:	6878      	ldr	r0, [r7, #4]
 80a81a6:	f000 fa31 	bl	80a860c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80a81aa:	687b      	ldr	r3, [r7, #4]
 80a81ac:	2203      	movs	r2, #3
 80a81ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80a81b2:	e05d      	b.n	80a8270 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80a81b4:	6878      	ldr	r0, [r7, #4]
 80a81b6:	f000 fa29 	bl	80a860c <USBD_CtlSendStatus>
      break;
 80a81ba:	e059      	b.n	80a8270 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80a81bc:	4b2f      	ldr	r3, [pc, #188]	@ (80a827c <USBD_SetConfig+0x150>)
 80a81be:	781b      	ldrb	r3, [r3, #0]
 80a81c0:	2b00      	cmp	r3, #0
 80a81c2:	d112      	bne.n	80a81ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80a81c4:	687b      	ldr	r3, [r7, #4]
 80a81c6:	2202      	movs	r2, #2
 80a81c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80a81cc:	4b2b      	ldr	r3, [pc, #172]	@ (80a827c <USBD_SetConfig+0x150>)
 80a81ce:	781b      	ldrb	r3, [r3, #0]
 80a81d0:	461a      	mov	r2, r3
 80a81d2:	687b      	ldr	r3, [r7, #4]
 80a81d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80a81d6:	4b29      	ldr	r3, [pc, #164]	@ (80a827c <USBD_SetConfig+0x150>)
 80a81d8:	781b      	ldrb	r3, [r3, #0]
 80a81da:	4619      	mov	r1, r3
 80a81dc:	6878      	ldr	r0, [r7, #4]
 80a81de:	f7fe ffa8 	bl	80a7132 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80a81e2:	6878      	ldr	r0, [r7, #4]
 80a81e4:	f000 fa12 	bl	80a860c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80a81e8:	e042      	b.n	80a8270 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80a81ea:	4b24      	ldr	r3, [pc, #144]	@ (80a827c <USBD_SetConfig+0x150>)
 80a81ec:	781b      	ldrb	r3, [r3, #0]
 80a81ee:	461a      	mov	r2, r3
 80a81f0:	687b      	ldr	r3, [r7, #4]
 80a81f2:	685b      	ldr	r3, [r3, #4]
 80a81f4:	429a      	cmp	r2, r3
 80a81f6:	d02a      	beq.n	80a824e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80a81f8:	687b      	ldr	r3, [r7, #4]
 80a81fa:	685b      	ldr	r3, [r3, #4]
 80a81fc:	b2db      	uxtb	r3, r3
 80a81fe:	4619      	mov	r1, r3
 80a8200:	6878      	ldr	r0, [r7, #4]
 80a8202:	f7fe ff96 	bl	80a7132 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80a8206:	4b1d      	ldr	r3, [pc, #116]	@ (80a827c <USBD_SetConfig+0x150>)
 80a8208:	781b      	ldrb	r3, [r3, #0]
 80a820a:	461a      	mov	r2, r3
 80a820c:	687b      	ldr	r3, [r7, #4]
 80a820e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80a8210:	4b1a      	ldr	r3, [pc, #104]	@ (80a827c <USBD_SetConfig+0x150>)
 80a8212:	781b      	ldrb	r3, [r3, #0]
 80a8214:	4619      	mov	r1, r3
 80a8216:	6878      	ldr	r0, [r7, #4]
 80a8218:	f7fe ff6f 	bl	80a70fa <USBD_SetClassConfig>
 80a821c:	4603      	mov	r3, r0
 80a821e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80a8220:	7bfb      	ldrb	r3, [r7, #15]
 80a8222:	2b00      	cmp	r3, #0
 80a8224:	d00f      	beq.n	80a8246 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80a8226:	6839      	ldr	r1, [r7, #0]
 80a8228:	6878      	ldr	r0, [r7, #4]
 80a822a:	f000 f918 	bl	80a845e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80a822e:	687b      	ldr	r3, [r7, #4]
 80a8230:	685b      	ldr	r3, [r3, #4]
 80a8232:	b2db      	uxtb	r3, r3
 80a8234:	4619      	mov	r1, r3
 80a8236:	6878      	ldr	r0, [r7, #4]
 80a8238:	f7fe ff7b 	bl	80a7132 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80a823c:	687b      	ldr	r3, [r7, #4]
 80a823e:	2202      	movs	r2, #2
 80a8240:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80a8244:	e014      	b.n	80a8270 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80a8246:	6878      	ldr	r0, [r7, #4]
 80a8248:	f000 f9e0 	bl	80a860c <USBD_CtlSendStatus>
      break;
 80a824c:	e010      	b.n	80a8270 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80a824e:	6878      	ldr	r0, [r7, #4]
 80a8250:	f000 f9dc 	bl	80a860c <USBD_CtlSendStatus>
      break;
 80a8254:	e00c      	b.n	80a8270 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80a8256:	6839      	ldr	r1, [r7, #0]
 80a8258:	6878      	ldr	r0, [r7, #4]
 80a825a:	f000 f900 	bl	80a845e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80a825e:	4b07      	ldr	r3, [pc, #28]	@ (80a827c <USBD_SetConfig+0x150>)
 80a8260:	781b      	ldrb	r3, [r3, #0]
 80a8262:	4619      	mov	r1, r3
 80a8264:	6878      	ldr	r0, [r7, #4]
 80a8266:	f7fe ff64 	bl	80a7132 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80a826a:	2303      	movs	r3, #3
 80a826c:	73fb      	strb	r3, [r7, #15]
      break;
 80a826e:	bf00      	nop
  }

  return ret;
 80a8270:	7bfb      	ldrb	r3, [r7, #15]
}
 80a8272:	4618      	mov	r0, r3
 80a8274:	3710      	adds	r7, #16
 80a8276:	46bd      	mov	sp, r7
 80a8278:	bd80      	pop	{r7, pc}
 80a827a:	bf00      	nop
 80a827c:	24000184 	.word	0x24000184

080a8280 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a8280:	b580      	push	{r7, lr}
 80a8282:	b082      	sub	sp, #8
 80a8284:	af00      	add	r7, sp, #0
 80a8286:	6078      	str	r0, [r7, #4]
 80a8288:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80a828a:	683b      	ldr	r3, [r7, #0]
 80a828c:	88db      	ldrh	r3, [r3, #6]
 80a828e:	2b01      	cmp	r3, #1
 80a8290:	d004      	beq.n	80a829c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80a8292:	6839      	ldr	r1, [r7, #0]
 80a8294:	6878      	ldr	r0, [r7, #4]
 80a8296:	f000 f8e2 	bl	80a845e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80a829a:	e023      	b.n	80a82e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80a829c:	687b      	ldr	r3, [r7, #4]
 80a829e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a82a2:	b2db      	uxtb	r3, r3
 80a82a4:	2b02      	cmp	r3, #2
 80a82a6:	dc02      	bgt.n	80a82ae <USBD_GetConfig+0x2e>
 80a82a8:	2b00      	cmp	r3, #0
 80a82aa:	dc03      	bgt.n	80a82b4 <USBD_GetConfig+0x34>
 80a82ac:	e015      	b.n	80a82da <USBD_GetConfig+0x5a>
 80a82ae:	2b03      	cmp	r3, #3
 80a82b0:	d00b      	beq.n	80a82ca <USBD_GetConfig+0x4a>
 80a82b2:	e012      	b.n	80a82da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80a82b4:	687b      	ldr	r3, [r7, #4]
 80a82b6:	2200      	movs	r2, #0
 80a82b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80a82ba:	687b      	ldr	r3, [r7, #4]
 80a82bc:	3308      	adds	r3, #8
 80a82be:	2201      	movs	r2, #1
 80a82c0:	4619      	mov	r1, r3
 80a82c2:	6878      	ldr	r0, [r7, #4]
 80a82c4:	f000 f948 	bl	80a8558 <USBD_CtlSendData>
        break;
 80a82c8:	e00c      	b.n	80a82e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80a82ca:	687b      	ldr	r3, [r7, #4]
 80a82cc:	3304      	adds	r3, #4
 80a82ce:	2201      	movs	r2, #1
 80a82d0:	4619      	mov	r1, r3
 80a82d2:	6878      	ldr	r0, [r7, #4]
 80a82d4:	f000 f940 	bl	80a8558 <USBD_CtlSendData>
        break;
 80a82d8:	e004      	b.n	80a82e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80a82da:	6839      	ldr	r1, [r7, #0]
 80a82dc:	6878      	ldr	r0, [r7, #4]
 80a82de:	f000 f8be 	bl	80a845e <USBD_CtlError>
        break;
 80a82e2:	bf00      	nop
}
 80a82e4:	bf00      	nop
 80a82e6:	3708      	adds	r7, #8
 80a82e8:	46bd      	mov	sp, r7
 80a82ea:	bd80      	pop	{r7, pc}

080a82ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a82ec:	b580      	push	{r7, lr}
 80a82ee:	b082      	sub	sp, #8
 80a82f0:	af00      	add	r7, sp, #0
 80a82f2:	6078      	str	r0, [r7, #4]
 80a82f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80a82f6:	687b      	ldr	r3, [r7, #4]
 80a82f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a82fc:	b2db      	uxtb	r3, r3
 80a82fe:	3b01      	subs	r3, #1
 80a8300:	2b02      	cmp	r3, #2
 80a8302:	d81e      	bhi.n	80a8342 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80a8304:	683b      	ldr	r3, [r7, #0]
 80a8306:	88db      	ldrh	r3, [r3, #6]
 80a8308:	2b02      	cmp	r3, #2
 80a830a:	d004      	beq.n	80a8316 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80a830c:	6839      	ldr	r1, [r7, #0]
 80a830e:	6878      	ldr	r0, [r7, #4]
 80a8310:	f000 f8a5 	bl	80a845e <USBD_CtlError>
        break;
 80a8314:	e01a      	b.n	80a834c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80a8316:	687b      	ldr	r3, [r7, #4]
 80a8318:	2201      	movs	r2, #1
 80a831a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80a831c:	687b      	ldr	r3, [r7, #4]
 80a831e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80a8322:	2b00      	cmp	r3, #0
 80a8324:	d005      	beq.n	80a8332 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80a8326:	687b      	ldr	r3, [r7, #4]
 80a8328:	68db      	ldr	r3, [r3, #12]
 80a832a:	f043 0202 	orr.w	r2, r3, #2
 80a832e:	687b      	ldr	r3, [r7, #4]
 80a8330:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80a8332:	687b      	ldr	r3, [r7, #4]
 80a8334:	330c      	adds	r3, #12
 80a8336:	2202      	movs	r2, #2
 80a8338:	4619      	mov	r1, r3
 80a833a:	6878      	ldr	r0, [r7, #4]
 80a833c:	f000 f90c 	bl	80a8558 <USBD_CtlSendData>
      break;
 80a8340:	e004      	b.n	80a834c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80a8342:	6839      	ldr	r1, [r7, #0]
 80a8344:	6878      	ldr	r0, [r7, #4]
 80a8346:	f000 f88a 	bl	80a845e <USBD_CtlError>
      break;
 80a834a:	bf00      	nop
  }
}
 80a834c:	bf00      	nop
 80a834e:	3708      	adds	r7, #8
 80a8350:	46bd      	mov	sp, r7
 80a8352:	bd80      	pop	{r7, pc}

080a8354 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a8354:	b580      	push	{r7, lr}
 80a8356:	b082      	sub	sp, #8
 80a8358:	af00      	add	r7, sp, #0
 80a835a:	6078      	str	r0, [r7, #4]
 80a835c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80a835e:	683b      	ldr	r3, [r7, #0]
 80a8360:	885b      	ldrh	r3, [r3, #2]
 80a8362:	2b01      	cmp	r3, #1
 80a8364:	d107      	bne.n	80a8376 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80a8366:	687b      	ldr	r3, [r7, #4]
 80a8368:	2201      	movs	r2, #1
 80a836a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80a836e:	6878      	ldr	r0, [r7, #4]
 80a8370:	f000 f94c 	bl	80a860c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80a8374:	e013      	b.n	80a839e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80a8376:	683b      	ldr	r3, [r7, #0]
 80a8378:	885b      	ldrh	r3, [r3, #2]
 80a837a:	2b02      	cmp	r3, #2
 80a837c:	d10b      	bne.n	80a8396 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80a837e:	683b      	ldr	r3, [r7, #0]
 80a8380:	889b      	ldrh	r3, [r3, #4]
 80a8382:	0a1b      	lsrs	r3, r3, #8
 80a8384:	b29b      	uxth	r3, r3
 80a8386:	b2da      	uxtb	r2, r3
 80a8388:	687b      	ldr	r3, [r7, #4]
 80a838a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80a838e:	6878      	ldr	r0, [r7, #4]
 80a8390:	f000 f93c 	bl	80a860c <USBD_CtlSendStatus>
}
 80a8394:	e003      	b.n	80a839e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80a8396:	6839      	ldr	r1, [r7, #0]
 80a8398:	6878      	ldr	r0, [r7, #4]
 80a839a:	f000 f860 	bl	80a845e <USBD_CtlError>
}
 80a839e:	bf00      	nop
 80a83a0:	3708      	adds	r7, #8
 80a83a2:	46bd      	mov	sp, r7
 80a83a4:	bd80      	pop	{r7, pc}

080a83a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a83a6:	b580      	push	{r7, lr}
 80a83a8:	b082      	sub	sp, #8
 80a83aa:	af00      	add	r7, sp, #0
 80a83ac:	6078      	str	r0, [r7, #4]
 80a83ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80a83b0:	687b      	ldr	r3, [r7, #4]
 80a83b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a83b6:	b2db      	uxtb	r3, r3
 80a83b8:	3b01      	subs	r3, #1
 80a83ba:	2b02      	cmp	r3, #2
 80a83bc:	d80b      	bhi.n	80a83d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80a83be:	683b      	ldr	r3, [r7, #0]
 80a83c0:	885b      	ldrh	r3, [r3, #2]
 80a83c2:	2b01      	cmp	r3, #1
 80a83c4:	d10c      	bne.n	80a83e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80a83c6:	687b      	ldr	r3, [r7, #4]
 80a83c8:	2200      	movs	r2, #0
 80a83ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80a83ce:	6878      	ldr	r0, [r7, #4]
 80a83d0:	f000 f91c 	bl	80a860c <USBD_CtlSendStatus>
      }
      break;
 80a83d4:	e004      	b.n	80a83e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80a83d6:	6839      	ldr	r1, [r7, #0]
 80a83d8:	6878      	ldr	r0, [r7, #4]
 80a83da:	f000 f840 	bl	80a845e <USBD_CtlError>
      break;
 80a83de:	e000      	b.n	80a83e2 <USBD_ClrFeature+0x3c>
      break;
 80a83e0:	bf00      	nop
  }
}
 80a83e2:	bf00      	nop
 80a83e4:	3708      	adds	r7, #8
 80a83e6:	46bd      	mov	sp, r7
 80a83e8:	bd80      	pop	{r7, pc}

080a83ea <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80a83ea:	b580      	push	{r7, lr}
 80a83ec:	b084      	sub	sp, #16
 80a83ee:	af00      	add	r7, sp, #0
 80a83f0:	6078      	str	r0, [r7, #4]
 80a83f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80a83f4:	683b      	ldr	r3, [r7, #0]
 80a83f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80a83f8:	68fb      	ldr	r3, [r7, #12]
 80a83fa:	781a      	ldrb	r2, [r3, #0]
 80a83fc:	687b      	ldr	r3, [r7, #4]
 80a83fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80a8400:	68fb      	ldr	r3, [r7, #12]
 80a8402:	3301      	adds	r3, #1
 80a8404:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80a8406:	68fb      	ldr	r3, [r7, #12]
 80a8408:	781a      	ldrb	r2, [r3, #0]
 80a840a:	687b      	ldr	r3, [r7, #4]
 80a840c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80a840e:	68fb      	ldr	r3, [r7, #12]
 80a8410:	3301      	adds	r3, #1
 80a8412:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80a8414:	68f8      	ldr	r0, [r7, #12]
 80a8416:	f7ff fa16 	bl	80a7846 <SWAPBYTE>
 80a841a:	4603      	mov	r3, r0
 80a841c:	461a      	mov	r2, r3
 80a841e:	687b      	ldr	r3, [r7, #4]
 80a8420:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80a8422:	68fb      	ldr	r3, [r7, #12]
 80a8424:	3301      	adds	r3, #1
 80a8426:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80a8428:	68fb      	ldr	r3, [r7, #12]
 80a842a:	3301      	adds	r3, #1
 80a842c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80a842e:	68f8      	ldr	r0, [r7, #12]
 80a8430:	f7ff fa09 	bl	80a7846 <SWAPBYTE>
 80a8434:	4603      	mov	r3, r0
 80a8436:	461a      	mov	r2, r3
 80a8438:	687b      	ldr	r3, [r7, #4]
 80a843a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80a843c:	68fb      	ldr	r3, [r7, #12]
 80a843e:	3301      	adds	r3, #1
 80a8440:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80a8442:	68fb      	ldr	r3, [r7, #12]
 80a8444:	3301      	adds	r3, #1
 80a8446:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80a8448:	68f8      	ldr	r0, [r7, #12]
 80a844a:	f7ff f9fc 	bl	80a7846 <SWAPBYTE>
 80a844e:	4603      	mov	r3, r0
 80a8450:	461a      	mov	r2, r3
 80a8452:	687b      	ldr	r3, [r7, #4]
 80a8454:	80da      	strh	r2, [r3, #6]
}
 80a8456:	bf00      	nop
 80a8458:	3710      	adds	r7, #16
 80a845a:	46bd      	mov	sp, r7
 80a845c:	bd80      	pop	{r7, pc}

080a845e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a845e:	b580      	push	{r7, lr}
 80a8460:	b082      	sub	sp, #8
 80a8462:	af00      	add	r7, sp, #0
 80a8464:	6078      	str	r0, [r7, #4]
 80a8466:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80a8468:	2180      	movs	r1, #128	@ 0x80
 80a846a:	6878      	ldr	r0, [r7, #4]
 80a846c:	f000 fda0 	bl	80a8fb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80a8470:	2100      	movs	r1, #0
 80a8472:	6878      	ldr	r0, [r7, #4]
 80a8474:	f000 fd9c 	bl	80a8fb0 <USBD_LL_StallEP>
}
 80a8478:	bf00      	nop
 80a847a:	3708      	adds	r7, #8
 80a847c:	46bd      	mov	sp, r7
 80a847e:	bd80      	pop	{r7, pc}

080a8480 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80a8480:	b580      	push	{r7, lr}
 80a8482:	b086      	sub	sp, #24
 80a8484:	af00      	add	r7, sp, #0
 80a8486:	60f8      	str	r0, [r7, #12]
 80a8488:	60b9      	str	r1, [r7, #8]
 80a848a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80a848c:	2300      	movs	r3, #0
 80a848e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80a8490:	68fb      	ldr	r3, [r7, #12]
 80a8492:	2b00      	cmp	r3, #0
 80a8494:	d042      	beq.n	80a851c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80a8496:	68fb      	ldr	r3, [r7, #12]
 80a8498:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80a849a:	6938      	ldr	r0, [r7, #16]
 80a849c:	f000 f842 	bl	80a8524 <USBD_GetLen>
 80a84a0:	4603      	mov	r3, r0
 80a84a2:	3301      	adds	r3, #1
 80a84a4:	005b      	lsls	r3, r3, #1
 80a84a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80a84aa:	d808      	bhi.n	80a84be <USBD_GetString+0x3e>
 80a84ac:	6938      	ldr	r0, [r7, #16]
 80a84ae:	f000 f839 	bl	80a8524 <USBD_GetLen>
 80a84b2:	4603      	mov	r3, r0
 80a84b4:	3301      	adds	r3, #1
 80a84b6:	b29b      	uxth	r3, r3
 80a84b8:	005b      	lsls	r3, r3, #1
 80a84ba:	b29a      	uxth	r2, r3
 80a84bc:	e001      	b.n	80a84c2 <USBD_GetString+0x42>
 80a84be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80a84c2:	687b      	ldr	r3, [r7, #4]
 80a84c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80a84c6:	7dfb      	ldrb	r3, [r7, #23]
 80a84c8:	68ba      	ldr	r2, [r7, #8]
 80a84ca:	4413      	add	r3, r2
 80a84cc:	687a      	ldr	r2, [r7, #4]
 80a84ce:	7812      	ldrb	r2, [r2, #0]
 80a84d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80a84d2:	7dfb      	ldrb	r3, [r7, #23]
 80a84d4:	3301      	adds	r3, #1
 80a84d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80a84d8:	7dfb      	ldrb	r3, [r7, #23]
 80a84da:	68ba      	ldr	r2, [r7, #8]
 80a84dc:	4413      	add	r3, r2
 80a84de:	2203      	movs	r2, #3
 80a84e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80a84e2:	7dfb      	ldrb	r3, [r7, #23]
 80a84e4:	3301      	adds	r3, #1
 80a84e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80a84e8:	e013      	b.n	80a8512 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80a84ea:	7dfb      	ldrb	r3, [r7, #23]
 80a84ec:	68ba      	ldr	r2, [r7, #8]
 80a84ee:	4413      	add	r3, r2
 80a84f0:	693a      	ldr	r2, [r7, #16]
 80a84f2:	7812      	ldrb	r2, [r2, #0]
 80a84f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80a84f6:	693b      	ldr	r3, [r7, #16]
 80a84f8:	3301      	adds	r3, #1
 80a84fa:	613b      	str	r3, [r7, #16]
    idx++;
 80a84fc:	7dfb      	ldrb	r3, [r7, #23]
 80a84fe:	3301      	adds	r3, #1
 80a8500:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80a8502:	7dfb      	ldrb	r3, [r7, #23]
 80a8504:	68ba      	ldr	r2, [r7, #8]
 80a8506:	4413      	add	r3, r2
 80a8508:	2200      	movs	r2, #0
 80a850a:	701a      	strb	r2, [r3, #0]
    idx++;
 80a850c:	7dfb      	ldrb	r3, [r7, #23]
 80a850e:	3301      	adds	r3, #1
 80a8510:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80a8512:	693b      	ldr	r3, [r7, #16]
 80a8514:	781b      	ldrb	r3, [r3, #0]
 80a8516:	2b00      	cmp	r3, #0
 80a8518:	d1e7      	bne.n	80a84ea <USBD_GetString+0x6a>
 80a851a:	e000      	b.n	80a851e <USBD_GetString+0x9e>
    return;
 80a851c:	bf00      	nop
  }
}
 80a851e:	3718      	adds	r7, #24
 80a8520:	46bd      	mov	sp, r7
 80a8522:	bd80      	pop	{r7, pc}

080a8524 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80a8524:	b480      	push	{r7}
 80a8526:	b085      	sub	sp, #20
 80a8528:	af00      	add	r7, sp, #0
 80a852a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80a852c:	2300      	movs	r3, #0
 80a852e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80a8530:	687b      	ldr	r3, [r7, #4]
 80a8532:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80a8534:	e005      	b.n	80a8542 <USBD_GetLen+0x1e>
  {
    len++;
 80a8536:	7bfb      	ldrb	r3, [r7, #15]
 80a8538:	3301      	adds	r3, #1
 80a853a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80a853c:	68bb      	ldr	r3, [r7, #8]
 80a853e:	3301      	adds	r3, #1
 80a8540:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80a8542:	68bb      	ldr	r3, [r7, #8]
 80a8544:	781b      	ldrb	r3, [r3, #0]
 80a8546:	2b00      	cmp	r3, #0
 80a8548:	d1f5      	bne.n	80a8536 <USBD_GetLen+0x12>
  }

  return len;
 80a854a:	7bfb      	ldrb	r3, [r7, #15]
}
 80a854c:	4618      	mov	r0, r3
 80a854e:	3714      	adds	r7, #20
 80a8550:	46bd      	mov	sp, r7
 80a8552:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a8556:	4770      	bx	lr

080a8558 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80a8558:	b580      	push	{r7, lr}
 80a855a:	b084      	sub	sp, #16
 80a855c:	af00      	add	r7, sp, #0
 80a855e:	60f8      	str	r0, [r7, #12]
 80a8560:	60b9      	str	r1, [r7, #8]
 80a8562:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80a8564:	68fb      	ldr	r3, [r7, #12]
 80a8566:	2202      	movs	r2, #2
 80a8568:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80a856c:	68fb      	ldr	r3, [r7, #12]
 80a856e:	687a      	ldr	r2, [r7, #4]
 80a8570:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80a8572:	68fb      	ldr	r3, [r7, #12]
 80a8574:	687a      	ldr	r2, [r7, #4]
 80a8576:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80a8578:	687b      	ldr	r3, [r7, #4]
 80a857a:	68ba      	ldr	r2, [r7, #8]
 80a857c:	2100      	movs	r1, #0
 80a857e:	68f8      	ldr	r0, [r7, #12]
 80a8580:	f000 fd9f 	bl	80a90c2 <USBD_LL_Transmit>

  return USBD_OK;
 80a8584:	2300      	movs	r3, #0
}
 80a8586:	4618      	mov	r0, r3
 80a8588:	3710      	adds	r7, #16
 80a858a:	46bd      	mov	sp, r7
 80a858c:	bd80      	pop	{r7, pc}

080a858e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80a858e:	b580      	push	{r7, lr}
 80a8590:	b084      	sub	sp, #16
 80a8592:	af00      	add	r7, sp, #0
 80a8594:	60f8      	str	r0, [r7, #12]
 80a8596:	60b9      	str	r1, [r7, #8]
 80a8598:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80a859a:	687b      	ldr	r3, [r7, #4]
 80a859c:	68ba      	ldr	r2, [r7, #8]
 80a859e:	2100      	movs	r1, #0
 80a85a0:	68f8      	ldr	r0, [r7, #12]
 80a85a2:	f000 fd8e 	bl	80a90c2 <USBD_LL_Transmit>

  return USBD_OK;
 80a85a6:	2300      	movs	r3, #0
}
 80a85a8:	4618      	mov	r0, r3
 80a85aa:	3710      	adds	r7, #16
 80a85ac:	46bd      	mov	sp, r7
 80a85ae:	bd80      	pop	{r7, pc}

080a85b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80a85b0:	b580      	push	{r7, lr}
 80a85b2:	b084      	sub	sp, #16
 80a85b4:	af00      	add	r7, sp, #0
 80a85b6:	60f8      	str	r0, [r7, #12]
 80a85b8:	60b9      	str	r1, [r7, #8]
 80a85ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80a85bc:	68fb      	ldr	r3, [r7, #12]
 80a85be:	2203      	movs	r2, #3
 80a85c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80a85c4:	68fb      	ldr	r3, [r7, #12]
 80a85c6:	687a      	ldr	r2, [r7, #4]
 80a85c8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80a85cc:	68fb      	ldr	r3, [r7, #12]
 80a85ce:	687a      	ldr	r2, [r7, #4]
 80a85d0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80a85d4:	687b      	ldr	r3, [r7, #4]
 80a85d6:	68ba      	ldr	r2, [r7, #8]
 80a85d8:	2100      	movs	r1, #0
 80a85da:	68f8      	ldr	r0, [r7, #12]
 80a85dc:	f000 fd92 	bl	80a9104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80a85e0:	2300      	movs	r3, #0
}
 80a85e2:	4618      	mov	r0, r3
 80a85e4:	3710      	adds	r7, #16
 80a85e6:	46bd      	mov	sp, r7
 80a85e8:	bd80      	pop	{r7, pc}

080a85ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80a85ea:	b580      	push	{r7, lr}
 80a85ec:	b084      	sub	sp, #16
 80a85ee:	af00      	add	r7, sp, #0
 80a85f0:	60f8      	str	r0, [r7, #12]
 80a85f2:	60b9      	str	r1, [r7, #8]
 80a85f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80a85f6:	687b      	ldr	r3, [r7, #4]
 80a85f8:	68ba      	ldr	r2, [r7, #8]
 80a85fa:	2100      	movs	r1, #0
 80a85fc:	68f8      	ldr	r0, [r7, #12]
 80a85fe:	f000 fd81 	bl	80a9104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80a8602:	2300      	movs	r3, #0
}
 80a8604:	4618      	mov	r0, r3
 80a8606:	3710      	adds	r7, #16
 80a8608:	46bd      	mov	sp, r7
 80a860a:	bd80      	pop	{r7, pc}

080a860c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80a860c:	b580      	push	{r7, lr}
 80a860e:	b082      	sub	sp, #8
 80a8610:	af00      	add	r7, sp, #0
 80a8612:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80a8614:	687b      	ldr	r3, [r7, #4]
 80a8616:	2204      	movs	r2, #4
 80a8618:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80a861c:	2300      	movs	r3, #0
 80a861e:	2200      	movs	r2, #0
 80a8620:	2100      	movs	r1, #0
 80a8622:	6878      	ldr	r0, [r7, #4]
 80a8624:	f000 fd4d 	bl	80a90c2 <USBD_LL_Transmit>

  return USBD_OK;
 80a8628:	2300      	movs	r3, #0
}
 80a862a:	4618      	mov	r0, r3
 80a862c:	3708      	adds	r7, #8
 80a862e:	46bd      	mov	sp, r7
 80a8630:	bd80      	pop	{r7, pc}

080a8632 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80a8632:	b580      	push	{r7, lr}
 80a8634:	b082      	sub	sp, #8
 80a8636:	af00      	add	r7, sp, #0
 80a8638:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80a863a:	687b      	ldr	r3, [r7, #4]
 80a863c:	2205      	movs	r2, #5
 80a863e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80a8642:	2300      	movs	r3, #0
 80a8644:	2200      	movs	r2, #0
 80a8646:	2100      	movs	r1, #0
 80a8648:	6878      	ldr	r0, [r7, #4]
 80a864a:	f000 fd5b 	bl	80a9104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80a864e:	2300      	movs	r3, #0
}
 80a8650:	4618      	mov	r0, r3
 80a8652:	3708      	adds	r7, #8
 80a8654:	46bd      	mov	sp, r7
 80a8656:	bd80      	pop	{r7, pc}

080a8658 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80a8658:	b580      	push	{r7, lr}
 80a865a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80a865c:	2201      	movs	r2, #1
 80a865e:	4913      	ldr	r1, [pc, #76]	@ (80a86ac <MX_USB_DEVICE_Init+0x54>)
 80a8660:	4813      	ldr	r0, [pc, #76]	@ (80a86b0 <MX_USB_DEVICE_Init+0x58>)
 80a8662:	f7fe fccd 	bl	80a7000 <USBD_Init>
 80a8666:	4603      	mov	r3, r0
 80a8668:	2b00      	cmp	r3, #0
 80a866a:	d001      	beq.n	80a8670 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80a866c:	f7f8 f8ce 	bl	80a080c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80a8670:	4910      	ldr	r1, [pc, #64]	@ (80a86b4 <MX_USB_DEVICE_Init+0x5c>)
 80a8672:	480f      	ldr	r0, [pc, #60]	@ (80a86b0 <MX_USB_DEVICE_Init+0x58>)
 80a8674:	f7fe fcf4 	bl	80a7060 <USBD_RegisterClass>
 80a8678:	4603      	mov	r3, r0
 80a867a:	2b00      	cmp	r3, #0
 80a867c:	d001      	beq.n	80a8682 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80a867e:	f7f8 f8c5 	bl	80a080c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80a8682:	490d      	ldr	r1, [pc, #52]	@ (80a86b8 <MX_USB_DEVICE_Init+0x60>)
 80a8684:	480a      	ldr	r0, [pc, #40]	@ (80a86b0 <MX_USB_DEVICE_Init+0x58>)
 80a8686:	f7fe fc2b 	bl	80a6ee0 <USBD_CDC_RegisterInterface>
 80a868a:	4603      	mov	r3, r0
 80a868c:	2b00      	cmp	r3, #0
 80a868e:	d001      	beq.n	80a8694 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80a8690:	f7f8 f8bc 	bl	80a080c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80a8694:	4806      	ldr	r0, [pc, #24]	@ (80a86b0 <MX_USB_DEVICE_Init+0x58>)
 80a8696:	f7fe fd19 	bl	80a70cc <USBD_Start>
 80a869a:	4603      	mov	r3, r0
 80a869c:	2b00      	cmp	r3, #0
 80a869e:	d001      	beq.n	80a86a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80a86a0:	f7f8 f8b4 	bl	80a080c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80a86a4:	f7fa f8e2 	bl	80a286c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80a86a8:	bf00      	nop
 80a86aa:	bd80      	pop	{r7, pc}
 80a86ac:	240000b0 	.word	0x240000b0
 80a86b0:	24000188 	.word	0x24000188
 80a86b4:	2400001c 	.word	0x2400001c
 80a86b8:	2400009c 	.word	0x2400009c

080a86bc <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80a86bc:	b580      	push	{r7, lr}
 80a86be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80a86c0:	2200      	movs	r2, #0
 80a86c2:	4905      	ldr	r1, [pc, #20]	@ (80a86d8 <CDC_Init_HS+0x1c>)
 80a86c4:	4805      	ldr	r0, [pc, #20]	@ (80a86dc <CDC_Init_HS+0x20>)
 80a86c6:	f7fe fc25 	bl	80a6f14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80a86ca:	4905      	ldr	r1, [pc, #20]	@ (80a86e0 <CDC_Init_HS+0x24>)
 80a86cc:	4803      	ldr	r0, [pc, #12]	@ (80a86dc <CDC_Init_HS+0x20>)
 80a86ce:	f7fe fc43 	bl	80a6f58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80a86d2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80a86d4:	4618      	mov	r0, r3
 80a86d6:	bd80      	pop	{r7, pc}
 80a86d8:	24000c64 	.word	0x24000c64
 80a86dc:	24000188 	.word	0x24000188
 80a86e0:	24000464 	.word	0x24000464

080a86e4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80a86e4:	b480      	push	{r7}
 80a86e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80a86e8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80a86ea:	4618      	mov	r0, r3
 80a86ec:	46bd      	mov	sp, r7
 80a86ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a86f2:	4770      	bx	lr

080a86f4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80a86f4:	b480      	push	{r7}
 80a86f6:	b083      	sub	sp, #12
 80a86f8:	af00      	add	r7, sp, #0
 80a86fa:	4603      	mov	r3, r0
 80a86fc:	6039      	str	r1, [r7, #0]
 80a86fe:	71fb      	strb	r3, [r7, #7]
 80a8700:	4613      	mov	r3, r2
 80a8702:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80a8704:	79fb      	ldrb	r3, [r7, #7]
 80a8706:	2b23      	cmp	r3, #35	@ 0x23
 80a8708:	d84a      	bhi.n	80a87a0 <CDC_Control_HS+0xac>
 80a870a:	a201      	add	r2, pc, #4	@ (adr r2, 80a8710 <CDC_Control_HS+0x1c>)
 80a870c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a8710:	080a87a1 	.word	0x080a87a1
 80a8714:	080a87a1 	.word	0x080a87a1
 80a8718:	080a87a1 	.word	0x080a87a1
 80a871c:	080a87a1 	.word	0x080a87a1
 80a8720:	080a87a1 	.word	0x080a87a1
 80a8724:	080a87a1 	.word	0x080a87a1
 80a8728:	080a87a1 	.word	0x080a87a1
 80a872c:	080a87a1 	.word	0x080a87a1
 80a8730:	080a87a1 	.word	0x080a87a1
 80a8734:	080a87a1 	.word	0x080a87a1
 80a8738:	080a87a1 	.word	0x080a87a1
 80a873c:	080a87a1 	.word	0x080a87a1
 80a8740:	080a87a1 	.word	0x080a87a1
 80a8744:	080a87a1 	.word	0x080a87a1
 80a8748:	080a87a1 	.word	0x080a87a1
 80a874c:	080a87a1 	.word	0x080a87a1
 80a8750:	080a87a1 	.word	0x080a87a1
 80a8754:	080a87a1 	.word	0x080a87a1
 80a8758:	080a87a1 	.word	0x080a87a1
 80a875c:	080a87a1 	.word	0x080a87a1
 80a8760:	080a87a1 	.word	0x080a87a1
 80a8764:	080a87a1 	.word	0x080a87a1
 80a8768:	080a87a1 	.word	0x080a87a1
 80a876c:	080a87a1 	.word	0x080a87a1
 80a8770:	080a87a1 	.word	0x080a87a1
 80a8774:	080a87a1 	.word	0x080a87a1
 80a8778:	080a87a1 	.word	0x080a87a1
 80a877c:	080a87a1 	.word	0x080a87a1
 80a8780:	080a87a1 	.word	0x080a87a1
 80a8784:	080a87a1 	.word	0x080a87a1
 80a8788:	080a87a1 	.word	0x080a87a1
 80a878c:	080a87a1 	.word	0x080a87a1
 80a8790:	080a87a1 	.word	0x080a87a1
 80a8794:	080a87a1 	.word	0x080a87a1
 80a8798:	080a87a1 	.word	0x080a87a1
 80a879c:	080a87a1 	.word	0x080a87a1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80a87a0:	bf00      	nop
  }

  return (USBD_OK);
 80a87a2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80a87a4:	4618      	mov	r0, r3
 80a87a6:	370c      	adds	r7, #12
 80a87a8:	46bd      	mov	sp, r7
 80a87aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a87ae:	4770      	bx	lr

080a87b0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80a87b0:	b580      	push	{r7, lr}
 80a87b2:	b082      	sub	sp, #8
 80a87b4:	af00      	add	r7, sp, #0
 80a87b6:	6078      	str	r0, [r7, #4]
 80a87b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80a87ba:	6879      	ldr	r1, [r7, #4]
 80a87bc:	4805      	ldr	r0, [pc, #20]	@ (80a87d4 <CDC_Receive_HS+0x24>)
 80a87be:	f7fe fbcb 	bl	80a6f58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80a87c2:	4804      	ldr	r0, [pc, #16]	@ (80a87d4 <CDC_Receive_HS+0x24>)
 80a87c4:	f7fe fbe6 	bl	80a6f94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80a87c8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80a87ca:	4618      	mov	r0, r3
 80a87cc:	3708      	adds	r7, #8
 80a87ce:	46bd      	mov	sp, r7
 80a87d0:	bd80      	pop	{r7, pc}
 80a87d2:	bf00      	nop
 80a87d4:	24000188 	.word	0x24000188

080a87d8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80a87d8:	b480      	push	{r7}
 80a87da:	b087      	sub	sp, #28
 80a87dc:	af00      	add	r7, sp, #0
 80a87de:	60f8      	str	r0, [r7, #12]
 80a87e0:	60b9      	str	r1, [r7, #8]
 80a87e2:	4613      	mov	r3, r2
 80a87e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80a87e6:	2300      	movs	r3, #0
 80a87e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80a87ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80a87ee:	4618      	mov	r0, r3
 80a87f0:	371c      	adds	r7, #28
 80a87f2:	46bd      	mov	sp, r7
 80a87f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a87f8:	4770      	bx	lr
	...

080a87fc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80a87fc:	b480      	push	{r7}
 80a87fe:	b083      	sub	sp, #12
 80a8800:	af00      	add	r7, sp, #0
 80a8802:	4603      	mov	r3, r0
 80a8804:	6039      	str	r1, [r7, #0]
 80a8806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80a8808:	683b      	ldr	r3, [r7, #0]
 80a880a:	2212      	movs	r2, #18
 80a880c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80a880e:	4b03      	ldr	r3, [pc, #12]	@ (80a881c <USBD_HS_DeviceDescriptor+0x20>)
}
 80a8810:	4618      	mov	r0, r3
 80a8812:	370c      	adds	r7, #12
 80a8814:	46bd      	mov	sp, r7
 80a8816:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a881a:	4770      	bx	lr
 80a881c:	240000d0 	.word	0x240000d0

080a8820 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80a8820:	b480      	push	{r7}
 80a8822:	b083      	sub	sp, #12
 80a8824:	af00      	add	r7, sp, #0
 80a8826:	4603      	mov	r3, r0
 80a8828:	6039      	str	r1, [r7, #0]
 80a882a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80a882c:	683b      	ldr	r3, [r7, #0]
 80a882e:	2204      	movs	r2, #4
 80a8830:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80a8832:	4b03      	ldr	r3, [pc, #12]	@ (80a8840 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80a8834:	4618      	mov	r0, r3
 80a8836:	370c      	adds	r7, #12
 80a8838:	46bd      	mov	sp, r7
 80a883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a883e:	4770      	bx	lr
 80a8840:	240000e4 	.word	0x240000e4

080a8844 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80a8844:	b580      	push	{r7, lr}
 80a8846:	b082      	sub	sp, #8
 80a8848:	af00      	add	r7, sp, #0
 80a884a:	4603      	mov	r3, r0
 80a884c:	6039      	str	r1, [r7, #0]
 80a884e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80a8850:	79fb      	ldrb	r3, [r7, #7]
 80a8852:	2b00      	cmp	r3, #0
 80a8854:	d105      	bne.n	80a8862 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80a8856:	683a      	ldr	r2, [r7, #0]
 80a8858:	4907      	ldr	r1, [pc, #28]	@ (80a8878 <USBD_HS_ProductStrDescriptor+0x34>)
 80a885a:	4808      	ldr	r0, [pc, #32]	@ (80a887c <USBD_HS_ProductStrDescriptor+0x38>)
 80a885c:	f7ff fe10 	bl	80a8480 <USBD_GetString>
 80a8860:	e004      	b.n	80a886c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80a8862:	683a      	ldr	r2, [r7, #0]
 80a8864:	4904      	ldr	r1, [pc, #16]	@ (80a8878 <USBD_HS_ProductStrDescriptor+0x34>)
 80a8866:	4805      	ldr	r0, [pc, #20]	@ (80a887c <USBD_HS_ProductStrDescriptor+0x38>)
 80a8868:	f7ff fe0a 	bl	80a8480 <USBD_GetString>
  }
  return USBD_StrDesc;
 80a886c:	4b02      	ldr	r3, [pc, #8]	@ (80a8878 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80a886e:	4618      	mov	r0, r3
 80a8870:	3708      	adds	r7, #8
 80a8872:	46bd      	mov	sp, r7
 80a8874:	bd80      	pop	{r7, pc}
 80a8876:	bf00      	nop
 80a8878:	24001464 	.word	0x24001464
 80a887c:	080aa09c 	.word	0x080aa09c

080a8880 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80a8880:	b580      	push	{r7, lr}
 80a8882:	b082      	sub	sp, #8
 80a8884:	af00      	add	r7, sp, #0
 80a8886:	4603      	mov	r3, r0
 80a8888:	6039      	str	r1, [r7, #0]
 80a888a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80a888c:	683a      	ldr	r2, [r7, #0]
 80a888e:	4904      	ldr	r1, [pc, #16]	@ (80a88a0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80a8890:	4804      	ldr	r0, [pc, #16]	@ (80a88a4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80a8892:	f7ff fdf5 	bl	80a8480 <USBD_GetString>
  return USBD_StrDesc;
 80a8896:	4b02      	ldr	r3, [pc, #8]	@ (80a88a0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80a8898:	4618      	mov	r0, r3
 80a889a:	3708      	adds	r7, #8
 80a889c:	46bd      	mov	sp, r7
 80a889e:	bd80      	pop	{r7, pc}
 80a88a0:	24001464 	.word	0x24001464
 80a88a4:	080aa0b4 	.word	0x080aa0b4

080a88a8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80a88a8:	b580      	push	{r7, lr}
 80a88aa:	b082      	sub	sp, #8
 80a88ac:	af00      	add	r7, sp, #0
 80a88ae:	4603      	mov	r3, r0
 80a88b0:	6039      	str	r1, [r7, #0]
 80a88b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80a88b4:	683b      	ldr	r3, [r7, #0]
 80a88b6:	221a      	movs	r2, #26
 80a88b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80a88ba:	f000 f843 	bl	80a8944 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80a88be:	4b02      	ldr	r3, [pc, #8]	@ (80a88c8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80a88c0:	4618      	mov	r0, r3
 80a88c2:	3708      	adds	r7, #8
 80a88c4:	46bd      	mov	sp, r7
 80a88c6:	bd80      	pop	{r7, pc}
 80a88c8:	240000e8 	.word	0x240000e8

080a88cc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80a88cc:	b580      	push	{r7, lr}
 80a88ce:	b082      	sub	sp, #8
 80a88d0:	af00      	add	r7, sp, #0
 80a88d2:	4603      	mov	r3, r0
 80a88d4:	6039      	str	r1, [r7, #0]
 80a88d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80a88d8:	79fb      	ldrb	r3, [r7, #7]
 80a88da:	2b00      	cmp	r3, #0
 80a88dc:	d105      	bne.n	80a88ea <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80a88de:	683a      	ldr	r2, [r7, #0]
 80a88e0:	4907      	ldr	r1, [pc, #28]	@ (80a8900 <USBD_HS_ConfigStrDescriptor+0x34>)
 80a88e2:	4808      	ldr	r0, [pc, #32]	@ (80a8904 <USBD_HS_ConfigStrDescriptor+0x38>)
 80a88e4:	f7ff fdcc 	bl	80a8480 <USBD_GetString>
 80a88e8:	e004      	b.n	80a88f4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80a88ea:	683a      	ldr	r2, [r7, #0]
 80a88ec:	4904      	ldr	r1, [pc, #16]	@ (80a8900 <USBD_HS_ConfigStrDescriptor+0x34>)
 80a88ee:	4805      	ldr	r0, [pc, #20]	@ (80a8904 <USBD_HS_ConfigStrDescriptor+0x38>)
 80a88f0:	f7ff fdc6 	bl	80a8480 <USBD_GetString>
  }
  return USBD_StrDesc;
 80a88f4:	4b02      	ldr	r3, [pc, #8]	@ (80a8900 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80a88f6:	4618      	mov	r0, r3
 80a88f8:	3708      	adds	r7, #8
 80a88fa:	46bd      	mov	sp, r7
 80a88fc:	bd80      	pop	{r7, pc}
 80a88fe:	bf00      	nop
 80a8900:	24001464 	.word	0x24001464
 80a8904:	080aa0c8 	.word	0x080aa0c8

080a8908 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80a8908:	b580      	push	{r7, lr}
 80a890a:	b082      	sub	sp, #8
 80a890c:	af00      	add	r7, sp, #0
 80a890e:	4603      	mov	r3, r0
 80a8910:	6039      	str	r1, [r7, #0]
 80a8912:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80a8914:	79fb      	ldrb	r3, [r7, #7]
 80a8916:	2b00      	cmp	r3, #0
 80a8918:	d105      	bne.n	80a8926 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80a891a:	683a      	ldr	r2, [r7, #0]
 80a891c:	4907      	ldr	r1, [pc, #28]	@ (80a893c <USBD_HS_InterfaceStrDescriptor+0x34>)
 80a891e:	4808      	ldr	r0, [pc, #32]	@ (80a8940 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80a8920:	f7ff fdae 	bl	80a8480 <USBD_GetString>
 80a8924:	e004      	b.n	80a8930 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80a8926:	683a      	ldr	r2, [r7, #0]
 80a8928:	4904      	ldr	r1, [pc, #16]	@ (80a893c <USBD_HS_InterfaceStrDescriptor+0x34>)
 80a892a:	4805      	ldr	r0, [pc, #20]	@ (80a8940 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80a892c:	f7ff fda8 	bl	80a8480 <USBD_GetString>
  }
  return USBD_StrDesc;
 80a8930:	4b02      	ldr	r3, [pc, #8]	@ (80a893c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80a8932:	4618      	mov	r0, r3
 80a8934:	3708      	adds	r7, #8
 80a8936:	46bd      	mov	sp, r7
 80a8938:	bd80      	pop	{r7, pc}
 80a893a:	bf00      	nop
 80a893c:	24001464 	.word	0x24001464
 80a8940:	080aa0d4 	.word	0x080aa0d4

080a8944 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80a8944:	b580      	push	{r7, lr}
 80a8946:	b084      	sub	sp, #16
 80a8948:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80a894a:	4b0f      	ldr	r3, [pc, #60]	@ (80a8988 <Get_SerialNum+0x44>)
 80a894c:	681b      	ldr	r3, [r3, #0]
 80a894e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80a8950:	4b0e      	ldr	r3, [pc, #56]	@ (80a898c <Get_SerialNum+0x48>)
 80a8952:	681b      	ldr	r3, [r3, #0]
 80a8954:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80a8956:	4b0e      	ldr	r3, [pc, #56]	@ (80a8990 <Get_SerialNum+0x4c>)
 80a8958:	681b      	ldr	r3, [r3, #0]
 80a895a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80a895c:	68fa      	ldr	r2, [r7, #12]
 80a895e:	687b      	ldr	r3, [r7, #4]
 80a8960:	4413      	add	r3, r2
 80a8962:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80a8964:	68fb      	ldr	r3, [r7, #12]
 80a8966:	2b00      	cmp	r3, #0
 80a8968:	d009      	beq.n	80a897e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80a896a:	2208      	movs	r2, #8
 80a896c:	4909      	ldr	r1, [pc, #36]	@ (80a8994 <Get_SerialNum+0x50>)
 80a896e:	68f8      	ldr	r0, [r7, #12]
 80a8970:	f000 f814 	bl	80a899c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80a8974:	2204      	movs	r2, #4
 80a8976:	4908      	ldr	r1, [pc, #32]	@ (80a8998 <Get_SerialNum+0x54>)
 80a8978:	68b8      	ldr	r0, [r7, #8]
 80a897a:	f000 f80f 	bl	80a899c <IntToUnicode>
  }
}
 80a897e:	bf00      	nop
 80a8980:	3710      	adds	r7, #16
 80a8982:	46bd      	mov	sp, r7
 80a8984:	bd80      	pop	{r7, pc}
 80a8986:	bf00      	nop
 80a8988:	1ff1e800 	.word	0x1ff1e800
 80a898c:	1ff1e804 	.word	0x1ff1e804
 80a8990:	1ff1e808 	.word	0x1ff1e808
 80a8994:	240000ea 	.word	0x240000ea
 80a8998:	240000fa 	.word	0x240000fa

080a899c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80a899c:	b480      	push	{r7}
 80a899e:	b087      	sub	sp, #28
 80a89a0:	af00      	add	r7, sp, #0
 80a89a2:	60f8      	str	r0, [r7, #12]
 80a89a4:	60b9      	str	r1, [r7, #8]
 80a89a6:	4613      	mov	r3, r2
 80a89a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80a89aa:	2300      	movs	r3, #0
 80a89ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80a89ae:	2300      	movs	r3, #0
 80a89b0:	75fb      	strb	r3, [r7, #23]
 80a89b2:	e027      	b.n	80a8a04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80a89b4:	68fb      	ldr	r3, [r7, #12]
 80a89b6:	0f1b      	lsrs	r3, r3, #28
 80a89b8:	2b09      	cmp	r3, #9
 80a89ba:	d80b      	bhi.n	80a89d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80a89bc:	68fb      	ldr	r3, [r7, #12]
 80a89be:	0f1b      	lsrs	r3, r3, #28
 80a89c0:	b2da      	uxtb	r2, r3
 80a89c2:	7dfb      	ldrb	r3, [r7, #23]
 80a89c4:	005b      	lsls	r3, r3, #1
 80a89c6:	4619      	mov	r1, r3
 80a89c8:	68bb      	ldr	r3, [r7, #8]
 80a89ca:	440b      	add	r3, r1
 80a89cc:	3230      	adds	r2, #48	@ 0x30
 80a89ce:	b2d2      	uxtb	r2, r2
 80a89d0:	701a      	strb	r2, [r3, #0]
 80a89d2:	e00a      	b.n	80a89ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80a89d4:	68fb      	ldr	r3, [r7, #12]
 80a89d6:	0f1b      	lsrs	r3, r3, #28
 80a89d8:	b2da      	uxtb	r2, r3
 80a89da:	7dfb      	ldrb	r3, [r7, #23]
 80a89dc:	005b      	lsls	r3, r3, #1
 80a89de:	4619      	mov	r1, r3
 80a89e0:	68bb      	ldr	r3, [r7, #8]
 80a89e2:	440b      	add	r3, r1
 80a89e4:	3237      	adds	r2, #55	@ 0x37
 80a89e6:	b2d2      	uxtb	r2, r2
 80a89e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80a89ea:	68fb      	ldr	r3, [r7, #12]
 80a89ec:	011b      	lsls	r3, r3, #4
 80a89ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80a89f0:	7dfb      	ldrb	r3, [r7, #23]
 80a89f2:	005b      	lsls	r3, r3, #1
 80a89f4:	3301      	adds	r3, #1
 80a89f6:	68ba      	ldr	r2, [r7, #8]
 80a89f8:	4413      	add	r3, r2
 80a89fa:	2200      	movs	r2, #0
 80a89fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80a89fe:	7dfb      	ldrb	r3, [r7, #23]
 80a8a00:	3301      	adds	r3, #1
 80a8a02:	75fb      	strb	r3, [r7, #23]
 80a8a04:	7dfa      	ldrb	r2, [r7, #23]
 80a8a06:	79fb      	ldrb	r3, [r7, #7]
 80a8a08:	429a      	cmp	r2, r3
 80a8a0a:	d3d3      	bcc.n	80a89b4 <IntToUnicode+0x18>
  }
}
 80a8a0c:	bf00      	nop
 80a8a0e:	bf00      	nop
 80a8a10:	371c      	adds	r7, #28
 80a8a12:	46bd      	mov	sp, r7
 80a8a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a8a18:	4770      	bx	lr
	...

080a8a1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80a8a1c:	b580      	push	{r7, lr}
 80a8a1e:	b0c2      	sub	sp, #264	@ 0x108
 80a8a20:	af00      	add	r7, sp, #0
 80a8a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80a8a26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80a8a2a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80a8a2c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80a8a30:	2200      	movs	r2, #0
 80a8a32:	601a      	str	r2, [r3, #0]
 80a8a34:	605a      	str	r2, [r3, #4]
 80a8a36:	609a      	str	r2, [r3, #8]
 80a8a38:	60da      	str	r2, [r3, #12]
 80a8a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80a8a3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80a8a40:	22c8      	movs	r2, #200	@ 0xc8
 80a8a42:	2100      	movs	r1, #0
 80a8a44:	4618      	mov	r0, r3
 80a8a46:	f000 fcec 	bl	80a9422 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80a8a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80a8a4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80a8a52:	681b      	ldr	r3, [r3, #0]
 80a8a54:	681b      	ldr	r3, [r3, #0]
 80a8a56:	4a7d      	ldr	r2, [pc, #500]	@ (80a8c4c <HAL_PCD_MspInit+0x230>)
 80a8a58:	4293      	cmp	r3, r2
 80a8a5a:	f040 80f2 	bne.w	80a8c42 <HAL_PCD_MspInit+0x226>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80a8a5e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80a8a62:	f04f 0300 	mov.w	r3, #0
 80a8a66:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80a8a6a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80a8a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80a8a72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80a8a76:	4618      	mov	r0, r3
 80a8a78:	f7fa ff2c 	bl	80a38d4 <HAL_RCCEx_PeriphCLKConfig>
 80a8a7c:	4603      	mov	r3, r0
 80a8a7e:	2b00      	cmp	r3, #0
 80a8a80:	d001      	beq.n	80a8a86 <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 80a8a82:	f7f7 fec3 	bl	80a080c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80a8a86:	f7f9 fef1 	bl	80a286c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80a8a8a:	4b71      	ldr	r3, [pc, #452]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8a90:	4a6f      	ldr	r2, [pc, #444]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8a92:	f043 0302 	orr.w	r3, r3, #2
 80a8a96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a8a9a:	4b6d      	ldr	r3, [pc, #436]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8aa0:	f003 0302 	and.w	r3, r3, #2
 80a8aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 80a8aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80a8aa8:	4b69      	ldr	r3, [pc, #420]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8aae:	4a68      	ldr	r2, [pc, #416]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80a8ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a8ab8:	4b65      	ldr	r3, [pc, #404]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a8ac2:	623b      	str	r3, [r7, #32]
 80a8ac4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80a8ac6:	4b62      	ldr	r3, [pc, #392]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8acc:	4a60      	ldr	r2, [pc, #384]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8ace:	f043 0304 	orr.w	r3, r3, #4
 80a8ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a8ad6:	4b5e      	ldr	r3, [pc, #376]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8adc:	f003 0304 	and.w	r3, r3, #4
 80a8ae0:	61fb      	str	r3, [r7, #28]
 80a8ae2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80a8ae4:	4b5a      	ldr	r3, [pc, #360]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8aea:	4a59      	ldr	r2, [pc, #356]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80a8af0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a8af4:	4b56      	ldr	r3, [pc, #344]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80a8afe:	61bb      	str	r3, [r7, #24]
 80a8b00:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80a8b02:	4b53      	ldr	r3, [pc, #332]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8b08:	4a51      	ldr	r2, [pc, #324]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8b0a:	f043 0301 	orr.w	r3, r3, #1
 80a8b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a8b12:	4b4f      	ldr	r3, [pc, #316]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8b18:	f003 0301 	and.w	r3, r3, #1
 80a8b1c:	617b      	str	r3, [r7, #20]
 80a8b1e:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 80a8b20:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80a8b24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a8b28:	2302      	movs	r3, #2
 80a8b2a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a8b2e:	2300      	movs	r3, #0
 80a8b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80a8b34:	2302      	movs	r3, #2
 80a8b36:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80a8b3a:	230a      	movs	r3, #10
 80a8b3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80a8b40:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80a8b44:	4619      	mov	r1, r3
 80a8b46:	4843      	ldr	r0, [pc, #268]	@ (80a8c54 <HAL_PCD_MspInit+0x238>)
 80a8b48:	f7f8 f984 	bl	80a0e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 80a8b4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80a8b50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a8b54:	2302      	movs	r3, #2
 80a8b56:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a8b5a:	2300      	movs	r3, #0
 80a8b5c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80a8b60:	2302      	movs	r3, #2
 80a8b62:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80a8b66:	230a      	movs	r3, #10
 80a8b68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 80a8b6c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80a8b70:	4619      	mov	r1, r3
 80a8b72:	4839      	ldr	r0, [pc, #228]	@ (80a8c58 <HAL_PCD_MspInit+0x23c>)
 80a8b74:	f7f8 f96e 	bl	80a0e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 80a8b78:	2301      	movs	r3, #1
 80a8b7a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a8b7e:	2302      	movs	r3, #2
 80a8b80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a8b84:	2300      	movs	r3, #0
 80a8b86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80a8b8a:	2302      	movs	r3, #2
 80a8b8c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80a8b90:	230a      	movs	r3, #10
 80a8b92:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 80a8b96:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80a8b9a:	4619      	mov	r1, r3
 80a8b9c:	482f      	ldr	r0, [pc, #188]	@ (80a8c5c <HAL_PCD_MspInit+0x240>)
 80a8b9e:	f7f8 f959 	bl	80a0e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80a8ba2:	2310      	movs	r3, #16
 80a8ba4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a8ba8:	2302      	movs	r3, #2
 80a8baa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a8bae:	2300      	movs	r3, #0
 80a8bb0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80a8bb4:	2302      	movs	r3, #2
 80a8bb6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80a8bba:	230a      	movs	r3, #10
 80a8bbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80a8bc0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80a8bc4:	4619      	mov	r1, r3
 80a8bc6:	4826      	ldr	r0, [pc, #152]	@ (80a8c60 <HAL_PCD_MspInit+0x244>)
 80a8bc8:	f7f8 f944 	bl	80a0e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 80a8bcc:	2328      	movs	r3, #40	@ 0x28
 80a8bce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a8bd2:	2302      	movs	r3, #2
 80a8bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a8bd8:	2300      	movs	r3, #0
 80a8bda:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80a8bde:	2302      	movs	r3, #2
 80a8be0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80a8be4:	230a      	movs	r3, #10
 80a8be6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80a8bea:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80a8bee:	4619      	mov	r1, r3
 80a8bf0:	481c      	ldr	r0, [pc, #112]	@ (80a8c64 <HAL_PCD_MspInit+0x248>)
 80a8bf2:	f7f8 f92f 	bl	80a0e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80a8bf6:	4b16      	ldr	r3, [pc, #88]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8bf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80a8bfc:	4a14      	ldr	r2, [pc, #80]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8bfe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80a8c02:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80a8c06:	4b12      	ldr	r3, [pc, #72]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8c08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80a8c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80a8c10:	613b      	str	r3, [r7, #16]
 80a8c12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80a8c14:	4b0e      	ldr	r3, [pc, #56]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8c16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80a8c1a:	4a0d      	ldr	r2, [pc, #52]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8c1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80a8c20:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80a8c24:	4b0a      	ldr	r3, [pc, #40]	@ (80a8c50 <HAL_PCD_MspInit+0x234>)
 80a8c26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80a8c2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80a8c2e:	60fb      	str	r3, [r7, #12]
 80a8c30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80a8c32:	2200      	movs	r2, #0
 80a8c34:	2100      	movs	r1, #0
 80a8c36:	204d      	movs	r0, #77	@ 0x4d
 80a8c38:	f7f8 f8d7 	bl	80a0dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80a8c3c:	204d      	movs	r0, #77	@ 0x4d
 80a8c3e:	f7f8 f8ee 	bl	80a0e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80a8c42:	bf00      	nop
 80a8c44:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80a8c48:	46bd      	mov	sp, r7
 80a8c4a:	bd80      	pop	{r7, pc}
 80a8c4c:	40040000 	.word	0x40040000
 80a8c50:	58024400 	.word	0x58024400
 80a8c54:	58020400 	.word	0x58020400
 80a8c58:	58022000 	.word	0x58022000
 80a8c5c:	58020800 	.word	0x58020800
 80a8c60:	58021c00 	.word	0x58021c00
 80a8c64:	58020000 	.word	0x58020000

080a8c68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8c68:	b580      	push	{r7, lr}
 80a8c6a:	b082      	sub	sp, #8
 80a8c6c:	af00      	add	r7, sp, #0
 80a8c6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80a8c70:	687b      	ldr	r3, [r7, #4]
 80a8c72:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80a8c76:	687b      	ldr	r3, [r7, #4]
 80a8c78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80a8c7c:	4619      	mov	r1, r3
 80a8c7e:	4610      	mov	r0, r2
 80a8c80:	f7fe fa71 	bl	80a7166 <USBD_LL_SetupStage>
}
 80a8c84:	bf00      	nop
 80a8c86:	3708      	adds	r7, #8
 80a8c88:	46bd      	mov	sp, r7
 80a8c8a:	bd80      	pop	{r7, pc}

080a8c8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8c8c:	b580      	push	{r7, lr}
 80a8c8e:	b082      	sub	sp, #8
 80a8c90:	af00      	add	r7, sp, #0
 80a8c92:	6078      	str	r0, [r7, #4]
 80a8c94:	460b      	mov	r3, r1
 80a8c96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80a8c98:	687b      	ldr	r3, [r7, #4]
 80a8c9a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80a8c9e:	78fa      	ldrb	r2, [r7, #3]
 80a8ca0:	6879      	ldr	r1, [r7, #4]
 80a8ca2:	4613      	mov	r3, r2
 80a8ca4:	00db      	lsls	r3, r3, #3
 80a8ca6:	4413      	add	r3, r2
 80a8ca8:	009b      	lsls	r3, r3, #2
 80a8caa:	440b      	add	r3, r1
 80a8cac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80a8cb0:	681a      	ldr	r2, [r3, #0]
 80a8cb2:	78fb      	ldrb	r3, [r7, #3]
 80a8cb4:	4619      	mov	r1, r3
 80a8cb6:	f7fe faab 	bl	80a7210 <USBD_LL_DataOutStage>
}
 80a8cba:	bf00      	nop
 80a8cbc:	3708      	adds	r7, #8
 80a8cbe:	46bd      	mov	sp, r7
 80a8cc0:	bd80      	pop	{r7, pc}

080a8cc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8cc2:	b580      	push	{r7, lr}
 80a8cc4:	b082      	sub	sp, #8
 80a8cc6:	af00      	add	r7, sp, #0
 80a8cc8:	6078      	str	r0, [r7, #4]
 80a8cca:	460b      	mov	r3, r1
 80a8ccc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80a8cce:	687b      	ldr	r3, [r7, #4]
 80a8cd0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80a8cd4:	78fa      	ldrb	r2, [r7, #3]
 80a8cd6:	6879      	ldr	r1, [r7, #4]
 80a8cd8:	4613      	mov	r3, r2
 80a8cda:	00db      	lsls	r3, r3, #3
 80a8cdc:	4413      	add	r3, r2
 80a8cde:	009b      	lsls	r3, r3, #2
 80a8ce0:	440b      	add	r3, r1
 80a8ce2:	3320      	adds	r3, #32
 80a8ce4:	681a      	ldr	r2, [r3, #0]
 80a8ce6:	78fb      	ldrb	r3, [r7, #3]
 80a8ce8:	4619      	mov	r1, r3
 80a8cea:	f7fe fb44 	bl	80a7376 <USBD_LL_DataInStage>
}
 80a8cee:	bf00      	nop
 80a8cf0:	3708      	adds	r7, #8
 80a8cf2:	46bd      	mov	sp, r7
 80a8cf4:	bd80      	pop	{r7, pc}

080a8cf6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8cf6:	b580      	push	{r7, lr}
 80a8cf8:	b082      	sub	sp, #8
 80a8cfa:	af00      	add	r7, sp, #0
 80a8cfc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80a8cfe:	687b      	ldr	r3, [r7, #4]
 80a8d00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8d04:	4618      	mov	r0, r3
 80a8d06:	f7fe fc7e 	bl	80a7606 <USBD_LL_SOF>
}
 80a8d0a:	bf00      	nop
 80a8d0c:	3708      	adds	r7, #8
 80a8d0e:	46bd      	mov	sp, r7
 80a8d10:	bd80      	pop	{r7, pc}

080a8d12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8d12:	b580      	push	{r7, lr}
 80a8d14:	b084      	sub	sp, #16
 80a8d16:	af00      	add	r7, sp, #0
 80a8d18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80a8d1a:	2301      	movs	r3, #1
 80a8d1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80a8d1e:	687b      	ldr	r3, [r7, #4]
 80a8d20:	79db      	ldrb	r3, [r3, #7]
 80a8d22:	2b00      	cmp	r3, #0
 80a8d24:	d102      	bne.n	80a8d2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80a8d26:	2300      	movs	r3, #0
 80a8d28:	73fb      	strb	r3, [r7, #15]
 80a8d2a:	e008      	b.n	80a8d3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80a8d2c:	687b      	ldr	r3, [r7, #4]
 80a8d2e:	79db      	ldrb	r3, [r3, #7]
 80a8d30:	2b02      	cmp	r3, #2
 80a8d32:	d102      	bne.n	80a8d3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80a8d34:	2301      	movs	r3, #1
 80a8d36:	73fb      	strb	r3, [r7, #15]
 80a8d38:	e001      	b.n	80a8d3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80a8d3a:	f7f7 fd67 	bl	80a080c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80a8d3e:	687b      	ldr	r3, [r7, #4]
 80a8d40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8d44:	7bfa      	ldrb	r2, [r7, #15]
 80a8d46:	4611      	mov	r1, r2
 80a8d48:	4618      	mov	r0, r3
 80a8d4a:	f7fe fc18 	bl	80a757e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80a8d4e:	687b      	ldr	r3, [r7, #4]
 80a8d50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8d54:	4618      	mov	r0, r3
 80a8d56:	f7fe fbc0 	bl	80a74da <USBD_LL_Reset>
}
 80a8d5a:	bf00      	nop
 80a8d5c:	3710      	adds	r7, #16
 80a8d5e:	46bd      	mov	sp, r7
 80a8d60:	bd80      	pop	{r7, pc}
	...

080a8d64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8d64:	b580      	push	{r7, lr}
 80a8d66:	b082      	sub	sp, #8
 80a8d68:	af00      	add	r7, sp, #0
 80a8d6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80a8d6c:	687b      	ldr	r3, [r7, #4]
 80a8d6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8d72:	4618      	mov	r0, r3
 80a8d74:	f7fe fc13 	bl	80a759e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80a8d78:	687b      	ldr	r3, [r7, #4]
 80a8d7a:	681b      	ldr	r3, [r3, #0]
 80a8d7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80a8d80:	681b      	ldr	r3, [r3, #0]
 80a8d82:	687a      	ldr	r2, [r7, #4]
 80a8d84:	6812      	ldr	r2, [r2, #0]
 80a8d86:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80a8d8a:	f043 0301 	orr.w	r3, r3, #1
 80a8d8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80a8d90:	687b      	ldr	r3, [r7, #4]
 80a8d92:	7adb      	ldrb	r3, [r3, #11]
 80a8d94:	2b00      	cmp	r3, #0
 80a8d96:	d005      	beq.n	80a8da4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80a8d98:	4b04      	ldr	r3, [pc, #16]	@ (80a8dac <HAL_PCD_SuspendCallback+0x48>)
 80a8d9a:	691b      	ldr	r3, [r3, #16]
 80a8d9c:	4a03      	ldr	r2, [pc, #12]	@ (80a8dac <HAL_PCD_SuspendCallback+0x48>)
 80a8d9e:	f043 0306 	orr.w	r3, r3, #6
 80a8da2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80a8da4:	bf00      	nop
 80a8da6:	3708      	adds	r7, #8
 80a8da8:	46bd      	mov	sp, r7
 80a8daa:	bd80      	pop	{r7, pc}
 80a8dac:	e000ed00 	.word	0xe000ed00

080a8db0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8db0:	b580      	push	{r7, lr}
 80a8db2:	b082      	sub	sp, #8
 80a8db4:	af00      	add	r7, sp, #0
 80a8db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80a8db8:	687b      	ldr	r3, [r7, #4]
 80a8dba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8dbe:	4618      	mov	r0, r3
 80a8dc0:	f7fe fc09 	bl	80a75d6 <USBD_LL_Resume>
}
 80a8dc4:	bf00      	nop
 80a8dc6:	3708      	adds	r7, #8
 80a8dc8:	46bd      	mov	sp, r7
 80a8dca:	bd80      	pop	{r7, pc}

080a8dcc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8dcc:	b580      	push	{r7, lr}
 80a8dce:	b082      	sub	sp, #8
 80a8dd0:	af00      	add	r7, sp, #0
 80a8dd2:	6078      	str	r0, [r7, #4]
 80a8dd4:	460b      	mov	r3, r1
 80a8dd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80a8dd8:	687b      	ldr	r3, [r7, #4]
 80a8dda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8dde:	78fa      	ldrb	r2, [r7, #3]
 80a8de0:	4611      	mov	r1, r2
 80a8de2:	4618      	mov	r0, r3
 80a8de4:	f7fe fc61 	bl	80a76aa <USBD_LL_IsoOUTIncomplete>
}
 80a8de8:	bf00      	nop
 80a8dea:	3708      	adds	r7, #8
 80a8dec:	46bd      	mov	sp, r7
 80a8dee:	bd80      	pop	{r7, pc}

080a8df0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8df0:	b580      	push	{r7, lr}
 80a8df2:	b082      	sub	sp, #8
 80a8df4:	af00      	add	r7, sp, #0
 80a8df6:	6078      	str	r0, [r7, #4]
 80a8df8:	460b      	mov	r3, r1
 80a8dfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80a8dfc:	687b      	ldr	r3, [r7, #4]
 80a8dfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8e02:	78fa      	ldrb	r2, [r7, #3]
 80a8e04:	4611      	mov	r1, r2
 80a8e06:	4618      	mov	r0, r3
 80a8e08:	f7fe fc1d 	bl	80a7646 <USBD_LL_IsoINIncomplete>
}
 80a8e0c:	bf00      	nop
 80a8e0e:	3708      	adds	r7, #8
 80a8e10:	46bd      	mov	sp, r7
 80a8e12:	bd80      	pop	{r7, pc}

080a8e14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8e14:	b580      	push	{r7, lr}
 80a8e16:	b082      	sub	sp, #8
 80a8e18:	af00      	add	r7, sp, #0
 80a8e1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80a8e1c:	687b      	ldr	r3, [r7, #4]
 80a8e1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8e22:	4618      	mov	r0, r3
 80a8e24:	f7fe fc73 	bl	80a770e <USBD_LL_DevConnected>
}
 80a8e28:	bf00      	nop
 80a8e2a:	3708      	adds	r7, #8
 80a8e2c:	46bd      	mov	sp, r7
 80a8e2e:	bd80      	pop	{r7, pc}

080a8e30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8e30:	b580      	push	{r7, lr}
 80a8e32:	b082      	sub	sp, #8
 80a8e34:	af00      	add	r7, sp, #0
 80a8e36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80a8e38:	687b      	ldr	r3, [r7, #4]
 80a8e3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8e3e:	4618      	mov	r0, r3
 80a8e40:	f7fe fc70 	bl	80a7724 <USBD_LL_DevDisconnected>
}
 80a8e44:	bf00      	nop
 80a8e46:	3708      	adds	r7, #8
 80a8e48:	46bd      	mov	sp, r7
 80a8e4a:	bd80      	pop	{r7, pc}

080a8e4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80a8e4c:	b580      	push	{r7, lr}
 80a8e4e:	b082      	sub	sp, #8
 80a8e50:	af00      	add	r7, sp, #0
 80a8e52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80a8e54:	687b      	ldr	r3, [r7, #4]
 80a8e56:	781b      	ldrb	r3, [r3, #0]
 80a8e58:	2b01      	cmp	r3, #1
 80a8e5a:	d140      	bne.n	80a8ede <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80a8e5c:	4a22      	ldr	r2, [pc, #136]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8e5e:	687b      	ldr	r3, [r7, #4]
 80a8e60:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 80a8e64:	687b      	ldr	r3, [r7, #4]
 80a8e66:	4a20      	ldr	r2, [pc, #128]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8e68:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80a8e6c:	4b1e      	ldr	r3, [pc, #120]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8e6e:	4a1f      	ldr	r2, [pc, #124]	@ (80a8eec <USBD_LL_Init+0xa0>)
 80a8e70:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80a8e72:	4b1d      	ldr	r3, [pc, #116]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8e74:	2209      	movs	r2, #9
 80a8e76:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80a8e78:	4b1b      	ldr	r3, [pc, #108]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8e7a:	2200      	movs	r2, #0
 80a8e7c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80a8e7e:	4b1a      	ldr	r3, [pc, #104]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8e80:	2200      	movs	r2, #0
 80a8e82:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80a8e84:	4b18      	ldr	r3, [pc, #96]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8e86:	2201      	movs	r2, #1
 80a8e88:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80a8e8a:	4b17      	ldr	r3, [pc, #92]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8e8c:	2200      	movs	r2, #0
 80a8e8e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80a8e90:	4b15      	ldr	r3, [pc, #84]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8e92:	2200      	movs	r2, #0
 80a8e94:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80a8e96:	4b14      	ldr	r3, [pc, #80]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8e98:	2200      	movs	r2, #0
 80a8e9a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80a8e9c:	4b12      	ldr	r3, [pc, #72]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8e9e:	2200      	movs	r2, #0
 80a8ea0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80a8ea2:	4b11      	ldr	r3, [pc, #68]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8ea4:	2200      	movs	r2, #0
 80a8ea6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80a8ea8:	4b0f      	ldr	r3, [pc, #60]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8eaa:	2200      	movs	r2, #0
 80a8eac:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80a8eae:	480e      	ldr	r0, [pc, #56]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8eb0:	f7f8 f9e2 	bl	80a1278 <HAL_PCD_Init>
 80a8eb4:	4603      	mov	r3, r0
 80a8eb6:	2b00      	cmp	r3, #0
 80a8eb8:	d001      	beq.n	80a8ebe <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80a8eba:	f7f7 fca7 	bl	80a080c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80a8ebe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80a8ec2:	4809      	ldr	r0, [pc, #36]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8ec4:	f7f9 fc37 	bl	80a2736 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80a8ec8:	2280      	movs	r2, #128	@ 0x80
 80a8eca:	2100      	movs	r1, #0
 80a8ecc:	4806      	ldr	r0, [pc, #24]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8ece:	f7f9 fbeb 	bl	80a26a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80a8ed2:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 80a8ed6:	2101      	movs	r1, #1
 80a8ed8:	4803      	ldr	r0, [pc, #12]	@ (80a8ee8 <USBD_LL_Init+0x9c>)
 80a8eda:	f7f9 fbe5 	bl	80a26a8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80a8ede:	2300      	movs	r3, #0
}
 80a8ee0:	4618      	mov	r0, r3
 80a8ee2:	3708      	adds	r7, #8
 80a8ee4:	46bd      	mov	sp, r7
 80a8ee6:	bd80      	pop	{r7, pc}
 80a8ee8:	24001664 	.word	0x24001664
 80a8eec:	40040000 	.word	0x40040000

080a8ef0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80a8ef0:	b580      	push	{r7, lr}
 80a8ef2:	b084      	sub	sp, #16
 80a8ef4:	af00      	add	r7, sp, #0
 80a8ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80a8ef8:	2300      	movs	r3, #0
 80a8efa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a8efc:	2300      	movs	r3, #0
 80a8efe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80a8f00:	687b      	ldr	r3, [r7, #4]
 80a8f02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80a8f06:	4618      	mov	r0, r3
 80a8f08:	f7f8 fac2 	bl	80a1490 <HAL_PCD_Start>
 80a8f0c:	4603      	mov	r3, r0
 80a8f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80a8f10:	7bfb      	ldrb	r3, [r7, #15]
 80a8f12:	4618      	mov	r0, r3
 80a8f14:	f000 f942 	bl	80a919c <USBD_Get_USB_Status>
 80a8f18:	4603      	mov	r3, r0
 80a8f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80a8f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 80a8f1e:	4618      	mov	r0, r3
 80a8f20:	3710      	adds	r7, #16
 80a8f22:	46bd      	mov	sp, r7
 80a8f24:	bd80      	pop	{r7, pc}

080a8f26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80a8f26:	b580      	push	{r7, lr}
 80a8f28:	b084      	sub	sp, #16
 80a8f2a:	af00      	add	r7, sp, #0
 80a8f2c:	6078      	str	r0, [r7, #4]
 80a8f2e:	4608      	mov	r0, r1
 80a8f30:	4611      	mov	r1, r2
 80a8f32:	461a      	mov	r2, r3
 80a8f34:	4603      	mov	r3, r0
 80a8f36:	70fb      	strb	r3, [r7, #3]
 80a8f38:	460b      	mov	r3, r1
 80a8f3a:	70bb      	strb	r3, [r7, #2]
 80a8f3c:	4613      	mov	r3, r2
 80a8f3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80a8f40:	2300      	movs	r3, #0
 80a8f42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a8f44:	2300      	movs	r3, #0
 80a8f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80a8f48:	687b      	ldr	r3, [r7, #4]
 80a8f4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80a8f4e:	78bb      	ldrb	r3, [r7, #2]
 80a8f50:	883a      	ldrh	r2, [r7, #0]
 80a8f52:	78f9      	ldrb	r1, [r7, #3]
 80a8f54:	f7f8 ffc3 	bl	80a1ede <HAL_PCD_EP_Open>
 80a8f58:	4603      	mov	r3, r0
 80a8f5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80a8f5c:	7bfb      	ldrb	r3, [r7, #15]
 80a8f5e:	4618      	mov	r0, r3
 80a8f60:	f000 f91c 	bl	80a919c <USBD_Get_USB_Status>
 80a8f64:	4603      	mov	r3, r0
 80a8f66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80a8f68:	7bbb      	ldrb	r3, [r7, #14]
}
 80a8f6a:	4618      	mov	r0, r3
 80a8f6c:	3710      	adds	r7, #16
 80a8f6e:	46bd      	mov	sp, r7
 80a8f70:	bd80      	pop	{r7, pc}

080a8f72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80a8f72:	b580      	push	{r7, lr}
 80a8f74:	b084      	sub	sp, #16
 80a8f76:	af00      	add	r7, sp, #0
 80a8f78:	6078      	str	r0, [r7, #4]
 80a8f7a:	460b      	mov	r3, r1
 80a8f7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80a8f7e:	2300      	movs	r3, #0
 80a8f80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a8f82:	2300      	movs	r3, #0
 80a8f84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80a8f86:	687b      	ldr	r3, [r7, #4]
 80a8f88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80a8f8c:	78fa      	ldrb	r2, [r7, #3]
 80a8f8e:	4611      	mov	r1, r2
 80a8f90:	4618      	mov	r0, r3
 80a8f92:	f7f9 f80e 	bl	80a1fb2 <HAL_PCD_EP_Close>
 80a8f96:	4603      	mov	r3, r0
 80a8f98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80a8f9a:	7bfb      	ldrb	r3, [r7, #15]
 80a8f9c:	4618      	mov	r0, r3
 80a8f9e:	f000 f8fd 	bl	80a919c <USBD_Get_USB_Status>
 80a8fa2:	4603      	mov	r3, r0
 80a8fa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80a8fa6:	7bbb      	ldrb	r3, [r7, #14]
}
 80a8fa8:	4618      	mov	r0, r3
 80a8faa:	3710      	adds	r7, #16
 80a8fac:	46bd      	mov	sp, r7
 80a8fae:	bd80      	pop	{r7, pc}

080a8fb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80a8fb0:	b580      	push	{r7, lr}
 80a8fb2:	b084      	sub	sp, #16
 80a8fb4:	af00      	add	r7, sp, #0
 80a8fb6:	6078      	str	r0, [r7, #4]
 80a8fb8:	460b      	mov	r3, r1
 80a8fba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80a8fbc:	2300      	movs	r3, #0
 80a8fbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a8fc0:	2300      	movs	r3, #0
 80a8fc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80a8fc4:	687b      	ldr	r3, [r7, #4]
 80a8fc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80a8fca:	78fa      	ldrb	r2, [r7, #3]
 80a8fcc:	4611      	mov	r1, r2
 80a8fce:	4618      	mov	r0, r3
 80a8fd0:	f7f9 f8c6 	bl	80a2160 <HAL_PCD_EP_SetStall>
 80a8fd4:	4603      	mov	r3, r0
 80a8fd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80a8fd8:	7bfb      	ldrb	r3, [r7, #15]
 80a8fda:	4618      	mov	r0, r3
 80a8fdc:	f000 f8de 	bl	80a919c <USBD_Get_USB_Status>
 80a8fe0:	4603      	mov	r3, r0
 80a8fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80a8fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 80a8fe6:	4618      	mov	r0, r3
 80a8fe8:	3710      	adds	r7, #16
 80a8fea:	46bd      	mov	sp, r7
 80a8fec:	bd80      	pop	{r7, pc}

080a8fee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80a8fee:	b580      	push	{r7, lr}
 80a8ff0:	b084      	sub	sp, #16
 80a8ff2:	af00      	add	r7, sp, #0
 80a8ff4:	6078      	str	r0, [r7, #4]
 80a8ff6:	460b      	mov	r3, r1
 80a8ff8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80a8ffa:	2300      	movs	r3, #0
 80a8ffc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a8ffe:	2300      	movs	r3, #0
 80a9000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80a9002:	687b      	ldr	r3, [r7, #4]
 80a9004:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80a9008:	78fa      	ldrb	r2, [r7, #3]
 80a900a:	4611      	mov	r1, r2
 80a900c:	4618      	mov	r0, r3
 80a900e:	f7f9 f90a 	bl	80a2226 <HAL_PCD_EP_ClrStall>
 80a9012:	4603      	mov	r3, r0
 80a9014:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80a9016:	7bfb      	ldrb	r3, [r7, #15]
 80a9018:	4618      	mov	r0, r3
 80a901a:	f000 f8bf 	bl	80a919c <USBD_Get_USB_Status>
 80a901e:	4603      	mov	r3, r0
 80a9020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80a9022:	7bbb      	ldrb	r3, [r7, #14]
}
 80a9024:	4618      	mov	r0, r3
 80a9026:	3710      	adds	r7, #16
 80a9028:	46bd      	mov	sp, r7
 80a902a:	bd80      	pop	{r7, pc}

080a902c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80a902c:	b480      	push	{r7}
 80a902e:	b085      	sub	sp, #20
 80a9030:	af00      	add	r7, sp, #0
 80a9032:	6078      	str	r0, [r7, #4]
 80a9034:	460b      	mov	r3, r1
 80a9036:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80a9038:	687b      	ldr	r3, [r7, #4]
 80a903a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80a903e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80a9040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80a9044:	2b00      	cmp	r3, #0
 80a9046:	da0b      	bge.n	80a9060 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80a9048:	78fb      	ldrb	r3, [r7, #3]
 80a904a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80a904e:	68f9      	ldr	r1, [r7, #12]
 80a9050:	4613      	mov	r3, r2
 80a9052:	00db      	lsls	r3, r3, #3
 80a9054:	4413      	add	r3, r2
 80a9056:	009b      	lsls	r3, r3, #2
 80a9058:	440b      	add	r3, r1
 80a905a:	3316      	adds	r3, #22
 80a905c:	781b      	ldrb	r3, [r3, #0]
 80a905e:	e00b      	b.n	80a9078 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80a9060:	78fb      	ldrb	r3, [r7, #3]
 80a9062:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80a9066:	68f9      	ldr	r1, [r7, #12]
 80a9068:	4613      	mov	r3, r2
 80a906a:	00db      	lsls	r3, r3, #3
 80a906c:	4413      	add	r3, r2
 80a906e:	009b      	lsls	r3, r3, #2
 80a9070:	440b      	add	r3, r1
 80a9072:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80a9076:	781b      	ldrb	r3, [r3, #0]
  }
}
 80a9078:	4618      	mov	r0, r3
 80a907a:	3714      	adds	r7, #20
 80a907c:	46bd      	mov	sp, r7
 80a907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a9082:	4770      	bx	lr

080a9084 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80a9084:	b580      	push	{r7, lr}
 80a9086:	b084      	sub	sp, #16
 80a9088:	af00      	add	r7, sp, #0
 80a908a:	6078      	str	r0, [r7, #4]
 80a908c:	460b      	mov	r3, r1
 80a908e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80a9090:	2300      	movs	r3, #0
 80a9092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a9094:	2300      	movs	r3, #0
 80a9096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80a9098:	687b      	ldr	r3, [r7, #4]
 80a909a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80a909e:	78fa      	ldrb	r2, [r7, #3]
 80a90a0:	4611      	mov	r1, r2
 80a90a2:	4618      	mov	r0, r3
 80a90a4:	f7f8 fef7 	bl	80a1e96 <HAL_PCD_SetAddress>
 80a90a8:	4603      	mov	r3, r0
 80a90aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80a90ac:	7bfb      	ldrb	r3, [r7, #15]
 80a90ae:	4618      	mov	r0, r3
 80a90b0:	f000 f874 	bl	80a919c <USBD_Get_USB_Status>
 80a90b4:	4603      	mov	r3, r0
 80a90b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80a90b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80a90ba:	4618      	mov	r0, r3
 80a90bc:	3710      	adds	r7, #16
 80a90be:	46bd      	mov	sp, r7
 80a90c0:	bd80      	pop	{r7, pc}

080a90c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80a90c2:	b580      	push	{r7, lr}
 80a90c4:	b086      	sub	sp, #24
 80a90c6:	af00      	add	r7, sp, #0
 80a90c8:	60f8      	str	r0, [r7, #12]
 80a90ca:	607a      	str	r2, [r7, #4]
 80a90cc:	603b      	str	r3, [r7, #0]
 80a90ce:	460b      	mov	r3, r1
 80a90d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80a90d2:	2300      	movs	r3, #0
 80a90d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a90d6:	2300      	movs	r3, #0
 80a90d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80a90da:	68fb      	ldr	r3, [r7, #12]
 80a90dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80a90e0:	7af9      	ldrb	r1, [r7, #11]
 80a90e2:	683b      	ldr	r3, [r7, #0]
 80a90e4:	687a      	ldr	r2, [r7, #4]
 80a90e6:	f7f9 f801 	bl	80a20ec <HAL_PCD_EP_Transmit>
 80a90ea:	4603      	mov	r3, r0
 80a90ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80a90ee:	7dfb      	ldrb	r3, [r7, #23]
 80a90f0:	4618      	mov	r0, r3
 80a90f2:	f000 f853 	bl	80a919c <USBD_Get_USB_Status>
 80a90f6:	4603      	mov	r3, r0
 80a90f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80a90fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80a90fc:	4618      	mov	r0, r3
 80a90fe:	3718      	adds	r7, #24
 80a9100:	46bd      	mov	sp, r7
 80a9102:	bd80      	pop	{r7, pc}

080a9104 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80a9104:	b580      	push	{r7, lr}
 80a9106:	b086      	sub	sp, #24
 80a9108:	af00      	add	r7, sp, #0
 80a910a:	60f8      	str	r0, [r7, #12]
 80a910c:	607a      	str	r2, [r7, #4]
 80a910e:	603b      	str	r3, [r7, #0]
 80a9110:	460b      	mov	r3, r1
 80a9112:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80a9114:	2300      	movs	r3, #0
 80a9116:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a9118:	2300      	movs	r3, #0
 80a911a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80a911c:	68fb      	ldr	r3, [r7, #12]
 80a911e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80a9122:	7af9      	ldrb	r1, [r7, #11]
 80a9124:	683b      	ldr	r3, [r7, #0]
 80a9126:	687a      	ldr	r2, [r7, #4]
 80a9128:	f7f8 ff8d 	bl	80a2046 <HAL_PCD_EP_Receive>
 80a912c:	4603      	mov	r3, r0
 80a912e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80a9130:	7dfb      	ldrb	r3, [r7, #23]
 80a9132:	4618      	mov	r0, r3
 80a9134:	f000 f832 	bl	80a919c <USBD_Get_USB_Status>
 80a9138:	4603      	mov	r3, r0
 80a913a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80a913c:	7dbb      	ldrb	r3, [r7, #22]
}
 80a913e:	4618      	mov	r0, r3
 80a9140:	3718      	adds	r7, #24
 80a9142:	46bd      	mov	sp, r7
 80a9144:	bd80      	pop	{r7, pc}

080a9146 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80a9146:	b580      	push	{r7, lr}
 80a9148:	b082      	sub	sp, #8
 80a914a:	af00      	add	r7, sp, #0
 80a914c:	6078      	str	r0, [r7, #4]
 80a914e:	460b      	mov	r3, r1
 80a9150:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80a9152:	687b      	ldr	r3, [r7, #4]
 80a9154:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80a9158:	78fa      	ldrb	r2, [r7, #3]
 80a915a:	4611      	mov	r1, r2
 80a915c:	4618      	mov	r0, r3
 80a915e:	f7f8 ffad 	bl	80a20bc <HAL_PCD_EP_GetRxCount>
 80a9162:	4603      	mov	r3, r0
}
 80a9164:	4618      	mov	r0, r3
 80a9166:	3708      	adds	r7, #8
 80a9168:	46bd      	mov	sp, r7
 80a916a:	bd80      	pop	{r7, pc}

080a916c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80a916c:	b480      	push	{r7}
 80a916e:	b083      	sub	sp, #12
 80a9170:	af00      	add	r7, sp, #0
 80a9172:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80a9174:	4b03      	ldr	r3, [pc, #12]	@ (80a9184 <USBD_static_malloc+0x18>)
}
 80a9176:	4618      	mov	r0, r3
 80a9178:	370c      	adds	r7, #12
 80a917a:	46bd      	mov	sp, r7
 80a917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a9180:	4770      	bx	lr
 80a9182:	bf00      	nop
 80a9184:	24001b48 	.word	0x24001b48

080a9188 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80a9188:	b480      	push	{r7}
 80a918a:	b083      	sub	sp, #12
 80a918c:	af00      	add	r7, sp, #0
 80a918e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80a9190:	bf00      	nop
 80a9192:	370c      	adds	r7, #12
 80a9194:	46bd      	mov	sp, r7
 80a9196:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a919a:	4770      	bx	lr

080a919c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80a919c:	b480      	push	{r7}
 80a919e:	b085      	sub	sp, #20
 80a91a0:	af00      	add	r7, sp, #0
 80a91a2:	4603      	mov	r3, r0
 80a91a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a91a6:	2300      	movs	r3, #0
 80a91a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80a91aa:	79fb      	ldrb	r3, [r7, #7]
 80a91ac:	2b03      	cmp	r3, #3
 80a91ae:	d817      	bhi.n	80a91e0 <USBD_Get_USB_Status+0x44>
 80a91b0:	a201      	add	r2, pc, #4	@ (adr r2, 80a91b8 <USBD_Get_USB_Status+0x1c>)
 80a91b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a91b6:	bf00      	nop
 80a91b8:	080a91c9 	.word	0x080a91c9
 80a91bc:	080a91cf 	.word	0x080a91cf
 80a91c0:	080a91d5 	.word	0x080a91d5
 80a91c4:	080a91db 	.word	0x080a91db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80a91c8:	2300      	movs	r3, #0
 80a91ca:	73fb      	strb	r3, [r7, #15]
    break;
 80a91cc:	e00b      	b.n	80a91e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80a91ce:	2303      	movs	r3, #3
 80a91d0:	73fb      	strb	r3, [r7, #15]
    break;
 80a91d2:	e008      	b.n	80a91e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80a91d4:	2301      	movs	r3, #1
 80a91d6:	73fb      	strb	r3, [r7, #15]
    break;
 80a91d8:	e005      	b.n	80a91e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80a91da:	2303      	movs	r3, #3
 80a91dc:	73fb      	strb	r3, [r7, #15]
    break;
 80a91de:	e002      	b.n	80a91e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80a91e0:	2303      	movs	r3, #3
 80a91e2:	73fb      	strb	r3, [r7, #15]
    break;
 80a91e4:	bf00      	nop
  }
  return usb_status;
 80a91e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80a91e8:	4618      	mov	r0, r3
 80a91ea:	3714      	adds	r7, #20
 80a91ec:	46bd      	mov	sp, r7
 80a91ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a91f2:	4770      	bx	lr

080a91f4 <std>:
 80a91f4:	2300      	movs	r3, #0
 80a91f6:	b510      	push	{r4, lr}
 80a91f8:	4604      	mov	r4, r0
 80a91fa:	e9c0 3300 	strd	r3, r3, [r0]
 80a91fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80a9202:	6083      	str	r3, [r0, #8]
 80a9204:	8181      	strh	r1, [r0, #12]
 80a9206:	6643      	str	r3, [r0, #100]	@ 0x64
 80a9208:	81c2      	strh	r2, [r0, #14]
 80a920a:	6183      	str	r3, [r0, #24]
 80a920c:	4619      	mov	r1, r3
 80a920e:	2208      	movs	r2, #8
 80a9210:	305c      	adds	r0, #92	@ 0x5c
 80a9212:	f000 f906 	bl	80a9422 <memset>
 80a9216:	4b0d      	ldr	r3, [pc, #52]	@ (80a924c <std+0x58>)
 80a9218:	6263      	str	r3, [r4, #36]	@ 0x24
 80a921a:	4b0d      	ldr	r3, [pc, #52]	@ (80a9250 <std+0x5c>)
 80a921c:	62a3      	str	r3, [r4, #40]	@ 0x28
 80a921e:	4b0d      	ldr	r3, [pc, #52]	@ (80a9254 <std+0x60>)
 80a9220:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80a9222:	4b0d      	ldr	r3, [pc, #52]	@ (80a9258 <std+0x64>)
 80a9224:	6323      	str	r3, [r4, #48]	@ 0x30
 80a9226:	4b0d      	ldr	r3, [pc, #52]	@ (80a925c <std+0x68>)
 80a9228:	6224      	str	r4, [r4, #32]
 80a922a:	429c      	cmp	r4, r3
 80a922c:	d006      	beq.n	80a923c <std+0x48>
 80a922e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80a9232:	4294      	cmp	r4, r2
 80a9234:	d002      	beq.n	80a923c <std+0x48>
 80a9236:	33d0      	adds	r3, #208	@ 0xd0
 80a9238:	429c      	cmp	r4, r3
 80a923a:	d105      	bne.n	80a9248 <std+0x54>
 80a923c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80a9240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a9244:	f000 b966 	b.w	80a9514 <__retarget_lock_init_recursive>
 80a9248:	bd10      	pop	{r4, pc}
 80a924a:	bf00      	nop
 80a924c:	080a939d 	.word	0x080a939d
 80a9250:	080a93bf 	.word	0x080a93bf
 80a9254:	080a93f7 	.word	0x080a93f7
 80a9258:	080a941b 	.word	0x080a941b
 80a925c:	24001d68 	.word	0x24001d68

080a9260 <stdio_exit_handler>:
 80a9260:	4a02      	ldr	r2, [pc, #8]	@ (80a926c <stdio_exit_handler+0xc>)
 80a9262:	4903      	ldr	r1, [pc, #12]	@ (80a9270 <stdio_exit_handler+0x10>)
 80a9264:	4803      	ldr	r0, [pc, #12]	@ (80a9274 <stdio_exit_handler+0x14>)
 80a9266:	f000 b869 	b.w	80a933c <_fwalk_sglue>
 80a926a:	bf00      	nop
 80a926c:	24000104 	.word	0x24000104
 80a9270:	080a9db1 	.word	0x080a9db1
 80a9274:	24000114 	.word	0x24000114

080a9278 <cleanup_stdio>:
 80a9278:	6841      	ldr	r1, [r0, #4]
 80a927a:	4b0c      	ldr	r3, [pc, #48]	@ (80a92ac <cleanup_stdio+0x34>)
 80a927c:	4299      	cmp	r1, r3
 80a927e:	b510      	push	{r4, lr}
 80a9280:	4604      	mov	r4, r0
 80a9282:	d001      	beq.n	80a9288 <cleanup_stdio+0x10>
 80a9284:	f000 fd94 	bl	80a9db0 <_fflush_r>
 80a9288:	68a1      	ldr	r1, [r4, #8]
 80a928a:	4b09      	ldr	r3, [pc, #36]	@ (80a92b0 <cleanup_stdio+0x38>)
 80a928c:	4299      	cmp	r1, r3
 80a928e:	d002      	beq.n	80a9296 <cleanup_stdio+0x1e>
 80a9290:	4620      	mov	r0, r4
 80a9292:	f000 fd8d 	bl	80a9db0 <_fflush_r>
 80a9296:	68e1      	ldr	r1, [r4, #12]
 80a9298:	4b06      	ldr	r3, [pc, #24]	@ (80a92b4 <cleanup_stdio+0x3c>)
 80a929a:	4299      	cmp	r1, r3
 80a929c:	d004      	beq.n	80a92a8 <cleanup_stdio+0x30>
 80a929e:	4620      	mov	r0, r4
 80a92a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a92a4:	f000 bd84 	b.w	80a9db0 <_fflush_r>
 80a92a8:	bd10      	pop	{r4, pc}
 80a92aa:	bf00      	nop
 80a92ac:	24001d68 	.word	0x24001d68
 80a92b0:	24001dd0 	.word	0x24001dd0
 80a92b4:	24001e38 	.word	0x24001e38

080a92b8 <global_stdio_init.part.0>:
 80a92b8:	b510      	push	{r4, lr}
 80a92ba:	4b0b      	ldr	r3, [pc, #44]	@ (80a92e8 <global_stdio_init.part.0+0x30>)
 80a92bc:	4c0b      	ldr	r4, [pc, #44]	@ (80a92ec <global_stdio_init.part.0+0x34>)
 80a92be:	4a0c      	ldr	r2, [pc, #48]	@ (80a92f0 <global_stdio_init.part.0+0x38>)
 80a92c0:	601a      	str	r2, [r3, #0]
 80a92c2:	4620      	mov	r0, r4
 80a92c4:	2200      	movs	r2, #0
 80a92c6:	2104      	movs	r1, #4
 80a92c8:	f7ff ff94 	bl	80a91f4 <std>
 80a92cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80a92d0:	2201      	movs	r2, #1
 80a92d2:	2109      	movs	r1, #9
 80a92d4:	f7ff ff8e 	bl	80a91f4 <std>
 80a92d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80a92dc:	2202      	movs	r2, #2
 80a92de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a92e2:	2112      	movs	r1, #18
 80a92e4:	f7ff bf86 	b.w	80a91f4 <std>
 80a92e8:	24001ea0 	.word	0x24001ea0
 80a92ec:	24001d68 	.word	0x24001d68
 80a92f0:	080a9261 	.word	0x080a9261

080a92f4 <__sfp_lock_acquire>:
 80a92f4:	4801      	ldr	r0, [pc, #4]	@ (80a92fc <__sfp_lock_acquire+0x8>)
 80a92f6:	f000 b90e 	b.w	80a9516 <__retarget_lock_acquire_recursive>
 80a92fa:	bf00      	nop
 80a92fc:	24001ea9 	.word	0x24001ea9

080a9300 <__sfp_lock_release>:
 80a9300:	4801      	ldr	r0, [pc, #4]	@ (80a9308 <__sfp_lock_release+0x8>)
 80a9302:	f000 b909 	b.w	80a9518 <__retarget_lock_release_recursive>
 80a9306:	bf00      	nop
 80a9308:	24001ea9 	.word	0x24001ea9

080a930c <__sinit>:
 80a930c:	b510      	push	{r4, lr}
 80a930e:	4604      	mov	r4, r0
 80a9310:	f7ff fff0 	bl	80a92f4 <__sfp_lock_acquire>
 80a9314:	6a23      	ldr	r3, [r4, #32]
 80a9316:	b11b      	cbz	r3, 80a9320 <__sinit+0x14>
 80a9318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a931c:	f7ff bff0 	b.w	80a9300 <__sfp_lock_release>
 80a9320:	4b04      	ldr	r3, [pc, #16]	@ (80a9334 <__sinit+0x28>)
 80a9322:	6223      	str	r3, [r4, #32]
 80a9324:	4b04      	ldr	r3, [pc, #16]	@ (80a9338 <__sinit+0x2c>)
 80a9326:	681b      	ldr	r3, [r3, #0]
 80a9328:	2b00      	cmp	r3, #0
 80a932a:	d1f5      	bne.n	80a9318 <__sinit+0xc>
 80a932c:	f7ff ffc4 	bl	80a92b8 <global_stdio_init.part.0>
 80a9330:	e7f2      	b.n	80a9318 <__sinit+0xc>
 80a9332:	bf00      	nop
 80a9334:	080a9279 	.word	0x080a9279
 80a9338:	24001ea0 	.word	0x24001ea0

080a933c <_fwalk_sglue>:
 80a933c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a9340:	4607      	mov	r7, r0
 80a9342:	4688      	mov	r8, r1
 80a9344:	4614      	mov	r4, r2
 80a9346:	2600      	movs	r6, #0
 80a9348:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80a934c:	f1b9 0901 	subs.w	r9, r9, #1
 80a9350:	d505      	bpl.n	80a935e <_fwalk_sglue+0x22>
 80a9352:	6824      	ldr	r4, [r4, #0]
 80a9354:	2c00      	cmp	r4, #0
 80a9356:	d1f7      	bne.n	80a9348 <_fwalk_sglue+0xc>
 80a9358:	4630      	mov	r0, r6
 80a935a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a935e:	89ab      	ldrh	r3, [r5, #12]
 80a9360:	2b01      	cmp	r3, #1
 80a9362:	d907      	bls.n	80a9374 <_fwalk_sglue+0x38>
 80a9364:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80a9368:	3301      	adds	r3, #1
 80a936a:	d003      	beq.n	80a9374 <_fwalk_sglue+0x38>
 80a936c:	4629      	mov	r1, r5
 80a936e:	4638      	mov	r0, r7
 80a9370:	47c0      	blx	r8
 80a9372:	4306      	orrs	r6, r0
 80a9374:	3568      	adds	r5, #104	@ 0x68
 80a9376:	e7e9      	b.n	80a934c <_fwalk_sglue+0x10>

080a9378 <iprintf>:
 80a9378:	b40f      	push	{r0, r1, r2, r3}
 80a937a:	b507      	push	{r0, r1, r2, lr}
 80a937c:	4906      	ldr	r1, [pc, #24]	@ (80a9398 <iprintf+0x20>)
 80a937e:	ab04      	add	r3, sp, #16
 80a9380:	6808      	ldr	r0, [r1, #0]
 80a9382:	f853 2b04 	ldr.w	r2, [r3], #4
 80a9386:	6881      	ldr	r1, [r0, #8]
 80a9388:	9301      	str	r3, [sp, #4]
 80a938a:	f000 f9e9 	bl	80a9760 <_vfiprintf_r>
 80a938e:	b003      	add	sp, #12
 80a9390:	f85d eb04 	ldr.w	lr, [sp], #4
 80a9394:	b004      	add	sp, #16
 80a9396:	4770      	bx	lr
 80a9398:	24000110 	.word	0x24000110

080a939c <__sread>:
 80a939c:	b510      	push	{r4, lr}
 80a939e:	460c      	mov	r4, r1
 80a93a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80a93a4:	f000 f868 	bl	80a9478 <_read_r>
 80a93a8:	2800      	cmp	r0, #0
 80a93aa:	bfab      	itete	ge
 80a93ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80a93ae:	89a3      	ldrhlt	r3, [r4, #12]
 80a93b0:	181b      	addge	r3, r3, r0
 80a93b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80a93b6:	bfac      	ite	ge
 80a93b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80a93ba:	81a3      	strhlt	r3, [r4, #12]
 80a93bc:	bd10      	pop	{r4, pc}

080a93be <__swrite>:
 80a93be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a93c2:	461f      	mov	r7, r3
 80a93c4:	898b      	ldrh	r3, [r1, #12]
 80a93c6:	05db      	lsls	r3, r3, #23
 80a93c8:	4605      	mov	r5, r0
 80a93ca:	460c      	mov	r4, r1
 80a93cc:	4616      	mov	r6, r2
 80a93ce:	d505      	bpl.n	80a93dc <__swrite+0x1e>
 80a93d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80a93d4:	2302      	movs	r3, #2
 80a93d6:	2200      	movs	r2, #0
 80a93d8:	f000 f83c 	bl	80a9454 <_lseek_r>
 80a93dc:	89a3      	ldrh	r3, [r4, #12]
 80a93de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80a93e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80a93e6:	81a3      	strh	r3, [r4, #12]
 80a93e8:	4632      	mov	r2, r6
 80a93ea:	463b      	mov	r3, r7
 80a93ec:	4628      	mov	r0, r5
 80a93ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a93f2:	f000 b853 	b.w	80a949c <_write_r>

080a93f6 <__sseek>:
 80a93f6:	b510      	push	{r4, lr}
 80a93f8:	460c      	mov	r4, r1
 80a93fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80a93fe:	f000 f829 	bl	80a9454 <_lseek_r>
 80a9402:	1c43      	adds	r3, r0, #1
 80a9404:	89a3      	ldrh	r3, [r4, #12]
 80a9406:	bf15      	itete	ne
 80a9408:	6560      	strne	r0, [r4, #84]	@ 0x54
 80a940a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80a940e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80a9412:	81a3      	strheq	r3, [r4, #12]
 80a9414:	bf18      	it	ne
 80a9416:	81a3      	strhne	r3, [r4, #12]
 80a9418:	bd10      	pop	{r4, pc}

080a941a <__sclose>:
 80a941a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80a941e:	f000 b809 	b.w	80a9434 <_close_r>

080a9422 <memset>:
 80a9422:	4402      	add	r2, r0
 80a9424:	4603      	mov	r3, r0
 80a9426:	4293      	cmp	r3, r2
 80a9428:	d100      	bne.n	80a942c <memset+0xa>
 80a942a:	4770      	bx	lr
 80a942c:	f803 1b01 	strb.w	r1, [r3], #1
 80a9430:	e7f9      	b.n	80a9426 <memset+0x4>
	...

080a9434 <_close_r>:
 80a9434:	b538      	push	{r3, r4, r5, lr}
 80a9436:	4d06      	ldr	r5, [pc, #24]	@ (80a9450 <_close_r+0x1c>)
 80a9438:	2300      	movs	r3, #0
 80a943a:	4604      	mov	r4, r0
 80a943c:	4608      	mov	r0, r1
 80a943e:	602b      	str	r3, [r5, #0]
 80a9440:	f7f7 fa9f 	bl	80a0982 <_close>
 80a9444:	1c43      	adds	r3, r0, #1
 80a9446:	d102      	bne.n	80a944e <_close_r+0x1a>
 80a9448:	682b      	ldr	r3, [r5, #0]
 80a944a:	b103      	cbz	r3, 80a944e <_close_r+0x1a>
 80a944c:	6023      	str	r3, [r4, #0]
 80a944e:	bd38      	pop	{r3, r4, r5, pc}
 80a9450:	24001ea4 	.word	0x24001ea4

080a9454 <_lseek_r>:
 80a9454:	b538      	push	{r3, r4, r5, lr}
 80a9456:	4d07      	ldr	r5, [pc, #28]	@ (80a9474 <_lseek_r+0x20>)
 80a9458:	4604      	mov	r4, r0
 80a945a:	4608      	mov	r0, r1
 80a945c:	4611      	mov	r1, r2
 80a945e:	2200      	movs	r2, #0
 80a9460:	602a      	str	r2, [r5, #0]
 80a9462:	461a      	mov	r2, r3
 80a9464:	f7f7 fab4 	bl	80a09d0 <_lseek>
 80a9468:	1c43      	adds	r3, r0, #1
 80a946a:	d102      	bne.n	80a9472 <_lseek_r+0x1e>
 80a946c:	682b      	ldr	r3, [r5, #0]
 80a946e:	b103      	cbz	r3, 80a9472 <_lseek_r+0x1e>
 80a9470:	6023      	str	r3, [r4, #0]
 80a9472:	bd38      	pop	{r3, r4, r5, pc}
 80a9474:	24001ea4 	.word	0x24001ea4

080a9478 <_read_r>:
 80a9478:	b538      	push	{r3, r4, r5, lr}
 80a947a:	4d07      	ldr	r5, [pc, #28]	@ (80a9498 <_read_r+0x20>)
 80a947c:	4604      	mov	r4, r0
 80a947e:	4608      	mov	r0, r1
 80a9480:	4611      	mov	r1, r2
 80a9482:	2200      	movs	r2, #0
 80a9484:	602a      	str	r2, [r5, #0]
 80a9486:	461a      	mov	r2, r3
 80a9488:	f7f7 fa42 	bl	80a0910 <_read>
 80a948c:	1c43      	adds	r3, r0, #1
 80a948e:	d102      	bne.n	80a9496 <_read_r+0x1e>
 80a9490:	682b      	ldr	r3, [r5, #0]
 80a9492:	b103      	cbz	r3, 80a9496 <_read_r+0x1e>
 80a9494:	6023      	str	r3, [r4, #0]
 80a9496:	bd38      	pop	{r3, r4, r5, pc}
 80a9498:	24001ea4 	.word	0x24001ea4

080a949c <_write_r>:
 80a949c:	b538      	push	{r3, r4, r5, lr}
 80a949e:	4d07      	ldr	r5, [pc, #28]	@ (80a94bc <_write_r+0x20>)
 80a94a0:	4604      	mov	r4, r0
 80a94a2:	4608      	mov	r0, r1
 80a94a4:	4611      	mov	r1, r2
 80a94a6:	2200      	movs	r2, #0
 80a94a8:	602a      	str	r2, [r5, #0]
 80a94aa:	461a      	mov	r2, r3
 80a94ac:	f7f7 fa4d 	bl	80a094a <_write>
 80a94b0:	1c43      	adds	r3, r0, #1
 80a94b2:	d102      	bne.n	80a94ba <_write_r+0x1e>
 80a94b4:	682b      	ldr	r3, [r5, #0]
 80a94b6:	b103      	cbz	r3, 80a94ba <_write_r+0x1e>
 80a94b8:	6023      	str	r3, [r4, #0]
 80a94ba:	bd38      	pop	{r3, r4, r5, pc}
 80a94bc:	24001ea4 	.word	0x24001ea4

080a94c0 <__errno>:
 80a94c0:	4b01      	ldr	r3, [pc, #4]	@ (80a94c8 <__errno+0x8>)
 80a94c2:	6818      	ldr	r0, [r3, #0]
 80a94c4:	4770      	bx	lr
 80a94c6:	bf00      	nop
 80a94c8:	24000110 	.word	0x24000110

080a94cc <__libc_init_array>:
 80a94cc:	b570      	push	{r4, r5, r6, lr}
 80a94ce:	4d0d      	ldr	r5, [pc, #52]	@ (80a9504 <__libc_init_array+0x38>)
 80a94d0:	4c0d      	ldr	r4, [pc, #52]	@ (80a9508 <__libc_init_array+0x3c>)
 80a94d2:	1b64      	subs	r4, r4, r5
 80a94d4:	10a4      	asrs	r4, r4, #2
 80a94d6:	2600      	movs	r6, #0
 80a94d8:	42a6      	cmp	r6, r4
 80a94da:	d109      	bne.n	80a94f0 <__libc_init_array+0x24>
 80a94dc:	4d0b      	ldr	r5, [pc, #44]	@ (80a950c <__libc_init_array+0x40>)
 80a94de:	4c0c      	ldr	r4, [pc, #48]	@ (80a9510 <__libc_init_array+0x44>)
 80a94e0:	f000 fdb6 	bl	80aa050 <_init>
 80a94e4:	1b64      	subs	r4, r4, r5
 80a94e6:	10a4      	asrs	r4, r4, #2
 80a94e8:	2600      	movs	r6, #0
 80a94ea:	42a6      	cmp	r6, r4
 80a94ec:	d105      	bne.n	80a94fa <__libc_init_array+0x2e>
 80a94ee:	bd70      	pop	{r4, r5, r6, pc}
 80a94f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80a94f4:	4798      	blx	r3
 80a94f6:	3601      	adds	r6, #1
 80a94f8:	e7ee      	b.n	80a94d8 <__libc_init_array+0xc>
 80a94fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80a94fe:	4798      	blx	r3
 80a9500:	3601      	adds	r6, #1
 80a9502:	e7f2      	b.n	80a94ea <__libc_init_array+0x1e>
 80a9504:	080aa130 	.word	0x080aa130
 80a9508:	080aa130 	.word	0x080aa130
 80a950c:	080aa130 	.word	0x080aa130
 80a9510:	080aa134 	.word	0x080aa134

080a9514 <__retarget_lock_init_recursive>:
 80a9514:	4770      	bx	lr

080a9516 <__retarget_lock_acquire_recursive>:
 80a9516:	4770      	bx	lr

080a9518 <__retarget_lock_release_recursive>:
 80a9518:	4770      	bx	lr
	...

080a951c <_free_r>:
 80a951c:	b538      	push	{r3, r4, r5, lr}
 80a951e:	4605      	mov	r5, r0
 80a9520:	2900      	cmp	r1, #0
 80a9522:	d041      	beq.n	80a95a8 <_free_r+0x8c>
 80a9524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80a9528:	1f0c      	subs	r4, r1, #4
 80a952a:	2b00      	cmp	r3, #0
 80a952c:	bfb8      	it	lt
 80a952e:	18e4      	addlt	r4, r4, r3
 80a9530:	f000 f8e0 	bl	80a96f4 <__malloc_lock>
 80a9534:	4a1d      	ldr	r2, [pc, #116]	@ (80a95ac <_free_r+0x90>)
 80a9536:	6813      	ldr	r3, [r2, #0]
 80a9538:	b933      	cbnz	r3, 80a9548 <_free_r+0x2c>
 80a953a:	6063      	str	r3, [r4, #4]
 80a953c:	6014      	str	r4, [r2, #0]
 80a953e:	4628      	mov	r0, r5
 80a9540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a9544:	f000 b8dc 	b.w	80a9700 <__malloc_unlock>
 80a9548:	42a3      	cmp	r3, r4
 80a954a:	d908      	bls.n	80a955e <_free_r+0x42>
 80a954c:	6820      	ldr	r0, [r4, #0]
 80a954e:	1821      	adds	r1, r4, r0
 80a9550:	428b      	cmp	r3, r1
 80a9552:	bf01      	itttt	eq
 80a9554:	6819      	ldreq	r1, [r3, #0]
 80a9556:	685b      	ldreq	r3, [r3, #4]
 80a9558:	1809      	addeq	r1, r1, r0
 80a955a:	6021      	streq	r1, [r4, #0]
 80a955c:	e7ed      	b.n	80a953a <_free_r+0x1e>
 80a955e:	461a      	mov	r2, r3
 80a9560:	685b      	ldr	r3, [r3, #4]
 80a9562:	b10b      	cbz	r3, 80a9568 <_free_r+0x4c>
 80a9564:	42a3      	cmp	r3, r4
 80a9566:	d9fa      	bls.n	80a955e <_free_r+0x42>
 80a9568:	6811      	ldr	r1, [r2, #0]
 80a956a:	1850      	adds	r0, r2, r1
 80a956c:	42a0      	cmp	r0, r4
 80a956e:	d10b      	bne.n	80a9588 <_free_r+0x6c>
 80a9570:	6820      	ldr	r0, [r4, #0]
 80a9572:	4401      	add	r1, r0
 80a9574:	1850      	adds	r0, r2, r1
 80a9576:	4283      	cmp	r3, r0
 80a9578:	6011      	str	r1, [r2, #0]
 80a957a:	d1e0      	bne.n	80a953e <_free_r+0x22>
 80a957c:	6818      	ldr	r0, [r3, #0]
 80a957e:	685b      	ldr	r3, [r3, #4]
 80a9580:	6053      	str	r3, [r2, #4]
 80a9582:	4408      	add	r0, r1
 80a9584:	6010      	str	r0, [r2, #0]
 80a9586:	e7da      	b.n	80a953e <_free_r+0x22>
 80a9588:	d902      	bls.n	80a9590 <_free_r+0x74>
 80a958a:	230c      	movs	r3, #12
 80a958c:	602b      	str	r3, [r5, #0]
 80a958e:	e7d6      	b.n	80a953e <_free_r+0x22>
 80a9590:	6820      	ldr	r0, [r4, #0]
 80a9592:	1821      	adds	r1, r4, r0
 80a9594:	428b      	cmp	r3, r1
 80a9596:	bf04      	itt	eq
 80a9598:	6819      	ldreq	r1, [r3, #0]
 80a959a:	685b      	ldreq	r3, [r3, #4]
 80a959c:	6063      	str	r3, [r4, #4]
 80a959e:	bf04      	itt	eq
 80a95a0:	1809      	addeq	r1, r1, r0
 80a95a2:	6021      	streq	r1, [r4, #0]
 80a95a4:	6054      	str	r4, [r2, #4]
 80a95a6:	e7ca      	b.n	80a953e <_free_r+0x22>
 80a95a8:	bd38      	pop	{r3, r4, r5, pc}
 80a95aa:	bf00      	nop
 80a95ac:	24001eb0 	.word	0x24001eb0

080a95b0 <sbrk_aligned>:
 80a95b0:	b570      	push	{r4, r5, r6, lr}
 80a95b2:	4e0f      	ldr	r6, [pc, #60]	@ (80a95f0 <sbrk_aligned+0x40>)
 80a95b4:	460c      	mov	r4, r1
 80a95b6:	6831      	ldr	r1, [r6, #0]
 80a95b8:	4605      	mov	r5, r0
 80a95ba:	b911      	cbnz	r1, 80a95c2 <sbrk_aligned+0x12>
 80a95bc:	f000 fcb4 	bl	80a9f28 <_sbrk_r>
 80a95c0:	6030      	str	r0, [r6, #0]
 80a95c2:	4621      	mov	r1, r4
 80a95c4:	4628      	mov	r0, r5
 80a95c6:	f000 fcaf 	bl	80a9f28 <_sbrk_r>
 80a95ca:	1c43      	adds	r3, r0, #1
 80a95cc:	d103      	bne.n	80a95d6 <sbrk_aligned+0x26>
 80a95ce:	f04f 34ff 	mov.w	r4, #4294967295
 80a95d2:	4620      	mov	r0, r4
 80a95d4:	bd70      	pop	{r4, r5, r6, pc}
 80a95d6:	1cc4      	adds	r4, r0, #3
 80a95d8:	f024 0403 	bic.w	r4, r4, #3
 80a95dc:	42a0      	cmp	r0, r4
 80a95de:	d0f8      	beq.n	80a95d2 <sbrk_aligned+0x22>
 80a95e0:	1a21      	subs	r1, r4, r0
 80a95e2:	4628      	mov	r0, r5
 80a95e4:	f000 fca0 	bl	80a9f28 <_sbrk_r>
 80a95e8:	3001      	adds	r0, #1
 80a95ea:	d1f2      	bne.n	80a95d2 <sbrk_aligned+0x22>
 80a95ec:	e7ef      	b.n	80a95ce <sbrk_aligned+0x1e>
 80a95ee:	bf00      	nop
 80a95f0:	24001eac 	.word	0x24001eac

080a95f4 <_malloc_r>:
 80a95f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a95f8:	1ccd      	adds	r5, r1, #3
 80a95fa:	f025 0503 	bic.w	r5, r5, #3
 80a95fe:	3508      	adds	r5, #8
 80a9600:	2d0c      	cmp	r5, #12
 80a9602:	bf38      	it	cc
 80a9604:	250c      	movcc	r5, #12
 80a9606:	2d00      	cmp	r5, #0
 80a9608:	4606      	mov	r6, r0
 80a960a:	db01      	blt.n	80a9610 <_malloc_r+0x1c>
 80a960c:	42a9      	cmp	r1, r5
 80a960e:	d904      	bls.n	80a961a <_malloc_r+0x26>
 80a9610:	230c      	movs	r3, #12
 80a9612:	6033      	str	r3, [r6, #0]
 80a9614:	2000      	movs	r0, #0
 80a9616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a961a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80a96f0 <_malloc_r+0xfc>
 80a961e:	f000 f869 	bl	80a96f4 <__malloc_lock>
 80a9622:	f8d8 3000 	ldr.w	r3, [r8]
 80a9626:	461c      	mov	r4, r3
 80a9628:	bb44      	cbnz	r4, 80a967c <_malloc_r+0x88>
 80a962a:	4629      	mov	r1, r5
 80a962c:	4630      	mov	r0, r6
 80a962e:	f7ff ffbf 	bl	80a95b0 <sbrk_aligned>
 80a9632:	1c43      	adds	r3, r0, #1
 80a9634:	4604      	mov	r4, r0
 80a9636:	d158      	bne.n	80a96ea <_malloc_r+0xf6>
 80a9638:	f8d8 4000 	ldr.w	r4, [r8]
 80a963c:	4627      	mov	r7, r4
 80a963e:	2f00      	cmp	r7, #0
 80a9640:	d143      	bne.n	80a96ca <_malloc_r+0xd6>
 80a9642:	2c00      	cmp	r4, #0
 80a9644:	d04b      	beq.n	80a96de <_malloc_r+0xea>
 80a9646:	6823      	ldr	r3, [r4, #0]
 80a9648:	4639      	mov	r1, r7
 80a964a:	4630      	mov	r0, r6
 80a964c:	eb04 0903 	add.w	r9, r4, r3
 80a9650:	f000 fc6a 	bl	80a9f28 <_sbrk_r>
 80a9654:	4581      	cmp	r9, r0
 80a9656:	d142      	bne.n	80a96de <_malloc_r+0xea>
 80a9658:	6821      	ldr	r1, [r4, #0]
 80a965a:	1a6d      	subs	r5, r5, r1
 80a965c:	4629      	mov	r1, r5
 80a965e:	4630      	mov	r0, r6
 80a9660:	f7ff ffa6 	bl	80a95b0 <sbrk_aligned>
 80a9664:	3001      	adds	r0, #1
 80a9666:	d03a      	beq.n	80a96de <_malloc_r+0xea>
 80a9668:	6823      	ldr	r3, [r4, #0]
 80a966a:	442b      	add	r3, r5
 80a966c:	6023      	str	r3, [r4, #0]
 80a966e:	f8d8 3000 	ldr.w	r3, [r8]
 80a9672:	685a      	ldr	r2, [r3, #4]
 80a9674:	bb62      	cbnz	r2, 80a96d0 <_malloc_r+0xdc>
 80a9676:	f8c8 7000 	str.w	r7, [r8]
 80a967a:	e00f      	b.n	80a969c <_malloc_r+0xa8>
 80a967c:	6822      	ldr	r2, [r4, #0]
 80a967e:	1b52      	subs	r2, r2, r5
 80a9680:	d420      	bmi.n	80a96c4 <_malloc_r+0xd0>
 80a9682:	2a0b      	cmp	r2, #11
 80a9684:	d917      	bls.n	80a96b6 <_malloc_r+0xc2>
 80a9686:	1961      	adds	r1, r4, r5
 80a9688:	42a3      	cmp	r3, r4
 80a968a:	6025      	str	r5, [r4, #0]
 80a968c:	bf18      	it	ne
 80a968e:	6059      	strne	r1, [r3, #4]
 80a9690:	6863      	ldr	r3, [r4, #4]
 80a9692:	bf08      	it	eq
 80a9694:	f8c8 1000 	streq.w	r1, [r8]
 80a9698:	5162      	str	r2, [r4, r5]
 80a969a:	604b      	str	r3, [r1, #4]
 80a969c:	4630      	mov	r0, r6
 80a969e:	f000 f82f 	bl	80a9700 <__malloc_unlock>
 80a96a2:	f104 000b 	add.w	r0, r4, #11
 80a96a6:	1d23      	adds	r3, r4, #4
 80a96a8:	f020 0007 	bic.w	r0, r0, #7
 80a96ac:	1ac2      	subs	r2, r0, r3
 80a96ae:	bf1c      	itt	ne
 80a96b0:	1a1b      	subne	r3, r3, r0
 80a96b2:	50a3      	strne	r3, [r4, r2]
 80a96b4:	e7af      	b.n	80a9616 <_malloc_r+0x22>
 80a96b6:	6862      	ldr	r2, [r4, #4]
 80a96b8:	42a3      	cmp	r3, r4
 80a96ba:	bf0c      	ite	eq
 80a96bc:	f8c8 2000 	streq.w	r2, [r8]
 80a96c0:	605a      	strne	r2, [r3, #4]
 80a96c2:	e7eb      	b.n	80a969c <_malloc_r+0xa8>
 80a96c4:	4623      	mov	r3, r4
 80a96c6:	6864      	ldr	r4, [r4, #4]
 80a96c8:	e7ae      	b.n	80a9628 <_malloc_r+0x34>
 80a96ca:	463c      	mov	r4, r7
 80a96cc:	687f      	ldr	r7, [r7, #4]
 80a96ce:	e7b6      	b.n	80a963e <_malloc_r+0x4a>
 80a96d0:	461a      	mov	r2, r3
 80a96d2:	685b      	ldr	r3, [r3, #4]
 80a96d4:	42a3      	cmp	r3, r4
 80a96d6:	d1fb      	bne.n	80a96d0 <_malloc_r+0xdc>
 80a96d8:	2300      	movs	r3, #0
 80a96da:	6053      	str	r3, [r2, #4]
 80a96dc:	e7de      	b.n	80a969c <_malloc_r+0xa8>
 80a96de:	230c      	movs	r3, #12
 80a96e0:	6033      	str	r3, [r6, #0]
 80a96e2:	4630      	mov	r0, r6
 80a96e4:	f000 f80c 	bl	80a9700 <__malloc_unlock>
 80a96e8:	e794      	b.n	80a9614 <_malloc_r+0x20>
 80a96ea:	6005      	str	r5, [r0, #0]
 80a96ec:	e7d6      	b.n	80a969c <_malloc_r+0xa8>
 80a96ee:	bf00      	nop
 80a96f0:	24001eb0 	.word	0x24001eb0

080a96f4 <__malloc_lock>:
 80a96f4:	4801      	ldr	r0, [pc, #4]	@ (80a96fc <__malloc_lock+0x8>)
 80a96f6:	f7ff bf0e 	b.w	80a9516 <__retarget_lock_acquire_recursive>
 80a96fa:	bf00      	nop
 80a96fc:	24001ea8 	.word	0x24001ea8

080a9700 <__malloc_unlock>:
 80a9700:	4801      	ldr	r0, [pc, #4]	@ (80a9708 <__malloc_unlock+0x8>)
 80a9702:	f7ff bf09 	b.w	80a9518 <__retarget_lock_release_recursive>
 80a9706:	bf00      	nop
 80a9708:	24001ea8 	.word	0x24001ea8

080a970c <__sfputc_r>:
 80a970c:	6893      	ldr	r3, [r2, #8]
 80a970e:	3b01      	subs	r3, #1
 80a9710:	2b00      	cmp	r3, #0
 80a9712:	b410      	push	{r4}
 80a9714:	6093      	str	r3, [r2, #8]
 80a9716:	da08      	bge.n	80a972a <__sfputc_r+0x1e>
 80a9718:	6994      	ldr	r4, [r2, #24]
 80a971a:	42a3      	cmp	r3, r4
 80a971c:	db01      	blt.n	80a9722 <__sfputc_r+0x16>
 80a971e:	290a      	cmp	r1, #10
 80a9720:	d103      	bne.n	80a972a <__sfputc_r+0x1e>
 80a9722:	f85d 4b04 	ldr.w	r4, [sp], #4
 80a9726:	f000 bb6b 	b.w	80a9e00 <__swbuf_r>
 80a972a:	6813      	ldr	r3, [r2, #0]
 80a972c:	1c58      	adds	r0, r3, #1
 80a972e:	6010      	str	r0, [r2, #0]
 80a9730:	7019      	strb	r1, [r3, #0]
 80a9732:	4608      	mov	r0, r1
 80a9734:	f85d 4b04 	ldr.w	r4, [sp], #4
 80a9738:	4770      	bx	lr

080a973a <__sfputs_r>:
 80a973a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a973c:	4606      	mov	r6, r0
 80a973e:	460f      	mov	r7, r1
 80a9740:	4614      	mov	r4, r2
 80a9742:	18d5      	adds	r5, r2, r3
 80a9744:	42ac      	cmp	r4, r5
 80a9746:	d101      	bne.n	80a974c <__sfputs_r+0x12>
 80a9748:	2000      	movs	r0, #0
 80a974a:	e007      	b.n	80a975c <__sfputs_r+0x22>
 80a974c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a9750:	463a      	mov	r2, r7
 80a9752:	4630      	mov	r0, r6
 80a9754:	f7ff ffda 	bl	80a970c <__sfputc_r>
 80a9758:	1c43      	adds	r3, r0, #1
 80a975a:	d1f3      	bne.n	80a9744 <__sfputs_r+0xa>
 80a975c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a9760 <_vfiprintf_r>:
 80a9760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9764:	460d      	mov	r5, r1
 80a9766:	b09d      	sub	sp, #116	@ 0x74
 80a9768:	4614      	mov	r4, r2
 80a976a:	4698      	mov	r8, r3
 80a976c:	4606      	mov	r6, r0
 80a976e:	b118      	cbz	r0, 80a9778 <_vfiprintf_r+0x18>
 80a9770:	6a03      	ldr	r3, [r0, #32]
 80a9772:	b90b      	cbnz	r3, 80a9778 <_vfiprintf_r+0x18>
 80a9774:	f7ff fdca 	bl	80a930c <__sinit>
 80a9778:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80a977a:	07d9      	lsls	r1, r3, #31
 80a977c:	d405      	bmi.n	80a978a <_vfiprintf_r+0x2a>
 80a977e:	89ab      	ldrh	r3, [r5, #12]
 80a9780:	059a      	lsls	r2, r3, #22
 80a9782:	d402      	bmi.n	80a978a <_vfiprintf_r+0x2a>
 80a9784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80a9786:	f7ff fec6 	bl	80a9516 <__retarget_lock_acquire_recursive>
 80a978a:	89ab      	ldrh	r3, [r5, #12]
 80a978c:	071b      	lsls	r3, r3, #28
 80a978e:	d501      	bpl.n	80a9794 <_vfiprintf_r+0x34>
 80a9790:	692b      	ldr	r3, [r5, #16]
 80a9792:	b99b      	cbnz	r3, 80a97bc <_vfiprintf_r+0x5c>
 80a9794:	4629      	mov	r1, r5
 80a9796:	4630      	mov	r0, r6
 80a9798:	f000 fb70 	bl	80a9e7c <__swsetup_r>
 80a979c:	b170      	cbz	r0, 80a97bc <_vfiprintf_r+0x5c>
 80a979e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80a97a0:	07dc      	lsls	r4, r3, #31
 80a97a2:	d504      	bpl.n	80a97ae <_vfiprintf_r+0x4e>
 80a97a4:	f04f 30ff 	mov.w	r0, #4294967295
 80a97a8:	b01d      	add	sp, #116	@ 0x74
 80a97aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a97ae:	89ab      	ldrh	r3, [r5, #12]
 80a97b0:	0598      	lsls	r0, r3, #22
 80a97b2:	d4f7      	bmi.n	80a97a4 <_vfiprintf_r+0x44>
 80a97b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80a97b6:	f7ff feaf 	bl	80a9518 <__retarget_lock_release_recursive>
 80a97ba:	e7f3      	b.n	80a97a4 <_vfiprintf_r+0x44>
 80a97bc:	2300      	movs	r3, #0
 80a97be:	9309      	str	r3, [sp, #36]	@ 0x24
 80a97c0:	2320      	movs	r3, #32
 80a97c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80a97c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80a97ca:	2330      	movs	r3, #48	@ 0x30
 80a97cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80a997c <_vfiprintf_r+0x21c>
 80a97d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80a97d4:	f04f 0901 	mov.w	r9, #1
 80a97d8:	4623      	mov	r3, r4
 80a97da:	469a      	mov	sl, r3
 80a97dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a97e0:	b10a      	cbz	r2, 80a97e6 <_vfiprintf_r+0x86>
 80a97e2:	2a25      	cmp	r2, #37	@ 0x25
 80a97e4:	d1f9      	bne.n	80a97da <_vfiprintf_r+0x7a>
 80a97e6:	ebba 0b04 	subs.w	fp, sl, r4
 80a97ea:	d00b      	beq.n	80a9804 <_vfiprintf_r+0xa4>
 80a97ec:	465b      	mov	r3, fp
 80a97ee:	4622      	mov	r2, r4
 80a97f0:	4629      	mov	r1, r5
 80a97f2:	4630      	mov	r0, r6
 80a97f4:	f7ff ffa1 	bl	80a973a <__sfputs_r>
 80a97f8:	3001      	adds	r0, #1
 80a97fa:	f000 80a7 	beq.w	80a994c <_vfiprintf_r+0x1ec>
 80a97fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80a9800:	445a      	add	r2, fp
 80a9802:	9209      	str	r2, [sp, #36]	@ 0x24
 80a9804:	f89a 3000 	ldrb.w	r3, [sl]
 80a9808:	2b00      	cmp	r3, #0
 80a980a:	f000 809f 	beq.w	80a994c <_vfiprintf_r+0x1ec>
 80a980e:	2300      	movs	r3, #0
 80a9810:	f04f 32ff 	mov.w	r2, #4294967295
 80a9814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80a9818:	f10a 0a01 	add.w	sl, sl, #1
 80a981c:	9304      	str	r3, [sp, #16]
 80a981e:	9307      	str	r3, [sp, #28]
 80a9820:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80a9824:	931a      	str	r3, [sp, #104]	@ 0x68
 80a9826:	4654      	mov	r4, sl
 80a9828:	2205      	movs	r2, #5
 80a982a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a982e:	4853      	ldr	r0, [pc, #332]	@ (80a997c <_vfiprintf_r+0x21c>)
 80a9830:	f7f6 fd56 	bl	80a02e0 <memchr>
 80a9834:	9a04      	ldr	r2, [sp, #16]
 80a9836:	b9d8      	cbnz	r0, 80a9870 <_vfiprintf_r+0x110>
 80a9838:	06d1      	lsls	r1, r2, #27
 80a983a:	bf44      	itt	mi
 80a983c:	2320      	movmi	r3, #32
 80a983e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80a9842:	0713      	lsls	r3, r2, #28
 80a9844:	bf44      	itt	mi
 80a9846:	232b      	movmi	r3, #43	@ 0x2b
 80a9848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80a984c:	f89a 3000 	ldrb.w	r3, [sl]
 80a9850:	2b2a      	cmp	r3, #42	@ 0x2a
 80a9852:	d015      	beq.n	80a9880 <_vfiprintf_r+0x120>
 80a9854:	9a07      	ldr	r2, [sp, #28]
 80a9856:	4654      	mov	r4, sl
 80a9858:	2000      	movs	r0, #0
 80a985a:	f04f 0c0a 	mov.w	ip, #10
 80a985e:	4621      	mov	r1, r4
 80a9860:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a9864:	3b30      	subs	r3, #48	@ 0x30
 80a9866:	2b09      	cmp	r3, #9
 80a9868:	d94b      	bls.n	80a9902 <_vfiprintf_r+0x1a2>
 80a986a:	b1b0      	cbz	r0, 80a989a <_vfiprintf_r+0x13a>
 80a986c:	9207      	str	r2, [sp, #28]
 80a986e:	e014      	b.n	80a989a <_vfiprintf_r+0x13a>
 80a9870:	eba0 0308 	sub.w	r3, r0, r8
 80a9874:	fa09 f303 	lsl.w	r3, r9, r3
 80a9878:	4313      	orrs	r3, r2
 80a987a:	9304      	str	r3, [sp, #16]
 80a987c:	46a2      	mov	sl, r4
 80a987e:	e7d2      	b.n	80a9826 <_vfiprintf_r+0xc6>
 80a9880:	9b03      	ldr	r3, [sp, #12]
 80a9882:	1d19      	adds	r1, r3, #4
 80a9884:	681b      	ldr	r3, [r3, #0]
 80a9886:	9103      	str	r1, [sp, #12]
 80a9888:	2b00      	cmp	r3, #0
 80a988a:	bfbb      	ittet	lt
 80a988c:	425b      	neglt	r3, r3
 80a988e:	f042 0202 	orrlt.w	r2, r2, #2
 80a9892:	9307      	strge	r3, [sp, #28]
 80a9894:	9307      	strlt	r3, [sp, #28]
 80a9896:	bfb8      	it	lt
 80a9898:	9204      	strlt	r2, [sp, #16]
 80a989a:	7823      	ldrb	r3, [r4, #0]
 80a989c:	2b2e      	cmp	r3, #46	@ 0x2e
 80a989e:	d10a      	bne.n	80a98b6 <_vfiprintf_r+0x156>
 80a98a0:	7863      	ldrb	r3, [r4, #1]
 80a98a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80a98a4:	d132      	bne.n	80a990c <_vfiprintf_r+0x1ac>
 80a98a6:	9b03      	ldr	r3, [sp, #12]
 80a98a8:	1d1a      	adds	r2, r3, #4
 80a98aa:	681b      	ldr	r3, [r3, #0]
 80a98ac:	9203      	str	r2, [sp, #12]
 80a98ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80a98b2:	3402      	adds	r4, #2
 80a98b4:	9305      	str	r3, [sp, #20]
 80a98b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80a998c <_vfiprintf_r+0x22c>
 80a98ba:	7821      	ldrb	r1, [r4, #0]
 80a98bc:	2203      	movs	r2, #3
 80a98be:	4650      	mov	r0, sl
 80a98c0:	f7f6 fd0e 	bl	80a02e0 <memchr>
 80a98c4:	b138      	cbz	r0, 80a98d6 <_vfiprintf_r+0x176>
 80a98c6:	9b04      	ldr	r3, [sp, #16]
 80a98c8:	eba0 000a 	sub.w	r0, r0, sl
 80a98cc:	2240      	movs	r2, #64	@ 0x40
 80a98ce:	4082      	lsls	r2, r0
 80a98d0:	4313      	orrs	r3, r2
 80a98d2:	3401      	adds	r4, #1
 80a98d4:	9304      	str	r3, [sp, #16]
 80a98d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a98da:	4829      	ldr	r0, [pc, #164]	@ (80a9980 <_vfiprintf_r+0x220>)
 80a98dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80a98e0:	2206      	movs	r2, #6
 80a98e2:	f7f6 fcfd 	bl	80a02e0 <memchr>
 80a98e6:	2800      	cmp	r0, #0
 80a98e8:	d03f      	beq.n	80a996a <_vfiprintf_r+0x20a>
 80a98ea:	4b26      	ldr	r3, [pc, #152]	@ (80a9984 <_vfiprintf_r+0x224>)
 80a98ec:	bb1b      	cbnz	r3, 80a9936 <_vfiprintf_r+0x1d6>
 80a98ee:	9b03      	ldr	r3, [sp, #12]
 80a98f0:	3307      	adds	r3, #7
 80a98f2:	f023 0307 	bic.w	r3, r3, #7
 80a98f6:	3308      	adds	r3, #8
 80a98f8:	9303      	str	r3, [sp, #12]
 80a98fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80a98fc:	443b      	add	r3, r7
 80a98fe:	9309      	str	r3, [sp, #36]	@ 0x24
 80a9900:	e76a      	b.n	80a97d8 <_vfiprintf_r+0x78>
 80a9902:	fb0c 3202 	mla	r2, ip, r2, r3
 80a9906:	460c      	mov	r4, r1
 80a9908:	2001      	movs	r0, #1
 80a990a:	e7a8      	b.n	80a985e <_vfiprintf_r+0xfe>
 80a990c:	2300      	movs	r3, #0
 80a990e:	3401      	adds	r4, #1
 80a9910:	9305      	str	r3, [sp, #20]
 80a9912:	4619      	mov	r1, r3
 80a9914:	f04f 0c0a 	mov.w	ip, #10
 80a9918:	4620      	mov	r0, r4
 80a991a:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a991e:	3a30      	subs	r2, #48	@ 0x30
 80a9920:	2a09      	cmp	r2, #9
 80a9922:	d903      	bls.n	80a992c <_vfiprintf_r+0x1cc>
 80a9924:	2b00      	cmp	r3, #0
 80a9926:	d0c6      	beq.n	80a98b6 <_vfiprintf_r+0x156>
 80a9928:	9105      	str	r1, [sp, #20]
 80a992a:	e7c4      	b.n	80a98b6 <_vfiprintf_r+0x156>
 80a992c:	fb0c 2101 	mla	r1, ip, r1, r2
 80a9930:	4604      	mov	r4, r0
 80a9932:	2301      	movs	r3, #1
 80a9934:	e7f0      	b.n	80a9918 <_vfiprintf_r+0x1b8>
 80a9936:	ab03      	add	r3, sp, #12
 80a9938:	9300      	str	r3, [sp, #0]
 80a993a:	462a      	mov	r2, r5
 80a993c:	4b12      	ldr	r3, [pc, #72]	@ (80a9988 <_vfiprintf_r+0x228>)
 80a993e:	a904      	add	r1, sp, #16
 80a9940:	4630      	mov	r0, r6
 80a9942:	f3af 8000 	nop.w
 80a9946:	4607      	mov	r7, r0
 80a9948:	1c78      	adds	r0, r7, #1
 80a994a:	d1d6      	bne.n	80a98fa <_vfiprintf_r+0x19a>
 80a994c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80a994e:	07d9      	lsls	r1, r3, #31
 80a9950:	d405      	bmi.n	80a995e <_vfiprintf_r+0x1fe>
 80a9952:	89ab      	ldrh	r3, [r5, #12]
 80a9954:	059a      	lsls	r2, r3, #22
 80a9956:	d402      	bmi.n	80a995e <_vfiprintf_r+0x1fe>
 80a9958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80a995a:	f7ff fddd 	bl	80a9518 <__retarget_lock_release_recursive>
 80a995e:	89ab      	ldrh	r3, [r5, #12]
 80a9960:	065b      	lsls	r3, r3, #25
 80a9962:	f53f af1f 	bmi.w	80a97a4 <_vfiprintf_r+0x44>
 80a9966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80a9968:	e71e      	b.n	80a97a8 <_vfiprintf_r+0x48>
 80a996a:	ab03      	add	r3, sp, #12
 80a996c:	9300      	str	r3, [sp, #0]
 80a996e:	462a      	mov	r2, r5
 80a9970:	4b05      	ldr	r3, [pc, #20]	@ (80a9988 <_vfiprintf_r+0x228>)
 80a9972:	a904      	add	r1, sp, #16
 80a9974:	4630      	mov	r0, r6
 80a9976:	f000 f879 	bl	80a9a6c <_printf_i>
 80a997a:	e7e4      	b.n	80a9946 <_vfiprintf_r+0x1e6>
 80a997c:	080aa0f4 	.word	0x080aa0f4
 80a9980:	080aa0fe 	.word	0x080aa0fe
 80a9984:	00000000 	.word	0x00000000
 80a9988:	080a973b 	.word	0x080a973b
 80a998c:	080aa0fa 	.word	0x080aa0fa

080a9990 <_printf_common>:
 80a9990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a9994:	4616      	mov	r6, r2
 80a9996:	4698      	mov	r8, r3
 80a9998:	688a      	ldr	r2, [r1, #8]
 80a999a:	690b      	ldr	r3, [r1, #16]
 80a999c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80a99a0:	4293      	cmp	r3, r2
 80a99a2:	bfb8      	it	lt
 80a99a4:	4613      	movlt	r3, r2
 80a99a6:	6033      	str	r3, [r6, #0]
 80a99a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80a99ac:	4607      	mov	r7, r0
 80a99ae:	460c      	mov	r4, r1
 80a99b0:	b10a      	cbz	r2, 80a99b6 <_printf_common+0x26>
 80a99b2:	3301      	adds	r3, #1
 80a99b4:	6033      	str	r3, [r6, #0]
 80a99b6:	6823      	ldr	r3, [r4, #0]
 80a99b8:	0699      	lsls	r1, r3, #26
 80a99ba:	bf42      	ittt	mi
 80a99bc:	6833      	ldrmi	r3, [r6, #0]
 80a99be:	3302      	addmi	r3, #2
 80a99c0:	6033      	strmi	r3, [r6, #0]
 80a99c2:	6825      	ldr	r5, [r4, #0]
 80a99c4:	f015 0506 	ands.w	r5, r5, #6
 80a99c8:	d106      	bne.n	80a99d8 <_printf_common+0x48>
 80a99ca:	f104 0a19 	add.w	sl, r4, #25
 80a99ce:	68e3      	ldr	r3, [r4, #12]
 80a99d0:	6832      	ldr	r2, [r6, #0]
 80a99d2:	1a9b      	subs	r3, r3, r2
 80a99d4:	42ab      	cmp	r3, r5
 80a99d6:	dc26      	bgt.n	80a9a26 <_printf_common+0x96>
 80a99d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80a99dc:	6822      	ldr	r2, [r4, #0]
 80a99de:	3b00      	subs	r3, #0
 80a99e0:	bf18      	it	ne
 80a99e2:	2301      	movne	r3, #1
 80a99e4:	0692      	lsls	r2, r2, #26
 80a99e6:	d42b      	bmi.n	80a9a40 <_printf_common+0xb0>
 80a99e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80a99ec:	4641      	mov	r1, r8
 80a99ee:	4638      	mov	r0, r7
 80a99f0:	47c8      	blx	r9
 80a99f2:	3001      	adds	r0, #1
 80a99f4:	d01e      	beq.n	80a9a34 <_printf_common+0xa4>
 80a99f6:	6823      	ldr	r3, [r4, #0]
 80a99f8:	6922      	ldr	r2, [r4, #16]
 80a99fa:	f003 0306 	and.w	r3, r3, #6
 80a99fe:	2b04      	cmp	r3, #4
 80a9a00:	bf02      	ittt	eq
 80a9a02:	68e5      	ldreq	r5, [r4, #12]
 80a9a04:	6833      	ldreq	r3, [r6, #0]
 80a9a06:	1aed      	subeq	r5, r5, r3
 80a9a08:	68a3      	ldr	r3, [r4, #8]
 80a9a0a:	bf0c      	ite	eq
 80a9a0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80a9a10:	2500      	movne	r5, #0
 80a9a12:	4293      	cmp	r3, r2
 80a9a14:	bfc4      	itt	gt
 80a9a16:	1a9b      	subgt	r3, r3, r2
 80a9a18:	18ed      	addgt	r5, r5, r3
 80a9a1a:	2600      	movs	r6, #0
 80a9a1c:	341a      	adds	r4, #26
 80a9a1e:	42b5      	cmp	r5, r6
 80a9a20:	d11a      	bne.n	80a9a58 <_printf_common+0xc8>
 80a9a22:	2000      	movs	r0, #0
 80a9a24:	e008      	b.n	80a9a38 <_printf_common+0xa8>
 80a9a26:	2301      	movs	r3, #1
 80a9a28:	4652      	mov	r2, sl
 80a9a2a:	4641      	mov	r1, r8
 80a9a2c:	4638      	mov	r0, r7
 80a9a2e:	47c8      	blx	r9
 80a9a30:	3001      	adds	r0, #1
 80a9a32:	d103      	bne.n	80a9a3c <_printf_common+0xac>
 80a9a34:	f04f 30ff 	mov.w	r0, #4294967295
 80a9a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a9a3c:	3501      	adds	r5, #1
 80a9a3e:	e7c6      	b.n	80a99ce <_printf_common+0x3e>
 80a9a40:	18e1      	adds	r1, r4, r3
 80a9a42:	1c5a      	adds	r2, r3, #1
 80a9a44:	2030      	movs	r0, #48	@ 0x30
 80a9a46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80a9a4a:	4422      	add	r2, r4
 80a9a4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80a9a50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80a9a54:	3302      	adds	r3, #2
 80a9a56:	e7c7      	b.n	80a99e8 <_printf_common+0x58>
 80a9a58:	2301      	movs	r3, #1
 80a9a5a:	4622      	mov	r2, r4
 80a9a5c:	4641      	mov	r1, r8
 80a9a5e:	4638      	mov	r0, r7
 80a9a60:	47c8      	blx	r9
 80a9a62:	3001      	adds	r0, #1
 80a9a64:	d0e6      	beq.n	80a9a34 <_printf_common+0xa4>
 80a9a66:	3601      	adds	r6, #1
 80a9a68:	e7d9      	b.n	80a9a1e <_printf_common+0x8e>
	...

080a9a6c <_printf_i>:
 80a9a6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80a9a70:	7e0f      	ldrb	r7, [r1, #24]
 80a9a72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80a9a74:	2f78      	cmp	r7, #120	@ 0x78
 80a9a76:	4691      	mov	r9, r2
 80a9a78:	4680      	mov	r8, r0
 80a9a7a:	460c      	mov	r4, r1
 80a9a7c:	469a      	mov	sl, r3
 80a9a7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80a9a82:	d807      	bhi.n	80a9a94 <_printf_i+0x28>
 80a9a84:	2f62      	cmp	r7, #98	@ 0x62
 80a9a86:	d80a      	bhi.n	80a9a9e <_printf_i+0x32>
 80a9a88:	2f00      	cmp	r7, #0
 80a9a8a:	f000 80d1 	beq.w	80a9c30 <_printf_i+0x1c4>
 80a9a8e:	2f58      	cmp	r7, #88	@ 0x58
 80a9a90:	f000 80b8 	beq.w	80a9c04 <_printf_i+0x198>
 80a9a94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80a9a98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80a9a9c:	e03a      	b.n	80a9b14 <_printf_i+0xa8>
 80a9a9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80a9aa2:	2b15      	cmp	r3, #21
 80a9aa4:	d8f6      	bhi.n	80a9a94 <_printf_i+0x28>
 80a9aa6:	a101      	add	r1, pc, #4	@ (adr r1, 80a9aac <_printf_i+0x40>)
 80a9aa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80a9aac:	080a9b05 	.word	0x080a9b05
 80a9ab0:	080a9b19 	.word	0x080a9b19
 80a9ab4:	080a9a95 	.word	0x080a9a95
 80a9ab8:	080a9a95 	.word	0x080a9a95
 80a9abc:	080a9a95 	.word	0x080a9a95
 80a9ac0:	080a9a95 	.word	0x080a9a95
 80a9ac4:	080a9b19 	.word	0x080a9b19
 80a9ac8:	080a9a95 	.word	0x080a9a95
 80a9acc:	080a9a95 	.word	0x080a9a95
 80a9ad0:	080a9a95 	.word	0x080a9a95
 80a9ad4:	080a9a95 	.word	0x080a9a95
 80a9ad8:	080a9c17 	.word	0x080a9c17
 80a9adc:	080a9b43 	.word	0x080a9b43
 80a9ae0:	080a9bd1 	.word	0x080a9bd1
 80a9ae4:	080a9a95 	.word	0x080a9a95
 80a9ae8:	080a9a95 	.word	0x080a9a95
 80a9aec:	080a9c39 	.word	0x080a9c39
 80a9af0:	080a9a95 	.word	0x080a9a95
 80a9af4:	080a9b43 	.word	0x080a9b43
 80a9af8:	080a9a95 	.word	0x080a9a95
 80a9afc:	080a9a95 	.word	0x080a9a95
 80a9b00:	080a9bd9 	.word	0x080a9bd9
 80a9b04:	6833      	ldr	r3, [r6, #0]
 80a9b06:	1d1a      	adds	r2, r3, #4
 80a9b08:	681b      	ldr	r3, [r3, #0]
 80a9b0a:	6032      	str	r2, [r6, #0]
 80a9b0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80a9b10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80a9b14:	2301      	movs	r3, #1
 80a9b16:	e09c      	b.n	80a9c52 <_printf_i+0x1e6>
 80a9b18:	6833      	ldr	r3, [r6, #0]
 80a9b1a:	6820      	ldr	r0, [r4, #0]
 80a9b1c:	1d19      	adds	r1, r3, #4
 80a9b1e:	6031      	str	r1, [r6, #0]
 80a9b20:	0606      	lsls	r6, r0, #24
 80a9b22:	d501      	bpl.n	80a9b28 <_printf_i+0xbc>
 80a9b24:	681d      	ldr	r5, [r3, #0]
 80a9b26:	e003      	b.n	80a9b30 <_printf_i+0xc4>
 80a9b28:	0645      	lsls	r5, r0, #25
 80a9b2a:	d5fb      	bpl.n	80a9b24 <_printf_i+0xb8>
 80a9b2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80a9b30:	2d00      	cmp	r5, #0
 80a9b32:	da03      	bge.n	80a9b3c <_printf_i+0xd0>
 80a9b34:	232d      	movs	r3, #45	@ 0x2d
 80a9b36:	426d      	negs	r5, r5
 80a9b38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80a9b3c:	4858      	ldr	r0, [pc, #352]	@ (80a9ca0 <_printf_i+0x234>)
 80a9b3e:	230a      	movs	r3, #10
 80a9b40:	e011      	b.n	80a9b66 <_printf_i+0xfa>
 80a9b42:	6821      	ldr	r1, [r4, #0]
 80a9b44:	6833      	ldr	r3, [r6, #0]
 80a9b46:	0608      	lsls	r0, r1, #24
 80a9b48:	f853 5b04 	ldr.w	r5, [r3], #4
 80a9b4c:	d402      	bmi.n	80a9b54 <_printf_i+0xe8>
 80a9b4e:	0649      	lsls	r1, r1, #25
 80a9b50:	bf48      	it	mi
 80a9b52:	b2ad      	uxthmi	r5, r5
 80a9b54:	2f6f      	cmp	r7, #111	@ 0x6f
 80a9b56:	4852      	ldr	r0, [pc, #328]	@ (80a9ca0 <_printf_i+0x234>)
 80a9b58:	6033      	str	r3, [r6, #0]
 80a9b5a:	bf14      	ite	ne
 80a9b5c:	230a      	movne	r3, #10
 80a9b5e:	2308      	moveq	r3, #8
 80a9b60:	2100      	movs	r1, #0
 80a9b62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80a9b66:	6866      	ldr	r6, [r4, #4]
 80a9b68:	60a6      	str	r6, [r4, #8]
 80a9b6a:	2e00      	cmp	r6, #0
 80a9b6c:	db05      	blt.n	80a9b7a <_printf_i+0x10e>
 80a9b6e:	6821      	ldr	r1, [r4, #0]
 80a9b70:	432e      	orrs	r6, r5
 80a9b72:	f021 0104 	bic.w	r1, r1, #4
 80a9b76:	6021      	str	r1, [r4, #0]
 80a9b78:	d04b      	beq.n	80a9c12 <_printf_i+0x1a6>
 80a9b7a:	4616      	mov	r6, r2
 80a9b7c:	fbb5 f1f3 	udiv	r1, r5, r3
 80a9b80:	fb03 5711 	mls	r7, r3, r1, r5
 80a9b84:	5dc7      	ldrb	r7, [r0, r7]
 80a9b86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80a9b8a:	462f      	mov	r7, r5
 80a9b8c:	42bb      	cmp	r3, r7
 80a9b8e:	460d      	mov	r5, r1
 80a9b90:	d9f4      	bls.n	80a9b7c <_printf_i+0x110>
 80a9b92:	2b08      	cmp	r3, #8
 80a9b94:	d10b      	bne.n	80a9bae <_printf_i+0x142>
 80a9b96:	6823      	ldr	r3, [r4, #0]
 80a9b98:	07df      	lsls	r7, r3, #31
 80a9b9a:	d508      	bpl.n	80a9bae <_printf_i+0x142>
 80a9b9c:	6923      	ldr	r3, [r4, #16]
 80a9b9e:	6861      	ldr	r1, [r4, #4]
 80a9ba0:	4299      	cmp	r1, r3
 80a9ba2:	bfde      	ittt	le
 80a9ba4:	2330      	movle	r3, #48	@ 0x30
 80a9ba6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80a9baa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80a9bae:	1b92      	subs	r2, r2, r6
 80a9bb0:	6122      	str	r2, [r4, #16]
 80a9bb2:	f8cd a000 	str.w	sl, [sp]
 80a9bb6:	464b      	mov	r3, r9
 80a9bb8:	aa03      	add	r2, sp, #12
 80a9bba:	4621      	mov	r1, r4
 80a9bbc:	4640      	mov	r0, r8
 80a9bbe:	f7ff fee7 	bl	80a9990 <_printf_common>
 80a9bc2:	3001      	adds	r0, #1
 80a9bc4:	d14a      	bne.n	80a9c5c <_printf_i+0x1f0>
 80a9bc6:	f04f 30ff 	mov.w	r0, #4294967295
 80a9bca:	b004      	add	sp, #16
 80a9bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a9bd0:	6823      	ldr	r3, [r4, #0]
 80a9bd2:	f043 0320 	orr.w	r3, r3, #32
 80a9bd6:	6023      	str	r3, [r4, #0]
 80a9bd8:	4832      	ldr	r0, [pc, #200]	@ (80a9ca4 <_printf_i+0x238>)
 80a9bda:	2778      	movs	r7, #120	@ 0x78
 80a9bdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80a9be0:	6823      	ldr	r3, [r4, #0]
 80a9be2:	6831      	ldr	r1, [r6, #0]
 80a9be4:	061f      	lsls	r7, r3, #24
 80a9be6:	f851 5b04 	ldr.w	r5, [r1], #4
 80a9bea:	d402      	bmi.n	80a9bf2 <_printf_i+0x186>
 80a9bec:	065f      	lsls	r7, r3, #25
 80a9bee:	bf48      	it	mi
 80a9bf0:	b2ad      	uxthmi	r5, r5
 80a9bf2:	6031      	str	r1, [r6, #0]
 80a9bf4:	07d9      	lsls	r1, r3, #31
 80a9bf6:	bf44      	itt	mi
 80a9bf8:	f043 0320 	orrmi.w	r3, r3, #32
 80a9bfc:	6023      	strmi	r3, [r4, #0]
 80a9bfe:	b11d      	cbz	r5, 80a9c08 <_printf_i+0x19c>
 80a9c00:	2310      	movs	r3, #16
 80a9c02:	e7ad      	b.n	80a9b60 <_printf_i+0xf4>
 80a9c04:	4826      	ldr	r0, [pc, #152]	@ (80a9ca0 <_printf_i+0x234>)
 80a9c06:	e7e9      	b.n	80a9bdc <_printf_i+0x170>
 80a9c08:	6823      	ldr	r3, [r4, #0]
 80a9c0a:	f023 0320 	bic.w	r3, r3, #32
 80a9c0e:	6023      	str	r3, [r4, #0]
 80a9c10:	e7f6      	b.n	80a9c00 <_printf_i+0x194>
 80a9c12:	4616      	mov	r6, r2
 80a9c14:	e7bd      	b.n	80a9b92 <_printf_i+0x126>
 80a9c16:	6833      	ldr	r3, [r6, #0]
 80a9c18:	6825      	ldr	r5, [r4, #0]
 80a9c1a:	6961      	ldr	r1, [r4, #20]
 80a9c1c:	1d18      	adds	r0, r3, #4
 80a9c1e:	6030      	str	r0, [r6, #0]
 80a9c20:	062e      	lsls	r6, r5, #24
 80a9c22:	681b      	ldr	r3, [r3, #0]
 80a9c24:	d501      	bpl.n	80a9c2a <_printf_i+0x1be>
 80a9c26:	6019      	str	r1, [r3, #0]
 80a9c28:	e002      	b.n	80a9c30 <_printf_i+0x1c4>
 80a9c2a:	0668      	lsls	r0, r5, #25
 80a9c2c:	d5fb      	bpl.n	80a9c26 <_printf_i+0x1ba>
 80a9c2e:	8019      	strh	r1, [r3, #0]
 80a9c30:	2300      	movs	r3, #0
 80a9c32:	6123      	str	r3, [r4, #16]
 80a9c34:	4616      	mov	r6, r2
 80a9c36:	e7bc      	b.n	80a9bb2 <_printf_i+0x146>
 80a9c38:	6833      	ldr	r3, [r6, #0]
 80a9c3a:	1d1a      	adds	r2, r3, #4
 80a9c3c:	6032      	str	r2, [r6, #0]
 80a9c3e:	681e      	ldr	r6, [r3, #0]
 80a9c40:	6862      	ldr	r2, [r4, #4]
 80a9c42:	2100      	movs	r1, #0
 80a9c44:	4630      	mov	r0, r6
 80a9c46:	f7f6 fb4b 	bl	80a02e0 <memchr>
 80a9c4a:	b108      	cbz	r0, 80a9c50 <_printf_i+0x1e4>
 80a9c4c:	1b80      	subs	r0, r0, r6
 80a9c4e:	6060      	str	r0, [r4, #4]
 80a9c50:	6863      	ldr	r3, [r4, #4]
 80a9c52:	6123      	str	r3, [r4, #16]
 80a9c54:	2300      	movs	r3, #0
 80a9c56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80a9c5a:	e7aa      	b.n	80a9bb2 <_printf_i+0x146>
 80a9c5c:	6923      	ldr	r3, [r4, #16]
 80a9c5e:	4632      	mov	r2, r6
 80a9c60:	4649      	mov	r1, r9
 80a9c62:	4640      	mov	r0, r8
 80a9c64:	47d0      	blx	sl
 80a9c66:	3001      	adds	r0, #1
 80a9c68:	d0ad      	beq.n	80a9bc6 <_printf_i+0x15a>
 80a9c6a:	6823      	ldr	r3, [r4, #0]
 80a9c6c:	079b      	lsls	r3, r3, #30
 80a9c6e:	d413      	bmi.n	80a9c98 <_printf_i+0x22c>
 80a9c70:	68e0      	ldr	r0, [r4, #12]
 80a9c72:	9b03      	ldr	r3, [sp, #12]
 80a9c74:	4298      	cmp	r0, r3
 80a9c76:	bfb8      	it	lt
 80a9c78:	4618      	movlt	r0, r3
 80a9c7a:	e7a6      	b.n	80a9bca <_printf_i+0x15e>
 80a9c7c:	2301      	movs	r3, #1
 80a9c7e:	4632      	mov	r2, r6
 80a9c80:	4649      	mov	r1, r9
 80a9c82:	4640      	mov	r0, r8
 80a9c84:	47d0      	blx	sl
 80a9c86:	3001      	adds	r0, #1
 80a9c88:	d09d      	beq.n	80a9bc6 <_printf_i+0x15a>
 80a9c8a:	3501      	adds	r5, #1
 80a9c8c:	68e3      	ldr	r3, [r4, #12]
 80a9c8e:	9903      	ldr	r1, [sp, #12]
 80a9c90:	1a5b      	subs	r3, r3, r1
 80a9c92:	42ab      	cmp	r3, r5
 80a9c94:	dcf2      	bgt.n	80a9c7c <_printf_i+0x210>
 80a9c96:	e7eb      	b.n	80a9c70 <_printf_i+0x204>
 80a9c98:	2500      	movs	r5, #0
 80a9c9a:	f104 0619 	add.w	r6, r4, #25
 80a9c9e:	e7f5      	b.n	80a9c8c <_printf_i+0x220>
 80a9ca0:	080aa105 	.word	0x080aa105
 80a9ca4:	080aa116 	.word	0x080aa116

080a9ca8 <__sflush_r>:
 80a9ca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80a9cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a9cb0:	0716      	lsls	r6, r2, #28
 80a9cb2:	4605      	mov	r5, r0
 80a9cb4:	460c      	mov	r4, r1
 80a9cb6:	d454      	bmi.n	80a9d62 <__sflush_r+0xba>
 80a9cb8:	684b      	ldr	r3, [r1, #4]
 80a9cba:	2b00      	cmp	r3, #0
 80a9cbc:	dc02      	bgt.n	80a9cc4 <__sflush_r+0x1c>
 80a9cbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80a9cc0:	2b00      	cmp	r3, #0
 80a9cc2:	dd48      	ble.n	80a9d56 <__sflush_r+0xae>
 80a9cc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80a9cc6:	2e00      	cmp	r6, #0
 80a9cc8:	d045      	beq.n	80a9d56 <__sflush_r+0xae>
 80a9cca:	2300      	movs	r3, #0
 80a9ccc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80a9cd0:	682f      	ldr	r7, [r5, #0]
 80a9cd2:	6a21      	ldr	r1, [r4, #32]
 80a9cd4:	602b      	str	r3, [r5, #0]
 80a9cd6:	d030      	beq.n	80a9d3a <__sflush_r+0x92>
 80a9cd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80a9cda:	89a3      	ldrh	r3, [r4, #12]
 80a9cdc:	0759      	lsls	r1, r3, #29
 80a9cde:	d505      	bpl.n	80a9cec <__sflush_r+0x44>
 80a9ce0:	6863      	ldr	r3, [r4, #4]
 80a9ce2:	1ad2      	subs	r2, r2, r3
 80a9ce4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80a9ce6:	b10b      	cbz	r3, 80a9cec <__sflush_r+0x44>
 80a9ce8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80a9cea:	1ad2      	subs	r2, r2, r3
 80a9cec:	2300      	movs	r3, #0
 80a9cee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80a9cf0:	6a21      	ldr	r1, [r4, #32]
 80a9cf2:	4628      	mov	r0, r5
 80a9cf4:	47b0      	blx	r6
 80a9cf6:	1c43      	adds	r3, r0, #1
 80a9cf8:	89a3      	ldrh	r3, [r4, #12]
 80a9cfa:	d106      	bne.n	80a9d0a <__sflush_r+0x62>
 80a9cfc:	6829      	ldr	r1, [r5, #0]
 80a9cfe:	291d      	cmp	r1, #29
 80a9d00:	d82b      	bhi.n	80a9d5a <__sflush_r+0xb2>
 80a9d02:	4a2a      	ldr	r2, [pc, #168]	@ (80a9dac <__sflush_r+0x104>)
 80a9d04:	40ca      	lsrs	r2, r1
 80a9d06:	07d6      	lsls	r6, r2, #31
 80a9d08:	d527      	bpl.n	80a9d5a <__sflush_r+0xb2>
 80a9d0a:	2200      	movs	r2, #0
 80a9d0c:	6062      	str	r2, [r4, #4]
 80a9d0e:	04d9      	lsls	r1, r3, #19
 80a9d10:	6922      	ldr	r2, [r4, #16]
 80a9d12:	6022      	str	r2, [r4, #0]
 80a9d14:	d504      	bpl.n	80a9d20 <__sflush_r+0x78>
 80a9d16:	1c42      	adds	r2, r0, #1
 80a9d18:	d101      	bne.n	80a9d1e <__sflush_r+0x76>
 80a9d1a:	682b      	ldr	r3, [r5, #0]
 80a9d1c:	b903      	cbnz	r3, 80a9d20 <__sflush_r+0x78>
 80a9d1e:	6560      	str	r0, [r4, #84]	@ 0x54
 80a9d20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80a9d22:	602f      	str	r7, [r5, #0]
 80a9d24:	b1b9      	cbz	r1, 80a9d56 <__sflush_r+0xae>
 80a9d26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80a9d2a:	4299      	cmp	r1, r3
 80a9d2c:	d002      	beq.n	80a9d34 <__sflush_r+0x8c>
 80a9d2e:	4628      	mov	r0, r5
 80a9d30:	f7ff fbf4 	bl	80a951c <_free_r>
 80a9d34:	2300      	movs	r3, #0
 80a9d36:	6363      	str	r3, [r4, #52]	@ 0x34
 80a9d38:	e00d      	b.n	80a9d56 <__sflush_r+0xae>
 80a9d3a:	2301      	movs	r3, #1
 80a9d3c:	4628      	mov	r0, r5
 80a9d3e:	47b0      	blx	r6
 80a9d40:	4602      	mov	r2, r0
 80a9d42:	1c50      	adds	r0, r2, #1
 80a9d44:	d1c9      	bne.n	80a9cda <__sflush_r+0x32>
 80a9d46:	682b      	ldr	r3, [r5, #0]
 80a9d48:	2b00      	cmp	r3, #0
 80a9d4a:	d0c6      	beq.n	80a9cda <__sflush_r+0x32>
 80a9d4c:	2b1d      	cmp	r3, #29
 80a9d4e:	d001      	beq.n	80a9d54 <__sflush_r+0xac>
 80a9d50:	2b16      	cmp	r3, #22
 80a9d52:	d11e      	bne.n	80a9d92 <__sflush_r+0xea>
 80a9d54:	602f      	str	r7, [r5, #0]
 80a9d56:	2000      	movs	r0, #0
 80a9d58:	e022      	b.n	80a9da0 <__sflush_r+0xf8>
 80a9d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80a9d5e:	b21b      	sxth	r3, r3
 80a9d60:	e01b      	b.n	80a9d9a <__sflush_r+0xf2>
 80a9d62:	690f      	ldr	r7, [r1, #16]
 80a9d64:	2f00      	cmp	r7, #0
 80a9d66:	d0f6      	beq.n	80a9d56 <__sflush_r+0xae>
 80a9d68:	0793      	lsls	r3, r2, #30
 80a9d6a:	680e      	ldr	r6, [r1, #0]
 80a9d6c:	bf08      	it	eq
 80a9d6e:	694b      	ldreq	r3, [r1, #20]
 80a9d70:	600f      	str	r7, [r1, #0]
 80a9d72:	bf18      	it	ne
 80a9d74:	2300      	movne	r3, #0
 80a9d76:	eba6 0807 	sub.w	r8, r6, r7
 80a9d7a:	608b      	str	r3, [r1, #8]
 80a9d7c:	f1b8 0f00 	cmp.w	r8, #0
 80a9d80:	dde9      	ble.n	80a9d56 <__sflush_r+0xae>
 80a9d82:	6a21      	ldr	r1, [r4, #32]
 80a9d84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80a9d86:	4643      	mov	r3, r8
 80a9d88:	463a      	mov	r2, r7
 80a9d8a:	4628      	mov	r0, r5
 80a9d8c:	47b0      	blx	r6
 80a9d8e:	2800      	cmp	r0, #0
 80a9d90:	dc08      	bgt.n	80a9da4 <__sflush_r+0xfc>
 80a9d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80a9d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80a9d9a:	81a3      	strh	r3, [r4, #12]
 80a9d9c:	f04f 30ff 	mov.w	r0, #4294967295
 80a9da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a9da4:	4407      	add	r7, r0
 80a9da6:	eba8 0800 	sub.w	r8, r8, r0
 80a9daa:	e7e7      	b.n	80a9d7c <__sflush_r+0xd4>
 80a9dac:	20400001 	.word	0x20400001

080a9db0 <_fflush_r>:
 80a9db0:	b538      	push	{r3, r4, r5, lr}
 80a9db2:	690b      	ldr	r3, [r1, #16]
 80a9db4:	4605      	mov	r5, r0
 80a9db6:	460c      	mov	r4, r1
 80a9db8:	b913      	cbnz	r3, 80a9dc0 <_fflush_r+0x10>
 80a9dba:	2500      	movs	r5, #0
 80a9dbc:	4628      	mov	r0, r5
 80a9dbe:	bd38      	pop	{r3, r4, r5, pc}
 80a9dc0:	b118      	cbz	r0, 80a9dca <_fflush_r+0x1a>
 80a9dc2:	6a03      	ldr	r3, [r0, #32]
 80a9dc4:	b90b      	cbnz	r3, 80a9dca <_fflush_r+0x1a>
 80a9dc6:	f7ff faa1 	bl	80a930c <__sinit>
 80a9dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80a9dce:	2b00      	cmp	r3, #0
 80a9dd0:	d0f3      	beq.n	80a9dba <_fflush_r+0xa>
 80a9dd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80a9dd4:	07d0      	lsls	r0, r2, #31
 80a9dd6:	d404      	bmi.n	80a9de2 <_fflush_r+0x32>
 80a9dd8:	0599      	lsls	r1, r3, #22
 80a9dda:	d402      	bmi.n	80a9de2 <_fflush_r+0x32>
 80a9ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80a9dde:	f7ff fb9a 	bl	80a9516 <__retarget_lock_acquire_recursive>
 80a9de2:	4628      	mov	r0, r5
 80a9de4:	4621      	mov	r1, r4
 80a9de6:	f7ff ff5f 	bl	80a9ca8 <__sflush_r>
 80a9dea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80a9dec:	07da      	lsls	r2, r3, #31
 80a9dee:	4605      	mov	r5, r0
 80a9df0:	d4e4      	bmi.n	80a9dbc <_fflush_r+0xc>
 80a9df2:	89a3      	ldrh	r3, [r4, #12]
 80a9df4:	059b      	lsls	r3, r3, #22
 80a9df6:	d4e1      	bmi.n	80a9dbc <_fflush_r+0xc>
 80a9df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80a9dfa:	f7ff fb8d 	bl	80a9518 <__retarget_lock_release_recursive>
 80a9dfe:	e7dd      	b.n	80a9dbc <_fflush_r+0xc>

080a9e00 <__swbuf_r>:
 80a9e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a9e02:	460e      	mov	r6, r1
 80a9e04:	4614      	mov	r4, r2
 80a9e06:	4605      	mov	r5, r0
 80a9e08:	b118      	cbz	r0, 80a9e12 <__swbuf_r+0x12>
 80a9e0a:	6a03      	ldr	r3, [r0, #32]
 80a9e0c:	b90b      	cbnz	r3, 80a9e12 <__swbuf_r+0x12>
 80a9e0e:	f7ff fa7d 	bl	80a930c <__sinit>
 80a9e12:	69a3      	ldr	r3, [r4, #24]
 80a9e14:	60a3      	str	r3, [r4, #8]
 80a9e16:	89a3      	ldrh	r3, [r4, #12]
 80a9e18:	071a      	lsls	r2, r3, #28
 80a9e1a:	d501      	bpl.n	80a9e20 <__swbuf_r+0x20>
 80a9e1c:	6923      	ldr	r3, [r4, #16]
 80a9e1e:	b943      	cbnz	r3, 80a9e32 <__swbuf_r+0x32>
 80a9e20:	4621      	mov	r1, r4
 80a9e22:	4628      	mov	r0, r5
 80a9e24:	f000 f82a 	bl	80a9e7c <__swsetup_r>
 80a9e28:	b118      	cbz	r0, 80a9e32 <__swbuf_r+0x32>
 80a9e2a:	f04f 37ff 	mov.w	r7, #4294967295
 80a9e2e:	4638      	mov	r0, r7
 80a9e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a9e32:	6823      	ldr	r3, [r4, #0]
 80a9e34:	6922      	ldr	r2, [r4, #16]
 80a9e36:	1a98      	subs	r0, r3, r2
 80a9e38:	6963      	ldr	r3, [r4, #20]
 80a9e3a:	b2f6      	uxtb	r6, r6
 80a9e3c:	4283      	cmp	r3, r0
 80a9e3e:	4637      	mov	r7, r6
 80a9e40:	dc05      	bgt.n	80a9e4e <__swbuf_r+0x4e>
 80a9e42:	4621      	mov	r1, r4
 80a9e44:	4628      	mov	r0, r5
 80a9e46:	f7ff ffb3 	bl	80a9db0 <_fflush_r>
 80a9e4a:	2800      	cmp	r0, #0
 80a9e4c:	d1ed      	bne.n	80a9e2a <__swbuf_r+0x2a>
 80a9e4e:	68a3      	ldr	r3, [r4, #8]
 80a9e50:	3b01      	subs	r3, #1
 80a9e52:	60a3      	str	r3, [r4, #8]
 80a9e54:	6823      	ldr	r3, [r4, #0]
 80a9e56:	1c5a      	adds	r2, r3, #1
 80a9e58:	6022      	str	r2, [r4, #0]
 80a9e5a:	701e      	strb	r6, [r3, #0]
 80a9e5c:	6962      	ldr	r2, [r4, #20]
 80a9e5e:	1c43      	adds	r3, r0, #1
 80a9e60:	429a      	cmp	r2, r3
 80a9e62:	d004      	beq.n	80a9e6e <__swbuf_r+0x6e>
 80a9e64:	89a3      	ldrh	r3, [r4, #12]
 80a9e66:	07db      	lsls	r3, r3, #31
 80a9e68:	d5e1      	bpl.n	80a9e2e <__swbuf_r+0x2e>
 80a9e6a:	2e0a      	cmp	r6, #10
 80a9e6c:	d1df      	bne.n	80a9e2e <__swbuf_r+0x2e>
 80a9e6e:	4621      	mov	r1, r4
 80a9e70:	4628      	mov	r0, r5
 80a9e72:	f7ff ff9d 	bl	80a9db0 <_fflush_r>
 80a9e76:	2800      	cmp	r0, #0
 80a9e78:	d0d9      	beq.n	80a9e2e <__swbuf_r+0x2e>
 80a9e7a:	e7d6      	b.n	80a9e2a <__swbuf_r+0x2a>

080a9e7c <__swsetup_r>:
 80a9e7c:	b538      	push	{r3, r4, r5, lr}
 80a9e7e:	4b29      	ldr	r3, [pc, #164]	@ (80a9f24 <__swsetup_r+0xa8>)
 80a9e80:	4605      	mov	r5, r0
 80a9e82:	6818      	ldr	r0, [r3, #0]
 80a9e84:	460c      	mov	r4, r1
 80a9e86:	b118      	cbz	r0, 80a9e90 <__swsetup_r+0x14>
 80a9e88:	6a03      	ldr	r3, [r0, #32]
 80a9e8a:	b90b      	cbnz	r3, 80a9e90 <__swsetup_r+0x14>
 80a9e8c:	f7ff fa3e 	bl	80a930c <__sinit>
 80a9e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80a9e94:	0719      	lsls	r1, r3, #28
 80a9e96:	d422      	bmi.n	80a9ede <__swsetup_r+0x62>
 80a9e98:	06da      	lsls	r2, r3, #27
 80a9e9a:	d407      	bmi.n	80a9eac <__swsetup_r+0x30>
 80a9e9c:	2209      	movs	r2, #9
 80a9e9e:	602a      	str	r2, [r5, #0]
 80a9ea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80a9ea4:	81a3      	strh	r3, [r4, #12]
 80a9ea6:	f04f 30ff 	mov.w	r0, #4294967295
 80a9eaa:	e033      	b.n	80a9f14 <__swsetup_r+0x98>
 80a9eac:	0758      	lsls	r0, r3, #29
 80a9eae:	d512      	bpl.n	80a9ed6 <__swsetup_r+0x5a>
 80a9eb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80a9eb2:	b141      	cbz	r1, 80a9ec6 <__swsetup_r+0x4a>
 80a9eb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80a9eb8:	4299      	cmp	r1, r3
 80a9eba:	d002      	beq.n	80a9ec2 <__swsetup_r+0x46>
 80a9ebc:	4628      	mov	r0, r5
 80a9ebe:	f7ff fb2d 	bl	80a951c <_free_r>
 80a9ec2:	2300      	movs	r3, #0
 80a9ec4:	6363      	str	r3, [r4, #52]	@ 0x34
 80a9ec6:	89a3      	ldrh	r3, [r4, #12]
 80a9ec8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80a9ecc:	81a3      	strh	r3, [r4, #12]
 80a9ece:	2300      	movs	r3, #0
 80a9ed0:	6063      	str	r3, [r4, #4]
 80a9ed2:	6923      	ldr	r3, [r4, #16]
 80a9ed4:	6023      	str	r3, [r4, #0]
 80a9ed6:	89a3      	ldrh	r3, [r4, #12]
 80a9ed8:	f043 0308 	orr.w	r3, r3, #8
 80a9edc:	81a3      	strh	r3, [r4, #12]
 80a9ede:	6923      	ldr	r3, [r4, #16]
 80a9ee0:	b94b      	cbnz	r3, 80a9ef6 <__swsetup_r+0x7a>
 80a9ee2:	89a3      	ldrh	r3, [r4, #12]
 80a9ee4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80a9ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80a9eec:	d003      	beq.n	80a9ef6 <__swsetup_r+0x7a>
 80a9eee:	4621      	mov	r1, r4
 80a9ef0:	4628      	mov	r0, r5
 80a9ef2:	f000 f84f 	bl	80a9f94 <__smakebuf_r>
 80a9ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80a9efa:	f013 0201 	ands.w	r2, r3, #1
 80a9efe:	d00a      	beq.n	80a9f16 <__swsetup_r+0x9a>
 80a9f00:	2200      	movs	r2, #0
 80a9f02:	60a2      	str	r2, [r4, #8]
 80a9f04:	6962      	ldr	r2, [r4, #20]
 80a9f06:	4252      	negs	r2, r2
 80a9f08:	61a2      	str	r2, [r4, #24]
 80a9f0a:	6922      	ldr	r2, [r4, #16]
 80a9f0c:	b942      	cbnz	r2, 80a9f20 <__swsetup_r+0xa4>
 80a9f0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80a9f12:	d1c5      	bne.n	80a9ea0 <__swsetup_r+0x24>
 80a9f14:	bd38      	pop	{r3, r4, r5, pc}
 80a9f16:	0799      	lsls	r1, r3, #30
 80a9f18:	bf58      	it	pl
 80a9f1a:	6962      	ldrpl	r2, [r4, #20]
 80a9f1c:	60a2      	str	r2, [r4, #8]
 80a9f1e:	e7f4      	b.n	80a9f0a <__swsetup_r+0x8e>
 80a9f20:	2000      	movs	r0, #0
 80a9f22:	e7f7      	b.n	80a9f14 <__swsetup_r+0x98>
 80a9f24:	24000110 	.word	0x24000110

080a9f28 <_sbrk_r>:
 80a9f28:	b538      	push	{r3, r4, r5, lr}
 80a9f2a:	4d06      	ldr	r5, [pc, #24]	@ (80a9f44 <_sbrk_r+0x1c>)
 80a9f2c:	2300      	movs	r3, #0
 80a9f2e:	4604      	mov	r4, r0
 80a9f30:	4608      	mov	r0, r1
 80a9f32:	602b      	str	r3, [r5, #0]
 80a9f34:	f7f6 fd5a 	bl	80a09ec <_sbrk>
 80a9f38:	1c43      	adds	r3, r0, #1
 80a9f3a:	d102      	bne.n	80a9f42 <_sbrk_r+0x1a>
 80a9f3c:	682b      	ldr	r3, [r5, #0]
 80a9f3e:	b103      	cbz	r3, 80a9f42 <_sbrk_r+0x1a>
 80a9f40:	6023      	str	r3, [r4, #0]
 80a9f42:	bd38      	pop	{r3, r4, r5, pc}
 80a9f44:	24001ea4 	.word	0x24001ea4

080a9f48 <__swhatbuf_r>:
 80a9f48:	b570      	push	{r4, r5, r6, lr}
 80a9f4a:	460c      	mov	r4, r1
 80a9f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80a9f50:	2900      	cmp	r1, #0
 80a9f52:	b096      	sub	sp, #88	@ 0x58
 80a9f54:	4615      	mov	r5, r2
 80a9f56:	461e      	mov	r6, r3
 80a9f58:	da0d      	bge.n	80a9f76 <__swhatbuf_r+0x2e>
 80a9f5a:	89a3      	ldrh	r3, [r4, #12]
 80a9f5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80a9f60:	f04f 0100 	mov.w	r1, #0
 80a9f64:	bf14      	ite	ne
 80a9f66:	2340      	movne	r3, #64	@ 0x40
 80a9f68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80a9f6c:	2000      	movs	r0, #0
 80a9f6e:	6031      	str	r1, [r6, #0]
 80a9f70:	602b      	str	r3, [r5, #0]
 80a9f72:	b016      	add	sp, #88	@ 0x58
 80a9f74:	bd70      	pop	{r4, r5, r6, pc}
 80a9f76:	466a      	mov	r2, sp
 80a9f78:	f000 f848 	bl	80aa00c <_fstat_r>
 80a9f7c:	2800      	cmp	r0, #0
 80a9f7e:	dbec      	blt.n	80a9f5a <__swhatbuf_r+0x12>
 80a9f80:	9901      	ldr	r1, [sp, #4]
 80a9f82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80a9f86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80a9f8a:	4259      	negs	r1, r3
 80a9f8c:	4159      	adcs	r1, r3
 80a9f8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80a9f92:	e7eb      	b.n	80a9f6c <__swhatbuf_r+0x24>

080a9f94 <__smakebuf_r>:
 80a9f94:	898b      	ldrh	r3, [r1, #12]
 80a9f96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a9f98:	079d      	lsls	r5, r3, #30
 80a9f9a:	4606      	mov	r6, r0
 80a9f9c:	460c      	mov	r4, r1
 80a9f9e:	d507      	bpl.n	80a9fb0 <__smakebuf_r+0x1c>
 80a9fa0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80a9fa4:	6023      	str	r3, [r4, #0]
 80a9fa6:	6123      	str	r3, [r4, #16]
 80a9fa8:	2301      	movs	r3, #1
 80a9faa:	6163      	str	r3, [r4, #20]
 80a9fac:	b003      	add	sp, #12
 80a9fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a9fb0:	ab01      	add	r3, sp, #4
 80a9fb2:	466a      	mov	r2, sp
 80a9fb4:	f7ff ffc8 	bl	80a9f48 <__swhatbuf_r>
 80a9fb8:	9f00      	ldr	r7, [sp, #0]
 80a9fba:	4605      	mov	r5, r0
 80a9fbc:	4639      	mov	r1, r7
 80a9fbe:	4630      	mov	r0, r6
 80a9fc0:	f7ff fb18 	bl	80a95f4 <_malloc_r>
 80a9fc4:	b948      	cbnz	r0, 80a9fda <__smakebuf_r+0x46>
 80a9fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80a9fca:	059a      	lsls	r2, r3, #22
 80a9fcc:	d4ee      	bmi.n	80a9fac <__smakebuf_r+0x18>
 80a9fce:	f023 0303 	bic.w	r3, r3, #3
 80a9fd2:	f043 0302 	orr.w	r3, r3, #2
 80a9fd6:	81a3      	strh	r3, [r4, #12]
 80a9fd8:	e7e2      	b.n	80a9fa0 <__smakebuf_r+0xc>
 80a9fda:	89a3      	ldrh	r3, [r4, #12]
 80a9fdc:	6020      	str	r0, [r4, #0]
 80a9fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80a9fe2:	81a3      	strh	r3, [r4, #12]
 80a9fe4:	9b01      	ldr	r3, [sp, #4]
 80a9fe6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80a9fea:	b15b      	cbz	r3, 80aa004 <__smakebuf_r+0x70>
 80a9fec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80a9ff0:	4630      	mov	r0, r6
 80a9ff2:	f000 f81d 	bl	80aa030 <_isatty_r>
 80a9ff6:	b128      	cbz	r0, 80aa004 <__smakebuf_r+0x70>
 80a9ff8:	89a3      	ldrh	r3, [r4, #12]
 80a9ffa:	f023 0303 	bic.w	r3, r3, #3
 80a9ffe:	f043 0301 	orr.w	r3, r3, #1
 80aa002:	81a3      	strh	r3, [r4, #12]
 80aa004:	89a3      	ldrh	r3, [r4, #12]
 80aa006:	431d      	orrs	r5, r3
 80aa008:	81a5      	strh	r5, [r4, #12]
 80aa00a:	e7cf      	b.n	80a9fac <__smakebuf_r+0x18>

080aa00c <_fstat_r>:
 80aa00c:	b538      	push	{r3, r4, r5, lr}
 80aa00e:	4d07      	ldr	r5, [pc, #28]	@ (80aa02c <_fstat_r+0x20>)
 80aa010:	2300      	movs	r3, #0
 80aa012:	4604      	mov	r4, r0
 80aa014:	4608      	mov	r0, r1
 80aa016:	4611      	mov	r1, r2
 80aa018:	602b      	str	r3, [r5, #0]
 80aa01a:	f7f6 fcbe 	bl	80a099a <_fstat>
 80aa01e:	1c43      	adds	r3, r0, #1
 80aa020:	d102      	bne.n	80aa028 <_fstat_r+0x1c>
 80aa022:	682b      	ldr	r3, [r5, #0]
 80aa024:	b103      	cbz	r3, 80aa028 <_fstat_r+0x1c>
 80aa026:	6023      	str	r3, [r4, #0]
 80aa028:	bd38      	pop	{r3, r4, r5, pc}
 80aa02a:	bf00      	nop
 80aa02c:	24001ea4 	.word	0x24001ea4

080aa030 <_isatty_r>:
 80aa030:	b538      	push	{r3, r4, r5, lr}
 80aa032:	4d06      	ldr	r5, [pc, #24]	@ (80aa04c <_isatty_r+0x1c>)
 80aa034:	2300      	movs	r3, #0
 80aa036:	4604      	mov	r4, r0
 80aa038:	4608      	mov	r0, r1
 80aa03a:	602b      	str	r3, [r5, #0]
 80aa03c:	f7f6 fcbd 	bl	80a09ba <_isatty>
 80aa040:	1c43      	adds	r3, r0, #1
 80aa042:	d102      	bne.n	80aa04a <_isatty_r+0x1a>
 80aa044:	682b      	ldr	r3, [r5, #0]
 80aa046:	b103      	cbz	r3, 80aa04a <_isatty_r+0x1a>
 80aa048:	6023      	str	r3, [r4, #0]
 80aa04a:	bd38      	pop	{r3, r4, r5, pc}
 80aa04c:	24001ea4 	.word	0x24001ea4

080aa050 <_init>:
 80aa050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80aa052:	bf00      	nop
 80aa054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80aa056:	bc08      	pop	{r3}
 80aa058:	469e      	mov	lr, r3
 80aa05a:	4770      	bx	lr

080aa05c <_fini>:
 80aa05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80aa05e:	bf00      	nop
 80aa060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80aa062:	bc08      	pop	{r3}
 80aa064:	469e      	mov	lr, r3
 80aa066:	4770      	bx	lr
