
h7_bootloader_application_2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  080a0000  080a0000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f00  080a02a0  080a02a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080aa1a0  080aa1a0  0000b1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080aa294  080aa294  0000c160  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080aa294  080aa294  0000b294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080aa29c  080aa29c  0000c160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080aa29c  080aa29c  0000b29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080aa2a0  080aa2a0  0000b2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  24000000  080aa2a4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d68  24000160  080aa404  0000c160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001ec8  080aa404  0000cec8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ac5  00000000  00000000  0000c18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035f9  00000000  00000000  00020c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00024250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c1f  00000000  00000000  000252a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041ccb  00000000  00000000  00025ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160a1  00000000  00000000  00067b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001948fb  00000000  00000000  0007dc33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021252e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004908  00000000  00000000  00212574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00216e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a02a0 <__do_global_dtors_aux>:
 80a02a0:	b510      	push	{r4, lr}
 80a02a2:	4c05      	ldr	r4, [pc, #20]	@ (80a02b8 <__do_global_dtors_aux+0x18>)
 80a02a4:	7823      	ldrb	r3, [r4, #0]
 80a02a6:	b933      	cbnz	r3, 80a02b6 <__do_global_dtors_aux+0x16>
 80a02a8:	4b04      	ldr	r3, [pc, #16]	@ (80a02bc <__do_global_dtors_aux+0x1c>)
 80a02aa:	b113      	cbz	r3, 80a02b2 <__do_global_dtors_aux+0x12>
 80a02ac:	4804      	ldr	r0, [pc, #16]	@ (80a02c0 <__do_global_dtors_aux+0x20>)
 80a02ae:	f3af 8000 	nop.w
 80a02b2:	2301      	movs	r3, #1
 80a02b4:	7023      	strb	r3, [r4, #0]
 80a02b6:	bd10      	pop	{r4, pc}
 80a02b8:	24000160 	.word	0x24000160
 80a02bc:	00000000 	.word	0x00000000
 80a02c0:	080aa188 	.word	0x080aa188

080a02c4 <frame_dummy>:
 80a02c4:	b508      	push	{r3, lr}
 80a02c6:	4b03      	ldr	r3, [pc, #12]	@ (80a02d4 <frame_dummy+0x10>)
 80a02c8:	b11b      	cbz	r3, 80a02d2 <frame_dummy+0xe>
 80a02ca:	4903      	ldr	r1, [pc, #12]	@ (80a02d8 <frame_dummy+0x14>)
 80a02cc:	4803      	ldr	r0, [pc, #12]	@ (80a02dc <frame_dummy+0x18>)
 80a02ce:	f3af 8000 	nop.w
 80a02d2:	bd08      	pop	{r3, pc}
 80a02d4:	00000000 	.word	0x00000000
 80a02d8:	24000164 	.word	0x24000164
 80a02dc:	080aa188 	.word	0x080aa188

080a02e0 <memchr>:
 80a02e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80a02e4:	2a10      	cmp	r2, #16
 80a02e6:	db2b      	blt.n	80a0340 <memchr+0x60>
 80a02e8:	f010 0f07 	tst.w	r0, #7
 80a02ec:	d008      	beq.n	80a0300 <memchr+0x20>
 80a02ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a02f2:	3a01      	subs	r2, #1
 80a02f4:	428b      	cmp	r3, r1
 80a02f6:	d02d      	beq.n	80a0354 <memchr+0x74>
 80a02f8:	f010 0f07 	tst.w	r0, #7
 80a02fc:	b342      	cbz	r2, 80a0350 <memchr+0x70>
 80a02fe:	d1f6      	bne.n	80a02ee <memchr+0xe>
 80a0300:	b4f0      	push	{r4, r5, r6, r7}
 80a0302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80a0306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80a030a:	f022 0407 	bic.w	r4, r2, #7
 80a030e:	f07f 0700 	mvns.w	r7, #0
 80a0312:	2300      	movs	r3, #0
 80a0314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80a0318:	3c08      	subs	r4, #8
 80a031a:	ea85 0501 	eor.w	r5, r5, r1
 80a031e:	ea86 0601 	eor.w	r6, r6, r1
 80a0322:	fa85 f547 	uadd8	r5, r5, r7
 80a0326:	faa3 f587 	sel	r5, r3, r7
 80a032a:	fa86 f647 	uadd8	r6, r6, r7
 80a032e:	faa5 f687 	sel	r6, r5, r7
 80a0332:	b98e      	cbnz	r6, 80a0358 <memchr+0x78>
 80a0334:	d1ee      	bne.n	80a0314 <memchr+0x34>
 80a0336:	bcf0      	pop	{r4, r5, r6, r7}
 80a0338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80a033c:	f002 0207 	and.w	r2, r2, #7
 80a0340:	b132      	cbz	r2, 80a0350 <memchr+0x70>
 80a0342:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a0346:	3a01      	subs	r2, #1
 80a0348:	ea83 0301 	eor.w	r3, r3, r1
 80a034c:	b113      	cbz	r3, 80a0354 <memchr+0x74>
 80a034e:	d1f8      	bne.n	80a0342 <memchr+0x62>
 80a0350:	2000      	movs	r0, #0
 80a0352:	4770      	bx	lr
 80a0354:	3801      	subs	r0, #1
 80a0356:	4770      	bx	lr
 80a0358:	2d00      	cmp	r5, #0
 80a035a:	bf06      	itte	eq
 80a035c:	4635      	moveq	r5, r6
 80a035e:	3803      	subeq	r0, #3
 80a0360:	3807      	subne	r0, #7
 80a0362:	f015 0f01 	tst.w	r5, #1
 80a0366:	d107      	bne.n	80a0378 <memchr+0x98>
 80a0368:	3001      	adds	r0, #1
 80a036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80a036e:	bf02      	ittt	eq
 80a0370:	3001      	addeq	r0, #1
 80a0372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80a0376:	3001      	addeq	r0, #1
 80a0378:	bcf0      	pop	{r4, r5, r6, r7}
 80a037a:	3801      	subs	r0, #1
 80a037c:	4770      	bx	lr
 80a037e:	bf00      	nop

080a0380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80a0380:	b480      	push	{r7}
 80a0382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80a0384:	4b4a      	ldr	r3, [pc, #296]	@ (80a04b0 <SystemInit+0x130>)
 80a0386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80a038a:	4a49      	ldr	r2, [pc, #292]	@ (80a04b0 <SystemInit+0x130>)
 80a038c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80a0390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80a0394:	4b46      	ldr	r3, [pc, #280]	@ (80a04b0 <SystemInit+0x130>)
 80a0396:	691b      	ldr	r3, [r3, #16]
 80a0398:	4a45      	ldr	r2, [pc, #276]	@ (80a04b0 <SystemInit+0x130>)
 80a039a:	f043 0310 	orr.w	r3, r3, #16
 80a039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80a03a0:	4b44      	ldr	r3, [pc, #272]	@ (80a04b4 <SystemInit+0x134>)
 80a03a2:	681b      	ldr	r3, [r3, #0]
 80a03a4:	f003 030f 	and.w	r3, r3, #15
 80a03a8:	2b06      	cmp	r3, #6
 80a03aa:	d807      	bhi.n	80a03bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80a03ac:	4b41      	ldr	r3, [pc, #260]	@ (80a04b4 <SystemInit+0x134>)
 80a03ae:	681b      	ldr	r3, [r3, #0]
 80a03b0:	f023 030f 	bic.w	r3, r3, #15
 80a03b4:	4a3f      	ldr	r2, [pc, #252]	@ (80a04b4 <SystemInit+0x134>)
 80a03b6:	f043 0307 	orr.w	r3, r3, #7
 80a03ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80a03bc:	4b3e      	ldr	r3, [pc, #248]	@ (80a04b8 <SystemInit+0x138>)
 80a03be:	681b      	ldr	r3, [r3, #0]
 80a03c0:	4a3d      	ldr	r2, [pc, #244]	@ (80a04b8 <SystemInit+0x138>)
 80a03c2:	f043 0301 	orr.w	r3, r3, #1
 80a03c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80a03c8:	4b3b      	ldr	r3, [pc, #236]	@ (80a04b8 <SystemInit+0x138>)
 80a03ca:	2200      	movs	r2, #0
 80a03cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80a03ce:	4b3a      	ldr	r3, [pc, #232]	@ (80a04b8 <SystemInit+0x138>)
 80a03d0:	681a      	ldr	r2, [r3, #0]
 80a03d2:	4939      	ldr	r1, [pc, #228]	@ (80a04b8 <SystemInit+0x138>)
 80a03d4:	4b39      	ldr	r3, [pc, #228]	@ (80a04bc <SystemInit+0x13c>)
 80a03d6:	4013      	ands	r3, r2
 80a03d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80a03da:	4b36      	ldr	r3, [pc, #216]	@ (80a04b4 <SystemInit+0x134>)
 80a03dc:	681b      	ldr	r3, [r3, #0]
 80a03de:	f003 0308 	and.w	r3, r3, #8
 80a03e2:	2b00      	cmp	r3, #0
 80a03e4:	d007      	beq.n	80a03f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80a03e6:	4b33      	ldr	r3, [pc, #204]	@ (80a04b4 <SystemInit+0x134>)
 80a03e8:	681b      	ldr	r3, [r3, #0]
 80a03ea:	f023 030f 	bic.w	r3, r3, #15
 80a03ee:	4a31      	ldr	r2, [pc, #196]	@ (80a04b4 <SystemInit+0x134>)
 80a03f0:	f043 0307 	orr.w	r3, r3, #7
 80a03f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80a03f6:	4b30      	ldr	r3, [pc, #192]	@ (80a04b8 <SystemInit+0x138>)
 80a03f8:	2200      	movs	r2, #0
 80a03fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80a03fc:	4b2e      	ldr	r3, [pc, #184]	@ (80a04b8 <SystemInit+0x138>)
 80a03fe:	2200      	movs	r2, #0
 80a0400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80a0402:	4b2d      	ldr	r3, [pc, #180]	@ (80a04b8 <SystemInit+0x138>)
 80a0404:	2200      	movs	r2, #0
 80a0406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80a0408:	4b2b      	ldr	r3, [pc, #172]	@ (80a04b8 <SystemInit+0x138>)
 80a040a:	4a2d      	ldr	r2, [pc, #180]	@ (80a04c0 <SystemInit+0x140>)
 80a040c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80a040e:	4b2a      	ldr	r3, [pc, #168]	@ (80a04b8 <SystemInit+0x138>)
 80a0410:	4a2c      	ldr	r2, [pc, #176]	@ (80a04c4 <SystemInit+0x144>)
 80a0412:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80a0414:	4b28      	ldr	r3, [pc, #160]	@ (80a04b8 <SystemInit+0x138>)
 80a0416:	4a2c      	ldr	r2, [pc, #176]	@ (80a04c8 <SystemInit+0x148>)
 80a0418:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80a041a:	4b27      	ldr	r3, [pc, #156]	@ (80a04b8 <SystemInit+0x138>)
 80a041c:	2200      	movs	r2, #0
 80a041e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80a0420:	4b25      	ldr	r3, [pc, #148]	@ (80a04b8 <SystemInit+0x138>)
 80a0422:	4a29      	ldr	r2, [pc, #164]	@ (80a04c8 <SystemInit+0x148>)
 80a0424:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80a0426:	4b24      	ldr	r3, [pc, #144]	@ (80a04b8 <SystemInit+0x138>)
 80a0428:	2200      	movs	r2, #0
 80a042a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80a042c:	4b22      	ldr	r3, [pc, #136]	@ (80a04b8 <SystemInit+0x138>)
 80a042e:	4a26      	ldr	r2, [pc, #152]	@ (80a04c8 <SystemInit+0x148>)
 80a0430:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80a0432:	4b21      	ldr	r3, [pc, #132]	@ (80a04b8 <SystemInit+0x138>)
 80a0434:	2200      	movs	r2, #0
 80a0436:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80a0438:	4b1f      	ldr	r3, [pc, #124]	@ (80a04b8 <SystemInit+0x138>)
 80a043a:	681b      	ldr	r3, [r3, #0]
 80a043c:	4a1e      	ldr	r2, [pc, #120]	@ (80a04b8 <SystemInit+0x138>)
 80a043e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80a0442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80a0444:	4b1c      	ldr	r3, [pc, #112]	@ (80a04b8 <SystemInit+0x138>)
 80a0446:	2200      	movs	r2, #0
 80a0448:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80a044a:	4b20      	ldr	r3, [pc, #128]	@ (80a04cc <SystemInit+0x14c>)
 80a044c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80a044e:	4a1f      	ldr	r2, [pc, #124]	@ (80a04cc <SystemInit+0x14c>)
 80a0450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80a0454:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80a0456:	4b1e      	ldr	r3, [pc, #120]	@ (80a04d0 <SystemInit+0x150>)
 80a0458:	681a      	ldr	r2, [r3, #0]
 80a045a:	4b1e      	ldr	r3, [pc, #120]	@ (80a04d4 <SystemInit+0x154>)
 80a045c:	4013      	ands	r3, r2
 80a045e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80a0462:	d202      	bcs.n	80a046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80a0464:	4b1c      	ldr	r3, [pc, #112]	@ (80a04d8 <SystemInit+0x158>)
 80a0466:	2201      	movs	r2, #1
 80a0468:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80a046a:	4b13      	ldr	r3, [pc, #76]	@ (80a04b8 <SystemInit+0x138>)
 80a046c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80a0470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80a0474:	2b00      	cmp	r3, #0
 80a0476:	d113      	bne.n	80a04a0 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80a0478:	4b0f      	ldr	r3, [pc, #60]	@ (80a04b8 <SystemInit+0x138>)
 80a047a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80a047e:	4a0e      	ldr	r2, [pc, #56]	@ (80a04b8 <SystemInit+0x138>)
 80a0480:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80a0484:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80a0488:	4b14      	ldr	r3, [pc, #80]	@ (80a04dc <SystemInit+0x15c>)
 80a048a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80a048e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80a0490:	4b09      	ldr	r3, [pc, #36]	@ (80a04b8 <SystemInit+0x138>)
 80a0492:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80a0496:	4a08      	ldr	r2, [pc, #32]	@ (80a04b8 <SystemInit+0x138>)
 80a0498:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80a049c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  }

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 80a04a0:	4b03      	ldr	r3, [pc, #12]	@ (80a04b0 <SystemInit+0x130>)
 80a04a2:	4a0f      	ldr	r2, [pc, #60]	@ (80a04e0 <SystemInit+0x160>)
 80a04a4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80a04a6:	bf00      	nop
 80a04a8:	46bd      	mov	sp, r7
 80a04aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a04ae:	4770      	bx	lr
 80a04b0:	e000ed00 	.word	0xe000ed00
 80a04b4:	52002000 	.word	0x52002000
 80a04b8:	58024400 	.word	0x58024400
 80a04bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80a04c0:	02020200 	.word	0x02020200
 80a04c4:	01ff0000 	.word	0x01ff0000
 80a04c8:	01010280 	.word	0x01010280
 80a04cc:	580000c0 	.word	0x580000c0
 80a04d0:	5c001000 	.word	0x5c001000
 80a04d4:	ffff0000 	.word	0xffff0000
 80a04d8:	51008108 	.word	0x51008108
 80a04dc:	52004000 	.word	0x52004000
 80a04e0:	080a0000 	.word	0x080a0000

080a04e4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80a04e4:	b480      	push	{r7}
 80a04e6:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80a04e8:	4b09      	ldr	r3, [pc, #36]	@ (80a0510 <ExitRun0Mode+0x2c>)
 80a04ea:	68db      	ldr	r3, [r3, #12]
 80a04ec:	4a08      	ldr	r2, [pc, #32]	@ (80a0510 <ExitRun0Mode+0x2c>)
 80a04ee:	f023 0302 	bic.w	r3, r3, #2
 80a04f2:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80a04f4:	bf00      	nop
 80a04f6:	4b06      	ldr	r3, [pc, #24]	@ (80a0510 <ExitRun0Mode+0x2c>)
 80a04f8:	685b      	ldr	r3, [r3, #4]
 80a04fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80a04fe:	2b00      	cmp	r3, #0
 80a0500:	d0f9      	beq.n	80a04f6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80a0502:	bf00      	nop
 80a0504:	bf00      	nop
 80a0506:	46bd      	mov	sp, r7
 80a0508:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a050c:	4770      	bx	lr
 80a050e:	bf00      	nop
 80a0510:	58024800 	.word	0x58024800

080a0514 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80a0514:	b580      	push	{r7, lr}
 80a0516:	b082      	sub	sp, #8
 80a0518:	af00      	add	r7, sp, #0
 80a051a:	4603      	mov	r3, r0
 80a051c:	80fb      	strh	r3, [r7, #6]
    	 printf("Callback \n\r");
 80a051e:	4808      	ldr	r0, [pc, #32]	@ (80a0540 <HAL_GPIO_EXTI_Callback+0x2c>)
 80a0520:	f008 ffc6 	bl	80a94b0 <iprintf>
    if(GPIO_Pin == GPIO_PIN_8)
 80a0524:	88fb      	ldrh	r3, [r7, #6]
 80a0526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80a052a:	d105      	bne.n	80a0538 <HAL_GPIO_EXTI_Callback+0x24>
    {
    	printf("Callback btn\n\r");
 80a052c:	4805      	ldr	r0, [pc, #20]	@ (80a0544 <HAL_GPIO_EXTI_Callback+0x30>)
 80a052e:	f008 ffbf 	bl	80a94b0 <iprintf>
    	jumpToBootloader = 1;
 80a0532:	4b05      	ldr	r3, [pc, #20]	@ (80a0548 <HAL_GPIO_EXTI_Callback+0x34>)
 80a0534:	2201      	movs	r2, #1
 80a0536:	601a      	str	r2, [r3, #0]
    	// HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
    }
}
 80a0538:	bf00      	nop
 80a053a:	3708      	adds	r7, #8
 80a053c:	46bd      	mov	sp, r7
 80a053e:	bd80      	pop	{r7, pc}
 80a0540:	080aa1a0 	.word	0x080aa1a0
 80a0544:	080aa1ac 	.word	0x080aa1ac
 80a0548:	2400018c 	.word	0x2400018c

080a054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80a054c:	b580      	push	{r7, lr}
 80a054e:	b082      	sub	sp, #8
 80a0550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	printf("Application 2\n\r");
 80a0552:	4834      	ldr	r0, [pc, #208]	@ (80a0624 <main+0xd8>)
 80a0554:	f008 ffac 	bl	80a94b0 <iprintf>
	jumpToBootloader = 0;
 80a0558:	4b33      	ldr	r3, [pc, #204]	@ (80a0628 <main+0xdc>)
 80a055a:	2200      	movs	r2, #0
 80a055c:	601a      	str	r2, [r3, #0]
//#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80a055e:	f000 fb29 	bl	80a0bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80a0562:	f000 f87b 	bl	80a065c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80a0566:	f000 f8ff 	bl	80a0768 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
//#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80a056a:	4b30      	ldr	r3, [pc, #192]	@ (80a062c <main+0xe0>)
 80a056c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a0570:	4a2e      	ldr	r2, [pc, #184]	@ (80a062c <main+0xe0>)
 80a0572:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80a0576:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a057a:	4b2c      	ldr	r3, [pc, #176]	@ (80a062c <main+0xe0>)
 80a057c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a0580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80a0584:	603b      	str	r3, [r7, #0]
 80a0586:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80a0588:	2000      	movs	r0, #0
 80a058a:	f000 fee3 	bl	80a1354 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80a058e:	2100      	movs	r1, #0
 80a0590:	2000      	movs	r0, #0
 80a0592:	f000 fef9 	bl	80a1388 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80a0596:	f000 f917 	bl	80a07c8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80a059a:	f008 f8f9 	bl	80a8790 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  printf("Firmware Application 2\n\r");
 80a059e:	4824      	ldr	r0, [pc, #144]	@ (80a0630 <main+0xe4>)
 80a05a0:	f008 ff86 	bl	80a94b0 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("loop\n\r");
 80a05a4:	4823      	ldr	r0, [pc, #140]	@ (80a0634 <main+0xe8>)
 80a05a6:	f008 ff83 	bl	80a94b0 <iprintf>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11); // Toggle PA11
 80a05aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80a05ae:	4822      	ldr	r0, [pc, #136]	@ (80a0638 <main+0xec>)
 80a05b0:	f000 fe9b 	bl	80a12ea <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80a05b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80a05b8:	f000 fb8e 	bl	80a0cd8 <HAL_Delay>

	  if(jumpToBootloader){
 80a05bc:	4b1a      	ldr	r3, [pc, #104]	@ (80a0628 <main+0xdc>)
 80a05be:	681b      	ldr	r3, [r3, #0]
 80a05c0:	2b00      	cmp	r3, #0
 80a05c2:	d0ef      	beq.n	80a05a4 <main+0x58>
		  jumpToBootloader=0;
 80a05c4:	4b18      	ldr	r3, [pc, #96]	@ (80a0628 <main+0xdc>)
 80a05c6:	2200      	movs	r2, #0
 80a05c8:	601a      	str	r2, [r3, #0]
	     	  printf("Jumping to Bootloader\n\r");
 80a05ca:	481c      	ldr	r0, [pc, #112]	@ (80a063c <main+0xf0>)
 80a05cc:	f008 ff70 	bl	80a94b0 <iprintf>
	     	  	 dfu_boot_flag = (uint32_t*) (&_bflag); // set in linker script
 80a05d0:	4b1b      	ldr	r3, [pc, #108]	@ (80a0640 <main+0xf4>)
 80a05d2:	4a1c      	ldr	r2, [pc, #112]	@ (80a0644 <main+0xf8>)
 80a05d4:	601a      	str	r2, [r3, #0]

	     	  	 if (*dfu_boot_flag != DFU_BOOT_FLAG) {
 80a05d6:	4b1a      	ldr	r3, [pc, #104]	@ (80a0640 <main+0xf4>)
 80a05d8:	681b      	ldr	r3, [r3, #0]
 80a05da:	681b      	ldr	r3, [r3, #0]
 80a05dc:	4a1a      	ldr	r2, [pc, #104]	@ (80a0648 <main+0xfc>)
 80a05de:	4293      	cmp	r3, r2
 80a05e0:	d01b      	beq.n	80a061a <main+0xce>

	     	  	 /* Test if user code is programmed starting from address 0x08000000 */
	     	  	 if (((*(__IO uint32_t*) 0x08000000) & 0x2FF80000) == 0x24000000) {
 80a05e2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80a05e6:	681a      	ldr	r2, [r3, #0]
 80a05e8:	4b18      	ldr	r3, [pc, #96]	@ (80a064c <main+0x100>)
 80a05ea:	4013      	ands	r3, r2
 80a05ec:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 80a05f0:	d113      	bne.n	80a061a <main+0xce>

	     	  		 /* Jump to user application */
	     	  		 JumpAddress = *(__IO uint32_t*) (0x08000000 + 4);
 80a05f2:	4b17      	ldr	r3, [pc, #92]	@ (80a0650 <main+0x104>)
 80a05f4:	681b      	ldr	r3, [r3, #0]
 80a05f6:	4a17      	ldr	r2, [pc, #92]	@ (80a0654 <main+0x108>)
 80a05f8:	6013      	str	r3, [r2, #0]
	     	  		 JumpToApplication = (pFunction) JumpAddress;
 80a05fa:	4b16      	ldr	r3, [pc, #88]	@ (80a0654 <main+0x108>)
 80a05fc:	681b      	ldr	r3, [r3, #0]
 80a05fe:	461a      	mov	r2, r3
 80a0600:	4b15      	ldr	r3, [pc, #84]	@ (80a0658 <main+0x10c>)
 80a0602:	601a      	str	r2, [r3, #0]

	     	  		 /* Initialize user application's Stack Pointer */
	     	  		 __set_MSP(*(__IO uint32_t*) 0x08000000);
 80a0604:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80a0608:	681b      	ldr	r3, [r3, #0]
 80a060a:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80a060c:	687b      	ldr	r3, [r7, #4]
 80a060e:	f383 8808 	msr	MSP, r3
}
 80a0612:	bf00      	nop
	     	  		 JumpToApplication();
 80a0614:	4b10      	ldr	r3, [pc, #64]	@ (80a0658 <main+0x10c>)
 80a0616:	681b      	ldr	r3, [r3, #0]
 80a0618:	4798      	blx	r3
	     	  	 	 }
	     	  	 }
	     	  	 *dfu_boot_flag=0;
 80a061a:	4b09      	ldr	r3, [pc, #36]	@ (80a0640 <main+0xf4>)
 80a061c:	681b      	ldr	r3, [r3, #0]
 80a061e:	2200      	movs	r2, #0
 80a0620:	601a      	str	r2, [r3, #0]
	  printf("loop\n\r");
 80a0622:	e7bf      	b.n	80a05a4 <main+0x58>
 80a0624:	080aa1bc 	.word	0x080aa1bc
 80a0628:	2400018c 	.word	0x2400018c
 80a062c:	58024400 	.word	0x58024400
 80a0630:	080aa1cc 	.word	0x080aa1cc
 80a0634:	080aa1e8 	.word	0x080aa1e8
 80a0638:	58020000 	.word	0x58020000
 80a063c:	080aa1f0 	.word	0x080aa1f0
 80a0640:	24000180 	.word	0x24000180
 80a0644:	2400017c 	.word	0x2400017c
 80a0648:	deadbeef 	.word	0xdeadbeef
 80a064c:	2ff80000 	.word	0x2ff80000
 80a0650:	08000004 	.word	0x08000004
 80a0654:	24000188 	.word	0x24000188
 80a0658:	24000184 	.word	0x24000184

080a065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80a065c:	b580      	push	{r7, lr}
 80a065e:	b09c      	sub	sp, #112	@ 0x70
 80a0660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80a0662:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80a0666:	224c      	movs	r2, #76	@ 0x4c
 80a0668:	2100      	movs	r1, #0
 80a066a:	4618      	mov	r0, r3
 80a066c:	f008 ff75 	bl	80a955a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80a0670:	1d3b      	adds	r3, r7, #4
 80a0672:	2220      	movs	r2, #32
 80a0674:	2100      	movs	r1, #0
 80a0676:	4618      	mov	r0, r3
 80a0678:	f008 ff6f 	bl	80a955a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80a067c:	2004      	movs	r0, #4
 80a067e:	f002 f937 	bl	80a28f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80a0682:	2300      	movs	r3, #0
 80a0684:	603b      	str	r3, [r7, #0]
 80a0686:	4b36      	ldr	r3, [pc, #216]	@ (80a0760 <SystemClock_Config+0x104>)
 80a0688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a068a:	4a35      	ldr	r2, [pc, #212]	@ (80a0760 <SystemClock_Config+0x104>)
 80a068c:	f023 0301 	bic.w	r3, r3, #1
 80a0690:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80a0692:	4b33      	ldr	r3, [pc, #204]	@ (80a0760 <SystemClock_Config+0x104>)
 80a0694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a0696:	f003 0301 	and.w	r3, r3, #1
 80a069a:	603b      	str	r3, [r7, #0]
 80a069c:	4b31      	ldr	r3, [pc, #196]	@ (80a0764 <SystemClock_Config+0x108>)
 80a069e:	699b      	ldr	r3, [r3, #24]
 80a06a0:	4a30      	ldr	r2, [pc, #192]	@ (80a0764 <SystemClock_Config+0x108>)
 80a06a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80a06a6:	6193      	str	r3, [r2, #24]
 80a06a8:	4b2e      	ldr	r3, [pc, #184]	@ (80a0764 <SystemClock_Config+0x108>)
 80a06aa:	699b      	ldr	r3, [r3, #24]
 80a06ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80a06b0:	603b      	str	r3, [r7, #0]
 80a06b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80a06b4:	bf00      	nop
 80a06b6:	4b2b      	ldr	r3, [pc, #172]	@ (80a0764 <SystemClock_Config+0x108>)
 80a06b8:	699b      	ldr	r3, [r3, #24]
 80a06ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80a06be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80a06c2:	d1f8      	bne.n	80a06b6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80a06c4:	230b      	movs	r3, #11
 80a06c6:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80a06c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80a06cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80a06ce:	2301      	movs	r3, #1
 80a06d0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80a06d2:	2340      	movs	r3, #64	@ 0x40
 80a06d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80a06d6:	2301      	movs	r3, #1
 80a06d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80a06da:	2302      	movs	r3, #2
 80a06dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80a06de:	2302      	movs	r3, #2
 80a06e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80a06e2:	2305      	movs	r3, #5
 80a06e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 80a06e6:	2330      	movs	r3, #48	@ 0x30
 80a06e8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80a06ea:	2302      	movs	r3, #2
 80a06ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80a06ee:	2305      	movs	r3, #5
 80a06f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80a06f2:	2302      	movs	r3, #2
 80a06f4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80a06f6:	2308      	movs	r3, #8
 80a06f8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80a06fa:	2300      	movs	r3, #0
 80a06fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80a06fe:	2300      	movs	r3, #0
 80a0700:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80a0702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80a0706:	4618      	mov	r0, r3
 80a0708:	f002 f95c 	bl	80a29c4 <HAL_RCC_OscConfig>
 80a070c:	4603      	mov	r3, r0
 80a070e:	2b00      	cmp	r3, #0
 80a0710:	d001      	beq.n	80a0716 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80a0712:	f000 f8f5 	bl	80a0900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80a0716:	233f      	movs	r3, #63	@ 0x3f
 80a0718:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80a071a:	2300      	movs	r3, #0
 80a071c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80a071e:	2300      	movs	r3, #0
 80a0720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80a0722:	2300      	movs	r3, #0
 80a0724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80a0726:	2300      	movs	r3, #0
 80a0728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80a072a:	2300      	movs	r3, #0
 80a072c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 80a072e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80a0732:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80a0734:	2300      	movs	r3, #0
 80a0736:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80a0738:	1d3b      	adds	r3, r7, #4
 80a073a:	2100      	movs	r1, #0
 80a073c:	4618      	mov	r0, r3
 80a073e:	f002 fd9b 	bl	80a3278 <HAL_RCC_ClockConfig>
 80a0742:	4603      	mov	r3, r0
 80a0744:	2b00      	cmp	r3, #0
 80a0746:	d001      	beq.n	80a074c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80a0748:	f000 f8da 	bl	80a0900 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80a074c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80a0750:	2100      	movs	r1, #0
 80a0752:	2000      	movs	r0, #0
 80a0754:	f002 ff46 	bl	80a35e4 <HAL_RCC_MCOConfig>
}
 80a0758:	bf00      	nop
 80a075a:	3770      	adds	r7, #112	@ 0x70
 80a075c:	46bd      	mov	sp, r7
 80a075e:	bd80      	pop	{r7, pc}
 80a0760:	58000400 	.word	0x58000400
 80a0764:	58024800 	.word	0x58024800

080a0768 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80a0768:	b580      	push	{r7, lr}
 80a076a:	b0b2      	sub	sp, #200	@ 0xc8
 80a076c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80a076e:	463b      	mov	r3, r7
 80a0770:	22c8      	movs	r2, #200	@ 0xc8
 80a0772:	2100      	movs	r1, #0
 80a0774:	4618      	mov	r0, r3
 80a0776:	f008 fef0 	bl	80a955a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80a077a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80a077e:	f04f 0300 	mov.w	r3, #0
 80a0782:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80a0786:	2302      	movs	r3, #2
 80a0788:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80a078a:	230c      	movs	r3, #12
 80a078c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80a078e:	2302      	movs	r3, #2
 80a0790:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80a0792:	2302      	movs	r3, #2
 80a0794:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80a0796:	2302      	movs	r3, #2
 80a0798:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80a079a:	23c0      	movs	r3, #192	@ 0xc0
 80a079c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80a079e:	2320      	movs	r3, #32
 80a07a0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80a07a2:	2300      	movs	r3, #0
 80a07a4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80a07a6:	2300      	movs	r3, #0
 80a07a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80a07ac:	463b      	mov	r3, r7
 80a07ae:	4618      	mov	r0, r3
 80a07b0:	f003 f92c 	bl	80a3a0c <HAL_RCCEx_PeriphCLKConfig>
 80a07b4:	4603      	mov	r3, r0
 80a07b6:	2b00      	cmp	r3, #0
 80a07b8:	d001      	beq.n	80a07be <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80a07ba:	f000 f8a1 	bl	80a0900 <Error_Handler>
  }
}
 80a07be:	bf00      	nop
 80a07c0:	37c8      	adds	r7, #200	@ 0xc8
 80a07c2:	46bd      	mov	sp, r7
 80a07c4:	bd80      	pop	{r7, pc}
	...

080a07c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80a07c8:	b580      	push	{r7, lr}
 80a07ca:	b08a      	sub	sp, #40	@ 0x28
 80a07cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80a07ce:	f107 0314 	add.w	r3, r7, #20
 80a07d2:	2200      	movs	r2, #0
 80a07d4:	601a      	str	r2, [r3, #0]
 80a07d6:	605a      	str	r2, [r3, #4]
 80a07d8:	609a      	str	r2, [r3, #8]
 80a07da:	60da      	str	r2, [r3, #12]
 80a07dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80a07de:	4b45      	ldr	r3, [pc, #276]	@ (80a08f4 <MX_GPIO_Init+0x12c>)
 80a07e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a07e4:	4a43      	ldr	r2, [pc, #268]	@ (80a08f4 <MX_GPIO_Init+0x12c>)
 80a07e6:	f043 0302 	orr.w	r3, r3, #2
 80a07ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a07ee:	4b41      	ldr	r3, [pc, #260]	@ (80a08f4 <MX_GPIO_Init+0x12c>)
 80a07f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a07f4:	f003 0302 	and.w	r3, r3, #2
 80a07f8:	613b      	str	r3, [r7, #16]
 80a07fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80a07fc:	4b3d      	ldr	r3, [pc, #244]	@ (80a08f4 <MX_GPIO_Init+0x12c>)
 80a07fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a0802:	4a3c      	ldr	r2, [pc, #240]	@ (80a08f4 <MX_GPIO_Init+0x12c>)
 80a0804:	f043 0304 	orr.w	r3, r3, #4
 80a0808:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a080c:	4b39      	ldr	r3, [pc, #228]	@ (80a08f4 <MX_GPIO_Init+0x12c>)
 80a080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a0812:	f003 0304 	and.w	r3, r3, #4
 80a0816:	60fb      	str	r3, [r7, #12]
 80a0818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80a081a:	4b36      	ldr	r3, [pc, #216]	@ (80a08f4 <MX_GPIO_Init+0x12c>)
 80a081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a0820:	4a34      	ldr	r2, [pc, #208]	@ (80a08f4 <MX_GPIO_Init+0x12c>)
 80a0822:	f043 0301 	orr.w	r3, r3, #1
 80a0826:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a082a:	4b32      	ldr	r3, [pc, #200]	@ (80a08f4 <MX_GPIO_Init+0x12c>)
 80a082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a0830:	f003 0301 	and.w	r3, r3, #1
 80a0834:	60bb      	str	r3, [r7, #8]
 80a0836:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80a0838:	4b2e      	ldr	r3, [pc, #184]	@ (80a08f4 <MX_GPIO_Init+0x12c>)
 80a083a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a083e:	4a2d      	ldr	r2, [pc, #180]	@ (80a08f4 <MX_GPIO_Init+0x12c>)
 80a0840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80a0844:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a0848:	4b2a      	ldr	r3, [pc, #168]	@ (80a08f4 <MX_GPIO_Init+0x12c>)
 80a084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a084e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a0852:	607b      	str	r3, [r7, #4]
 80a0854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80a0856:	4b27      	ldr	r3, [pc, #156]	@ (80a08f4 <MX_GPIO_Init+0x12c>)
 80a0858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a085c:	4a25      	ldr	r2, [pc, #148]	@ (80a08f4 <MX_GPIO_Init+0x12c>)
 80a085e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80a0862:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a0866:	4b23      	ldr	r3, [pc, #140]	@ (80a08f4 <MX_GPIO_Init+0x12c>)
 80a0868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a086c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80a0870:	603b      	str	r3, [r7, #0]
 80a0872:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80a0874:	2200      	movs	r2, #0
 80a0876:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80a087a:	481f      	ldr	r0, [pc, #124]	@ (80a08f8 <MX_GPIO_Init+0x130>)
 80a087c:	f000 fd1c 	bl	80a12b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80a0880:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80a0884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80a0886:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80a088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80a088c:	2301      	movs	r3, #1
 80a088e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80a0890:	f107 0314 	add.w	r3, r7, #20
 80a0894:	4619      	mov	r1, r3
 80a0896:	4819      	ldr	r0, [pc, #100]	@ (80a08fc <MX_GPIO_Init+0x134>)
 80a0898:	f000 fb5e 	bl	80a0f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80a089c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80a08a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a08a2:	2302      	movs	r3, #2
 80a08a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a08a6:	2300      	movs	r3, #0
 80a08a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80a08aa:	2300      	movs	r3, #0
 80a08ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80a08ae:	2300      	movs	r3, #0
 80a08b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80a08b2:	f107 0314 	add.w	r3, r7, #20
 80a08b6:	4619      	mov	r1, r3
 80a08b8:	480f      	ldr	r0, [pc, #60]	@ (80a08f8 <MX_GPIO_Init+0x130>)
 80a08ba:	f000 fb4d 	bl	80a0f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80a08be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80a08c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80a08c4:	2301      	movs	r3, #1
 80a08c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a08c8:	2300      	movs	r3, #0
 80a08ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80a08cc:	2300      	movs	r3, #0
 80a08ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80a08d0:	f107 0314 	add.w	r3, r7, #20
 80a08d4:	4619      	mov	r1, r3
 80a08d6:	4808      	ldr	r0, [pc, #32]	@ (80a08f8 <MX_GPIO_Init+0x130>)
 80a08d8:	f000 fb3e 	bl	80a0f58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80a08dc:	2200      	movs	r2, #0
 80a08de:	2100      	movs	r1, #0
 80a08e0:	2017      	movs	r0, #23
 80a08e2:	f000 fb04 	bl	80a0eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80a08e6:	2017      	movs	r0, #23
 80a08e8:	f000 fb1b 	bl	80a0f22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80a08ec:	bf00      	nop
 80a08ee:	3728      	adds	r7, #40	@ 0x28
 80a08f0:	46bd      	mov	sp, r7
 80a08f2:	bd80      	pop	{r7, pc}
 80a08f4:	58024400 	.word	0x58024400
 80a08f8:	58020000 	.word	0x58020000
 80a08fc:	58020400 	.word	0x58020400

080a0900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80a0900:	b480      	push	{r7}
 80a0902:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80a0904:	b672      	cpsid	i
}
 80a0906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80a0908:	bf00      	nop
 80a090a:	e7fd      	b.n	80a0908 <Error_Handler+0x8>

080a090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80a090c:	b480      	push	{r7}
 80a090e:	b083      	sub	sp, #12
 80a0910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80a0912:	4b0a      	ldr	r3, [pc, #40]	@ (80a093c <HAL_MspInit+0x30>)
 80a0914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80a0918:	4a08      	ldr	r2, [pc, #32]	@ (80a093c <HAL_MspInit+0x30>)
 80a091a:	f043 0302 	orr.w	r3, r3, #2
 80a091e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80a0922:	4b06      	ldr	r3, [pc, #24]	@ (80a093c <HAL_MspInit+0x30>)
 80a0924:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80a0928:	f003 0302 	and.w	r3, r3, #2
 80a092c:	607b      	str	r3, [r7, #4]
 80a092e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80a0930:	bf00      	nop
 80a0932:	370c      	adds	r7, #12
 80a0934:	46bd      	mov	sp, r7
 80a0936:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a093a:	4770      	bx	lr
 80a093c:	58024400 	.word	0x58024400

080a0940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80a0940:	b480      	push	{r7}
 80a0942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80a0944:	bf00      	nop
 80a0946:	e7fd      	b.n	80a0944 <NMI_Handler+0x4>

080a0948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80a0948:	b480      	push	{r7}
 80a094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80a094c:	bf00      	nop
 80a094e:	e7fd      	b.n	80a094c <HardFault_Handler+0x4>

080a0950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80a0950:	b480      	push	{r7}
 80a0952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80a0954:	bf00      	nop
 80a0956:	e7fd      	b.n	80a0954 <MemManage_Handler+0x4>

080a0958 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80a0958:	b480      	push	{r7}
 80a095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80a095c:	bf00      	nop
 80a095e:	e7fd      	b.n	80a095c <BusFault_Handler+0x4>

080a0960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80a0960:	b480      	push	{r7}
 80a0962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80a0964:	bf00      	nop
 80a0966:	e7fd      	b.n	80a0964 <UsageFault_Handler+0x4>

080a0968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80a0968:	b480      	push	{r7}
 80a096a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80a096c:	bf00      	nop
 80a096e:	46bd      	mov	sp, r7
 80a0970:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0974:	4770      	bx	lr

080a0976 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80a0976:	b480      	push	{r7}
 80a0978:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80a097a:	bf00      	nop
 80a097c:	46bd      	mov	sp, r7
 80a097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0982:	4770      	bx	lr

080a0984 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80a0984:	b480      	push	{r7}
 80a0986:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80a0988:	bf00      	nop
 80a098a:	46bd      	mov	sp, r7
 80a098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0990:	4770      	bx	lr

080a0992 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80a0992:	b580      	push	{r7, lr}
 80a0994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80a0996:	f000 f97f 	bl	80a0c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80a099a:	bf00      	nop
 80a099c:	bd80      	pop	{r7, pc}

080a099e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80a099e:	b580      	push	{r7, lr}
 80a09a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80a09a2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80a09a6:	f000 fcba 	bl	80a131e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80a09aa:	bf00      	nop
 80a09ac:	bd80      	pop	{r7, pc}
	...

080a09b0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80a09b0:	b580      	push	{r7, lr}
 80a09b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80a09b4:	4802      	ldr	r0, [pc, #8]	@ (80a09c0 <OTG_HS_IRQHandler+0x10>)
 80a09b6:	f000 fe3c 	bl	80a1632 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80a09ba:	bf00      	nop
 80a09bc:	bd80      	pop	{r7, pc}
 80a09be:	bf00      	nop
 80a09c0:	24001678 	.word	0x24001678

080a09c4 <ITM_SendChar>:
#define DEMCR        			*((volatile uint32_t*) 0xE000EDFCU )
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )
void ITM_SendChar(uint8_t ch)
{
 80a09c4:	b480      	push	{r7}
 80a09c6:	b083      	sub	sp, #12
 80a09c8:	af00      	add	r7, sp, #0
 80a09ca:	4603      	mov	r3, r0
 80a09cc:	71fb      	strb	r3, [r7, #7]
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80a09ce:	4b0f      	ldr	r3, [pc, #60]	@ (80a0a0c <ITM_SendChar+0x48>)
 80a09d0:	681b      	ldr	r3, [r3, #0]
 80a09d2:	4a0e      	ldr	r2, [pc, #56]	@ (80a0a0c <ITM_SendChar+0x48>)
 80a09d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80a09d8:	6013      	str	r3, [r2, #0]
	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80a09da:	4b0d      	ldr	r3, [pc, #52]	@ (80a0a10 <ITM_SendChar+0x4c>)
 80a09dc:	681b      	ldr	r3, [r3, #0]
 80a09de:	4a0c      	ldr	r2, [pc, #48]	@ (80a0a10 <ITM_SendChar+0x4c>)
 80a09e0:	f043 0301 	orr.w	r3, r3, #1
 80a09e4:	6013      	str	r3, [r2, #0]
	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80a09e6:	bf00      	nop
 80a09e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80a09ec:	681b      	ldr	r3, [r3, #0]
 80a09ee:	f003 0301 	and.w	r3, r3, #1
 80a09f2:	2b00      	cmp	r3, #0
 80a09f4:	d0f8      	beq.n	80a09e8 <ITM_SendChar+0x24>
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80a09f6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80a09fa:	79fb      	ldrb	r3, [r7, #7]
 80a09fc:	6013      	str	r3, [r2, #0]
}
 80a09fe:	bf00      	nop
 80a0a00:	370c      	adds	r7, #12
 80a0a02:	46bd      	mov	sp, r7
 80a0a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0a08:	4770      	bx	lr
 80a0a0a:	bf00      	nop
 80a0a0c:	e000edfc 	.word	0xe000edfc
 80a0a10:	e0000e00 	.word	0xe0000e00

080a0a14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80a0a14:	b580      	push	{r7, lr}
 80a0a16:	b086      	sub	sp, #24
 80a0a18:	af00      	add	r7, sp, #0
 80a0a1a:	60f8      	str	r0, [r7, #12]
 80a0a1c:	60b9      	str	r1, [r7, #8]
 80a0a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80a0a20:	2300      	movs	r3, #0
 80a0a22:	617b      	str	r3, [r7, #20]
 80a0a24:	e00a      	b.n	80a0a3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80a0a26:	f3af 8000 	nop.w
 80a0a2a:	4601      	mov	r1, r0
 80a0a2c:	68bb      	ldr	r3, [r7, #8]
 80a0a2e:	1c5a      	adds	r2, r3, #1
 80a0a30:	60ba      	str	r2, [r7, #8]
 80a0a32:	b2ca      	uxtb	r2, r1
 80a0a34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80a0a36:	697b      	ldr	r3, [r7, #20]
 80a0a38:	3301      	adds	r3, #1
 80a0a3a:	617b      	str	r3, [r7, #20]
 80a0a3c:	697a      	ldr	r2, [r7, #20]
 80a0a3e:	687b      	ldr	r3, [r7, #4]
 80a0a40:	429a      	cmp	r2, r3
 80a0a42:	dbf0      	blt.n	80a0a26 <_read+0x12>
  }

  return len;
 80a0a44:	687b      	ldr	r3, [r7, #4]
}
 80a0a46:	4618      	mov	r0, r3
 80a0a48:	3718      	adds	r7, #24
 80a0a4a:	46bd      	mov	sp, r7
 80a0a4c:	bd80      	pop	{r7, pc}

080a0a4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80a0a4e:	b580      	push	{r7, lr}
 80a0a50:	b086      	sub	sp, #24
 80a0a52:	af00      	add	r7, sp, #0
 80a0a54:	60f8      	str	r0, [r7, #12]
 80a0a56:	60b9      	str	r1, [r7, #8]
 80a0a58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80a0a5a:	2300      	movs	r3, #0
 80a0a5c:	617b      	str	r3, [r7, #20]
 80a0a5e:	e009      	b.n	80a0a74 <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80a0a60:	68bb      	ldr	r3, [r7, #8]
 80a0a62:	1c5a      	adds	r2, r3, #1
 80a0a64:	60ba      	str	r2, [r7, #8]
 80a0a66:	781b      	ldrb	r3, [r3, #0]
 80a0a68:	4618      	mov	r0, r3
 80a0a6a:	f7ff ffab 	bl	80a09c4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80a0a6e:	697b      	ldr	r3, [r7, #20]
 80a0a70:	3301      	adds	r3, #1
 80a0a72:	617b      	str	r3, [r7, #20]
 80a0a74:	697a      	ldr	r2, [r7, #20]
 80a0a76:	687b      	ldr	r3, [r7, #4]
 80a0a78:	429a      	cmp	r2, r3
 80a0a7a:	dbf1      	blt.n	80a0a60 <_write+0x12>
  }
  return len;
 80a0a7c:	687b      	ldr	r3, [r7, #4]
}
 80a0a7e:	4618      	mov	r0, r3
 80a0a80:	3718      	adds	r7, #24
 80a0a82:	46bd      	mov	sp, r7
 80a0a84:	bd80      	pop	{r7, pc}

080a0a86 <_close>:

int _close(int file)
{
 80a0a86:	b480      	push	{r7}
 80a0a88:	b083      	sub	sp, #12
 80a0a8a:	af00      	add	r7, sp, #0
 80a0a8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80a0a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80a0a92:	4618      	mov	r0, r3
 80a0a94:	370c      	adds	r7, #12
 80a0a96:	46bd      	mov	sp, r7
 80a0a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0a9c:	4770      	bx	lr

080a0a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 80a0a9e:	b480      	push	{r7}
 80a0aa0:	b083      	sub	sp, #12
 80a0aa2:	af00      	add	r7, sp, #0
 80a0aa4:	6078      	str	r0, [r7, #4]
 80a0aa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80a0aa8:	683b      	ldr	r3, [r7, #0]
 80a0aaa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80a0aae:	605a      	str	r2, [r3, #4]
  return 0;
 80a0ab0:	2300      	movs	r3, #0
}
 80a0ab2:	4618      	mov	r0, r3
 80a0ab4:	370c      	adds	r7, #12
 80a0ab6:	46bd      	mov	sp, r7
 80a0ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0abc:	4770      	bx	lr

080a0abe <_isatty>:

int _isatty(int file)
{
 80a0abe:	b480      	push	{r7}
 80a0ac0:	b083      	sub	sp, #12
 80a0ac2:	af00      	add	r7, sp, #0
 80a0ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80a0ac6:	2301      	movs	r3, #1
}
 80a0ac8:	4618      	mov	r0, r3
 80a0aca:	370c      	adds	r7, #12
 80a0acc:	46bd      	mov	sp, r7
 80a0ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0ad2:	4770      	bx	lr

080a0ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80a0ad4:	b480      	push	{r7}
 80a0ad6:	b085      	sub	sp, #20
 80a0ad8:	af00      	add	r7, sp, #0
 80a0ada:	60f8      	str	r0, [r7, #12]
 80a0adc:	60b9      	str	r1, [r7, #8]
 80a0ade:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80a0ae0:	2300      	movs	r3, #0
}
 80a0ae2:	4618      	mov	r0, r3
 80a0ae4:	3714      	adds	r7, #20
 80a0ae6:	46bd      	mov	sp, r7
 80a0ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0aec:	4770      	bx	lr
	...

080a0af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80a0af0:	b580      	push	{r7, lr}
 80a0af2:	b086      	sub	sp, #24
 80a0af4:	af00      	add	r7, sp, #0
 80a0af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80a0af8:	4a14      	ldr	r2, [pc, #80]	@ (80a0b4c <_sbrk+0x5c>)
 80a0afa:	4b15      	ldr	r3, [pc, #84]	@ (80a0b50 <_sbrk+0x60>)
 80a0afc:	1ad3      	subs	r3, r2, r3
 80a0afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80a0b00:	697b      	ldr	r3, [r7, #20]
 80a0b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80a0b04:	4b13      	ldr	r3, [pc, #76]	@ (80a0b54 <_sbrk+0x64>)
 80a0b06:	681b      	ldr	r3, [r3, #0]
 80a0b08:	2b00      	cmp	r3, #0
 80a0b0a:	d102      	bne.n	80a0b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80a0b0c:	4b11      	ldr	r3, [pc, #68]	@ (80a0b54 <_sbrk+0x64>)
 80a0b0e:	4a12      	ldr	r2, [pc, #72]	@ (80a0b58 <_sbrk+0x68>)
 80a0b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80a0b12:	4b10      	ldr	r3, [pc, #64]	@ (80a0b54 <_sbrk+0x64>)
 80a0b14:	681a      	ldr	r2, [r3, #0]
 80a0b16:	687b      	ldr	r3, [r7, #4]
 80a0b18:	4413      	add	r3, r2
 80a0b1a:	693a      	ldr	r2, [r7, #16]
 80a0b1c:	429a      	cmp	r2, r3
 80a0b1e:	d207      	bcs.n	80a0b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80a0b20:	f008 fd6a 	bl	80a95f8 <__errno>
 80a0b24:	4603      	mov	r3, r0
 80a0b26:	220c      	movs	r2, #12
 80a0b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80a0b2a:	f04f 33ff 	mov.w	r3, #4294967295
 80a0b2e:	e009      	b.n	80a0b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80a0b30:	4b08      	ldr	r3, [pc, #32]	@ (80a0b54 <_sbrk+0x64>)
 80a0b32:	681b      	ldr	r3, [r3, #0]
 80a0b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80a0b36:	4b07      	ldr	r3, [pc, #28]	@ (80a0b54 <_sbrk+0x64>)
 80a0b38:	681a      	ldr	r2, [r3, #0]
 80a0b3a:	687b      	ldr	r3, [r7, #4]
 80a0b3c:	4413      	add	r3, r2
 80a0b3e:	4a05      	ldr	r2, [pc, #20]	@ (80a0b54 <_sbrk+0x64>)
 80a0b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80a0b42:	68fb      	ldr	r3, [r7, #12]
}
 80a0b44:	4618      	mov	r0, r3
 80a0b46:	3718      	adds	r7, #24
 80a0b48:	46bd      	mov	sp, r7
 80a0b4a:	bd80      	pop	{r7, pc}
 80a0b4c:	2407fffc 	.word	0x2407fffc
 80a0b50:	00000400 	.word	0x00000400
 80a0b54:	24000190 	.word	0x24000190
 80a0b58:	24001ec8 	.word	0x24001ec8

080a0b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80a0b5c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80a0b98 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80a0b60:	f7ff fcc0 	bl	80a04e4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80a0b64:	f7ff fc0c 	bl	80a0380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80a0b68:	480c      	ldr	r0, [pc, #48]	@ (80a0b9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80a0b6a:	490d      	ldr	r1, [pc, #52]	@ (80a0ba0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80a0b6c:	4a0d      	ldr	r2, [pc, #52]	@ (80a0ba4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80a0b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80a0b70:	e002      	b.n	80a0b78 <LoopCopyDataInit>

080a0b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80a0b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80a0b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80a0b76:	3304      	adds	r3, #4

080a0b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80a0b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80a0b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80a0b7c:	d3f9      	bcc.n	80a0b72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80a0b7e:	4a0a      	ldr	r2, [pc, #40]	@ (80a0ba8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80a0b80:	4c0a      	ldr	r4, [pc, #40]	@ (80a0bac <LoopFillZerobss+0x22>)
  movs r3, #0
 80a0b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 80a0b84:	e001      	b.n	80a0b8a <LoopFillZerobss>

080a0b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80a0b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80a0b88:	3204      	adds	r2, #4

080a0b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80a0b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80a0b8c:	d3fb      	bcc.n	80a0b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80a0b8e:	f008 fd39 	bl	80a9604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80a0b92:	f7ff fcdb 	bl	80a054c <main>
  bx  lr
 80a0b96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80a0b98:	2407fffc 	.word	0x2407fffc
  ldr r0, =_sdata
 80a0b9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80a0ba0:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 80a0ba4:	080aa2a4 	.word	0x080aa2a4
  ldr r2, =_sbss
 80a0ba8:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 80a0bac:	24001ec8 	.word	0x24001ec8

080a0bb0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80a0bb0:	e7fe      	b.n	80a0bb0 <ADC3_IRQHandler>
	...

080a0bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80a0bb4:	b580      	push	{r7, lr}
 80a0bb6:	b082      	sub	sp, #8
 80a0bb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80a0bba:	2003      	movs	r0, #3
 80a0bbc:	f000 f98c 	bl	80a0ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80a0bc0:	f002 fd7a 	bl	80a36b8 <HAL_RCC_GetSysClockFreq>
 80a0bc4:	4602      	mov	r2, r0
 80a0bc6:	4b15      	ldr	r3, [pc, #84]	@ (80a0c1c <HAL_Init+0x68>)
 80a0bc8:	699b      	ldr	r3, [r3, #24]
 80a0bca:	0a1b      	lsrs	r3, r3, #8
 80a0bcc:	f003 030f 	and.w	r3, r3, #15
 80a0bd0:	4913      	ldr	r1, [pc, #76]	@ (80a0c20 <HAL_Init+0x6c>)
 80a0bd2:	5ccb      	ldrb	r3, [r1, r3]
 80a0bd4:	f003 031f 	and.w	r3, r3, #31
 80a0bd8:	fa22 f303 	lsr.w	r3, r2, r3
 80a0bdc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80a0bde:	4b0f      	ldr	r3, [pc, #60]	@ (80a0c1c <HAL_Init+0x68>)
 80a0be0:	699b      	ldr	r3, [r3, #24]
 80a0be2:	f003 030f 	and.w	r3, r3, #15
 80a0be6:	4a0e      	ldr	r2, [pc, #56]	@ (80a0c20 <HAL_Init+0x6c>)
 80a0be8:	5cd3      	ldrb	r3, [r2, r3]
 80a0bea:	f003 031f 	and.w	r3, r3, #31
 80a0bee:	687a      	ldr	r2, [r7, #4]
 80a0bf0:	fa22 f303 	lsr.w	r3, r2, r3
 80a0bf4:	4a0b      	ldr	r2, [pc, #44]	@ (80a0c24 <HAL_Init+0x70>)
 80a0bf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80a0bf8:	4a0b      	ldr	r2, [pc, #44]	@ (80a0c28 <HAL_Init+0x74>)
 80a0bfa:	687b      	ldr	r3, [r7, #4]
 80a0bfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80a0bfe:	2000      	movs	r0, #0
 80a0c00:	f000 f814 	bl	80a0c2c <HAL_InitTick>
 80a0c04:	4603      	mov	r3, r0
 80a0c06:	2b00      	cmp	r3, #0
 80a0c08:	d001      	beq.n	80a0c0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80a0c0a:	2301      	movs	r3, #1
 80a0c0c:	e002      	b.n	80a0c14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80a0c0e:	f7ff fe7d 	bl	80a090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80a0c12:	2300      	movs	r3, #0
}
 80a0c14:	4618      	mov	r0, r3
 80a0c16:	3708      	adds	r7, #8
 80a0c18:	46bd      	mov	sp, r7
 80a0c1a:	bd80      	pop	{r7, pc}
 80a0c1c:	58024400 	.word	0x58024400
 80a0c20:	080aa250 	.word	0x080aa250
 80a0c24:	24000004 	.word	0x24000004
 80a0c28:	24000000 	.word	0x24000000

080a0c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80a0c2c:	b580      	push	{r7, lr}
 80a0c2e:	b082      	sub	sp, #8
 80a0c30:	af00      	add	r7, sp, #0
 80a0c32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80a0c34:	4b15      	ldr	r3, [pc, #84]	@ (80a0c8c <HAL_InitTick+0x60>)
 80a0c36:	781b      	ldrb	r3, [r3, #0]
 80a0c38:	2b00      	cmp	r3, #0
 80a0c3a:	d101      	bne.n	80a0c40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80a0c3c:	2301      	movs	r3, #1
 80a0c3e:	e021      	b.n	80a0c84 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80a0c40:	4b13      	ldr	r3, [pc, #76]	@ (80a0c90 <HAL_InitTick+0x64>)
 80a0c42:	681a      	ldr	r2, [r3, #0]
 80a0c44:	4b11      	ldr	r3, [pc, #68]	@ (80a0c8c <HAL_InitTick+0x60>)
 80a0c46:	781b      	ldrb	r3, [r3, #0]
 80a0c48:	4619      	mov	r1, r3
 80a0c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80a0c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 80a0c52:	fbb2 f3f3 	udiv	r3, r2, r3
 80a0c56:	4618      	mov	r0, r3
 80a0c58:	f000 f971 	bl	80a0f3e <HAL_SYSTICK_Config>
 80a0c5c:	4603      	mov	r3, r0
 80a0c5e:	2b00      	cmp	r3, #0
 80a0c60:	d001      	beq.n	80a0c66 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80a0c62:	2301      	movs	r3, #1
 80a0c64:	e00e      	b.n	80a0c84 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80a0c66:	687b      	ldr	r3, [r7, #4]
 80a0c68:	2b0f      	cmp	r3, #15
 80a0c6a:	d80a      	bhi.n	80a0c82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80a0c6c:	2200      	movs	r2, #0
 80a0c6e:	6879      	ldr	r1, [r7, #4]
 80a0c70:	f04f 30ff 	mov.w	r0, #4294967295
 80a0c74:	f000 f93b 	bl	80a0eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80a0c78:	4a06      	ldr	r2, [pc, #24]	@ (80a0c94 <HAL_InitTick+0x68>)
 80a0c7a:	687b      	ldr	r3, [r7, #4]
 80a0c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80a0c7e:	2300      	movs	r3, #0
 80a0c80:	e000      	b.n	80a0c84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80a0c82:	2301      	movs	r3, #1
}
 80a0c84:	4618      	mov	r0, r3
 80a0c86:	3708      	adds	r7, #8
 80a0c88:	46bd      	mov	sp, r7
 80a0c8a:	bd80      	pop	{r7, pc}
 80a0c8c:	2400000c 	.word	0x2400000c
 80a0c90:	24000000 	.word	0x24000000
 80a0c94:	24000008 	.word	0x24000008

080a0c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80a0c98:	b480      	push	{r7}
 80a0c9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80a0c9c:	4b06      	ldr	r3, [pc, #24]	@ (80a0cb8 <HAL_IncTick+0x20>)
 80a0c9e:	781b      	ldrb	r3, [r3, #0]
 80a0ca0:	461a      	mov	r2, r3
 80a0ca2:	4b06      	ldr	r3, [pc, #24]	@ (80a0cbc <HAL_IncTick+0x24>)
 80a0ca4:	681b      	ldr	r3, [r3, #0]
 80a0ca6:	4413      	add	r3, r2
 80a0ca8:	4a04      	ldr	r2, [pc, #16]	@ (80a0cbc <HAL_IncTick+0x24>)
 80a0caa:	6013      	str	r3, [r2, #0]
}
 80a0cac:	bf00      	nop
 80a0cae:	46bd      	mov	sp, r7
 80a0cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0cb4:	4770      	bx	lr
 80a0cb6:	bf00      	nop
 80a0cb8:	2400000c 	.word	0x2400000c
 80a0cbc:	24000194 	.word	0x24000194

080a0cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80a0cc0:	b480      	push	{r7}
 80a0cc2:	af00      	add	r7, sp, #0
  return uwTick;
 80a0cc4:	4b03      	ldr	r3, [pc, #12]	@ (80a0cd4 <HAL_GetTick+0x14>)
 80a0cc6:	681b      	ldr	r3, [r3, #0]
}
 80a0cc8:	4618      	mov	r0, r3
 80a0cca:	46bd      	mov	sp, r7
 80a0ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0cd0:	4770      	bx	lr
 80a0cd2:	bf00      	nop
 80a0cd4:	24000194 	.word	0x24000194

080a0cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80a0cd8:	b580      	push	{r7, lr}
 80a0cda:	b084      	sub	sp, #16
 80a0cdc:	af00      	add	r7, sp, #0
 80a0cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80a0ce0:	f7ff ffee 	bl	80a0cc0 <HAL_GetTick>
 80a0ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80a0ce6:	687b      	ldr	r3, [r7, #4]
 80a0ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80a0cea:	68fb      	ldr	r3, [r7, #12]
 80a0cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80a0cf0:	d005      	beq.n	80a0cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80a0cf2:	4b0a      	ldr	r3, [pc, #40]	@ (80a0d1c <HAL_Delay+0x44>)
 80a0cf4:	781b      	ldrb	r3, [r3, #0]
 80a0cf6:	461a      	mov	r2, r3
 80a0cf8:	68fb      	ldr	r3, [r7, #12]
 80a0cfa:	4413      	add	r3, r2
 80a0cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80a0cfe:	bf00      	nop
 80a0d00:	f7ff ffde 	bl	80a0cc0 <HAL_GetTick>
 80a0d04:	4602      	mov	r2, r0
 80a0d06:	68bb      	ldr	r3, [r7, #8]
 80a0d08:	1ad3      	subs	r3, r2, r3
 80a0d0a:	68fa      	ldr	r2, [r7, #12]
 80a0d0c:	429a      	cmp	r2, r3
 80a0d0e:	d8f7      	bhi.n	80a0d00 <HAL_Delay+0x28>
  {
  }
}
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	3710      	adds	r7, #16
 80a0d16:	46bd      	mov	sp, r7
 80a0d18:	bd80      	pop	{r7, pc}
 80a0d1a:	bf00      	nop
 80a0d1c:	2400000c 	.word	0x2400000c

080a0d20 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80a0d20:	b480      	push	{r7}
 80a0d22:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80a0d24:	4b03      	ldr	r3, [pc, #12]	@ (80a0d34 <HAL_GetREVID+0x14>)
 80a0d26:	681b      	ldr	r3, [r3, #0]
 80a0d28:	0c1b      	lsrs	r3, r3, #16
}
 80a0d2a:	4618      	mov	r0, r3
 80a0d2c:	46bd      	mov	sp, r7
 80a0d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0d32:	4770      	bx	lr
 80a0d34:	5c001000 	.word	0x5c001000

080a0d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80a0d38:	b480      	push	{r7}
 80a0d3a:	b085      	sub	sp, #20
 80a0d3c:	af00      	add	r7, sp, #0
 80a0d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80a0d40:	687b      	ldr	r3, [r7, #4]
 80a0d42:	f003 0307 	and.w	r3, r3, #7
 80a0d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80a0d48:	4b0b      	ldr	r3, [pc, #44]	@ (80a0d78 <__NVIC_SetPriorityGrouping+0x40>)
 80a0d4a:	68db      	ldr	r3, [r3, #12]
 80a0d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80a0d4e:	68ba      	ldr	r2, [r7, #8]
 80a0d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80a0d54:	4013      	ands	r3, r2
 80a0d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80a0d58:	68fb      	ldr	r3, [r7, #12]
 80a0d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80a0d5c:	68bb      	ldr	r3, [r7, #8]
 80a0d5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80a0d60:	4b06      	ldr	r3, [pc, #24]	@ (80a0d7c <__NVIC_SetPriorityGrouping+0x44>)
 80a0d62:	4313      	orrs	r3, r2
 80a0d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80a0d66:	4a04      	ldr	r2, [pc, #16]	@ (80a0d78 <__NVIC_SetPriorityGrouping+0x40>)
 80a0d68:	68bb      	ldr	r3, [r7, #8]
 80a0d6a:	60d3      	str	r3, [r2, #12]
}
 80a0d6c:	bf00      	nop
 80a0d6e:	3714      	adds	r7, #20
 80a0d70:	46bd      	mov	sp, r7
 80a0d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0d76:	4770      	bx	lr
 80a0d78:	e000ed00 	.word	0xe000ed00
 80a0d7c:	05fa0000 	.word	0x05fa0000

080a0d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80a0d80:	b480      	push	{r7}
 80a0d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80a0d84:	4b04      	ldr	r3, [pc, #16]	@ (80a0d98 <__NVIC_GetPriorityGrouping+0x18>)
 80a0d86:	68db      	ldr	r3, [r3, #12]
 80a0d88:	0a1b      	lsrs	r3, r3, #8
 80a0d8a:	f003 0307 	and.w	r3, r3, #7
}
 80a0d8e:	4618      	mov	r0, r3
 80a0d90:	46bd      	mov	sp, r7
 80a0d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0d96:	4770      	bx	lr
 80a0d98:	e000ed00 	.word	0xe000ed00

080a0d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80a0d9c:	b480      	push	{r7}
 80a0d9e:	b083      	sub	sp, #12
 80a0da0:	af00      	add	r7, sp, #0
 80a0da2:	4603      	mov	r3, r0
 80a0da4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80a0da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80a0daa:	2b00      	cmp	r3, #0
 80a0dac:	db0b      	blt.n	80a0dc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80a0dae:	88fb      	ldrh	r3, [r7, #6]
 80a0db0:	f003 021f 	and.w	r2, r3, #31
 80a0db4:	4907      	ldr	r1, [pc, #28]	@ (80a0dd4 <__NVIC_EnableIRQ+0x38>)
 80a0db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80a0dba:	095b      	lsrs	r3, r3, #5
 80a0dbc:	2001      	movs	r0, #1
 80a0dbe:	fa00 f202 	lsl.w	r2, r0, r2
 80a0dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80a0dc6:	bf00      	nop
 80a0dc8:	370c      	adds	r7, #12
 80a0dca:	46bd      	mov	sp, r7
 80a0dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0dd0:	4770      	bx	lr
 80a0dd2:	bf00      	nop
 80a0dd4:	e000e100 	.word	0xe000e100

080a0dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80a0dd8:	b480      	push	{r7}
 80a0dda:	b083      	sub	sp, #12
 80a0ddc:	af00      	add	r7, sp, #0
 80a0dde:	4603      	mov	r3, r0
 80a0de0:	6039      	str	r1, [r7, #0]
 80a0de2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80a0de4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80a0de8:	2b00      	cmp	r3, #0
 80a0dea:	db0a      	blt.n	80a0e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80a0dec:	683b      	ldr	r3, [r7, #0]
 80a0dee:	b2da      	uxtb	r2, r3
 80a0df0:	490c      	ldr	r1, [pc, #48]	@ (80a0e24 <__NVIC_SetPriority+0x4c>)
 80a0df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80a0df6:	0112      	lsls	r2, r2, #4
 80a0df8:	b2d2      	uxtb	r2, r2
 80a0dfa:	440b      	add	r3, r1
 80a0dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80a0e00:	e00a      	b.n	80a0e18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80a0e02:	683b      	ldr	r3, [r7, #0]
 80a0e04:	b2da      	uxtb	r2, r3
 80a0e06:	4908      	ldr	r1, [pc, #32]	@ (80a0e28 <__NVIC_SetPriority+0x50>)
 80a0e08:	88fb      	ldrh	r3, [r7, #6]
 80a0e0a:	f003 030f 	and.w	r3, r3, #15
 80a0e0e:	3b04      	subs	r3, #4
 80a0e10:	0112      	lsls	r2, r2, #4
 80a0e12:	b2d2      	uxtb	r2, r2
 80a0e14:	440b      	add	r3, r1
 80a0e16:	761a      	strb	r2, [r3, #24]
}
 80a0e18:	bf00      	nop
 80a0e1a:	370c      	adds	r7, #12
 80a0e1c:	46bd      	mov	sp, r7
 80a0e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0e22:	4770      	bx	lr
 80a0e24:	e000e100 	.word	0xe000e100
 80a0e28:	e000ed00 	.word	0xe000ed00

080a0e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80a0e2c:	b480      	push	{r7}
 80a0e2e:	b089      	sub	sp, #36	@ 0x24
 80a0e30:	af00      	add	r7, sp, #0
 80a0e32:	60f8      	str	r0, [r7, #12]
 80a0e34:	60b9      	str	r1, [r7, #8]
 80a0e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80a0e38:	68fb      	ldr	r3, [r7, #12]
 80a0e3a:	f003 0307 	and.w	r3, r3, #7
 80a0e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80a0e40:	69fb      	ldr	r3, [r7, #28]
 80a0e42:	f1c3 0307 	rsb	r3, r3, #7
 80a0e46:	2b04      	cmp	r3, #4
 80a0e48:	bf28      	it	cs
 80a0e4a:	2304      	movcs	r3, #4
 80a0e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80a0e4e:	69fb      	ldr	r3, [r7, #28]
 80a0e50:	3304      	adds	r3, #4
 80a0e52:	2b06      	cmp	r3, #6
 80a0e54:	d902      	bls.n	80a0e5c <NVIC_EncodePriority+0x30>
 80a0e56:	69fb      	ldr	r3, [r7, #28]
 80a0e58:	3b03      	subs	r3, #3
 80a0e5a:	e000      	b.n	80a0e5e <NVIC_EncodePriority+0x32>
 80a0e5c:	2300      	movs	r3, #0
 80a0e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80a0e60:	f04f 32ff 	mov.w	r2, #4294967295
 80a0e64:	69bb      	ldr	r3, [r7, #24]
 80a0e66:	fa02 f303 	lsl.w	r3, r2, r3
 80a0e6a:	43da      	mvns	r2, r3
 80a0e6c:	68bb      	ldr	r3, [r7, #8]
 80a0e6e:	401a      	ands	r2, r3
 80a0e70:	697b      	ldr	r3, [r7, #20]
 80a0e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80a0e74:	f04f 31ff 	mov.w	r1, #4294967295
 80a0e78:	697b      	ldr	r3, [r7, #20]
 80a0e7a:	fa01 f303 	lsl.w	r3, r1, r3
 80a0e7e:	43d9      	mvns	r1, r3
 80a0e80:	687b      	ldr	r3, [r7, #4]
 80a0e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80a0e84:	4313      	orrs	r3, r2
         );
}
 80a0e86:	4618      	mov	r0, r3
 80a0e88:	3724      	adds	r7, #36	@ 0x24
 80a0e8a:	46bd      	mov	sp, r7
 80a0e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0e90:	4770      	bx	lr
	...

080a0e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80a0e94:	b580      	push	{r7, lr}
 80a0e96:	b082      	sub	sp, #8
 80a0e98:	af00      	add	r7, sp, #0
 80a0e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80a0e9c:	687b      	ldr	r3, [r7, #4]
 80a0e9e:	3b01      	subs	r3, #1
 80a0ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80a0ea4:	d301      	bcc.n	80a0eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80a0ea6:	2301      	movs	r3, #1
 80a0ea8:	e00f      	b.n	80a0eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80a0eaa:	4a0a      	ldr	r2, [pc, #40]	@ (80a0ed4 <SysTick_Config+0x40>)
 80a0eac:	687b      	ldr	r3, [r7, #4]
 80a0eae:	3b01      	subs	r3, #1
 80a0eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80a0eb2:	210f      	movs	r1, #15
 80a0eb4:	f04f 30ff 	mov.w	r0, #4294967295
 80a0eb8:	f7ff ff8e 	bl	80a0dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80a0ebc:	4b05      	ldr	r3, [pc, #20]	@ (80a0ed4 <SysTick_Config+0x40>)
 80a0ebe:	2200      	movs	r2, #0
 80a0ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80a0ec2:	4b04      	ldr	r3, [pc, #16]	@ (80a0ed4 <SysTick_Config+0x40>)
 80a0ec4:	2207      	movs	r2, #7
 80a0ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80a0ec8:	2300      	movs	r3, #0
}
 80a0eca:	4618      	mov	r0, r3
 80a0ecc:	3708      	adds	r7, #8
 80a0ece:	46bd      	mov	sp, r7
 80a0ed0:	bd80      	pop	{r7, pc}
 80a0ed2:	bf00      	nop
 80a0ed4:	e000e010 	.word	0xe000e010

080a0ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80a0ed8:	b580      	push	{r7, lr}
 80a0eda:	b082      	sub	sp, #8
 80a0edc:	af00      	add	r7, sp, #0
 80a0ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80a0ee0:	6878      	ldr	r0, [r7, #4]
 80a0ee2:	f7ff ff29 	bl	80a0d38 <__NVIC_SetPriorityGrouping>
}
 80a0ee6:	bf00      	nop
 80a0ee8:	3708      	adds	r7, #8
 80a0eea:	46bd      	mov	sp, r7
 80a0eec:	bd80      	pop	{r7, pc}

080a0eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80a0eee:	b580      	push	{r7, lr}
 80a0ef0:	b086      	sub	sp, #24
 80a0ef2:	af00      	add	r7, sp, #0
 80a0ef4:	4603      	mov	r3, r0
 80a0ef6:	60b9      	str	r1, [r7, #8]
 80a0ef8:	607a      	str	r2, [r7, #4]
 80a0efa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80a0efc:	f7ff ff40 	bl	80a0d80 <__NVIC_GetPriorityGrouping>
 80a0f00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80a0f02:	687a      	ldr	r2, [r7, #4]
 80a0f04:	68b9      	ldr	r1, [r7, #8]
 80a0f06:	6978      	ldr	r0, [r7, #20]
 80a0f08:	f7ff ff90 	bl	80a0e2c <NVIC_EncodePriority>
 80a0f0c:	4602      	mov	r2, r0
 80a0f0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80a0f12:	4611      	mov	r1, r2
 80a0f14:	4618      	mov	r0, r3
 80a0f16:	f7ff ff5f 	bl	80a0dd8 <__NVIC_SetPriority>
}
 80a0f1a:	bf00      	nop
 80a0f1c:	3718      	adds	r7, #24
 80a0f1e:	46bd      	mov	sp, r7
 80a0f20:	bd80      	pop	{r7, pc}

080a0f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80a0f22:	b580      	push	{r7, lr}
 80a0f24:	b082      	sub	sp, #8
 80a0f26:	af00      	add	r7, sp, #0
 80a0f28:	4603      	mov	r3, r0
 80a0f2a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80a0f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80a0f30:	4618      	mov	r0, r3
 80a0f32:	f7ff ff33 	bl	80a0d9c <__NVIC_EnableIRQ>
}
 80a0f36:	bf00      	nop
 80a0f38:	3708      	adds	r7, #8
 80a0f3a:	46bd      	mov	sp, r7
 80a0f3c:	bd80      	pop	{r7, pc}

080a0f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80a0f3e:	b580      	push	{r7, lr}
 80a0f40:	b082      	sub	sp, #8
 80a0f42:	af00      	add	r7, sp, #0
 80a0f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80a0f46:	6878      	ldr	r0, [r7, #4]
 80a0f48:	f7ff ffa4 	bl	80a0e94 <SysTick_Config>
 80a0f4c:	4603      	mov	r3, r0
}
 80a0f4e:	4618      	mov	r0, r3
 80a0f50:	3708      	adds	r7, #8
 80a0f52:	46bd      	mov	sp, r7
 80a0f54:	bd80      	pop	{r7, pc}
	...

080a0f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80a0f58:	b480      	push	{r7}
 80a0f5a:	b089      	sub	sp, #36	@ 0x24
 80a0f5c:	af00      	add	r7, sp, #0
 80a0f5e:	6078      	str	r0, [r7, #4]
 80a0f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80a0f62:	2300      	movs	r3, #0
 80a0f64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80a0f66:	4b89      	ldr	r3, [pc, #548]	@ (80a118c <HAL_GPIO_Init+0x234>)
 80a0f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80a0f6a:	e194      	b.n	80a1296 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80a0f6c:	683b      	ldr	r3, [r7, #0]
 80a0f6e:	681a      	ldr	r2, [r3, #0]
 80a0f70:	2101      	movs	r1, #1
 80a0f72:	69fb      	ldr	r3, [r7, #28]
 80a0f74:	fa01 f303 	lsl.w	r3, r1, r3
 80a0f78:	4013      	ands	r3, r2
 80a0f7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80a0f7c:	693b      	ldr	r3, [r7, #16]
 80a0f7e:	2b00      	cmp	r3, #0
 80a0f80:	f000 8186 	beq.w	80a1290 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80a0f84:	683b      	ldr	r3, [r7, #0]
 80a0f86:	685b      	ldr	r3, [r3, #4]
 80a0f88:	f003 0303 	and.w	r3, r3, #3
 80a0f8c:	2b01      	cmp	r3, #1
 80a0f8e:	d005      	beq.n	80a0f9c <HAL_GPIO_Init+0x44>
 80a0f90:	683b      	ldr	r3, [r7, #0]
 80a0f92:	685b      	ldr	r3, [r3, #4]
 80a0f94:	f003 0303 	and.w	r3, r3, #3
 80a0f98:	2b02      	cmp	r3, #2
 80a0f9a:	d130      	bne.n	80a0ffe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80a0f9c:	687b      	ldr	r3, [r7, #4]
 80a0f9e:	689b      	ldr	r3, [r3, #8]
 80a0fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80a0fa2:	69fb      	ldr	r3, [r7, #28]
 80a0fa4:	005b      	lsls	r3, r3, #1
 80a0fa6:	2203      	movs	r2, #3
 80a0fa8:	fa02 f303 	lsl.w	r3, r2, r3
 80a0fac:	43db      	mvns	r3, r3
 80a0fae:	69ba      	ldr	r2, [r7, #24]
 80a0fb0:	4013      	ands	r3, r2
 80a0fb2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80a0fb4:	683b      	ldr	r3, [r7, #0]
 80a0fb6:	68da      	ldr	r2, [r3, #12]
 80a0fb8:	69fb      	ldr	r3, [r7, #28]
 80a0fba:	005b      	lsls	r3, r3, #1
 80a0fbc:	fa02 f303 	lsl.w	r3, r2, r3
 80a0fc0:	69ba      	ldr	r2, [r7, #24]
 80a0fc2:	4313      	orrs	r3, r2
 80a0fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80a0fc6:	687b      	ldr	r3, [r7, #4]
 80a0fc8:	69ba      	ldr	r2, [r7, #24]
 80a0fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80a0fcc:	687b      	ldr	r3, [r7, #4]
 80a0fce:	685b      	ldr	r3, [r3, #4]
 80a0fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80a0fd2:	2201      	movs	r2, #1
 80a0fd4:	69fb      	ldr	r3, [r7, #28]
 80a0fd6:	fa02 f303 	lsl.w	r3, r2, r3
 80a0fda:	43db      	mvns	r3, r3
 80a0fdc:	69ba      	ldr	r2, [r7, #24]
 80a0fde:	4013      	ands	r3, r2
 80a0fe0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80a0fe2:	683b      	ldr	r3, [r7, #0]
 80a0fe4:	685b      	ldr	r3, [r3, #4]
 80a0fe6:	091b      	lsrs	r3, r3, #4
 80a0fe8:	f003 0201 	and.w	r2, r3, #1
 80a0fec:	69fb      	ldr	r3, [r7, #28]
 80a0fee:	fa02 f303 	lsl.w	r3, r2, r3
 80a0ff2:	69ba      	ldr	r2, [r7, #24]
 80a0ff4:	4313      	orrs	r3, r2
 80a0ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80a0ff8:	687b      	ldr	r3, [r7, #4]
 80a0ffa:	69ba      	ldr	r2, [r7, #24]
 80a0ffc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80a0ffe:	683b      	ldr	r3, [r7, #0]
 80a1000:	685b      	ldr	r3, [r3, #4]
 80a1002:	f003 0303 	and.w	r3, r3, #3
 80a1006:	2b03      	cmp	r3, #3
 80a1008:	d017      	beq.n	80a103a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80a100a:	687b      	ldr	r3, [r7, #4]
 80a100c:	68db      	ldr	r3, [r3, #12]
 80a100e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80a1010:	69fb      	ldr	r3, [r7, #28]
 80a1012:	005b      	lsls	r3, r3, #1
 80a1014:	2203      	movs	r2, #3
 80a1016:	fa02 f303 	lsl.w	r3, r2, r3
 80a101a:	43db      	mvns	r3, r3
 80a101c:	69ba      	ldr	r2, [r7, #24]
 80a101e:	4013      	ands	r3, r2
 80a1020:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80a1022:	683b      	ldr	r3, [r7, #0]
 80a1024:	689a      	ldr	r2, [r3, #8]
 80a1026:	69fb      	ldr	r3, [r7, #28]
 80a1028:	005b      	lsls	r3, r3, #1
 80a102a:	fa02 f303 	lsl.w	r3, r2, r3
 80a102e:	69ba      	ldr	r2, [r7, #24]
 80a1030:	4313      	orrs	r3, r2
 80a1032:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80a1034:	687b      	ldr	r3, [r7, #4]
 80a1036:	69ba      	ldr	r2, [r7, #24]
 80a1038:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80a103a:	683b      	ldr	r3, [r7, #0]
 80a103c:	685b      	ldr	r3, [r3, #4]
 80a103e:	f003 0303 	and.w	r3, r3, #3
 80a1042:	2b02      	cmp	r3, #2
 80a1044:	d123      	bne.n	80a108e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80a1046:	69fb      	ldr	r3, [r7, #28]
 80a1048:	08da      	lsrs	r2, r3, #3
 80a104a:	687b      	ldr	r3, [r7, #4]
 80a104c:	3208      	adds	r2, #8
 80a104e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a1052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80a1054:	69fb      	ldr	r3, [r7, #28]
 80a1056:	f003 0307 	and.w	r3, r3, #7
 80a105a:	009b      	lsls	r3, r3, #2
 80a105c:	220f      	movs	r2, #15
 80a105e:	fa02 f303 	lsl.w	r3, r2, r3
 80a1062:	43db      	mvns	r3, r3
 80a1064:	69ba      	ldr	r2, [r7, #24]
 80a1066:	4013      	ands	r3, r2
 80a1068:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80a106a:	683b      	ldr	r3, [r7, #0]
 80a106c:	691a      	ldr	r2, [r3, #16]
 80a106e:	69fb      	ldr	r3, [r7, #28]
 80a1070:	f003 0307 	and.w	r3, r3, #7
 80a1074:	009b      	lsls	r3, r3, #2
 80a1076:	fa02 f303 	lsl.w	r3, r2, r3
 80a107a:	69ba      	ldr	r2, [r7, #24]
 80a107c:	4313      	orrs	r3, r2
 80a107e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80a1080:	69fb      	ldr	r3, [r7, #28]
 80a1082:	08da      	lsrs	r2, r3, #3
 80a1084:	687b      	ldr	r3, [r7, #4]
 80a1086:	3208      	adds	r2, #8
 80a1088:	69b9      	ldr	r1, [r7, #24]
 80a108a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80a108e:	687b      	ldr	r3, [r7, #4]
 80a1090:	681b      	ldr	r3, [r3, #0]
 80a1092:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80a1094:	69fb      	ldr	r3, [r7, #28]
 80a1096:	005b      	lsls	r3, r3, #1
 80a1098:	2203      	movs	r2, #3
 80a109a:	fa02 f303 	lsl.w	r3, r2, r3
 80a109e:	43db      	mvns	r3, r3
 80a10a0:	69ba      	ldr	r2, [r7, #24]
 80a10a2:	4013      	ands	r3, r2
 80a10a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80a10a6:	683b      	ldr	r3, [r7, #0]
 80a10a8:	685b      	ldr	r3, [r3, #4]
 80a10aa:	f003 0203 	and.w	r2, r3, #3
 80a10ae:	69fb      	ldr	r3, [r7, #28]
 80a10b0:	005b      	lsls	r3, r3, #1
 80a10b2:	fa02 f303 	lsl.w	r3, r2, r3
 80a10b6:	69ba      	ldr	r2, [r7, #24]
 80a10b8:	4313      	orrs	r3, r2
 80a10ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80a10bc:	687b      	ldr	r3, [r7, #4]
 80a10be:	69ba      	ldr	r2, [r7, #24]
 80a10c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80a10c2:	683b      	ldr	r3, [r7, #0]
 80a10c4:	685b      	ldr	r3, [r3, #4]
 80a10c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80a10ca:	2b00      	cmp	r3, #0
 80a10cc:	f000 80e0 	beq.w	80a1290 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80a10d0:	4b2f      	ldr	r3, [pc, #188]	@ (80a1190 <HAL_GPIO_Init+0x238>)
 80a10d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80a10d6:	4a2e      	ldr	r2, [pc, #184]	@ (80a1190 <HAL_GPIO_Init+0x238>)
 80a10d8:	f043 0302 	orr.w	r3, r3, #2
 80a10dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80a10e0:	4b2b      	ldr	r3, [pc, #172]	@ (80a1190 <HAL_GPIO_Init+0x238>)
 80a10e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80a10e6:	f003 0302 	and.w	r3, r3, #2
 80a10ea:	60fb      	str	r3, [r7, #12]
 80a10ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80a10ee:	4a29      	ldr	r2, [pc, #164]	@ (80a1194 <HAL_GPIO_Init+0x23c>)
 80a10f0:	69fb      	ldr	r3, [r7, #28]
 80a10f2:	089b      	lsrs	r3, r3, #2
 80a10f4:	3302      	adds	r3, #2
 80a10f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a10fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80a10fc:	69fb      	ldr	r3, [r7, #28]
 80a10fe:	f003 0303 	and.w	r3, r3, #3
 80a1102:	009b      	lsls	r3, r3, #2
 80a1104:	220f      	movs	r2, #15
 80a1106:	fa02 f303 	lsl.w	r3, r2, r3
 80a110a:	43db      	mvns	r3, r3
 80a110c:	69ba      	ldr	r2, [r7, #24]
 80a110e:	4013      	ands	r3, r2
 80a1110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80a1112:	687b      	ldr	r3, [r7, #4]
 80a1114:	4a20      	ldr	r2, [pc, #128]	@ (80a1198 <HAL_GPIO_Init+0x240>)
 80a1116:	4293      	cmp	r3, r2
 80a1118:	d052      	beq.n	80a11c0 <HAL_GPIO_Init+0x268>
 80a111a:	687b      	ldr	r3, [r7, #4]
 80a111c:	4a1f      	ldr	r2, [pc, #124]	@ (80a119c <HAL_GPIO_Init+0x244>)
 80a111e:	4293      	cmp	r3, r2
 80a1120:	d031      	beq.n	80a1186 <HAL_GPIO_Init+0x22e>
 80a1122:	687b      	ldr	r3, [r7, #4]
 80a1124:	4a1e      	ldr	r2, [pc, #120]	@ (80a11a0 <HAL_GPIO_Init+0x248>)
 80a1126:	4293      	cmp	r3, r2
 80a1128:	d02b      	beq.n	80a1182 <HAL_GPIO_Init+0x22a>
 80a112a:	687b      	ldr	r3, [r7, #4]
 80a112c:	4a1d      	ldr	r2, [pc, #116]	@ (80a11a4 <HAL_GPIO_Init+0x24c>)
 80a112e:	4293      	cmp	r3, r2
 80a1130:	d025      	beq.n	80a117e <HAL_GPIO_Init+0x226>
 80a1132:	687b      	ldr	r3, [r7, #4]
 80a1134:	4a1c      	ldr	r2, [pc, #112]	@ (80a11a8 <HAL_GPIO_Init+0x250>)
 80a1136:	4293      	cmp	r3, r2
 80a1138:	d01f      	beq.n	80a117a <HAL_GPIO_Init+0x222>
 80a113a:	687b      	ldr	r3, [r7, #4]
 80a113c:	4a1b      	ldr	r2, [pc, #108]	@ (80a11ac <HAL_GPIO_Init+0x254>)
 80a113e:	4293      	cmp	r3, r2
 80a1140:	d019      	beq.n	80a1176 <HAL_GPIO_Init+0x21e>
 80a1142:	687b      	ldr	r3, [r7, #4]
 80a1144:	4a1a      	ldr	r2, [pc, #104]	@ (80a11b0 <HAL_GPIO_Init+0x258>)
 80a1146:	4293      	cmp	r3, r2
 80a1148:	d013      	beq.n	80a1172 <HAL_GPIO_Init+0x21a>
 80a114a:	687b      	ldr	r3, [r7, #4]
 80a114c:	4a19      	ldr	r2, [pc, #100]	@ (80a11b4 <HAL_GPIO_Init+0x25c>)
 80a114e:	4293      	cmp	r3, r2
 80a1150:	d00d      	beq.n	80a116e <HAL_GPIO_Init+0x216>
 80a1152:	687b      	ldr	r3, [r7, #4]
 80a1154:	4a18      	ldr	r2, [pc, #96]	@ (80a11b8 <HAL_GPIO_Init+0x260>)
 80a1156:	4293      	cmp	r3, r2
 80a1158:	d007      	beq.n	80a116a <HAL_GPIO_Init+0x212>
 80a115a:	687b      	ldr	r3, [r7, #4]
 80a115c:	4a17      	ldr	r2, [pc, #92]	@ (80a11bc <HAL_GPIO_Init+0x264>)
 80a115e:	4293      	cmp	r3, r2
 80a1160:	d101      	bne.n	80a1166 <HAL_GPIO_Init+0x20e>
 80a1162:	2309      	movs	r3, #9
 80a1164:	e02d      	b.n	80a11c2 <HAL_GPIO_Init+0x26a>
 80a1166:	230a      	movs	r3, #10
 80a1168:	e02b      	b.n	80a11c2 <HAL_GPIO_Init+0x26a>
 80a116a:	2308      	movs	r3, #8
 80a116c:	e029      	b.n	80a11c2 <HAL_GPIO_Init+0x26a>
 80a116e:	2307      	movs	r3, #7
 80a1170:	e027      	b.n	80a11c2 <HAL_GPIO_Init+0x26a>
 80a1172:	2306      	movs	r3, #6
 80a1174:	e025      	b.n	80a11c2 <HAL_GPIO_Init+0x26a>
 80a1176:	2305      	movs	r3, #5
 80a1178:	e023      	b.n	80a11c2 <HAL_GPIO_Init+0x26a>
 80a117a:	2304      	movs	r3, #4
 80a117c:	e021      	b.n	80a11c2 <HAL_GPIO_Init+0x26a>
 80a117e:	2303      	movs	r3, #3
 80a1180:	e01f      	b.n	80a11c2 <HAL_GPIO_Init+0x26a>
 80a1182:	2302      	movs	r3, #2
 80a1184:	e01d      	b.n	80a11c2 <HAL_GPIO_Init+0x26a>
 80a1186:	2301      	movs	r3, #1
 80a1188:	e01b      	b.n	80a11c2 <HAL_GPIO_Init+0x26a>
 80a118a:	bf00      	nop
 80a118c:	58000080 	.word	0x58000080
 80a1190:	58024400 	.word	0x58024400
 80a1194:	58000400 	.word	0x58000400
 80a1198:	58020000 	.word	0x58020000
 80a119c:	58020400 	.word	0x58020400
 80a11a0:	58020800 	.word	0x58020800
 80a11a4:	58020c00 	.word	0x58020c00
 80a11a8:	58021000 	.word	0x58021000
 80a11ac:	58021400 	.word	0x58021400
 80a11b0:	58021800 	.word	0x58021800
 80a11b4:	58021c00 	.word	0x58021c00
 80a11b8:	58022000 	.word	0x58022000
 80a11bc:	58022400 	.word	0x58022400
 80a11c0:	2300      	movs	r3, #0
 80a11c2:	69fa      	ldr	r2, [r7, #28]
 80a11c4:	f002 0203 	and.w	r2, r2, #3
 80a11c8:	0092      	lsls	r2, r2, #2
 80a11ca:	4093      	lsls	r3, r2
 80a11cc:	69ba      	ldr	r2, [r7, #24]
 80a11ce:	4313      	orrs	r3, r2
 80a11d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80a11d2:	4938      	ldr	r1, [pc, #224]	@ (80a12b4 <HAL_GPIO_Init+0x35c>)
 80a11d4:	69fb      	ldr	r3, [r7, #28]
 80a11d6:	089b      	lsrs	r3, r3, #2
 80a11d8:	3302      	adds	r3, #2
 80a11da:	69ba      	ldr	r2, [r7, #24]
 80a11dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80a11e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80a11e4:	681b      	ldr	r3, [r3, #0]
 80a11e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80a11e8:	693b      	ldr	r3, [r7, #16]
 80a11ea:	43db      	mvns	r3, r3
 80a11ec:	69ba      	ldr	r2, [r7, #24]
 80a11ee:	4013      	ands	r3, r2
 80a11f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80a11f2:	683b      	ldr	r3, [r7, #0]
 80a11f4:	685b      	ldr	r3, [r3, #4]
 80a11f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80a11fa:	2b00      	cmp	r3, #0
 80a11fc:	d003      	beq.n	80a1206 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80a11fe:	69ba      	ldr	r2, [r7, #24]
 80a1200:	693b      	ldr	r3, [r7, #16]
 80a1202:	4313      	orrs	r3, r2
 80a1204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80a1206:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80a120a:	69bb      	ldr	r3, [r7, #24]
 80a120c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80a120e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80a1212:	685b      	ldr	r3, [r3, #4]
 80a1214:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80a1216:	693b      	ldr	r3, [r7, #16]
 80a1218:	43db      	mvns	r3, r3
 80a121a:	69ba      	ldr	r2, [r7, #24]
 80a121c:	4013      	ands	r3, r2
 80a121e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80a1220:	683b      	ldr	r3, [r7, #0]
 80a1222:	685b      	ldr	r3, [r3, #4]
 80a1224:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80a1228:	2b00      	cmp	r3, #0
 80a122a:	d003      	beq.n	80a1234 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80a122c:	69ba      	ldr	r2, [r7, #24]
 80a122e:	693b      	ldr	r3, [r7, #16]
 80a1230:	4313      	orrs	r3, r2
 80a1232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80a1234:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80a1238:	69bb      	ldr	r3, [r7, #24]
 80a123a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80a123c:	697b      	ldr	r3, [r7, #20]
 80a123e:	685b      	ldr	r3, [r3, #4]
 80a1240:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80a1242:	693b      	ldr	r3, [r7, #16]
 80a1244:	43db      	mvns	r3, r3
 80a1246:	69ba      	ldr	r2, [r7, #24]
 80a1248:	4013      	ands	r3, r2
 80a124a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80a124c:	683b      	ldr	r3, [r7, #0]
 80a124e:	685b      	ldr	r3, [r3, #4]
 80a1250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80a1254:	2b00      	cmp	r3, #0
 80a1256:	d003      	beq.n	80a1260 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80a1258:	69ba      	ldr	r2, [r7, #24]
 80a125a:	693b      	ldr	r3, [r7, #16]
 80a125c:	4313      	orrs	r3, r2
 80a125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80a1260:	697b      	ldr	r3, [r7, #20]
 80a1262:	69ba      	ldr	r2, [r7, #24]
 80a1264:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80a1266:	697b      	ldr	r3, [r7, #20]
 80a1268:	681b      	ldr	r3, [r3, #0]
 80a126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80a126c:	693b      	ldr	r3, [r7, #16]
 80a126e:	43db      	mvns	r3, r3
 80a1270:	69ba      	ldr	r2, [r7, #24]
 80a1272:	4013      	ands	r3, r2
 80a1274:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80a1276:	683b      	ldr	r3, [r7, #0]
 80a1278:	685b      	ldr	r3, [r3, #4]
 80a127a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80a127e:	2b00      	cmp	r3, #0
 80a1280:	d003      	beq.n	80a128a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80a1282:	69ba      	ldr	r2, [r7, #24]
 80a1284:	693b      	ldr	r3, [r7, #16]
 80a1286:	4313      	orrs	r3, r2
 80a1288:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80a128a:	697b      	ldr	r3, [r7, #20]
 80a128c:	69ba      	ldr	r2, [r7, #24]
 80a128e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80a1290:	69fb      	ldr	r3, [r7, #28]
 80a1292:	3301      	adds	r3, #1
 80a1294:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80a1296:	683b      	ldr	r3, [r7, #0]
 80a1298:	681a      	ldr	r2, [r3, #0]
 80a129a:	69fb      	ldr	r3, [r7, #28]
 80a129c:	fa22 f303 	lsr.w	r3, r2, r3
 80a12a0:	2b00      	cmp	r3, #0
 80a12a2:	f47f ae63 	bne.w	80a0f6c <HAL_GPIO_Init+0x14>
  }
}
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	3724      	adds	r7, #36	@ 0x24
 80a12ac:	46bd      	mov	sp, r7
 80a12ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a12b2:	4770      	bx	lr
 80a12b4:	58000400 	.word	0x58000400

080a12b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80a12b8:	b480      	push	{r7}
 80a12ba:	b083      	sub	sp, #12
 80a12bc:	af00      	add	r7, sp, #0
 80a12be:	6078      	str	r0, [r7, #4]
 80a12c0:	460b      	mov	r3, r1
 80a12c2:	807b      	strh	r3, [r7, #2]
 80a12c4:	4613      	mov	r3, r2
 80a12c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80a12c8:	787b      	ldrb	r3, [r7, #1]
 80a12ca:	2b00      	cmp	r3, #0
 80a12cc:	d003      	beq.n	80a12d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80a12ce:	887a      	ldrh	r2, [r7, #2]
 80a12d0:	687b      	ldr	r3, [r7, #4]
 80a12d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80a12d4:	e003      	b.n	80a12de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80a12d6:	887b      	ldrh	r3, [r7, #2]
 80a12d8:	041a      	lsls	r2, r3, #16
 80a12da:	687b      	ldr	r3, [r7, #4]
 80a12dc:	619a      	str	r2, [r3, #24]
}
 80a12de:	bf00      	nop
 80a12e0:	370c      	adds	r7, #12
 80a12e2:	46bd      	mov	sp, r7
 80a12e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a12e8:	4770      	bx	lr

080a12ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80a12ea:	b480      	push	{r7}
 80a12ec:	b085      	sub	sp, #20
 80a12ee:	af00      	add	r7, sp, #0
 80a12f0:	6078      	str	r0, [r7, #4]
 80a12f2:	460b      	mov	r3, r1
 80a12f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80a12f6:	687b      	ldr	r3, [r7, #4]
 80a12f8:	695b      	ldr	r3, [r3, #20]
 80a12fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80a12fc:	887a      	ldrh	r2, [r7, #2]
 80a12fe:	68fb      	ldr	r3, [r7, #12]
 80a1300:	4013      	ands	r3, r2
 80a1302:	041a      	lsls	r2, r3, #16
 80a1304:	68fb      	ldr	r3, [r7, #12]
 80a1306:	43d9      	mvns	r1, r3
 80a1308:	887b      	ldrh	r3, [r7, #2]
 80a130a:	400b      	ands	r3, r1
 80a130c:	431a      	orrs	r2, r3
 80a130e:	687b      	ldr	r3, [r7, #4]
 80a1310:	619a      	str	r2, [r3, #24]
}
 80a1312:	bf00      	nop
 80a1314:	3714      	adds	r7, #20
 80a1316:	46bd      	mov	sp, r7
 80a1318:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a131c:	4770      	bx	lr

080a131e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80a131e:	b580      	push	{r7, lr}
 80a1320:	b082      	sub	sp, #8
 80a1322:	af00      	add	r7, sp, #0
 80a1324:	4603      	mov	r3, r0
 80a1326:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80a1328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80a132c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80a1330:	88fb      	ldrh	r3, [r7, #6]
 80a1332:	4013      	ands	r3, r2
 80a1334:	2b00      	cmp	r3, #0
 80a1336:	d008      	beq.n	80a134a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80a1338:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80a133c:	88fb      	ldrh	r3, [r7, #6]
 80a133e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80a1342:	88fb      	ldrh	r3, [r7, #6]
 80a1344:	4618      	mov	r0, r3
 80a1346:	f7ff f8e5 	bl	80a0514 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80a134a:	bf00      	nop
 80a134c:	3708      	adds	r7, #8
 80a134e:	46bd      	mov	sp, r7
 80a1350:	bd80      	pop	{r7, pc}
	...

080a1354 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80a1354:	b480      	push	{r7}
 80a1356:	b083      	sub	sp, #12
 80a1358:	af00      	add	r7, sp, #0
 80a135a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80a135c:	4a08      	ldr	r2, [pc, #32]	@ (80a1380 <HAL_HSEM_FastTake+0x2c>)
 80a135e:	687b      	ldr	r3, [r7, #4]
 80a1360:	3320      	adds	r3, #32
 80a1362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a1366:	4a07      	ldr	r2, [pc, #28]	@ (80a1384 <HAL_HSEM_FastTake+0x30>)
 80a1368:	4293      	cmp	r3, r2
 80a136a:	d101      	bne.n	80a1370 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80a136c:	2300      	movs	r3, #0
 80a136e:	e000      	b.n	80a1372 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80a1370:	2301      	movs	r3, #1
}
 80a1372:	4618      	mov	r0, r3
 80a1374:	370c      	adds	r7, #12
 80a1376:	46bd      	mov	sp, r7
 80a1378:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a137c:	4770      	bx	lr
 80a137e:	bf00      	nop
 80a1380:	58026400 	.word	0x58026400
 80a1384:	80000300 	.word	0x80000300

080a1388 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80a1388:	b480      	push	{r7}
 80a138a:	b083      	sub	sp, #12
 80a138c:	af00      	add	r7, sp, #0
 80a138e:	6078      	str	r0, [r7, #4]
 80a1390:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80a1392:	4906      	ldr	r1, [pc, #24]	@ (80a13ac <HAL_HSEM_Release+0x24>)
 80a1394:	683b      	ldr	r3, [r7, #0]
 80a1396:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80a139a:	687b      	ldr	r3, [r7, #4]
 80a139c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80a13a0:	bf00      	nop
 80a13a2:	370c      	adds	r7, #12
 80a13a4:	46bd      	mov	sp, r7
 80a13a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a13aa:	4770      	bx	lr
 80a13ac:	58026400 	.word	0x58026400

080a13b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80a13b0:	b580      	push	{r7, lr}
 80a13b2:	b086      	sub	sp, #24
 80a13b4:	af02      	add	r7, sp, #8
 80a13b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80a13b8:	687b      	ldr	r3, [r7, #4]
 80a13ba:	2b00      	cmp	r3, #0
 80a13bc:	d101      	bne.n	80a13c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80a13be:	2301      	movs	r3, #1
 80a13c0:	e0fe      	b.n	80a15c0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80a13c2:	687b      	ldr	r3, [r7, #4]
 80a13c4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80a13c8:	b2db      	uxtb	r3, r3
 80a13ca:	2b00      	cmp	r3, #0
 80a13cc:	d106      	bne.n	80a13dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80a13ce:	687b      	ldr	r3, [r7, #4]
 80a13d0:	2200      	movs	r2, #0
 80a13d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80a13d6:	6878      	ldr	r0, [r7, #4]
 80a13d8:	f007 fbbc 	bl	80a8b54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80a13dc:	687b      	ldr	r3, [r7, #4]
 80a13de:	2203      	movs	r2, #3
 80a13e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80a13e4:	687b      	ldr	r3, [r7, #4]
 80a13e6:	681b      	ldr	r3, [r3, #0]
 80a13e8:	4618      	mov	r0, r3
 80a13ea:	f003 ffe2 	bl	80a53b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80a13ee:	687b      	ldr	r3, [r7, #4]
 80a13f0:	6818      	ldr	r0, [r3, #0]
 80a13f2:	687b      	ldr	r3, [r7, #4]
 80a13f4:	7c1a      	ldrb	r2, [r3, #16]
 80a13f6:	f88d 2000 	strb.w	r2, [sp]
 80a13fa:	3304      	adds	r3, #4
 80a13fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80a13fe:	f003 feb3 	bl	80a5168 <USB_CoreInit>
 80a1402:	4603      	mov	r3, r0
 80a1404:	2b00      	cmp	r3, #0
 80a1406:	d005      	beq.n	80a1414 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80a1408:	687b      	ldr	r3, [r7, #4]
 80a140a:	2202      	movs	r2, #2
 80a140c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80a1410:	2301      	movs	r3, #1
 80a1412:	e0d5      	b.n	80a15c0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80a1414:	687b      	ldr	r3, [r7, #4]
 80a1416:	681b      	ldr	r3, [r3, #0]
 80a1418:	2100      	movs	r1, #0
 80a141a:	4618      	mov	r0, r3
 80a141c:	f003 ffda 	bl	80a53d4 <USB_SetCurrentMode>
 80a1420:	4603      	mov	r3, r0
 80a1422:	2b00      	cmp	r3, #0
 80a1424:	d005      	beq.n	80a1432 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80a1426:	687b      	ldr	r3, [r7, #4]
 80a1428:	2202      	movs	r2, #2
 80a142a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80a142e:	2301      	movs	r3, #1
 80a1430:	e0c6      	b.n	80a15c0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80a1432:	2300      	movs	r3, #0
 80a1434:	73fb      	strb	r3, [r7, #15]
 80a1436:	e04a      	b.n	80a14ce <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80a1438:	7bfa      	ldrb	r2, [r7, #15]
 80a143a:	6879      	ldr	r1, [r7, #4]
 80a143c:	4613      	mov	r3, r2
 80a143e:	00db      	lsls	r3, r3, #3
 80a1440:	4413      	add	r3, r2
 80a1442:	009b      	lsls	r3, r3, #2
 80a1444:	440b      	add	r3, r1
 80a1446:	3315      	adds	r3, #21
 80a1448:	2201      	movs	r2, #1
 80a144a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80a144c:	7bfa      	ldrb	r2, [r7, #15]
 80a144e:	6879      	ldr	r1, [r7, #4]
 80a1450:	4613      	mov	r3, r2
 80a1452:	00db      	lsls	r3, r3, #3
 80a1454:	4413      	add	r3, r2
 80a1456:	009b      	lsls	r3, r3, #2
 80a1458:	440b      	add	r3, r1
 80a145a:	3314      	adds	r3, #20
 80a145c:	7bfa      	ldrb	r2, [r7, #15]
 80a145e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80a1460:	7bfa      	ldrb	r2, [r7, #15]
 80a1462:	7bfb      	ldrb	r3, [r7, #15]
 80a1464:	b298      	uxth	r0, r3
 80a1466:	6879      	ldr	r1, [r7, #4]
 80a1468:	4613      	mov	r3, r2
 80a146a:	00db      	lsls	r3, r3, #3
 80a146c:	4413      	add	r3, r2
 80a146e:	009b      	lsls	r3, r3, #2
 80a1470:	440b      	add	r3, r1
 80a1472:	332e      	adds	r3, #46	@ 0x2e
 80a1474:	4602      	mov	r2, r0
 80a1476:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80a1478:	7bfa      	ldrb	r2, [r7, #15]
 80a147a:	6879      	ldr	r1, [r7, #4]
 80a147c:	4613      	mov	r3, r2
 80a147e:	00db      	lsls	r3, r3, #3
 80a1480:	4413      	add	r3, r2
 80a1482:	009b      	lsls	r3, r3, #2
 80a1484:	440b      	add	r3, r1
 80a1486:	3318      	adds	r3, #24
 80a1488:	2200      	movs	r2, #0
 80a148a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80a148c:	7bfa      	ldrb	r2, [r7, #15]
 80a148e:	6879      	ldr	r1, [r7, #4]
 80a1490:	4613      	mov	r3, r2
 80a1492:	00db      	lsls	r3, r3, #3
 80a1494:	4413      	add	r3, r2
 80a1496:	009b      	lsls	r3, r3, #2
 80a1498:	440b      	add	r3, r1
 80a149a:	331c      	adds	r3, #28
 80a149c:	2200      	movs	r2, #0
 80a149e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80a14a0:	7bfa      	ldrb	r2, [r7, #15]
 80a14a2:	6879      	ldr	r1, [r7, #4]
 80a14a4:	4613      	mov	r3, r2
 80a14a6:	00db      	lsls	r3, r3, #3
 80a14a8:	4413      	add	r3, r2
 80a14aa:	009b      	lsls	r3, r3, #2
 80a14ac:	440b      	add	r3, r1
 80a14ae:	3320      	adds	r3, #32
 80a14b0:	2200      	movs	r2, #0
 80a14b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80a14b4:	7bfa      	ldrb	r2, [r7, #15]
 80a14b6:	6879      	ldr	r1, [r7, #4]
 80a14b8:	4613      	mov	r3, r2
 80a14ba:	00db      	lsls	r3, r3, #3
 80a14bc:	4413      	add	r3, r2
 80a14be:	009b      	lsls	r3, r3, #2
 80a14c0:	440b      	add	r3, r1
 80a14c2:	3324      	adds	r3, #36	@ 0x24
 80a14c4:	2200      	movs	r2, #0
 80a14c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80a14c8:	7bfb      	ldrb	r3, [r7, #15]
 80a14ca:	3301      	adds	r3, #1
 80a14cc:	73fb      	strb	r3, [r7, #15]
 80a14ce:	687b      	ldr	r3, [r7, #4]
 80a14d0:	791b      	ldrb	r3, [r3, #4]
 80a14d2:	7bfa      	ldrb	r2, [r7, #15]
 80a14d4:	429a      	cmp	r2, r3
 80a14d6:	d3af      	bcc.n	80a1438 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80a14d8:	2300      	movs	r3, #0
 80a14da:	73fb      	strb	r3, [r7, #15]
 80a14dc:	e044      	b.n	80a1568 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80a14de:	7bfa      	ldrb	r2, [r7, #15]
 80a14e0:	6879      	ldr	r1, [r7, #4]
 80a14e2:	4613      	mov	r3, r2
 80a14e4:	00db      	lsls	r3, r3, #3
 80a14e6:	4413      	add	r3, r2
 80a14e8:	009b      	lsls	r3, r3, #2
 80a14ea:	440b      	add	r3, r1
 80a14ec:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80a14f0:	2200      	movs	r2, #0
 80a14f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80a14f4:	7bfa      	ldrb	r2, [r7, #15]
 80a14f6:	6879      	ldr	r1, [r7, #4]
 80a14f8:	4613      	mov	r3, r2
 80a14fa:	00db      	lsls	r3, r3, #3
 80a14fc:	4413      	add	r3, r2
 80a14fe:	009b      	lsls	r3, r3, #2
 80a1500:	440b      	add	r3, r1
 80a1502:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80a1506:	7bfa      	ldrb	r2, [r7, #15]
 80a1508:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80a150a:	7bfa      	ldrb	r2, [r7, #15]
 80a150c:	6879      	ldr	r1, [r7, #4]
 80a150e:	4613      	mov	r3, r2
 80a1510:	00db      	lsls	r3, r3, #3
 80a1512:	4413      	add	r3, r2
 80a1514:	009b      	lsls	r3, r3, #2
 80a1516:	440b      	add	r3, r1
 80a1518:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80a151c:	2200      	movs	r2, #0
 80a151e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80a1520:	7bfa      	ldrb	r2, [r7, #15]
 80a1522:	6879      	ldr	r1, [r7, #4]
 80a1524:	4613      	mov	r3, r2
 80a1526:	00db      	lsls	r3, r3, #3
 80a1528:	4413      	add	r3, r2
 80a152a:	009b      	lsls	r3, r3, #2
 80a152c:	440b      	add	r3, r1
 80a152e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80a1532:	2200      	movs	r2, #0
 80a1534:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80a1536:	7bfa      	ldrb	r2, [r7, #15]
 80a1538:	6879      	ldr	r1, [r7, #4]
 80a153a:	4613      	mov	r3, r2
 80a153c:	00db      	lsls	r3, r3, #3
 80a153e:	4413      	add	r3, r2
 80a1540:	009b      	lsls	r3, r3, #2
 80a1542:	440b      	add	r3, r1
 80a1544:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80a1548:	2200      	movs	r2, #0
 80a154a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80a154c:	7bfa      	ldrb	r2, [r7, #15]
 80a154e:	6879      	ldr	r1, [r7, #4]
 80a1550:	4613      	mov	r3, r2
 80a1552:	00db      	lsls	r3, r3, #3
 80a1554:	4413      	add	r3, r2
 80a1556:	009b      	lsls	r3, r3, #2
 80a1558:	440b      	add	r3, r1
 80a155a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80a155e:	2200      	movs	r2, #0
 80a1560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80a1562:	7bfb      	ldrb	r3, [r7, #15]
 80a1564:	3301      	adds	r3, #1
 80a1566:	73fb      	strb	r3, [r7, #15]
 80a1568:	687b      	ldr	r3, [r7, #4]
 80a156a:	791b      	ldrb	r3, [r3, #4]
 80a156c:	7bfa      	ldrb	r2, [r7, #15]
 80a156e:	429a      	cmp	r2, r3
 80a1570:	d3b5      	bcc.n	80a14de <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80a1572:	687b      	ldr	r3, [r7, #4]
 80a1574:	6818      	ldr	r0, [r3, #0]
 80a1576:	687b      	ldr	r3, [r7, #4]
 80a1578:	7c1a      	ldrb	r2, [r3, #16]
 80a157a:	f88d 2000 	strb.w	r2, [sp]
 80a157e:	3304      	adds	r3, #4
 80a1580:	cb0e      	ldmia	r3, {r1, r2, r3}
 80a1582:	f003 ff73 	bl	80a546c <USB_DevInit>
 80a1586:	4603      	mov	r3, r0
 80a1588:	2b00      	cmp	r3, #0
 80a158a:	d005      	beq.n	80a1598 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80a158c:	687b      	ldr	r3, [r7, #4]
 80a158e:	2202      	movs	r2, #2
 80a1590:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80a1594:	2301      	movs	r3, #1
 80a1596:	e013      	b.n	80a15c0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80a1598:	687b      	ldr	r3, [r7, #4]
 80a159a:	2200      	movs	r2, #0
 80a159c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80a159e:	687b      	ldr	r3, [r7, #4]
 80a15a0:	2201      	movs	r2, #1
 80a15a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80a15a6:	687b      	ldr	r3, [r7, #4]
 80a15a8:	7b1b      	ldrb	r3, [r3, #12]
 80a15aa:	2b01      	cmp	r3, #1
 80a15ac:	d102      	bne.n	80a15b4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80a15ae:	6878      	ldr	r0, [r7, #4]
 80a15b0:	f001 f96e 	bl	80a2890 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80a15b4:	687b      	ldr	r3, [r7, #4]
 80a15b6:	681b      	ldr	r3, [r3, #0]
 80a15b8:	4618      	mov	r0, r3
 80a15ba:	f004 ffb6 	bl	80a652a <USB_DevDisconnect>

  return HAL_OK;
 80a15be:	2300      	movs	r3, #0
}
 80a15c0:	4618      	mov	r0, r3
 80a15c2:	3710      	adds	r7, #16
 80a15c4:	46bd      	mov	sp, r7
 80a15c6:	bd80      	pop	{r7, pc}

080a15c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80a15c8:	b580      	push	{r7, lr}
 80a15ca:	b084      	sub	sp, #16
 80a15cc:	af00      	add	r7, sp, #0
 80a15ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80a15d0:	687b      	ldr	r3, [r7, #4]
 80a15d2:	681b      	ldr	r3, [r3, #0]
 80a15d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80a15d6:	687b      	ldr	r3, [r7, #4]
 80a15d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80a15dc:	2b01      	cmp	r3, #1
 80a15de:	d101      	bne.n	80a15e4 <HAL_PCD_Start+0x1c>
 80a15e0:	2302      	movs	r3, #2
 80a15e2:	e022      	b.n	80a162a <HAL_PCD_Start+0x62>
 80a15e4:	687b      	ldr	r3, [r7, #4]
 80a15e6:	2201      	movs	r2, #1
 80a15e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80a15ec:	68fb      	ldr	r3, [r7, #12]
 80a15ee:	68db      	ldr	r3, [r3, #12]
 80a15f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80a15f4:	2b00      	cmp	r3, #0
 80a15f6:	d009      	beq.n	80a160c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80a15f8:	687b      	ldr	r3, [r7, #4]
 80a15fa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80a15fc:	2b01      	cmp	r3, #1
 80a15fe:	d105      	bne.n	80a160c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80a1600:	68fb      	ldr	r3, [r7, #12]
 80a1602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80a1604:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80a1608:	68fb      	ldr	r3, [r7, #12]
 80a160a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80a160c:	687b      	ldr	r3, [r7, #4]
 80a160e:	681b      	ldr	r3, [r3, #0]
 80a1610:	4618      	mov	r0, r3
 80a1612:	f003 febd 	bl	80a5390 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80a1616:	687b      	ldr	r3, [r7, #4]
 80a1618:	681b      	ldr	r3, [r3, #0]
 80a161a:	4618      	mov	r0, r3
 80a161c:	f004 ff64 	bl	80a64e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80a1620:	687b      	ldr	r3, [r7, #4]
 80a1622:	2200      	movs	r2, #0
 80a1624:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80a1628:	2300      	movs	r3, #0
}
 80a162a:	4618      	mov	r0, r3
 80a162c:	3710      	adds	r7, #16
 80a162e:	46bd      	mov	sp, r7
 80a1630:	bd80      	pop	{r7, pc}

080a1632 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80a1632:	b590      	push	{r4, r7, lr}
 80a1634:	b08d      	sub	sp, #52	@ 0x34
 80a1636:	af00      	add	r7, sp, #0
 80a1638:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80a163a:	687b      	ldr	r3, [r7, #4]
 80a163c:	681b      	ldr	r3, [r3, #0]
 80a163e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a1640:	6a3b      	ldr	r3, [r7, #32]
 80a1642:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80a1644:	687b      	ldr	r3, [r7, #4]
 80a1646:	681b      	ldr	r3, [r3, #0]
 80a1648:	4618      	mov	r0, r3
 80a164a:	f005 f822 	bl	80a6692 <USB_GetMode>
 80a164e:	4603      	mov	r3, r0
 80a1650:	2b00      	cmp	r3, #0
 80a1652:	f040 84b9 	bne.w	80a1fc8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80a1656:	687b      	ldr	r3, [r7, #4]
 80a1658:	681b      	ldr	r3, [r3, #0]
 80a165a:	4618      	mov	r0, r3
 80a165c:	f004 ff86 	bl	80a656c <USB_ReadInterrupts>
 80a1660:	4603      	mov	r3, r0
 80a1662:	2b00      	cmp	r3, #0
 80a1664:	f000 84af 	beq.w	80a1fc6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80a1668:	69fb      	ldr	r3, [r7, #28]
 80a166a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a166e:	689b      	ldr	r3, [r3, #8]
 80a1670:	0a1b      	lsrs	r3, r3, #8
 80a1672:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80a1676:	687b      	ldr	r3, [r7, #4]
 80a1678:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80a167c:	687b      	ldr	r3, [r7, #4]
 80a167e:	681b      	ldr	r3, [r3, #0]
 80a1680:	4618      	mov	r0, r3
 80a1682:	f004 ff73 	bl	80a656c <USB_ReadInterrupts>
 80a1686:	4603      	mov	r3, r0
 80a1688:	f003 0302 	and.w	r3, r3, #2
 80a168c:	2b02      	cmp	r3, #2
 80a168e:	d107      	bne.n	80a16a0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80a1690:	687b      	ldr	r3, [r7, #4]
 80a1692:	681b      	ldr	r3, [r3, #0]
 80a1694:	695a      	ldr	r2, [r3, #20]
 80a1696:	687b      	ldr	r3, [r7, #4]
 80a1698:	681b      	ldr	r3, [r3, #0]
 80a169a:	f002 0202 	and.w	r2, r2, #2
 80a169e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80a16a0:	687b      	ldr	r3, [r7, #4]
 80a16a2:	681b      	ldr	r3, [r3, #0]
 80a16a4:	4618      	mov	r0, r3
 80a16a6:	f004 ff61 	bl	80a656c <USB_ReadInterrupts>
 80a16aa:	4603      	mov	r3, r0
 80a16ac:	f003 0310 	and.w	r3, r3, #16
 80a16b0:	2b10      	cmp	r3, #16
 80a16b2:	d161      	bne.n	80a1778 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80a16b4:	687b      	ldr	r3, [r7, #4]
 80a16b6:	681b      	ldr	r3, [r3, #0]
 80a16b8:	699a      	ldr	r2, [r3, #24]
 80a16ba:	687b      	ldr	r3, [r7, #4]
 80a16bc:	681b      	ldr	r3, [r3, #0]
 80a16be:	f022 0210 	bic.w	r2, r2, #16
 80a16c2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80a16c4:	6a3b      	ldr	r3, [r7, #32]
 80a16c6:	6a1b      	ldr	r3, [r3, #32]
 80a16c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80a16ca:	69bb      	ldr	r3, [r7, #24]
 80a16cc:	f003 020f 	and.w	r2, r3, #15
 80a16d0:	4613      	mov	r3, r2
 80a16d2:	00db      	lsls	r3, r3, #3
 80a16d4:	4413      	add	r3, r2
 80a16d6:	009b      	lsls	r3, r3, #2
 80a16d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a16dc:	687a      	ldr	r2, [r7, #4]
 80a16de:	4413      	add	r3, r2
 80a16e0:	3304      	adds	r3, #4
 80a16e2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80a16e4:	69bb      	ldr	r3, [r7, #24]
 80a16e6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80a16ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80a16ee:	d124      	bne.n	80a173a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80a16f0:	69ba      	ldr	r2, [r7, #24]
 80a16f2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80a16f6:	4013      	ands	r3, r2
 80a16f8:	2b00      	cmp	r3, #0
 80a16fa:	d035      	beq.n	80a1768 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80a16fc:	697b      	ldr	r3, [r7, #20]
 80a16fe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80a1700:	69bb      	ldr	r3, [r7, #24]
 80a1702:	091b      	lsrs	r3, r3, #4
 80a1704:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80a1706:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80a170a:	b29b      	uxth	r3, r3
 80a170c:	461a      	mov	r2, r3
 80a170e:	6a38      	ldr	r0, [r7, #32]
 80a1710:	f004 fd98 	bl	80a6244 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80a1714:	697b      	ldr	r3, [r7, #20]
 80a1716:	68da      	ldr	r2, [r3, #12]
 80a1718:	69bb      	ldr	r3, [r7, #24]
 80a171a:	091b      	lsrs	r3, r3, #4
 80a171c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80a1720:	441a      	add	r2, r3
 80a1722:	697b      	ldr	r3, [r7, #20]
 80a1724:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80a1726:	697b      	ldr	r3, [r7, #20]
 80a1728:	695a      	ldr	r2, [r3, #20]
 80a172a:	69bb      	ldr	r3, [r7, #24]
 80a172c:	091b      	lsrs	r3, r3, #4
 80a172e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80a1732:	441a      	add	r2, r3
 80a1734:	697b      	ldr	r3, [r7, #20]
 80a1736:	615a      	str	r2, [r3, #20]
 80a1738:	e016      	b.n	80a1768 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80a173a:	69bb      	ldr	r3, [r7, #24]
 80a173c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80a1740:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80a1744:	d110      	bne.n	80a1768 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80a1746:	687b      	ldr	r3, [r7, #4]
 80a1748:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80a174c:	2208      	movs	r2, #8
 80a174e:	4619      	mov	r1, r3
 80a1750:	6a38      	ldr	r0, [r7, #32]
 80a1752:	f004 fd77 	bl	80a6244 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80a1756:	697b      	ldr	r3, [r7, #20]
 80a1758:	695a      	ldr	r2, [r3, #20]
 80a175a:	69bb      	ldr	r3, [r7, #24]
 80a175c:	091b      	lsrs	r3, r3, #4
 80a175e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80a1762:	441a      	add	r2, r3
 80a1764:	697b      	ldr	r3, [r7, #20]
 80a1766:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80a1768:	687b      	ldr	r3, [r7, #4]
 80a176a:	681b      	ldr	r3, [r3, #0]
 80a176c:	699a      	ldr	r2, [r3, #24]
 80a176e:	687b      	ldr	r3, [r7, #4]
 80a1770:	681b      	ldr	r3, [r3, #0]
 80a1772:	f042 0210 	orr.w	r2, r2, #16
 80a1776:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80a1778:	687b      	ldr	r3, [r7, #4]
 80a177a:	681b      	ldr	r3, [r3, #0]
 80a177c:	4618      	mov	r0, r3
 80a177e:	f004 fef5 	bl	80a656c <USB_ReadInterrupts>
 80a1782:	4603      	mov	r3, r0
 80a1784:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80a1788:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80a178c:	f040 80a7 	bne.w	80a18de <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80a1790:	2300      	movs	r3, #0
 80a1792:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80a1794:	687b      	ldr	r3, [r7, #4]
 80a1796:	681b      	ldr	r3, [r3, #0]
 80a1798:	4618      	mov	r0, r3
 80a179a:	f004 fefa 	bl	80a6592 <USB_ReadDevAllOutEpInterrupt>
 80a179e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80a17a0:	e099      	b.n	80a18d6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80a17a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80a17a4:	f003 0301 	and.w	r3, r3, #1
 80a17a8:	2b00      	cmp	r3, #0
 80a17aa:	f000 808e 	beq.w	80a18ca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80a17ae:	687b      	ldr	r3, [r7, #4]
 80a17b0:	681b      	ldr	r3, [r3, #0]
 80a17b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a17b4:	b2d2      	uxtb	r2, r2
 80a17b6:	4611      	mov	r1, r2
 80a17b8:	4618      	mov	r0, r3
 80a17ba:	f004 ff1e 	bl	80a65fa <USB_ReadDevOutEPInterrupt>
 80a17be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80a17c0:	693b      	ldr	r3, [r7, #16]
 80a17c2:	f003 0301 	and.w	r3, r3, #1
 80a17c6:	2b00      	cmp	r3, #0
 80a17c8:	d00c      	beq.n	80a17e4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80a17ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a17cc:	015a      	lsls	r2, r3, #5
 80a17ce:	69fb      	ldr	r3, [r7, #28]
 80a17d0:	4413      	add	r3, r2
 80a17d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a17d6:	461a      	mov	r2, r3
 80a17d8:	2301      	movs	r3, #1
 80a17da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80a17dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80a17de:	6878      	ldr	r0, [r7, #4]
 80a17e0:	f000 fed0 	bl	80a2584 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80a17e4:	693b      	ldr	r3, [r7, #16]
 80a17e6:	f003 0308 	and.w	r3, r3, #8
 80a17ea:	2b00      	cmp	r3, #0
 80a17ec:	d00c      	beq.n	80a1808 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80a17ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a17f0:	015a      	lsls	r2, r3, #5
 80a17f2:	69fb      	ldr	r3, [r7, #28]
 80a17f4:	4413      	add	r3, r2
 80a17f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a17fa:	461a      	mov	r2, r3
 80a17fc:	2308      	movs	r3, #8
 80a17fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80a1800:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80a1802:	6878      	ldr	r0, [r7, #4]
 80a1804:	f000 ffa6 	bl	80a2754 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80a1808:	693b      	ldr	r3, [r7, #16]
 80a180a:	f003 0310 	and.w	r3, r3, #16
 80a180e:	2b00      	cmp	r3, #0
 80a1810:	d008      	beq.n	80a1824 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80a1812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1814:	015a      	lsls	r2, r3, #5
 80a1816:	69fb      	ldr	r3, [r7, #28]
 80a1818:	4413      	add	r3, r2
 80a181a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a181e:	461a      	mov	r2, r3
 80a1820:	2310      	movs	r3, #16
 80a1822:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80a1824:	693b      	ldr	r3, [r7, #16]
 80a1826:	f003 0302 	and.w	r3, r3, #2
 80a182a:	2b00      	cmp	r3, #0
 80a182c:	d030      	beq.n	80a1890 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80a182e:	6a3b      	ldr	r3, [r7, #32]
 80a1830:	695b      	ldr	r3, [r3, #20]
 80a1832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80a1836:	2b80      	cmp	r3, #128	@ 0x80
 80a1838:	d109      	bne.n	80a184e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80a183a:	69fb      	ldr	r3, [r7, #28]
 80a183c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1840:	685b      	ldr	r3, [r3, #4]
 80a1842:	69fa      	ldr	r2, [r7, #28]
 80a1844:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1848:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80a184c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80a184e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1850:	4613      	mov	r3, r2
 80a1852:	00db      	lsls	r3, r3, #3
 80a1854:	4413      	add	r3, r2
 80a1856:	009b      	lsls	r3, r3, #2
 80a1858:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a185c:	687a      	ldr	r2, [r7, #4]
 80a185e:	4413      	add	r3, r2
 80a1860:	3304      	adds	r3, #4
 80a1862:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80a1864:	697b      	ldr	r3, [r7, #20]
 80a1866:	78db      	ldrb	r3, [r3, #3]
 80a1868:	2b01      	cmp	r3, #1
 80a186a:	d108      	bne.n	80a187e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80a186c:	697b      	ldr	r3, [r7, #20]
 80a186e:	2200      	movs	r2, #0
 80a1870:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80a1872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1874:	b2db      	uxtb	r3, r3
 80a1876:	4619      	mov	r1, r3
 80a1878:	6878      	ldr	r0, [r7, #4]
 80a187a:	f007 fb43 	bl	80a8f04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80a187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1880:	015a      	lsls	r2, r3, #5
 80a1882:	69fb      	ldr	r3, [r7, #28]
 80a1884:	4413      	add	r3, r2
 80a1886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a188a:	461a      	mov	r2, r3
 80a188c:	2302      	movs	r3, #2
 80a188e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80a1890:	693b      	ldr	r3, [r7, #16]
 80a1892:	f003 0320 	and.w	r3, r3, #32
 80a1896:	2b00      	cmp	r3, #0
 80a1898:	d008      	beq.n	80a18ac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80a189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a189c:	015a      	lsls	r2, r3, #5
 80a189e:	69fb      	ldr	r3, [r7, #28]
 80a18a0:	4413      	add	r3, r2
 80a18a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a18a6:	461a      	mov	r2, r3
 80a18a8:	2320      	movs	r3, #32
 80a18aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80a18ac:	693b      	ldr	r3, [r7, #16]
 80a18ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80a18b2:	2b00      	cmp	r3, #0
 80a18b4:	d009      	beq.n	80a18ca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80a18b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a18b8:	015a      	lsls	r2, r3, #5
 80a18ba:	69fb      	ldr	r3, [r7, #28]
 80a18bc:	4413      	add	r3, r2
 80a18be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a18c2:	461a      	mov	r2, r3
 80a18c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80a18c8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80a18ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a18cc:	3301      	adds	r3, #1
 80a18ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80a18d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80a18d2:	085b      	lsrs	r3, r3, #1
 80a18d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80a18d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80a18d8:	2b00      	cmp	r3, #0
 80a18da:	f47f af62 	bne.w	80a17a2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80a18de:	687b      	ldr	r3, [r7, #4]
 80a18e0:	681b      	ldr	r3, [r3, #0]
 80a18e2:	4618      	mov	r0, r3
 80a18e4:	f004 fe42 	bl	80a656c <USB_ReadInterrupts>
 80a18e8:	4603      	mov	r3, r0
 80a18ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80a18ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80a18f2:	f040 80db 	bne.w	80a1aac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80a18f6:	687b      	ldr	r3, [r7, #4]
 80a18f8:	681b      	ldr	r3, [r3, #0]
 80a18fa:	4618      	mov	r0, r3
 80a18fc:	f004 fe63 	bl	80a65c6 <USB_ReadDevAllInEpInterrupt>
 80a1900:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80a1902:	2300      	movs	r3, #0
 80a1904:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80a1906:	e0cd      	b.n	80a1aa4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80a1908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80a190a:	f003 0301 	and.w	r3, r3, #1
 80a190e:	2b00      	cmp	r3, #0
 80a1910:	f000 80c2 	beq.w	80a1a98 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80a1914:	687b      	ldr	r3, [r7, #4]
 80a1916:	681b      	ldr	r3, [r3, #0]
 80a1918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a191a:	b2d2      	uxtb	r2, r2
 80a191c:	4611      	mov	r1, r2
 80a191e:	4618      	mov	r0, r3
 80a1920:	f004 fe89 	bl	80a6636 <USB_ReadDevInEPInterrupt>
 80a1924:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80a1926:	693b      	ldr	r3, [r7, #16]
 80a1928:	f003 0301 	and.w	r3, r3, #1
 80a192c:	2b00      	cmp	r3, #0
 80a192e:	d057      	beq.n	80a19e0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80a1930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1932:	f003 030f 	and.w	r3, r3, #15
 80a1936:	2201      	movs	r2, #1
 80a1938:	fa02 f303 	lsl.w	r3, r2, r3
 80a193c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80a193e:	69fb      	ldr	r3, [r7, #28]
 80a1940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80a1946:	68fb      	ldr	r3, [r7, #12]
 80a1948:	43db      	mvns	r3, r3
 80a194a:	69f9      	ldr	r1, [r7, #28]
 80a194c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a1950:	4013      	ands	r3, r2
 80a1952:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80a1954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1956:	015a      	lsls	r2, r3, #5
 80a1958:	69fb      	ldr	r3, [r7, #28]
 80a195a:	4413      	add	r3, r2
 80a195c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a1960:	461a      	mov	r2, r3
 80a1962:	2301      	movs	r3, #1
 80a1964:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80a1966:	687b      	ldr	r3, [r7, #4]
 80a1968:	799b      	ldrb	r3, [r3, #6]
 80a196a:	2b01      	cmp	r3, #1
 80a196c:	d132      	bne.n	80a19d4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80a196e:	6879      	ldr	r1, [r7, #4]
 80a1970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1972:	4613      	mov	r3, r2
 80a1974:	00db      	lsls	r3, r3, #3
 80a1976:	4413      	add	r3, r2
 80a1978:	009b      	lsls	r3, r3, #2
 80a197a:	440b      	add	r3, r1
 80a197c:	3320      	adds	r3, #32
 80a197e:	6819      	ldr	r1, [r3, #0]
 80a1980:	6878      	ldr	r0, [r7, #4]
 80a1982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1984:	4613      	mov	r3, r2
 80a1986:	00db      	lsls	r3, r3, #3
 80a1988:	4413      	add	r3, r2
 80a198a:	009b      	lsls	r3, r3, #2
 80a198c:	4403      	add	r3, r0
 80a198e:	331c      	adds	r3, #28
 80a1990:	681b      	ldr	r3, [r3, #0]
 80a1992:	4419      	add	r1, r3
 80a1994:	6878      	ldr	r0, [r7, #4]
 80a1996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1998:	4613      	mov	r3, r2
 80a199a:	00db      	lsls	r3, r3, #3
 80a199c:	4413      	add	r3, r2
 80a199e:	009b      	lsls	r3, r3, #2
 80a19a0:	4403      	add	r3, r0
 80a19a2:	3320      	adds	r3, #32
 80a19a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80a19a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a19a8:	2b00      	cmp	r3, #0
 80a19aa:	d113      	bne.n	80a19d4 <HAL_PCD_IRQHandler+0x3a2>
 80a19ac:	6879      	ldr	r1, [r7, #4]
 80a19ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a19b0:	4613      	mov	r3, r2
 80a19b2:	00db      	lsls	r3, r3, #3
 80a19b4:	4413      	add	r3, r2
 80a19b6:	009b      	lsls	r3, r3, #2
 80a19b8:	440b      	add	r3, r1
 80a19ba:	3324      	adds	r3, #36	@ 0x24
 80a19bc:	681b      	ldr	r3, [r3, #0]
 80a19be:	2b00      	cmp	r3, #0
 80a19c0:	d108      	bne.n	80a19d4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80a19c2:	687b      	ldr	r3, [r7, #4]
 80a19c4:	6818      	ldr	r0, [r3, #0]
 80a19c6:	687b      	ldr	r3, [r7, #4]
 80a19c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80a19cc:	461a      	mov	r2, r3
 80a19ce:	2101      	movs	r1, #1
 80a19d0:	f004 fe92 	bl	80a66f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80a19d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a19d6:	b2db      	uxtb	r3, r3
 80a19d8:	4619      	mov	r1, r3
 80a19da:	6878      	ldr	r0, [r7, #4]
 80a19dc:	f007 fa0d 	bl	80a8dfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80a19e0:	693b      	ldr	r3, [r7, #16]
 80a19e2:	f003 0308 	and.w	r3, r3, #8
 80a19e6:	2b00      	cmp	r3, #0
 80a19e8:	d008      	beq.n	80a19fc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80a19ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a19ec:	015a      	lsls	r2, r3, #5
 80a19ee:	69fb      	ldr	r3, [r7, #28]
 80a19f0:	4413      	add	r3, r2
 80a19f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a19f6:	461a      	mov	r2, r3
 80a19f8:	2308      	movs	r3, #8
 80a19fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80a19fc:	693b      	ldr	r3, [r7, #16]
 80a19fe:	f003 0310 	and.w	r3, r3, #16
 80a1a02:	2b00      	cmp	r3, #0
 80a1a04:	d008      	beq.n	80a1a18 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80a1a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1a08:	015a      	lsls	r2, r3, #5
 80a1a0a:	69fb      	ldr	r3, [r7, #28]
 80a1a0c:	4413      	add	r3, r2
 80a1a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a1a12:	461a      	mov	r2, r3
 80a1a14:	2310      	movs	r3, #16
 80a1a16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80a1a18:	693b      	ldr	r3, [r7, #16]
 80a1a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80a1a1e:	2b00      	cmp	r3, #0
 80a1a20:	d008      	beq.n	80a1a34 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80a1a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1a24:	015a      	lsls	r2, r3, #5
 80a1a26:	69fb      	ldr	r3, [r7, #28]
 80a1a28:	4413      	add	r3, r2
 80a1a2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a1a2e:	461a      	mov	r2, r3
 80a1a30:	2340      	movs	r3, #64	@ 0x40
 80a1a32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80a1a34:	693b      	ldr	r3, [r7, #16]
 80a1a36:	f003 0302 	and.w	r3, r3, #2
 80a1a3a:	2b00      	cmp	r3, #0
 80a1a3c:	d023      	beq.n	80a1a86 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80a1a3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80a1a40:	6a38      	ldr	r0, [r7, #32]
 80a1a42:	f003 fe71 	bl	80a5728 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80a1a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1a48:	4613      	mov	r3, r2
 80a1a4a:	00db      	lsls	r3, r3, #3
 80a1a4c:	4413      	add	r3, r2
 80a1a4e:	009b      	lsls	r3, r3, #2
 80a1a50:	3310      	adds	r3, #16
 80a1a52:	687a      	ldr	r2, [r7, #4]
 80a1a54:	4413      	add	r3, r2
 80a1a56:	3304      	adds	r3, #4
 80a1a58:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80a1a5a:	697b      	ldr	r3, [r7, #20]
 80a1a5c:	78db      	ldrb	r3, [r3, #3]
 80a1a5e:	2b01      	cmp	r3, #1
 80a1a60:	d108      	bne.n	80a1a74 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80a1a62:	697b      	ldr	r3, [r7, #20]
 80a1a64:	2200      	movs	r2, #0
 80a1a66:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80a1a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1a6a:	b2db      	uxtb	r3, r3
 80a1a6c:	4619      	mov	r1, r3
 80a1a6e:	6878      	ldr	r0, [r7, #4]
 80a1a70:	f007 fa5a 	bl	80a8f28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80a1a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1a76:	015a      	lsls	r2, r3, #5
 80a1a78:	69fb      	ldr	r3, [r7, #28]
 80a1a7a:	4413      	add	r3, r2
 80a1a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a1a80:	461a      	mov	r2, r3
 80a1a82:	2302      	movs	r3, #2
 80a1a84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80a1a86:	693b      	ldr	r3, [r7, #16]
 80a1a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80a1a8c:	2b00      	cmp	r3, #0
 80a1a8e:	d003      	beq.n	80a1a98 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80a1a90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80a1a92:	6878      	ldr	r0, [r7, #4]
 80a1a94:	f000 fcea 	bl	80a246c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80a1a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1a9a:	3301      	adds	r3, #1
 80a1a9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80a1a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80a1aa0:	085b      	lsrs	r3, r3, #1
 80a1aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80a1aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80a1aa6:	2b00      	cmp	r3, #0
 80a1aa8:	f47f af2e 	bne.w	80a1908 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80a1aac:	687b      	ldr	r3, [r7, #4]
 80a1aae:	681b      	ldr	r3, [r3, #0]
 80a1ab0:	4618      	mov	r0, r3
 80a1ab2:	f004 fd5b 	bl	80a656c <USB_ReadInterrupts>
 80a1ab6:	4603      	mov	r3, r0
 80a1ab8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a1abc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a1ac0:	d122      	bne.n	80a1b08 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80a1ac2:	69fb      	ldr	r3, [r7, #28]
 80a1ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1ac8:	685b      	ldr	r3, [r3, #4]
 80a1aca:	69fa      	ldr	r2, [r7, #28]
 80a1acc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1ad0:	f023 0301 	bic.w	r3, r3, #1
 80a1ad4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80a1ad6:	687b      	ldr	r3, [r7, #4]
 80a1ad8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80a1adc:	2b01      	cmp	r3, #1
 80a1ade:	d108      	bne.n	80a1af2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80a1ae0:	687b      	ldr	r3, [r7, #4]
 80a1ae2:	2200      	movs	r2, #0
 80a1ae4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80a1ae8:	2100      	movs	r1, #0
 80a1aea:	6878      	ldr	r0, [r7, #4]
 80a1aec:	f000 fef4 	bl	80a28d8 <HAL_PCDEx_LPM_Callback>
 80a1af0:	e002      	b.n	80a1af8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80a1af2:	6878      	ldr	r0, [r7, #4]
 80a1af4:	f007 f9f8 	bl	80a8ee8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80a1af8:	687b      	ldr	r3, [r7, #4]
 80a1afa:	681b      	ldr	r3, [r3, #0]
 80a1afc:	695a      	ldr	r2, [r3, #20]
 80a1afe:	687b      	ldr	r3, [r7, #4]
 80a1b00:	681b      	ldr	r3, [r3, #0]
 80a1b02:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80a1b06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80a1b08:	687b      	ldr	r3, [r7, #4]
 80a1b0a:	681b      	ldr	r3, [r3, #0]
 80a1b0c:	4618      	mov	r0, r3
 80a1b0e:	f004 fd2d 	bl	80a656c <USB_ReadInterrupts>
 80a1b12:	4603      	mov	r3, r0
 80a1b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80a1b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80a1b1c:	d112      	bne.n	80a1b44 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80a1b1e:	69fb      	ldr	r3, [r7, #28]
 80a1b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1b24:	689b      	ldr	r3, [r3, #8]
 80a1b26:	f003 0301 	and.w	r3, r3, #1
 80a1b2a:	2b01      	cmp	r3, #1
 80a1b2c:	d102      	bne.n	80a1b34 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80a1b2e:	6878      	ldr	r0, [r7, #4]
 80a1b30:	f007 f9b4 	bl	80a8e9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80a1b34:	687b      	ldr	r3, [r7, #4]
 80a1b36:	681b      	ldr	r3, [r3, #0]
 80a1b38:	695a      	ldr	r2, [r3, #20]
 80a1b3a:	687b      	ldr	r3, [r7, #4]
 80a1b3c:	681b      	ldr	r3, [r3, #0]
 80a1b3e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80a1b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80a1b44:	687b      	ldr	r3, [r7, #4]
 80a1b46:	681b      	ldr	r3, [r3, #0]
 80a1b48:	4618      	mov	r0, r3
 80a1b4a:	f004 fd0f 	bl	80a656c <USB_ReadInterrupts>
 80a1b4e:	4603      	mov	r3, r0
 80a1b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80a1b54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80a1b58:	d121      	bne.n	80a1b9e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80a1b5a:	687b      	ldr	r3, [r7, #4]
 80a1b5c:	681b      	ldr	r3, [r3, #0]
 80a1b5e:	695a      	ldr	r2, [r3, #20]
 80a1b60:	687b      	ldr	r3, [r7, #4]
 80a1b62:	681b      	ldr	r3, [r3, #0]
 80a1b64:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80a1b68:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80a1b6a:	687b      	ldr	r3, [r7, #4]
 80a1b6c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80a1b70:	2b00      	cmp	r3, #0
 80a1b72:	d111      	bne.n	80a1b98 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80a1b74:	687b      	ldr	r3, [r7, #4]
 80a1b76:	2201      	movs	r2, #1
 80a1b78:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80a1b7c:	687b      	ldr	r3, [r7, #4]
 80a1b7e:	681b      	ldr	r3, [r3, #0]
 80a1b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a1b82:	089b      	lsrs	r3, r3, #2
 80a1b84:	f003 020f 	and.w	r2, r3, #15
 80a1b88:	687b      	ldr	r3, [r7, #4]
 80a1b8a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80a1b8e:	2101      	movs	r1, #1
 80a1b90:	6878      	ldr	r0, [r7, #4]
 80a1b92:	f000 fea1 	bl	80a28d8 <HAL_PCDEx_LPM_Callback>
 80a1b96:	e002      	b.n	80a1b9e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80a1b98:	6878      	ldr	r0, [r7, #4]
 80a1b9a:	f007 f97f 	bl	80a8e9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80a1b9e:	687b      	ldr	r3, [r7, #4]
 80a1ba0:	681b      	ldr	r3, [r3, #0]
 80a1ba2:	4618      	mov	r0, r3
 80a1ba4:	f004 fce2 	bl	80a656c <USB_ReadInterrupts>
 80a1ba8:	4603      	mov	r3, r0
 80a1baa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80a1bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80a1bb2:	f040 80b7 	bne.w	80a1d24 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80a1bb6:	69fb      	ldr	r3, [r7, #28]
 80a1bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1bbc:	685b      	ldr	r3, [r3, #4]
 80a1bbe:	69fa      	ldr	r2, [r7, #28]
 80a1bc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1bc4:	f023 0301 	bic.w	r3, r3, #1
 80a1bc8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80a1bca:	687b      	ldr	r3, [r7, #4]
 80a1bcc:	681b      	ldr	r3, [r3, #0]
 80a1bce:	2110      	movs	r1, #16
 80a1bd0:	4618      	mov	r0, r3
 80a1bd2:	f003 fda9 	bl	80a5728 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80a1bd6:	2300      	movs	r3, #0
 80a1bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80a1bda:	e046      	b.n	80a1c6a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80a1bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a1bde:	015a      	lsls	r2, r3, #5
 80a1be0:	69fb      	ldr	r3, [r7, #28]
 80a1be2:	4413      	add	r3, r2
 80a1be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a1be8:	461a      	mov	r2, r3
 80a1bea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80a1bee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80a1bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a1bf2:	015a      	lsls	r2, r3, #5
 80a1bf4:	69fb      	ldr	r3, [r7, #28]
 80a1bf6:	4413      	add	r3, r2
 80a1bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a1bfc:	681b      	ldr	r3, [r3, #0]
 80a1bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80a1c00:	0151      	lsls	r1, r2, #5
 80a1c02:	69fa      	ldr	r2, [r7, #28]
 80a1c04:	440a      	add	r2, r1
 80a1c06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a1c0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80a1c0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80a1c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a1c12:	015a      	lsls	r2, r3, #5
 80a1c14:	69fb      	ldr	r3, [r7, #28]
 80a1c16:	4413      	add	r3, r2
 80a1c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a1c1c:	461a      	mov	r2, r3
 80a1c1e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80a1c22:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80a1c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a1c26:	015a      	lsls	r2, r3, #5
 80a1c28:	69fb      	ldr	r3, [r7, #28]
 80a1c2a:	4413      	add	r3, r2
 80a1c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a1c30:	681b      	ldr	r3, [r3, #0]
 80a1c32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80a1c34:	0151      	lsls	r1, r2, #5
 80a1c36:	69fa      	ldr	r2, [r7, #28]
 80a1c38:	440a      	add	r2, r1
 80a1c3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a1c3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80a1c42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80a1c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a1c46:	015a      	lsls	r2, r3, #5
 80a1c48:	69fb      	ldr	r3, [r7, #28]
 80a1c4a:	4413      	add	r3, r2
 80a1c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a1c50:	681b      	ldr	r3, [r3, #0]
 80a1c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80a1c54:	0151      	lsls	r1, r2, #5
 80a1c56:	69fa      	ldr	r2, [r7, #28]
 80a1c58:	440a      	add	r2, r1
 80a1c5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a1c5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80a1c62:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80a1c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a1c66:	3301      	adds	r3, #1
 80a1c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80a1c6a:	687b      	ldr	r3, [r7, #4]
 80a1c6c:	791b      	ldrb	r3, [r3, #4]
 80a1c6e:	461a      	mov	r2, r3
 80a1c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a1c72:	4293      	cmp	r3, r2
 80a1c74:	d3b2      	bcc.n	80a1bdc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80a1c76:	69fb      	ldr	r3, [r7, #28]
 80a1c78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1c7c:	69db      	ldr	r3, [r3, #28]
 80a1c7e:	69fa      	ldr	r2, [r7, #28]
 80a1c80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1c84:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80a1c88:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80a1c8a:	687b      	ldr	r3, [r7, #4]
 80a1c8c:	7bdb      	ldrb	r3, [r3, #15]
 80a1c8e:	2b00      	cmp	r3, #0
 80a1c90:	d016      	beq.n	80a1cc0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80a1c92:	69fb      	ldr	r3, [r7, #28]
 80a1c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80a1c9c:	69fa      	ldr	r2, [r7, #28]
 80a1c9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1ca2:	f043 030b 	orr.w	r3, r3, #11
 80a1ca6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80a1caa:	69fb      	ldr	r3, [r7, #28]
 80a1cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80a1cb2:	69fa      	ldr	r2, [r7, #28]
 80a1cb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1cb8:	f043 030b 	orr.w	r3, r3, #11
 80a1cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 80a1cbe:	e015      	b.n	80a1cec <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80a1cc0:	69fb      	ldr	r3, [r7, #28]
 80a1cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1cc6:	695a      	ldr	r2, [r3, #20]
 80a1cc8:	69fb      	ldr	r3, [r7, #28]
 80a1cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1cce:	4619      	mov	r1, r3
 80a1cd0:	f242 032b 	movw	r3, #8235	@ 0x202b
 80a1cd4:	4313      	orrs	r3, r2
 80a1cd6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80a1cd8:	69fb      	ldr	r3, [r7, #28]
 80a1cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1cde:	691b      	ldr	r3, [r3, #16]
 80a1ce0:	69fa      	ldr	r2, [r7, #28]
 80a1ce2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1ce6:	f043 030b 	orr.w	r3, r3, #11
 80a1cea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80a1cec:	69fb      	ldr	r3, [r7, #28]
 80a1cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1cf2:	681b      	ldr	r3, [r3, #0]
 80a1cf4:	69fa      	ldr	r2, [r7, #28]
 80a1cf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1cfa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80a1cfe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80a1d00:	687b      	ldr	r3, [r7, #4]
 80a1d02:	6818      	ldr	r0, [r3, #0]
 80a1d04:	687b      	ldr	r3, [r7, #4]
 80a1d06:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80a1d08:	687b      	ldr	r3, [r7, #4]
 80a1d0a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80a1d0e:	461a      	mov	r2, r3
 80a1d10:	f004 fcf2 	bl	80a66f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80a1d14:	687b      	ldr	r3, [r7, #4]
 80a1d16:	681b      	ldr	r3, [r3, #0]
 80a1d18:	695a      	ldr	r2, [r3, #20]
 80a1d1a:	687b      	ldr	r3, [r7, #4]
 80a1d1c:	681b      	ldr	r3, [r3, #0]
 80a1d1e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80a1d22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80a1d24:	687b      	ldr	r3, [r7, #4]
 80a1d26:	681b      	ldr	r3, [r3, #0]
 80a1d28:	4618      	mov	r0, r3
 80a1d2a:	f004 fc1f 	bl	80a656c <USB_ReadInterrupts>
 80a1d2e:	4603      	mov	r3, r0
 80a1d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80a1d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80a1d38:	d123      	bne.n	80a1d82 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80a1d3a:	687b      	ldr	r3, [r7, #4]
 80a1d3c:	681b      	ldr	r3, [r3, #0]
 80a1d3e:	4618      	mov	r0, r3
 80a1d40:	f004 fcb6 	bl	80a66b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80a1d44:	687b      	ldr	r3, [r7, #4]
 80a1d46:	681b      	ldr	r3, [r3, #0]
 80a1d48:	4618      	mov	r0, r3
 80a1d4a:	f003 fd66 	bl	80a581a <USB_GetDevSpeed>
 80a1d4e:	4603      	mov	r3, r0
 80a1d50:	461a      	mov	r2, r3
 80a1d52:	687b      	ldr	r3, [r7, #4]
 80a1d54:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80a1d56:	687b      	ldr	r3, [r7, #4]
 80a1d58:	681c      	ldr	r4, [r3, #0]
 80a1d5a:	f001 fe27 	bl	80a39ac <HAL_RCC_GetHCLKFreq>
 80a1d5e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80a1d60:	687b      	ldr	r3, [r7, #4]
 80a1d62:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80a1d64:	461a      	mov	r2, r3
 80a1d66:	4620      	mov	r0, r4
 80a1d68:	f003 fa70 	bl	80a524c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80a1d6c:	6878      	ldr	r0, [r7, #4]
 80a1d6e:	f007 f86c 	bl	80a8e4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80a1d72:	687b      	ldr	r3, [r7, #4]
 80a1d74:	681b      	ldr	r3, [r3, #0]
 80a1d76:	695a      	ldr	r2, [r3, #20]
 80a1d78:	687b      	ldr	r3, [r7, #4]
 80a1d7a:	681b      	ldr	r3, [r3, #0]
 80a1d7c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80a1d80:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80a1d82:	687b      	ldr	r3, [r7, #4]
 80a1d84:	681b      	ldr	r3, [r3, #0]
 80a1d86:	4618      	mov	r0, r3
 80a1d88:	f004 fbf0 	bl	80a656c <USB_ReadInterrupts>
 80a1d8c:	4603      	mov	r3, r0
 80a1d8e:	f003 0308 	and.w	r3, r3, #8
 80a1d92:	2b08      	cmp	r3, #8
 80a1d94:	d10a      	bne.n	80a1dac <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80a1d96:	6878      	ldr	r0, [r7, #4]
 80a1d98:	f007 f849 	bl	80a8e2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80a1d9c:	687b      	ldr	r3, [r7, #4]
 80a1d9e:	681b      	ldr	r3, [r3, #0]
 80a1da0:	695a      	ldr	r2, [r3, #20]
 80a1da2:	687b      	ldr	r3, [r7, #4]
 80a1da4:	681b      	ldr	r3, [r3, #0]
 80a1da6:	f002 0208 	and.w	r2, r2, #8
 80a1daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80a1dac:	687b      	ldr	r3, [r7, #4]
 80a1dae:	681b      	ldr	r3, [r3, #0]
 80a1db0:	4618      	mov	r0, r3
 80a1db2:	f004 fbdb 	bl	80a656c <USB_ReadInterrupts>
 80a1db6:	4603      	mov	r3, r0
 80a1db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80a1dbc:	2b80      	cmp	r3, #128	@ 0x80
 80a1dbe:	d123      	bne.n	80a1e08 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80a1dc0:	6a3b      	ldr	r3, [r7, #32]
 80a1dc2:	699b      	ldr	r3, [r3, #24]
 80a1dc4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80a1dc8:	6a3b      	ldr	r3, [r7, #32]
 80a1dca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80a1dcc:	2301      	movs	r3, #1
 80a1dce:	627b      	str	r3, [r7, #36]	@ 0x24
 80a1dd0:	e014      	b.n	80a1dfc <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80a1dd2:	6879      	ldr	r1, [r7, #4]
 80a1dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1dd6:	4613      	mov	r3, r2
 80a1dd8:	00db      	lsls	r3, r3, #3
 80a1dda:	4413      	add	r3, r2
 80a1ddc:	009b      	lsls	r3, r3, #2
 80a1dde:	440b      	add	r3, r1
 80a1de0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80a1de4:	781b      	ldrb	r3, [r3, #0]
 80a1de6:	2b01      	cmp	r3, #1
 80a1de8:	d105      	bne.n	80a1df6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80a1dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1dec:	b2db      	uxtb	r3, r3
 80a1dee:	4619      	mov	r1, r3
 80a1df0:	6878      	ldr	r0, [r7, #4]
 80a1df2:	f000 fb0a 	bl	80a240a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80a1df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1df8:	3301      	adds	r3, #1
 80a1dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 80a1dfc:	687b      	ldr	r3, [r7, #4]
 80a1dfe:	791b      	ldrb	r3, [r3, #4]
 80a1e00:	461a      	mov	r2, r3
 80a1e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1e04:	4293      	cmp	r3, r2
 80a1e06:	d3e4      	bcc.n	80a1dd2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80a1e08:	687b      	ldr	r3, [r7, #4]
 80a1e0a:	681b      	ldr	r3, [r3, #0]
 80a1e0c:	4618      	mov	r0, r3
 80a1e0e:	f004 fbad 	bl	80a656c <USB_ReadInterrupts>
 80a1e12:	4603      	mov	r3, r0
 80a1e14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80a1e18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80a1e1c:	d13c      	bne.n	80a1e98 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80a1e1e:	2301      	movs	r3, #1
 80a1e20:	627b      	str	r3, [r7, #36]	@ 0x24
 80a1e22:	e02b      	b.n	80a1e7c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80a1e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1e26:	015a      	lsls	r2, r3, #5
 80a1e28:	69fb      	ldr	r3, [r7, #28]
 80a1e2a:	4413      	add	r3, r2
 80a1e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a1e30:	681b      	ldr	r3, [r3, #0]
 80a1e32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80a1e34:	6879      	ldr	r1, [r7, #4]
 80a1e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1e38:	4613      	mov	r3, r2
 80a1e3a:	00db      	lsls	r3, r3, #3
 80a1e3c:	4413      	add	r3, r2
 80a1e3e:	009b      	lsls	r3, r3, #2
 80a1e40:	440b      	add	r3, r1
 80a1e42:	3318      	adds	r3, #24
 80a1e44:	781b      	ldrb	r3, [r3, #0]
 80a1e46:	2b01      	cmp	r3, #1
 80a1e48:	d115      	bne.n	80a1e76 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80a1e4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80a1e4c:	2b00      	cmp	r3, #0
 80a1e4e:	da12      	bge.n	80a1e76 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80a1e50:	6879      	ldr	r1, [r7, #4]
 80a1e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1e54:	4613      	mov	r3, r2
 80a1e56:	00db      	lsls	r3, r3, #3
 80a1e58:	4413      	add	r3, r2
 80a1e5a:	009b      	lsls	r3, r3, #2
 80a1e5c:	440b      	add	r3, r1
 80a1e5e:	3317      	adds	r3, #23
 80a1e60:	2201      	movs	r2, #1
 80a1e62:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80a1e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1e66:	b2db      	uxtb	r3, r3
 80a1e68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80a1e6c:	b2db      	uxtb	r3, r3
 80a1e6e:	4619      	mov	r1, r3
 80a1e70:	6878      	ldr	r0, [r7, #4]
 80a1e72:	f000 faca 	bl	80a240a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80a1e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1e78:	3301      	adds	r3, #1
 80a1e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 80a1e7c:	687b      	ldr	r3, [r7, #4]
 80a1e7e:	791b      	ldrb	r3, [r3, #4]
 80a1e80:	461a      	mov	r2, r3
 80a1e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1e84:	4293      	cmp	r3, r2
 80a1e86:	d3cd      	bcc.n	80a1e24 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80a1e88:	687b      	ldr	r3, [r7, #4]
 80a1e8a:	681b      	ldr	r3, [r3, #0]
 80a1e8c:	695a      	ldr	r2, [r3, #20]
 80a1e8e:	687b      	ldr	r3, [r7, #4]
 80a1e90:	681b      	ldr	r3, [r3, #0]
 80a1e92:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80a1e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80a1e98:	687b      	ldr	r3, [r7, #4]
 80a1e9a:	681b      	ldr	r3, [r3, #0]
 80a1e9c:	4618      	mov	r0, r3
 80a1e9e:	f004 fb65 	bl	80a656c <USB_ReadInterrupts>
 80a1ea2:	4603      	mov	r3, r0
 80a1ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80a1ea8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80a1eac:	d156      	bne.n	80a1f5c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80a1eae:	2301      	movs	r3, #1
 80a1eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 80a1eb2:	e045      	b.n	80a1f40 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80a1eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1eb6:	015a      	lsls	r2, r3, #5
 80a1eb8:	69fb      	ldr	r3, [r7, #28]
 80a1eba:	4413      	add	r3, r2
 80a1ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a1ec0:	681b      	ldr	r3, [r3, #0]
 80a1ec2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80a1ec4:	6879      	ldr	r1, [r7, #4]
 80a1ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1ec8:	4613      	mov	r3, r2
 80a1eca:	00db      	lsls	r3, r3, #3
 80a1ecc:	4413      	add	r3, r2
 80a1ece:	009b      	lsls	r3, r3, #2
 80a1ed0:	440b      	add	r3, r1
 80a1ed2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80a1ed6:	781b      	ldrb	r3, [r3, #0]
 80a1ed8:	2b01      	cmp	r3, #1
 80a1eda:	d12e      	bne.n	80a1f3a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80a1edc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80a1ede:	2b00      	cmp	r3, #0
 80a1ee0:	da2b      	bge.n	80a1f3a <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80a1ee2:	69bb      	ldr	r3, [r7, #24]
 80a1ee4:	0c1a      	lsrs	r2, r3, #16
 80a1ee6:	687b      	ldr	r3, [r7, #4]
 80a1ee8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80a1eec:	4053      	eors	r3, r2
 80a1eee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80a1ef2:	2b00      	cmp	r3, #0
 80a1ef4:	d121      	bne.n	80a1f3a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80a1ef6:	6879      	ldr	r1, [r7, #4]
 80a1ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80a1efa:	4613      	mov	r3, r2
 80a1efc:	00db      	lsls	r3, r3, #3
 80a1efe:	4413      	add	r3, r2
 80a1f00:	009b      	lsls	r3, r3, #2
 80a1f02:	440b      	add	r3, r1
 80a1f04:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80a1f08:	2201      	movs	r2, #1
 80a1f0a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80a1f0c:	6a3b      	ldr	r3, [r7, #32]
 80a1f0e:	699b      	ldr	r3, [r3, #24]
 80a1f10:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80a1f14:	6a3b      	ldr	r3, [r7, #32]
 80a1f16:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80a1f18:	6a3b      	ldr	r3, [r7, #32]
 80a1f1a:	695b      	ldr	r3, [r3, #20]
 80a1f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80a1f20:	2b00      	cmp	r3, #0
 80a1f22:	d10a      	bne.n	80a1f3a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80a1f24:	69fb      	ldr	r3, [r7, #28]
 80a1f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a1f2a:	685b      	ldr	r3, [r3, #4]
 80a1f2c:	69fa      	ldr	r2, [r7, #28]
 80a1f2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a1f32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80a1f36:	6053      	str	r3, [r2, #4]
            break;
 80a1f38:	e008      	b.n	80a1f4c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80a1f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1f3c:	3301      	adds	r3, #1
 80a1f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 80a1f40:	687b      	ldr	r3, [r7, #4]
 80a1f42:	791b      	ldrb	r3, [r3, #4]
 80a1f44:	461a      	mov	r2, r3
 80a1f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a1f48:	4293      	cmp	r3, r2
 80a1f4a:	d3b3      	bcc.n	80a1eb4 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80a1f4c:	687b      	ldr	r3, [r7, #4]
 80a1f4e:	681b      	ldr	r3, [r3, #0]
 80a1f50:	695a      	ldr	r2, [r3, #20]
 80a1f52:	687b      	ldr	r3, [r7, #4]
 80a1f54:	681b      	ldr	r3, [r3, #0]
 80a1f56:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80a1f5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80a1f5c:	687b      	ldr	r3, [r7, #4]
 80a1f5e:	681b      	ldr	r3, [r3, #0]
 80a1f60:	4618      	mov	r0, r3
 80a1f62:	f004 fb03 	bl	80a656c <USB_ReadInterrupts>
 80a1f66:	4603      	mov	r3, r0
 80a1f68:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80a1f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80a1f70:	d10a      	bne.n	80a1f88 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80a1f72:	6878      	ldr	r0, [r7, #4]
 80a1f74:	f006 ffea 	bl	80a8f4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80a1f78:	687b      	ldr	r3, [r7, #4]
 80a1f7a:	681b      	ldr	r3, [r3, #0]
 80a1f7c:	695a      	ldr	r2, [r3, #20]
 80a1f7e:	687b      	ldr	r3, [r7, #4]
 80a1f80:	681b      	ldr	r3, [r3, #0]
 80a1f82:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80a1f86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80a1f88:	687b      	ldr	r3, [r7, #4]
 80a1f8a:	681b      	ldr	r3, [r3, #0]
 80a1f8c:	4618      	mov	r0, r3
 80a1f8e:	f004 faed 	bl	80a656c <USB_ReadInterrupts>
 80a1f92:	4603      	mov	r3, r0
 80a1f94:	f003 0304 	and.w	r3, r3, #4
 80a1f98:	2b04      	cmp	r3, #4
 80a1f9a:	d115      	bne.n	80a1fc8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80a1f9c:	687b      	ldr	r3, [r7, #4]
 80a1f9e:	681b      	ldr	r3, [r3, #0]
 80a1fa0:	685b      	ldr	r3, [r3, #4]
 80a1fa2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80a1fa4:	69bb      	ldr	r3, [r7, #24]
 80a1fa6:	f003 0304 	and.w	r3, r3, #4
 80a1faa:	2b00      	cmp	r3, #0
 80a1fac:	d002      	beq.n	80a1fb4 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80a1fae:	6878      	ldr	r0, [r7, #4]
 80a1fb0:	f006 ffda 	bl	80a8f68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80a1fb4:	687b      	ldr	r3, [r7, #4]
 80a1fb6:	681b      	ldr	r3, [r3, #0]
 80a1fb8:	6859      	ldr	r1, [r3, #4]
 80a1fba:	687b      	ldr	r3, [r7, #4]
 80a1fbc:	681b      	ldr	r3, [r3, #0]
 80a1fbe:	69ba      	ldr	r2, [r7, #24]
 80a1fc0:	430a      	orrs	r2, r1
 80a1fc2:	605a      	str	r2, [r3, #4]
 80a1fc4:	e000      	b.n	80a1fc8 <HAL_PCD_IRQHandler+0x996>
      return;
 80a1fc6:	bf00      	nop
    }
  }
}
 80a1fc8:	3734      	adds	r7, #52	@ 0x34
 80a1fca:	46bd      	mov	sp, r7
 80a1fcc:	bd90      	pop	{r4, r7, pc}

080a1fce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80a1fce:	b580      	push	{r7, lr}
 80a1fd0:	b082      	sub	sp, #8
 80a1fd2:	af00      	add	r7, sp, #0
 80a1fd4:	6078      	str	r0, [r7, #4]
 80a1fd6:	460b      	mov	r3, r1
 80a1fd8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80a1fda:	687b      	ldr	r3, [r7, #4]
 80a1fdc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80a1fe0:	2b01      	cmp	r3, #1
 80a1fe2:	d101      	bne.n	80a1fe8 <HAL_PCD_SetAddress+0x1a>
 80a1fe4:	2302      	movs	r3, #2
 80a1fe6:	e012      	b.n	80a200e <HAL_PCD_SetAddress+0x40>
 80a1fe8:	687b      	ldr	r3, [r7, #4]
 80a1fea:	2201      	movs	r2, #1
 80a1fec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80a1ff0:	687b      	ldr	r3, [r7, #4]
 80a1ff2:	78fa      	ldrb	r2, [r7, #3]
 80a1ff4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80a1ff6:	687b      	ldr	r3, [r7, #4]
 80a1ff8:	681b      	ldr	r3, [r3, #0]
 80a1ffa:	78fa      	ldrb	r2, [r7, #3]
 80a1ffc:	4611      	mov	r1, r2
 80a1ffe:	4618      	mov	r0, r3
 80a2000:	f004 fa4c 	bl	80a649c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80a2004:	687b      	ldr	r3, [r7, #4]
 80a2006:	2200      	movs	r2, #0
 80a2008:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80a200c:	2300      	movs	r3, #0
}
 80a200e:	4618      	mov	r0, r3
 80a2010:	3708      	adds	r7, #8
 80a2012:	46bd      	mov	sp, r7
 80a2014:	bd80      	pop	{r7, pc}

080a2016 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80a2016:	b580      	push	{r7, lr}
 80a2018:	b084      	sub	sp, #16
 80a201a:	af00      	add	r7, sp, #0
 80a201c:	6078      	str	r0, [r7, #4]
 80a201e:	4608      	mov	r0, r1
 80a2020:	4611      	mov	r1, r2
 80a2022:	461a      	mov	r2, r3
 80a2024:	4603      	mov	r3, r0
 80a2026:	70fb      	strb	r3, [r7, #3]
 80a2028:	460b      	mov	r3, r1
 80a202a:	803b      	strh	r3, [r7, #0]
 80a202c:	4613      	mov	r3, r2
 80a202e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80a2030:	2300      	movs	r3, #0
 80a2032:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80a2034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80a2038:	2b00      	cmp	r3, #0
 80a203a:	da0f      	bge.n	80a205c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80a203c:	78fb      	ldrb	r3, [r7, #3]
 80a203e:	f003 020f 	and.w	r2, r3, #15
 80a2042:	4613      	mov	r3, r2
 80a2044:	00db      	lsls	r3, r3, #3
 80a2046:	4413      	add	r3, r2
 80a2048:	009b      	lsls	r3, r3, #2
 80a204a:	3310      	adds	r3, #16
 80a204c:	687a      	ldr	r2, [r7, #4]
 80a204e:	4413      	add	r3, r2
 80a2050:	3304      	adds	r3, #4
 80a2052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80a2054:	68fb      	ldr	r3, [r7, #12]
 80a2056:	2201      	movs	r2, #1
 80a2058:	705a      	strb	r2, [r3, #1]
 80a205a:	e00f      	b.n	80a207c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80a205c:	78fb      	ldrb	r3, [r7, #3]
 80a205e:	f003 020f 	and.w	r2, r3, #15
 80a2062:	4613      	mov	r3, r2
 80a2064:	00db      	lsls	r3, r3, #3
 80a2066:	4413      	add	r3, r2
 80a2068:	009b      	lsls	r3, r3, #2
 80a206a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a206e:	687a      	ldr	r2, [r7, #4]
 80a2070:	4413      	add	r3, r2
 80a2072:	3304      	adds	r3, #4
 80a2074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80a2076:	68fb      	ldr	r3, [r7, #12]
 80a2078:	2200      	movs	r2, #0
 80a207a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80a207c:	78fb      	ldrb	r3, [r7, #3]
 80a207e:	f003 030f 	and.w	r3, r3, #15
 80a2082:	b2da      	uxtb	r2, r3
 80a2084:	68fb      	ldr	r3, [r7, #12]
 80a2086:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80a2088:	883b      	ldrh	r3, [r7, #0]
 80a208a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80a208e:	68fb      	ldr	r3, [r7, #12]
 80a2090:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80a2092:	68fb      	ldr	r3, [r7, #12]
 80a2094:	78ba      	ldrb	r2, [r7, #2]
 80a2096:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80a2098:	68fb      	ldr	r3, [r7, #12]
 80a209a:	785b      	ldrb	r3, [r3, #1]
 80a209c:	2b00      	cmp	r3, #0
 80a209e:	d004      	beq.n	80a20aa <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80a20a0:	68fb      	ldr	r3, [r7, #12]
 80a20a2:	781b      	ldrb	r3, [r3, #0]
 80a20a4:	461a      	mov	r2, r3
 80a20a6:	68fb      	ldr	r3, [r7, #12]
 80a20a8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80a20aa:	78bb      	ldrb	r3, [r7, #2]
 80a20ac:	2b02      	cmp	r3, #2
 80a20ae:	d102      	bne.n	80a20b6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80a20b0:	68fb      	ldr	r3, [r7, #12]
 80a20b2:	2200      	movs	r2, #0
 80a20b4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80a20b6:	687b      	ldr	r3, [r7, #4]
 80a20b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80a20bc:	2b01      	cmp	r3, #1
 80a20be:	d101      	bne.n	80a20c4 <HAL_PCD_EP_Open+0xae>
 80a20c0:	2302      	movs	r3, #2
 80a20c2:	e00e      	b.n	80a20e2 <HAL_PCD_EP_Open+0xcc>
 80a20c4:	687b      	ldr	r3, [r7, #4]
 80a20c6:	2201      	movs	r2, #1
 80a20c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80a20cc:	687b      	ldr	r3, [r7, #4]
 80a20ce:	681b      	ldr	r3, [r3, #0]
 80a20d0:	68f9      	ldr	r1, [r7, #12]
 80a20d2:	4618      	mov	r0, r3
 80a20d4:	f003 fbc6 	bl	80a5864 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80a20d8:	687b      	ldr	r3, [r7, #4]
 80a20da:	2200      	movs	r2, #0
 80a20dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80a20e0:	7afb      	ldrb	r3, [r7, #11]
}
 80a20e2:	4618      	mov	r0, r3
 80a20e4:	3710      	adds	r7, #16
 80a20e6:	46bd      	mov	sp, r7
 80a20e8:	bd80      	pop	{r7, pc}

080a20ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80a20ea:	b580      	push	{r7, lr}
 80a20ec:	b084      	sub	sp, #16
 80a20ee:	af00      	add	r7, sp, #0
 80a20f0:	6078      	str	r0, [r7, #4]
 80a20f2:	460b      	mov	r3, r1
 80a20f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80a20f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80a20fa:	2b00      	cmp	r3, #0
 80a20fc:	da0f      	bge.n	80a211e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80a20fe:	78fb      	ldrb	r3, [r7, #3]
 80a2100:	f003 020f 	and.w	r2, r3, #15
 80a2104:	4613      	mov	r3, r2
 80a2106:	00db      	lsls	r3, r3, #3
 80a2108:	4413      	add	r3, r2
 80a210a:	009b      	lsls	r3, r3, #2
 80a210c:	3310      	adds	r3, #16
 80a210e:	687a      	ldr	r2, [r7, #4]
 80a2110:	4413      	add	r3, r2
 80a2112:	3304      	adds	r3, #4
 80a2114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80a2116:	68fb      	ldr	r3, [r7, #12]
 80a2118:	2201      	movs	r2, #1
 80a211a:	705a      	strb	r2, [r3, #1]
 80a211c:	e00f      	b.n	80a213e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80a211e:	78fb      	ldrb	r3, [r7, #3]
 80a2120:	f003 020f 	and.w	r2, r3, #15
 80a2124:	4613      	mov	r3, r2
 80a2126:	00db      	lsls	r3, r3, #3
 80a2128:	4413      	add	r3, r2
 80a212a:	009b      	lsls	r3, r3, #2
 80a212c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a2130:	687a      	ldr	r2, [r7, #4]
 80a2132:	4413      	add	r3, r2
 80a2134:	3304      	adds	r3, #4
 80a2136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80a2138:	68fb      	ldr	r3, [r7, #12]
 80a213a:	2200      	movs	r2, #0
 80a213c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80a213e:	78fb      	ldrb	r3, [r7, #3]
 80a2140:	f003 030f 	and.w	r3, r3, #15
 80a2144:	b2da      	uxtb	r2, r3
 80a2146:	68fb      	ldr	r3, [r7, #12]
 80a2148:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80a214a:	687b      	ldr	r3, [r7, #4]
 80a214c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80a2150:	2b01      	cmp	r3, #1
 80a2152:	d101      	bne.n	80a2158 <HAL_PCD_EP_Close+0x6e>
 80a2154:	2302      	movs	r3, #2
 80a2156:	e00e      	b.n	80a2176 <HAL_PCD_EP_Close+0x8c>
 80a2158:	687b      	ldr	r3, [r7, #4]
 80a215a:	2201      	movs	r2, #1
 80a215c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80a2160:	687b      	ldr	r3, [r7, #4]
 80a2162:	681b      	ldr	r3, [r3, #0]
 80a2164:	68f9      	ldr	r1, [r7, #12]
 80a2166:	4618      	mov	r0, r3
 80a2168:	f003 fc04 	bl	80a5974 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80a216c:	687b      	ldr	r3, [r7, #4]
 80a216e:	2200      	movs	r2, #0
 80a2170:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80a2174:	2300      	movs	r3, #0
}
 80a2176:	4618      	mov	r0, r3
 80a2178:	3710      	adds	r7, #16
 80a217a:	46bd      	mov	sp, r7
 80a217c:	bd80      	pop	{r7, pc}

080a217e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80a217e:	b580      	push	{r7, lr}
 80a2180:	b086      	sub	sp, #24
 80a2182:	af00      	add	r7, sp, #0
 80a2184:	60f8      	str	r0, [r7, #12]
 80a2186:	607a      	str	r2, [r7, #4]
 80a2188:	603b      	str	r3, [r7, #0]
 80a218a:	460b      	mov	r3, r1
 80a218c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80a218e:	7afb      	ldrb	r3, [r7, #11]
 80a2190:	f003 020f 	and.w	r2, r3, #15
 80a2194:	4613      	mov	r3, r2
 80a2196:	00db      	lsls	r3, r3, #3
 80a2198:	4413      	add	r3, r2
 80a219a:	009b      	lsls	r3, r3, #2
 80a219c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a21a0:	68fa      	ldr	r2, [r7, #12]
 80a21a2:	4413      	add	r3, r2
 80a21a4:	3304      	adds	r3, #4
 80a21a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80a21a8:	697b      	ldr	r3, [r7, #20]
 80a21aa:	687a      	ldr	r2, [r7, #4]
 80a21ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80a21ae:	697b      	ldr	r3, [r7, #20]
 80a21b0:	683a      	ldr	r2, [r7, #0]
 80a21b2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80a21b4:	697b      	ldr	r3, [r7, #20]
 80a21b6:	2200      	movs	r2, #0
 80a21b8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80a21ba:	697b      	ldr	r3, [r7, #20]
 80a21bc:	2200      	movs	r2, #0
 80a21be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80a21c0:	7afb      	ldrb	r3, [r7, #11]
 80a21c2:	f003 030f 	and.w	r3, r3, #15
 80a21c6:	b2da      	uxtb	r2, r3
 80a21c8:	697b      	ldr	r3, [r7, #20]
 80a21ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80a21cc:	68fb      	ldr	r3, [r7, #12]
 80a21ce:	799b      	ldrb	r3, [r3, #6]
 80a21d0:	2b01      	cmp	r3, #1
 80a21d2:	d102      	bne.n	80a21da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80a21d4:	687a      	ldr	r2, [r7, #4]
 80a21d6:	697b      	ldr	r3, [r7, #20]
 80a21d8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80a21da:	68fb      	ldr	r3, [r7, #12]
 80a21dc:	6818      	ldr	r0, [r3, #0]
 80a21de:	68fb      	ldr	r3, [r7, #12]
 80a21e0:	799b      	ldrb	r3, [r3, #6]
 80a21e2:	461a      	mov	r2, r3
 80a21e4:	6979      	ldr	r1, [r7, #20]
 80a21e6:	f003 fca1 	bl	80a5b2c <USB_EPStartXfer>

  return HAL_OK;
 80a21ea:	2300      	movs	r3, #0
}
 80a21ec:	4618      	mov	r0, r3
 80a21ee:	3718      	adds	r7, #24
 80a21f0:	46bd      	mov	sp, r7
 80a21f2:	bd80      	pop	{r7, pc}

080a21f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80a21f4:	b480      	push	{r7}
 80a21f6:	b083      	sub	sp, #12
 80a21f8:	af00      	add	r7, sp, #0
 80a21fa:	6078      	str	r0, [r7, #4]
 80a21fc:	460b      	mov	r3, r1
 80a21fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80a2200:	78fb      	ldrb	r3, [r7, #3]
 80a2202:	f003 020f 	and.w	r2, r3, #15
 80a2206:	6879      	ldr	r1, [r7, #4]
 80a2208:	4613      	mov	r3, r2
 80a220a:	00db      	lsls	r3, r3, #3
 80a220c:	4413      	add	r3, r2
 80a220e:	009b      	lsls	r3, r3, #2
 80a2210:	440b      	add	r3, r1
 80a2212:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80a2216:	681b      	ldr	r3, [r3, #0]
}
 80a2218:	4618      	mov	r0, r3
 80a221a:	370c      	adds	r7, #12
 80a221c:	46bd      	mov	sp, r7
 80a221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a2222:	4770      	bx	lr

080a2224 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80a2224:	b580      	push	{r7, lr}
 80a2226:	b086      	sub	sp, #24
 80a2228:	af00      	add	r7, sp, #0
 80a222a:	60f8      	str	r0, [r7, #12]
 80a222c:	607a      	str	r2, [r7, #4]
 80a222e:	603b      	str	r3, [r7, #0]
 80a2230:	460b      	mov	r3, r1
 80a2232:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80a2234:	7afb      	ldrb	r3, [r7, #11]
 80a2236:	f003 020f 	and.w	r2, r3, #15
 80a223a:	4613      	mov	r3, r2
 80a223c:	00db      	lsls	r3, r3, #3
 80a223e:	4413      	add	r3, r2
 80a2240:	009b      	lsls	r3, r3, #2
 80a2242:	3310      	adds	r3, #16
 80a2244:	68fa      	ldr	r2, [r7, #12]
 80a2246:	4413      	add	r3, r2
 80a2248:	3304      	adds	r3, #4
 80a224a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80a224c:	697b      	ldr	r3, [r7, #20]
 80a224e:	687a      	ldr	r2, [r7, #4]
 80a2250:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80a2252:	697b      	ldr	r3, [r7, #20]
 80a2254:	683a      	ldr	r2, [r7, #0]
 80a2256:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80a2258:	697b      	ldr	r3, [r7, #20]
 80a225a:	2200      	movs	r2, #0
 80a225c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80a225e:	697b      	ldr	r3, [r7, #20]
 80a2260:	2201      	movs	r2, #1
 80a2262:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80a2264:	7afb      	ldrb	r3, [r7, #11]
 80a2266:	f003 030f 	and.w	r3, r3, #15
 80a226a:	b2da      	uxtb	r2, r3
 80a226c:	697b      	ldr	r3, [r7, #20]
 80a226e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80a2270:	68fb      	ldr	r3, [r7, #12]
 80a2272:	799b      	ldrb	r3, [r3, #6]
 80a2274:	2b01      	cmp	r3, #1
 80a2276:	d102      	bne.n	80a227e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80a2278:	687a      	ldr	r2, [r7, #4]
 80a227a:	697b      	ldr	r3, [r7, #20]
 80a227c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80a227e:	68fb      	ldr	r3, [r7, #12]
 80a2280:	6818      	ldr	r0, [r3, #0]
 80a2282:	68fb      	ldr	r3, [r7, #12]
 80a2284:	799b      	ldrb	r3, [r3, #6]
 80a2286:	461a      	mov	r2, r3
 80a2288:	6979      	ldr	r1, [r7, #20]
 80a228a:	f003 fc4f 	bl	80a5b2c <USB_EPStartXfer>

  return HAL_OK;
 80a228e:	2300      	movs	r3, #0
}
 80a2290:	4618      	mov	r0, r3
 80a2292:	3718      	adds	r7, #24
 80a2294:	46bd      	mov	sp, r7
 80a2296:	bd80      	pop	{r7, pc}

080a2298 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80a2298:	b580      	push	{r7, lr}
 80a229a:	b084      	sub	sp, #16
 80a229c:	af00      	add	r7, sp, #0
 80a229e:	6078      	str	r0, [r7, #4]
 80a22a0:	460b      	mov	r3, r1
 80a22a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80a22a4:	78fb      	ldrb	r3, [r7, #3]
 80a22a6:	f003 030f 	and.w	r3, r3, #15
 80a22aa:	687a      	ldr	r2, [r7, #4]
 80a22ac:	7912      	ldrb	r2, [r2, #4]
 80a22ae:	4293      	cmp	r3, r2
 80a22b0:	d901      	bls.n	80a22b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80a22b2:	2301      	movs	r3, #1
 80a22b4:	e04f      	b.n	80a2356 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80a22b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80a22ba:	2b00      	cmp	r3, #0
 80a22bc:	da0f      	bge.n	80a22de <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80a22be:	78fb      	ldrb	r3, [r7, #3]
 80a22c0:	f003 020f 	and.w	r2, r3, #15
 80a22c4:	4613      	mov	r3, r2
 80a22c6:	00db      	lsls	r3, r3, #3
 80a22c8:	4413      	add	r3, r2
 80a22ca:	009b      	lsls	r3, r3, #2
 80a22cc:	3310      	adds	r3, #16
 80a22ce:	687a      	ldr	r2, [r7, #4]
 80a22d0:	4413      	add	r3, r2
 80a22d2:	3304      	adds	r3, #4
 80a22d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80a22d6:	68fb      	ldr	r3, [r7, #12]
 80a22d8:	2201      	movs	r2, #1
 80a22da:	705a      	strb	r2, [r3, #1]
 80a22dc:	e00d      	b.n	80a22fa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80a22de:	78fa      	ldrb	r2, [r7, #3]
 80a22e0:	4613      	mov	r3, r2
 80a22e2:	00db      	lsls	r3, r3, #3
 80a22e4:	4413      	add	r3, r2
 80a22e6:	009b      	lsls	r3, r3, #2
 80a22e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a22ec:	687a      	ldr	r2, [r7, #4]
 80a22ee:	4413      	add	r3, r2
 80a22f0:	3304      	adds	r3, #4
 80a22f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80a22f4:	68fb      	ldr	r3, [r7, #12]
 80a22f6:	2200      	movs	r2, #0
 80a22f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80a22fa:	68fb      	ldr	r3, [r7, #12]
 80a22fc:	2201      	movs	r2, #1
 80a22fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80a2300:	78fb      	ldrb	r3, [r7, #3]
 80a2302:	f003 030f 	and.w	r3, r3, #15
 80a2306:	b2da      	uxtb	r2, r3
 80a2308:	68fb      	ldr	r3, [r7, #12]
 80a230a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80a230c:	687b      	ldr	r3, [r7, #4]
 80a230e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80a2312:	2b01      	cmp	r3, #1
 80a2314:	d101      	bne.n	80a231a <HAL_PCD_EP_SetStall+0x82>
 80a2316:	2302      	movs	r3, #2
 80a2318:	e01d      	b.n	80a2356 <HAL_PCD_EP_SetStall+0xbe>
 80a231a:	687b      	ldr	r3, [r7, #4]
 80a231c:	2201      	movs	r2, #1
 80a231e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80a2322:	687b      	ldr	r3, [r7, #4]
 80a2324:	681b      	ldr	r3, [r3, #0]
 80a2326:	68f9      	ldr	r1, [r7, #12]
 80a2328:	4618      	mov	r0, r3
 80a232a:	f003 ffe3 	bl	80a62f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80a232e:	78fb      	ldrb	r3, [r7, #3]
 80a2330:	f003 030f 	and.w	r3, r3, #15
 80a2334:	2b00      	cmp	r3, #0
 80a2336:	d109      	bne.n	80a234c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80a2338:	687b      	ldr	r3, [r7, #4]
 80a233a:	6818      	ldr	r0, [r3, #0]
 80a233c:	687b      	ldr	r3, [r7, #4]
 80a233e:	7999      	ldrb	r1, [r3, #6]
 80a2340:	687b      	ldr	r3, [r7, #4]
 80a2342:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80a2346:	461a      	mov	r2, r3
 80a2348:	f004 f9d6 	bl	80a66f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80a234c:	687b      	ldr	r3, [r7, #4]
 80a234e:	2200      	movs	r2, #0
 80a2350:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80a2354:	2300      	movs	r3, #0
}
 80a2356:	4618      	mov	r0, r3
 80a2358:	3710      	adds	r7, #16
 80a235a:	46bd      	mov	sp, r7
 80a235c:	bd80      	pop	{r7, pc}

080a235e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80a235e:	b580      	push	{r7, lr}
 80a2360:	b084      	sub	sp, #16
 80a2362:	af00      	add	r7, sp, #0
 80a2364:	6078      	str	r0, [r7, #4]
 80a2366:	460b      	mov	r3, r1
 80a2368:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80a236a:	78fb      	ldrb	r3, [r7, #3]
 80a236c:	f003 030f 	and.w	r3, r3, #15
 80a2370:	687a      	ldr	r2, [r7, #4]
 80a2372:	7912      	ldrb	r2, [r2, #4]
 80a2374:	4293      	cmp	r3, r2
 80a2376:	d901      	bls.n	80a237c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80a2378:	2301      	movs	r3, #1
 80a237a:	e042      	b.n	80a2402 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80a237c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80a2380:	2b00      	cmp	r3, #0
 80a2382:	da0f      	bge.n	80a23a4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80a2384:	78fb      	ldrb	r3, [r7, #3]
 80a2386:	f003 020f 	and.w	r2, r3, #15
 80a238a:	4613      	mov	r3, r2
 80a238c:	00db      	lsls	r3, r3, #3
 80a238e:	4413      	add	r3, r2
 80a2390:	009b      	lsls	r3, r3, #2
 80a2392:	3310      	adds	r3, #16
 80a2394:	687a      	ldr	r2, [r7, #4]
 80a2396:	4413      	add	r3, r2
 80a2398:	3304      	adds	r3, #4
 80a239a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80a239c:	68fb      	ldr	r3, [r7, #12]
 80a239e:	2201      	movs	r2, #1
 80a23a0:	705a      	strb	r2, [r3, #1]
 80a23a2:	e00f      	b.n	80a23c4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80a23a4:	78fb      	ldrb	r3, [r7, #3]
 80a23a6:	f003 020f 	and.w	r2, r3, #15
 80a23aa:	4613      	mov	r3, r2
 80a23ac:	00db      	lsls	r3, r3, #3
 80a23ae:	4413      	add	r3, r2
 80a23b0:	009b      	lsls	r3, r3, #2
 80a23b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a23b6:	687a      	ldr	r2, [r7, #4]
 80a23b8:	4413      	add	r3, r2
 80a23ba:	3304      	adds	r3, #4
 80a23bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80a23be:	68fb      	ldr	r3, [r7, #12]
 80a23c0:	2200      	movs	r2, #0
 80a23c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80a23c4:	68fb      	ldr	r3, [r7, #12]
 80a23c6:	2200      	movs	r2, #0
 80a23c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80a23ca:	78fb      	ldrb	r3, [r7, #3]
 80a23cc:	f003 030f 	and.w	r3, r3, #15
 80a23d0:	b2da      	uxtb	r2, r3
 80a23d2:	68fb      	ldr	r3, [r7, #12]
 80a23d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80a23d6:	687b      	ldr	r3, [r7, #4]
 80a23d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80a23dc:	2b01      	cmp	r3, #1
 80a23de:	d101      	bne.n	80a23e4 <HAL_PCD_EP_ClrStall+0x86>
 80a23e0:	2302      	movs	r3, #2
 80a23e2:	e00e      	b.n	80a2402 <HAL_PCD_EP_ClrStall+0xa4>
 80a23e4:	687b      	ldr	r3, [r7, #4]
 80a23e6:	2201      	movs	r2, #1
 80a23e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80a23ec:	687b      	ldr	r3, [r7, #4]
 80a23ee:	681b      	ldr	r3, [r3, #0]
 80a23f0:	68f9      	ldr	r1, [r7, #12]
 80a23f2:	4618      	mov	r0, r3
 80a23f4:	f003 ffec 	bl	80a63d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80a23f8:	687b      	ldr	r3, [r7, #4]
 80a23fa:	2200      	movs	r2, #0
 80a23fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80a2400:	2300      	movs	r3, #0
}
 80a2402:	4618      	mov	r0, r3
 80a2404:	3710      	adds	r7, #16
 80a2406:	46bd      	mov	sp, r7
 80a2408:	bd80      	pop	{r7, pc}

080a240a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80a240a:	b580      	push	{r7, lr}
 80a240c:	b084      	sub	sp, #16
 80a240e:	af00      	add	r7, sp, #0
 80a2410:	6078      	str	r0, [r7, #4]
 80a2412:	460b      	mov	r3, r1
 80a2414:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80a2416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80a241a:	2b00      	cmp	r3, #0
 80a241c:	da0c      	bge.n	80a2438 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80a241e:	78fb      	ldrb	r3, [r7, #3]
 80a2420:	f003 020f 	and.w	r2, r3, #15
 80a2424:	4613      	mov	r3, r2
 80a2426:	00db      	lsls	r3, r3, #3
 80a2428:	4413      	add	r3, r2
 80a242a:	009b      	lsls	r3, r3, #2
 80a242c:	3310      	adds	r3, #16
 80a242e:	687a      	ldr	r2, [r7, #4]
 80a2430:	4413      	add	r3, r2
 80a2432:	3304      	adds	r3, #4
 80a2434:	60fb      	str	r3, [r7, #12]
 80a2436:	e00c      	b.n	80a2452 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80a2438:	78fb      	ldrb	r3, [r7, #3]
 80a243a:	f003 020f 	and.w	r2, r3, #15
 80a243e:	4613      	mov	r3, r2
 80a2440:	00db      	lsls	r3, r3, #3
 80a2442:	4413      	add	r3, r2
 80a2444:	009b      	lsls	r3, r3, #2
 80a2446:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a244a:	687a      	ldr	r2, [r7, #4]
 80a244c:	4413      	add	r3, r2
 80a244e:	3304      	adds	r3, #4
 80a2450:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80a2452:	687b      	ldr	r3, [r7, #4]
 80a2454:	681b      	ldr	r3, [r3, #0]
 80a2456:	68f9      	ldr	r1, [r7, #12]
 80a2458:	4618      	mov	r0, r3
 80a245a:	f003 fe0b 	bl	80a6074 <USB_EPStopXfer>
 80a245e:	4603      	mov	r3, r0
 80a2460:	72fb      	strb	r3, [r7, #11]

  return ret;
 80a2462:	7afb      	ldrb	r3, [r7, #11]
}
 80a2464:	4618      	mov	r0, r3
 80a2466:	3710      	adds	r7, #16
 80a2468:	46bd      	mov	sp, r7
 80a246a:	bd80      	pop	{r7, pc}

080a246c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80a246c:	b580      	push	{r7, lr}
 80a246e:	b08a      	sub	sp, #40	@ 0x28
 80a2470:	af02      	add	r7, sp, #8
 80a2472:	6078      	str	r0, [r7, #4]
 80a2474:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80a2476:	687b      	ldr	r3, [r7, #4]
 80a2478:	681b      	ldr	r3, [r3, #0]
 80a247a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a247c:	697b      	ldr	r3, [r7, #20]
 80a247e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80a2480:	683a      	ldr	r2, [r7, #0]
 80a2482:	4613      	mov	r3, r2
 80a2484:	00db      	lsls	r3, r3, #3
 80a2486:	4413      	add	r3, r2
 80a2488:	009b      	lsls	r3, r3, #2
 80a248a:	3310      	adds	r3, #16
 80a248c:	687a      	ldr	r2, [r7, #4]
 80a248e:	4413      	add	r3, r2
 80a2490:	3304      	adds	r3, #4
 80a2492:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80a2494:	68fb      	ldr	r3, [r7, #12]
 80a2496:	695a      	ldr	r2, [r3, #20]
 80a2498:	68fb      	ldr	r3, [r7, #12]
 80a249a:	691b      	ldr	r3, [r3, #16]
 80a249c:	429a      	cmp	r2, r3
 80a249e:	d901      	bls.n	80a24a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80a24a0:	2301      	movs	r3, #1
 80a24a2:	e06b      	b.n	80a257c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80a24a4:	68fb      	ldr	r3, [r7, #12]
 80a24a6:	691a      	ldr	r2, [r3, #16]
 80a24a8:	68fb      	ldr	r3, [r7, #12]
 80a24aa:	695b      	ldr	r3, [r3, #20]
 80a24ac:	1ad3      	subs	r3, r2, r3
 80a24ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80a24b0:	68fb      	ldr	r3, [r7, #12]
 80a24b2:	689b      	ldr	r3, [r3, #8]
 80a24b4:	69fa      	ldr	r2, [r7, #28]
 80a24b6:	429a      	cmp	r2, r3
 80a24b8:	d902      	bls.n	80a24c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80a24ba:	68fb      	ldr	r3, [r7, #12]
 80a24bc:	689b      	ldr	r3, [r3, #8]
 80a24be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80a24c0:	69fb      	ldr	r3, [r7, #28]
 80a24c2:	3303      	adds	r3, #3
 80a24c4:	089b      	lsrs	r3, r3, #2
 80a24c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80a24c8:	e02a      	b.n	80a2520 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80a24ca:	68fb      	ldr	r3, [r7, #12]
 80a24cc:	691a      	ldr	r2, [r3, #16]
 80a24ce:	68fb      	ldr	r3, [r7, #12]
 80a24d0:	695b      	ldr	r3, [r3, #20]
 80a24d2:	1ad3      	subs	r3, r2, r3
 80a24d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80a24d6:	68fb      	ldr	r3, [r7, #12]
 80a24d8:	689b      	ldr	r3, [r3, #8]
 80a24da:	69fa      	ldr	r2, [r7, #28]
 80a24dc:	429a      	cmp	r2, r3
 80a24de:	d902      	bls.n	80a24e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80a24e0:	68fb      	ldr	r3, [r7, #12]
 80a24e2:	689b      	ldr	r3, [r3, #8]
 80a24e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80a24e6:	69fb      	ldr	r3, [r7, #28]
 80a24e8:	3303      	adds	r3, #3
 80a24ea:	089b      	lsrs	r3, r3, #2
 80a24ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80a24ee:	68fb      	ldr	r3, [r7, #12]
 80a24f0:	68d9      	ldr	r1, [r3, #12]
 80a24f2:	683b      	ldr	r3, [r7, #0]
 80a24f4:	b2da      	uxtb	r2, r3
 80a24f6:	69fb      	ldr	r3, [r7, #28]
 80a24f8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80a24fa:	687b      	ldr	r3, [r7, #4]
 80a24fc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80a24fe:	9300      	str	r3, [sp, #0]
 80a2500:	4603      	mov	r3, r0
 80a2502:	6978      	ldr	r0, [r7, #20]
 80a2504:	f003 fe60 	bl	80a61c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80a2508:	68fb      	ldr	r3, [r7, #12]
 80a250a:	68da      	ldr	r2, [r3, #12]
 80a250c:	69fb      	ldr	r3, [r7, #28]
 80a250e:	441a      	add	r2, r3
 80a2510:	68fb      	ldr	r3, [r7, #12]
 80a2512:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80a2514:	68fb      	ldr	r3, [r7, #12]
 80a2516:	695a      	ldr	r2, [r3, #20]
 80a2518:	69fb      	ldr	r3, [r7, #28]
 80a251a:	441a      	add	r2, r3
 80a251c:	68fb      	ldr	r3, [r7, #12]
 80a251e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80a2520:	683b      	ldr	r3, [r7, #0]
 80a2522:	015a      	lsls	r2, r3, #5
 80a2524:	693b      	ldr	r3, [r7, #16]
 80a2526:	4413      	add	r3, r2
 80a2528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a252c:	699b      	ldr	r3, [r3, #24]
 80a252e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80a2530:	69ba      	ldr	r2, [r7, #24]
 80a2532:	429a      	cmp	r2, r3
 80a2534:	d809      	bhi.n	80a254a <PCD_WriteEmptyTxFifo+0xde>
 80a2536:	68fb      	ldr	r3, [r7, #12]
 80a2538:	695a      	ldr	r2, [r3, #20]
 80a253a:	68fb      	ldr	r3, [r7, #12]
 80a253c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80a253e:	429a      	cmp	r2, r3
 80a2540:	d203      	bcs.n	80a254a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80a2542:	68fb      	ldr	r3, [r7, #12]
 80a2544:	691b      	ldr	r3, [r3, #16]
 80a2546:	2b00      	cmp	r3, #0
 80a2548:	d1bf      	bne.n	80a24ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80a254a:	68fb      	ldr	r3, [r7, #12]
 80a254c:	691a      	ldr	r2, [r3, #16]
 80a254e:	68fb      	ldr	r3, [r7, #12]
 80a2550:	695b      	ldr	r3, [r3, #20]
 80a2552:	429a      	cmp	r2, r3
 80a2554:	d811      	bhi.n	80a257a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80a2556:	683b      	ldr	r3, [r7, #0]
 80a2558:	f003 030f 	and.w	r3, r3, #15
 80a255c:	2201      	movs	r2, #1
 80a255e:	fa02 f303 	lsl.w	r3, r2, r3
 80a2562:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80a2564:	693b      	ldr	r3, [r7, #16]
 80a2566:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a256a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80a256c:	68bb      	ldr	r3, [r7, #8]
 80a256e:	43db      	mvns	r3, r3
 80a2570:	6939      	ldr	r1, [r7, #16]
 80a2572:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a2576:	4013      	ands	r3, r2
 80a2578:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80a257a:	2300      	movs	r3, #0
}
 80a257c:	4618      	mov	r0, r3
 80a257e:	3720      	adds	r7, #32
 80a2580:	46bd      	mov	sp, r7
 80a2582:	bd80      	pop	{r7, pc}

080a2584 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80a2584:	b580      	push	{r7, lr}
 80a2586:	b088      	sub	sp, #32
 80a2588:	af00      	add	r7, sp, #0
 80a258a:	6078      	str	r0, [r7, #4]
 80a258c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80a258e:	687b      	ldr	r3, [r7, #4]
 80a2590:	681b      	ldr	r3, [r3, #0]
 80a2592:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a2594:	69fb      	ldr	r3, [r7, #28]
 80a2596:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80a2598:	69fb      	ldr	r3, [r7, #28]
 80a259a:	333c      	adds	r3, #60	@ 0x3c
 80a259c:	3304      	adds	r3, #4
 80a259e:	681b      	ldr	r3, [r3, #0]
 80a25a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80a25a2:	683b      	ldr	r3, [r7, #0]
 80a25a4:	015a      	lsls	r2, r3, #5
 80a25a6:	69bb      	ldr	r3, [r7, #24]
 80a25a8:	4413      	add	r3, r2
 80a25aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a25ae:	689b      	ldr	r3, [r3, #8]
 80a25b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80a25b2:	687b      	ldr	r3, [r7, #4]
 80a25b4:	799b      	ldrb	r3, [r3, #6]
 80a25b6:	2b01      	cmp	r3, #1
 80a25b8:	d17b      	bne.n	80a26b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80a25ba:	693b      	ldr	r3, [r7, #16]
 80a25bc:	f003 0308 	and.w	r3, r3, #8
 80a25c0:	2b00      	cmp	r3, #0
 80a25c2:	d015      	beq.n	80a25f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80a25c4:	697b      	ldr	r3, [r7, #20]
 80a25c6:	4a61      	ldr	r2, [pc, #388]	@ (80a274c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80a25c8:	4293      	cmp	r3, r2
 80a25ca:	f240 80b9 	bls.w	80a2740 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80a25ce:	693b      	ldr	r3, [r7, #16]
 80a25d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80a25d4:	2b00      	cmp	r3, #0
 80a25d6:	f000 80b3 	beq.w	80a2740 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80a25da:	683b      	ldr	r3, [r7, #0]
 80a25dc:	015a      	lsls	r2, r3, #5
 80a25de:	69bb      	ldr	r3, [r7, #24]
 80a25e0:	4413      	add	r3, r2
 80a25e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a25e6:	461a      	mov	r2, r3
 80a25e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80a25ec:	6093      	str	r3, [r2, #8]
 80a25ee:	e0a7      	b.n	80a2740 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80a25f0:	693b      	ldr	r3, [r7, #16]
 80a25f2:	f003 0320 	and.w	r3, r3, #32
 80a25f6:	2b00      	cmp	r3, #0
 80a25f8:	d009      	beq.n	80a260e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80a25fa:	683b      	ldr	r3, [r7, #0]
 80a25fc:	015a      	lsls	r2, r3, #5
 80a25fe:	69bb      	ldr	r3, [r7, #24]
 80a2600:	4413      	add	r3, r2
 80a2602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a2606:	461a      	mov	r2, r3
 80a2608:	2320      	movs	r3, #32
 80a260a:	6093      	str	r3, [r2, #8]
 80a260c:	e098      	b.n	80a2740 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80a260e:	693b      	ldr	r3, [r7, #16]
 80a2610:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80a2614:	2b00      	cmp	r3, #0
 80a2616:	f040 8093 	bne.w	80a2740 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80a261a:	697b      	ldr	r3, [r7, #20]
 80a261c:	4a4b      	ldr	r2, [pc, #300]	@ (80a274c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80a261e:	4293      	cmp	r3, r2
 80a2620:	d90f      	bls.n	80a2642 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80a2622:	693b      	ldr	r3, [r7, #16]
 80a2624:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80a2628:	2b00      	cmp	r3, #0
 80a262a:	d00a      	beq.n	80a2642 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80a262c:	683b      	ldr	r3, [r7, #0]
 80a262e:	015a      	lsls	r2, r3, #5
 80a2630:	69bb      	ldr	r3, [r7, #24]
 80a2632:	4413      	add	r3, r2
 80a2634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a2638:	461a      	mov	r2, r3
 80a263a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80a263e:	6093      	str	r3, [r2, #8]
 80a2640:	e07e      	b.n	80a2740 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80a2642:	683a      	ldr	r2, [r7, #0]
 80a2644:	4613      	mov	r3, r2
 80a2646:	00db      	lsls	r3, r3, #3
 80a2648:	4413      	add	r3, r2
 80a264a:	009b      	lsls	r3, r3, #2
 80a264c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80a2650:	687a      	ldr	r2, [r7, #4]
 80a2652:	4413      	add	r3, r2
 80a2654:	3304      	adds	r3, #4
 80a2656:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80a2658:	68fb      	ldr	r3, [r7, #12]
 80a265a:	6a1a      	ldr	r2, [r3, #32]
 80a265c:	683b      	ldr	r3, [r7, #0]
 80a265e:	0159      	lsls	r1, r3, #5
 80a2660:	69bb      	ldr	r3, [r7, #24]
 80a2662:	440b      	add	r3, r1
 80a2664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a2668:	691b      	ldr	r3, [r3, #16]
 80a266a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80a266e:	1ad2      	subs	r2, r2, r3
 80a2670:	68fb      	ldr	r3, [r7, #12]
 80a2672:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80a2674:	683b      	ldr	r3, [r7, #0]
 80a2676:	2b00      	cmp	r3, #0
 80a2678:	d114      	bne.n	80a26a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80a267a:	68fb      	ldr	r3, [r7, #12]
 80a267c:	691b      	ldr	r3, [r3, #16]
 80a267e:	2b00      	cmp	r3, #0
 80a2680:	d109      	bne.n	80a2696 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80a2682:	687b      	ldr	r3, [r7, #4]
 80a2684:	6818      	ldr	r0, [r3, #0]
 80a2686:	687b      	ldr	r3, [r7, #4]
 80a2688:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80a268c:	461a      	mov	r2, r3
 80a268e:	2101      	movs	r1, #1
 80a2690:	f004 f832 	bl	80a66f8 <USB_EP0_OutStart>
 80a2694:	e006      	b.n	80a26a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80a2696:	68fb      	ldr	r3, [r7, #12]
 80a2698:	68da      	ldr	r2, [r3, #12]
 80a269a:	68fb      	ldr	r3, [r7, #12]
 80a269c:	695b      	ldr	r3, [r3, #20]
 80a269e:	441a      	add	r2, r3
 80a26a0:	68fb      	ldr	r3, [r7, #12]
 80a26a2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80a26a4:	683b      	ldr	r3, [r7, #0]
 80a26a6:	b2db      	uxtb	r3, r3
 80a26a8:	4619      	mov	r1, r3
 80a26aa:	6878      	ldr	r0, [r7, #4]
 80a26ac:	f006 fb8a 	bl	80a8dc4 <HAL_PCD_DataOutStageCallback>
 80a26b0:	e046      	b.n	80a2740 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80a26b2:	697b      	ldr	r3, [r7, #20]
 80a26b4:	4a26      	ldr	r2, [pc, #152]	@ (80a2750 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80a26b6:	4293      	cmp	r3, r2
 80a26b8:	d124      	bne.n	80a2704 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80a26ba:	693b      	ldr	r3, [r7, #16]
 80a26bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80a26c0:	2b00      	cmp	r3, #0
 80a26c2:	d00a      	beq.n	80a26da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80a26c4:	683b      	ldr	r3, [r7, #0]
 80a26c6:	015a      	lsls	r2, r3, #5
 80a26c8:	69bb      	ldr	r3, [r7, #24]
 80a26ca:	4413      	add	r3, r2
 80a26cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a26d0:	461a      	mov	r2, r3
 80a26d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80a26d6:	6093      	str	r3, [r2, #8]
 80a26d8:	e032      	b.n	80a2740 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80a26da:	693b      	ldr	r3, [r7, #16]
 80a26dc:	f003 0320 	and.w	r3, r3, #32
 80a26e0:	2b00      	cmp	r3, #0
 80a26e2:	d008      	beq.n	80a26f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80a26e4:	683b      	ldr	r3, [r7, #0]
 80a26e6:	015a      	lsls	r2, r3, #5
 80a26e8:	69bb      	ldr	r3, [r7, #24]
 80a26ea:	4413      	add	r3, r2
 80a26ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a26f0:	461a      	mov	r2, r3
 80a26f2:	2320      	movs	r3, #32
 80a26f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80a26f6:	683b      	ldr	r3, [r7, #0]
 80a26f8:	b2db      	uxtb	r3, r3
 80a26fa:	4619      	mov	r1, r3
 80a26fc:	6878      	ldr	r0, [r7, #4]
 80a26fe:	f006 fb61 	bl	80a8dc4 <HAL_PCD_DataOutStageCallback>
 80a2702:	e01d      	b.n	80a2740 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80a2704:	683b      	ldr	r3, [r7, #0]
 80a2706:	2b00      	cmp	r3, #0
 80a2708:	d114      	bne.n	80a2734 <PCD_EP_OutXfrComplete_int+0x1b0>
 80a270a:	6879      	ldr	r1, [r7, #4]
 80a270c:	683a      	ldr	r2, [r7, #0]
 80a270e:	4613      	mov	r3, r2
 80a2710:	00db      	lsls	r3, r3, #3
 80a2712:	4413      	add	r3, r2
 80a2714:	009b      	lsls	r3, r3, #2
 80a2716:	440b      	add	r3, r1
 80a2718:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80a271c:	681b      	ldr	r3, [r3, #0]
 80a271e:	2b00      	cmp	r3, #0
 80a2720:	d108      	bne.n	80a2734 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80a2722:	687b      	ldr	r3, [r7, #4]
 80a2724:	6818      	ldr	r0, [r3, #0]
 80a2726:	687b      	ldr	r3, [r7, #4]
 80a2728:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80a272c:	461a      	mov	r2, r3
 80a272e:	2100      	movs	r1, #0
 80a2730:	f003 ffe2 	bl	80a66f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80a2734:	683b      	ldr	r3, [r7, #0]
 80a2736:	b2db      	uxtb	r3, r3
 80a2738:	4619      	mov	r1, r3
 80a273a:	6878      	ldr	r0, [r7, #4]
 80a273c:	f006 fb42 	bl	80a8dc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80a2740:	2300      	movs	r3, #0
}
 80a2742:	4618      	mov	r0, r3
 80a2744:	3720      	adds	r7, #32
 80a2746:	46bd      	mov	sp, r7
 80a2748:	bd80      	pop	{r7, pc}
 80a274a:	bf00      	nop
 80a274c:	4f54300a 	.word	0x4f54300a
 80a2750:	4f54310a 	.word	0x4f54310a

080a2754 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80a2754:	b580      	push	{r7, lr}
 80a2756:	b086      	sub	sp, #24
 80a2758:	af00      	add	r7, sp, #0
 80a275a:	6078      	str	r0, [r7, #4]
 80a275c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80a275e:	687b      	ldr	r3, [r7, #4]
 80a2760:	681b      	ldr	r3, [r3, #0]
 80a2762:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a2764:	697b      	ldr	r3, [r7, #20]
 80a2766:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80a2768:	697b      	ldr	r3, [r7, #20]
 80a276a:	333c      	adds	r3, #60	@ 0x3c
 80a276c:	3304      	adds	r3, #4
 80a276e:	681b      	ldr	r3, [r3, #0]
 80a2770:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80a2772:	683b      	ldr	r3, [r7, #0]
 80a2774:	015a      	lsls	r2, r3, #5
 80a2776:	693b      	ldr	r3, [r7, #16]
 80a2778:	4413      	add	r3, r2
 80a277a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a277e:	689b      	ldr	r3, [r3, #8]
 80a2780:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80a2782:	68fb      	ldr	r3, [r7, #12]
 80a2784:	4a15      	ldr	r2, [pc, #84]	@ (80a27dc <PCD_EP_OutSetupPacket_int+0x88>)
 80a2786:	4293      	cmp	r3, r2
 80a2788:	d90e      	bls.n	80a27a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80a278a:	68bb      	ldr	r3, [r7, #8]
 80a278c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80a2790:	2b00      	cmp	r3, #0
 80a2792:	d009      	beq.n	80a27a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80a2794:	683b      	ldr	r3, [r7, #0]
 80a2796:	015a      	lsls	r2, r3, #5
 80a2798:	693b      	ldr	r3, [r7, #16]
 80a279a:	4413      	add	r3, r2
 80a279c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a27a0:	461a      	mov	r2, r3
 80a27a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80a27a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80a27a8:	6878      	ldr	r0, [r7, #4]
 80a27aa:	f006 faf9 	bl	80a8da0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80a27ae:	68fb      	ldr	r3, [r7, #12]
 80a27b0:	4a0a      	ldr	r2, [pc, #40]	@ (80a27dc <PCD_EP_OutSetupPacket_int+0x88>)
 80a27b2:	4293      	cmp	r3, r2
 80a27b4:	d90c      	bls.n	80a27d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80a27b6:	687b      	ldr	r3, [r7, #4]
 80a27b8:	799b      	ldrb	r3, [r3, #6]
 80a27ba:	2b01      	cmp	r3, #1
 80a27bc:	d108      	bne.n	80a27d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80a27be:	687b      	ldr	r3, [r7, #4]
 80a27c0:	6818      	ldr	r0, [r3, #0]
 80a27c2:	687b      	ldr	r3, [r7, #4]
 80a27c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80a27c8:	461a      	mov	r2, r3
 80a27ca:	2101      	movs	r1, #1
 80a27cc:	f003 ff94 	bl	80a66f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80a27d0:	2300      	movs	r3, #0
}
 80a27d2:	4618      	mov	r0, r3
 80a27d4:	3718      	adds	r7, #24
 80a27d6:	46bd      	mov	sp, r7
 80a27d8:	bd80      	pop	{r7, pc}
 80a27da:	bf00      	nop
 80a27dc:	4f54300a 	.word	0x4f54300a

080a27e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80a27e0:	b480      	push	{r7}
 80a27e2:	b085      	sub	sp, #20
 80a27e4:	af00      	add	r7, sp, #0
 80a27e6:	6078      	str	r0, [r7, #4]
 80a27e8:	460b      	mov	r3, r1
 80a27ea:	70fb      	strb	r3, [r7, #3]
 80a27ec:	4613      	mov	r3, r2
 80a27ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80a27f0:	687b      	ldr	r3, [r7, #4]
 80a27f2:	681b      	ldr	r3, [r3, #0]
 80a27f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80a27f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80a27f8:	78fb      	ldrb	r3, [r7, #3]
 80a27fa:	2b00      	cmp	r3, #0
 80a27fc:	d107      	bne.n	80a280e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80a27fe:	883b      	ldrh	r3, [r7, #0]
 80a2800:	0419      	lsls	r1, r3, #16
 80a2802:	687b      	ldr	r3, [r7, #4]
 80a2804:	681b      	ldr	r3, [r3, #0]
 80a2806:	68ba      	ldr	r2, [r7, #8]
 80a2808:	430a      	orrs	r2, r1
 80a280a:	629a      	str	r2, [r3, #40]	@ 0x28
 80a280c:	e028      	b.n	80a2860 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80a280e:	687b      	ldr	r3, [r7, #4]
 80a2810:	681b      	ldr	r3, [r3, #0]
 80a2812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a2814:	0c1b      	lsrs	r3, r3, #16
 80a2816:	68ba      	ldr	r2, [r7, #8]
 80a2818:	4413      	add	r3, r2
 80a281a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80a281c:	2300      	movs	r3, #0
 80a281e:	73fb      	strb	r3, [r7, #15]
 80a2820:	e00d      	b.n	80a283e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80a2822:	687b      	ldr	r3, [r7, #4]
 80a2824:	681a      	ldr	r2, [r3, #0]
 80a2826:	7bfb      	ldrb	r3, [r7, #15]
 80a2828:	3340      	adds	r3, #64	@ 0x40
 80a282a:	009b      	lsls	r3, r3, #2
 80a282c:	4413      	add	r3, r2
 80a282e:	685b      	ldr	r3, [r3, #4]
 80a2830:	0c1b      	lsrs	r3, r3, #16
 80a2832:	68ba      	ldr	r2, [r7, #8]
 80a2834:	4413      	add	r3, r2
 80a2836:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80a2838:	7bfb      	ldrb	r3, [r7, #15]
 80a283a:	3301      	adds	r3, #1
 80a283c:	73fb      	strb	r3, [r7, #15]
 80a283e:	7bfa      	ldrb	r2, [r7, #15]
 80a2840:	78fb      	ldrb	r3, [r7, #3]
 80a2842:	3b01      	subs	r3, #1
 80a2844:	429a      	cmp	r2, r3
 80a2846:	d3ec      	bcc.n	80a2822 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80a2848:	883b      	ldrh	r3, [r7, #0]
 80a284a:	0418      	lsls	r0, r3, #16
 80a284c:	687b      	ldr	r3, [r7, #4]
 80a284e:	6819      	ldr	r1, [r3, #0]
 80a2850:	78fb      	ldrb	r3, [r7, #3]
 80a2852:	3b01      	subs	r3, #1
 80a2854:	68ba      	ldr	r2, [r7, #8]
 80a2856:	4302      	orrs	r2, r0
 80a2858:	3340      	adds	r3, #64	@ 0x40
 80a285a:	009b      	lsls	r3, r3, #2
 80a285c:	440b      	add	r3, r1
 80a285e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80a2860:	2300      	movs	r3, #0
}
 80a2862:	4618      	mov	r0, r3
 80a2864:	3714      	adds	r7, #20
 80a2866:	46bd      	mov	sp, r7
 80a2868:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a286c:	4770      	bx	lr

080a286e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80a286e:	b480      	push	{r7}
 80a2870:	b083      	sub	sp, #12
 80a2872:	af00      	add	r7, sp, #0
 80a2874:	6078      	str	r0, [r7, #4]
 80a2876:	460b      	mov	r3, r1
 80a2878:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80a287a:	687b      	ldr	r3, [r7, #4]
 80a287c:	681b      	ldr	r3, [r3, #0]
 80a287e:	887a      	ldrh	r2, [r7, #2]
 80a2880:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80a2882:	2300      	movs	r3, #0
}
 80a2884:	4618      	mov	r0, r3
 80a2886:	370c      	adds	r7, #12
 80a2888:	46bd      	mov	sp, r7
 80a288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a288e:	4770      	bx	lr

080a2890 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80a2890:	b480      	push	{r7}
 80a2892:	b085      	sub	sp, #20
 80a2894:	af00      	add	r7, sp, #0
 80a2896:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80a2898:	687b      	ldr	r3, [r7, #4]
 80a289a:	681b      	ldr	r3, [r3, #0]
 80a289c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80a289e:	687b      	ldr	r3, [r7, #4]
 80a28a0:	2201      	movs	r2, #1
 80a28a2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80a28a6:	687b      	ldr	r3, [r7, #4]
 80a28a8:	2200      	movs	r2, #0
 80a28aa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80a28ae:	68fb      	ldr	r3, [r7, #12]
 80a28b0:	699b      	ldr	r3, [r3, #24]
 80a28b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80a28b6:	68fb      	ldr	r3, [r7, #12]
 80a28b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80a28ba:	68fb      	ldr	r3, [r7, #12]
 80a28bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80a28be:	4b05      	ldr	r3, [pc, #20]	@ (80a28d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80a28c0:	4313      	orrs	r3, r2
 80a28c2:	68fa      	ldr	r2, [r7, #12]
 80a28c4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80a28c6:	2300      	movs	r3, #0
}
 80a28c8:	4618      	mov	r0, r3
 80a28ca:	3714      	adds	r7, #20
 80a28cc:	46bd      	mov	sp, r7
 80a28ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a28d2:	4770      	bx	lr
 80a28d4:	10000003 	.word	0x10000003

080a28d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80a28d8:	b480      	push	{r7}
 80a28da:	b083      	sub	sp, #12
 80a28dc:	af00      	add	r7, sp, #0
 80a28de:	6078      	str	r0, [r7, #4]
 80a28e0:	460b      	mov	r3, r1
 80a28e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80a28e4:	bf00      	nop
 80a28e6:	370c      	adds	r7, #12
 80a28e8:	46bd      	mov	sp, r7
 80a28ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a28ee:	4770      	bx	lr

080a28f0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80a28f0:	b580      	push	{r7, lr}
 80a28f2:	b084      	sub	sp, #16
 80a28f4:	af00      	add	r7, sp, #0
 80a28f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80a28f8:	4b29      	ldr	r3, [pc, #164]	@ (80a29a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80a28fa:	68db      	ldr	r3, [r3, #12]
 80a28fc:	f003 0307 	and.w	r3, r3, #7
 80a2900:	2b06      	cmp	r3, #6
 80a2902:	d00a      	beq.n	80a291a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80a2904:	4b26      	ldr	r3, [pc, #152]	@ (80a29a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80a2906:	68db      	ldr	r3, [r3, #12]
 80a2908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80a290c:	687a      	ldr	r2, [r7, #4]
 80a290e:	429a      	cmp	r2, r3
 80a2910:	d001      	beq.n	80a2916 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80a2912:	2301      	movs	r3, #1
 80a2914:	e040      	b.n	80a2998 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80a2916:	2300      	movs	r3, #0
 80a2918:	e03e      	b.n	80a2998 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80a291a:	4b21      	ldr	r3, [pc, #132]	@ (80a29a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80a291c:	68db      	ldr	r3, [r3, #12]
 80a291e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80a2922:	491f      	ldr	r1, [pc, #124]	@ (80a29a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80a2924:	687b      	ldr	r3, [r7, #4]
 80a2926:	4313      	orrs	r3, r2
 80a2928:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80a292a:	f7fe f9c9 	bl	80a0cc0 <HAL_GetTick>
 80a292e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80a2930:	e009      	b.n	80a2946 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80a2932:	f7fe f9c5 	bl	80a0cc0 <HAL_GetTick>
 80a2936:	4602      	mov	r2, r0
 80a2938:	68fb      	ldr	r3, [r7, #12]
 80a293a:	1ad3      	subs	r3, r2, r3
 80a293c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80a2940:	d901      	bls.n	80a2946 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80a2942:	2301      	movs	r3, #1
 80a2944:	e028      	b.n	80a2998 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80a2946:	4b16      	ldr	r3, [pc, #88]	@ (80a29a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80a2948:	685b      	ldr	r3, [r3, #4]
 80a294a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80a294e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80a2952:	d1ee      	bne.n	80a2932 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80a2954:	687b      	ldr	r3, [r7, #4]
 80a2956:	2b1e      	cmp	r3, #30
 80a2958:	d008      	beq.n	80a296c <HAL_PWREx_ConfigSupply+0x7c>
 80a295a:	687b      	ldr	r3, [r7, #4]
 80a295c:	2b2e      	cmp	r3, #46	@ 0x2e
 80a295e:	d005      	beq.n	80a296c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80a2960:	687b      	ldr	r3, [r7, #4]
 80a2962:	2b1d      	cmp	r3, #29
 80a2964:	d002      	beq.n	80a296c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80a2966:	687b      	ldr	r3, [r7, #4]
 80a2968:	2b2d      	cmp	r3, #45	@ 0x2d
 80a296a:	d114      	bne.n	80a2996 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80a296c:	f7fe f9a8 	bl	80a0cc0 <HAL_GetTick>
 80a2970:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80a2972:	e009      	b.n	80a2988 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80a2974:	f7fe f9a4 	bl	80a0cc0 <HAL_GetTick>
 80a2978:	4602      	mov	r2, r0
 80a297a:	68fb      	ldr	r3, [r7, #12]
 80a297c:	1ad3      	subs	r3, r2, r3
 80a297e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80a2982:	d901      	bls.n	80a2988 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80a2984:	2301      	movs	r3, #1
 80a2986:	e007      	b.n	80a2998 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80a2988:	4b05      	ldr	r3, [pc, #20]	@ (80a29a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80a298a:	68db      	ldr	r3, [r3, #12]
 80a298c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80a2990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80a2994:	d1ee      	bne.n	80a2974 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80a2996:	2300      	movs	r3, #0
}
 80a2998:	4618      	mov	r0, r3
 80a299a:	3710      	adds	r7, #16
 80a299c:	46bd      	mov	sp, r7
 80a299e:	bd80      	pop	{r7, pc}
 80a29a0:	58024800 	.word	0x58024800

080a29a4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80a29a4:	b480      	push	{r7}
 80a29a6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80a29a8:	4b05      	ldr	r3, [pc, #20]	@ (80a29c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80a29aa:	68db      	ldr	r3, [r3, #12]
 80a29ac:	4a04      	ldr	r2, [pc, #16]	@ (80a29c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80a29ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80a29b2:	60d3      	str	r3, [r2, #12]
}
 80a29b4:	bf00      	nop
 80a29b6:	46bd      	mov	sp, r7
 80a29b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a29bc:	4770      	bx	lr
 80a29be:	bf00      	nop
 80a29c0:	58024800 	.word	0x58024800

080a29c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80a29c4:	b580      	push	{r7, lr}
 80a29c6:	b08c      	sub	sp, #48	@ 0x30
 80a29c8:	af00      	add	r7, sp, #0
 80a29ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80a29cc:	687b      	ldr	r3, [r7, #4]
 80a29ce:	2b00      	cmp	r3, #0
 80a29d0:	d102      	bne.n	80a29d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80a29d2:	2301      	movs	r3, #1
 80a29d4:	f000 bc48 	b.w	80a3268 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80a29d8:	687b      	ldr	r3, [r7, #4]
 80a29da:	681b      	ldr	r3, [r3, #0]
 80a29dc:	f003 0301 	and.w	r3, r3, #1
 80a29e0:	2b00      	cmp	r3, #0
 80a29e2:	f000 8088 	beq.w	80a2af6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80a29e6:	4b99      	ldr	r3, [pc, #612]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a29e8:	691b      	ldr	r3, [r3, #16]
 80a29ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80a29ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80a29f0:	4b96      	ldr	r3, [pc, #600]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a29f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a29f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80a29f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a29f8:	2b10      	cmp	r3, #16
 80a29fa:	d007      	beq.n	80a2a0c <HAL_RCC_OscConfig+0x48>
 80a29fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80a29fe:	2b18      	cmp	r3, #24
 80a2a00:	d111      	bne.n	80a2a26 <HAL_RCC_OscConfig+0x62>
 80a2a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80a2a04:	f003 0303 	and.w	r3, r3, #3
 80a2a08:	2b02      	cmp	r3, #2
 80a2a0a:	d10c      	bne.n	80a2a26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80a2a0c:	4b8f      	ldr	r3, [pc, #572]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2a0e:	681b      	ldr	r3, [r3, #0]
 80a2a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80a2a14:	2b00      	cmp	r3, #0
 80a2a16:	d06d      	beq.n	80a2af4 <HAL_RCC_OscConfig+0x130>
 80a2a18:	687b      	ldr	r3, [r7, #4]
 80a2a1a:	685b      	ldr	r3, [r3, #4]
 80a2a1c:	2b00      	cmp	r3, #0
 80a2a1e:	d169      	bne.n	80a2af4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80a2a20:	2301      	movs	r3, #1
 80a2a22:	f000 bc21 	b.w	80a3268 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80a2a26:	687b      	ldr	r3, [r7, #4]
 80a2a28:	685b      	ldr	r3, [r3, #4]
 80a2a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80a2a2e:	d106      	bne.n	80a2a3e <HAL_RCC_OscConfig+0x7a>
 80a2a30:	4b86      	ldr	r3, [pc, #536]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2a32:	681b      	ldr	r3, [r3, #0]
 80a2a34:	4a85      	ldr	r2, [pc, #532]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80a2a3a:	6013      	str	r3, [r2, #0]
 80a2a3c:	e02e      	b.n	80a2a9c <HAL_RCC_OscConfig+0xd8>
 80a2a3e:	687b      	ldr	r3, [r7, #4]
 80a2a40:	685b      	ldr	r3, [r3, #4]
 80a2a42:	2b00      	cmp	r3, #0
 80a2a44:	d10c      	bne.n	80a2a60 <HAL_RCC_OscConfig+0x9c>
 80a2a46:	4b81      	ldr	r3, [pc, #516]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2a48:	681b      	ldr	r3, [r3, #0]
 80a2a4a:	4a80      	ldr	r2, [pc, #512]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2a4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80a2a50:	6013      	str	r3, [r2, #0]
 80a2a52:	4b7e      	ldr	r3, [pc, #504]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2a54:	681b      	ldr	r3, [r3, #0]
 80a2a56:	4a7d      	ldr	r2, [pc, #500]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2a58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80a2a5c:	6013      	str	r3, [r2, #0]
 80a2a5e:	e01d      	b.n	80a2a9c <HAL_RCC_OscConfig+0xd8>
 80a2a60:	687b      	ldr	r3, [r7, #4]
 80a2a62:	685b      	ldr	r3, [r3, #4]
 80a2a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80a2a68:	d10c      	bne.n	80a2a84 <HAL_RCC_OscConfig+0xc0>
 80a2a6a:	4b78      	ldr	r3, [pc, #480]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2a6c:	681b      	ldr	r3, [r3, #0]
 80a2a6e:	4a77      	ldr	r2, [pc, #476]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80a2a74:	6013      	str	r3, [r2, #0]
 80a2a76:	4b75      	ldr	r3, [pc, #468]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2a78:	681b      	ldr	r3, [r3, #0]
 80a2a7a:	4a74      	ldr	r2, [pc, #464]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80a2a80:	6013      	str	r3, [r2, #0]
 80a2a82:	e00b      	b.n	80a2a9c <HAL_RCC_OscConfig+0xd8>
 80a2a84:	4b71      	ldr	r3, [pc, #452]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2a86:	681b      	ldr	r3, [r3, #0]
 80a2a88:	4a70      	ldr	r2, [pc, #448]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80a2a8e:	6013      	str	r3, [r2, #0]
 80a2a90:	4b6e      	ldr	r3, [pc, #440]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2a92:	681b      	ldr	r3, [r3, #0]
 80a2a94:	4a6d      	ldr	r2, [pc, #436]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80a2a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80a2a9c:	687b      	ldr	r3, [r7, #4]
 80a2a9e:	685b      	ldr	r3, [r3, #4]
 80a2aa0:	2b00      	cmp	r3, #0
 80a2aa2:	d013      	beq.n	80a2acc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a2aa4:	f7fe f90c 	bl	80a0cc0 <HAL_GetTick>
 80a2aa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80a2aaa:	e008      	b.n	80a2abe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80a2aac:	f7fe f908 	bl	80a0cc0 <HAL_GetTick>
 80a2ab0:	4602      	mov	r2, r0
 80a2ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2ab4:	1ad3      	subs	r3, r2, r3
 80a2ab6:	2b64      	cmp	r3, #100	@ 0x64
 80a2ab8:	d901      	bls.n	80a2abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80a2aba:	2303      	movs	r3, #3
 80a2abc:	e3d4      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80a2abe:	4b63      	ldr	r3, [pc, #396]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2ac0:	681b      	ldr	r3, [r3, #0]
 80a2ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80a2ac6:	2b00      	cmp	r3, #0
 80a2ac8:	d0f0      	beq.n	80a2aac <HAL_RCC_OscConfig+0xe8>
 80a2aca:	e014      	b.n	80a2af6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a2acc:	f7fe f8f8 	bl	80a0cc0 <HAL_GetTick>
 80a2ad0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80a2ad2:	e008      	b.n	80a2ae6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80a2ad4:	f7fe f8f4 	bl	80a0cc0 <HAL_GetTick>
 80a2ad8:	4602      	mov	r2, r0
 80a2ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2adc:	1ad3      	subs	r3, r2, r3
 80a2ade:	2b64      	cmp	r3, #100	@ 0x64
 80a2ae0:	d901      	bls.n	80a2ae6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80a2ae2:	2303      	movs	r3, #3
 80a2ae4:	e3c0      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80a2ae6:	4b59      	ldr	r3, [pc, #356]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2ae8:	681b      	ldr	r3, [r3, #0]
 80a2aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80a2aee:	2b00      	cmp	r3, #0
 80a2af0:	d1f0      	bne.n	80a2ad4 <HAL_RCC_OscConfig+0x110>
 80a2af2:	e000      	b.n	80a2af6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80a2af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80a2af6:	687b      	ldr	r3, [r7, #4]
 80a2af8:	681b      	ldr	r3, [r3, #0]
 80a2afa:	f003 0302 	and.w	r3, r3, #2
 80a2afe:	2b00      	cmp	r3, #0
 80a2b00:	f000 80ca 	beq.w	80a2c98 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80a2b04:	4b51      	ldr	r3, [pc, #324]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2b06:	691b      	ldr	r3, [r3, #16]
 80a2b08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80a2b0c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80a2b0e:	4b4f      	ldr	r3, [pc, #316]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a2b12:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80a2b14:	6a3b      	ldr	r3, [r7, #32]
 80a2b16:	2b00      	cmp	r3, #0
 80a2b18:	d007      	beq.n	80a2b2a <HAL_RCC_OscConfig+0x166>
 80a2b1a:	6a3b      	ldr	r3, [r7, #32]
 80a2b1c:	2b18      	cmp	r3, #24
 80a2b1e:	d156      	bne.n	80a2bce <HAL_RCC_OscConfig+0x20a>
 80a2b20:	69fb      	ldr	r3, [r7, #28]
 80a2b22:	f003 0303 	and.w	r3, r3, #3
 80a2b26:	2b00      	cmp	r3, #0
 80a2b28:	d151      	bne.n	80a2bce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80a2b2a:	4b48      	ldr	r3, [pc, #288]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2b2c:	681b      	ldr	r3, [r3, #0]
 80a2b2e:	f003 0304 	and.w	r3, r3, #4
 80a2b32:	2b00      	cmp	r3, #0
 80a2b34:	d005      	beq.n	80a2b42 <HAL_RCC_OscConfig+0x17e>
 80a2b36:	687b      	ldr	r3, [r7, #4]
 80a2b38:	68db      	ldr	r3, [r3, #12]
 80a2b3a:	2b00      	cmp	r3, #0
 80a2b3c:	d101      	bne.n	80a2b42 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80a2b3e:	2301      	movs	r3, #1
 80a2b40:	e392      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80a2b42:	4b42      	ldr	r3, [pc, #264]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2b44:	681b      	ldr	r3, [r3, #0]
 80a2b46:	f023 0219 	bic.w	r2, r3, #25
 80a2b4a:	687b      	ldr	r3, [r7, #4]
 80a2b4c:	68db      	ldr	r3, [r3, #12]
 80a2b4e:	493f      	ldr	r1, [pc, #252]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2b50:	4313      	orrs	r3, r2
 80a2b52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a2b54:	f7fe f8b4 	bl	80a0cc0 <HAL_GetTick>
 80a2b58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80a2b5a:	e008      	b.n	80a2b6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80a2b5c:	f7fe f8b0 	bl	80a0cc0 <HAL_GetTick>
 80a2b60:	4602      	mov	r2, r0
 80a2b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2b64:	1ad3      	subs	r3, r2, r3
 80a2b66:	2b02      	cmp	r3, #2
 80a2b68:	d901      	bls.n	80a2b6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80a2b6a:	2303      	movs	r3, #3
 80a2b6c:	e37c      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80a2b6e:	4b37      	ldr	r3, [pc, #220]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2b70:	681b      	ldr	r3, [r3, #0]
 80a2b72:	f003 0304 	and.w	r3, r3, #4
 80a2b76:	2b00      	cmp	r3, #0
 80a2b78:	d0f0      	beq.n	80a2b5c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80a2b7a:	f7fe f8d1 	bl	80a0d20 <HAL_GetREVID>
 80a2b7e:	4603      	mov	r3, r0
 80a2b80:	f241 0203 	movw	r2, #4099	@ 0x1003
 80a2b84:	4293      	cmp	r3, r2
 80a2b86:	d817      	bhi.n	80a2bb8 <HAL_RCC_OscConfig+0x1f4>
 80a2b88:	687b      	ldr	r3, [r7, #4]
 80a2b8a:	691b      	ldr	r3, [r3, #16]
 80a2b8c:	2b40      	cmp	r3, #64	@ 0x40
 80a2b8e:	d108      	bne.n	80a2ba2 <HAL_RCC_OscConfig+0x1de>
 80a2b90:	4b2e      	ldr	r3, [pc, #184]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2b92:	685b      	ldr	r3, [r3, #4]
 80a2b94:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80a2b98:	4a2c      	ldr	r2, [pc, #176]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a2b9e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80a2ba0:	e07a      	b.n	80a2c98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80a2ba2:	4b2a      	ldr	r3, [pc, #168]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2ba4:	685b      	ldr	r3, [r3, #4]
 80a2ba6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80a2baa:	687b      	ldr	r3, [r7, #4]
 80a2bac:	691b      	ldr	r3, [r3, #16]
 80a2bae:	031b      	lsls	r3, r3, #12
 80a2bb0:	4926      	ldr	r1, [pc, #152]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2bb2:	4313      	orrs	r3, r2
 80a2bb4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80a2bb6:	e06f      	b.n	80a2c98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80a2bb8:	4b24      	ldr	r3, [pc, #144]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2bba:	685b      	ldr	r3, [r3, #4]
 80a2bbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80a2bc0:	687b      	ldr	r3, [r7, #4]
 80a2bc2:	691b      	ldr	r3, [r3, #16]
 80a2bc4:	061b      	lsls	r3, r3, #24
 80a2bc6:	4921      	ldr	r1, [pc, #132]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2bc8:	4313      	orrs	r3, r2
 80a2bca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80a2bcc:	e064      	b.n	80a2c98 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80a2bce:	687b      	ldr	r3, [r7, #4]
 80a2bd0:	68db      	ldr	r3, [r3, #12]
 80a2bd2:	2b00      	cmp	r3, #0
 80a2bd4:	d047      	beq.n	80a2c66 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80a2bd6:	4b1d      	ldr	r3, [pc, #116]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2bd8:	681b      	ldr	r3, [r3, #0]
 80a2bda:	f023 0219 	bic.w	r2, r3, #25
 80a2bde:	687b      	ldr	r3, [r7, #4]
 80a2be0:	68db      	ldr	r3, [r3, #12]
 80a2be2:	491a      	ldr	r1, [pc, #104]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2be4:	4313      	orrs	r3, r2
 80a2be6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a2be8:	f7fe f86a 	bl	80a0cc0 <HAL_GetTick>
 80a2bec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80a2bee:	e008      	b.n	80a2c02 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80a2bf0:	f7fe f866 	bl	80a0cc0 <HAL_GetTick>
 80a2bf4:	4602      	mov	r2, r0
 80a2bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2bf8:	1ad3      	subs	r3, r2, r3
 80a2bfa:	2b02      	cmp	r3, #2
 80a2bfc:	d901      	bls.n	80a2c02 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80a2bfe:	2303      	movs	r3, #3
 80a2c00:	e332      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80a2c02:	4b12      	ldr	r3, [pc, #72]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2c04:	681b      	ldr	r3, [r3, #0]
 80a2c06:	f003 0304 	and.w	r3, r3, #4
 80a2c0a:	2b00      	cmp	r3, #0
 80a2c0c:	d0f0      	beq.n	80a2bf0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80a2c0e:	f7fe f887 	bl	80a0d20 <HAL_GetREVID>
 80a2c12:	4603      	mov	r3, r0
 80a2c14:	f241 0203 	movw	r2, #4099	@ 0x1003
 80a2c18:	4293      	cmp	r3, r2
 80a2c1a:	d819      	bhi.n	80a2c50 <HAL_RCC_OscConfig+0x28c>
 80a2c1c:	687b      	ldr	r3, [r7, #4]
 80a2c1e:	691b      	ldr	r3, [r3, #16]
 80a2c20:	2b40      	cmp	r3, #64	@ 0x40
 80a2c22:	d108      	bne.n	80a2c36 <HAL_RCC_OscConfig+0x272>
 80a2c24:	4b09      	ldr	r3, [pc, #36]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2c26:	685b      	ldr	r3, [r3, #4]
 80a2c28:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80a2c2c:	4a07      	ldr	r2, [pc, #28]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a2c32:	6053      	str	r3, [r2, #4]
 80a2c34:	e030      	b.n	80a2c98 <HAL_RCC_OscConfig+0x2d4>
 80a2c36:	4b05      	ldr	r3, [pc, #20]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2c38:	685b      	ldr	r3, [r3, #4]
 80a2c3a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80a2c3e:	687b      	ldr	r3, [r7, #4]
 80a2c40:	691b      	ldr	r3, [r3, #16]
 80a2c42:	031b      	lsls	r3, r3, #12
 80a2c44:	4901      	ldr	r1, [pc, #4]	@ (80a2c4c <HAL_RCC_OscConfig+0x288>)
 80a2c46:	4313      	orrs	r3, r2
 80a2c48:	604b      	str	r3, [r1, #4]
 80a2c4a:	e025      	b.n	80a2c98 <HAL_RCC_OscConfig+0x2d4>
 80a2c4c:	58024400 	.word	0x58024400
 80a2c50:	4b9a      	ldr	r3, [pc, #616]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2c52:	685b      	ldr	r3, [r3, #4]
 80a2c54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80a2c58:	687b      	ldr	r3, [r7, #4]
 80a2c5a:	691b      	ldr	r3, [r3, #16]
 80a2c5c:	061b      	lsls	r3, r3, #24
 80a2c5e:	4997      	ldr	r1, [pc, #604]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2c60:	4313      	orrs	r3, r2
 80a2c62:	604b      	str	r3, [r1, #4]
 80a2c64:	e018      	b.n	80a2c98 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80a2c66:	4b95      	ldr	r3, [pc, #596]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2c68:	681b      	ldr	r3, [r3, #0]
 80a2c6a:	4a94      	ldr	r2, [pc, #592]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2c6c:	f023 0301 	bic.w	r3, r3, #1
 80a2c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a2c72:	f7fe f825 	bl	80a0cc0 <HAL_GetTick>
 80a2c76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80a2c78:	e008      	b.n	80a2c8c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80a2c7a:	f7fe f821 	bl	80a0cc0 <HAL_GetTick>
 80a2c7e:	4602      	mov	r2, r0
 80a2c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2c82:	1ad3      	subs	r3, r2, r3
 80a2c84:	2b02      	cmp	r3, #2
 80a2c86:	d901      	bls.n	80a2c8c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80a2c88:	2303      	movs	r3, #3
 80a2c8a:	e2ed      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80a2c8c:	4b8b      	ldr	r3, [pc, #556]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2c8e:	681b      	ldr	r3, [r3, #0]
 80a2c90:	f003 0304 	and.w	r3, r3, #4
 80a2c94:	2b00      	cmp	r3, #0
 80a2c96:	d1f0      	bne.n	80a2c7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80a2c98:	687b      	ldr	r3, [r7, #4]
 80a2c9a:	681b      	ldr	r3, [r3, #0]
 80a2c9c:	f003 0310 	and.w	r3, r3, #16
 80a2ca0:	2b00      	cmp	r3, #0
 80a2ca2:	f000 80a9 	beq.w	80a2df8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80a2ca6:	4b85      	ldr	r3, [pc, #532]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2ca8:	691b      	ldr	r3, [r3, #16]
 80a2caa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80a2cae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80a2cb0:	4b82      	ldr	r3, [pc, #520]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a2cb4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80a2cb6:	69bb      	ldr	r3, [r7, #24]
 80a2cb8:	2b08      	cmp	r3, #8
 80a2cba:	d007      	beq.n	80a2ccc <HAL_RCC_OscConfig+0x308>
 80a2cbc:	69bb      	ldr	r3, [r7, #24]
 80a2cbe:	2b18      	cmp	r3, #24
 80a2cc0:	d13a      	bne.n	80a2d38 <HAL_RCC_OscConfig+0x374>
 80a2cc2:	697b      	ldr	r3, [r7, #20]
 80a2cc4:	f003 0303 	and.w	r3, r3, #3
 80a2cc8:	2b01      	cmp	r3, #1
 80a2cca:	d135      	bne.n	80a2d38 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80a2ccc:	4b7b      	ldr	r3, [pc, #492]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2cce:	681b      	ldr	r3, [r3, #0]
 80a2cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a2cd4:	2b00      	cmp	r3, #0
 80a2cd6:	d005      	beq.n	80a2ce4 <HAL_RCC_OscConfig+0x320>
 80a2cd8:	687b      	ldr	r3, [r7, #4]
 80a2cda:	69db      	ldr	r3, [r3, #28]
 80a2cdc:	2b80      	cmp	r3, #128	@ 0x80
 80a2cde:	d001      	beq.n	80a2ce4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80a2ce0:	2301      	movs	r3, #1
 80a2ce2:	e2c1      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80a2ce4:	f7fe f81c 	bl	80a0d20 <HAL_GetREVID>
 80a2ce8:	4603      	mov	r3, r0
 80a2cea:	f241 0203 	movw	r2, #4099	@ 0x1003
 80a2cee:	4293      	cmp	r3, r2
 80a2cf0:	d817      	bhi.n	80a2d22 <HAL_RCC_OscConfig+0x35e>
 80a2cf2:	687b      	ldr	r3, [r7, #4]
 80a2cf4:	6a1b      	ldr	r3, [r3, #32]
 80a2cf6:	2b20      	cmp	r3, #32
 80a2cf8:	d108      	bne.n	80a2d0c <HAL_RCC_OscConfig+0x348>
 80a2cfa:	4b70      	ldr	r3, [pc, #448]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2cfc:	685b      	ldr	r3, [r3, #4]
 80a2cfe:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80a2d02:	4a6e      	ldr	r2, [pc, #440]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2d04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80a2d08:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80a2d0a:	e075      	b.n	80a2df8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80a2d0c:	4b6b      	ldr	r3, [pc, #428]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2d0e:	685b      	ldr	r3, [r3, #4]
 80a2d10:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80a2d14:	687b      	ldr	r3, [r7, #4]
 80a2d16:	6a1b      	ldr	r3, [r3, #32]
 80a2d18:	069b      	lsls	r3, r3, #26
 80a2d1a:	4968      	ldr	r1, [pc, #416]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2d1c:	4313      	orrs	r3, r2
 80a2d1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80a2d20:	e06a      	b.n	80a2df8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80a2d22:	4b66      	ldr	r3, [pc, #408]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2d24:	68db      	ldr	r3, [r3, #12]
 80a2d26:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80a2d2a:	687b      	ldr	r3, [r7, #4]
 80a2d2c:	6a1b      	ldr	r3, [r3, #32]
 80a2d2e:	061b      	lsls	r3, r3, #24
 80a2d30:	4962      	ldr	r1, [pc, #392]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2d32:	4313      	orrs	r3, r2
 80a2d34:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80a2d36:	e05f      	b.n	80a2df8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80a2d38:	687b      	ldr	r3, [r7, #4]
 80a2d3a:	69db      	ldr	r3, [r3, #28]
 80a2d3c:	2b00      	cmp	r3, #0
 80a2d3e:	d042      	beq.n	80a2dc6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80a2d40:	4b5e      	ldr	r3, [pc, #376]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2d42:	681b      	ldr	r3, [r3, #0]
 80a2d44:	4a5d      	ldr	r2, [pc, #372]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80a2d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a2d4c:	f7fd ffb8 	bl	80a0cc0 <HAL_GetTick>
 80a2d50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80a2d52:	e008      	b.n	80a2d66 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80a2d54:	f7fd ffb4 	bl	80a0cc0 <HAL_GetTick>
 80a2d58:	4602      	mov	r2, r0
 80a2d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2d5c:	1ad3      	subs	r3, r2, r3
 80a2d5e:	2b02      	cmp	r3, #2
 80a2d60:	d901      	bls.n	80a2d66 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80a2d62:	2303      	movs	r3, #3
 80a2d64:	e280      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80a2d66:	4b55      	ldr	r3, [pc, #340]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2d68:	681b      	ldr	r3, [r3, #0]
 80a2d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a2d6e:	2b00      	cmp	r3, #0
 80a2d70:	d0f0      	beq.n	80a2d54 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80a2d72:	f7fd ffd5 	bl	80a0d20 <HAL_GetREVID>
 80a2d76:	4603      	mov	r3, r0
 80a2d78:	f241 0203 	movw	r2, #4099	@ 0x1003
 80a2d7c:	4293      	cmp	r3, r2
 80a2d7e:	d817      	bhi.n	80a2db0 <HAL_RCC_OscConfig+0x3ec>
 80a2d80:	687b      	ldr	r3, [r7, #4]
 80a2d82:	6a1b      	ldr	r3, [r3, #32]
 80a2d84:	2b20      	cmp	r3, #32
 80a2d86:	d108      	bne.n	80a2d9a <HAL_RCC_OscConfig+0x3d6>
 80a2d88:	4b4c      	ldr	r3, [pc, #304]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2d8a:	685b      	ldr	r3, [r3, #4]
 80a2d8c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80a2d90:	4a4a      	ldr	r2, [pc, #296]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2d92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80a2d96:	6053      	str	r3, [r2, #4]
 80a2d98:	e02e      	b.n	80a2df8 <HAL_RCC_OscConfig+0x434>
 80a2d9a:	4b48      	ldr	r3, [pc, #288]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2d9c:	685b      	ldr	r3, [r3, #4]
 80a2d9e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80a2da2:	687b      	ldr	r3, [r7, #4]
 80a2da4:	6a1b      	ldr	r3, [r3, #32]
 80a2da6:	069b      	lsls	r3, r3, #26
 80a2da8:	4944      	ldr	r1, [pc, #272]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2daa:	4313      	orrs	r3, r2
 80a2dac:	604b      	str	r3, [r1, #4]
 80a2dae:	e023      	b.n	80a2df8 <HAL_RCC_OscConfig+0x434>
 80a2db0:	4b42      	ldr	r3, [pc, #264]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2db2:	68db      	ldr	r3, [r3, #12]
 80a2db4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80a2db8:	687b      	ldr	r3, [r7, #4]
 80a2dba:	6a1b      	ldr	r3, [r3, #32]
 80a2dbc:	061b      	lsls	r3, r3, #24
 80a2dbe:	493f      	ldr	r1, [pc, #252]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2dc0:	4313      	orrs	r3, r2
 80a2dc2:	60cb      	str	r3, [r1, #12]
 80a2dc4:	e018      	b.n	80a2df8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80a2dc6:	4b3d      	ldr	r3, [pc, #244]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2dc8:	681b      	ldr	r3, [r3, #0]
 80a2dca:	4a3c      	ldr	r2, [pc, #240]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2dcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80a2dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a2dd2:	f7fd ff75 	bl	80a0cc0 <HAL_GetTick>
 80a2dd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80a2dd8:	e008      	b.n	80a2dec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80a2dda:	f7fd ff71 	bl	80a0cc0 <HAL_GetTick>
 80a2dde:	4602      	mov	r2, r0
 80a2de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2de2:	1ad3      	subs	r3, r2, r3
 80a2de4:	2b02      	cmp	r3, #2
 80a2de6:	d901      	bls.n	80a2dec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80a2de8:	2303      	movs	r3, #3
 80a2dea:	e23d      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80a2dec:	4b33      	ldr	r3, [pc, #204]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2dee:	681b      	ldr	r3, [r3, #0]
 80a2df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a2df4:	2b00      	cmp	r3, #0
 80a2df6:	d1f0      	bne.n	80a2dda <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80a2df8:	687b      	ldr	r3, [r7, #4]
 80a2dfa:	681b      	ldr	r3, [r3, #0]
 80a2dfc:	f003 0308 	and.w	r3, r3, #8
 80a2e00:	2b00      	cmp	r3, #0
 80a2e02:	d036      	beq.n	80a2e72 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80a2e04:	687b      	ldr	r3, [r7, #4]
 80a2e06:	695b      	ldr	r3, [r3, #20]
 80a2e08:	2b00      	cmp	r3, #0
 80a2e0a:	d019      	beq.n	80a2e40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80a2e0c:	4b2b      	ldr	r3, [pc, #172]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80a2e10:	4a2a      	ldr	r2, [pc, #168]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2e12:	f043 0301 	orr.w	r3, r3, #1
 80a2e16:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80a2e18:	f7fd ff52 	bl	80a0cc0 <HAL_GetTick>
 80a2e1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80a2e1e:	e008      	b.n	80a2e32 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80a2e20:	f7fd ff4e 	bl	80a0cc0 <HAL_GetTick>
 80a2e24:	4602      	mov	r2, r0
 80a2e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2e28:	1ad3      	subs	r3, r2, r3
 80a2e2a:	2b02      	cmp	r3, #2
 80a2e2c:	d901      	bls.n	80a2e32 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80a2e2e:	2303      	movs	r3, #3
 80a2e30:	e21a      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80a2e32:	4b22      	ldr	r3, [pc, #136]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80a2e36:	f003 0302 	and.w	r3, r3, #2
 80a2e3a:	2b00      	cmp	r3, #0
 80a2e3c:	d0f0      	beq.n	80a2e20 <HAL_RCC_OscConfig+0x45c>
 80a2e3e:	e018      	b.n	80a2e72 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80a2e40:	4b1e      	ldr	r3, [pc, #120]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80a2e44:	4a1d      	ldr	r2, [pc, #116]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2e46:	f023 0301 	bic.w	r3, r3, #1
 80a2e4a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80a2e4c:	f7fd ff38 	bl	80a0cc0 <HAL_GetTick>
 80a2e50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80a2e52:	e008      	b.n	80a2e66 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80a2e54:	f7fd ff34 	bl	80a0cc0 <HAL_GetTick>
 80a2e58:	4602      	mov	r2, r0
 80a2e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2e5c:	1ad3      	subs	r3, r2, r3
 80a2e5e:	2b02      	cmp	r3, #2
 80a2e60:	d901      	bls.n	80a2e66 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80a2e62:	2303      	movs	r3, #3
 80a2e64:	e200      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80a2e66:	4b15      	ldr	r3, [pc, #84]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80a2e6a:	f003 0302 	and.w	r3, r3, #2
 80a2e6e:	2b00      	cmp	r3, #0
 80a2e70:	d1f0      	bne.n	80a2e54 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80a2e72:	687b      	ldr	r3, [r7, #4]
 80a2e74:	681b      	ldr	r3, [r3, #0]
 80a2e76:	f003 0320 	and.w	r3, r3, #32
 80a2e7a:	2b00      	cmp	r3, #0
 80a2e7c:	d039      	beq.n	80a2ef2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80a2e7e:	687b      	ldr	r3, [r7, #4]
 80a2e80:	699b      	ldr	r3, [r3, #24]
 80a2e82:	2b00      	cmp	r3, #0
 80a2e84:	d01c      	beq.n	80a2ec0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80a2e86:	4b0d      	ldr	r3, [pc, #52]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2e88:	681b      	ldr	r3, [r3, #0]
 80a2e8a:	4a0c      	ldr	r2, [pc, #48]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2e8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80a2e90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80a2e92:	f7fd ff15 	bl	80a0cc0 <HAL_GetTick>
 80a2e96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80a2e98:	e008      	b.n	80a2eac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80a2e9a:	f7fd ff11 	bl	80a0cc0 <HAL_GetTick>
 80a2e9e:	4602      	mov	r2, r0
 80a2ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2ea2:	1ad3      	subs	r3, r2, r3
 80a2ea4:	2b02      	cmp	r3, #2
 80a2ea6:	d901      	bls.n	80a2eac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80a2ea8:	2303      	movs	r3, #3
 80a2eaa:	e1dd      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80a2eac:	4b03      	ldr	r3, [pc, #12]	@ (80a2ebc <HAL_RCC_OscConfig+0x4f8>)
 80a2eae:	681b      	ldr	r3, [r3, #0]
 80a2eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80a2eb4:	2b00      	cmp	r3, #0
 80a2eb6:	d0f0      	beq.n	80a2e9a <HAL_RCC_OscConfig+0x4d6>
 80a2eb8:	e01b      	b.n	80a2ef2 <HAL_RCC_OscConfig+0x52e>
 80a2eba:	bf00      	nop
 80a2ebc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80a2ec0:	4b9b      	ldr	r3, [pc, #620]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2ec2:	681b      	ldr	r3, [r3, #0]
 80a2ec4:	4a9a      	ldr	r2, [pc, #616]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2ec6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80a2eca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80a2ecc:	f7fd fef8 	bl	80a0cc0 <HAL_GetTick>
 80a2ed0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80a2ed2:	e008      	b.n	80a2ee6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80a2ed4:	f7fd fef4 	bl	80a0cc0 <HAL_GetTick>
 80a2ed8:	4602      	mov	r2, r0
 80a2eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2edc:	1ad3      	subs	r3, r2, r3
 80a2ede:	2b02      	cmp	r3, #2
 80a2ee0:	d901      	bls.n	80a2ee6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80a2ee2:	2303      	movs	r3, #3
 80a2ee4:	e1c0      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80a2ee6:	4b92      	ldr	r3, [pc, #584]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2ee8:	681b      	ldr	r3, [r3, #0]
 80a2eea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80a2eee:	2b00      	cmp	r3, #0
 80a2ef0:	d1f0      	bne.n	80a2ed4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80a2ef2:	687b      	ldr	r3, [r7, #4]
 80a2ef4:	681b      	ldr	r3, [r3, #0]
 80a2ef6:	f003 0304 	and.w	r3, r3, #4
 80a2efa:	2b00      	cmp	r3, #0
 80a2efc:	f000 8081 	beq.w	80a3002 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80a2f00:	4b8c      	ldr	r3, [pc, #560]	@ (80a3134 <HAL_RCC_OscConfig+0x770>)
 80a2f02:	681b      	ldr	r3, [r3, #0]
 80a2f04:	4a8b      	ldr	r2, [pc, #556]	@ (80a3134 <HAL_RCC_OscConfig+0x770>)
 80a2f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80a2f0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80a2f0c:	f7fd fed8 	bl	80a0cc0 <HAL_GetTick>
 80a2f10:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80a2f12:	e008      	b.n	80a2f26 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80a2f14:	f7fd fed4 	bl	80a0cc0 <HAL_GetTick>
 80a2f18:	4602      	mov	r2, r0
 80a2f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2f1c:	1ad3      	subs	r3, r2, r3
 80a2f1e:	2b64      	cmp	r3, #100	@ 0x64
 80a2f20:	d901      	bls.n	80a2f26 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80a2f22:	2303      	movs	r3, #3
 80a2f24:	e1a0      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80a2f26:	4b83      	ldr	r3, [pc, #524]	@ (80a3134 <HAL_RCC_OscConfig+0x770>)
 80a2f28:	681b      	ldr	r3, [r3, #0]
 80a2f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a2f2e:	2b00      	cmp	r3, #0
 80a2f30:	d0f0      	beq.n	80a2f14 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80a2f32:	687b      	ldr	r3, [r7, #4]
 80a2f34:	689b      	ldr	r3, [r3, #8]
 80a2f36:	2b01      	cmp	r3, #1
 80a2f38:	d106      	bne.n	80a2f48 <HAL_RCC_OscConfig+0x584>
 80a2f3a:	4b7d      	ldr	r3, [pc, #500]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2f3e:	4a7c      	ldr	r2, [pc, #496]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2f40:	f043 0301 	orr.w	r3, r3, #1
 80a2f44:	6713      	str	r3, [r2, #112]	@ 0x70
 80a2f46:	e02d      	b.n	80a2fa4 <HAL_RCC_OscConfig+0x5e0>
 80a2f48:	687b      	ldr	r3, [r7, #4]
 80a2f4a:	689b      	ldr	r3, [r3, #8]
 80a2f4c:	2b00      	cmp	r3, #0
 80a2f4e:	d10c      	bne.n	80a2f6a <HAL_RCC_OscConfig+0x5a6>
 80a2f50:	4b77      	ldr	r3, [pc, #476]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2f54:	4a76      	ldr	r2, [pc, #472]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2f56:	f023 0301 	bic.w	r3, r3, #1
 80a2f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 80a2f5c:	4b74      	ldr	r3, [pc, #464]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2f60:	4a73      	ldr	r2, [pc, #460]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2f62:	f023 0304 	bic.w	r3, r3, #4
 80a2f66:	6713      	str	r3, [r2, #112]	@ 0x70
 80a2f68:	e01c      	b.n	80a2fa4 <HAL_RCC_OscConfig+0x5e0>
 80a2f6a:	687b      	ldr	r3, [r7, #4]
 80a2f6c:	689b      	ldr	r3, [r3, #8]
 80a2f6e:	2b05      	cmp	r3, #5
 80a2f70:	d10c      	bne.n	80a2f8c <HAL_RCC_OscConfig+0x5c8>
 80a2f72:	4b6f      	ldr	r3, [pc, #444]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2f76:	4a6e      	ldr	r2, [pc, #440]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2f78:	f043 0304 	orr.w	r3, r3, #4
 80a2f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 80a2f7e:	4b6c      	ldr	r3, [pc, #432]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2f82:	4a6b      	ldr	r2, [pc, #428]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2f84:	f043 0301 	orr.w	r3, r3, #1
 80a2f88:	6713      	str	r3, [r2, #112]	@ 0x70
 80a2f8a:	e00b      	b.n	80a2fa4 <HAL_RCC_OscConfig+0x5e0>
 80a2f8c:	4b68      	ldr	r3, [pc, #416]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2f90:	4a67      	ldr	r2, [pc, #412]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2f92:	f023 0301 	bic.w	r3, r3, #1
 80a2f96:	6713      	str	r3, [r2, #112]	@ 0x70
 80a2f98:	4b65      	ldr	r3, [pc, #404]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2f9c:	4a64      	ldr	r2, [pc, #400]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2f9e:	f023 0304 	bic.w	r3, r3, #4
 80a2fa2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80a2fa4:	687b      	ldr	r3, [r7, #4]
 80a2fa6:	689b      	ldr	r3, [r3, #8]
 80a2fa8:	2b00      	cmp	r3, #0
 80a2faa:	d015      	beq.n	80a2fd8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80a2fac:	f7fd fe88 	bl	80a0cc0 <HAL_GetTick>
 80a2fb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80a2fb2:	e00a      	b.n	80a2fca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80a2fb4:	f7fd fe84 	bl	80a0cc0 <HAL_GetTick>
 80a2fb8:	4602      	mov	r2, r0
 80a2fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2fbc:	1ad3      	subs	r3, r2, r3
 80a2fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 80a2fc2:	4293      	cmp	r3, r2
 80a2fc4:	d901      	bls.n	80a2fca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80a2fc6:	2303      	movs	r3, #3
 80a2fc8:	e14e      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80a2fca:	4b59      	ldr	r3, [pc, #356]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2fce:	f003 0302 	and.w	r3, r3, #2
 80a2fd2:	2b00      	cmp	r3, #0
 80a2fd4:	d0ee      	beq.n	80a2fb4 <HAL_RCC_OscConfig+0x5f0>
 80a2fd6:	e014      	b.n	80a3002 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80a2fd8:	f7fd fe72 	bl	80a0cc0 <HAL_GetTick>
 80a2fdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80a2fde:	e00a      	b.n	80a2ff6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80a2fe0:	f7fd fe6e 	bl	80a0cc0 <HAL_GetTick>
 80a2fe4:	4602      	mov	r2, r0
 80a2fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a2fe8:	1ad3      	subs	r3, r2, r3
 80a2fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80a2fee:	4293      	cmp	r3, r2
 80a2ff0:	d901      	bls.n	80a2ff6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80a2ff2:	2303      	movs	r3, #3
 80a2ff4:	e138      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80a2ff6:	4b4e      	ldr	r3, [pc, #312]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a2ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a2ffa:	f003 0302 	and.w	r3, r3, #2
 80a2ffe:	2b00      	cmp	r3, #0
 80a3000:	d1ee      	bne.n	80a2fe0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80a3002:	687b      	ldr	r3, [r7, #4]
 80a3004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80a3006:	2b00      	cmp	r3, #0
 80a3008:	f000 812d 	beq.w	80a3266 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80a300c:	4b48      	ldr	r3, [pc, #288]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a300e:	691b      	ldr	r3, [r3, #16]
 80a3010:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80a3014:	2b18      	cmp	r3, #24
 80a3016:	f000 80bd 	beq.w	80a3194 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80a301a:	687b      	ldr	r3, [r7, #4]
 80a301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80a301e:	2b02      	cmp	r3, #2
 80a3020:	f040 809e 	bne.w	80a3160 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80a3024:	4b42      	ldr	r3, [pc, #264]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a3026:	681b      	ldr	r3, [r3, #0]
 80a3028:	4a41      	ldr	r2, [pc, #260]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a302a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80a302e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a3030:	f7fd fe46 	bl	80a0cc0 <HAL_GetTick>
 80a3034:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80a3036:	e008      	b.n	80a304a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80a3038:	f7fd fe42 	bl	80a0cc0 <HAL_GetTick>
 80a303c:	4602      	mov	r2, r0
 80a303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a3040:	1ad3      	subs	r3, r2, r3
 80a3042:	2b02      	cmp	r3, #2
 80a3044:	d901      	bls.n	80a304a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80a3046:	2303      	movs	r3, #3
 80a3048:	e10e      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80a304a:	4b39      	ldr	r3, [pc, #228]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a304c:	681b      	ldr	r3, [r3, #0]
 80a304e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80a3052:	2b00      	cmp	r3, #0
 80a3054:	d1f0      	bne.n	80a3038 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80a3056:	4b36      	ldr	r3, [pc, #216]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a3058:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80a305a:	4b37      	ldr	r3, [pc, #220]	@ (80a3138 <HAL_RCC_OscConfig+0x774>)
 80a305c:	4013      	ands	r3, r2
 80a305e:	687a      	ldr	r2, [r7, #4]
 80a3060:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80a3062:	687a      	ldr	r2, [r7, #4]
 80a3064:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80a3066:	0112      	lsls	r2, r2, #4
 80a3068:	430a      	orrs	r2, r1
 80a306a:	4931      	ldr	r1, [pc, #196]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a306c:	4313      	orrs	r3, r2
 80a306e:	628b      	str	r3, [r1, #40]	@ 0x28
 80a3070:	687b      	ldr	r3, [r7, #4]
 80a3072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a3074:	3b01      	subs	r3, #1
 80a3076:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80a307a:	687b      	ldr	r3, [r7, #4]
 80a307c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80a307e:	3b01      	subs	r3, #1
 80a3080:	025b      	lsls	r3, r3, #9
 80a3082:	b29b      	uxth	r3, r3
 80a3084:	431a      	orrs	r2, r3
 80a3086:	687b      	ldr	r3, [r7, #4]
 80a3088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80a308a:	3b01      	subs	r3, #1
 80a308c:	041b      	lsls	r3, r3, #16
 80a308e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80a3092:	431a      	orrs	r2, r3
 80a3094:	687b      	ldr	r3, [r7, #4]
 80a3096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80a3098:	3b01      	subs	r3, #1
 80a309a:	061b      	lsls	r3, r3, #24
 80a309c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80a30a0:	4923      	ldr	r1, [pc, #140]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a30a2:	4313      	orrs	r3, r2
 80a30a4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80a30a6:	4b22      	ldr	r3, [pc, #136]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a30a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a30aa:	4a21      	ldr	r2, [pc, #132]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a30ac:	f023 0301 	bic.w	r3, r3, #1
 80a30b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80a30b2:	4b1f      	ldr	r3, [pc, #124]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a30b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80a30b6:	4b21      	ldr	r3, [pc, #132]	@ (80a313c <HAL_RCC_OscConfig+0x778>)
 80a30b8:	4013      	ands	r3, r2
 80a30ba:	687a      	ldr	r2, [r7, #4]
 80a30bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80a30be:	00d2      	lsls	r2, r2, #3
 80a30c0:	491b      	ldr	r1, [pc, #108]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a30c2:	4313      	orrs	r3, r2
 80a30c4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80a30c6:	4b1a      	ldr	r3, [pc, #104]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a30c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a30ca:	f023 020c 	bic.w	r2, r3, #12
 80a30ce:	687b      	ldr	r3, [r7, #4]
 80a30d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80a30d2:	4917      	ldr	r1, [pc, #92]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a30d4:	4313      	orrs	r3, r2
 80a30d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80a30d8:	4b15      	ldr	r3, [pc, #84]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a30da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a30dc:	f023 0202 	bic.w	r2, r3, #2
 80a30e0:	687b      	ldr	r3, [r7, #4]
 80a30e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80a30e4:	4912      	ldr	r1, [pc, #72]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a30e6:	4313      	orrs	r3, r2
 80a30e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80a30ea:	4b11      	ldr	r3, [pc, #68]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a30ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a30ee:	4a10      	ldr	r2, [pc, #64]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a30f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80a30f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a30f6:	4b0e      	ldr	r3, [pc, #56]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a30f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a30fa:	4a0d      	ldr	r2, [pc, #52]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a30fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a3100:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80a3102:	4b0b      	ldr	r3, [pc, #44]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a3104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a3106:	4a0a      	ldr	r2, [pc, #40]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a3108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80a310c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80a310e:	4b08      	ldr	r3, [pc, #32]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a3110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a3112:	4a07      	ldr	r2, [pc, #28]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a3114:	f043 0301 	orr.w	r3, r3, #1
 80a3118:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80a311a:	4b05      	ldr	r3, [pc, #20]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a311c:	681b      	ldr	r3, [r3, #0]
 80a311e:	4a04      	ldr	r2, [pc, #16]	@ (80a3130 <HAL_RCC_OscConfig+0x76c>)
 80a3120:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80a3124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a3126:	f7fd fdcb 	bl	80a0cc0 <HAL_GetTick>
 80a312a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80a312c:	e011      	b.n	80a3152 <HAL_RCC_OscConfig+0x78e>
 80a312e:	bf00      	nop
 80a3130:	58024400 	.word	0x58024400
 80a3134:	58024800 	.word	0x58024800
 80a3138:	fffffc0c 	.word	0xfffffc0c
 80a313c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80a3140:	f7fd fdbe 	bl	80a0cc0 <HAL_GetTick>
 80a3144:	4602      	mov	r2, r0
 80a3146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a3148:	1ad3      	subs	r3, r2, r3
 80a314a:	2b02      	cmp	r3, #2
 80a314c:	d901      	bls.n	80a3152 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80a314e:	2303      	movs	r3, #3
 80a3150:	e08a      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80a3152:	4b47      	ldr	r3, [pc, #284]	@ (80a3270 <HAL_RCC_OscConfig+0x8ac>)
 80a3154:	681b      	ldr	r3, [r3, #0]
 80a3156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80a315a:	2b00      	cmp	r3, #0
 80a315c:	d0f0      	beq.n	80a3140 <HAL_RCC_OscConfig+0x77c>
 80a315e:	e082      	b.n	80a3266 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80a3160:	4b43      	ldr	r3, [pc, #268]	@ (80a3270 <HAL_RCC_OscConfig+0x8ac>)
 80a3162:	681b      	ldr	r3, [r3, #0]
 80a3164:	4a42      	ldr	r2, [pc, #264]	@ (80a3270 <HAL_RCC_OscConfig+0x8ac>)
 80a3166:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80a316a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a316c:	f7fd fda8 	bl	80a0cc0 <HAL_GetTick>
 80a3170:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80a3172:	e008      	b.n	80a3186 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80a3174:	f7fd fda4 	bl	80a0cc0 <HAL_GetTick>
 80a3178:	4602      	mov	r2, r0
 80a317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a317c:	1ad3      	subs	r3, r2, r3
 80a317e:	2b02      	cmp	r3, #2
 80a3180:	d901      	bls.n	80a3186 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80a3182:	2303      	movs	r3, #3
 80a3184:	e070      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80a3186:	4b3a      	ldr	r3, [pc, #232]	@ (80a3270 <HAL_RCC_OscConfig+0x8ac>)
 80a3188:	681b      	ldr	r3, [r3, #0]
 80a318a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80a318e:	2b00      	cmp	r3, #0
 80a3190:	d1f0      	bne.n	80a3174 <HAL_RCC_OscConfig+0x7b0>
 80a3192:	e068      	b.n	80a3266 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80a3194:	4b36      	ldr	r3, [pc, #216]	@ (80a3270 <HAL_RCC_OscConfig+0x8ac>)
 80a3196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a3198:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80a319a:	4b35      	ldr	r3, [pc, #212]	@ (80a3270 <HAL_RCC_OscConfig+0x8ac>)
 80a319c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a319e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80a31a0:	687b      	ldr	r3, [r7, #4]
 80a31a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80a31a4:	2b01      	cmp	r3, #1
 80a31a6:	d031      	beq.n	80a320c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80a31a8:	693b      	ldr	r3, [r7, #16]
 80a31aa:	f003 0203 	and.w	r2, r3, #3
 80a31ae:	687b      	ldr	r3, [r7, #4]
 80a31b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80a31b2:	429a      	cmp	r2, r3
 80a31b4:	d12a      	bne.n	80a320c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80a31b6:	693b      	ldr	r3, [r7, #16]
 80a31b8:	091b      	lsrs	r3, r3, #4
 80a31ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80a31be:	687b      	ldr	r3, [r7, #4]
 80a31c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80a31c2:	429a      	cmp	r2, r3
 80a31c4:	d122      	bne.n	80a320c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80a31c6:	68fb      	ldr	r3, [r7, #12]
 80a31c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80a31cc:	687b      	ldr	r3, [r7, #4]
 80a31ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a31d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80a31d2:	429a      	cmp	r2, r3
 80a31d4:	d11a      	bne.n	80a320c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80a31d6:	68fb      	ldr	r3, [r7, #12]
 80a31d8:	0a5b      	lsrs	r3, r3, #9
 80a31da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80a31de:	687b      	ldr	r3, [r7, #4]
 80a31e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80a31e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80a31e4:	429a      	cmp	r2, r3
 80a31e6:	d111      	bne.n	80a320c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80a31e8:	68fb      	ldr	r3, [r7, #12]
 80a31ea:	0c1b      	lsrs	r3, r3, #16
 80a31ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80a31f0:	687b      	ldr	r3, [r7, #4]
 80a31f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80a31f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80a31f6:	429a      	cmp	r2, r3
 80a31f8:	d108      	bne.n	80a320c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80a31fa:	68fb      	ldr	r3, [r7, #12]
 80a31fc:	0e1b      	lsrs	r3, r3, #24
 80a31fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80a3202:	687b      	ldr	r3, [r7, #4]
 80a3204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80a3206:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80a3208:	429a      	cmp	r2, r3
 80a320a:	d001      	beq.n	80a3210 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80a320c:	2301      	movs	r3, #1
 80a320e:	e02b      	b.n	80a3268 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80a3210:	4b17      	ldr	r3, [pc, #92]	@ (80a3270 <HAL_RCC_OscConfig+0x8ac>)
 80a3212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80a3214:	08db      	lsrs	r3, r3, #3
 80a3216:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80a321a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80a321c:	687b      	ldr	r3, [r7, #4]
 80a321e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80a3220:	693a      	ldr	r2, [r7, #16]
 80a3222:	429a      	cmp	r2, r3
 80a3224:	d01f      	beq.n	80a3266 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80a3226:	4b12      	ldr	r3, [pc, #72]	@ (80a3270 <HAL_RCC_OscConfig+0x8ac>)
 80a3228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a322a:	4a11      	ldr	r2, [pc, #68]	@ (80a3270 <HAL_RCC_OscConfig+0x8ac>)
 80a322c:	f023 0301 	bic.w	r3, r3, #1
 80a3230:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80a3232:	f7fd fd45 	bl	80a0cc0 <HAL_GetTick>
 80a3236:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80a3238:	bf00      	nop
 80a323a:	f7fd fd41 	bl	80a0cc0 <HAL_GetTick>
 80a323e:	4602      	mov	r2, r0
 80a3240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a3242:	4293      	cmp	r3, r2
 80a3244:	d0f9      	beq.n	80a323a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80a3246:	4b0a      	ldr	r3, [pc, #40]	@ (80a3270 <HAL_RCC_OscConfig+0x8ac>)
 80a3248:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80a324a:	4b0a      	ldr	r3, [pc, #40]	@ (80a3274 <HAL_RCC_OscConfig+0x8b0>)
 80a324c:	4013      	ands	r3, r2
 80a324e:	687a      	ldr	r2, [r7, #4]
 80a3250:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80a3252:	00d2      	lsls	r2, r2, #3
 80a3254:	4906      	ldr	r1, [pc, #24]	@ (80a3270 <HAL_RCC_OscConfig+0x8ac>)
 80a3256:	4313      	orrs	r3, r2
 80a3258:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80a325a:	4b05      	ldr	r3, [pc, #20]	@ (80a3270 <HAL_RCC_OscConfig+0x8ac>)
 80a325c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a325e:	4a04      	ldr	r2, [pc, #16]	@ (80a3270 <HAL_RCC_OscConfig+0x8ac>)
 80a3260:	f043 0301 	orr.w	r3, r3, #1
 80a3264:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80a3266:	2300      	movs	r3, #0
}
 80a3268:	4618      	mov	r0, r3
 80a326a:	3730      	adds	r7, #48	@ 0x30
 80a326c:	46bd      	mov	sp, r7
 80a326e:	bd80      	pop	{r7, pc}
 80a3270:	58024400 	.word	0x58024400
 80a3274:	ffff0007 	.word	0xffff0007

080a3278 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80a3278:	b580      	push	{r7, lr}
 80a327a:	b086      	sub	sp, #24
 80a327c:	af00      	add	r7, sp, #0
 80a327e:	6078      	str	r0, [r7, #4]
 80a3280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80a3282:	687b      	ldr	r3, [r7, #4]
 80a3284:	2b00      	cmp	r3, #0
 80a3286:	d101      	bne.n	80a328c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80a3288:	2301      	movs	r3, #1
 80a328a:	e19c      	b.n	80a35c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80a328c:	4b8a      	ldr	r3, [pc, #552]	@ (80a34b8 <HAL_RCC_ClockConfig+0x240>)
 80a328e:	681b      	ldr	r3, [r3, #0]
 80a3290:	f003 030f 	and.w	r3, r3, #15
 80a3294:	683a      	ldr	r2, [r7, #0]
 80a3296:	429a      	cmp	r2, r3
 80a3298:	d910      	bls.n	80a32bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80a329a:	4b87      	ldr	r3, [pc, #540]	@ (80a34b8 <HAL_RCC_ClockConfig+0x240>)
 80a329c:	681b      	ldr	r3, [r3, #0]
 80a329e:	f023 020f 	bic.w	r2, r3, #15
 80a32a2:	4985      	ldr	r1, [pc, #532]	@ (80a34b8 <HAL_RCC_ClockConfig+0x240>)
 80a32a4:	683b      	ldr	r3, [r7, #0]
 80a32a6:	4313      	orrs	r3, r2
 80a32a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80a32aa:	4b83      	ldr	r3, [pc, #524]	@ (80a34b8 <HAL_RCC_ClockConfig+0x240>)
 80a32ac:	681b      	ldr	r3, [r3, #0]
 80a32ae:	f003 030f 	and.w	r3, r3, #15
 80a32b2:	683a      	ldr	r2, [r7, #0]
 80a32b4:	429a      	cmp	r2, r3
 80a32b6:	d001      	beq.n	80a32bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80a32b8:	2301      	movs	r3, #1
 80a32ba:	e184      	b.n	80a35c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80a32bc:	687b      	ldr	r3, [r7, #4]
 80a32be:	681b      	ldr	r3, [r3, #0]
 80a32c0:	f003 0304 	and.w	r3, r3, #4
 80a32c4:	2b00      	cmp	r3, #0
 80a32c6:	d010      	beq.n	80a32ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80a32c8:	687b      	ldr	r3, [r7, #4]
 80a32ca:	691a      	ldr	r2, [r3, #16]
 80a32cc:	4b7b      	ldr	r3, [pc, #492]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a32ce:	699b      	ldr	r3, [r3, #24]
 80a32d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80a32d4:	429a      	cmp	r2, r3
 80a32d6:	d908      	bls.n	80a32ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80a32d8:	4b78      	ldr	r3, [pc, #480]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a32da:	699b      	ldr	r3, [r3, #24]
 80a32dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80a32e0:	687b      	ldr	r3, [r7, #4]
 80a32e2:	691b      	ldr	r3, [r3, #16]
 80a32e4:	4975      	ldr	r1, [pc, #468]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a32e6:	4313      	orrs	r3, r2
 80a32e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80a32ea:	687b      	ldr	r3, [r7, #4]
 80a32ec:	681b      	ldr	r3, [r3, #0]
 80a32ee:	f003 0308 	and.w	r3, r3, #8
 80a32f2:	2b00      	cmp	r3, #0
 80a32f4:	d010      	beq.n	80a3318 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80a32f6:	687b      	ldr	r3, [r7, #4]
 80a32f8:	695a      	ldr	r2, [r3, #20]
 80a32fa:	4b70      	ldr	r3, [pc, #448]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a32fc:	69db      	ldr	r3, [r3, #28]
 80a32fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80a3302:	429a      	cmp	r2, r3
 80a3304:	d908      	bls.n	80a3318 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80a3306:	4b6d      	ldr	r3, [pc, #436]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a3308:	69db      	ldr	r3, [r3, #28]
 80a330a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80a330e:	687b      	ldr	r3, [r7, #4]
 80a3310:	695b      	ldr	r3, [r3, #20]
 80a3312:	496a      	ldr	r1, [pc, #424]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a3314:	4313      	orrs	r3, r2
 80a3316:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80a3318:	687b      	ldr	r3, [r7, #4]
 80a331a:	681b      	ldr	r3, [r3, #0]
 80a331c:	f003 0310 	and.w	r3, r3, #16
 80a3320:	2b00      	cmp	r3, #0
 80a3322:	d010      	beq.n	80a3346 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80a3324:	687b      	ldr	r3, [r7, #4]
 80a3326:	699a      	ldr	r2, [r3, #24]
 80a3328:	4b64      	ldr	r3, [pc, #400]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a332a:	69db      	ldr	r3, [r3, #28]
 80a332c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80a3330:	429a      	cmp	r2, r3
 80a3332:	d908      	bls.n	80a3346 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80a3334:	4b61      	ldr	r3, [pc, #388]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a3336:	69db      	ldr	r3, [r3, #28]
 80a3338:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80a333c:	687b      	ldr	r3, [r7, #4]
 80a333e:	699b      	ldr	r3, [r3, #24]
 80a3340:	495e      	ldr	r1, [pc, #376]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a3342:	4313      	orrs	r3, r2
 80a3344:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80a3346:	687b      	ldr	r3, [r7, #4]
 80a3348:	681b      	ldr	r3, [r3, #0]
 80a334a:	f003 0320 	and.w	r3, r3, #32
 80a334e:	2b00      	cmp	r3, #0
 80a3350:	d010      	beq.n	80a3374 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80a3352:	687b      	ldr	r3, [r7, #4]
 80a3354:	69da      	ldr	r2, [r3, #28]
 80a3356:	4b59      	ldr	r3, [pc, #356]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a3358:	6a1b      	ldr	r3, [r3, #32]
 80a335a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80a335e:	429a      	cmp	r2, r3
 80a3360:	d908      	bls.n	80a3374 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80a3362:	4b56      	ldr	r3, [pc, #344]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a3364:	6a1b      	ldr	r3, [r3, #32]
 80a3366:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80a336a:	687b      	ldr	r3, [r7, #4]
 80a336c:	69db      	ldr	r3, [r3, #28]
 80a336e:	4953      	ldr	r1, [pc, #332]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a3370:	4313      	orrs	r3, r2
 80a3372:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80a3374:	687b      	ldr	r3, [r7, #4]
 80a3376:	681b      	ldr	r3, [r3, #0]
 80a3378:	f003 0302 	and.w	r3, r3, #2
 80a337c:	2b00      	cmp	r3, #0
 80a337e:	d010      	beq.n	80a33a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80a3380:	687b      	ldr	r3, [r7, #4]
 80a3382:	68da      	ldr	r2, [r3, #12]
 80a3384:	4b4d      	ldr	r3, [pc, #308]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a3386:	699b      	ldr	r3, [r3, #24]
 80a3388:	f003 030f 	and.w	r3, r3, #15
 80a338c:	429a      	cmp	r2, r3
 80a338e:	d908      	bls.n	80a33a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80a3390:	4b4a      	ldr	r3, [pc, #296]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a3392:	699b      	ldr	r3, [r3, #24]
 80a3394:	f023 020f 	bic.w	r2, r3, #15
 80a3398:	687b      	ldr	r3, [r7, #4]
 80a339a:	68db      	ldr	r3, [r3, #12]
 80a339c:	4947      	ldr	r1, [pc, #284]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a339e:	4313      	orrs	r3, r2
 80a33a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80a33a2:	687b      	ldr	r3, [r7, #4]
 80a33a4:	681b      	ldr	r3, [r3, #0]
 80a33a6:	f003 0301 	and.w	r3, r3, #1
 80a33aa:	2b00      	cmp	r3, #0
 80a33ac:	d055      	beq.n	80a345a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80a33ae:	4b43      	ldr	r3, [pc, #268]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a33b0:	699b      	ldr	r3, [r3, #24]
 80a33b2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80a33b6:	687b      	ldr	r3, [r7, #4]
 80a33b8:	689b      	ldr	r3, [r3, #8]
 80a33ba:	4940      	ldr	r1, [pc, #256]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a33bc:	4313      	orrs	r3, r2
 80a33be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80a33c0:	687b      	ldr	r3, [r7, #4]
 80a33c2:	685b      	ldr	r3, [r3, #4]
 80a33c4:	2b02      	cmp	r3, #2
 80a33c6:	d107      	bne.n	80a33d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80a33c8:	4b3c      	ldr	r3, [pc, #240]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a33ca:	681b      	ldr	r3, [r3, #0]
 80a33cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80a33d0:	2b00      	cmp	r3, #0
 80a33d2:	d121      	bne.n	80a3418 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80a33d4:	2301      	movs	r3, #1
 80a33d6:	e0f6      	b.n	80a35c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80a33d8:	687b      	ldr	r3, [r7, #4]
 80a33da:	685b      	ldr	r3, [r3, #4]
 80a33dc:	2b03      	cmp	r3, #3
 80a33de:	d107      	bne.n	80a33f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80a33e0:	4b36      	ldr	r3, [pc, #216]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a33e2:	681b      	ldr	r3, [r3, #0]
 80a33e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80a33e8:	2b00      	cmp	r3, #0
 80a33ea:	d115      	bne.n	80a3418 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80a33ec:	2301      	movs	r3, #1
 80a33ee:	e0ea      	b.n	80a35c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80a33f0:	687b      	ldr	r3, [r7, #4]
 80a33f2:	685b      	ldr	r3, [r3, #4]
 80a33f4:	2b01      	cmp	r3, #1
 80a33f6:	d107      	bne.n	80a3408 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80a33f8:	4b30      	ldr	r3, [pc, #192]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a33fa:	681b      	ldr	r3, [r3, #0]
 80a33fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a3400:	2b00      	cmp	r3, #0
 80a3402:	d109      	bne.n	80a3418 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80a3404:	2301      	movs	r3, #1
 80a3406:	e0de      	b.n	80a35c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80a3408:	4b2c      	ldr	r3, [pc, #176]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a340a:	681b      	ldr	r3, [r3, #0]
 80a340c:	f003 0304 	and.w	r3, r3, #4
 80a3410:	2b00      	cmp	r3, #0
 80a3412:	d101      	bne.n	80a3418 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80a3414:	2301      	movs	r3, #1
 80a3416:	e0d6      	b.n	80a35c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80a3418:	4b28      	ldr	r3, [pc, #160]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a341a:	691b      	ldr	r3, [r3, #16]
 80a341c:	f023 0207 	bic.w	r2, r3, #7
 80a3420:	687b      	ldr	r3, [r7, #4]
 80a3422:	685b      	ldr	r3, [r3, #4]
 80a3424:	4925      	ldr	r1, [pc, #148]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a3426:	4313      	orrs	r3, r2
 80a3428:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80a342a:	f7fd fc49 	bl	80a0cc0 <HAL_GetTick>
 80a342e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80a3430:	e00a      	b.n	80a3448 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80a3432:	f7fd fc45 	bl	80a0cc0 <HAL_GetTick>
 80a3436:	4602      	mov	r2, r0
 80a3438:	697b      	ldr	r3, [r7, #20]
 80a343a:	1ad3      	subs	r3, r2, r3
 80a343c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80a3440:	4293      	cmp	r3, r2
 80a3442:	d901      	bls.n	80a3448 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80a3444:	2303      	movs	r3, #3
 80a3446:	e0be      	b.n	80a35c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80a3448:	4b1c      	ldr	r3, [pc, #112]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a344a:	691b      	ldr	r3, [r3, #16]
 80a344c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80a3450:	687b      	ldr	r3, [r7, #4]
 80a3452:	685b      	ldr	r3, [r3, #4]
 80a3454:	00db      	lsls	r3, r3, #3
 80a3456:	429a      	cmp	r2, r3
 80a3458:	d1eb      	bne.n	80a3432 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80a345a:	687b      	ldr	r3, [r7, #4]
 80a345c:	681b      	ldr	r3, [r3, #0]
 80a345e:	f003 0302 	and.w	r3, r3, #2
 80a3462:	2b00      	cmp	r3, #0
 80a3464:	d010      	beq.n	80a3488 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80a3466:	687b      	ldr	r3, [r7, #4]
 80a3468:	68da      	ldr	r2, [r3, #12]
 80a346a:	4b14      	ldr	r3, [pc, #80]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a346c:	699b      	ldr	r3, [r3, #24]
 80a346e:	f003 030f 	and.w	r3, r3, #15
 80a3472:	429a      	cmp	r2, r3
 80a3474:	d208      	bcs.n	80a3488 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80a3476:	4b11      	ldr	r3, [pc, #68]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a3478:	699b      	ldr	r3, [r3, #24]
 80a347a:	f023 020f 	bic.w	r2, r3, #15
 80a347e:	687b      	ldr	r3, [r7, #4]
 80a3480:	68db      	ldr	r3, [r3, #12]
 80a3482:	490e      	ldr	r1, [pc, #56]	@ (80a34bc <HAL_RCC_ClockConfig+0x244>)
 80a3484:	4313      	orrs	r3, r2
 80a3486:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80a3488:	4b0b      	ldr	r3, [pc, #44]	@ (80a34b8 <HAL_RCC_ClockConfig+0x240>)
 80a348a:	681b      	ldr	r3, [r3, #0]
 80a348c:	f003 030f 	and.w	r3, r3, #15
 80a3490:	683a      	ldr	r2, [r7, #0]
 80a3492:	429a      	cmp	r2, r3
 80a3494:	d214      	bcs.n	80a34c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80a3496:	4b08      	ldr	r3, [pc, #32]	@ (80a34b8 <HAL_RCC_ClockConfig+0x240>)
 80a3498:	681b      	ldr	r3, [r3, #0]
 80a349a:	f023 020f 	bic.w	r2, r3, #15
 80a349e:	4906      	ldr	r1, [pc, #24]	@ (80a34b8 <HAL_RCC_ClockConfig+0x240>)
 80a34a0:	683b      	ldr	r3, [r7, #0]
 80a34a2:	4313      	orrs	r3, r2
 80a34a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80a34a6:	4b04      	ldr	r3, [pc, #16]	@ (80a34b8 <HAL_RCC_ClockConfig+0x240>)
 80a34a8:	681b      	ldr	r3, [r3, #0]
 80a34aa:	f003 030f 	and.w	r3, r3, #15
 80a34ae:	683a      	ldr	r2, [r7, #0]
 80a34b0:	429a      	cmp	r2, r3
 80a34b2:	d005      	beq.n	80a34c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80a34b4:	2301      	movs	r3, #1
 80a34b6:	e086      	b.n	80a35c6 <HAL_RCC_ClockConfig+0x34e>
 80a34b8:	52002000 	.word	0x52002000
 80a34bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80a34c0:	687b      	ldr	r3, [r7, #4]
 80a34c2:	681b      	ldr	r3, [r3, #0]
 80a34c4:	f003 0304 	and.w	r3, r3, #4
 80a34c8:	2b00      	cmp	r3, #0
 80a34ca:	d010      	beq.n	80a34ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80a34cc:	687b      	ldr	r3, [r7, #4]
 80a34ce:	691a      	ldr	r2, [r3, #16]
 80a34d0:	4b3f      	ldr	r3, [pc, #252]	@ (80a35d0 <HAL_RCC_ClockConfig+0x358>)
 80a34d2:	699b      	ldr	r3, [r3, #24]
 80a34d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80a34d8:	429a      	cmp	r2, r3
 80a34da:	d208      	bcs.n	80a34ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80a34dc:	4b3c      	ldr	r3, [pc, #240]	@ (80a35d0 <HAL_RCC_ClockConfig+0x358>)
 80a34de:	699b      	ldr	r3, [r3, #24]
 80a34e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80a34e4:	687b      	ldr	r3, [r7, #4]
 80a34e6:	691b      	ldr	r3, [r3, #16]
 80a34e8:	4939      	ldr	r1, [pc, #228]	@ (80a35d0 <HAL_RCC_ClockConfig+0x358>)
 80a34ea:	4313      	orrs	r3, r2
 80a34ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80a34ee:	687b      	ldr	r3, [r7, #4]
 80a34f0:	681b      	ldr	r3, [r3, #0]
 80a34f2:	f003 0308 	and.w	r3, r3, #8
 80a34f6:	2b00      	cmp	r3, #0
 80a34f8:	d010      	beq.n	80a351c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80a34fa:	687b      	ldr	r3, [r7, #4]
 80a34fc:	695a      	ldr	r2, [r3, #20]
 80a34fe:	4b34      	ldr	r3, [pc, #208]	@ (80a35d0 <HAL_RCC_ClockConfig+0x358>)
 80a3500:	69db      	ldr	r3, [r3, #28]
 80a3502:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80a3506:	429a      	cmp	r2, r3
 80a3508:	d208      	bcs.n	80a351c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80a350a:	4b31      	ldr	r3, [pc, #196]	@ (80a35d0 <HAL_RCC_ClockConfig+0x358>)
 80a350c:	69db      	ldr	r3, [r3, #28]
 80a350e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80a3512:	687b      	ldr	r3, [r7, #4]
 80a3514:	695b      	ldr	r3, [r3, #20]
 80a3516:	492e      	ldr	r1, [pc, #184]	@ (80a35d0 <HAL_RCC_ClockConfig+0x358>)
 80a3518:	4313      	orrs	r3, r2
 80a351a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80a351c:	687b      	ldr	r3, [r7, #4]
 80a351e:	681b      	ldr	r3, [r3, #0]
 80a3520:	f003 0310 	and.w	r3, r3, #16
 80a3524:	2b00      	cmp	r3, #0
 80a3526:	d010      	beq.n	80a354a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80a3528:	687b      	ldr	r3, [r7, #4]
 80a352a:	699a      	ldr	r2, [r3, #24]
 80a352c:	4b28      	ldr	r3, [pc, #160]	@ (80a35d0 <HAL_RCC_ClockConfig+0x358>)
 80a352e:	69db      	ldr	r3, [r3, #28]
 80a3530:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80a3534:	429a      	cmp	r2, r3
 80a3536:	d208      	bcs.n	80a354a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80a3538:	4b25      	ldr	r3, [pc, #148]	@ (80a35d0 <HAL_RCC_ClockConfig+0x358>)
 80a353a:	69db      	ldr	r3, [r3, #28]
 80a353c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80a3540:	687b      	ldr	r3, [r7, #4]
 80a3542:	699b      	ldr	r3, [r3, #24]
 80a3544:	4922      	ldr	r1, [pc, #136]	@ (80a35d0 <HAL_RCC_ClockConfig+0x358>)
 80a3546:	4313      	orrs	r3, r2
 80a3548:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80a354a:	687b      	ldr	r3, [r7, #4]
 80a354c:	681b      	ldr	r3, [r3, #0]
 80a354e:	f003 0320 	and.w	r3, r3, #32
 80a3552:	2b00      	cmp	r3, #0
 80a3554:	d010      	beq.n	80a3578 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80a3556:	687b      	ldr	r3, [r7, #4]
 80a3558:	69da      	ldr	r2, [r3, #28]
 80a355a:	4b1d      	ldr	r3, [pc, #116]	@ (80a35d0 <HAL_RCC_ClockConfig+0x358>)
 80a355c:	6a1b      	ldr	r3, [r3, #32]
 80a355e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80a3562:	429a      	cmp	r2, r3
 80a3564:	d208      	bcs.n	80a3578 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80a3566:	4b1a      	ldr	r3, [pc, #104]	@ (80a35d0 <HAL_RCC_ClockConfig+0x358>)
 80a3568:	6a1b      	ldr	r3, [r3, #32]
 80a356a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80a356e:	687b      	ldr	r3, [r7, #4]
 80a3570:	69db      	ldr	r3, [r3, #28]
 80a3572:	4917      	ldr	r1, [pc, #92]	@ (80a35d0 <HAL_RCC_ClockConfig+0x358>)
 80a3574:	4313      	orrs	r3, r2
 80a3576:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80a3578:	f000 f89e 	bl	80a36b8 <HAL_RCC_GetSysClockFreq>
 80a357c:	4602      	mov	r2, r0
 80a357e:	4b14      	ldr	r3, [pc, #80]	@ (80a35d0 <HAL_RCC_ClockConfig+0x358>)
 80a3580:	699b      	ldr	r3, [r3, #24]
 80a3582:	0a1b      	lsrs	r3, r3, #8
 80a3584:	f003 030f 	and.w	r3, r3, #15
 80a3588:	4912      	ldr	r1, [pc, #72]	@ (80a35d4 <HAL_RCC_ClockConfig+0x35c>)
 80a358a:	5ccb      	ldrb	r3, [r1, r3]
 80a358c:	f003 031f 	and.w	r3, r3, #31
 80a3590:	fa22 f303 	lsr.w	r3, r2, r3
 80a3594:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80a3596:	4b0e      	ldr	r3, [pc, #56]	@ (80a35d0 <HAL_RCC_ClockConfig+0x358>)
 80a3598:	699b      	ldr	r3, [r3, #24]
 80a359a:	f003 030f 	and.w	r3, r3, #15
 80a359e:	4a0d      	ldr	r2, [pc, #52]	@ (80a35d4 <HAL_RCC_ClockConfig+0x35c>)
 80a35a0:	5cd3      	ldrb	r3, [r2, r3]
 80a35a2:	f003 031f 	and.w	r3, r3, #31
 80a35a6:	693a      	ldr	r2, [r7, #16]
 80a35a8:	fa22 f303 	lsr.w	r3, r2, r3
 80a35ac:	4a0a      	ldr	r2, [pc, #40]	@ (80a35d8 <HAL_RCC_ClockConfig+0x360>)
 80a35ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80a35b0:	4a0a      	ldr	r2, [pc, #40]	@ (80a35dc <HAL_RCC_ClockConfig+0x364>)
 80a35b2:	693b      	ldr	r3, [r7, #16]
 80a35b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80a35b6:	4b0a      	ldr	r3, [pc, #40]	@ (80a35e0 <HAL_RCC_ClockConfig+0x368>)
 80a35b8:	681b      	ldr	r3, [r3, #0]
 80a35ba:	4618      	mov	r0, r3
 80a35bc:	f7fd fb36 	bl	80a0c2c <HAL_InitTick>
 80a35c0:	4603      	mov	r3, r0
 80a35c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80a35c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80a35c6:	4618      	mov	r0, r3
 80a35c8:	3718      	adds	r7, #24
 80a35ca:	46bd      	mov	sp, r7
 80a35cc:	bd80      	pop	{r7, pc}
 80a35ce:	bf00      	nop
 80a35d0:	58024400 	.word	0x58024400
 80a35d4:	080aa250 	.word	0x080aa250
 80a35d8:	24000004 	.word	0x24000004
 80a35dc:	24000000 	.word	0x24000000
 80a35e0:	24000008 	.word	0x24000008

080a35e4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80a35e4:	b580      	push	{r7, lr}
 80a35e6:	b08c      	sub	sp, #48	@ 0x30
 80a35e8:	af00      	add	r7, sp, #0
 80a35ea:	60f8      	str	r0, [r7, #12]
 80a35ec:	60b9      	str	r1, [r7, #8]
 80a35ee:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80a35f0:	68fb      	ldr	r3, [r7, #12]
 80a35f2:	2b00      	cmp	r3, #0
 80a35f4:	d12a      	bne.n	80a364c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80a35f6:	4b2d      	ldr	r3, [pc, #180]	@ (80a36ac <HAL_RCC_MCOConfig+0xc8>)
 80a35f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a35fc:	4a2b      	ldr	r2, [pc, #172]	@ (80a36ac <HAL_RCC_MCOConfig+0xc8>)
 80a35fe:	f043 0301 	orr.w	r3, r3, #1
 80a3602:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a3606:	4b29      	ldr	r3, [pc, #164]	@ (80a36ac <HAL_RCC_MCOConfig+0xc8>)
 80a3608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a360c:	f003 0301 	and.w	r3, r3, #1
 80a3610:	61bb      	str	r3, [r7, #24]
 80a3612:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80a3614:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80a3618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a361a:	2302      	movs	r3, #2
 80a361c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80a361e:	2303      	movs	r3, #3
 80a3620:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a3622:	2300      	movs	r3, #0
 80a3624:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80a3626:	2300      	movs	r3, #0
 80a3628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80a362a:	f107 031c 	add.w	r3, r7, #28
 80a362e:	4619      	mov	r1, r3
 80a3630:	481f      	ldr	r0, [pc, #124]	@ (80a36b0 <HAL_RCC_MCOConfig+0xcc>)
 80a3632:	f7fd fc91 	bl	80a0f58 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80a3636:	4b1d      	ldr	r3, [pc, #116]	@ (80a36ac <HAL_RCC_MCOConfig+0xc8>)
 80a3638:	691b      	ldr	r3, [r3, #16]
 80a363a:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 80a363e:	68b9      	ldr	r1, [r7, #8]
 80a3640:	687b      	ldr	r3, [r7, #4]
 80a3642:	430b      	orrs	r3, r1
 80a3644:	4919      	ldr	r1, [pc, #100]	@ (80a36ac <HAL_RCC_MCOConfig+0xc8>)
 80a3646:	4313      	orrs	r3, r2
 80a3648:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80a364a:	e02a      	b.n	80a36a2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80a364c:	4b17      	ldr	r3, [pc, #92]	@ (80a36ac <HAL_RCC_MCOConfig+0xc8>)
 80a364e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a3652:	4a16      	ldr	r2, [pc, #88]	@ (80a36ac <HAL_RCC_MCOConfig+0xc8>)
 80a3654:	f043 0304 	orr.w	r3, r3, #4
 80a3658:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a365c:	4b13      	ldr	r3, [pc, #76]	@ (80a36ac <HAL_RCC_MCOConfig+0xc8>)
 80a365e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a3662:	f003 0304 	and.w	r3, r3, #4
 80a3666:	617b      	str	r3, [r7, #20]
 80a3668:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80a366a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80a366e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a3670:	2302      	movs	r3, #2
 80a3672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80a3674:	2303      	movs	r3, #3
 80a3676:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a3678:	2300      	movs	r3, #0
 80a367a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80a367c:	2300      	movs	r3, #0
 80a367e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80a3680:	f107 031c 	add.w	r3, r7, #28
 80a3684:	4619      	mov	r1, r3
 80a3686:	480b      	ldr	r0, [pc, #44]	@ (80a36b4 <HAL_RCC_MCOConfig+0xd0>)
 80a3688:	f7fd fc66 	bl	80a0f58 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80a368c:	4b07      	ldr	r3, [pc, #28]	@ (80a36ac <HAL_RCC_MCOConfig+0xc8>)
 80a368e:	691b      	ldr	r3, [r3, #16]
 80a3690:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80a3694:	687b      	ldr	r3, [r7, #4]
 80a3696:	01d9      	lsls	r1, r3, #7
 80a3698:	68bb      	ldr	r3, [r7, #8]
 80a369a:	430b      	orrs	r3, r1
 80a369c:	4903      	ldr	r1, [pc, #12]	@ (80a36ac <HAL_RCC_MCOConfig+0xc8>)
 80a369e:	4313      	orrs	r3, r2
 80a36a0:	610b      	str	r3, [r1, #16]
}
 80a36a2:	bf00      	nop
 80a36a4:	3730      	adds	r7, #48	@ 0x30
 80a36a6:	46bd      	mov	sp, r7
 80a36a8:	bd80      	pop	{r7, pc}
 80a36aa:	bf00      	nop
 80a36ac:	58024400 	.word	0x58024400
 80a36b0:	58020000 	.word	0x58020000
 80a36b4:	58020800 	.word	0x58020800

080a36b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80a36b8:	b480      	push	{r7}
 80a36ba:	b089      	sub	sp, #36	@ 0x24
 80a36bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80a36be:	4bb3      	ldr	r3, [pc, #716]	@ (80a398c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a36c0:	691b      	ldr	r3, [r3, #16]
 80a36c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80a36c6:	2b18      	cmp	r3, #24
 80a36c8:	f200 8155 	bhi.w	80a3976 <HAL_RCC_GetSysClockFreq+0x2be>
 80a36cc:	a201      	add	r2, pc, #4	@ (adr r2, 80a36d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80a36ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a36d2:	bf00      	nop
 80a36d4:	080a3739 	.word	0x080a3739
 80a36d8:	080a3977 	.word	0x080a3977
 80a36dc:	080a3977 	.word	0x080a3977
 80a36e0:	080a3977 	.word	0x080a3977
 80a36e4:	080a3977 	.word	0x080a3977
 80a36e8:	080a3977 	.word	0x080a3977
 80a36ec:	080a3977 	.word	0x080a3977
 80a36f0:	080a3977 	.word	0x080a3977
 80a36f4:	080a375f 	.word	0x080a375f
 80a36f8:	080a3977 	.word	0x080a3977
 80a36fc:	080a3977 	.word	0x080a3977
 80a3700:	080a3977 	.word	0x080a3977
 80a3704:	080a3977 	.word	0x080a3977
 80a3708:	080a3977 	.word	0x080a3977
 80a370c:	080a3977 	.word	0x080a3977
 80a3710:	080a3977 	.word	0x080a3977
 80a3714:	080a3765 	.word	0x080a3765
 80a3718:	080a3977 	.word	0x080a3977
 80a371c:	080a3977 	.word	0x080a3977
 80a3720:	080a3977 	.word	0x080a3977
 80a3724:	080a3977 	.word	0x080a3977
 80a3728:	080a3977 	.word	0x080a3977
 80a372c:	080a3977 	.word	0x080a3977
 80a3730:	080a3977 	.word	0x080a3977
 80a3734:	080a376b 	.word	0x080a376b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80a3738:	4b94      	ldr	r3, [pc, #592]	@ (80a398c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a373a:	681b      	ldr	r3, [r3, #0]
 80a373c:	f003 0320 	and.w	r3, r3, #32
 80a3740:	2b00      	cmp	r3, #0
 80a3742:	d009      	beq.n	80a3758 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80a3744:	4b91      	ldr	r3, [pc, #580]	@ (80a398c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a3746:	681b      	ldr	r3, [r3, #0]
 80a3748:	08db      	lsrs	r3, r3, #3
 80a374a:	f003 0303 	and.w	r3, r3, #3
 80a374e:	4a90      	ldr	r2, [pc, #576]	@ (80a3990 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80a3750:	fa22 f303 	lsr.w	r3, r2, r3
 80a3754:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80a3756:	e111      	b.n	80a397c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80a3758:	4b8d      	ldr	r3, [pc, #564]	@ (80a3990 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80a375a:	61bb      	str	r3, [r7, #24]
      break;
 80a375c:	e10e      	b.n	80a397c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80a375e:	4b8d      	ldr	r3, [pc, #564]	@ (80a3994 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80a3760:	61bb      	str	r3, [r7, #24]
      break;
 80a3762:	e10b      	b.n	80a397c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80a3764:	4b8c      	ldr	r3, [pc, #560]	@ (80a3998 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80a3766:	61bb      	str	r3, [r7, #24]
      break;
 80a3768:	e108      	b.n	80a397c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80a376a:	4b88      	ldr	r3, [pc, #544]	@ (80a398c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a376c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a376e:	f003 0303 	and.w	r3, r3, #3
 80a3772:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80a3774:	4b85      	ldr	r3, [pc, #532]	@ (80a398c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a3776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a3778:	091b      	lsrs	r3, r3, #4
 80a377a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80a377e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80a3780:	4b82      	ldr	r3, [pc, #520]	@ (80a398c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a3782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a3784:	f003 0301 	and.w	r3, r3, #1
 80a3788:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80a378a:	4b80      	ldr	r3, [pc, #512]	@ (80a398c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a378c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80a378e:	08db      	lsrs	r3, r3, #3
 80a3790:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80a3794:	68fa      	ldr	r2, [r7, #12]
 80a3796:	fb02 f303 	mul.w	r3, r2, r3
 80a379a:	ee07 3a90 	vmov	s15, r3
 80a379e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a37a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80a37a6:	693b      	ldr	r3, [r7, #16]
 80a37a8:	2b00      	cmp	r3, #0
 80a37aa:	f000 80e1 	beq.w	80a3970 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80a37ae:	697b      	ldr	r3, [r7, #20]
 80a37b0:	2b02      	cmp	r3, #2
 80a37b2:	f000 8083 	beq.w	80a38bc <HAL_RCC_GetSysClockFreq+0x204>
 80a37b6:	697b      	ldr	r3, [r7, #20]
 80a37b8:	2b02      	cmp	r3, #2
 80a37ba:	f200 80a1 	bhi.w	80a3900 <HAL_RCC_GetSysClockFreq+0x248>
 80a37be:	697b      	ldr	r3, [r7, #20]
 80a37c0:	2b00      	cmp	r3, #0
 80a37c2:	d003      	beq.n	80a37cc <HAL_RCC_GetSysClockFreq+0x114>
 80a37c4:	697b      	ldr	r3, [r7, #20]
 80a37c6:	2b01      	cmp	r3, #1
 80a37c8:	d056      	beq.n	80a3878 <HAL_RCC_GetSysClockFreq+0x1c0>
 80a37ca:	e099      	b.n	80a3900 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80a37cc:	4b6f      	ldr	r3, [pc, #444]	@ (80a398c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a37ce:	681b      	ldr	r3, [r3, #0]
 80a37d0:	f003 0320 	and.w	r3, r3, #32
 80a37d4:	2b00      	cmp	r3, #0
 80a37d6:	d02d      	beq.n	80a3834 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80a37d8:	4b6c      	ldr	r3, [pc, #432]	@ (80a398c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a37da:	681b      	ldr	r3, [r3, #0]
 80a37dc:	08db      	lsrs	r3, r3, #3
 80a37de:	f003 0303 	and.w	r3, r3, #3
 80a37e2:	4a6b      	ldr	r2, [pc, #428]	@ (80a3990 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80a37e4:	fa22 f303 	lsr.w	r3, r2, r3
 80a37e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80a37ea:	687b      	ldr	r3, [r7, #4]
 80a37ec:	ee07 3a90 	vmov	s15, r3
 80a37f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80a37f4:	693b      	ldr	r3, [r7, #16]
 80a37f6:	ee07 3a90 	vmov	s15, r3
 80a37fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a37fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80a3802:	4b62      	ldr	r3, [pc, #392]	@ (80a398c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a3804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a3806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a380a:	ee07 3a90 	vmov	s15, r3
 80a380e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80a3812:	ed97 6a02 	vldr	s12, [r7, #8]
 80a3816:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80a399c <HAL_RCC_GetSysClockFreq+0x2e4>
 80a381a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80a381e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80a3822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80a3826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80a382a:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a382e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80a3832:	e087      	b.n	80a3944 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80a3834:	693b      	ldr	r3, [r7, #16]
 80a3836:	ee07 3a90 	vmov	s15, r3
 80a383a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a383e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80a39a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 80a3842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80a3846:	4b51      	ldr	r3, [pc, #324]	@ (80a398c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a3848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a384a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a384e:	ee07 3a90 	vmov	s15, r3
 80a3852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80a3856:	ed97 6a02 	vldr	s12, [r7, #8]
 80a385a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80a399c <HAL_RCC_GetSysClockFreq+0x2e4>
 80a385e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80a3862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80a3866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80a386a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80a386e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a3872:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80a3876:	e065      	b.n	80a3944 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80a3878:	693b      	ldr	r3, [r7, #16]
 80a387a:	ee07 3a90 	vmov	s15, r3
 80a387e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a3882:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80a39a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80a3886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80a388a:	4b40      	ldr	r3, [pc, #256]	@ (80a398c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a388c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a388e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a3892:	ee07 3a90 	vmov	s15, r3
 80a3896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80a389a:	ed97 6a02 	vldr	s12, [r7, #8]
 80a389e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80a399c <HAL_RCC_GetSysClockFreq+0x2e4>
 80a38a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80a38a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80a38aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80a38ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80a38b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a38b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80a38ba:	e043      	b.n	80a3944 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80a38bc:	693b      	ldr	r3, [r7, #16]
 80a38be:	ee07 3a90 	vmov	s15, r3
 80a38c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a38c6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80a39a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80a38ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80a38ce:	4b2f      	ldr	r3, [pc, #188]	@ (80a398c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a38d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a38d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a38d6:	ee07 3a90 	vmov	s15, r3
 80a38da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80a38de:	ed97 6a02 	vldr	s12, [r7, #8]
 80a38e2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80a399c <HAL_RCC_GetSysClockFreq+0x2e4>
 80a38e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80a38ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80a38ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80a38f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80a38f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a38fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80a38fe:	e021      	b.n	80a3944 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80a3900:	693b      	ldr	r3, [r7, #16]
 80a3902:	ee07 3a90 	vmov	s15, r3
 80a3906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80a390a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80a39a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80a390e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80a3912:	4b1e      	ldr	r3, [pc, #120]	@ (80a398c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a3914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a3916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a391a:	ee07 3a90 	vmov	s15, r3
 80a391e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80a3922:	ed97 6a02 	vldr	s12, [r7, #8]
 80a3926:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80a399c <HAL_RCC_GetSysClockFreq+0x2e4>
 80a392a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80a392e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80a3932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80a3936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80a393a:	ee67 7a27 	vmul.f32	s15, s14, s15
 80a393e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80a3942:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80a3944:	4b11      	ldr	r3, [pc, #68]	@ (80a398c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80a3946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a3948:	0a5b      	lsrs	r3, r3, #9
 80a394a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80a394e:	3301      	adds	r3, #1
 80a3950:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80a3952:	683b      	ldr	r3, [r7, #0]
 80a3954:	ee07 3a90 	vmov	s15, r3
 80a3958:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80a395c:	edd7 6a07 	vldr	s13, [r7, #28]
 80a3960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80a3964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80a3968:	ee17 3a90 	vmov	r3, s15
 80a396c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80a396e:	e005      	b.n	80a397c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80a3970:	2300      	movs	r3, #0
 80a3972:	61bb      	str	r3, [r7, #24]
      break;
 80a3974:	e002      	b.n	80a397c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80a3976:	4b07      	ldr	r3, [pc, #28]	@ (80a3994 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80a3978:	61bb      	str	r3, [r7, #24]
      break;
 80a397a:	bf00      	nop
  }

  return sysclockfreq;
 80a397c:	69bb      	ldr	r3, [r7, #24]
}
 80a397e:	4618      	mov	r0, r3
 80a3980:	3724      	adds	r7, #36	@ 0x24
 80a3982:	46bd      	mov	sp, r7
 80a3984:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a3988:	4770      	bx	lr
 80a398a:	bf00      	nop
 80a398c:	58024400 	.word	0x58024400
 80a3990:	03d09000 	.word	0x03d09000
 80a3994:	003d0900 	.word	0x003d0900
 80a3998:	017d7840 	.word	0x017d7840
 80a399c:	46000000 	.word	0x46000000
 80a39a0:	4c742400 	.word	0x4c742400
 80a39a4:	4a742400 	.word	0x4a742400
 80a39a8:	4bbebc20 	.word	0x4bbebc20

080a39ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80a39ac:	b580      	push	{r7, lr}
 80a39ae:	b082      	sub	sp, #8
 80a39b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80a39b2:	f7ff fe81 	bl	80a36b8 <HAL_RCC_GetSysClockFreq>
 80a39b6:	4602      	mov	r2, r0
 80a39b8:	4b10      	ldr	r3, [pc, #64]	@ (80a39fc <HAL_RCC_GetHCLKFreq+0x50>)
 80a39ba:	699b      	ldr	r3, [r3, #24]
 80a39bc:	0a1b      	lsrs	r3, r3, #8
 80a39be:	f003 030f 	and.w	r3, r3, #15
 80a39c2:	490f      	ldr	r1, [pc, #60]	@ (80a3a00 <HAL_RCC_GetHCLKFreq+0x54>)
 80a39c4:	5ccb      	ldrb	r3, [r1, r3]
 80a39c6:	f003 031f 	and.w	r3, r3, #31
 80a39ca:	fa22 f303 	lsr.w	r3, r2, r3
 80a39ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80a39d0:	4b0a      	ldr	r3, [pc, #40]	@ (80a39fc <HAL_RCC_GetHCLKFreq+0x50>)
 80a39d2:	699b      	ldr	r3, [r3, #24]
 80a39d4:	f003 030f 	and.w	r3, r3, #15
 80a39d8:	4a09      	ldr	r2, [pc, #36]	@ (80a3a00 <HAL_RCC_GetHCLKFreq+0x54>)
 80a39da:	5cd3      	ldrb	r3, [r2, r3]
 80a39dc:	f003 031f 	and.w	r3, r3, #31
 80a39e0:	687a      	ldr	r2, [r7, #4]
 80a39e2:	fa22 f303 	lsr.w	r3, r2, r3
 80a39e6:	4a07      	ldr	r2, [pc, #28]	@ (80a3a04 <HAL_RCC_GetHCLKFreq+0x58>)
 80a39e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80a39ea:	4a07      	ldr	r2, [pc, #28]	@ (80a3a08 <HAL_RCC_GetHCLKFreq+0x5c>)
 80a39ec:	687b      	ldr	r3, [r7, #4]
 80a39ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80a39f0:	4b04      	ldr	r3, [pc, #16]	@ (80a3a04 <HAL_RCC_GetHCLKFreq+0x58>)
 80a39f2:	681b      	ldr	r3, [r3, #0]
}
 80a39f4:	4618      	mov	r0, r3
 80a39f6:	3708      	adds	r7, #8
 80a39f8:	46bd      	mov	sp, r7
 80a39fa:	bd80      	pop	{r7, pc}
 80a39fc:	58024400 	.word	0x58024400
 80a3a00:	080aa250 	.word	0x080aa250
 80a3a04:	24000004 	.word	0x24000004
 80a3a08:	24000000 	.word	0x24000000

080a3a0c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80a3a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80a3a10:	b0cc      	sub	sp, #304	@ 0x130
 80a3a12:	af00      	add	r7, sp, #0
 80a3a14:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80a3a18:	2300      	movs	r3, #0
 80a3a1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80a3a1e:	2300      	movs	r3, #0
 80a3a20:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80a3a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a2c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80a3a30:	2500      	movs	r5, #0
 80a3a32:	ea54 0305 	orrs.w	r3, r4, r5
 80a3a36:	d049      	beq.n	80a3acc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80a3a38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80a3a3e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80a3a42:	d02f      	beq.n	80a3aa4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80a3a44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80a3a48:	d828      	bhi.n	80a3a9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80a3a4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80a3a4e:	d01a      	beq.n	80a3a86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80a3a50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80a3a54:	d822      	bhi.n	80a3a9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80a3a56:	2b00      	cmp	r3, #0
 80a3a58:	d003      	beq.n	80a3a62 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80a3a5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80a3a5e:	d007      	beq.n	80a3a70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80a3a60:	e01c      	b.n	80a3a9c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a3a62:	4bb8      	ldr	r3, [pc, #736]	@ (80a3d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a3a66:	4ab7      	ldr	r2, [pc, #732]	@ (80a3d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a3a6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80a3a6e:	e01a      	b.n	80a3aa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80a3a70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3a74:	3308      	adds	r3, #8
 80a3a76:	2102      	movs	r1, #2
 80a3a78:	4618      	mov	r0, r3
 80a3a7a:	f001 fa11 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a3a7e:	4603      	mov	r3, r0
 80a3a80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80a3a84:	e00f      	b.n	80a3aa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80a3a86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3a8a:	3328      	adds	r3, #40	@ 0x28
 80a3a8c:	2102      	movs	r1, #2
 80a3a8e:	4618      	mov	r0, r3
 80a3a90:	f001 fab8 	bl	80a5004 <RCCEx_PLL3_Config>
 80a3a94:	4603      	mov	r3, r0
 80a3a96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80a3a9a:	e004      	b.n	80a3aa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a3a9c:	2301      	movs	r3, #1
 80a3a9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3aa2:	e000      	b.n	80a3aa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80a3aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3aa6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3aaa:	2b00      	cmp	r3, #0
 80a3aac:	d10a      	bne.n	80a3ac4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80a3aae:	4ba5      	ldr	r3, [pc, #660]	@ (80a3d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a3ab2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80a3ab6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80a3abc:	4aa1      	ldr	r2, [pc, #644]	@ (80a3d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3abe:	430b      	orrs	r3, r1
 80a3ac0:	6513      	str	r3, [r2, #80]	@ 0x50
 80a3ac2:	e003      	b.n	80a3acc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3ac4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3ac8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80a3acc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3ad4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80a3ad8:	f04f 0900 	mov.w	r9, #0
 80a3adc:	ea58 0309 	orrs.w	r3, r8, r9
 80a3ae0:	d047      	beq.n	80a3b72 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80a3ae2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80a3ae8:	2b04      	cmp	r3, #4
 80a3aea:	d82a      	bhi.n	80a3b42 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80a3aec:	a201      	add	r2, pc, #4	@ (adr r2, 80a3af4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80a3aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a3af2:	bf00      	nop
 80a3af4:	080a3b09 	.word	0x080a3b09
 80a3af8:	080a3b17 	.word	0x080a3b17
 80a3afc:	080a3b2d 	.word	0x080a3b2d
 80a3b00:	080a3b4b 	.word	0x080a3b4b
 80a3b04:	080a3b4b 	.word	0x080a3b4b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a3b08:	4b8e      	ldr	r3, [pc, #568]	@ (80a3d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a3b0c:	4a8d      	ldr	r2, [pc, #564]	@ (80a3d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a3b12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80a3b14:	e01a      	b.n	80a3b4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a3b16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3b1a:	3308      	adds	r3, #8
 80a3b1c:	2100      	movs	r1, #0
 80a3b1e:	4618      	mov	r0, r3
 80a3b20:	f001 f9be 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a3b24:	4603      	mov	r3, r0
 80a3b26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80a3b2a:	e00f      	b.n	80a3b4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80a3b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3b30:	3328      	adds	r3, #40	@ 0x28
 80a3b32:	2100      	movs	r1, #0
 80a3b34:	4618      	mov	r0, r3
 80a3b36:	f001 fa65 	bl	80a5004 <RCCEx_PLL3_Config>
 80a3b3a:	4603      	mov	r3, r0
 80a3b3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80a3b40:	e004      	b.n	80a3b4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a3b42:	2301      	movs	r3, #1
 80a3b44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3b48:	e000      	b.n	80a3b4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80a3b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3b4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3b50:	2b00      	cmp	r3, #0
 80a3b52:	d10a      	bne.n	80a3b6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80a3b54:	4b7b      	ldr	r3, [pc, #492]	@ (80a3d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a3b58:	f023 0107 	bic.w	r1, r3, #7
 80a3b5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80a3b62:	4a78      	ldr	r2, [pc, #480]	@ (80a3d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3b64:	430b      	orrs	r3, r1
 80a3b66:	6513      	str	r3, [r2, #80]	@ 0x50
 80a3b68:	e003      	b.n	80a3b72 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3b6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3b6e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80a3b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b7a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80a3b7e:	f04f 0b00 	mov.w	fp, #0
 80a3b82:	ea5a 030b 	orrs.w	r3, sl, fp
 80a3b86:	d04c      	beq.n	80a3c22 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80a3b88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80a3b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80a3b92:	d030      	beq.n	80a3bf6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80a3b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80a3b98:	d829      	bhi.n	80a3bee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80a3b9a:	2bc0      	cmp	r3, #192	@ 0xc0
 80a3b9c:	d02d      	beq.n	80a3bfa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80a3b9e:	2bc0      	cmp	r3, #192	@ 0xc0
 80a3ba0:	d825      	bhi.n	80a3bee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80a3ba2:	2b80      	cmp	r3, #128	@ 0x80
 80a3ba4:	d018      	beq.n	80a3bd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80a3ba6:	2b80      	cmp	r3, #128	@ 0x80
 80a3ba8:	d821      	bhi.n	80a3bee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80a3baa:	2b00      	cmp	r3, #0
 80a3bac:	d002      	beq.n	80a3bb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80a3bae:	2b40      	cmp	r3, #64	@ 0x40
 80a3bb0:	d007      	beq.n	80a3bc2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80a3bb2:	e01c      	b.n	80a3bee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a3bb4:	4b63      	ldr	r3, [pc, #396]	@ (80a3d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a3bb8:	4a62      	ldr	r2, [pc, #392]	@ (80a3d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3bba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a3bbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80a3bc0:	e01c      	b.n	80a3bfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a3bc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3bc6:	3308      	adds	r3, #8
 80a3bc8:	2100      	movs	r1, #0
 80a3bca:	4618      	mov	r0, r3
 80a3bcc:	f001 f968 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a3bd0:	4603      	mov	r3, r0
 80a3bd2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80a3bd6:	e011      	b.n	80a3bfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80a3bd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3bdc:	3328      	adds	r3, #40	@ 0x28
 80a3bde:	2100      	movs	r1, #0
 80a3be0:	4618      	mov	r0, r3
 80a3be2:	f001 fa0f 	bl	80a5004 <RCCEx_PLL3_Config>
 80a3be6:	4603      	mov	r3, r0
 80a3be8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80a3bec:	e006      	b.n	80a3bfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a3bee:	2301      	movs	r3, #1
 80a3bf0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3bf4:	e002      	b.n	80a3bfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80a3bf6:	bf00      	nop
 80a3bf8:	e000      	b.n	80a3bfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80a3bfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3bfc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3c00:	2b00      	cmp	r3, #0
 80a3c02:	d10a      	bne.n	80a3c1a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80a3c04:	4b4f      	ldr	r3, [pc, #316]	@ (80a3d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a3c08:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80a3c0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80a3c12:	4a4c      	ldr	r2, [pc, #304]	@ (80a3d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3c14:	430b      	orrs	r3, r1
 80a3c16:	6513      	str	r3, [r2, #80]	@ 0x50
 80a3c18:	e003      	b.n	80a3c22 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3c1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3c1e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80a3c22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c2a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80a3c2e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80a3c32:	2300      	movs	r3, #0
 80a3c34:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80a3c38:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80a3c3c:	460b      	mov	r3, r1
 80a3c3e:	4313      	orrs	r3, r2
 80a3c40:	d053      	beq.n	80a3cea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80a3c42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3c46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80a3c4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80a3c4e:	d035      	beq.n	80a3cbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80a3c50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80a3c54:	d82e      	bhi.n	80a3cb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80a3c56:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80a3c5a:	d031      	beq.n	80a3cc0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80a3c5c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80a3c60:	d828      	bhi.n	80a3cb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80a3c62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80a3c66:	d01a      	beq.n	80a3c9e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80a3c68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80a3c6c:	d822      	bhi.n	80a3cb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80a3c6e:	2b00      	cmp	r3, #0
 80a3c70:	d003      	beq.n	80a3c7a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80a3c72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80a3c76:	d007      	beq.n	80a3c88 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80a3c78:	e01c      	b.n	80a3cb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a3c7a:	4b32      	ldr	r3, [pc, #200]	@ (80a3d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a3c7e:	4a31      	ldr	r2, [pc, #196]	@ (80a3d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a3c84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80a3c86:	e01c      	b.n	80a3cc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a3c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3c8c:	3308      	adds	r3, #8
 80a3c8e:	2100      	movs	r1, #0
 80a3c90:	4618      	mov	r0, r3
 80a3c92:	f001 f905 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a3c96:	4603      	mov	r3, r0
 80a3c98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80a3c9c:	e011      	b.n	80a3cc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80a3c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3ca2:	3328      	adds	r3, #40	@ 0x28
 80a3ca4:	2100      	movs	r1, #0
 80a3ca6:	4618      	mov	r0, r3
 80a3ca8:	f001 f9ac 	bl	80a5004 <RCCEx_PLL3_Config>
 80a3cac:	4603      	mov	r3, r0
 80a3cae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80a3cb2:	e006      	b.n	80a3cc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80a3cb4:	2301      	movs	r3, #1
 80a3cb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3cba:	e002      	b.n	80a3cc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80a3cbc:	bf00      	nop
 80a3cbe:	e000      	b.n	80a3cc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80a3cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3cc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3cc6:	2b00      	cmp	r3, #0
 80a3cc8:	d10b      	bne.n	80a3ce2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80a3cca:	4b1e      	ldr	r3, [pc, #120]	@ (80a3d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a3cce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80a3cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3cd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80a3cda:	4a1a      	ldr	r2, [pc, #104]	@ (80a3d44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80a3cdc:	430b      	orrs	r3, r1
 80a3cde:	6593      	str	r3, [r2, #88]	@ 0x58
 80a3ce0:	e003      	b.n	80a3cea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3ce2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3ce6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80a3cea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3cf2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80a3cf6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80a3cfa:	2300      	movs	r3, #0
 80a3cfc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80a3d00:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80a3d04:	460b      	mov	r3, r1
 80a3d06:	4313      	orrs	r3, r2
 80a3d08:	d056      	beq.n	80a3db8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80a3d0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3d0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80a3d12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80a3d16:	d038      	beq.n	80a3d8a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80a3d18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80a3d1c:	d831      	bhi.n	80a3d82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80a3d1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80a3d22:	d034      	beq.n	80a3d8e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80a3d24:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80a3d28:	d82b      	bhi.n	80a3d82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80a3d2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80a3d2e:	d01d      	beq.n	80a3d6c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80a3d30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80a3d34:	d825      	bhi.n	80a3d82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80a3d36:	2b00      	cmp	r3, #0
 80a3d38:	d006      	beq.n	80a3d48 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80a3d3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80a3d3e:	d00a      	beq.n	80a3d56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80a3d40:	e01f      	b.n	80a3d82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80a3d42:	bf00      	nop
 80a3d44:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a3d48:	4ba2      	ldr	r3, [pc, #648]	@ (80a3fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a3d4c:	4aa1      	ldr	r2, [pc, #644]	@ (80a3fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a3d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80a3d54:	e01c      	b.n	80a3d90 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a3d56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3d5a:	3308      	adds	r3, #8
 80a3d5c:	2100      	movs	r1, #0
 80a3d5e:	4618      	mov	r0, r3
 80a3d60:	f001 f89e 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a3d64:	4603      	mov	r3, r0
 80a3d66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80a3d6a:	e011      	b.n	80a3d90 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80a3d6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3d70:	3328      	adds	r3, #40	@ 0x28
 80a3d72:	2100      	movs	r1, #0
 80a3d74:	4618      	mov	r0, r3
 80a3d76:	f001 f945 	bl	80a5004 <RCCEx_PLL3_Config>
 80a3d7a:	4603      	mov	r3, r0
 80a3d7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80a3d80:	e006      	b.n	80a3d90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80a3d82:	2301      	movs	r3, #1
 80a3d84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3d88:	e002      	b.n	80a3d90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80a3d8a:	bf00      	nop
 80a3d8c:	e000      	b.n	80a3d90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80a3d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3d90:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3d94:	2b00      	cmp	r3, #0
 80a3d96:	d10b      	bne.n	80a3db0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80a3d98:	4b8e      	ldr	r3, [pc, #568]	@ (80a3fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a3d9c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80a3da0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80a3da8:	4a8a      	ldr	r2, [pc, #552]	@ (80a3fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3daa:	430b      	orrs	r3, r1
 80a3dac:	6593      	str	r3, [r2, #88]	@ 0x58
 80a3dae:	e003      	b.n	80a3db8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3db0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3db4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80a3db8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3dc0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80a3dc4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80a3dc8:	2300      	movs	r3, #0
 80a3dca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80a3dce:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80a3dd2:	460b      	mov	r3, r1
 80a3dd4:	4313      	orrs	r3, r2
 80a3dd6:	d03a      	beq.n	80a3e4e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80a3dd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80a3dde:	2b30      	cmp	r3, #48	@ 0x30
 80a3de0:	d01f      	beq.n	80a3e22 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80a3de2:	2b30      	cmp	r3, #48	@ 0x30
 80a3de4:	d819      	bhi.n	80a3e1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80a3de6:	2b20      	cmp	r3, #32
 80a3de8:	d00c      	beq.n	80a3e04 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80a3dea:	2b20      	cmp	r3, #32
 80a3dec:	d815      	bhi.n	80a3e1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80a3dee:	2b00      	cmp	r3, #0
 80a3df0:	d019      	beq.n	80a3e26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80a3df2:	2b10      	cmp	r3, #16
 80a3df4:	d111      	bne.n	80a3e1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a3df6:	4b77      	ldr	r3, [pc, #476]	@ (80a3fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a3dfa:	4a76      	ldr	r2, [pc, #472]	@ (80a3fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a3e00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80a3e02:	e011      	b.n	80a3e28 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80a3e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3e08:	3308      	adds	r3, #8
 80a3e0a:	2102      	movs	r1, #2
 80a3e0c:	4618      	mov	r0, r3
 80a3e0e:	f001 f847 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a3e12:	4603      	mov	r3, r0
 80a3e14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80a3e18:	e006      	b.n	80a3e28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80a3e1a:	2301      	movs	r3, #1
 80a3e1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3e20:	e002      	b.n	80a3e28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80a3e22:	bf00      	nop
 80a3e24:	e000      	b.n	80a3e28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80a3e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3e28:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3e2c:	2b00      	cmp	r3, #0
 80a3e2e:	d10a      	bne.n	80a3e46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80a3e30:	4b68      	ldr	r3, [pc, #416]	@ (80a3fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80a3e34:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80a3e38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80a3e3e:	4a65      	ldr	r2, [pc, #404]	@ (80a3fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3e40:	430b      	orrs	r3, r1
 80a3e42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80a3e44:	e003      	b.n	80a3e4e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3e46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3e4a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80a3e4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3e56:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80a3e5a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80a3e5e:	2300      	movs	r3, #0
 80a3e60:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80a3e64:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80a3e68:	460b      	mov	r3, r1
 80a3e6a:	4313      	orrs	r3, r2
 80a3e6c:	d051      	beq.n	80a3f12 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80a3e6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80a3e74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80a3e78:	d035      	beq.n	80a3ee6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80a3e7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80a3e7e:	d82e      	bhi.n	80a3ede <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80a3e80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80a3e84:	d031      	beq.n	80a3eea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80a3e86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80a3e8a:	d828      	bhi.n	80a3ede <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80a3e8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80a3e90:	d01a      	beq.n	80a3ec8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80a3e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80a3e96:	d822      	bhi.n	80a3ede <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80a3e98:	2b00      	cmp	r3, #0
 80a3e9a:	d003      	beq.n	80a3ea4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80a3e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80a3ea0:	d007      	beq.n	80a3eb2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80a3ea2:	e01c      	b.n	80a3ede <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a3ea4:	4b4b      	ldr	r3, [pc, #300]	@ (80a3fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a3ea8:	4a4a      	ldr	r2, [pc, #296]	@ (80a3fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a3eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80a3eb0:	e01c      	b.n	80a3eec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a3eb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3eb6:	3308      	adds	r3, #8
 80a3eb8:	2100      	movs	r1, #0
 80a3eba:	4618      	mov	r0, r3
 80a3ebc:	f000 fff0 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a3ec0:	4603      	mov	r3, r0
 80a3ec2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80a3ec6:	e011      	b.n	80a3eec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80a3ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3ecc:	3328      	adds	r3, #40	@ 0x28
 80a3ece:	2100      	movs	r1, #0
 80a3ed0:	4618      	mov	r0, r3
 80a3ed2:	f001 f897 	bl	80a5004 <RCCEx_PLL3_Config>
 80a3ed6:	4603      	mov	r3, r0
 80a3ed8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80a3edc:	e006      	b.n	80a3eec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a3ede:	2301      	movs	r3, #1
 80a3ee0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3ee4:	e002      	b.n	80a3eec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80a3ee6:	bf00      	nop
 80a3ee8:	e000      	b.n	80a3eec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80a3eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3eec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3ef0:	2b00      	cmp	r3, #0
 80a3ef2:	d10a      	bne.n	80a3f0a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80a3ef4:	4b37      	ldr	r3, [pc, #220]	@ (80a3fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a3ef8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80a3efc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3f00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80a3f02:	4a34      	ldr	r2, [pc, #208]	@ (80a3fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3f04:	430b      	orrs	r3, r1
 80a3f06:	6513      	str	r3, [r2, #80]	@ 0x50
 80a3f08:	e003      	b.n	80a3f12 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3f0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3f0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80a3f12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f1a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80a3f1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80a3f22:	2300      	movs	r3, #0
 80a3f24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80a3f28:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80a3f2c:	460b      	mov	r3, r1
 80a3f2e:	4313      	orrs	r3, r2
 80a3f30:	d056      	beq.n	80a3fe0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80a3f32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3f36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80a3f38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80a3f3c:	d033      	beq.n	80a3fa6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80a3f3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80a3f42:	d82c      	bhi.n	80a3f9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80a3f44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80a3f48:	d02f      	beq.n	80a3faa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80a3f4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80a3f4e:	d826      	bhi.n	80a3f9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80a3f50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80a3f54:	d02b      	beq.n	80a3fae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80a3f56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80a3f5a:	d820      	bhi.n	80a3f9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80a3f5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80a3f60:	d012      	beq.n	80a3f88 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80a3f62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80a3f66:	d81a      	bhi.n	80a3f9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80a3f68:	2b00      	cmp	r3, #0
 80a3f6a:	d022      	beq.n	80a3fb2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80a3f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80a3f70:	d115      	bne.n	80a3f9e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80a3f72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3f76:	3308      	adds	r3, #8
 80a3f78:	2101      	movs	r1, #1
 80a3f7a:	4618      	mov	r0, r3
 80a3f7c:	f000 ff90 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a3f80:	4603      	mov	r3, r0
 80a3f82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80a3f86:	e015      	b.n	80a3fb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80a3f88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3f8c:	3328      	adds	r3, #40	@ 0x28
 80a3f8e:	2101      	movs	r1, #1
 80a3f90:	4618      	mov	r0, r3
 80a3f92:	f001 f837 	bl	80a5004 <RCCEx_PLL3_Config>
 80a3f96:	4603      	mov	r3, r0
 80a3f98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80a3f9c:	e00a      	b.n	80a3fb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a3f9e:	2301      	movs	r3, #1
 80a3fa0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a3fa4:	e006      	b.n	80a3fb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80a3fa6:	bf00      	nop
 80a3fa8:	e004      	b.n	80a3fb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80a3faa:	bf00      	nop
 80a3fac:	e002      	b.n	80a3fb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80a3fae:	bf00      	nop
 80a3fb0:	e000      	b.n	80a3fb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80a3fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a3fb4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3fb8:	2b00      	cmp	r3, #0
 80a3fba:	d10d      	bne.n	80a3fd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80a3fbc:	4b05      	ldr	r3, [pc, #20]	@ (80a3fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a3fc0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80a3fc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3fc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80a3fca:	4a02      	ldr	r2, [pc, #8]	@ (80a3fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80a3fcc:	430b      	orrs	r3, r1
 80a3fce:	6513      	str	r3, [r2, #80]	@ 0x50
 80a3fd0:	e006      	b.n	80a3fe0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80a3fd2:	bf00      	nop
 80a3fd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a3fd8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a3fdc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80a3fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a3fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3fe8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80a3fec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80a3ff0:	2300      	movs	r3, #0
 80a3ff2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80a3ff6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80a3ffa:	460b      	mov	r3, r1
 80a3ffc:	4313      	orrs	r3, r2
 80a3ffe:	d055      	beq.n	80a40ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80a4000:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4004:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80a4008:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80a400c:	d033      	beq.n	80a4076 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80a400e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80a4012:	d82c      	bhi.n	80a406e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80a4014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80a4018:	d02f      	beq.n	80a407a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80a401a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80a401e:	d826      	bhi.n	80a406e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80a4020:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80a4024:	d02b      	beq.n	80a407e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80a4026:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80a402a:	d820      	bhi.n	80a406e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80a402c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80a4030:	d012      	beq.n	80a4058 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80a4032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80a4036:	d81a      	bhi.n	80a406e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80a4038:	2b00      	cmp	r3, #0
 80a403a:	d022      	beq.n	80a4082 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80a403c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80a4040:	d115      	bne.n	80a406e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80a4042:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4046:	3308      	adds	r3, #8
 80a4048:	2101      	movs	r1, #1
 80a404a:	4618      	mov	r0, r3
 80a404c:	f000 ff28 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a4050:	4603      	mov	r3, r0
 80a4052:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80a4056:	e015      	b.n	80a4084 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80a4058:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a405c:	3328      	adds	r3, #40	@ 0x28
 80a405e:	2101      	movs	r1, #1
 80a4060:	4618      	mov	r0, r3
 80a4062:	f000 ffcf 	bl	80a5004 <RCCEx_PLL3_Config>
 80a4066:	4603      	mov	r3, r0
 80a4068:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80a406c:	e00a      	b.n	80a4084 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80a406e:	2301      	movs	r3, #1
 80a4070:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a4074:	e006      	b.n	80a4084 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80a4076:	bf00      	nop
 80a4078:	e004      	b.n	80a4084 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80a407a:	bf00      	nop
 80a407c:	e002      	b.n	80a4084 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80a407e:	bf00      	nop
 80a4080:	e000      	b.n	80a4084 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80a4082:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a4084:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4088:	2b00      	cmp	r3, #0
 80a408a:	d10b      	bne.n	80a40a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80a408c:	4bb6      	ldr	r3, [pc, #728]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a408e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a4090:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80a4094:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4098:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80a409c:	4ab2      	ldr	r2, [pc, #712]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a409e:	430b      	orrs	r3, r1
 80a40a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80a40a2:	e003      	b.n	80a40ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a40a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a40a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80a40ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a40b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a40b4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80a40b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80a40bc:	2300      	movs	r3, #0
 80a40be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80a40c2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80a40c6:	460b      	mov	r3, r1
 80a40c8:	4313      	orrs	r3, r2
 80a40ca:	d02a      	beq.n	80a4122 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80a40cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a40d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a40d2:	2b00      	cmp	r3, #0
 80a40d4:	d011      	beq.n	80a40fa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80a40d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80a40da:	d10a      	bne.n	80a40f2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80a40dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a40e0:	3308      	adds	r3, #8
 80a40e2:	2101      	movs	r1, #1
 80a40e4:	4618      	mov	r0, r3
 80a40e6:	f000 fedb 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a40ea:	4603      	mov	r3, r0
 80a40ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80a40f0:	e004      	b.n	80a40fc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a40f2:	2301      	movs	r3, #1
 80a40f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a40f8:	e000      	b.n	80a40fc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80a40fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a40fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4100:	2b00      	cmp	r3, #0
 80a4102:	d10a      	bne.n	80a411a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80a4104:	4b98      	ldr	r3, [pc, #608]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a4106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80a4108:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80a410c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a4112:	4a95      	ldr	r2, [pc, #596]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a4114:	430b      	orrs	r3, r1
 80a4116:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80a4118:	e003      	b.n	80a4122 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a411a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a411e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80a4122:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4126:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a412a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80a412e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80a4132:	2300      	movs	r3, #0
 80a4134:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80a4138:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80a413c:	460b      	mov	r3, r1
 80a413e:	4313      	orrs	r3, r2
 80a4140:	d037      	beq.n	80a41b2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80a4142:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80a4148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80a414c:	d00e      	beq.n	80a416c <HAL_RCCEx_PeriphCLKConfig+0x760>
 80a414e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80a4152:	d816      	bhi.n	80a4182 <HAL_RCCEx_PeriphCLKConfig+0x776>
 80a4154:	2b00      	cmp	r3, #0
 80a4156:	d018      	beq.n	80a418a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80a4158:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80a415c:	d111      	bne.n	80a4182 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a415e:	4b82      	ldr	r3, [pc, #520]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a4160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4162:	4a81      	ldr	r2, [pc, #516]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a4164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a4168:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80a416a:	e00f      	b.n	80a418c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80a416c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4170:	3308      	adds	r3, #8
 80a4172:	2101      	movs	r1, #1
 80a4174:	4618      	mov	r0, r3
 80a4176:	f000 fe93 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a417a:	4603      	mov	r3, r0
 80a417c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80a4180:	e004      	b.n	80a418c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a4182:	2301      	movs	r3, #1
 80a4184:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a4188:	e000      	b.n	80a418c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80a418a:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a418c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4190:	2b00      	cmp	r3, #0
 80a4192:	d10a      	bne.n	80a41aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80a4194:	4b74      	ldr	r3, [pc, #464]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a4196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a4198:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80a419c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a41a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80a41a2:	4a71      	ldr	r2, [pc, #452]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a41a4:	430b      	orrs	r3, r1
 80a41a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80a41a8:	e003      	b.n	80a41b2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a41aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a41ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80a41b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a41b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a41ba:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80a41be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80a41c2:	2300      	movs	r3, #0
 80a41c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80a41c8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80a41cc:	460b      	mov	r3, r1
 80a41ce:	4313      	orrs	r3, r2
 80a41d0:	d03a      	beq.n	80a4248 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80a41d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a41d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80a41d8:	2b03      	cmp	r3, #3
 80a41da:	d81d      	bhi.n	80a4218 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80a41dc:	a201      	add	r2, pc, #4	@ (adr r2, 80a41e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80a41de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a41e2:	bf00      	nop
 80a41e4:	080a4221 	.word	0x080a4221
 80a41e8:	080a41f5 	.word	0x080a41f5
 80a41ec:	080a4203 	.word	0x080a4203
 80a41f0:	080a4221 	.word	0x080a4221
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a41f4:	4b5c      	ldr	r3, [pc, #368]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a41f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a41f8:	4a5b      	ldr	r2, [pc, #364]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a41fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a41fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80a4200:	e00f      	b.n	80a4222 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80a4202:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4206:	3308      	adds	r3, #8
 80a4208:	2102      	movs	r1, #2
 80a420a:	4618      	mov	r0, r3
 80a420c:	f000 fe48 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a4210:	4603      	mov	r3, r0
 80a4212:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80a4216:	e004      	b.n	80a4222 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80a4218:	2301      	movs	r3, #1
 80a421a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a421e:	e000      	b.n	80a4222 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80a4220:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a4222:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4226:	2b00      	cmp	r3, #0
 80a4228:	d10a      	bne.n	80a4240 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80a422a:	4b4f      	ldr	r3, [pc, #316]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a422c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80a422e:	f023 0103 	bic.w	r1, r3, #3
 80a4232:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80a4238:	4a4b      	ldr	r2, [pc, #300]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a423a:	430b      	orrs	r3, r1
 80a423c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80a423e:	e003      	b.n	80a4248 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4240:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4244:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80a4248:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4250:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80a4254:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80a4258:	2300      	movs	r3, #0
 80a425a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80a425e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80a4262:	460b      	mov	r3, r1
 80a4264:	4313      	orrs	r3, r2
 80a4266:	f000 80a0 	beq.w	80a43aa <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80a426a:	4b40      	ldr	r3, [pc, #256]	@ (80a436c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80a426c:	681b      	ldr	r3, [r3, #0]
 80a426e:	4a3f      	ldr	r2, [pc, #252]	@ (80a436c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80a4270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80a4274:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80a4276:	f7fc fd23 	bl	80a0cc0 <HAL_GetTick>
 80a427a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80a427e:	e00b      	b.n	80a4298 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80a4280:	f7fc fd1e 	bl	80a0cc0 <HAL_GetTick>
 80a4284:	4602      	mov	r2, r0
 80a4286:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80a428a:	1ad3      	subs	r3, r2, r3
 80a428c:	2b64      	cmp	r3, #100	@ 0x64
 80a428e:	d903      	bls.n	80a4298 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80a4290:	2303      	movs	r3, #3
 80a4292:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a4296:	e005      	b.n	80a42a4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80a4298:	4b34      	ldr	r3, [pc, #208]	@ (80a436c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80a429a:	681b      	ldr	r3, [r3, #0]
 80a429c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a42a0:	2b00      	cmp	r3, #0
 80a42a2:	d0ed      	beq.n	80a4280 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80a42a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a42a8:	2b00      	cmp	r3, #0
 80a42aa:	d17a      	bne.n	80a43a2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80a42ac:	4b2e      	ldr	r3, [pc, #184]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a42ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80a42b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a42b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80a42b8:	4053      	eors	r3, r2
 80a42ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80a42be:	2b00      	cmp	r3, #0
 80a42c0:	d015      	beq.n	80a42ee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80a42c2:	4b29      	ldr	r3, [pc, #164]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a42c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a42c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80a42ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80a42ce:	4b26      	ldr	r3, [pc, #152]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a42d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a42d2:	4a25      	ldr	r2, [pc, #148]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a42d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80a42d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80a42da:	4b23      	ldr	r3, [pc, #140]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a42dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a42de:	4a22      	ldr	r2, [pc, #136]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a42e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80a42e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80a42e6:	4a20      	ldr	r2, [pc, #128]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a42e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80a42ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80a42ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a42f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80a42f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80a42fa:	d118      	bne.n	80a432e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a42fc:	f7fc fce0 	bl	80a0cc0 <HAL_GetTick>
 80a4300:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80a4304:	e00d      	b.n	80a4322 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80a4306:	f7fc fcdb 	bl	80a0cc0 <HAL_GetTick>
 80a430a:	4602      	mov	r2, r0
 80a430c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80a4310:	1ad2      	subs	r2, r2, r3
 80a4312:	f241 3388 	movw	r3, #5000	@ 0x1388
 80a4316:	429a      	cmp	r2, r3
 80a4318:	d903      	bls.n	80a4322 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80a431a:	2303      	movs	r3, #3
 80a431c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 80a4320:	e005      	b.n	80a432e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80a4322:	4b11      	ldr	r3, [pc, #68]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a4324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a4326:	f003 0302 	and.w	r3, r3, #2
 80a432a:	2b00      	cmp	r3, #0
 80a432c:	d0eb      	beq.n	80a4306 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80a432e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4332:	2b00      	cmp	r3, #0
 80a4334:	d130      	bne.n	80a4398 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80a4336:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a433a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80a433e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80a4342:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80a4346:	d115      	bne.n	80a4374 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80a4348:	4b07      	ldr	r3, [pc, #28]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a434a:	691b      	ldr	r3, [r3, #16]
 80a434c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80a4350:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4354:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80a4358:	091a      	lsrs	r2, r3, #4
 80a435a:	4b05      	ldr	r3, [pc, #20]	@ (80a4370 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80a435c:	4013      	ands	r3, r2
 80a435e:	4a02      	ldr	r2, [pc, #8]	@ (80a4368 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80a4360:	430b      	orrs	r3, r1
 80a4362:	6113      	str	r3, [r2, #16]
 80a4364:	e00c      	b.n	80a4380 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80a4366:	bf00      	nop
 80a4368:	58024400 	.word	0x58024400
 80a436c:	58024800 	.word	0x58024800
 80a4370:	00ffffcf 	.word	0x00ffffcf
 80a4374:	4bd4      	ldr	r3, [pc, #848]	@ (80a46c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a4376:	691b      	ldr	r3, [r3, #16]
 80a4378:	4ad3      	ldr	r2, [pc, #844]	@ (80a46c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a437a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80a437e:	6113      	str	r3, [r2, #16]
 80a4380:	4bd1      	ldr	r3, [pc, #836]	@ (80a46c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a4382:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80a4384:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4388:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80a438c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80a4390:	4acd      	ldr	r2, [pc, #820]	@ (80a46c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a4392:	430b      	orrs	r3, r1
 80a4394:	6713      	str	r3, [r2, #112]	@ 0x70
 80a4396:	e008      	b.n	80a43aa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80a4398:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a439c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80a43a0:	e003      	b.n	80a43aa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a43a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a43a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80a43aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a43ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a43b2:	f002 0301 	and.w	r3, r2, #1
 80a43b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80a43ba:	2300      	movs	r3, #0
 80a43bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80a43c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80a43c4:	460b      	mov	r3, r1
 80a43c6:	4313      	orrs	r3, r2
 80a43c8:	f000 808b 	beq.w	80a44e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80a43cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a43d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80a43d4:	2b28      	cmp	r3, #40	@ 0x28
 80a43d6:	d86b      	bhi.n	80a44b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80a43d8:	a201      	add	r2, pc, #4	@ (adr r2, 80a43e0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80a43da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a43de:	bf00      	nop
 80a43e0:	080a44b9 	.word	0x080a44b9
 80a43e4:	080a44b1 	.word	0x080a44b1
 80a43e8:	080a44b1 	.word	0x080a44b1
 80a43ec:	080a44b1 	.word	0x080a44b1
 80a43f0:	080a44b1 	.word	0x080a44b1
 80a43f4:	080a44b1 	.word	0x080a44b1
 80a43f8:	080a44b1 	.word	0x080a44b1
 80a43fc:	080a44b1 	.word	0x080a44b1
 80a4400:	080a4485 	.word	0x080a4485
 80a4404:	080a44b1 	.word	0x080a44b1
 80a4408:	080a44b1 	.word	0x080a44b1
 80a440c:	080a44b1 	.word	0x080a44b1
 80a4410:	080a44b1 	.word	0x080a44b1
 80a4414:	080a44b1 	.word	0x080a44b1
 80a4418:	080a44b1 	.word	0x080a44b1
 80a441c:	080a44b1 	.word	0x080a44b1
 80a4420:	080a449b 	.word	0x080a449b
 80a4424:	080a44b1 	.word	0x080a44b1
 80a4428:	080a44b1 	.word	0x080a44b1
 80a442c:	080a44b1 	.word	0x080a44b1
 80a4430:	080a44b1 	.word	0x080a44b1
 80a4434:	080a44b1 	.word	0x080a44b1
 80a4438:	080a44b1 	.word	0x080a44b1
 80a443c:	080a44b1 	.word	0x080a44b1
 80a4440:	080a44b9 	.word	0x080a44b9
 80a4444:	080a44b1 	.word	0x080a44b1
 80a4448:	080a44b1 	.word	0x080a44b1
 80a444c:	080a44b1 	.word	0x080a44b1
 80a4450:	080a44b1 	.word	0x080a44b1
 80a4454:	080a44b1 	.word	0x080a44b1
 80a4458:	080a44b1 	.word	0x080a44b1
 80a445c:	080a44b1 	.word	0x080a44b1
 80a4460:	080a44b9 	.word	0x080a44b9
 80a4464:	080a44b1 	.word	0x080a44b1
 80a4468:	080a44b1 	.word	0x080a44b1
 80a446c:	080a44b1 	.word	0x080a44b1
 80a4470:	080a44b1 	.word	0x080a44b1
 80a4474:	080a44b1 	.word	0x080a44b1
 80a4478:	080a44b1 	.word	0x080a44b1
 80a447c:	080a44b1 	.word	0x080a44b1
 80a4480:	080a44b9 	.word	0x080a44b9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80a4484:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4488:	3308      	adds	r3, #8
 80a448a:	2101      	movs	r1, #1
 80a448c:	4618      	mov	r0, r3
 80a448e:	f000 fd07 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a4492:	4603      	mov	r3, r0
 80a4494:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80a4498:	e00f      	b.n	80a44ba <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80a449a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a449e:	3328      	adds	r3, #40	@ 0x28
 80a44a0:	2101      	movs	r1, #1
 80a44a2:	4618      	mov	r0, r3
 80a44a4:	f000 fdae 	bl	80a5004 <RCCEx_PLL3_Config>
 80a44a8:	4603      	mov	r3, r0
 80a44aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80a44ae:	e004      	b.n	80a44ba <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a44b0:	2301      	movs	r3, #1
 80a44b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a44b6:	e000      	b.n	80a44ba <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80a44b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a44ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a44be:	2b00      	cmp	r3, #0
 80a44c0:	d10b      	bne.n	80a44da <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80a44c2:	4b81      	ldr	r3, [pc, #516]	@ (80a46c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a44c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a44c6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80a44ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a44ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80a44d2:	4a7d      	ldr	r2, [pc, #500]	@ (80a46c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a44d4:	430b      	orrs	r3, r1
 80a44d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80a44d8:	e003      	b.n	80a44e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a44da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a44de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80a44e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a44e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a44ea:	f002 0302 	and.w	r3, r2, #2
 80a44ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80a44f2:	2300      	movs	r3, #0
 80a44f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80a44f8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80a44fc:	460b      	mov	r3, r1
 80a44fe:	4313      	orrs	r3, r2
 80a4500:	d042      	beq.n	80a4588 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80a4502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4506:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80a4508:	2b05      	cmp	r3, #5
 80a450a:	d825      	bhi.n	80a4558 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80a450c:	a201      	add	r2, pc, #4	@ (adr r2, 80a4514 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 80a450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a4512:	bf00      	nop
 80a4514:	080a4561 	.word	0x080a4561
 80a4518:	080a452d 	.word	0x080a452d
 80a451c:	080a4543 	.word	0x080a4543
 80a4520:	080a4561 	.word	0x080a4561
 80a4524:	080a4561 	.word	0x080a4561
 80a4528:	080a4561 	.word	0x080a4561
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80a452c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4530:	3308      	adds	r3, #8
 80a4532:	2101      	movs	r1, #1
 80a4534:	4618      	mov	r0, r3
 80a4536:	f000 fcb3 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a453a:	4603      	mov	r3, r0
 80a453c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80a4540:	e00f      	b.n	80a4562 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80a4542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4546:	3328      	adds	r3, #40	@ 0x28
 80a4548:	2101      	movs	r1, #1
 80a454a:	4618      	mov	r0, r3
 80a454c:	f000 fd5a 	bl	80a5004 <RCCEx_PLL3_Config>
 80a4550:	4603      	mov	r3, r0
 80a4552:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80a4556:	e004      	b.n	80a4562 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a4558:	2301      	movs	r3, #1
 80a455a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a455e:	e000      	b.n	80a4562 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80a4560:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a4562:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4566:	2b00      	cmp	r3, #0
 80a4568:	d10a      	bne.n	80a4580 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80a456a:	4b57      	ldr	r3, [pc, #348]	@ (80a46c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a456c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a456e:	f023 0107 	bic.w	r1, r3, #7
 80a4572:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4576:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80a4578:	4a53      	ldr	r2, [pc, #332]	@ (80a46c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a457a:	430b      	orrs	r3, r1
 80a457c:	6553      	str	r3, [r2, #84]	@ 0x54
 80a457e:	e003      	b.n	80a4588 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4580:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4584:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80a4588:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4590:	f002 0304 	and.w	r3, r2, #4
 80a4594:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80a4598:	2300      	movs	r3, #0
 80a459a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80a459e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80a45a2:	460b      	mov	r3, r1
 80a45a4:	4313      	orrs	r3, r2
 80a45a6:	d044      	beq.n	80a4632 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80a45a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a45ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80a45b0:	2b05      	cmp	r3, #5
 80a45b2:	d825      	bhi.n	80a4600 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80a45b4:	a201      	add	r2, pc, #4	@ (adr r2, 80a45bc <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80a45b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a45ba:	bf00      	nop
 80a45bc:	080a4609 	.word	0x080a4609
 80a45c0:	080a45d5 	.word	0x080a45d5
 80a45c4:	080a45eb 	.word	0x080a45eb
 80a45c8:	080a4609 	.word	0x080a4609
 80a45cc:	080a4609 	.word	0x080a4609
 80a45d0:	080a4609 	.word	0x080a4609
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80a45d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a45d8:	3308      	adds	r3, #8
 80a45da:	2101      	movs	r1, #1
 80a45dc:	4618      	mov	r0, r3
 80a45de:	f000 fc5f 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a45e2:	4603      	mov	r3, r0
 80a45e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80a45e8:	e00f      	b.n	80a460a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80a45ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a45ee:	3328      	adds	r3, #40	@ 0x28
 80a45f0:	2101      	movs	r1, #1
 80a45f2:	4618      	mov	r0, r3
 80a45f4:	f000 fd06 	bl	80a5004 <RCCEx_PLL3_Config>
 80a45f8:	4603      	mov	r3, r0
 80a45fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80a45fe:	e004      	b.n	80a460a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a4600:	2301      	movs	r3, #1
 80a4602:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a4606:	e000      	b.n	80a460a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80a4608:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a460a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a460e:	2b00      	cmp	r3, #0
 80a4610:	d10b      	bne.n	80a462a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80a4612:	4b2d      	ldr	r3, [pc, #180]	@ (80a46c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a4614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a4616:	f023 0107 	bic.w	r1, r3, #7
 80a461a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a461e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80a4622:	4a29      	ldr	r2, [pc, #164]	@ (80a46c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80a4624:	430b      	orrs	r3, r1
 80a4626:	6593      	str	r3, [r2, #88]	@ 0x58
 80a4628:	e003      	b.n	80a4632 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a462a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a462e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80a4632:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4636:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a463a:	f002 0320 	and.w	r3, r2, #32
 80a463e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80a4642:	2300      	movs	r3, #0
 80a4644:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80a4648:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80a464c:	460b      	mov	r3, r1
 80a464e:	4313      	orrs	r3, r2
 80a4650:	d057      	beq.n	80a4702 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80a4652:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4656:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80a465a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80a465e:	d035      	beq.n	80a46cc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80a4660:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80a4664:	d82c      	bhi.n	80a46c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80a4666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80a466a:	d031      	beq.n	80a46d0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80a466c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80a4670:	d826      	bhi.n	80a46c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80a4672:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80a4676:	d02d      	beq.n	80a46d4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80a4678:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80a467c:	d820      	bhi.n	80a46c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80a467e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80a4682:	d012      	beq.n	80a46aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80a4684:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80a4688:	d81a      	bhi.n	80a46c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80a468a:	2b00      	cmp	r3, #0
 80a468c:	d024      	beq.n	80a46d8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80a468e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80a4692:	d115      	bne.n	80a46c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a4694:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4698:	3308      	adds	r3, #8
 80a469a:	2100      	movs	r1, #0
 80a469c:	4618      	mov	r0, r3
 80a469e:	f000 fbff 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a46a2:	4603      	mov	r3, r0
 80a46a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80a46a8:	e017      	b.n	80a46da <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80a46aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a46ae:	3328      	adds	r3, #40	@ 0x28
 80a46b0:	2102      	movs	r1, #2
 80a46b2:	4618      	mov	r0, r3
 80a46b4:	f000 fca6 	bl	80a5004 <RCCEx_PLL3_Config>
 80a46b8:	4603      	mov	r3, r0
 80a46ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80a46be:	e00c      	b.n	80a46da <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a46c0:	2301      	movs	r3, #1
 80a46c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a46c6:	e008      	b.n	80a46da <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80a46c8:	58024400 	.word	0x58024400
        break;
 80a46cc:	bf00      	nop
 80a46ce:	e004      	b.n	80a46da <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80a46d0:	bf00      	nop
 80a46d2:	e002      	b.n	80a46da <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80a46d4:	bf00      	nop
 80a46d6:	e000      	b.n	80a46da <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80a46d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a46da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a46de:	2b00      	cmp	r3, #0
 80a46e0:	d10b      	bne.n	80a46fa <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80a46e2:	4bc2      	ldr	r3, [pc, #776]	@ (80a49ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a46e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a46e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80a46ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a46ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80a46f2:	4abe      	ldr	r2, [pc, #760]	@ (80a49ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a46f4:	430b      	orrs	r3, r1
 80a46f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80a46f8:	e003      	b.n	80a4702 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a46fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a46fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80a4702:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4706:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a470a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80a470e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80a4712:	2300      	movs	r3, #0
 80a4714:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80a4718:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80a471c:	460b      	mov	r3, r1
 80a471e:	4313      	orrs	r3, r2
 80a4720:	d055      	beq.n	80a47ce <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80a4722:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4726:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80a472a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80a472e:	d033      	beq.n	80a4798 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80a4730:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80a4734:	d82c      	bhi.n	80a4790 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80a4736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80a473a:	d02f      	beq.n	80a479c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80a473c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80a4740:	d826      	bhi.n	80a4790 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80a4742:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80a4746:	d02b      	beq.n	80a47a0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80a4748:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80a474c:	d820      	bhi.n	80a4790 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80a474e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80a4752:	d012      	beq.n	80a477a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80a4754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80a4758:	d81a      	bhi.n	80a4790 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80a475a:	2b00      	cmp	r3, #0
 80a475c:	d022      	beq.n	80a47a4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80a475e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80a4762:	d115      	bne.n	80a4790 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a4764:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4768:	3308      	adds	r3, #8
 80a476a:	2100      	movs	r1, #0
 80a476c:	4618      	mov	r0, r3
 80a476e:	f000 fb97 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a4772:	4603      	mov	r3, r0
 80a4774:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80a4778:	e015      	b.n	80a47a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80a477a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a477e:	3328      	adds	r3, #40	@ 0x28
 80a4780:	2102      	movs	r1, #2
 80a4782:	4618      	mov	r0, r3
 80a4784:	f000 fc3e 	bl	80a5004 <RCCEx_PLL3_Config>
 80a4788:	4603      	mov	r3, r0
 80a478a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80a478e:	e00a      	b.n	80a47a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a4790:	2301      	movs	r3, #1
 80a4792:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a4796:	e006      	b.n	80a47a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80a4798:	bf00      	nop
 80a479a:	e004      	b.n	80a47a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80a479c:	bf00      	nop
 80a479e:	e002      	b.n	80a47a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80a47a0:	bf00      	nop
 80a47a2:	e000      	b.n	80a47a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80a47a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a47a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a47aa:	2b00      	cmp	r3, #0
 80a47ac:	d10b      	bne.n	80a47c6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80a47ae:	4b8f      	ldr	r3, [pc, #572]	@ (80a49ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a47b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a47b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80a47b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a47ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80a47be:	4a8b      	ldr	r2, [pc, #556]	@ (80a49ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a47c0:	430b      	orrs	r3, r1
 80a47c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80a47c4:	e003      	b.n	80a47ce <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a47c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a47ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80a47ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a47d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a47d6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80a47da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80a47de:	2300      	movs	r3, #0
 80a47e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80a47e4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80a47e8:	460b      	mov	r3, r1
 80a47ea:	4313      	orrs	r3, r2
 80a47ec:	d055      	beq.n	80a489a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80a47ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a47f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80a47f6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80a47fa:	d033      	beq.n	80a4864 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80a47fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80a4800:	d82c      	bhi.n	80a485c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80a4802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80a4806:	d02f      	beq.n	80a4868 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80a4808:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80a480c:	d826      	bhi.n	80a485c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80a480e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80a4812:	d02b      	beq.n	80a486c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80a4814:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80a4818:	d820      	bhi.n	80a485c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80a481a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80a481e:	d012      	beq.n	80a4846 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80a4820:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80a4824:	d81a      	bhi.n	80a485c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80a4826:	2b00      	cmp	r3, #0
 80a4828:	d022      	beq.n	80a4870 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80a482a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80a482e:	d115      	bne.n	80a485c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a4830:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4834:	3308      	adds	r3, #8
 80a4836:	2100      	movs	r1, #0
 80a4838:	4618      	mov	r0, r3
 80a483a:	f000 fb31 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a483e:	4603      	mov	r3, r0
 80a4840:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80a4844:	e015      	b.n	80a4872 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80a4846:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a484a:	3328      	adds	r3, #40	@ 0x28
 80a484c:	2102      	movs	r1, #2
 80a484e:	4618      	mov	r0, r3
 80a4850:	f000 fbd8 	bl	80a5004 <RCCEx_PLL3_Config>
 80a4854:	4603      	mov	r3, r0
 80a4856:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80a485a:	e00a      	b.n	80a4872 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a485c:	2301      	movs	r3, #1
 80a485e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a4862:	e006      	b.n	80a4872 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80a4864:	bf00      	nop
 80a4866:	e004      	b.n	80a4872 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80a4868:	bf00      	nop
 80a486a:	e002      	b.n	80a4872 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80a486c:	bf00      	nop
 80a486e:	e000      	b.n	80a4872 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80a4870:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a4872:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4876:	2b00      	cmp	r3, #0
 80a4878:	d10b      	bne.n	80a4892 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80a487a:	4b5c      	ldr	r3, [pc, #368]	@ (80a49ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a487c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a487e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80a4882:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4886:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80a488a:	4a58      	ldr	r2, [pc, #352]	@ (80a49ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a488c:	430b      	orrs	r3, r1
 80a488e:	6593      	str	r3, [r2, #88]	@ 0x58
 80a4890:	e003      	b.n	80a489a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4892:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4896:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80a489a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a48a2:	f002 0308 	and.w	r3, r2, #8
 80a48a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80a48aa:	2300      	movs	r3, #0
 80a48ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80a48b0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80a48b4:	460b      	mov	r3, r1
 80a48b6:	4313      	orrs	r3, r2
 80a48b8:	d01e      	beq.n	80a48f8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80a48ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a48be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80a48c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80a48c6:	d10c      	bne.n	80a48e2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80a48c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a48cc:	3328      	adds	r3, #40	@ 0x28
 80a48ce:	2102      	movs	r1, #2
 80a48d0:	4618      	mov	r0, r3
 80a48d2:	f000 fb97 	bl	80a5004 <RCCEx_PLL3_Config>
 80a48d6:	4603      	mov	r3, r0
 80a48d8:	2b00      	cmp	r3, #0
 80a48da:	d002      	beq.n	80a48e2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80a48dc:	2301      	movs	r3, #1
 80a48de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80a48e2:	4b42      	ldr	r3, [pc, #264]	@ (80a49ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a48e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a48e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80a48ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a48ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80a48f2:	4a3e      	ldr	r2, [pc, #248]	@ (80a49ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a48f4:	430b      	orrs	r3, r1
 80a48f6:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80a48f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a48fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4900:	f002 0310 	and.w	r3, r2, #16
 80a4904:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80a4908:	2300      	movs	r3, #0
 80a490a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80a490e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80a4912:	460b      	mov	r3, r1
 80a4914:	4313      	orrs	r3, r2
 80a4916:	d01e      	beq.n	80a4956 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80a4918:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a491c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80a4920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80a4924:	d10c      	bne.n	80a4940 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80a4926:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a492a:	3328      	adds	r3, #40	@ 0x28
 80a492c:	2102      	movs	r1, #2
 80a492e:	4618      	mov	r0, r3
 80a4930:	f000 fb68 	bl	80a5004 <RCCEx_PLL3_Config>
 80a4934:	4603      	mov	r3, r0
 80a4936:	2b00      	cmp	r3, #0
 80a4938:	d002      	beq.n	80a4940 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80a493a:	2301      	movs	r3, #1
 80a493c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80a4940:	4b2a      	ldr	r3, [pc, #168]	@ (80a49ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a4942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a4944:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80a4948:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a494c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80a4950:	4a26      	ldr	r2, [pc, #152]	@ (80a49ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a4952:	430b      	orrs	r3, r1
 80a4954:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80a4956:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a495e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80a4962:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80a4966:	2300      	movs	r3, #0
 80a4968:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80a496c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80a4970:	460b      	mov	r3, r1
 80a4972:	4313      	orrs	r3, r2
 80a4974:	d040      	beq.n	80a49f8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80a4976:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a497a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80a497e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80a4982:	d022      	beq.n	80a49ca <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80a4984:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80a4988:	d81b      	bhi.n	80a49c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80a498a:	2b00      	cmp	r3, #0
 80a498c:	d003      	beq.n	80a4996 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80a498e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80a4992:	d00b      	beq.n	80a49ac <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80a4994:	e015      	b.n	80a49c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a4996:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a499a:	3308      	adds	r3, #8
 80a499c:	2100      	movs	r1, #0
 80a499e:	4618      	mov	r0, r3
 80a49a0:	f000 fa7e 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a49a4:	4603      	mov	r3, r0
 80a49a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80a49aa:	e00f      	b.n	80a49cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80a49ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a49b0:	3328      	adds	r3, #40	@ 0x28
 80a49b2:	2102      	movs	r1, #2
 80a49b4:	4618      	mov	r0, r3
 80a49b6:	f000 fb25 	bl	80a5004 <RCCEx_PLL3_Config>
 80a49ba:	4603      	mov	r3, r0
 80a49bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80a49c0:	e004      	b.n	80a49cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a49c2:	2301      	movs	r3, #1
 80a49c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a49c8:	e000      	b.n	80a49cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80a49ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a49cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a49d0:	2b00      	cmp	r3, #0
 80a49d2:	d10d      	bne.n	80a49f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80a49d4:	4b05      	ldr	r3, [pc, #20]	@ (80a49ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a49d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a49d8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80a49dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a49e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80a49e4:	4a01      	ldr	r2, [pc, #4]	@ (80a49ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80a49e6:	430b      	orrs	r3, r1
 80a49e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80a49ea:	e005      	b.n	80a49f8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80a49ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a49f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a49f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80a49f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a49fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4a00:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80a4a04:	67bb      	str	r3, [r7, #120]	@ 0x78
 80a4a06:	2300      	movs	r3, #0
 80a4a08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80a4a0a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80a4a0e:	460b      	mov	r3, r1
 80a4a10:	4313      	orrs	r3, r2
 80a4a12:	d03b      	beq.n	80a4a8c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80a4a14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80a4a1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80a4a20:	d01f      	beq.n	80a4a62 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80a4a22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80a4a26:	d818      	bhi.n	80a4a5a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80a4a28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80a4a2c:	d003      	beq.n	80a4a36 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80a4a2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80a4a32:	d007      	beq.n	80a4a44 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80a4a34:	e011      	b.n	80a4a5a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a4a36:	4b64      	ldr	r3, [pc, #400]	@ (80a4bc8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4a3a:	4a63      	ldr	r2, [pc, #396]	@ (80a4bc8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a4a40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80a4a42:	e00f      	b.n	80a4a64 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80a4a44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4a48:	3328      	adds	r3, #40	@ 0x28
 80a4a4a:	2101      	movs	r1, #1
 80a4a4c:	4618      	mov	r0, r3
 80a4a4e:	f000 fad9 	bl	80a5004 <RCCEx_PLL3_Config>
 80a4a52:	4603      	mov	r3, r0
 80a4a54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80a4a58:	e004      	b.n	80a4a64 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a4a5a:	2301      	movs	r3, #1
 80a4a5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a4a60:	e000      	b.n	80a4a64 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80a4a62:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a4a64:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4a68:	2b00      	cmp	r3, #0
 80a4a6a:	d10b      	bne.n	80a4a84 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80a4a6c:	4b56      	ldr	r3, [pc, #344]	@ (80a4bc8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a4a70:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80a4a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80a4a7c:	4a52      	ldr	r2, [pc, #328]	@ (80a4bc8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4a7e:	430b      	orrs	r3, r1
 80a4a80:	6553      	str	r3, [r2, #84]	@ 0x54
 80a4a82:	e003      	b.n	80a4a8c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4a84:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4a88:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80a4a8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4a94:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80a4a98:	673b      	str	r3, [r7, #112]	@ 0x70
 80a4a9a:	2300      	movs	r3, #0
 80a4a9c:	677b      	str	r3, [r7, #116]	@ 0x74
 80a4a9e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80a4aa2:	460b      	mov	r3, r1
 80a4aa4:	4313      	orrs	r3, r2
 80a4aa6:	d031      	beq.n	80a4b0c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80a4aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a4aae:	2b00      	cmp	r3, #0
 80a4ab0:	d003      	beq.n	80a4aba <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80a4ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80a4ab6:	d007      	beq.n	80a4ac8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80a4ab8:	e011      	b.n	80a4ade <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a4aba:	4b43      	ldr	r3, [pc, #268]	@ (80a4bc8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4abe:	4a42      	ldr	r2, [pc, #264]	@ (80a4bc8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a4ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80a4ac6:	e00e      	b.n	80a4ae6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80a4ac8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4acc:	3308      	adds	r3, #8
 80a4ace:	2102      	movs	r1, #2
 80a4ad0:	4618      	mov	r0, r3
 80a4ad2:	f000 f9e5 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a4ad6:	4603      	mov	r3, r0
 80a4ad8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80a4adc:	e003      	b.n	80a4ae6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80a4ade:	2301      	movs	r3, #1
 80a4ae0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a4ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a4ae6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4aea:	2b00      	cmp	r3, #0
 80a4aec:	d10a      	bne.n	80a4b04 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80a4aee:	4b36      	ldr	r3, [pc, #216]	@ (80a4bc8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80a4af2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80a4af6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a4afc:	4a32      	ldr	r2, [pc, #200]	@ (80a4bc8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4afe:	430b      	orrs	r3, r1
 80a4b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80a4b02:	e003      	b.n	80a4b0c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4b04:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4b08:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80a4b0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b14:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80a4b18:	66bb      	str	r3, [r7, #104]	@ 0x68
 80a4b1a:	2300      	movs	r3, #0
 80a4b1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80a4b1e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80a4b22:	460b      	mov	r3, r1
 80a4b24:	4313      	orrs	r3, r2
 80a4b26:	d00c      	beq.n	80a4b42 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80a4b28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4b2c:	3328      	adds	r3, #40	@ 0x28
 80a4b2e:	2102      	movs	r1, #2
 80a4b30:	4618      	mov	r0, r3
 80a4b32:	f000 fa67 	bl	80a5004 <RCCEx_PLL3_Config>
 80a4b36:	4603      	mov	r3, r0
 80a4b38:	2b00      	cmp	r3, #0
 80a4b3a:	d002      	beq.n	80a4b42 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80a4b3c:	2301      	movs	r3, #1
 80a4b3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80a4b42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b4a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80a4b4e:	663b      	str	r3, [r7, #96]	@ 0x60
 80a4b50:	2300      	movs	r3, #0
 80a4b52:	667b      	str	r3, [r7, #100]	@ 0x64
 80a4b54:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80a4b58:	460b      	mov	r3, r1
 80a4b5a:	4313      	orrs	r3, r2
 80a4b5c:	d03a      	beq.n	80a4bd4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80a4b5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80a4b66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80a4b6a:	d018      	beq.n	80a4b9e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80a4b6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80a4b70:	d811      	bhi.n	80a4b96 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80a4b72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80a4b76:	d014      	beq.n	80a4ba2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80a4b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80a4b7c:	d80b      	bhi.n	80a4b96 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80a4b7e:	2b00      	cmp	r3, #0
 80a4b80:	d011      	beq.n	80a4ba6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80a4b82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80a4b86:	d106      	bne.n	80a4b96 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80a4b88:	4b0f      	ldr	r3, [pc, #60]	@ (80a4bc8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4b8c:	4a0e      	ldr	r2, [pc, #56]	@ (80a4bc8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4b8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80a4b92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80a4b94:	e008      	b.n	80a4ba8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80a4b96:	2301      	movs	r3, #1
 80a4b98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80a4b9c:	e004      	b.n	80a4ba8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80a4b9e:	bf00      	nop
 80a4ba0:	e002      	b.n	80a4ba8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80a4ba2:	bf00      	nop
 80a4ba4:	e000      	b.n	80a4ba8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80a4ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80a4ba8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4bac:	2b00      	cmp	r3, #0
 80a4bae:	d10d      	bne.n	80a4bcc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80a4bb0:	4b05      	ldr	r3, [pc, #20]	@ (80a4bc8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a4bb4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80a4bb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80a4bc0:	4a01      	ldr	r2, [pc, #4]	@ (80a4bc8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80a4bc2:	430b      	orrs	r3, r1
 80a4bc4:	6553      	str	r3, [r2, #84]	@ 0x54
 80a4bc6:	e005      	b.n	80a4bd4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80a4bc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4bcc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4bd0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80a4bd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4bdc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80a4be0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80a4be2:	2300      	movs	r3, #0
 80a4be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80a4be6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80a4bea:	460b      	mov	r3, r1
 80a4bec:	4313      	orrs	r3, r2
 80a4bee:	d009      	beq.n	80a4c04 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80a4bf0:	4baa      	ldr	r3, [pc, #680]	@ (80a4e9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a4bf4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80a4bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4bfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80a4bfe:	4aa7      	ldr	r2, [pc, #668]	@ (80a4e9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4c00:	430b      	orrs	r3, r1
 80a4c02:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80a4c04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c0c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80a4c10:	653b      	str	r3, [r7, #80]	@ 0x50
 80a4c12:	2300      	movs	r3, #0
 80a4c14:	657b      	str	r3, [r7, #84]	@ 0x54
 80a4c16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80a4c1a:	460b      	mov	r3, r1
 80a4c1c:	4313      	orrs	r3, r2
 80a4c1e:	d00a      	beq.n	80a4c36 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80a4c20:	4b9e      	ldr	r3, [pc, #632]	@ (80a4e9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4c22:	691b      	ldr	r3, [r3, #16]
 80a4c24:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80a4c28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4c2c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80a4c30:	4a9a      	ldr	r2, [pc, #616]	@ (80a4e9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4c32:	430b      	orrs	r3, r1
 80a4c34:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80a4c36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c3e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80a4c42:	64bb      	str	r3, [r7, #72]	@ 0x48
 80a4c44:	2300      	movs	r3, #0
 80a4c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80a4c48:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80a4c4c:	460b      	mov	r3, r1
 80a4c4e:	4313      	orrs	r3, r2
 80a4c50:	d009      	beq.n	80a4c66 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80a4c52:	4b92      	ldr	r3, [pc, #584]	@ (80a4e9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80a4c56:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80a4c5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80a4c60:	4a8e      	ldr	r2, [pc, #568]	@ (80a4e9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4c62:	430b      	orrs	r3, r1
 80a4c64:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80a4c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c6e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80a4c72:	643b      	str	r3, [r7, #64]	@ 0x40
 80a4c74:	2300      	movs	r3, #0
 80a4c76:	647b      	str	r3, [r7, #68]	@ 0x44
 80a4c78:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80a4c7c:	460b      	mov	r3, r1
 80a4c7e:	4313      	orrs	r3, r2
 80a4c80:	d00e      	beq.n	80a4ca0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80a4c82:	4b86      	ldr	r3, [pc, #536]	@ (80a4e9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4c84:	691b      	ldr	r3, [r3, #16]
 80a4c86:	4a85      	ldr	r2, [pc, #532]	@ (80a4e9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4c88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80a4c8c:	6113      	str	r3, [r2, #16]
 80a4c8e:	4b83      	ldr	r3, [pc, #524]	@ (80a4e9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4c90:	6919      	ldr	r1, [r3, #16]
 80a4c92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4c96:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80a4c9a:	4a80      	ldr	r2, [pc, #512]	@ (80a4e9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4c9c:	430b      	orrs	r3, r1
 80a4c9e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80a4ca0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4ca8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80a4cac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80a4cae:	2300      	movs	r3, #0
 80a4cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80a4cb2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80a4cb6:	460b      	mov	r3, r1
 80a4cb8:	4313      	orrs	r3, r2
 80a4cba:	d009      	beq.n	80a4cd0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80a4cbc:	4b77      	ldr	r3, [pc, #476]	@ (80a4e9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80a4cc0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80a4cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80a4cca:	4a74      	ldr	r2, [pc, #464]	@ (80a4e9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4ccc:	430b      	orrs	r3, r1
 80a4cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80a4cd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4cd8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80a4cdc:	633b      	str	r3, [r7, #48]	@ 0x30
 80a4cde:	2300      	movs	r3, #0
 80a4ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 80a4ce2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80a4ce6:	460b      	mov	r3, r1
 80a4ce8:	4313      	orrs	r3, r2
 80a4cea:	d00a      	beq.n	80a4d02 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80a4cec:	4b6b      	ldr	r3, [pc, #428]	@ (80a4e9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80a4cf0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80a4cf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80a4cfc:	4a67      	ldr	r2, [pc, #412]	@ (80a4e9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80a4cfe:	430b      	orrs	r3, r1
 80a4d00:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80a4d02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d0a:	2100      	movs	r1, #0
 80a4d0c:	62b9      	str	r1, [r7, #40]	@ 0x28
 80a4d0e:	f003 0301 	and.w	r3, r3, #1
 80a4d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80a4d14:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80a4d18:	460b      	mov	r3, r1
 80a4d1a:	4313      	orrs	r3, r2
 80a4d1c:	d011      	beq.n	80a4d42 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80a4d1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4d22:	3308      	adds	r3, #8
 80a4d24:	2100      	movs	r1, #0
 80a4d26:	4618      	mov	r0, r3
 80a4d28:	f000 f8ba 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a4d2c:	4603      	mov	r3, r0
 80a4d2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80a4d32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4d36:	2b00      	cmp	r3, #0
 80a4d38:	d003      	beq.n	80a4d42 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4d3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4d3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80a4d42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d4a:	2100      	movs	r1, #0
 80a4d4c:	6239      	str	r1, [r7, #32]
 80a4d4e:	f003 0302 	and.w	r3, r3, #2
 80a4d52:	627b      	str	r3, [r7, #36]	@ 0x24
 80a4d54:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80a4d58:	460b      	mov	r3, r1
 80a4d5a:	4313      	orrs	r3, r2
 80a4d5c:	d011      	beq.n	80a4d82 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80a4d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4d62:	3308      	adds	r3, #8
 80a4d64:	2101      	movs	r1, #1
 80a4d66:	4618      	mov	r0, r3
 80a4d68:	f000 f89a 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a4d6c:	4603      	mov	r3, r0
 80a4d6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80a4d72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4d76:	2b00      	cmp	r3, #0
 80a4d78:	d003      	beq.n	80a4d82 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4d7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4d7e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80a4d82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d8a:	2100      	movs	r1, #0
 80a4d8c:	61b9      	str	r1, [r7, #24]
 80a4d8e:	f003 0304 	and.w	r3, r3, #4
 80a4d92:	61fb      	str	r3, [r7, #28]
 80a4d94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80a4d98:	460b      	mov	r3, r1
 80a4d9a:	4313      	orrs	r3, r2
 80a4d9c:	d011      	beq.n	80a4dc2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80a4d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4da2:	3308      	adds	r3, #8
 80a4da4:	2102      	movs	r1, #2
 80a4da6:	4618      	mov	r0, r3
 80a4da8:	f000 f87a 	bl	80a4ea0 <RCCEx_PLL2_Config>
 80a4dac:	4603      	mov	r3, r0
 80a4dae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80a4db2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4db6:	2b00      	cmp	r3, #0
 80a4db8:	d003      	beq.n	80a4dc2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4dba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4dbe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80a4dc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4dca:	2100      	movs	r1, #0
 80a4dcc:	6139      	str	r1, [r7, #16]
 80a4dce:	f003 0308 	and.w	r3, r3, #8
 80a4dd2:	617b      	str	r3, [r7, #20]
 80a4dd4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80a4dd8:	460b      	mov	r3, r1
 80a4dda:	4313      	orrs	r3, r2
 80a4ddc:	d011      	beq.n	80a4e02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80a4dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4de2:	3328      	adds	r3, #40	@ 0x28
 80a4de4:	2100      	movs	r1, #0
 80a4de6:	4618      	mov	r0, r3
 80a4de8:	f000 f90c 	bl	80a5004 <RCCEx_PLL3_Config>
 80a4dec:	4603      	mov	r3, r0
 80a4dee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80a4df2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4df6:	2b00      	cmp	r3, #0
 80a4df8:	d003      	beq.n	80a4e02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4dfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4dfe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80a4e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4e0a:	2100      	movs	r1, #0
 80a4e0c:	60b9      	str	r1, [r7, #8]
 80a4e0e:	f003 0310 	and.w	r3, r3, #16
 80a4e12:	60fb      	str	r3, [r7, #12]
 80a4e14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80a4e18:	460b      	mov	r3, r1
 80a4e1a:	4313      	orrs	r3, r2
 80a4e1c:	d011      	beq.n	80a4e42 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80a4e1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4e22:	3328      	adds	r3, #40	@ 0x28
 80a4e24:	2101      	movs	r1, #1
 80a4e26:	4618      	mov	r0, r3
 80a4e28:	f000 f8ec 	bl	80a5004 <RCCEx_PLL3_Config>
 80a4e2c:	4603      	mov	r3, r0
 80a4e2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80a4e32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4e36:	2b00      	cmp	r3, #0
 80a4e38:	d003      	beq.n	80a4e42 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4e3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4e3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80a4e42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4e4a:	2100      	movs	r1, #0
 80a4e4c:	6039      	str	r1, [r7, #0]
 80a4e4e:	f003 0320 	and.w	r3, r3, #32
 80a4e52:	607b      	str	r3, [r7, #4]
 80a4e54:	e9d7 1200 	ldrd	r1, r2, [r7]
 80a4e58:	460b      	mov	r3, r1
 80a4e5a:	4313      	orrs	r3, r2
 80a4e5c:	d011      	beq.n	80a4e82 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80a4e5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80a4e62:	3328      	adds	r3, #40	@ 0x28
 80a4e64:	2102      	movs	r1, #2
 80a4e66:	4618      	mov	r0, r3
 80a4e68:	f000 f8cc 	bl	80a5004 <RCCEx_PLL3_Config>
 80a4e6c:	4603      	mov	r3, r0
 80a4e6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80a4e72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4e76:	2b00      	cmp	r3, #0
 80a4e78:	d003      	beq.n	80a4e82 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80a4e7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80a4e7e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80a4e82:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80a4e86:	2b00      	cmp	r3, #0
 80a4e88:	d101      	bne.n	80a4e8e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80a4e8a:	2300      	movs	r3, #0
 80a4e8c:	e000      	b.n	80a4e90 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80a4e8e:	2301      	movs	r3, #1
}
 80a4e90:	4618      	mov	r0, r3
 80a4e92:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80a4e96:	46bd      	mov	sp, r7
 80a4e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80a4e9c:	58024400 	.word	0x58024400

080a4ea0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80a4ea0:	b580      	push	{r7, lr}
 80a4ea2:	b084      	sub	sp, #16
 80a4ea4:	af00      	add	r7, sp, #0
 80a4ea6:	6078      	str	r0, [r7, #4]
 80a4ea8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80a4eaa:	2300      	movs	r3, #0
 80a4eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80a4eae:	4b53      	ldr	r3, [pc, #332]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a4eb2:	f003 0303 	and.w	r3, r3, #3
 80a4eb6:	2b03      	cmp	r3, #3
 80a4eb8:	d101      	bne.n	80a4ebe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80a4eba:	2301      	movs	r3, #1
 80a4ebc:	e099      	b.n	80a4ff2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80a4ebe:	4b4f      	ldr	r3, [pc, #316]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4ec0:	681b      	ldr	r3, [r3, #0]
 80a4ec2:	4a4e      	ldr	r2, [pc, #312]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4ec4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80a4ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80a4eca:	f7fb fef9 	bl	80a0cc0 <HAL_GetTick>
 80a4ece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80a4ed0:	e008      	b.n	80a4ee4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80a4ed2:	f7fb fef5 	bl	80a0cc0 <HAL_GetTick>
 80a4ed6:	4602      	mov	r2, r0
 80a4ed8:	68bb      	ldr	r3, [r7, #8]
 80a4eda:	1ad3      	subs	r3, r2, r3
 80a4edc:	2b02      	cmp	r3, #2
 80a4ede:	d901      	bls.n	80a4ee4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80a4ee0:	2303      	movs	r3, #3
 80a4ee2:	e086      	b.n	80a4ff2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80a4ee4:	4b45      	ldr	r3, [pc, #276]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4ee6:	681b      	ldr	r3, [r3, #0]
 80a4ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80a4eec:	2b00      	cmp	r3, #0
 80a4eee:	d1f0      	bne.n	80a4ed2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80a4ef0:	4b42      	ldr	r3, [pc, #264]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a4ef4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80a4ef8:	687b      	ldr	r3, [r7, #4]
 80a4efa:	681b      	ldr	r3, [r3, #0]
 80a4efc:	031b      	lsls	r3, r3, #12
 80a4efe:	493f      	ldr	r1, [pc, #252]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4f00:	4313      	orrs	r3, r2
 80a4f02:	628b      	str	r3, [r1, #40]	@ 0x28
 80a4f04:	687b      	ldr	r3, [r7, #4]
 80a4f06:	685b      	ldr	r3, [r3, #4]
 80a4f08:	3b01      	subs	r3, #1
 80a4f0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80a4f0e:	687b      	ldr	r3, [r7, #4]
 80a4f10:	689b      	ldr	r3, [r3, #8]
 80a4f12:	3b01      	subs	r3, #1
 80a4f14:	025b      	lsls	r3, r3, #9
 80a4f16:	b29b      	uxth	r3, r3
 80a4f18:	431a      	orrs	r2, r3
 80a4f1a:	687b      	ldr	r3, [r7, #4]
 80a4f1c:	68db      	ldr	r3, [r3, #12]
 80a4f1e:	3b01      	subs	r3, #1
 80a4f20:	041b      	lsls	r3, r3, #16
 80a4f22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80a4f26:	431a      	orrs	r2, r3
 80a4f28:	687b      	ldr	r3, [r7, #4]
 80a4f2a:	691b      	ldr	r3, [r3, #16]
 80a4f2c:	3b01      	subs	r3, #1
 80a4f2e:	061b      	lsls	r3, r3, #24
 80a4f30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80a4f34:	4931      	ldr	r1, [pc, #196]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4f36:	4313      	orrs	r3, r2
 80a4f38:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80a4f3a:	4b30      	ldr	r3, [pc, #192]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4f3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80a4f42:	687b      	ldr	r3, [r7, #4]
 80a4f44:	695b      	ldr	r3, [r3, #20]
 80a4f46:	492d      	ldr	r1, [pc, #180]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4f48:	4313      	orrs	r3, r2
 80a4f4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80a4f4c:	4b2b      	ldr	r3, [pc, #172]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4f50:	f023 0220 	bic.w	r2, r3, #32
 80a4f54:	687b      	ldr	r3, [r7, #4]
 80a4f56:	699b      	ldr	r3, [r3, #24]
 80a4f58:	4928      	ldr	r1, [pc, #160]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4f5a:	4313      	orrs	r3, r2
 80a4f5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80a4f5e:	4b27      	ldr	r3, [pc, #156]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4f62:	4a26      	ldr	r2, [pc, #152]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4f64:	f023 0310 	bic.w	r3, r3, #16
 80a4f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80a4f6a:	4b24      	ldr	r3, [pc, #144]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4f6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80a4f6e:	4b24      	ldr	r3, [pc, #144]	@ (80a5000 <RCCEx_PLL2_Config+0x160>)
 80a4f70:	4013      	ands	r3, r2
 80a4f72:	687a      	ldr	r2, [r7, #4]
 80a4f74:	69d2      	ldr	r2, [r2, #28]
 80a4f76:	00d2      	lsls	r2, r2, #3
 80a4f78:	4920      	ldr	r1, [pc, #128]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4f7a:	4313      	orrs	r3, r2
 80a4f7c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80a4f7e:	4b1f      	ldr	r3, [pc, #124]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4f82:	4a1e      	ldr	r2, [pc, #120]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4f84:	f043 0310 	orr.w	r3, r3, #16
 80a4f88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80a4f8a:	683b      	ldr	r3, [r7, #0]
 80a4f8c:	2b00      	cmp	r3, #0
 80a4f8e:	d106      	bne.n	80a4f9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80a4f90:	4b1a      	ldr	r3, [pc, #104]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4f94:	4a19      	ldr	r2, [pc, #100]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4f96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80a4f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80a4f9c:	e00f      	b.n	80a4fbe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80a4f9e:	683b      	ldr	r3, [r7, #0]
 80a4fa0:	2b01      	cmp	r3, #1
 80a4fa2:	d106      	bne.n	80a4fb2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80a4fa4:	4b15      	ldr	r3, [pc, #84]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4fa8:	4a14      	ldr	r2, [pc, #80]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4faa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80a4fae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80a4fb0:	e005      	b.n	80a4fbe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80a4fb2:	4b12      	ldr	r3, [pc, #72]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a4fb6:	4a11      	ldr	r2, [pc, #68]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4fb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80a4fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80a4fbe:	4b0f      	ldr	r3, [pc, #60]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4fc0:	681b      	ldr	r3, [r3, #0]
 80a4fc2:	4a0e      	ldr	r2, [pc, #56]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4fc4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80a4fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80a4fca:	f7fb fe79 	bl	80a0cc0 <HAL_GetTick>
 80a4fce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80a4fd0:	e008      	b.n	80a4fe4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80a4fd2:	f7fb fe75 	bl	80a0cc0 <HAL_GetTick>
 80a4fd6:	4602      	mov	r2, r0
 80a4fd8:	68bb      	ldr	r3, [r7, #8]
 80a4fda:	1ad3      	subs	r3, r2, r3
 80a4fdc:	2b02      	cmp	r3, #2
 80a4fde:	d901      	bls.n	80a4fe4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80a4fe0:	2303      	movs	r3, #3
 80a4fe2:	e006      	b.n	80a4ff2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80a4fe4:	4b05      	ldr	r3, [pc, #20]	@ (80a4ffc <RCCEx_PLL2_Config+0x15c>)
 80a4fe6:	681b      	ldr	r3, [r3, #0]
 80a4fe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80a4fec:	2b00      	cmp	r3, #0
 80a4fee:	d0f0      	beq.n	80a4fd2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80a4ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 80a4ff2:	4618      	mov	r0, r3
 80a4ff4:	3710      	adds	r7, #16
 80a4ff6:	46bd      	mov	sp, r7
 80a4ff8:	bd80      	pop	{r7, pc}
 80a4ffa:	bf00      	nop
 80a4ffc:	58024400 	.word	0x58024400
 80a5000:	ffff0007 	.word	0xffff0007

080a5004 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80a5004:	b580      	push	{r7, lr}
 80a5006:	b084      	sub	sp, #16
 80a5008:	af00      	add	r7, sp, #0
 80a500a:	6078      	str	r0, [r7, #4]
 80a500c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80a500e:	2300      	movs	r3, #0
 80a5010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80a5012:	4b53      	ldr	r3, [pc, #332]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a5014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a5016:	f003 0303 	and.w	r3, r3, #3
 80a501a:	2b03      	cmp	r3, #3
 80a501c:	d101      	bne.n	80a5022 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80a501e:	2301      	movs	r3, #1
 80a5020:	e099      	b.n	80a5156 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80a5022:	4b4f      	ldr	r3, [pc, #316]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a5024:	681b      	ldr	r3, [r3, #0]
 80a5026:	4a4e      	ldr	r2, [pc, #312]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a5028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80a502c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80a502e:	f7fb fe47 	bl	80a0cc0 <HAL_GetTick>
 80a5032:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80a5034:	e008      	b.n	80a5048 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80a5036:	f7fb fe43 	bl	80a0cc0 <HAL_GetTick>
 80a503a:	4602      	mov	r2, r0
 80a503c:	68bb      	ldr	r3, [r7, #8]
 80a503e:	1ad3      	subs	r3, r2, r3
 80a5040:	2b02      	cmp	r3, #2
 80a5042:	d901      	bls.n	80a5048 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80a5044:	2303      	movs	r3, #3
 80a5046:	e086      	b.n	80a5156 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80a5048:	4b45      	ldr	r3, [pc, #276]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a504a:	681b      	ldr	r3, [r3, #0]
 80a504c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80a5050:	2b00      	cmp	r3, #0
 80a5052:	d1f0      	bne.n	80a5036 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80a5054:	4b42      	ldr	r3, [pc, #264]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a5056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a5058:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80a505c:	687b      	ldr	r3, [r7, #4]
 80a505e:	681b      	ldr	r3, [r3, #0]
 80a5060:	051b      	lsls	r3, r3, #20
 80a5062:	493f      	ldr	r1, [pc, #252]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a5064:	4313      	orrs	r3, r2
 80a5066:	628b      	str	r3, [r1, #40]	@ 0x28
 80a5068:	687b      	ldr	r3, [r7, #4]
 80a506a:	685b      	ldr	r3, [r3, #4]
 80a506c:	3b01      	subs	r3, #1
 80a506e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80a5072:	687b      	ldr	r3, [r7, #4]
 80a5074:	689b      	ldr	r3, [r3, #8]
 80a5076:	3b01      	subs	r3, #1
 80a5078:	025b      	lsls	r3, r3, #9
 80a507a:	b29b      	uxth	r3, r3
 80a507c:	431a      	orrs	r2, r3
 80a507e:	687b      	ldr	r3, [r7, #4]
 80a5080:	68db      	ldr	r3, [r3, #12]
 80a5082:	3b01      	subs	r3, #1
 80a5084:	041b      	lsls	r3, r3, #16
 80a5086:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80a508a:	431a      	orrs	r2, r3
 80a508c:	687b      	ldr	r3, [r7, #4]
 80a508e:	691b      	ldr	r3, [r3, #16]
 80a5090:	3b01      	subs	r3, #1
 80a5092:	061b      	lsls	r3, r3, #24
 80a5094:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80a5098:	4931      	ldr	r1, [pc, #196]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a509a:	4313      	orrs	r3, r2
 80a509c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80a509e:	4b30      	ldr	r3, [pc, #192]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a50a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a50a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80a50a6:	687b      	ldr	r3, [r7, #4]
 80a50a8:	695b      	ldr	r3, [r3, #20]
 80a50aa:	492d      	ldr	r1, [pc, #180]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a50ac:	4313      	orrs	r3, r2
 80a50ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80a50b0:	4b2b      	ldr	r3, [pc, #172]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a50b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a50b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80a50b8:	687b      	ldr	r3, [r7, #4]
 80a50ba:	699b      	ldr	r3, [r3, #24]
 80a50bc:	4928      	ldr	r1, [pc, #160]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a50be:	4313      	orrs	r3, r2
 80a50c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80a50c2:	4b27      	ldr	r3, [pc, #156]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a50c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a50c6:	4a26      	ldr	r2, [pc, #152]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a50c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80a50cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80a50ce:	4b24      	ldr	r3, [pc, #144]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a50d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80a50d2:	4b24      	ldr	r3, [pc, #144]	@ (80a5164 <RCCEx_PLL3_Config+0x160>)
 80a50d4:	4013      	ands	r3, r2
 80a50d6:	687a      	ldr	r2, [r7, #4]
 80a50d8:	69d2      	ldr	r2, [r2, #28]
 80a50da:	00d2      	lsls	r2, r2, #3
 80a50dc:	4920      	ldr	r1, [pc, #128]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a50de:	4313      	orrs	r3, r2
 80a50e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80a50e2:	4b1f      	ldr	r3, [pc, #124]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a50e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a50e6:	4a1e      	ldr	r2, [pc, #120]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a50e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80a50ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80a50ee:	683b      	ldr	r3, [r7, #0]
 80a50f0:	2b00      	cmp	r3, #0
 80a50f2:	d106      	bne.n	80a5102 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80a50f4:	4b1a      	ldr	r3, [pc, #104]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a50f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a50f8:	4a19      	ldr	r2, [pc, #100]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a50fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80a50fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80a5100:	e00f      	b.n	80a5122 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80a5102:	683b      	ldr	r3, [r7, #0]
 80a5104:	2b01      	cmp	r3, #1
 80a5106:	d106      	bne.n	80a5116 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80a5108:	4b15      	ldr	r3, [pc, #84]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a510a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a510c:	4a14      	ldr	r2, [pc, #80]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a510e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80a5112:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80a5114:	e005      	b.n	80a5122 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80a5116:	4b12      	ldr	r3, [pc, #72]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a5118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a511a:	4a11      	ldr	r2, [pc, #68]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a511c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80a5120:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80a5122:	4b0f      	ldr	r3, [pc, #60]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a5124:	681b      	ldr	r3, [r3, #0]
 80a5126:	4a0e      	ldr	r2, [pc, #56]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a5128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80a512c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80a512e:	f7fb fdc7 	bl	80a0cc0 <HAL_GetTick>
 80a5132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80a5134:	e008      	b.n	80a5148 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80a5136:	f7fb fdc3 	bl	80a0cc0 <HAL_GetTick>
 80a513a:	4602      	mov	r2, r0
 80a513c:	68bb      	ldr	r3, [r7, #8]
 80a513e:	1ad3      	subs	r3, r2, r3
 80a5140:	2b02      	cmp	r3, #2
 80a5142:	d901      	bls.n	80a5148 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80a5144:	2303      	movs	r3, #3
 80a5146:	e006      	b.n	80a5156 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80a5148:	4b05      	ldr	r3, [pc, #20]	@ (80a5160 <RCCEx_PLL3_Config+0x15c>)
 80a514a:	681b      	ldr	r3, [r3, #0]
 80a514c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80a5150:	2b00      	cmp	r3, #0
 80a5152:	d0f0      	beq.n	80a5136 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80a5154:	7bfb      	ldrb	r3, [r7, #15]
}
 80a5156:	4618      	mov	r0, r3
 80a5158:	3710      	adds	r7, #16
 80a515a:	46bd      	mov	sp, r7
 80a515c:	bd80      	pop	{r7, pc}
 80a515e:	bf00      	nop
 80a5160:	58024400 	.word	0x58024400
 80a5164:	ffff0007 	.word	0xffff0007

080a5168 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80a5168:	b084      	sub	sp, #16
 80a516a:	b580      	push	{r7, lr}
 80a516c:	b084      	sub	sp, #16
 80a516e:	af00      	add	r7, sp, #0
 80a5170:	6078      	str	r0, [r7, #4]
 80a5172:	f107 001c 	add.w	r0, r7, #28
 80a5176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80a517a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80a517e:	2b01      	cmp	r3, #1
 80a5180:	d121      	bne.n	80a51c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80a5182:	687b      	ldr	r3, [r7, #4]
 80a5184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80a5186:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80a518a:	687b      	ldr	r3, [r7, #4]
 80a518c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80a518e:	687b      	ldr	r3, [r7, #4]
 80a5190:	68da      	ldr	r2, [r3, #12]
 80a5192:	4b2c      	ldr	r3, [pc, #176]	@ (80a5244 <USB_CoreInit+0xdc>)
 80a5194:	4013      	ands	r3, r2
 80a5196:	687a      	ldr	r2, [r7, #4]
 80a5198:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80a519a:	687b      	ldr	r3, [r7, #4]
 80a519c:	68db      	ldr	r3, [r3, #12]
 80a519e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80a51a2:	687b      	ldr	r3, [r7, #4]
 80a51a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80a51a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80a51aa:	2b01      	cmp	r3, #1
 80a51ac:	d105      	bne.n	80a51ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80a51ae:	687b      	ldr	r3, [r7, #4]
 80a51b0:	68db      	ldr	r3, [r3, #12]
 80a51b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80a51b6:	687b      	ldr	r3, [r7, #4]
 80a51b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80a51ba:	6878      	ldr	r0, [r7, #4]
 80a51bc:	f001 fafa 	bl	80a67b4 <USB_CoreReset>
 80a51c0:	4603      	mov	r3, r0
 80a51c2:	73fb      	strb	r3, [r7, #15]
 80a51c4:	e01b      	b.n	80a51fe <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80a51c6:	687b      	ldr	r3, [r7, #4]
 80a51c8:	68db      	ldr	r3, [r3, #12]
 80a51ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80a51ce:	687b      	ldr	r3, [r7, #4]
 80a51d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80a51d2:	6878      	ldr	r0, [r7, #4]
 80a51d4:	f001 faee 	bl	80a67b4 <USB_CoreReset>
 80a51d8:	4603      	mov	r3, r0
 80a51da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80a51dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80a51e0:	2b00      	cmp	r3, #0
 80a51e2:	d106      	bne.n	80a51f2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80a51e4:	687b      	ldr	r3, [r7, #4]
 80a51e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80a51e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80a51ec:	687b      	ldr	r3, [r7, #4]
 80a51ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80a51f0:	e005      	b.n	80a51fe <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80a51f2:	687b      	ldr	r3, [r7, #4]
 80a51f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80a51f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80a51fa:	687b      	ldr	r3, [r7, #4]
 80a51fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80a51fe:	7fbb      	ldrb	r3, [r7, #30]
 80a5200:	2b01      	cmp	r3, #1
 80a5202:	d116      	bne.n	80a5232 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80a5204:	687b      	ldr	r3, [r7, #4]
 80a5206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80a5208:	b29a      	uxth	r2, r3
 80a520a:	687b      	ldr	r3, [r7, #4]
 80a520c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80a520e:	687b      	ldr	r3, [r7, #4]
 80a5210:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80a5212:	4b0d      	ldr	r3, [pc, #52]	@ (80a5248 <USB_CoreInit+0xe0>)
 80a5214:	4313      	orrs	r3, r2
 80a5216:	687a      	ldr	r2, [r7, #4]
 80a5218:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80a521a:	687b      	ldr	r3, [r7, #4]
 80a521c:	689b      	ldr	r3, [r3, #8]
 80a521e:	f043 0206 	orr.w	r2, r3, #6
 80a5222:	687b      	ldr	r3, [r7, #4]
 80a5224:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80a5226:	687b      	ldr	r3, [r7, #4]
 80a5228:	689b      	ldr	r3, [r3, #8]
 80a522a:	f043 0220 	orr.w	r2, r3, #32
 80a522e:	687b      	ldr	r3, [r7, #4]
 80a5230:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80a5232:	7bfb      	ldrb	r3, [r7, #15]
}
 80a5234:	4618      	mov	r0, r3
 80a5236:	3710      	adds	r7, #16
 80a5238:	46bd      	mov	sp, r7
 80a523a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80a523e:	b004      	add	sp, #16
 80a5240:	4770      	bx	lr
 80a5242:	bf00      	nop
 80a5244:	ffbdffbf 	.word	0xffbdffbf
 80a5248:	03ee0000 	.word	0x03ee0000

080a524c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80a524c:	b480      	push	{r7}
 80a524e:	b087      	sub	sp, #28
 80a5250:	af00      	add	r7, sp, #0
 80a5252:	60f8      	str	r0, [r7, #12]
 80a5254:	60b9      	str	r1, [r7, #8]
 80a5256:	4613      	mov	r3, r2
 80a5258:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80a525a:	79fb      	ldrb	r3, [r7, #7]
 80a525c:	2b02      	cmp	r3, #2
 80a525e:	d165      	bne.n	80a532c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80a5260:	68bb      	ldr	r3, [r7, #8]
 80a5262:	4a41      	ldr	r2, [pc, #260]	@ (80a5368 <USB_SetTurnaroundTime+0x11c>)
 80a5264:	4293      	cmp	r3, r2
 80a5266:	d906      	bls.n	80a5276 <USB_SetTurnaroundTime+0x2a>
 80a5268:	68bb      	ldr	r3, [r7, #8]
 80a526a:	4a40      	ldr	r2, [pc, #256]	@ (80a536c <USB_SetTurnaroundTime+0x120>)
 80a526c:	4293      	cmp	r3, r2
 80a526e:	d202      	bcs.n	80a5276 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80a5270:	230f      	movs	r3, #15
 80a5272:	617b      	str	r3, [r7, #20]
 80a5274:	e062      	b.n	80a533c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80a5276:	68bb      	ldr	r3, [r7, #8]
 80a5278:	4a3c      	ldr	r2, [pc, #240]	@ (80a536c <USB_SetTurnaroundTime+0x120>)
 80a527a:	4293      	cmp	r3, r2
 80a527c:	d306      	bcc.n	80a528c <USB_SetTurnaroundTime+0x40>
 80a527e:	68bb      	ldr	r3, [r7, #8]
 80a5280:	4a3b      	ldr	r2, [pc, #236]	@ (80a5370 <USB_SetTurnaroundTime+0x124>)
 80a5282:	4293      	cmp	r3, r2
 80a5284:	d202      	bcs.n	80a528c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80a5286:	230e      	movs	r3, #14
 80a5288:	617b      	str	r3, [r7, #20]
 80a528a:	e057      	b.n	80a533c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80a528c:	68bb      	ldr	r3, [r7, #8]
 80a528e:	4a38      	ldr	r2, [pc, #224]	@ (80a5370 <USB_SetTurnaroundTime+0x124>)
 80a5290:	4293      	cmp	r3, r2
 80a5292:	d306      	bcc.n	80a52a2 <USB_SetTurnaroundTime+0x56>
 80a5294:	68bb      	ldr	r3, [r7, #8]
 80a5296:	4a37      	ldr	r2, [pc, #220]	@ (80a5374 <USB_SetTurnaroundTime+0x128>)
 80a5298:	4293      	cmp	r3, r2
 80a529a:	d202      	bcs.n	80a52a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80a529c:	230d      	movs	r3, #13
 80a529e:	617b      	str	r3, [r7, #20]
 80a52a0:	e04c      	b.n	80a533c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80a52a2:	68bb      	ldr	r3, [r7, #8]
 80a52a4:	4a33      	ldr	r2, [pc, #204]	@ (80a5374 <USB_SetTurnaroundTime+0x128>)
 80a52a6:	4293      	cmp	r3, r2
 80a52a8:	d306      	bcc.n	80a52b8 <USB_SetTurnaroundTime+0x6c>
 80a52aa:	68bb      	ldr	r3, [r7, #8]
 80a52ac:	4a32      	ldr	r2, [pc, #200]	@ (80a5378 <USB_SetTurnaroundTime+0x12c>)
 80a52ae:	4293      	cmp	r3, r2
 80a52b0:	d802      	bhi.n	80a52b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80a52b2:	230c      	movs	r3, #12
 80a52b4:	617b      	str	r3, [r7, #20]
 80a52b6:	e041      	b.n	80a533c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80a52b8:	68bb      	ldr	r3, [r7, #8]
 80a52ba:	4a2f      	ldr	r2, [pc, #188]	@ (80a5378 <USB_SetTurnaroundTime+0x12c>)
 80a52bc:	4293      	cmp	r3, r2
 80a52be:	d906      	bls.n	80a52ce <USB_SetTurnaroundTime+0x82>
 80a52c0:	68bb      	ldr	r3, [r7, #8]
 80a52c2:	4a2e      	ldr	r2, [pc, #184]	@ (80a537c <USB_SetTurnaroundTime+0x130>)
 80a52c4:	4293      	cmp	r3, r2
 80a52c6:	d802      	bhi.n	80a52ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80a52c8:	230b      	movs	r3, #11
 80a52ca:	617b      	str	r3, [r7, #20]
 80a52cc:	e036      	b.n	80a533c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80a52ce:	68bb      	ldr	r3, [r7, #8]
 80a52d0:	4a2a      	ldr	r2, [pc, #168]	@ (80a537c <USB_SetTurnaroundTime+0x130>)
 80a52d2:	4293      	cmp	r3, r2
 80a52d4:	d906      	bls.n	80a52e4 <USB_SetTurnaroundTime+0x98>
 80a52d6:	68bb      	ldr	r3, [r7, #8]
 80a52d8:	4a29      	ldr	r2, [pc, #164]	@ (80a5380 <USB_SetTurnaroundTime+0x134>)
 80a52da:	4293      	cmp	r3, r2
 80a52dc:	d802      	bhi.n	80a52e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80a52de:	230a      	movs	r3, #10
 80a52e0:	617b      	str	r3, [r7, #20]
 80a52e2:	e02b      	b.n	80a533c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80a52e4:	68bb      	ldr	r3, [r7, #8]
 80a52e6:	4a26      	ldr	r2, [pc, #152]	@ (80a5380 <USB_SetTurnaroundTime+0x134>)
 80a52e8:	4293      	cmp	r3, r2
 80a52ea:	d906      	bls.n	80a52fa <USB_SetTurnaroundTime+0xae>
 80a52ec:	68bb      	ldr	r3, [r7, #8]
 80a52ee:	4a25      	ldr	r2, [pc, #148]	@ (80a5384 <USB_SetTurnaroundTime+0x138>)
 80a52f0:	4293      	cmp	r3, r2
 80a52f2:	d202      	bcs.n	80a52fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80a52f4:	2309      	movs	r3, #9
 80a52f6:	617b      	str	r3, [r7, #20]
 80a52f8:	e020      	b.n	80a533c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80a52fa:	68bb      	ldr	r3, [r7, #8]
 80a52fc:	4a21      	ldr	r2, [pc, #132]	@ (80a5384 <USB_SetTurnaroundTime+0x138>)
 80a52fe:	4293      	cmp	r3, r2
 80a5300:	d306      	bcc.n	80a5310 <USB_SetTurnaroundTime+0xc4>
 80a5302:	68bb      	ldr	r3, [r7, #8]
 80a5304:	4a20      	ldr	r2, [pc, #128]	@ (80a5388 <USB_SetTurnaroundTime+0x13c>)
 80a5306:	4293      	cmp	r3, r2
 80a5308:	d802      	bhi.n	80a5310 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80a530a:	2308      	movs	r3, #8
 80a530c:	617b      	str	r3, [r7, #20]
 80a530e:	e015      	b.n	80a533c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80a5310:	68bb      	ldr	r3, [r7, #8]
 80a5312:	4a1d      	ldr	r2, [pc, #116]	@ (80a5388 <USB_SetTurnaroundTime+0x13c>)
 80a5314:	4293      	cmp	r3, r2
 80a5316:	d906      	bls.n	80a5326 <USB_SetTurnaroundTime+0xda>
 80a5318:	68bb      	ldr	r3, [r7, #8]
 80a531a:	4a1c      	ldr	r2, [pc, #112]	@ (80a538c <USB_SetTurnaroundTime+0x140>)
 80a531c:	4293      	cmp	r3, r2
 80a531e:	d202      	bcs.n	80a5326 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80a5320:	2307      	movs	r3, #7
 80a5322:	617b      	str	r3, [r7, #20]
 80a5324:	e00a      	b.n	80a533c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80a5326:	2306      	movs	r3, #6
 80a5328:	617b      	str	r3, [r7, #20]
 80a532a:	e007      	b.n	80a533c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80a532c:	79fb      	ldrb	r3, [r7, #7]
 80a532e:	2b00      	cmp	r3, #0
 80a5330:	d102      	bne.n	80a5338 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80a5332:	2309      	movs	r3, #9
 80a5334:	617b      	str	r3, [r7, #20]
 80a5336:	e001      	b.n	80a533c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80a5338:	2309      	movs	r3, #9
 80a533a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80a533c:	68fb      	ldr	r3, [r7, #12]
 80a533e:	68db      	ldr	r3, [r3, #12]
 80a5340:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80a5344:	68fb      	ldr	r3, [r7, #12]
 80a5346:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80a5348:	68fb      	ldr	r3, [r7, #12]
 80a534a:	68da      	ldr	r2, [r3, #12]
 80a534c:	697b      	ldr	r3, [r7, #20]
 80a534e:	029b      	lsls	r3, r3, #10
 80a5350:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80a5354:	431a      	orrs	r2, r3
 80a5356:	68fb      	ldr	r3, [r7, #12]
 80a5358:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80a535a:	2300      	movs	r3, #0
}
 80a535c:	4618      	mov	r0, r3
 80a535e:	371c      	adds	r7, #28
 80a5360:	46bd      	mov	sp, r7
 80a5362:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a5366:	4770      	bx	lr
 80a5368:	00d8acbf 	.word	0x00d8acbf
 80a536c:	00e4e1c0 	.word	0x00e4e1c0
 80a5370:	00f42400 	.word	0x00f42400
 80a5374:	01067380 	.word	0x01067380
 80a5378:	011a499f 	.word	0x011a499f
 80a537c:	01312cff 	.word	0x01312cff
 80a5380:	014ca43f 	.word	0x014ca43f
 80a5384:	016e3600 	.word	0x016e3600
 80a5388:	01a6ab1f 	.word	0x01a6ab1f
 80a538c:	01e84800 	.word	0x01e84800

080a5390 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80a5390:	b480      	push	{r7}
 80a5392:	b083      	sub	sp, #12
 80a5394:	af00      	add	r7, sp, #0
 80a5396:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80a5398:	687b      	ldr	r3, [r7, #4]
 80a539a:	689b      	ldr	r3, [r3, #8]
 80a539c:	f043 0201 	orr.w	r2, r3, #1
 80a53a0:	687b      	ldr	r3, [r7, #4]
 80a53a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80a53a4:	2300      	movs	r3, #0
}
 80a53a6:	4618      	mov	r0, r3
 80a53a8:	370c      	adds	r7, #12
 80a53aa:	46bd      	mov	sp, r7
 80a53ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a53b0:	4770      	bx	lr

080a53b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80a53b2:	b480      	push	{r7}
 80a53b4:	b083      	sub	sp, #12
 80a53b6:	af00      	add	r7, sp, #0
 80a53b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80a53ba:	687b      	ldr	r3, [r7, #4]
 80a53bc:	689b      	ldr	r3, [r3, #8]
 80a53be:	f023 0201 	bic.w	r2, r3, #1
 80a53c2:	687b      	ldr	r3, [r7, #4]
 80a53c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80a53c6:	2300      	movs	r3, #0
}
 80a53c8:	4618      	mov	r0, r3
 80a53ca:	370c      	adds	r7, #12
 80a53cc:	46bd      	mov	sp, r7
 80a53ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a53d2:	4770      	bx	lr

080a53d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80a53d4:	b580      	push	{r7, lr}
 80a53d6:	b084      	sub	sp, #16
 80a53d8:	af00      	add	r7, sp, #0
 80a53da:	6078      	str	r0, [r7, #4]
 80a53dc:	460b      	mov	r3, r1
 80a53de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80a53e0:	2300      	movs	r3, #0
 80a53e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80a53e4:	687b      	ldr	r3, [r7, #4]
 80a53e6:	68db      	ldr	r3, [r3, #12]
 80a53e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80a53ec:	687b      	ldr	r3, [r7, #4]
 80a53ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80a53f0:	78fb      	ldrb	r3, [r7, #3]
 80a53f2:	2b01      	cmp	r3, #1
 80a53f4:	d115      	bne.n	80a5422 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80a53f6:	687b      	ldr	r3, [r7, #4]
 80a53f8:	68db      	ldr	r3, [r3, #12]
 80a53fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80a53fe:	687b      	ldr	r3, [r7, #4]
 80a5400:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80a5402:	200a      	movs	r0, #10
 80a5404:	f7fb fc68 	bl	80a0cd8 <HAL_Delay>
      ms += 10U;
 80a5408:	68fb      	ldr	r3, [r7, #12]
 80a540a:	330a      	adds	r3, #10
 80a540c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80a540e:	6878      	ldr	r0, [r7, #4]
 80a5410:	f001 f93f 	bl	80a6692 <USB_GetMode>
 80a5414:	4603      	mov	r3, r0
 80a5416:	2b01      	cmp	r3, #1
 80a5418:	d01e      	beq.n	80a5458 <USB_SetCurrentMode+0x84>
 80a541a:	68fb      	ldr	r3, [r7, #12]
 80a541c:	2bc7      	cmp	r3, #199	@ 0xc7
 80a541e:	d9f0      	bls.n	80a5402 <USB_SetCurrentMode+0x2e>
 80a5420:	e01a      	b.n	80a5458 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80a5422:	78fb      	ldrb	r3, [r7, #3]
 80a5424:	2b00      	cmp	r3, #0
 80a5426:	d115      	bne.n	80a5454 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80a5428:	687b      	ldr	r3, [r7, #4]
 80a542a:	68db      	ldr	r3, [r3, #12]
 80a542c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80a5430:	687b      	ldr	r3, [r7, #4]
 80a5432:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80a5434:	200a      	movs	r0, #10
 80a5436:	f7fb fc4f 	bl	80a0cd8 <HAL_Delay>
      ms += 10U;
 80a543a:	68fb      	ldr	r3, [r7, #12]
 80a543c:	330a      	adds	r3, #10
 80a543e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80a5440:	6878      	ldr	r0, [r7, #4]
 80a5442:	f001 f926 	bl	80a6692 <USB_GetMode>
 80a5446:	4603      	mov	r3, r0
 80a5448:	2b00      	cmp	r3, #0
 80a544a:	d005      	beq.n	80a5458 <USB_SetCurrentMode+0x84>
 80a544c:	68fb      	ldr	r3, [r7, #12]
 80a544e:	2bc7      	cmp	r3, #199	@ 0xc7
 80a5450:	d9f0      	bls.n	80a5434 <USB_SetCurrentMode+0x60>
 80a5452:	e001      	b.n	80a5458 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80a5454:	2301      	movs	r3, #1
 80a5456:	e005      	b.n	80a5464 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80a5458:	68fb      	ldr	r3, [r7, #12]
 80a545a:	2bc8      	cmp	r3, #200	@ 0xc8
 80a545c:	d101      	bne.n	80a5462 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80a545e:	2301      	movs	r3, #1
 80a5460:	e000      	b.n	80a5464 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80a5462:	2300      	movs	r3, #0
}
 80a5464:	4618      	mov	r0, r3
 80a5466:	3710      	adds	r7, #16
 80a5468:	46bd      	mov	sp, r7
 80a546a:	bd80      	pop	{r7, pc}

080a546c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80a546c:	b084      	sub	sp, #16
 80a546e:	b580      	push	{r7, lr}
 80a5470:	b086      	sub	sp, #24
 80a5472:	af00      	add	r7, sp, #0
 80a5474:	6078      	str	r0, [r7, #4]
 80a5476:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80a547a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80a547e:	2300      	movs	r3, #0
 80a5480:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a5482:	687b      	ldr	r3, [r7, #4]
 80a5484:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80a5486:	2300      	movs	r3, #0
 80a5488:	613b      	str	r3, [r7, #16]
 80a548a:	e009      	b.n	80a54a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80a548c:	687a      	ldr	r2, [r7, #4]
 80a548e:	693b      	ldr	r3, [r7, #16]
 80a5490:	3340      	adds	r3, #64	@ 0x40
 80a5492:	009b      	lsls	r3, r3, #2
 80a5494:	4413      	add	r3, r2
 80a5496:	2200      	movs	r2, #0
 80a5498:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80a549a:	693b      	ldr	r3, [r7, #16]
 80a549c:	3301      	adds	r3, #1
 80a549e:	613b      	str	r3, [r7, #16]
 80a54a0:	693b      	ldr	r3, [r7, #16]
 80a54a2:	2b0e      	cmp	r3, #14
 80a54a4:	d9f2      	bls.n	80a548c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80a54a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80a54aa:	2b00      	cmp	r3, #0
 80a54ac:	d11c      	bne.n	80a54e8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80a54ae:	68fb      	ldr	r3, [r7, #12]
 80a54b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a54b4:	685b      	ldr	r3, [r3, #4]
 80a54b6:	68fa      	ldr	r2, [r7, #12]
 80a54b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a54bc:	f043 0302 	orr.w	r3, r3, #2
 80a54c0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80a54c2:	687b      	ldr	r3, [r7, #4]
 80a54c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80a54c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80a54ca:	687b      	ldr	r3, [r7, #4]
 80a54cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80a54ce:	687b      	ldr	r3, [r7, #4]
 80a54d0:	681b      	ldr	r3, [r3, #0]
 80a54d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80a54d6:	687b      	ldr	r3, [r7, #4]
 80a54d8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80a54da:	687b      	ldr	r3, [r7, #4]
 80a54dc:	681b      	ldr	r3, [r3, #0]
 80a54de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80a54e2:	687b      	ldr	r3, [r7, #4]
 80a54e4:	601a      	str	r2, [r3, #0]
 80a54e6:	e005      	b.n	80a54f4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80a54e8:	687b      	ldr	r3, [r7, #4]
 80a54ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80a54ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80a54f0:	687b      	ldr	r3, [r7, #4]
 80a54f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80a54f4:	68fb      	ldr	r3, [r7, #12]
 80a54f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80a54fa:	461a      	mov	r2, r3
 80a54fc:	2300      	movs	r3, #0
 80a54fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80a5500:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80a5504:	2b01      	cmp	r3, #1
 80a5506:	d10d      	bne.n	80a5524 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80a5508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80a550c:	2b00      	cmp	r3, #0
 80a550e:	d104      	bne.n	80a551a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80a5510:	2100      	movs	r1, #0
 80a5512:	6878      	ldr	r0, [r7, #4]
 80a5514:	f000 f968 	bl	80a57e8 <USB_SetDevSpeed>
 80a5518:	e008      	b.n	80a552c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80a551a:	2101      	movs	r1, #1
 80a551c:	6878      	ldr	r0, [r7, #4]
 80a551e:	f000 f963 	bl	80a57e8 <USB_SetDevSpeed>
 80a5522:	e003      	b.n	80a552c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80a5524:	2103      	movs	r1, #3
 80a5526:	6878      	ldr	r0, [r7, #4]
 80a5528:	f000 f95e 	bl	80a57e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80a552c:	2110      	movs	r1, #16
 80a552e:	6878      	ldr	r0, [r7, #4]
 80a5530:	f000 f8fa 	bl	80a5728 <USB_FlushTxFifo>
 80a5534:	4603      	mov	r3, r0
 80a5536:	2b00      	cmp	r3, #0
 80a5538:	d001      	beq.n	80a553e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80a553a:	2301      	movs	r3, #1
 80a553c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80a553e:	6878      	ldr	r0, [r7, #4]
 80a5540:	f000 f924 	bl	80a578c <USB_FlushRxFifo>
 80a5544:	4603      	mov	r3, r0
 80a5546:	2b00      	cmp	r3, #0
 80a5548:	d001      	beq.n	80a554e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80a554a:	2301      	movs	r3, #1
 80a554c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80a554e:	68fb      	ldr	r3, [r7, #12]
 80a5550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5554:	461a      	mov	r2, r3
 80a5556:	2300      	movs	r3, #0
 80a5558:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80a555a:	68fb      	ldr	r3, [r7, #12]
 80a555c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5560:	461a      	mov	r2, r3
 80a5562:	2300      	movs	r3, #0
 80a5564:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80a5566:	68fb      	ldr	r3, [r7, #12]
 80a5568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a556c:	461a      	mov	r2, r3
 80a556e:	2300      	movs	r3, #0
 80a5570:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80a5572:	2300      	movs	r3, #0
 80a5574:	613b      	str	r3, [r7, #16]
 80a5576:	e043      	b.n	80a5600 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80a5578:	693b      	ldr	r3, [r7, #16]
 80a557a:	015a      	lsls	r2, r3, #5
 80a557c:	68fb      	ldr	r3, [r7, #12]
 80a557e:	4413      	add	r3, r2
 80a5580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5584:	681b      	ldr	r3, [r3, #0]
 80a5586:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a558a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a558e:	d118      	bne.n	80a55c2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80a5590:	693b      	ldr	r3, [r7, #16]
 80a5592:	2b00      	cmp	r3, #0
 80a5594:	d10a      	bne.n	80a55ac <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80a5596:	693b      	ldr	r3, [r7, #16]
 80a5598:	015a      	lsls	r2, r3, #5
 80a559a:	68fb      	ldr	r3, [r7, #12]
 80a559c:	4413      	add	r3, r2
 80a559e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a55a2:	461a      	mov	r2, r3
 80a55a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80a55a8:	6013      	str	r3, [r2, #0]
 80a55aa:	e013      	b.n	80a55d4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80a55ac:	693b      	ldr	r3, [r7, #16]
 80a55ae:	015a      	lsls	r2, r3, #5
 80a55b0:	68fb      	ldr	r3, [r7, #12]
 80a55b2:	4413      	add	r3, r2
 80a55b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a55b8:	461a      	mov	r2, r3
 80a55ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80a55be:	6013      	str	r3, [r2, #0]
 80a55c0:	e008      	b.n	80a55d4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80a55c2:	693b      	ldr	r3, [r7, #16]
 80a55c4:	015a      	lsls	r2, r3, #5
 80a55c6:	68fb      	ldr	r3, [r7, #12]
 80a55c8:	4413      	add	r3, r2
 80a55ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a55ce:	461a      	mov	r2, r3
 80a55d0:	2300      	movs	r3, #0
 80a55d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80a55d4:	693b      	ldr	r3, [r7, #16]
 80a55d6:	015a      	lsls	r2, r3, #5
 80a55d8:	68fb      	ldr	r3, [r7, #12]
 80a55da:	4413      	add	r3, r2
 80a55dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a55e0:	461a      	mov	r2, r3
 80a55e2:	2300      	movs	r3, #0
 80a55e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80a55e6:	693b      	ldr	r3, [r7, #16]
 80a55e8:	015a      	lsls	r2, r3, #5
 80a55ea:	68fb      	ldr	r3, [r7, #12]
 80a55ec:	4413      	add	r3, r2
 80a55ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a55f2:	461a      	mov	r2, r3
 80a55f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80a55f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80a55fa:	693b      	ldr	r3, [r7, #16]
 80a55fc:	3301      	adds	r3, #1
 80a55fe:	613b      	str	r3, [r7, #16]
 80a5600:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80a5604:	461a      	mov	r2, r3
 80a5606:	693b      	ldr	r3, [r7, #16]
 80a5608:	4293      	cmp	r3, r2
 80a560a:	d3b5      	bcc.n	80a5578 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80a560c:	2300      	movs	r3, #0
 80a560e:	613b      	str	r3, [r7, #16]
 80a5610:	e043      	b.n	80a569a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80a5612:	693b      	ldr	r3, [r7, #16]
 80a5614:	015a      	lsls	r2, r3, #5
 80a5616:	68fb      	ldr	r3, [r7, #12]
 80a5618:	4413      	add	r3, r2
 80a561a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a561e:	681b      	ldr	r3, [r3, #0]
 80a5620:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a5624:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a5628:	d118      	bne.n	80a565c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80a562a:	693b      	ldr	r3, [r7, #16]
 80a562c:	2b00      	cmp	r3, #0
 80a562e:	d10a      	bne.n	80a5646 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80a5630:	693b      	ldr	r3, [r7, #16]
 80a5632:	015a      	lsls	r2, r3, #5
 80a5634:	68fb      	ldr	r3, [r7, #12]
 80a5636:	4413      	add	r3, r2
 80a5638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a563c:	461a      	mov	r2, r3
 80a563e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80a5642:	6013      	str	r3, [r2, #0]
 80a5644:	e013      	b.n	80a566e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80a5646:	693b      	ldr	r3, [r7, #16]
 80a5648:	015a      	lsls	r2, r3, #5
 80a564a:	68fb      	ldr	r3, [r7, #12]
 80a564c:	4413      	add	r3, r2
 80a564e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5652:	461a      	mov	r2, r3
 80a5654:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80a5658:	6013      	str	r3, [r2, #0]
 80a565a:	e008      	b.n	80a566e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80a565c:	693b      	ldr	r3, [r7, #16]
 80a565e:	015a      	lsls	r2, r3, #5
 80a5660:	68fb      	ldr	r3, [r7, #12]
 80a5662:	4413      	add	r3, r2
 80a5664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5668:	461a      	mov	r2, r3
 80a566a:	2300      	movs	r3, #0
 80a566c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80a566e:	693b      	ldr	r3, [r7, #16]
 80a5670:	015a      	lsls	r2, r3, #5
 80a5672:	68fb      	ldr	r3, [r7, #12]
 80a5674:	4413      	add	r3, r2
 80a5676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a567a:	461a      	mov	r2, r3
 80a567c:	2300      	movs	r3, #0
 80a567e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80a5680:	693b      	ldr	r3, [r7, #16]
 80a5682:	015a      	lsls	r2, r3, #5
 80a5684:	68fb      	ldr	r3, [r7, #12]
 80a5686:	4413      	add	r3, r2
 80a5688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a568c:	461a      	mov	r2, r3
 80a568e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80a5692:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80a5694:	693b      	ldr	r3, [r7, #16]
 80a5696:	3301      	adds	r3, #1
 80a5698:	613b      	str	r3, [r7, #16]
 80a569a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80a569e:	461a      	mov	r2, r3
 80a56a0:	693b      	ldr	r3, [r7, #16]
 80a56a2:	4293      	cmp	r3, r2
 80a56a4:	d3b5      	bcc.n	80a5612 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80a56a6:	68fb      	ldr	r3, [r7, #12]
 80a56a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a56ac:	691b      	ldr	r3, [r3, #16]
 80a56ae:	68fa      	ldr	r2, [r7, #12]
 80a56b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a56b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80a56b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80a56ba:	687b      	ldr	r3, [r7, #4]
 80a56bc:	2200      	movs	r2, #0
 80a56be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80a56c0:	687b      	ldr	r3, [r7, #4]
 80a56c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80a56c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80a56c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80a56cc:	2b00      	cmp	r3, #0
 80a56ce:	d105      	bne.n	80a56dc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80a56d0:	687b      	ldr	r3, [r7, #4]
 80a56d2:	699b      	ldr	r3, [r3, #24]
 80a56d4:	f043 0210 	orr.w	r2, r3, #16
 80a56d8:	687b      	ldr	r3, [r7, #4]
 80a56da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80a56dc:	687b      	ldr	r3, [r7, #4]
 80a56de:	699a      	ldr	r2, [r3, #24]
 80a56e0:	4b0f      	ldr	r3, [pc, #60]	@ (80a5720 <USB_DevInit+0x2b4>)
 80a56e2:	4313      	orrs	r3, r2
 80a56e4:	687a      	ldr	r2, [r7, #4]
 80a56e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80a56e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80a56ec:	2b00      	cmp	r3, #0
 80a56ee:	d005      	beq.n	80a56fc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80a56f0:	687b      	ldr	r3, [r7, #4]
 80a56f2:	699b      	ldr	r3, [r3, #24]
 80a56f4:	f043 0208 	orr.w	r2, r3, #8
 80a56f8:	687b      	ldr	r3, [r7, #4]
 80a56fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80a56fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80a5700:	2b01      	cmp	r3, #1
 80a5702:	d105      	bne.n	80a5710 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80a5704:	687b      	ldr	r3, [r7, #4]
 80a5706:	699a      	ldr	r2, [r3, #24]
 80a5708:	4b06      	ldr	r3, [pc, #24]	@ (80a5724 <USB_DevInit+0x2b8>)
 80a570a:	4313      	orrs	r3, r2
 80a570c:	687a      	ldr	r2, [r7, #4]
 80a570e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80a5710:	7dfb      	ldrb	r3, [r7, #23]
}
 80a5712:	4618      	mov	r0, r3
 80a5714:	3718      	adds	r7, #24
 80a5716:	46bd      	mov	sp, r7
 80a5718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80a571c:	b004      	add	sp, #16
 80a571e:	4770      	bx	lr
 80a5720:	803c3800 	.word	0x803c3800
 80a5724:	40000004 	.word	0x40000004

080a5728 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80a5728:	b480      	push	{r7}
 80a572a:	b085      	sub	sp, #20
 80a572c:	af00      	add	r7, sp, #0
 80a572e:	6078      	str	r0, [r7, #4]
 80a5730:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80a5732:	2300      	movs	r3, #0
 80a5734:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80a5736:	68fb      	ldr	r3, [r7, #12]
 80a5738:	3301      	adds	r3, #1
 80a573a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80a573c:	68fb      	ldr	r3, [r7, #12]
 80a573e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80a5742:	d901      	bls.n	80a5748 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80a5744:	2303      	movs	r3, #3
 80a5746:	e01b      	b.n	80a5780 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80a5748:	687b      	ldr	r3, [r7, #4]
 80a574a:	691b      	ldr	r3, [r3, #16]
 80a574c:	2b00      	cmp	r3, #0
 80a574e:	daf2      	bge.n	80a5736 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80a5750:	2300      	movs	r3, #0
 80a5752:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80a5754:	683b      	ldr	r3, [r7, #0]
 80a5756:	019b      	lsls	r3, r3, #6
 80a5758:	f043 0220 	orr.w	r2, r3, #32
 80a575c:	687b      	ldr	r3, [r7, #4]
 80a575e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80a5760:	68fb      	ldr	r3, [r7, #12]
 80a5762:	3301      	adds	r3, #1
 80a5764:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80a5766:	68fb      	ldr	r3, [r7, #12]
 80a5768:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80a576c:	d901      	bls.n	80a5772 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80a576e:	2303      	movs	r3, #3
 80a5770:	e006      	b.n	80a5780 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80a5772:	687b      	ldr	r3, [r7, #4]
 80a5774:	691b      	ldr	r3, [r3, #16]
 80a5776:	f003 0320 	and.w	r3, r3, #32
 80a577a:	2b20      	cmp	r3, #32
 80a577c:	d0f0      	beq.n	80a5760 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80a577e:	2300      	movs	r3, #0
}
 80a5780:	4618      	mov	r0, r3
 80a5782:	3714      	adds	r7, #20
 80a5784:	46bd      	mov	sp, r7
 80a5786:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a578a:	4770      	bx	lr

080a578c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80a578c:	b480      	push	{r7}
 80a578e:	b085      	sub	sp, #20
 80a5790:	af00      	add	r7, sp, #0
 80a5792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80a5794:	2300      	movs	r3, #0
 80a5796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80a5798:	68fb      	ldr	r3, [r7, #12]
 80a579a:	3301      	adds	r3, #1
 80a579c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80a579e:	68fb      	ldr	r3, [r7, #12]
 80a57a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80a57a4:	d901      	bls.n	80a57aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80a57a6:	2303      	movs	r3, #3
 80a57a8:	e018      	b.n	80a57dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80a57aa:	687b      	ldr	r3, [r7, #4]
 80a57ac:	691b      	ldr	r3, [r3, #16]
 80a57ae:	2b00      	cmp	r3, #0
 80a57b0:	daf2      	bge.n	80a5798 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80a57b2:	2300      	movs	r3, #0
 80a57b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80a57b6:	687b      	ldr	r3, [r7, #4]
 80a57b8:	2210      	movs	r2, #16
 80a57ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80a57bc:	68fb      	ldr	r3, [r7, #12]
 80a57be:	3301      	adds	r3, #1
 80a57c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80a57c2:	68fb      	ldr	r3, [r7, #12]
 80a57c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80a57c8:	d901      	bls.n	80a57ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80a57ca:	2303      	movs	r3, #3
 80a57cc:	e006      	b.n	80a57dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80a57ce:	687b      	ldr	r3, [r7, #4]
 80a57d0:	691b      	ldr	r3, [r3, #16]
 80a57d2:	f003 0310 	and.w	r3, r3, #16
 80a57d6:	2b10      	cmp	r3, #16
 80a57d8:	d0f0      	beq.n	80a57bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80a57da:	2300      	movs	r3, #0
}
 80a57dc:	4618      	mov	r0, r3
 80a57de:	3714      	adds	r7, #20
 80a57e0:	46bd      	mov	sp, r7
 80a57e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a57e6:	4770      	bx	lr

080a57e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80a57e8:	b480      	push	{r7}
 80a57ea:	b085      	sub	sp, #20
 80a57ec:	af00      	add	r7, sp, #0
 80a57ee:	6078      	str	r0, [r7, #4]
 80a57f0:	460b      	mov	r3, r1
 80a57f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a57f4:	687b      	ldr	r3, [r7, #4]
 80a57f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80a57f8:	68fb      	ldr	r3, [r7, #12]
 80a57fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a57fe:	681a      	ldr	r2, [r3, #0]
 80a5800:	78fb      	ldrb	r3, [r7, #3]
 80a5802:	68f9      	ldr	r1, [r7, #12]
 80a5804:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a5808:	4313      	orrs	r3, r2
 80a580a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80a580c:	2300      	movs	r3, #0
}
 80a580e:	4618      	mov	r0, r3
 80a5810:	3714      	adds	r7, #20
 80a5812:	46bd      	mov	sp, r7
 80a5814:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a5818:	4770      	bx	lr

080a581a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80a581a:	b480      	push	{r7}
 80a581c:	b087      	sub	sp, #28
 80a581e:	af00      	add	r7, sp, #0
 80a5820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a5822:	687b      	ldr	r3, [r7, #4]
 80a5824:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80a5826:	693b      	ldr	r3, [r7, #16]
 80a5828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a582c:	689b      	ldr	r3, [r3, #8]
 80a582e:	f003 0306 	and.w	r3, r3, #6
 80a5832:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80a5834:	68fb      	ldr	r3, [r7, #12]
 80a5836:	2b00      	cmp	r3, #0
 80a5838:	d102      	bne.n	80a5840 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80a583a:	2300      	movs	r3, #0
 80a583c:	75fb      	strb	r3, [r7, #23]
 80a583e:	e00a      	b.n	80a5856 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80a5840:	68fb      	ldr	r3, [r7, #12]
 80a5842:	2b02      	cmp	r3, #2
 80a5844:	d002      	beq.n	80a584c <USB_GetDevSpeed+0x32>
 80a5846:	68fb      	ldr	r3, [r7, #12]
 80a5848:	2b06      	cmp	r3, #6
 80a584a:	d102      	bne.n	80a5852 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80a584c:	2302      	movs	r3, #2
 80a584e:	75fb      	strb	r3, [r7, #23]
 80a5850:	e001      	b.n	80a5856 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80a5852:	230f      	movs	r3, #15
 80a5854:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80a5856:	7dfb      	ldrb	r3, [r7, #23]
}
 80a5858:	4618      	mov	r0, r3
 80a585a:	371c      	adds	r7, #28
 80a585c:	46bd      	mov	sp, r7
 80a585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a5862:	4770      	bx	lr

080a5864 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80a5864:	b480      	push	{r7}
 80a5866:	b085      	sub	sp, #20
 80a5868:	af00      	add	r7, sp, #0
 80a586a:	6078      	str	r0, [r7, #4]
 80a586c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a586e:	687b      	ldr	r3, [r7, #4]
 80a5870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80a5872:	683b      	ldr	r3, [r7, #0]
 80a5874:	781b      	ldrb	r3, [r3, #0]
 80a5876:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80a5878:	683b      	ldr	r3, [r7, #0]
 80a587a:	785b      	ldrb	r3, [r3, #1]
 80a587c:	2b01      	cmp	r3, #1
 80a587e:	d139      	bne.n	80a58f4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80a5880:	68fb      	ldr	r3, [r7, #12]
 80a5882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5886:	69da      	ldr	r2, [r3, #28]
 80a5888:	683b      	ldr	r3, [r7, #0]
 80a588a:	781b      	ldrb	r3, [r3, #0]
 80a588c:	f003 030f 	and.w	r3, r3, #15
 80a5890:	2101      	movs	r1, #1
 80a5892:	fa01 f303 	lsl.w	r3, r1, r3
 80a5896:	b29b      	uxth	r3, r3
 80a5898:	68f9      	ldr	r1, [r7, #12]
 80a589a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a589e:	4313      	orrs	r3, r2
 80a58a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80a58a2:	68bb      	ldr	r3, [r7, #8]
 80a58a4:	015a      	lsls	r2, r3, #5
 80a58a6:	68fb      	ldr	r3, [r7, #12]
 80a58a8:	4413      	add	r3, r2
 80a58aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a58ae:	681b      	ldr	r3, [r3, #0]
 80a58b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80a58b4:	2b00      	cmp	r3, #0
 80a58b6:	d153      	bne.n	80a5960 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80a58b8:	68bb      	ldr	r3, [r7, #8]
 80a58ba:	015a      	lsls	r2, r3, #5
 80a58bc:	68fb      	ldr	r3, [r7, #12]
 80a58be:	4413      	add	r3, r2
 80a58c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a58c4:	681a      	ldr	r2, [r3, #0]
 80a58c6:	683b      	ldr	r3, [r7, #0]
 80a58c8:	689b      	ldr	r3, [r3, #8]
 80a58ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80a58ce:	683b      	ldr	r3, [r7, #0]
 80a58d0:	791b      	ldrb	r3, [r3, #4]
 80a58d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80a58d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80a58d6:	68bb      	ldr	r3, [r7, #8]
 80a58d8:	059b      	lsls	r3, r3, #22
 80a58da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80a58dc:	431a      	orrs	r2, r3
 80a58de:	68bb      	ldr	r3, [r7, #8]
 80a58e0:	0159      	lsls	r1, r3, #5
 80a58e2:	68fb      	ldr	r3, [r7, #12]
 80a58e4:	440b      	add	r3, r1
 80a58e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a58ea:	4619      	mov	r1, r3
 80a58ec:	4b20      	ldr	r3, [pc, #128]	@ (80a5970 <USB_ActivateEndpoint+0x10c>)
 80a58ee:	4313      	orrs	r3, r2
 80a58f0:	600b      	str	r3, [r1, #0]
 80a58f2:	e035      	b.n	80a5960 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80a58f4:	68fb      	ldr	r3, [r7, #12]
 80a58f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a58fa:	69da      	ldr	r2, [r3, #28]
 80a58fc:	683b      	ldr	r3, [r7, #0]
 80a58fe:	781b      	ldrb	r3, [r3, #0]
 80a5900:	f003 030f 	and.w	r3, r3, #15
 80a5904:	2101      	movs	r1, #1
 80a5906:	fa01 f303 	lsl.w	r3, r1, r3
 80a590a:	041b      	lsls	r3, r3, #16
 80a590c:	68f9      	ldr	r1, [r7, #12]
 80a590e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a5912:	4313      	orrs	r3, r2
 80a5914:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80a5916:	68bb      	ldr	r3, [r7, #8]
 80a5918:	015a      	lsls	r2, r3, #5
 80a591a:	68fb      	ldr	r3, [r7, #12]
 80a591c:	4413      	add	r3, r2
 80a591e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5922:	681b      	ldr	r3, [r3, #0]
 80a5924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80a5928:	2b00      	cmp	r3, #0
 80a592a:	d119      	bne.n	80a5960 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80a592c:	68bb      	ldr	r3, [r7, #8]
 80a592e:	015a      	lsls	r2, r3, #5
 80a5930:	68fb      	ldr	r3, [r7, #12]
 80a5932:	4413      	add	r3, r2
 80a5934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5938:	681a      	ldr	r2, [r3, #0]
 80a593a:	683b      	ldr	r3, [r7, #0]
 80a593c:	689b      	ldr	r3, [r3, #8]
 80a593e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80a5942:	683b      	ldr	r3, [r7, #0]
 80a5944:	791b      	ldrb	r3, [r3, #4]
 80a5946:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80a5948:	430b      	orrs	r3, r1
 80a594a:	431a      	orrs	r2, r3
 80a594c:	68bb      	ldr	r3, [r7, #8]
 80a594e:	0159      	lsls	r1, r3, #5
 80a5950:	68fb      	ldr	r3, [r7, #12]
 80a5952:	440b      	add	r3, r1
 80a5954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5958:	4619      	mov	r1, r3
 80a595a:	4b05      	ldr	r3, [pc, #20]	@ (80a5970 <USB_ActivateEndpoint+0x10c>)
 80a595c:	4313      	orrs	r3, r2
 80a595e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80a5960:	2300      	movs	r3, #0
}
 80a5962:	4618      	mov	r0, r3
 80a5964:	3714      	adds	r7, #20
 80a5966:	46bd      	mov	sp, r7
 80a5968:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a596c:	4770      	bx	lr
 80a596e:	bf00      	nop
 80a5970:	10008000 	.word	0x10008000

080a5974 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80a5974:	b480      	push	{r7}
 80a5976:	b085      	sub	sp, #20
 80a5978:	af00      	add	r7, sp, #0
 80a597a:	6078      	str	r0, [r7, #4]
 80a597c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a597e:	687b      	ldr	r3, [r7, #4]
 80a5980:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80a5982:	683b      	ldr	r3, [r7, #0]
 80a5984:	781b      	ldrb	r3, [r3, #0]
 80a5986:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80a5988:	683b      	ldr	r3, [r7, #0]
 80a598a:	785b      	ldrb	r3, [r3, #1]
 80a598c:	2b01      	cmp	r3, #1
 80a598e:	d161      	bne.n	80a5a54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80a5990:	68bb      	ldr	r3, [r7, #8]
 80a5992:	015a      	lsls	r2, r3, #5
 80a5994:	68fb      	ldr	r3, [r7, #12]
 80a5996:	4413      	add	r3, r2
 80a5998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a599c:	681b      	ldr	r3, [r3, #0]
 80a599e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a59a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a59a6:	d11f      	bne.n	80a59e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80a59a8:	68bb      	ldr	r3, [r7, #8]
 80a59aa:	015a      	lsls	r2, r3, #5
 80a59ac:	68fb      	ldr	r3, [r7, #12]
 80a59ae:	4413      	add	r3, r2
 80a59b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a59b4:	681b      	ldr	r3, [r3, #0]
 80a59b6:	68ba      	ldr	r2, [r7, #8]
 80a59b8:	0151      	lsls	r1, r2, #5
 80a59ba:	68fa      	ldr	r2, [r7, #12]
 80a59bc:	440a      	add	r2, r1
 80a59be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a59c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80a59c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80a59c8:	68bb      	ldr	r3, [r7, #8]
 80a59ca:	015a      	lsls	r2, r3, #5
 80a59cc:	68fb      	ldr	r3, [r7, #12]
 80a59ce:	4413      	add	r3, r2
 80a59d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a59d4:	681b      	ldr	r3, [r3, #0]
 80a59d6:	68ba      	ldr	r2, [r7, #8]
 80a59d8:	0151      	lsls	r1, r2, #5
 80a59da:	68fa      	ldr	r2, [r7, #12]
 80a59dc:	440a      	add	r2, r1
 80a59de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a59e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80a59e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80a59e8:	68fb      	ldr	r3, [r7, #12]
 80a59ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a59ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80a59f0:	683b      	ldr	r3, [r7, #0]
 80a59f2:	781b      	ldrb	r3, [r3, #0]
 80a59f4:	f003 030f 	and.w	r3, r3, #15
 80a59f8:	2101      	movs	r1, #1
 80a59fa:	fa01 f303 	lsl.w	r3, r1, r3
 80a59fe:	b29b      	uxth	r3, r3
 80a5a00:	43db      	mvns	r3, r3
 80a5a02:	68f9      	ldr	r1, [r7, #12]
 80a5a04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a5a08:	4013      	ands	r3, r2
 80a5a0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80a5a0c:	68fb      	ldr	r3, [r7, #12]
 80a5a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5a12:	69da      	ldr	r2, [r3, #28]
 80a5a14:	683b      	ldr	r3, [r7, #0]
 80a5a16:	781b      	ldrb	r3, [r3, #0]
 80a5a18:	f003 030f 	and.w	r3, r3, #15
 80a5a1c:	2101      	movs	r1, #1
 80a5a1e:	fa01 f303 	lsl.w	r3, r1, r3
 80a5a22:	b29b      	uxth	r3, r3
 80a5a24:	43db      	mvns	r3, r3
 80a5a26:	68f9      	ldr	r1, [r7, #12]
 80a5a28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a5a2c:	4013      	ands	r3, r2
 80a5a2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80a5a30:	68bb      	ldr	r3, [r7, #8]
 80a5a32:	015a      	lsls	r2, r3, #5
 80a5a34:	68fb      	ldr	r3, [r7, #12]
 80a5a36:	4413      	add	r3, r2
 80a5a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5a3c:	681a      	ldr	r2, [r3, #0]
 80a5a3e:	68bb      	ldr	r3, [r7, #8]
 80a5a40:	0159      	lsls	r1, r3, #5
 80a5a42:	68fb      	ldr	r3, [r7, #12]
 80a5a44:	440b      	add	r3, r1
 80a5a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5a4a:	4619      	mov	r1, r3
 80a5a4c:	4b35      	ldr	r3, [pc, #212]	@ (80a5b24 <USB_DeactivateEndpoint+0x1b0>)
 80a5a4e:	4013      	ands	r3, r2
 80a5a50:	600b      	str	r3, [r1, #0]
 80a5a52:	e060      	b.n	80a5b16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80a5a54:	68bb      	ldr	r3, [r7, #8]
 80a5a56:	015a      	lsls	r2, r3, #5
 80a5a58:	68fb      	ldr	r3, [r7, #12]
 80a5a5a:	4413      	add	r3, r2
 80a5a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5a60:	681b      	ldr	r3, [r3, #0]
 80a5a62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a5a66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a5a6a:	d11f      	bne.n	80a5aac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80a5a6c:	68bb      	ldr	r3, [r7, #8]
 80a5a6e:	015a      	lsls	r2, r3, #5
 80a5a70:	68fb      	ldr	r3, [r7, #12]
 80a5a72:	4413      	add	r3, r2
 80a5a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5a78:	681b      	ldr	r3, [r3, #0]
 80a5a7a:	68ba      	ldr	r2, [r7, #8]
 80a5a7c:	0151      	lsls	r1, r2, #5
 80a5a7e:	68fa      	ldr	r2, [r7, #12]
 80a5a80:	440a      	add	r2, r1
 80a5a82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a5a86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80a5a8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80a5a8c:	68bb      	ldr	r3, [r7, #8]
 80a5a8e:	015a      	lsls	r2, r3, #5
 80a5a90:	68fb      	ldr	r3, [r7, #12]
 80a5a92:	4413      	add	r3, r2
 80a5a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5a98:	681b      	ldr	r3, [r3, #0]
 80a5a9a:	68ba      	ldr	r2, [r7, #8]
 80a5a9c:	0151      	lsls	r1, r2, #5
 80a5a9e:	68fa      	ldr	r2, [r7, #12]
 80a5aa0:	440a      	add	r2, r1
 80a5aa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a5aa6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80a5aaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80a5aac:	68fb      	ldr	r3, [r7, #12]
 80a5aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5ab2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80a5ab4:	683b      	ldr	r3, [r7, #0]
 80a5ab6:	781b      	ldrb	r3, [r3, #0]
 80a5ab8:	f003 030f 	and.w	r3, r3, #15
 80a5abc:	2101      	movs	r1, #1
 80a5abe:	fa01 f303 	lsl.w	r3, r1, r3
 80a5ac2:	041b      	lsls	r3, r3, #16
 80a5ac4:	43db      	mvns	r3, r3
 80a5ac6:	68f9      	ldr	r1, [r7, #12]
 80a5ac8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a5acc:	4013      	ands	r3, r2
 80a5ace:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80a5ad0:	68fb      	ldr	r3, [r7, #12]
 80a5ad2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5ad6:	69da      	ldr	r2, [r3, #28]
 80a5ad8:	683b      	ldr	r3, [r7, #0]
 80a5ada:	781b      	ldrb	r3, [r3, #0]
 80a5adc:	f003 030f 	and.w	r3, r3, #15
 80a5ae0:	2101      	movs	r1, #1
 80a5ae2:	fa01 f303 	lsl.w	r3, r1, r3
 80a5ae6:	041b      	lsls	r3, r3, #16
 80a5ae8:	43db      	mvns	r3, r3
 80a5aea:	68f9      	ldr	r1, [r7, #12]
 80a5aec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a5af0:	4013      	ands	r3, r2
 80a5af2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80a5af4:	68bb      	ldr	r3, [r7, #8]
 80a5af6:	015a      	lsls	r2, r3, #5
 80a5af8:	68fb      	ldr	r3, [r7, #12]
 80a5afa:	4413      	add	r3, r2
 80a5afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5b00:	681a      	ldr	r2, [r3, #0]
 80a5b02:	68bb      	ldr	r3, [r7, #8]
 80a5b04:	0159      	lsls	r1, r3, #5
 80a5b06:	68fb      	ldr	r3, [r7, #12]
 80a5b08:	440b      	add	r3, r1
 80a5b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5b0e:	4619      	mov	r1, r3
 80a5b10:	4b05      	ldr	r3, [pc, #20]	@ (80a5b28 <USB_DeactivateEndpoint+0x1b4>)
 80a5b12:	4013      	ands	r3, r2
 80a5b14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80a5b16:	2300      	movs	r3, #0
}
 80a5b18:	4618      	mov	r0, r3
 80a5b1a:	3714      	adds	r7, #20
 80a5b1c:	46bd      	mov	sp, r7
 80a5b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a5b22:	4770      	bx	lr
 80a5b24:	ec337800 	.word	0xec337800
 80a5b28:	eff37800 	.word	0xeff37800

080a5b2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80a5b2c:	b580      	push	{r7, lr}
 80a5b2e:	b08a      	sub	sp, #40	@ 0x28
 80a5b30:	af02      	add	r7, sp, #8
 80a5b32:	60f8      	str	r0, [r7, #12]
 80a5b34:	60b9      	str	r1, [r7, #8]
 80a5b36:	4613      	mov	r3, r2
 80a5b38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a5b3a:	68fb      	ldr	r3, [r7, #12]
 80a5b3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80a5b3e:	68bb      	ldr	r3, [r7, #8]
 80a5b40:	781b      	ldrb	r3, [r3, #0]
 80a5b42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80a5b44:	68bb      	ldr	r3, [r7, #8]
 80a5b46:	785b      	ldrb	r3, [r3, #1]
 80a5b48:	2b01      	cmp	r3, #1
 80a5b4a:	f040 8185 	bne.w	80a5e58 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80a5b4e:	68bb      	ldr	r3, [r7, #8]
 80a5b50:	691b      	ldr	r3, [r3, #16]
 80a5b52:	2b00      	cmp	r3, #0
 80a5b54:	d132      	bne.n	80a5bbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80a5b56:	69bb      	ldr	r3, [r7, #24]
 80a5b58:	015a      	lsls	r2, r3, #5
 80a5b5a:	69fb      	ldr	r3, [r7, #28]
 80a5b5c:	4413      	add	r3, r2
 80a5b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5b62:	691a      	ldr	r2, [r3, #16]
 80a5b64:	69bb      	ldr	r3, [r7, #24]
 80a5b66:	0159      	lsls	r1, r3, #5
 80a5b68:	69fb      	ldr	r3, [r7, #28]
 80a5b6a:	440b      	add	r3, r1
 80a5b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5b70:	4619      	mov	r1, r3
 80a5b72:	4ba7      	ldr	r3, [pc, #668]	@ (80a5e10 <USB_EPStartXfer+0x2e4>)
 80a5b74:	4013      	ands	r3, r2
 80a5b76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80a5b78:	69bb      	ldr	r3, [r7, #24]
 80a5b7a:	015a      	lsls	r2, r3, #5
 80a5b7c:	69fb      	ldr	r3, [r7, #28]
 80a5b7e:	4413      	add	r3, r2
 80a5b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5b84:	691b      	ldr	r3, [r3, #16]
 80a5b86:	69ba      	ldr	r2, [r7, #24]
 80a5b88:	0151      	lsls	r1, r2, #5
 80a5b8a:	69fa      	ldr	r2, [r7, #28]
 80a5b8c:	440a      	add	r2, r1
 80a5b8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5b92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80a5b96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80a5b98:	69bb      	ldr	r3, [r7, #24]
 80a5b9a:	015a      	lsls	r2, r3, #5
 80a5b9c:	69fb      	ldr	r3, [r7, #28]
 80a5b9e:	4413      	add	r3, r2
 80a5ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5ba4:	691a      	ldr	r2, [r3, #16]
 80a5ba6:	69bb      	ldr	r3, [r7, #24]
 80a5ba8:	0159      	lsls	r1, r3, #5
 80a5baa:	69fb      	ldr	r3, [r7, #28]
 80a5bac:	440b      	add	r3, r1
 80a5bae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5bb2:	4619      	mov	r1, r3
 80a5bb4:	4b97      	ldr	r3, [pc, #604]	@ (80a5e14 <USB_EPStartXfer+0x2e8>)
 80a5bb6:	4013      	ands	r3, r2
 80a5bb8:	610b      	str	r3, [r1, #16]
 80a5bba:	e097      	b.n	80a5cec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80a5bbc:	69bb      	ldr	r3, [r7, #24]
 80a5bbe:	015a      	lsls	r2, r3, #5
 80a5bc0:	69fb      	ldr	r3, [r7, #28]
 80a5bc2:	4413      	add	r3, r2
 80a5bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5bc8:	691a      	ldr	r2, [r3, #16]
 80a5bca:	69bb      	ldr	r3, [r7, #24]
 80a5bcc:	0159      	lsls	r1, r3, #5
 80a5bce:	69fb      	ldr	r3, [r7, #28]
 80a5bd0:	440b      	add	r3, r1
 80a5bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5bd6:	4619      	mov	r1, r3
 80a5bd8:	4b8e      	ldr	r3, [pc, #568]	@ (80a5e14 <USB_EPStartXfer+0x2e8>)
 80a5bda:	4013      	ands	r3, r2
 80a5bdc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80a5bde:	69bb      	ldr	r3, [r7, #24]
 80a5be0:	015a      	lsls	r2, r3, #5
 80a5be2:	69fb      	ldr	r3, [r7, #28]
 80a5be4:	4413      	add	r3, r2
 80a5be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5bea:	691a      	ldr	r2, [r3, #16]
 80a5bec:	69bb      	ldr	r3, [r7, #24]
 80a5bee:	0159      	lsls	r1, r3, #5
 80a5bf0:	69fb      	ldr	r3, [r7, #28]
 80a5bf2:	440b      	add	r3, r1
 80a5bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5bf8:	4619      	mov	r1, r3
 80a5bfa:	4b85      	ldr	r3, [pc, #532]	@ (80a5e10 <USB_EPStartXfer+0x2e4>)
 80a5bfc:	4013      	ands	r3, r2
 80a5bfe:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80a5c00:	69bb      	ldr	r3, [r7, #24]
 80a5c02:	2b00      	cmp	r3, #0
 80a5c04:	d11a      	bne.n	80a5c3c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80a5c06:	68bb      	ldr	r3, [r7, #8]
 80a5c08:	691a      	ldr	r2, [r3, #16]
 80a5c0a:	68bb      	ldr	r3, [r7, #8]
 80a5c0c:	689b      	ldr	r3, [r3, #8]
 80a5c0e:	429a      	cmp	r2, r3
 80a5c10:	d903      	bls.n	80a5c1a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80a5c12:	68bb      	ldr	r3, [r7, #8]
 80a5c14:	689a      	ldr	r2, [r3, #8]
 80a5c16:	68bb      	ldr	r3, [r7, #8]
 80a5c18:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80a5c1a:	69bb      	ldr	r3, [r7, #24]
 80a5c1c:	015a      	lsls	r2, r3, #5
 80a5c1e:	69fb      	ldr	r3, [r7, #28]
 80a5c20:	4413      	add	r3, r2
 80a5c22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5c26:	691b      	ldr	r3, [r3, #16]
 80a5c28:	69ba      	ldr	r2, [r7, #24]
 80a5c2a:	0151      	lsls	r1, r2, #5
 80a5c2c:	69fa      	ldr	r2, [r7, #28]
 80a5c2e:	440a      	add	r2, r1
 80a5c30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5c34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80a5c38:	6113      	str	r3, [r2, #16]
 80a5c3a:	e044      	b.n	80a5cc6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80a5c3c:	68bb      	ldr	r3, [r7, #8]
 80a5c3e:	691a      	ldr	r2, [r3, #16]
 80a5c40:	68bb      	ldr	r3, [r7, #8]
 80a5c42:	689b      	ldr	r3, [r3, #8]
 80a5c44:	4413      	add	r3, r2
 80a5c46:	1e5a      	subs	r2, r3, #1
 80a5c48:	68bb      	ldr	r3, [r7, #8]
 80a5c4a:	689b      	ldr	r3, [r3, #8]
 80a5c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 80a5c50:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80a5c52:	69bb      	ldr	r3, [r7, #24]
 80a5c54:	015a      	lsls	r2, r3, #5
 80a5c56:	69fb      	ldr	r3, [r7, #28]
 80a5c58:	4413      	add	r3, r2
 80a5c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5c5e:	691a      	ldr	r2, [r3, #16]
 80a5c60:	8afb      	ldrh	r3, [r7, #22]
 80a5c62:	04d9      	lsls	r1, r3, #19
 80a5c64:	4b6c      	ldr	r3, [pc, #432]	@ (80a5e18 <USB_EPStartXfer+0x2ec>)
 80a5c66:	400b      	ands	r3, r1
 80a5c68:	69b9      	ldr	r1, [r7, #24]
 80a5c6a:	0148      	lsls	r0, r1, #5
 80a5c6c:	69f9      	ldr	r1, [r7, #28]
 80a5c6e:	4401      	add	r1, r0
 80a5c70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80a5c74:	4313      	orrs	r3, r2
 80a5c76:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80a5c78:	68bb      	ldr	r3, [r7, #8]
 80a5c7a:	791b      	ldrb	r3, [r3, #4]
 80a5c7c:	2b01      	cmp	r3, #1
 80a5c7e:	d122      	bne.n	80a5cc6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80a5c80:	69bb      	ldr	r3, [r7, #24]
 80a5c82:	015a      	lsls	r2, r3, #5
 80a5c84:	69fb      	ldr	r3, [r7, #28]
 80a5c86:	4413      	add	r3, r2
 80a5c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5c8c:	691b      	ldr	r3, [r3, #16]
 80a5c8e:	69ba      	ldr	r2, [r7, #24]
 80a5c90:	0151      	lsls	r1, r2, #5
 80a5c92:	69fa      	ldr	r2, [r7, #28]
 80a5c94:	440a      	add	r2, r1
 80a5c96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5c9a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80a5c9e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80a5ca0:	69bb      	ldr	r3, [r7, #24]
 80a5ca2:	015a      	lsls	r2, r3, #5
 80a5ca4:	69fb      	ldr	r3, [r7, #28]
 80a5ca6:	4413      	add	r3, r2
 80a5ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5cac:	691a      	ldr	r2, [r3, #16]
 80a5cae:	8afb      	ldrh	r3, [r7, #22]
 80a5cb0:	075b      	lsls	r3, r3, #29
 80a5cb2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80a5cb6:	69b9      	ldr	r1, [r7, #24]
 80a5cb8:	0148      	lsls	r0, r1, #5
 80a5cba:	69f9      	ldr	r1, [r7, #28]
 80a5cbc:	4401      	add	r1, r0
 80a5cbe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80a5cc2:	4313      	orrs	r3, r2
 80a5cc4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80a5cc6:	69bb      	ldr	r3, [r7, #24]
 80a5cc8:	015a      	lsls	r2, r3, #5
 80a5cca:	69fb      	ldr	r3, [r7, #28]
 80a5ccc:	4413      	add	r3, r2
 80a5cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5cd2:	691a      	ldr	r2, [r3, #16]
 80a5cd4:	68bb      	ldr	r3, [r7, #8]
 80a5cd6:	691b      	ldr	r3, [r3, #16]
 80a5cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80a5cdc:	69b9      	ldr	r1, [r7, #24]
 80a5cde:	0148      	lsls	r0, r1, #5
 80a5ce0:	69f9      	ldr	r1, [r7, #28]
 80a5ce2:	4401      	add	r1, r0
 80a5ce4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80a5ce8:	4313      	orrs	r3, r2
 80a5cea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80a5cec:	79fb      	ldrb	r3, [r7, #7]
 80a5cee:	2b01      	cmp	r3, #1
 80a5cf0:	d14b      	bne.n	80a5d8a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80a5cf2:	68bb      	ldr	r3, [r7, #8]
 80a5cf4:	69db      	ldr	r3, [r3, #28]
 80a5cf6:	2b00      	cmp	r3, #0
 80a5cf8:	d009      	beq.n	80a5d0e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80a5cfa:	69bb      	ldr	r3, [r7, #24]
 80a5cfc:	015a      	lsls	r2, r3, #5
 80a5cfe:	69fb      	ldr	r3, [r7, #28]
 80a5d00:	4413      	add	r3, r2
 80a5d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5d06:	461a      	mov	r2, r3
 80a5d08:	68bb      	ldr	r3, [r7, #8]
 80a5d0a:	69db      	ldr	r3, [r3, #28]
 80a5d0c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80a5d0e:	68bb      	ldr	r3, [r7, #8]
 80a5d10:	791b      	ldrb	r3, [r3, #4]
 80a5d12:	2b01      	cmp	r3, #1
 80a5d14:	d128      	bne.n	80a5d68 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80a5d16:	69fb      	ldr	r3, [r7, #28]
 80a5d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5d1c:	689b      	ldr	r3, [r3, #8]
 80a5d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a5d22:	2b00      	cmp	r3, #0
 80a5d24:	d110      	bne.n	80a5d48 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80a5d26:	69bb      	ldr	r3, [r7, #24]
 80a5d28:	015a      	lsls	r2, r3, #5
 80a5d2a:	69fb      	ldr	r3, [r7, #28]
 80a5d2c:	4413      	add	r3, r2
 80a5d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5d32:	681b      	ldr	r3, [r3, #0]
 80a5d34:	69ba      	ldr	r2, [r7, #24]
 80a5d36:	0151      	lsls	r1, r2, #5
 80a5d38:	69fa      	ldr	r2, [r7, #28]
 80a5d3a:	440a      	add	r2, r1
 80a5d3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5d40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80a5d44:	6013      	str	r3, [r2, #0]
 80a5d46:	e00f      	b.n	80a5d68 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80a5d48:	69bb      	ldr	r3, [r7, #24]
 80a5d4a:	015a      	lsls	r2, r3, #5
 80a5d4c:	69fb      	ldr	r3, [r7, #28]
 80a5d4e:	4413      	add	r3, r2
 80a5d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5d54:	681b      	ldr	r3, [r3, #0]
 80a5d56:	69ba      	ldr	r2, [r7, #24]
 80a5d58:	0151      	lsls	r1, r2, #5
 80a5d5a:	69fa      	ldr	r2, [r7, #28]
 80a5d5c:	440a      	add	r2, r1
 80a5d5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5d62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80a5d66:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80a5d68:	69bb      	ldr	r3, [r7, #24]
 80a5d6a:	015a      	lsls	r2, r3, #5
 80a5d6c:	69fb      	ldr	r3, [r7, #28]
 80a5d6e:	4413      	add	r3, r2
 80a5d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5d74:	681b      	ldr	r3, [r3, #0]
 80a5d76:	69ba      	ldr	r2, [r7, #24]
 80a5d78:	0151      	lsls	r1, r2, #5
 80a5d7a:	69fa      	ldr	r2, [r7, #28]
 80a5d7c:	440a      	add	r2, r1
 80a5d7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5d82:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80a5d86:	6013      	str	r3, [r2, #0]
 80a5d88:	e169      	b.n	80a605e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80a5d8a:	69bb      	ldr	r3, [r7, #24]
 80a5d8c:	015a      	lsls	r2, r3, #5
 80a5d8e:	69fb      	ldr	r3, [r7, #28]
 80a5d90:	4413      	add	r3, r2
 80a5d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5d96:	681b      	ldr	r3, [r3, #0]
 80a5d98:	69ba      	ldr	r2, [r7, #24]
 80a5d9a:	0151      	lsls	r1, r2, #5
 80a5d9c:	69fa      	ldr	r2, [r7, #28]
 80a5d9e:	440a      	add	r2, r1
 80a5da0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5da4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80a5da8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80a5daa:	68bb      	ldr	r3, [r7, #8]
 80a5dac:	791b      	ldrb	r3, [r3, #4]
 80a5dae:	2b01      	cmp	r3, #1
 80a5db0:	d015      	beq.n	80a5dde <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80a5db2:	68bb      	ldr	r3, [r7, #8]
 80a5db4:	691b      	ldr	r3, [r3, #16]
 80a5db6:	2b00      	cmp	r3, #0
 80a5db8:	f000 8151 	beq.w	80a605e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80a5dbc:	69fb      	ldr	r3, [r7, #28]
 80a5dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5dc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80a5dc4:	68bb      	ldr	r3, [r7, #8]
 80a5dc6:	781b      	ldrb	r3, [r3, #0]
 80a5dc8:	f003 030f 	and.w	r3, r3, #15
 80a5dcc:	2101      	movs	r1, #1
 80a5dce:	fa01 f303 	lsl.w	r3, r1, r3
 80a5dd2:	69f9      	ldr	r1, [r7, #28]
 80a5dd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a5dd8:	4313      	orrs	r3, r2
 80a5dda:	634b      	str	r3, [r1, #52]	@ 0x34
 80a5ddc:	e13f      	b.n	80a605e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80a5dde:	69fb      	ldr	r3, [r7, #28]
 80a5de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5de4:	689b      	ldr	r3, [r3, #8]
 80a5de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a5dea:	2b00      	cmp	r3, #0
 80a5dec:	d116      	bne.n	80a5e1c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80a5dee:	69bb      	ldr	r3, [r7, #24]
 80a5df0:	015a      	lsls	r2, r3, #5
 80a5df2:	69fb      	ldr	r3, [r7, #28]
 80a5df4:	4413      	add	r3, r2
 80a5df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5dfa:	681b      	ldr	r3, [r3, #0]
 80a5dfc:	69ba      	ldr	r2, [r7, #24]
 80a5dfe:	0151      	lsls	r1, r2, #5
 80a5e00:	69fa      	ldr	r2, [r7, #28]
 80a5e02:	440a      	add	r2, r1
 80a5e04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5e08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80a5e0c:	6013      	str	r3, [r2, #0]
 80a5e0e:	e015      	b.n	80a5e3c <USB_EPStartXfer+0x310>
 80a5e10:	e007ffff 	.word	0xe007ffff
 80a5e14:	fff80000 	.word	0xfff80000
 80a5e18:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80a5e1c:	69bb      	ldr	r3, [r7, #24]
 80a5e1e:	015a      	lsls	r2, r3, #5
 80a5e20:	69fb      	ldr	r3, [r7, #28]
 80a5e22:	4413      	add	r3, r2
 80a5e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a5e28:	681b      	ldr	r3, [r3, #0]
 80a5e2a:	69ba      	ldr	r2, [r7, #24]
 80a5e2c:	0151      	lsls	r1, r2, #5
 80a5e2e:	69fa      	ldr	r2, [r7, #28]
 80a5e30:	440a      	add	r2, r1
 80a5e32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a5e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80a5e3a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80a5e3c:	68bb      	ldr	r3, [r7, #8]
 80a5e3e:	68d9      	ldr	r1, [r3, #12]
 80a5e40:	68bb      	ldr	r3, [r7, #8]
 80a5e42:	781a      	ldrb	r2, [r3, #0]
 80a5e44:	68bb      	ldr	r3, [r7, #8]
 80a5e46:	691b      	ldr	r3, [r3, #16]
 80a5e48:	b298      	uxth	r0, r3
 80a5e4a:	79fb      	ldrb	r3, [r7, #7]
 80a5e4c:	9300      	str	r3, [sp, #0]
 80a5e4e:	4603      	mov	r3, r0
 80a5e50:	68f8      	ldr	r0, [r7, #12]
 80a5e52:	f000 f9b9 	bl	80a61c8 <USB_WritePacket>
 80a5e56:	e102      	b.n	80a605e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80a5e58:	69bb      	ldr	r3, [r7, #24]
 80a5e5a:	015a      	lsls	r2, r3, #5
 80a5e5c:	69fb      	ldr	r3, [r7, #28]
 80a5e5e:	4413      	add	r3, r2
 80a5e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5e64:	691a      	ldr	r2, [r3, #16]
 80a5e66:	69bb      	ldr	r3, [r7, #24]
 80a5e68:	0159      	lsls	r1, r3, #5
 80a5e6a:	69fb      	ldr	r3, [r7, #28]
 80a5e6c:	440b      	add	r3, r1
 80a5e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5e72:	4619      	mov	r1, r3
 80a5e74:	4b7c      	ldr	r3, [pc, #496]	@ (80a6068 <USB_EPStartXfer+0x53c>)
 80a5e76:	4013      	ands	r3, r2
 80a5e78:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80a5e7a:	69bb      	ldr	r3, [r7, #24]
 80a5e7c:	015a      	lsls	r2, r3, #5
 80a5e7e:	69fb      	ldr	r3, [r7, #28]
 80a5e80:	4413      	add	r3, r2
 80a5e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5e86:	691a      	ldr	r2, [r3, #16]
 80a5e88:	69bb      	ldr	r3, [r7, #24]
 80a5e8a:	0159      	lsls	r1, r3, #5
 80a5e8c:	69fb      	ldr	r3, [r7, #28]
 80a5e8e:	440b      	add	r3, r1
 80a5e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5e94:	4619      	mov	r1, r3
 80a5e96:	4b75      	ldr	r3, [pc, #468]	@ (80a606c <USB_EPStartXfer+0x540>)
 80a5e98:	4013      	ands	r3, r2
 80a5e9a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80a5e9c:	69bb      	ldr	r3, [r7, #24]
 80a5e9e:	2b00      	cmp	r3, #0
 80a5ea0:	d12f      	bne.n	80a5f02 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80a5ea2:	68bb      	ldr	r3, [r7, #8]
 80a5ea4:	691b      	ldr	r3, [r3, #16]
 80a5ea6:	2b00      	cmp	r3, #0
 80a5ea8:	d003      	beq.n	80a5eb2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80a5eaa:	68bb      	ldr	r3, [r7, #8]
 80a5eac:	689a      	ldr	r2, [r3, #8]
 80a5eae:	68bb      	ldr	r3, [r7, #8]
 80a5eb0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80a5eb2:	68bb      	ldr	r3, [r7, #8]
 80a5eb4:	689a      	ldr	r2, [r3, #8]
 80a5eb6:	68bb      	ldr	r3, [r7, #8]
 80a5eb8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80a5eba:	69bb      	ldr	r3, [r7, #24]
 80a5ebc:	015a      	lsls	r2, r3, #5
 80a5ebe:	69fb      	ldr	r3, [r7, #28]
 80a5ec0:	4413      	add	r3, r2
 80a5ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5ec6:	691a      	ldr	r2, [r3, #16]
 80a5ec8:	68bb      	ldr	r3, [r7, #8]
 80a5eca:	6a1b      	ldr	r3, [r3, #32]
 80a5ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80a5ed0:	69b9      	ldr	r1, [r7, #24]
 80a5ed2:	0148      	lsls	r0, r1, #5
 80a5ed4:	69f9      	ldr	r1, [r7, #28]
 80a5ed6:	4401      	add	r1, r0
 80a5ed8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80a5edc:	4313      	orrs	r3, r2
 80a5ede:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80a5ee0:	69bb      	ldr	r3, [r7, #24]
 80a5ee2:	015a      	lsls	r2, r3, #5
 80a5ee4:	69fb      	ldr	r3, [r7, #28]
 80a5ee6:	4413      	add	r3, r2
 80a5ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5eec:	691b      	ldr	r3, [r3, #16]
 80a5eee:	69ba      	ldr	r2, [r7, #24]
 80a5ef0:	0151      	lsls	r1, r2, #5
 80a5ef2:	69fa      	ldr	r2, [r7, #28]
 80a5ef4:	440a      	add	r2, r1
 80a5ef6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a5efa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80a5efe:	6113      	str	r3, [r2, #16]
 80a5f00:	e05f      	b.n	80a5fc2 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80a5f02:	68bb      	ldr	r3, [r7, #8]
 80a5f04:	691b      	ldr	r3, [r3, #16]
 80a5f06:	2b00      	cmp	r3, #0
 80a5f08:	d123      	bne.n	80a5f52 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80a5f0a:	69bb      	ldr	r3, [r7, #24]
 80a5f0c:	015a      	lsls	r2, r3, #5
 80a5f0e:	69fb      	ldr	r3, [r7, #28]
 80a5f10:	4413      	add	r3, r2
 80a5f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5f16:	691a      	ldr	r2, [r3, #16]
 80a5f18:	68bb      	ldr	r3, [r7, #8]
 80a5f1a:	689b      	ldr	r3, [r3, #8]
 80a5f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80a5f20:	69b9      	ldr	r1, [r7, #24]
 80a5f22:	0148      	lsls	r0, r1, #5
 80a5f24:	69f9      	ldr	r1, [r7, #28]
 80a5f26:	4401      	add	r1, r0
 80a5f28:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80a5f2c:	4313      	orrs	r3, r2
 80a5f2e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80a5f30:	69bb      	ldr	r3, [r7, #24]
 80a5f32:	015a      	lsls	r2, r3, #5
 80a5f34:	69fb      	ldr	r3, [r7, #28]
 80a5f36:	4413      	add	r3, r2
 80a5f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5f3c:	691b      	ldr	r3, [r3, #16]
 80a5f3e:	69ba      	ldr	r2, [r7, #24]
 80a5f40:	0151      	lsls	r1, r2, #5
 80a5f42:	69fa      	ldr	r2, [r7, #28]
 80a5f44:	440a      	add	r2, r1
 80a5f46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a5f4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80a5f4e:	6113      	str	r3, [r2, #16]
 80a5f50:	e037      	b.n	80a5fc2 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80a5f52:	68bb      	ldr	r3, [r7, #8]
 80a5f54:	691a      	ldr	r2, [r3, #16]
 80a5f56:	68bb      	ldr	r3, [r7, #8]
 80a5f58:	689b      	ldr	r3, [r3, #8]
 80a5f5a:	4413      	add	r3, r2
 80a5f5c:	1e5a      	subs	r2, r3, #1
 80a5f5e:	68bb      	ldr	r3, [r7, #8]
 80a5f60:	689b      	ldr	r3, [r3, #8]
 80a5f62:	fbb2 f3f3 	udiv	r3, r2, r3
 80a5f66:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80a5f68:	68bb      	ldr	r3, [r7, #8]
 80a5f6a:	689b      	ldr	r3, [r3, #8]
 80a5f6c:	8afa      	ldrh	r2, [r7, #22]
 80a5f6e:	fb03 f202 	mul.w	r2, r3, r2
 80a5f72:	68bb      	ldr	r3, [r7, #8]
 80a5f74:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80a5f76:	69bb      	ldr	r3, [r7, #24]
 80a5f78:	015a      	lsls	r2, r3, #5
 80a5f7a:	69fb      	ldr	r3, [r7, #28]
 80a5f7c:	4413      	add	r3, r2
 80a5f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5f82:	691a      	ldr	r2, [r3, #16]
 80a5f84:	8afb      	ldrh	r3, [r7, #22]
 80a5f86:	04d9      	lsls	r1, r3, #19
 80a5f88:	4b39      	ldr	r3, [pc, #228]	@ (80a6070 <USB_EPStartXfer+0x544>)
 80a5f8a:	400b      	ands	r3, r1
 80a5f8c:	69b9      	ldr	r1, [r7, #24]
 80a5f8e:	0148      	lsls	r0, r1, #5
 80a5f90:	69f9      	ldr	r1, [r7, #28]
 80a5f92:	4401      	add	r1, r0
 80a5f94:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80a5f98:	4313      	orrs	r3, r2
 80a5f9a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80a5f9c:	69bb      	ldr	r3, [r7, #24]
 80a5f9e:	015a      	lsls	r2, r3, #5
 80a5fa0:	69fb      	ldr	r3, [r7, #28]
 80a5fa2:	4413      	add	r3, r2
 80a5fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5fa8:	691a      	ldr	r2, [r3, #16]
 80a5faa:	68bb      	ldr	r3, [r7, #8]
 80a5fac:	6a1b      	ldr	r3, [r3, #32]
 80a5fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80a5fb2:	69b9      	ldr	r1, [r7, #24]
 80a5fb4:	0148      	lsls	r0, r1, #5
 80a5fb6:	69f9      	ldr	r1, [r7, #28]
 80a5fb8:	4401      	add	r1, r0
 80a5fba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80a5fbe:	4313      	orrs	r3, r2
 80a5fc0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80a5fc2:	79fb      	ldrb	r3, [r7, #7]
 80a5fc4:	2b01      	cmp	r3, #1
 80a5fc6:	d10d      	bne.n	80a5fe4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80a5fc8:	68bb      	ldr	r3, [r7, #8]
 80a5fca:	68db      	ldr	r3, [r3, #12]
 80a5fcc:	2b00      	cmp	r3, #0
 80a5fce:	d009      	beq.n	80a5fe4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80a5fd0:	68bb      	ldr	r3, [r7, #8]
 80a5fd2:	68d9      	ldr	r1, [r3, #12]
 80a5fd4:	69bb      	ldr	r3, [r7, #24]
 80a5fd6:	015a      	lsls	r2, r3, #5
 80a5fd8:	69fb      	ldr	r3, [r7, #28]
 80a5fda:	4413      	add	r3, r2
 80a5fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a5fe0:	460a      	mov	r2, r1
 80a5fe2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80a5fe4:	68bb      	ldr	r3, [r7, #8]
 80a5fe6:	791b      	ldrb	r3, [r3, #4]
 80a5fe8:	2b01      	cmp	r3, #1
 80a5fea:	d128      	bne.n	80a603e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80a5fec:	69fb      	ldr	r3, [r7, #28]
 80a5fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a5ff2:	689b      	ldr	r3, [r3, #8]
 80a5ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a5ff8:	2b00      	cmp	r3, #0
 80a5ffa:	d110      	bne.n	80a601e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80a5ffc:	69bb      	ldr	r3, [r7, #24]
 80a5ffe:	015a      	lsls	r2, r3, #5
 80a6000:	69fb      	ldr	r3, [r7, #28]
 80a6002:	4413      	add	r3, r2
 80a6004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6008:	681b      	ldr	r3, [r3, #0]
 80a600a:	69ba      	ldr	r2, [r7, #24]
 80a600c:	0151      	lsls	r1, r2, #5
 80a600e:	69fa      	ldr	r2, [r7, #28]
 80a6010:	440a      	add	r2, r1
 80a6012:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6016:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80a601a:	6013      	str	r3, [r2, #0]
 80a601c:	e00f      	b.n	80a603e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80a601e:	69bb      	ldr	r3, [r7, #24]
 80a6020:	015a      	lsls	r2, r3, #5
 80a6022:	69fb      	ldr	r3, [r7, #28]
 80a6024:	4413      	add	r3, r2
 80a6026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a602a:	681b      	ldr	r3, [r3, #0]
 80a602c:	69ba      	ldr	r2, [r7, #24]
 80a602e:	0151      	lsls	r1, r2, #5
 80a6030:	69fa      	ldr	r2, [r7, #28]
 80a6032:	440a      	add	r2, r1
 80a6034:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80a603c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80a603e:	69bb      	ldr	r3, [r7, #24]
 80a6040:	015a      	lsls	r2, r3, #5
 80a6042:	69fb      	ldr	r3, [r7, #28]
 80a6044:	4413      	add	r3, r2
 80a6046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a604a:	681b      	ldr	r3, [r3, #0]
 80a604c:	69ba      	ldr	r2, [r7, #24]
 80a604e:	0151      	lsls	r1, r2, #5
 80a6050:	69fa      	ldr	r2, [r7, #28]
 80a6052:	440a      	add	r2, r1
 80a6054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6058:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80a605c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80a605e:	2300      	movs	r3, #0
}
 80a6060:	4618      	mov	r0, r3
 80a6062:	3720      	adds	r7, #32
 80a6064:	46bd      	mov	sp, r7
 80a6066:	bd80      	pop	{r7, pc}
 80a6068:	fff80000 	.word	0xfff80000
 80a606c:	e007ffff 	.word	0xe007ffff
 80a6070:	1ff80000 	.word	0x1ff80000

080a6074 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80a6074:	b480      	push	{r7}
 80a6076:	b087      	sub	sp, #28
 80a6078:	af00      	add	r7, sp, #0
 80a607a:	6078      	str	r0, [r7, #4]
 80a607c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80a607e:	2300      	movs	r3, #0
 80a6080:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80a6082:	2300      	movs	r3, #0
 80a6084:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a6086:	687b      	ldr	r3, [r7, #4]
 80a6088:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80a608a:	683b      	ldr	r3, [r7, #0]
 80a608c:	785b      	ldrb	r3, [r3, #1]
 80a608e:	2b01      	cmp	r3, #1
 80a6090:	d14a      	bne.n	80a6128 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80a6092:	683b      	ldr	r3, [r7, #0]
 80a6094:	781b      	ldrb	r3, [r3, #0]
 80a6096:	015a      	lsls	r2, r3, #5
 80a6098:	693b      	ldr	r3, [r7, #16]
 80a609a:	4413      	add	r3, r2
 80a609c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a60a0:	681b      	ldr	r3, [r3, #0]
 80a60a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a60a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a60aa:	f040 8086 	bne.w	80a61ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80a60ae:	683b      	ldr	r3, [r7, #0]
 80a60b0:	781b      	ldrb	r3, [r3, #0]
 80a60b2:	015a      	lsls	r2, r3, #5
 80a60b4:	693b      	ldr	r3, [r7, #16]
 80a60b6:	4413      	add	r3, r2
 80a60b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a60bc:	681b      	ldr	r3, [r3, #0]
 80a60be:	683a      	ldr	r2, [r7, #0]
 80a60c0:	7812      	ldrb	r2, [r2, #0]
 80a60c2:	0151      	lsls	r1, r2, #5
 80a60c4:	693a      	ldr	r2, [r7, #16]
 80a60c6:	440a      	add	r2, r1
 80a60c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a60cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80a60d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80a60d2:	683b      	ldr	r3, [r7, #0]
 80a60d4:	781b      	ldrb	r3, [r3, #0]
 80a60d6:	015a      	lsls	r2, r3, #5
 80a60d8:	693b      	ldr	r3, [r7, #16]
 80a60da:	4413      	add	r3, r2
 80a60dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a60e0:	681b      	ldr	r3, [r3, #0]
 80a60e2:	683a      	ldr	r2, [r7, #0]
 80a60e4:	7812      	ldrb	r2, [r2, #0]
 80a60e6:	0151      	lsls	r1, r2, #5
 80a60e8:	693a      	ldr	r2, [r7, #16]
 80a60ea:	440a      	add	r2, r1
 80a60ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a60f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80a60f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80a60f6:	68fb      	ldr	r3, [r7, #12]
 80a60f8:	3301      	adds	r3, #1
 80a60fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80a60fc:	68fb      	ldr	r3, [r7, #12]
 80a60fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 80a6102:	4293      	cmp	r3, r2
 80a6104:	d902      	bls.n	80a610c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80a6106:	2301      	movs	r3, #1
 80a6108:	75fb      	strb	r3, [r7, #23]
          break;
 80a610a:	e056      	b.n	80a61ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80a610c:	683b      	ldr	r3, [r7, #0]
 80a610e:	781b      	ldrb	r3, [r3, #0]
 80a6110:	015a      	lsls	r2, r3, #5
 80a6112:	693b      	ldr	r3, [r7, #16]
 80a6114:	4413      	add	r3, r2
 80a6116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a611a:	681b      	ldr	r3, [r3, #0]
 80a611c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a6120:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a6124:	d0e7      	beq.n	80a60f6 <USB_EPStopXfer+0x82>
 80a6126:	e048      	b.n	80a61ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80a6128:	683b      	ldr	r3, [r7, #0]
 80a612a:	781b      	ldrb	r3, [r3, #0]
 80a612c:	015a      	lsls	r2, r3, #5
 80a612e:	693b      	ldr	r3, [r7, #16]
 80a6130:	4413      	add	r3, r2
 80a6132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6136:	681b      	ldr	r3, [r3, #0]
 80a6138:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a613c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a6140:	d13b      	bne.n	80a61ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80a6142:	683b      	ldr	r3, [r7, #0]
 80a6144:	781b      	ldrb	r3, [r3, #0]
 80a6146:	015a      	lsls	r2, r3, #5
 80a6148:	693b      	ldr	r3, [r7, #16]
 80a614a:	4413      	add	r3, r2
 80a614c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6150:	681b      	ldr	r3, [r3, #0]
 80a6152:	683a      	ldr	r2, [r7, #0]
 80a6154:	7812      	ldrb	r2, [r2, #0]
 80a6156:	0151      	lsls	r1, r2, #5
 80a6158:	693a      	ldr	r2, [r7, #16]
 80a615a:	440a      	add	r2, r1
 80a615c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6160:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80a6164:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80a6166:	683b      	ldr	r3, [r7, #0]
 80a6168:	781b      	ldrb	r3, [r3, #0]
 80a616a:	015a      	lsls	r2, r3, #5
 80a616c:	693b      	ldr	r3, [r7, #16]
 80a616e:	4413      	add	r3, r2
 80a6170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6174:	681b      	ldr	r3, [r3, #0]
 80a6176:	683a      	ldr	r2, [r7, #0]
 80a6178:	7812      	ldrb	r2, [r2, #0]
 80a617a:	0151      	lsls	r1, r2, #5
 80a617c:	693a      	ldr	r2, [r7, #16]
 80a617e:	440a      	add	r2, r1
 80a6180:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6184:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80a6188:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80a618a:	68fb      	ldr	r3, [r7, #12]
 80a618c:	3301      	adds	r3, #1
 80a618e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80a6190:	68fb      	ldr	r3, [r7, #12]
 80a6192:	f242 7210 	movw	r2, #10000	@ 0x2710
 80a6196:	4293      	cmp	r3, r2
 80a6198:	d902      	bls.n	80a61a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80a619a:	2301      	movs	r3, #1
 80a619c:	75fb      	strb	r3, [r7, #23]
          break;
 80a619e:	e00c      	b.n	80a61ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80a61a0:	683b      	ldr	r3, [r7, #0]
 80a61a2:	781b      	ldrb	r3, [r3, #0]
 80a61a4:	015a      	lsls	r2, r3, #5
 80a61a6:	693b      	ldr	r3, [r7, #16]
 80a61a8:	4413      	add	r3, r2
 80a61aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a61ae:	681b      	ldr	r3, [r3, #0]
 80a61b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a61b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a61b8:	d0e7      	beq.n	80a618a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80a61ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80a61bc:	4618      	mov	r0, r3
 80a61be:	371c      	adds	r7, #28
 80a61c0:	46bd      	mov	sp, r7
 80a61c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a61c6:	4770      	bx	lr

080a61c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80a61c8:	b480      	push	{r7}
 80a61ca:	b089      	sub	sp, #36	@ 0x24
 80a61cc:	af00      	add	r7, sp, #0
 80a61ce:	60f8      	str	r0, [r7, #12]
 80a61d0:	60b9      	str	r1, [r7, #8]
 80a61d2:	4611      	mov	r1, r2
 80a61d4:	461a      	mov	r2, r3
 80a61d6:	460b      	mov	r3, r1
 80a61d8:	71fb      	strb	r3, [r7, #7]
 80a61da:	4613      	mov	r3, r2
 80a61dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a61de:	68fb      	ldr	r3, [r7, #12]
 80a61e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80a61e2:	68bb      	ldr	r3, [r7, #8]
 80a61e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80a61e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80a61ea:	2b00      	cmp	r3, #0
 80a61ec:	d123      	bne.n	80a6236 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80a61ee:	88bb      	ldrh	r3, [r7, #4]
 80a61f0:	3303      	adds	r3, #3
 80a61f2:	089b      	lsrs	r3, r3, #2
 80a61f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80a61f6:	2300      	movs	r3, #0
 80a61f8:	61bb      	str	r3, [r7, #24]
 80a61fa:	e018      	b.n	80a622e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80a61fc:	79fb      	ldrb	r3, [r7, #7]
 80a61fe:	031a      	lsls	r2, r3, #12
 80a6200:	697b      	ldr	r3, [r7, #20]
 80a6202:	4413      	add	r3, r2
 80a6204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80a6208:	461a      	mov	r2, r3
 80a620a:	69fb      	ldr	r3, [r7, #28]
 80a620c:	681b      	ldr	r3, [r3, #0]
 80a620e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80a6210:	69fb      	ldr	r3, [r7, #28]
 80a6212:	3301      	adds	r3, #1
 80a6214:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80a6216:	69fb      	ldr	r3, [r7, #28]
 80a6218:	3301      	adds	r3, #1
 80a621a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80a621c:	69fb      	ldr	r3, [r7, #28]
 80a621e:	3301      	adds	r3, #1
 80a6220:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80a6222:	69fb      	ldr	r3, [r7, #28]
 80a6224:	3301      	adds	r3, #1
 80a6226:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80a6228:	69bb      	ldr	r3, [r7, #24]
 80a622a:	3301      	adds	r3, #1
 80a622c:	61bb      	str	r3, [r7, #24]
 80a622e:	69ba      	ldr	r2, [r7, #24]
 80a6230:	693b      	ldr	r3, [r7, #16]
 80a6232:	429a      	cmp	r2, r3
 80a6234:	d3e2      	bcc.n	80a61fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80a6236:	2300      	movs	r3, #0
}
 80a6238:	4618      	mov	r0, r3
 80a623a:	3724      	adds	r7, #36	@ 0x24
 80a623c:	46bd      	mov	sp, r7
 80a623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6242:	4770      	bx	lr

080a6244 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80a6244:	b480      	push	{r7}
 80a6246:	b08b      	sub	sp, #44	@ 0x2c
 80a6248:	af00      	add	r7, sp, #0
 80a624a:	60f8      	str	r0, [r7, #12]
 80a624c:	60b9      	str	r1, [r7, #8]
 80a624e:	4613      	mov	r3, r2
 80a6250:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a6252:	68fb      	ldr	r3, [r7, #12]
 80a6254:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80a6256:	68bb      	ldr	r3, [r7, #8]
 80a6258:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80a625a:	88fb      	ldrh	r3, [r7, #6]
 80a625c:	089b      	lsrs	r3, r3, #2
 80a625e:	b29b      	uxth	r3, r3
 80a6260:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80a6262:	88fb      	ldrh	r3, [r7, #6]
 80a6264:	f003 0303 	and.w	r3, r3, #3
 80a6268:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80a626a:	2300      	movs	r3, #0
 80a626c:	623b      	str	r3, [r7, #32]
 80a626e:	e014      	b.n	80a629a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80a6270:	69bb      	ldr	r3, [r7, #24]
 80a6272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80a6276:	681a      	ldr	r2, [r3, #0]
 80a6278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a627a:	601a      	str	r2, [r3, #0]
    pDest++;
 80a627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a627e:	3301      	adds	r3, #1
 80a6280:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80a6282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a6284:	3301      	adds	r3, #1
 80a6286:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80a6288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a628a:	3301      	adds	r3, #1
 80a628c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80a628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a6290:	3301      	adds	r3, #1
 80a6292:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80a6294:	6a3b      	ldr	r3, [r7, #32]
 80a6296:	3301      	adds	r3, #1
 80a6298:	623b      	str	r3, [r7, #32]
 80a629a:	6a3a      	ldr	r2, [r7, #32]
 80a629c:	697b      	ldr	r3, [r7, #20]
 80a629e:	429a      	cmp	r2, r3
 80a62a0:	d3e6      	bcc.n	80a6270 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80a62a2:	8bfb      	ldrh	r3, [r7, #30]
 80a62a4:	2b00      	cmp	r3, #0
 80a62a6:	d01e      	beq.n	80a62e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80a62a8:	2300      	movs	r3, #0
 80a62aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80a62ac:	69bb      	ldr	r3, [r7, #24]
 80a62ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80a62b2:	461a      	mov	r2, r3
 80a62b4:	f107 0310 	add.w	r3, r7, #16
 80a62b8:	6812      	ldr	r2, [r2, #0]
 80a62ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80a62bc:	693a      	ldr	r2, [r7, #16]
 80a62be:	6a3b      	ldr	r3, [r7, #32]
 80a62c0:	b2db      	uxtb	r3, r3
 80a62c2:	00db      	lsls	r3, r3, #3
 80a62c4:	fa22 f303 	lsr.w	r3, r2, r3
 80a62c8:	b2da      	uxtb	r2, r3
 80a62ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a62cc:	701a      	strb	r2, [r3, #0]
      i++;
 80a62ce:	6a3b      	ldr	r3, [r7, #32]
 80a62d0:	3301      	adds	r3, #1
 80a62d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80a62d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80a62d6:	3301      	adds	r3, #1
 80a62d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80a62da:	8bfb      	ldrh	r3, [r7, #30]
 80a62dc:	3b01      	subs	r3, #1
 80a62de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80a62e0:	8bfb      	ldrh	r3, [r7, #30]
 80a62e2:	2b00      	cmp	r3, #0
 80a62e4:	d1ea      	bne.n	80a62bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80a62e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80a62e8:	4618      	mov	r0, r3
 80a62ea:	372c      	adds	r7, #44	@ 0x2c
 80a62ec:	46bd      	mov	sp, r7
 80a62ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a62f2:	4770      	bx	lr

080a62f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80a62f4:	b480      	push	{r7}
 80a62f6:	b085      	sub	sp, #20
 80a62f8:	af00      	add	r7, sp, #0
 80a62fa:	6078      	str	r0, [r7, #4]
 80a62fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a62fe:	687b      	ldr	r3, [r7, #4]
 80a6300:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80a6302:	683b      	ldr	r3, [r7, #0]
 80a6304:	781b      	ldrb	r3, [r3, #0]
 80a6306:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80a6308:	683b      	ldr	r3, [r7, #0]
 80a630a:	785b      	ldrb	r3, [r3, #1]
 80a630c:	2b01      	cmp	r3, #1
 80a630e:	d12c      	bne.n	80a636a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80a6310:	68bb      	ldr	r3, [r7, #8]
 80a6312:	015a      	lsls	r2, r3, #5
 80a6314:	68fb      	ldr	r3, [r7, #12]
 80a6316:	4413      	add	r3, r2
 80a6318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a631c:	681b      	ldr	r3, [r3, #0]
 80a631e:	2b00      	cmp	r3, #0
 80a6320:	db12      	blt.n	80a6348 <USB_EPSetStall+0x54>
 80a6322:	68bb      	ldr	r3, [r7, #8]
 80a6324:	2b00      	cmp	r3, #0
 80a6326:	d00f      	beq.n	80a6348 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80a6328:	68bb      	ldr	r3, [r7, #8]
 80a632a:	015a      	lsls	r2, r3, #5
 80a632c:	68fb      	ldr	r3, [r7, #12]
 80a632e:	4413      	add	r3, r2
 80a6330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a6334:	681b      	ldr	r3, [r3, #0]
 80a6336:	68ba      	ldr	r2, [r7, #8]
 80a6338:	0151      	lsls	r1, r2, #5
 80a633a:	68fa      	ldr	r2, [r7, #12]
 80a633c:	440a      	add	r2, r1
 80a633e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a6342:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80a6346:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80a6348:	68bb      	ldr	r3, [r7, #8]
 80a634a:	015a      	lsls	r2, r3, #5
 80a634c:	68fb      	ldr	r3, [r7, #12]
 80a634e:	4413      	add	r3, r2
 80a6350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a6354:	681b      	ldr	r3, [r3, #0]
 80a6356:	68ba      	ldr	r2, [r7, #8]
 80a6358:	0151      	lsls	r1, r2, #5
 80a635a:	68fa      	ldr	r2, [r7, #12]
 80a635c:	440a      	add	r2, r1
 80a635e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a6362:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80a6366:	6013      	str	r3, [r2, #0]
 80a6368:	e02b      	b.n	80a63c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80a636a:	68bb      	ldr	r3, [r7, #8]
 80a636c:	015a      	lsls	r2, r3, #5
 80a636e:	68fb      	ldr	r3, [r7, #12]
 80a6370:	4413      	add	r3, r2
 80a6372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6376:	681b      	ldr	r3, [r3, #0]
 80a6378:	2b00      	cmp	r3, #0
 80a637a:	db12      	blt.n	80a63a2 <USB_EPSetStall+0xae>
 80a637c:	68bb      	ldr	r3, [r7, #8]
 80a637e:	2b00      	cmp	r3, #0
 80a6380:	d00f      	beq.n	80a63a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80a6382:	68bb      	ldr	r3, [r7, #8]
 80a6384:	015a      	lsls	r2, r3, #5
 80a6386:	68fb      	ldr	r3, [r7, #12]
 80a6388:	4413      	add	r3, r2
 80a638a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a638e:	681b      	ldr	r3, [r3, #0]
 80a6390:	68ba      	ldr	r2, [r7, #8]
 80a6392:	0151      	lsls	r1, r2, #5
 80a6394:	68fa      	ldr	r2, [r7, #12]
 80a6396:	440a      	add	r2, r1
 80a6398:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a639c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80a63a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80a63a2:	68bb      	ldr	r3, [r7, #8]
 80a63a4:	015a      	lsls	r2, r3, #5
 80a63a6:	68fb      	ldr	r3, [r7, #12]
 80a63a8:	4413      	add	r3, r2
 80a63aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a63ae:	681b      	ldr	r3, [r3, #0]
 80a63b0:	68ba      	ldr	r2, [r7, #8]
 80a63b2:	0151      	lsls	r1, r2, #5
 80a63b4:	68fa      	ldr	r2, [r7, #12]
 80a63b6:	440a      	add	r2, r1
 80a63b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a63bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80a63c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80a63c2:	2300      	movs	r3, #0
}
 80a63c4:	4618      	mov	r0, r3
 80a63c6:	3714      	adds	r7, #20
 80a63c8:	46bd      	mov	sp, r7
 80a63ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a63ce:	4770      	bx	lr

080a63d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80a63d0:	b480      	push	{r7}
 80a63d2:	b085      	sub	sp, #20
 80a63d4:	af00      	add	r7, sp, #0
 80a63d6:	6078      	str	r0, [r7, #4]
 80a63d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a63da:	687b      	ldr	r3, [r7, #4]
 80a63dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80a63de:	683b      	ldr	r3, [r7, #0]
 80a63e0:	781b      	ldrb	r3, [r3, #0]
 80a63e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80a63e4:	683b      	ldr	r3, [r7, #0]
 80a63e6:	785b      	ldrb	r3, [r3, #1]
 80a63e8:	2b01      	cmp	r3, #1
 80a63ea:	d128      	bne.n	80a643e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80a63ec:	68bb      	ldr	r3, [r7, #8]
 80a63ee:	015a      	lsls	r2, r3, #5
 80a63f0:	68fb      	ldr	r3, [r7, #12]
 80a63f2:	4413      	add	r3, r2
 80a63f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a63f8:	681b      	ldr	r3, [r3, #0]
 80a63fa:	68ba      	ldr	r2, [r7, #8]
 80a63fc:	0151      	lsls	r1, r2, #5
 80a63fe:	68fa      	ldr	r2, [r7, #12]
 80a6400:	440a      	add	r2, r1
 80a6402:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a6406:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80a640a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80a640c:	683b      	ldr	r3, [r7, #0]
 80a640e:	791b      	ldrb	r3, [r3, #4]
 80a6410:	2b03      	cmp	r3, #3
 80a6412:	d003      	beq.n	80a641c <USB_EPClearStall+0x4c>
 80a6414:	683b      	ldr	r3, [r7, #0]
 80a6416:	791b      	ldrb	r3, [r3, #4]
 80a6418:	2b02      	cmp	r3, #2
 80a641a:	d138      	bne.n	80a648e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80a641c:	68bb      	ldr	r3, [r7, #8]
 80a641e:	015a      	lsls	r2, r3, #5
 80a6420:	68fb      	ldr	r3, [r7, #12]
 80a6422:	4413      	add	r3, r2
 80a6424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a6428:	681b      	ldr	r3, [r3, #0]
 80a642a:	68ba      	ldr	r2, [r7, #8]
 80a642c:	0151      	lsls	r1, r2, #5
 80a642e:	68fa      	ldr	r2, [r7, #12]
 80a6430:	440a      	add	r2, r1
 80a6432:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80a6436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80a643a:	6013      	str	r3, [r2, #0]
 80a643c:	e027      	b.n	80a648e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80a643e:	68bb      	ldr	r3, [r7, #8]
 80a6440:	015a      	lsls	r2, r3, #5
 80a6442:	68fb      	ldr	r3, [r7, #12]
 80a6444:	4413      	add	r3, r2
 80a6446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a644a:	681b      	ldr	r3, [r3, #0]
 80a644c:	68ba      	ldr	r2, [r7, #8]
 80a644e:	0151      	lsls	r1, r2, #5
 80a6450:	68fa      	ldr	r2, [r7, #12]
 80a6452:	440a      	add	r2, r1
 80a6454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6458:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80a645c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80a645e:	683b      	ldr	r3, [r7, #0]
 80a6460:	791b      	ldrb	r3, [r3, #4]
 80a6462:	2b03      	cmp	r3, #3
 80a6464:	d003      	beq.n	80a646e <USB_EPClearStall+0x9e>
 80a6466:	683b      	ldr	r3, [r7, #0]
 80a6468:	791b      	ldrb	r3, [r3, #4]
 80a646a:	2b02      	cmp	r3, #2
 80a646c:	d10f      	bne.n	80a648e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80a646e:	68bb      	ldr	r3, [r7, #8]
 80a6470:	015a      	lsls	r2, r3, #5
 80a6472:	68fb      	ldr	r3, [r7, #12]
 80a6474:	4413      	add	r3, r2
 80a6476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a647a:	681b      	ldr	r3, [r3, #0]
 80a647c:	68ba      	ldr	r2, [r7, #8]
 80a647e:	0151      	lsls	r1, r2, #5
 80a6480:	68fa      	ldr	r2, [r7, #12]
 80a6482:	440a      	add	r2, r1
 80a6484:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80a648c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80a648e:	2300      	movs	r3, #0
}
 80a6490:	4618      	mov	r0, r3
 80a6492:	3714      	adds	r7, #20
 80a6494:	46bd      	mov	sp, r7
 80a6496:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a649a:	4770      	bx	lr

080a649c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80a649c:	b480      	push	{r7}
 80a649e:	b085      	sub	sp, #20
 80a64a0:	af00      	add	r7, sp, #0
 80a64a2:	6078      	str	r0, [r7, #4]
 80a64a4:	460b      	mov	r3, r1
 80a64a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a64a8:	687b      	ldr	r3, [r7, #4]
 80a64aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80a64ac:	68fb      	ldr	r3, [r7, #12]
 80a64ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a64b2:	681b      	ldr	r3, [r3, #0]
 80a64b4:	68fa      	ldr	r2, [r7, #12]
 80a64b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a64ba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80a64be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80a64c0:	68fb      	ldr	r3, [r7, #12]
 80a64c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a64c6:	681a      	ldr	r2, [r3, #0]
 80a64c8:	78fb      	ldrb	r3, [r7, #3]
 80a64ca:	011b      	lsls	r3, r3, #4
 80a64cc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80a64d0:	68f9      	ldr	r1, [r7, #12]
 80a64d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80a64d6:	4313      	orrs	r3, r2
 80a64d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80a64da:	2300      	movs	r3, #0
}
 80a64dc:	4618      	mov	r0, r3
 80a64de:	3714      	adds	r7, #20
 80a64e0:	46bd      	mov	sp, r7
 80a64e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a64e6:	4770      	bx	lr

080a64e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80a64e8:	b480      	push	{r7}
 80a64ea:	b085      	sub	sp, #20
 80a64ec:	af00      	add	r7, sp, #0
 80a64ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a64f0:	687b      	ldr	r3, [r7, #4]
 80a64f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80a64f4:	68fb      	ldr	r3, [r7, #12]
 80a64f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80a64fa:	681b      	ldr	r3, [r3, #0]
 80a64fc:	68fa      	ldr	r2, [r7, #12]
 80a64fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80a6502:	f023 0303 	bic.w	r3, r3, #3
 80a6506:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80a6508:	68fb      	ldr	r3, [r7, #12]
 80a650a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a650e:	685b      	ldr	r3, [r3, #4]
 80a6510:	68fa      	ldr	r2, [r7, #12]
 80a6512:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a6516:	f023 0302 	bic.w	r3, r3, #2
 80a651a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80a651c:	2300      	movs	r3, #0
}
 80a651e:	4618      	mov	r0, r3
 80a6520:	3714      	adds	r7, #20
 80a6522:	46bd      	mov	sp, r7
 80a6524:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6528:	4770      	bx	lr

080a652a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80a652a:	b480      	push	{r7}
 80a652c:	b085      	sub	sp, #20
 80a652e:	af00      	add	r7, sp, #0
 80a6530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a6532:	687b      	ldr	r3, [r7, #4]
 80a6534:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80a6536:	68fb      	ldr	r3, [r7, #12]
 80a6538:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80a653c:	681b      	ldr	r3, [r3, #0]
 80a653e:	68fa      	ldr	r2, [r7, #12]
 80a6540:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80a6544:	f023 0303 	bic.w	r3, r3, #3
 80a6548:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80a654a:	68fb      	ldr	r3, [r7, #12]
 80a654c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a6550:	685b      	ldr	r3, [r3, #4]
 80a6552:	68fa      	ldr	r2, [r7, #12]
 80a6554:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a6558:	f043 0302 	orr.w	r3, r3, #2
 80a655c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80a655e:	2300      	movs	r3, #0
}
 80a6560:	4618      	mov	r0, r3
 80a6562:	3714      	adds	r7, #20
 80a6564:	46bd      	mov	sp, r7
 80a6566:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a656a:	4770      	bx	lr

080a656c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80a656c:	b480      	push	{r7}
 80a656e:	b085      	sub	sp, #20
 80a6570:	af00      	add	r7, sp, #0
 80a6572:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80a6574:	687b      	ldr	r3, [r7, #4]
 80a6576:	695b      	ldr	r3, [r3, #20]
 80a6578:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80a657a:	687b      	ldr	r3, [r7, #4]
 80a657c:	699b      	ldr	r3, [r3, #24]
 80a657e:	68fa      	ldr	r2, [r7, #12]
 80a6580:	4013      	ands	r3, r2
 80a6582:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80a6584:	68fb      	ldr	r3, [r7, #12]
}
 80a6586:	4618      	mov	r0, r3
 80a6588:	3714      	adds	r7, #20
 80a658a:	46bd      	mov	sp, r7
 80a658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6590:	4770      	bx	lr

080a6592 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80a6592:	b480      	push	{r7}
 80a6594:	b085      	sub	sp, #20
 80a6596:	af00      	add	r7, sp, #0
 80a6598:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a659a:	687b      	ldr	r3, [r7, #4]
 80a659c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80a659e:	68fb      	ldr	r3, [r7, #12]
 80a65a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a65a4:	699b      	ldr	r3, [r3, #24]
 80a65a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80a65a8:	68fb      	ldr	r3, [r7, #12]
 80a65aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a65ae:	69db      	ldr	r3, [r3, #28]
 80a65b0:	68ba      	ldr	r2, [r7, #8]
 80a65b2:	4013      	ands	r3, r2
 80a65b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80a65b6:	68bb      	ldr	r3, [r7, #8]
 80a65b8:	0c1b      	lsrs	r3, r3, #16
}
 80a65ba:	4618      	mov	r0, r3
 80a65bc:	3714      	adds	r7, #20
 80a65be:	46bd      	mov	sp, r7
 80a65c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a65c4:	4770      	bx	lr

080a65c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80a65c6:	b480      	push	{r7}
 80a65c8:	b085      	sub	sp, #20
 80a65ca:	af00      	add	r7, sp, #0
 80a65cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a65ce:	687b      	ldr	r3, [r7, #4]
 80a65d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80a65d2:	68fb      	ldr	r3, [r7, #12]
 80a65d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a65d8:	699b      	ldr	r3, [r3, #24]
 80a65da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80a65dc:	68fb      	ldr	r3, [r7, #12]
 80a65de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a65e2:	69db      	ldr	r3, [r3, #28]
 80a65e4:	68ba      	ldr	r2, [r7, #8]
 80a65e6:	4013      	ands	r3, r2
 80a65e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80a65ea:	68bb      	ldr	r3, [r7, #8]
 80a65ec:	b29b      	uxth	r3, r3
}
 80a65ee:	4618      	mov	r0, r3
 80a65f0:	3714      	adds	r7, #20
 80a65f2:	46bd      	mov	sp, r7
 80a65f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a65f8:	4770      	bx	lr

080a65fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80a65fa:	b480      	push	{r7}
 80a65fc:	b085      	sub	sp, #20
 80a65fe:	af00      	add	r7, sp, #0
 80a6600:	6078      	str	r0, [r7, #4]
 80a6602:	460b      	mov	r3, r1
 80a6604:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a6606:	687b      	ldr	r3, [r7, #4]
 80a6608:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80a660a:	78fb      	ldrb	r3, [r7, #3]
 80a660c:	015a      	lsls	r2, r3, #5
 80a660e:	68fb      	ldr	r3, [r7, #12]
 80a6610:	4413      	add	r3, r2
 80a6612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6616:	689b      	ldr	r3, [r3, #8]
 80a6618:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80a661a:	68fb      	ldr	r3, [r7, #12]
 80a661c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a6620:	695b      	ldr	r3, [r3, #20]
 80a6622:	68ba      	ldr	r2, [r7, #8]
 80a6624:	4013      	ands	r3, r2
 80a6626:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80a6628:	68bb      	ldr	r3, [r7, #8]
}
 80a662a:	4618      	mov	r0, r3
 80a662c:	3714      	adds	r7, #20
 80a662e:	46bd      	mov	sp, r7
 80a6630:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6634:	4770      	bx	lr

080a6636 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80a6636:	b480      	push	{r7}
 80a6638:	b087      	sub	sp, #28
 80a663a:	af00      	add	r7, sp, #0
 80a663c:	6078      	str	r0, [r7, #4]
 80a663e:	460b      	mov	r3, r1
 80a6640:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a6642:	687b      	ldr	r3, [r7, #4]
 80a6644:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80a6646:	697b      	ldr	r3, [r7, #20]
 80a6648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a664c:	691b      	ldr	r3, [r3, #16]
 80a664e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80a6650:	697b      	ldr	r3, [r7, #20]
 80a6652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a6656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80a6658:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80a665a:	78fb      	ldrb	r3, [r7, #3]
 80a665c:	f003 030f 	and.w	r3, r3, #15
 80a6660:	68fa      	ldr	r2, [r7, #12]
 80a6662:	fa22 f303 	lsr.w	r3, r2, r3
 80a6666:	01db      	lsls	r3, r3, #7
 80a6668:	b2db      	uxtb	r3, r3
 80a666a:	693a      	ldr	r2, [r7, #16]
 80a666c:	4313      	orrs	r3, r2
 80a666e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80a6670:	78fb      	ldrb	r3, [r7, #3]
 80a6672:	015a      	lsls	r2, r3, #5
 80a6674:	697b      	ldr	r3, [r7, #20]
 80a6676:	4413      	add	r3, r2
 80a6678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a667c:	689b      	ldr	r3, [r3, #8]
 80a667e:	693a      	ldr	r2, [r7, #16]
 80a6680:	4013      	ands	r3, r2
 80a6682:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80a6684:	68bb      	ldr	r3, [r7, #8]
}
 80a6686:	4618      	mov	r0, r3
 80a6688:	371c      	adds	r7, #28
 80a668a:	46bd      	mov	sp, r7
 80a668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6690:	4770      	bx	lr

080a6692 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80a6692:	b480      	push	{r7}
 80a6694:	b083      	sub	sp, #12
 80a6696:	af00      	add	r7, sp, #0
 80a6698:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80a669a:	687b      	ldr	r3, [r7, #4]
 80a669c:	695b      	ldr	r3, [r3, #20]
 80a669e:	f003 0301 	and.w	r3, r3, #1
}
 80a66a2:	4618      	mov	r0, r3
 80a66a4:	370c      	adds	r7, #12
 80a66a6:	46bd      	mov	sp, r7
 80a66a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a66ac:	4770      	bx	lr
	...

080a66b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80a66b0:	b480      	push	{r7}
 80a66b2:	b085      	sub	sp, #20
 80a66b4:	af00      	add	r7, sp, #0
 80a66b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a66b8:	687b      	ldr	r3, [r7, #4]
 80a66ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80a66bc:	68fb      	ldr	r3, [r7, #12]
 80a66be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a66c2:	681a      	ldr	r2, [r3, #0]
 80a66c4:	68fb      	ldr	r3, [r7, #12]
 80a66c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80a66ca:	4619      	mov	r1, r3
 80a66cc:	4b09      	ldr	r3, [pc, #36]	@ (80a66f4 <USB_ActivateSetup+0x44>)
 80a66ce:	4013      	ands	r3, r2
 80a66d0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80a66d2:	68fb      	ldr	r3, [r7, #12]
 80a66d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80a66d8:	685b      	ldr	r3, [r3, #4]
 80a66da:	68fa      	ldr	r2, [r7, #12]
 80a66dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80a66e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80a66e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80a66e6:	2300      	movs	r3, #0
}
 80a66e8:	4618      	mov	r0, r3
 80a66ea:	3714      	adds	r7, #20
 80a66ec:	46bd      	mov	sp, r7
 80a66ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a66f2:	4770      	bx	lr
 80a66f4:	fffff800 	.word	0xfffff800

080a66f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80a66f8:	b480      	push	{r7}
 80a66fa:	b087      	sub	sp, #28
 80a66fc:	af00      	add	r7, sp, #0
 80a66fe:	60f8      	str	r0, [r7, #12]
 80a6700:	460b      	mov	r3, r1
 80a6702:	607a      	str	r2, [r7, #4]
 80a6704:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a6706:	68fb      	ldr	r3, [r7, #12]
 80a6708:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80a670a:	68fb      	ldr	r3, [r7, #12]
 80a670c:	333c      	adds	r3, #60	@ 0x3c
 80a670e:	3304      	adds	r3, #4
 80a6710:	681b      	ldr	r3, [r3, #0]
 80a6712:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80a6714:	693b      	ldr	r3, [r7, #16]
 80a6716:	4a26      	ldr	r2, [pc, #152]	@ (80a67b0 <USB_EP0_OutStart+0xb8>)
 80a6718:	4293      	cmp	r3, r2
 80a671a:	d90a      	bls.n	80a6732 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80a671c:	697b      	ldr	r3, [r7, #20]
 80a671e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6722:	681b      	ldr	r3, [r3, #0]
 80a6724:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80a6728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80a672c:	d101      	bne.n	80a6732 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80a672e:	2300      	movs	r3, #0
 80a6730:	e037      	b.n	80a67a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80a6732:	697b      	ldr	r3, [r7, #20]
 80a6734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6738:	461a      	mov	r2, r3
 80a673a:	2300      	movs	r3, #0
 80a673c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80a673e:	697b      	ldr	r3, [r7, #20]
 80a6740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6744:	691b      	ldr	r3, [r3, #16]
 80a6746:	697a      	ldr	r2, [r7, #20]
 80a6748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a674c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80a6750:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80a6752:	697b      	ldr	r3, [r7, #20]
 80a6754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6758:	691b      	ldr	r3, [r3, #16]
 80a675a:	697a      	ldr	r2, [r7, #20]
 80a675c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6760:	f043 0318 	orr.w	r3, r3, #24
 80a6764:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80a6766:	697b      	ldr	r3, [r7, #20]
 80a6768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a676c:	691b      	ldr	r3, [r3, #16]
 80a676e:	697a      	ldr	r2, [r7, #20]
 80a6770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a6774:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80a6778:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80a677a:	7afb      	ldrb	r3, [r7, #11]
 80a677c:	2b01      	cmp	r3, #1
 80a677e:	d10f      	bne.n	80a67a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80a6780:	697b      	ldr	r3, [r7, #20]
 80a6782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6786:	461a      	mov	r2, r3
 80a6788:	687b      	ldr	r3, [r7, #4]
 80a678a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80a678c:	697b      	ldr	r3, [r7, #20]
 80a678e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80a6792:	681b      	ldr	r3, [r3, #0]
 80a6794:	697a      	ldr	r2, [r7, #20]
 80a6796:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80a679a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80a679e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80a67a0:	2300      	movs	r3, #0
}
 80a67a2:	4618      	mov	r0, r3
 80a67a4:	371c      	adds	r7, #28
 80a67a6:	46bd      	mov	sp, r7
 80a67a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a67ac:	4770      	bx	lr
 80a67ae:	bf00      	nop
 80a67b0:	4f54300a 	.word	0x4f54300a

080a67b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80a67b4:	b480      	push	{r7}
 80a67b6:	b085      	sub	sp, #20
 80a67b8:	af00      	add	r7, sp, #0
 80a67ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80a67bc:	2300      	movs	r3, #0
 80a67be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80a67c0:	68fb      	ldr	r3, [r7, #12]
 80a67c2:	3301      	adds	r3, #1
 80a67c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80a67c6:	68fb      	ldr	r3, [r7, #12]
 80a67c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80a67cc:	d901      	bls.n	80a67d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80a67ce:	2303      	movs	r3, #3
 80a67d0:	e01b      	b.n	80a680a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80a67d2:	687b      	ldr	r3, [r7, #4]
 80a67d4:	691b      	ldr	r3, [r3, #16]
 80a67d6:	2b00      	cmp	r3, #0
 80a67d8:	daf2      	bge.n	80a67c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80a67da:	2300      	movs	r3, #0
 80a67dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80a67de:	687b      	ldr	r3, [r7, #4]
 80a67e0:	691b      	ldr	r3, [r3, #16]
 80a67e2:	f043 0201 	orr.w	r2, r3, #1
 80a67e6:	687b      	ldr	r3, [r7, #4]
 80a67e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80a67ea:	68fb      	ldr	r3, [r7, #12]
 80a67ec:	3301      	adds	r3, #1
 80a67ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80a67f0:	68fb      	ldr	r3, [r7, #12]
 80a67f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80a67f6:	d901      	bls.n	80a67fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80a67f8:	2303      	movs	r3, #3
 80a67fa:	e006      	b.n	80a680a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80a67fc:	687b      	ldr	r3, [r7, #4]
 80a67fe:	691b      	ldr	r3, [r3, #16]
 80a6800:	f003 0301 	and.w	r3, r3, #1
 80a6804:	2b01      	cmp	r3, #1
 80a6806:	d0f0      	beq.n	80a67ea <USB_CoreReset+0x36>

  return HAL_OK;
 80a6808:	2300      	movs	r3, #0
}
 80a680a:	4618      	mov	r0, r3
 80a680c:	3714      	adds	r7, #20
 80a680e:	46bd      	mov	sp, r7
 80a6810:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a6814:	4770      	bx	lr
	...

080a6818 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80a6818:	b580      	push	{r7, lr}
 80a681a:	b084      	sub	sp, #16
 80a681c:	af00      	add	r7, sp, #0
 80a681e:	6078      	str	r0, [r7, #4]
 80a6820:	460b      	mov	r3, r1
 80a6822:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80a6824:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80a6828:	f002 fd3c 	bl	80a92a4 <USBD_static_malloc>
 80a682c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80a682e:	68fb      	ldr	r3, [r7, #12]
 80a6830:	2b00      	cmp	r3, #0
 80a6832:	d109      	bne.n	80a6848 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80a6834:	687b      	ldr	r3, [r7, #4]
 80a6836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a683a:	687b      	ldr	r3, [r7, #4]
 80a683c:	32b0      	adds	r2, #176	@ 0xb0
 80a683e:	2100      	movs	r1, #0
 80a6840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80a6844:	2302      	movs	r3, #2
 80a6846:	e0d4      	b.n	80a69f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80a6848:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80a684c:	2100      	movs	r1, #0
 80a684e:	68f8      	ldr	r0, [r7, #12]
 80a6850:	f002 fe83 	bl	80a955a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80a6854:	687b      	ldr	r3, [r7, #4]
 80a6856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a685a:	687b      	ldr	r3, [r7, #4]
 80a685c:	32b0      	adds	r2, #176	@ 0xb0
 80a685e:	68f9      	ldr	r1, [r7, #12]
 80a6860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80a6864:	687b      	ldr	r3, [r7, #4]
 80a6866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a686a:	687b      	ldr	r3, [r7, #4]
 80a686c:	32b0      	adds	r2, #176	@ 0xb0
 80a686e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80a6872:	687b      	ldr	r3, [r7, #4]
 80a6874:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80a6878:	687b      	ldr	r3, [r7, #4]
 80a687a:	7c1b      	ldrb	r3, [r3, #16]
 80a687c:	2b00      	cmp	r3, #0
 80a687e:	d138      	bne.n	80a68f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80a6880:	4b5e      	ldr	r3, [pc, #376]	@ (80a69fc <USBD_CDC_Init+0x1e4>)
 80a6882:	7819      	ldrb	r1, [r3, #0]
 80a6884:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80a6888:	2202      	movs	r2, #2
 80a688a:	6878      	ldr	r0, [r7, #4]
 80a688c:	f002 fbe7 	bl	80a905e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80a6890:	4b5a      	ldr	r3, [pc, #360]	@ (80a69fc <USBD_CDC_Init+0x1e4>)
 80a6892:	781b      	ldrb	r3, [r3, #0]
 80a6894:	f003 020f 	and.w	r2, r3, #15
 80a6898:	6879      	ldr	r1, [r7, #4]
 80a689a:	4613      	mov	r3, r2
 80a689c:	009b      	lsls	r3, r3, #2
 80a689e:	4413      	add	r3, r2
 80a68a0:	009b      	lsls	r3, r3, #2
 80a68a2:	440b      	add	r3, r1
 80a68a4:	3324      	adds	r3, #36	@ 0x24
 80a68a6:	2201      	movs	r2, #1
 80a68a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80a68aa:	4b55      	ldr	r3, [pc, #340]	@ (80a6a00 <USBD_CDC_Init+0x1e8>)
 80a68ac:	7819      	ldrb	r1, [r3, #0]
 80a68ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80a68b2:	2202      	movs	r2, #2
 80a68b4:	6878      	ldr	r0, [r7, #4]
 80a68b6:	f002 fbd2 	bl	80a905e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80a68ba:	4b51      	ldr	r3, [pc, #324]	@ (80a6a00 <USBD_CDC_Init+0x1e8>)
 80a68bc:	781b      	ldrb	r3, [r3, #0]
 80a68be:	f003 020f 	and.w	r2, r3, #15
 80a68c2:	6879      	ldr	r1, [r7, #4]
 80a68c4:	4613      	mov	r3, r2
 80a68c6:	009b      	lsls	r3, r3, #2
 80a68c8:	4413      	add	r3, r2
 80a68ca:	009b      	lsls	r3, r3, #2
 80a68cc:	440b      	add	r3, r1
 80a68ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80a68d2:	2201      	movs	r2, #1
 80a68d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80a68d6:	4b4b      	ldr	r3, [pc, #300]	@ (80a6a04 <USBD_CDC_Init+0x1ec>)
 80a68d8:	781b      	ldrb	r3, [r3, #0]
 80a68da:	f003 020f 	and.w	r2, r3, #15
 80a68de:	6879      	ldr	r1, [r7, #4]
 80a68e0:	4613      	mov	r3, r2
 80a68e2:	009b      	lsls	r3, r3, #2
 80a68e4:	4413      	add	r3, r2
 80a68e6:	009b      	lsls	r3, r3, #2
 80a68e8:	440b      	add	r3, r1
 80a68ea:	3326      	adds	r3, #38	@ 0x26
 80a68ec:	2210      	movs	r2, #16
 80a68ee:	801a      	strh	r2, [r3, #0]
 80a68f0:	e035      	b.n	80a695e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80a68f2:	4b42      	ldr	r3, [pc, #264]	@ (80a69fc <USBD_CDC_Init+0x1e4>)
 80a68f4:	7819      	ldrb	r1, [r3, #0]
 80a68f6:	2340      	movs	r3, #64	@ 0x40
 80a68f8:	2202      	movs	r2, #2
 80a68fa:	6878      	ldr	r0, [r7, #4]
 80a68fc:	f002 fbaf 	bl	80a905e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80a6900:	4b3e      	ldr	r3, [pc, #248]	@ (80a69fc <USBD_CDC_Init+0x1e4>)
 80a6902:	781b      	ldrb	r3, [r3, #0]
 80a6904:	f003 020f 	and.w	r2, r3, #15
 80a6908:	6879      	ldr	r1, [r7, #4]
 80a690a:	4613      	mov	r3, r2
 80a690c:	009b      	lsls	r3, r3, #2
 80a690e:	4413      	add	r3, r2
 80a6910:	009b      	lsls	r3, r3, #2
 80a6912:	440b      	add	r3, r1
 80a6914:	3324      	adds	r3, #36	@ 0x24
 80a6916:	2201      	movs	r2, #1
 80a6918:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80a691a:	4b39      	ldr	r3, [pc, #228]	@ (80a6a00 <USBD_CDC_Init+0x1e8>)
 80a691c:	7819      	ldrb	r1, [r3, #0]
 80a691e:	2340      	movs	r3, #64	@ 0x40
 80a6920:	2202      	movs	r2, #2
 80a6922:	6878      	ldr	r0, [r7, #4]
 80a6924:	f002 fb9b 	bl	80a905e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80a6928:	4b35      	ldr	r3, [pc, #212]	@ (80a6a00 <USBD_CDC_Init+0x1e8>)
 80a692a:	781b      	ldrb	r3, [r3, #0]
 80a692c:	f003 020f 	and.w	r2, r3, #15
 80a6930:	6879      	ldr	r1, [r7, #4]
 80a6932:	4613      	mov	r3, r2
 80a6934:	009b      	lsls	r3, r3, #2
 80a6936:	4413      	add	r3, r2
 80a6938:	009b      	lsls	r3, r3, #2
 80a693a:	440b      	add	r3, r1
 80a693c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80a6940:	2201      	movs	r2, #1
 80a6942:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80a6944:	4b2f      	ldr	r3, [pc, #188]	@ (80a6a04 <USBD_CDC_Init+0x1ec>)
 80a6946:	781b      	ldrb	r3, [r3, #0]
 80a6948:	f003 020f 	and.w	r2, r3, #15
 80a694c:	6879      	ldr	r1, [r7, #4]
 80a694e:	4613      	mov	r3, r2
 80a6950:	009b      	lsls	r3, r3, #2
 80a6952:	4413      	add	r3, r2
 80a6954:	009b      	lsls	r3, r3, #2
 80a6956:	440b      	add	r3, r1
 80a6958:	3326      	adds	r3, #38	@ 0x26
 80a695a:	2210      	movs	r2, #16
 80a695c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80a695e:	4b29      	ldr	r3, [pc, #164]	@ (80a6a04 <USBD_CDC_Init+0x1ec>)
 80a6960:	7819      	ldrb	r1, [r3, #0]
 80a6962:	2308      	movs	r3, #8
 80a6964:	2203      	movs	r2, #3
 80a6966:	6878      	ldr	r0, [r7, #4]
 80a6968:	f002 fb79 	bl	80a905e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80a696c:	4b25      	ldr	r3, [pc, #148]	@ (80a6a04 <USBD_CDC_Init+0x1ec>)
 80a696e:	781b      	ldrb	r3, [r3, #0]
 80a6970:	f003 020f 	and.w	r2, r3, #15
 80a6974:	6879      	ldr	r1, [r7, #4]
 80a6976:	4613      	mov	r3, r2
 80a6978:	009b      	lsls	r3, r3, #2
 80a697a:	4413      	add	r3, r2
 80a697c:	009b      	lsls	r3, r3, #2
 80a697e:	440b      	add	r3, r1
 80a6980:	3324      	adds	r3, #36	@ 0x24
 80a6982:	2201      	movs	r2, #1
 80a6984:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80a6986:	68fb      	ldr	r3, [r7, #12]
 80a6988:	2200      	movs	r2, #0
 80a698a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80a698e:	687b      	ldr	r3, [r7, #4]
 80a6990:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6994:	687a      	ldr	r2, [r7, #4]
 80a6996:	33b0      	adds	r3, #176	@ 0xb0
 80a6998:	009b      	lsls	r3, r3, #2
 80a699a:	4413      	add	r3, r2
 80a699c:	685b      	ldr	r3, [r3, #4]
 80a699e:	681b      	ldr	r3, [r3, #0]
 80a69a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80a69a2:	68fb      	ldr	r3, [r7, #12]
 80a69a4:	2200      	movs	r2, #0
 80a69a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80a69aa:	68fb      	ldr	r3, [r7, #12]
 80a69ac:	2200      	movs	r2, #0
 80a69ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80a69b2:	68fb      	ldr	r3, [r7, #12]
 80a69b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80a69b8:	2b00      	cmp	r3, #0
 80a69ba:	d101      	bne.n	80a69c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80a69bc:	2302      	movs	r3, #2
 80a69be:	e018      	b.n	80a69f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80a69c0:	687b      	ldr	r3, [r7, #4]
 80a69c2:	7c1b      	ldrb	r3, [r3, #16]
 80a69c4:	2b00      	cmp	r3, #0
 80a69c6:	d10a      	bne.n	80a69de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80a69c8:	4b0d      	ldr	r3, [pc, #52]	@ (80a6a00 <USBD_CDC_Init+0x1e8>)
 80a69ca:	7819      	ldrb	r1, [r3, #0]
 80a69cc:	68fb      	ldr	r3, [r7, #12]
 80a69ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80a69d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80a69d6:	6878      	ldr	r0, [r7, #4]
 80a69d8:	f002 fc30 	bl	80a923c <USBD_LL_PrepareReceive>
 80a69dc:	e008      	b.n	80a69f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80a69de:	4b08      	ldr	r3, [pc, #32]	@ (80a6a00 <USBD_CDC_Init+0x1e8>)
 80a69e0:	7819      	ldrb	r1, [r3, #0]
 80a69e2:	68fb      	ldr	r3, [r7, #12]
 80a69e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80a69e8:	2340      	movs	r3, #64	@ 0x40
 80a69ea:	6878      	ldr	r0, [r7, #4]
 80a69ec:	f002 fc26 	bl	80a923c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80a69f0:	2300      	movs	r3, #0
}
 80a69f2:	4618      	mov	r0, r3
 80a69f4:	3710      	adds	r7, #16
 80a69f6:	46bd      	mov	sp, r7
 80a69f8:	bd80      	pop	{r7, pc}
 80a69fa:	bf00      	nop
 80a69fc:	24000097 	.word	0x24000097
 80a6a00:	24000098 	.word	0x24000098
 80a6a04:	24000099 	.word	0x24000099

080a6a08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80a6a08:	b580      	push	{r7, lr}
 80a6a0a:	b082      	sub	sp, #8
 80a6a0c:	af00      	add	r7, sp, #0
 80a6a0e:	6078      	str	r0, [r7, #4]
 80a6a10:	460b      	mov	r3, r1
 80a6a12:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80a6a14:	4b3a      	ldr	r3, [pc, #232]	@ (80a6b00 <USBD_CDC_DeInit+0xf8>)
 80a6a16:	781b      	ldrb	r3, [r3, #0]
 80a6a18:	4619      	mov	r1, r3
 80a6a1a:	6878      	ldr	r0, [r7, #4]
 80a6a1c:	f002 fb45 	bl	80a90aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80a6a20:	4b37      	ldr	r3, [pc, #220]	@ (80a6b00 <USBD_CDC_DeInit+0xf8>)
 80a6a22:	781b      	ldrb	r3, [r3, #0]
 80a6a24:	f003 020f 	and.w	r2, r3, #15
 80a6a28:	6879      	ldr	r1, [r7, #4]
 80a6a2a:	4613      	mov	r3, r2
 80a6a2c:	009b      	lsls	r3, r3, #2
 80a6a2e:	4413      	add	r3, r2
 80a6a30:	009b      	lsls	r3, r3, #2
 80a6a32:	440b      	add	r3, r1
 80a6a34:	3324      	adds	r3, #36	@ 0x24
 80a6a36:	2200      	movs	r2, #0
 80a6a38:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80a6a3a:	4b32      	ldr	r3, [pc, #200]	@ (80a6b04 <USBD_CDC_DeInit+0xfc>)
 80a6a3c:	781b      	ldrb	r3, [r3, #0]
 80a6a3e:	4619      	mov	r1, r3
 80a6a40:	6878      	ldr	r0, [r7, #4]
 80a6a42:	f002 fb32 	bl	80a90aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80a6a46:	4b2f      	ldr	r3, [pc, #188]	@ (80a6b04 <USBD_CDC_DeInit+0xfc>)
 80a6a48:	781b      	ldrb	r3, [r3, #0]
 80a6a4a:	f003 020f 	and.w	r2, r3, #15
 80a6a4e:	6879      	ldr	r1, [r7, #4]
 80a6a50:	4613      	mov	r3, r2
 80a6a52:	009b      	lsls	r3, r3, #2
 80a6a54:	4413      	add	r3, r2
 80a6a56:	009b      	lsls	r3, r3, #2
 80a6a58:	440b      	add	r3, r1
 80a6a5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80a6a5e:	2200      	movs	r2, #0
 80a6a60:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80a6a62:	4b29      	ldr	r3, [pc, #164]	@ (80a6b08 <USBD_CDC_DeInit+0x100>)
 80a6a64:	781b      	ldrb	r3, [r3, #0]
 80a6a66:	4619      	mov	r1, r3
 80a6a68:	6878      	ldr	r0, [r7, #4]
 80a6a6a:	f002 fb1e 	bl	80a90aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80a6a6e:	4b26      	ldr	r3, [pc, #152]	@ (80a6b08 <USBD_CDC_DeInit+0x100>)
 80a6a70:	781b      	ldrb	r3, [r3, #0]
 80a6a72:	f003 020f 	and.w	r2, r3, #15
 80a6a76:	6879      	ldr	r1, [r7, #4]
 80a6a78:	4613      	mov	r3, r2
 80a6a7a:	009b      	lsls	r3, r3, #2
 80a6a7c:	4413      	add	r3, r2
 80a6a7e:	009b      	lsls	r3, r3, #2
 80a6a80:	440b      	add	r3, r1
 80a6a82:	3324      	adds	r3, #36	@ 0x24
 80a6a84:	2200      	movs	r2, #0
 80a6a86:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80a6a88:	4b1f      	ldr	r3, [pc, #124]	@ (80a6b08 <USBD_CDC_DeInit+0x100>)
 80a6a8a:	781b      	ldrb	r3, [r3, #0]
 80a6a8c:	f003 020f 	and.w	r2, r3, #15
 80a6a90:	6879      	ldr	r1, [r7, #4]
 80a6a92:	4613      	mov	r3, r2
 80a6a94:	009b      	lsls	r3, r3, #2
 80a6a96:	4413      	add	r3, r2
 80a6a98:	009b      	lsls	r3, r3, #2
 80a6a9a:	440b      	add	r3, r1
 80a6a9c:	3326      	adds	r3, #38	@ 0x26
 80a6a9e:	2200      	movs	r2, #0
 80a6aa0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80a6aa2:	687b      	ldr	r3, [r7, #4]
 80a6aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6aa8:	687b      	ldr	r3, [r7, #4]
 80a6aaa:	32b0      	adds	r2, #176	@ 0xb0
 80a6aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6ab0:	2b00      	cmp	r3, #0
 80a6ab2:	d01f      	beq.n	80a6af4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80a6ab4:	687b      	ldr	r3, [r7, #4]
 80a6ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6aba:	687a      	ldr	r2, [r7, #4]
 80a6abc:	33b0      	adds	r3, #176	@ 0xb0
 80a6abe:	009b      	lsls	r3, r3, #2
 80a6ac0:	4413      	add	r3, r2
 80a6ac2:	685b      	ldr	r3, [r3, #4]
 80a6ac4:	685b      	ldr	r3, [r3, #4]
 80a6ac6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80a6ac8:	687b      	ldr	r3, [r7, #4]
 80a6aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6ace:	687b      	ldr	r3, [r7, #4]
 80a6ad0:	32b0      	adds	r2, #176	@ 0xb0
 80a6ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6ad6:	4618      	mov	r0, r3
 80a6ad8:	f002 fbf2 	bl	80a92c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80a6adc:	687b      	ldr	r3, [r7, #4]
 80a6ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6ae2:	687b      	ldr	r3, [r7, #4]
 80a6ae4:	32b0      	adds	r2, #176	@ 0xb0
 80a6ae6:	2100      	movs	r1, #0
 80a6ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80a6aec:	687b      	ldr	r3, [r7, #4]
 80a6aee:	2200      	movs	r2, #0
 80a6af0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80a6af4:	2300      	movs	r3, #0
}
 80a6af6:	4618      	mov	r0, r3
 80a6af8:	3708      	adds	r7, #8
 80a6afa:	46bd      	mov	sp, r7
 80a6afc:	bd80      	pop	{r7, pc}
 80a6afe:	bf00      	nop
 80a6b00:	24000097 	.word	0x24000097
 80a6b04:	24000098 	.word	0x24000098
 80a6b08:	24000099 	.word	0x24000099

080a6b0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80a6b0c:	b580      	push	{r7, lr}
 80a6b0e:	b086      	sub	sp, #24
 80a6b10:	af00      	add	r7, sp, #0
 80a6b12:	6078      	str	r0, [r7, #4]
 80a6b14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80a6b16:	687b      	ldr	r3, [r7, #4]
 80a6b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6b1c:	687b      	ldr	r3, [r7, #4]
 80a6b1e:	32b0      	adds	r2, #176	@ 0xb0
 80a6b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6b24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80a6b26:	2300      	movs	r3, #0
 80a6b28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80a6b2a:	2300      	movs	r3, #0
 80a6b2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80a6b2e:	2300      	movs	r3, #0
 80a6b30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80a6b32:	693b      	ldr	r3, [r7, #16]
 80a6b34:	2b00      	cmp	r3, #0
 80a6b36:	d101      	bne.n	80a6b3c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80a6b38:	2303      	movs	r3, #3
 80a6b3a:	e0bf      	b.n	80a6cbc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80a6b3c:	683b      	ldr	r3, [r7, #0]
 80a6b3e:	781b      	ldrb	r3, [r3, #0]
 80a6b40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80a6b44:	2b00      	cmp	r3, #0
 80a6b46:	d050      	beq.n	80a6bea <USBD_CDC_Setup+0xde>
 80a6b48:	2b20      	cmp	r3, #32
 80a6b4a:	f040 80af 	bne.w	80a6cac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80a6b4e:	683b      	ldr	r3, [r7, #0]
 80a6b50:	88db      	ldrh	r3, [r3, #6]
 80a6b52:	2b00      	cmp	r3, #0
 80a6b54:	d03a      	beq.n	80a6bcc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80a6b56:	683b      	ldr	r3, [r7, #0]
 80a6b58:	781b      	ldrb	r3, [r3, #0]
 80a6b5a:	b25b      	sxtb	r3, r3
 80a6b5c:	2b00      	cmp	r3, #0
 80a6b5e:	da1b      	bge.n	80a6b98 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80a6b60:	687b      	ldr	r3, [r7, #4]
 80a6b62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6b66:	687a      	ldr	r2, [r7, #4]
 80a6b68:	33b0      	adds	r3, #176	@ 0xb0
 80a6b6a:	009b      	lsls	r3, r3, #2
 80a6b6c:	4413      	add	r3, r2
 80a6b6e:	685b      	ldr	r3, [r3, #4]
 80a6b70:	689b      	ldr	r3, [r3, #8]
 80a6b72:	683a      	ldr	r2, [r7, #0]
 80a6b74:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80a6b76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80a6b78:	683a      	ldr	r2, [r7, #0]
 80a6b7a:	88d2      	ldrh	r2, [r2, #6]
 80a6b7c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80a6b7e:	683b      	ldr	r3, [r7, #0]
 80a6b80:	88db      	ldrh	r3, [r3, #6]
 80a6b82:	2b07      	cmp	r3, #7
 80a6b84:	bf28      	it	cs
 80a6b86:	2307      	movcs	r3, #7
 80a6b88:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80a6b8a:	693b      	ldr	r3, [r7, #16]
 80a6b8c:	89fa      	ldrh	r2, [r7, #14]
 80a6b8e:	4619      	mov	r1, r3
 80a6b90:	6878      	ldr	r0, [r7, #4]
 80a6b92:	f001 fd7d 	bl	80a8690 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80a6b96:	e090      	b.n	80a6cba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80a6b98:	683b      	ldr	r3, [r7, #0]
 80a6b9a:	785a      	ldrb	r2, [r3, #1]
 80a6b9c:	693b      	ldr	r3, [r7, #16]
 80a6b9e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80a6ba2:	683b      	ldr	r3, [r7, #0]
 80a6ba4:	88db      	ldrh	r3, [r3, #6]
 80a6ba6:	2b3f      	cmp	r3, #63	@ 0x3f
 80a6ba8:	d803      	bhi.n	80a6bb2 <USBD_CDC_Setup+0xa6>
 80a6baa:	683b      	ldr	r3, [r7, #0]
 80a6bac:	88db      	ldrh	r3, [r3, #6]
 80a6bae:	b2da      	uxtb	r2, r3
 80a6bb0:	e000      	b.n	80a6bb4 <USBD_CDC_Setup+0xa8>
 80a6bb2:	2240      	movs	r2, #64	@ 0x40
 80a6bb4:	693b      	ldr	r3, [r7, #16]
 80a6bb6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80a6bba:	6939      	ldr	r1, [r7, #16]
 80a6bbc:	693b      	ldr	r3, [r7, #16]
 80a6bbe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80a6bc2:	461a      	mov	r2, r3
 80a6bc4:	6878      	ldr	r0, [r7, #4]
 80a6bc6:	f001 fd8f 	bl	80a86e8 <USBD_CtlPrepareRx>
      break;
 80a6bca:	e076      	b.n	80a6cba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80a6bcc:	687b      	ldr	r3, [r7, #4]
 80a6bce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6bd2:	687a      	ldr	r2, [r7, #4]
 80a6bd4:	33b0      	adds	r3, #176	@ 0xb0
 80a6bd6:	009b      	lsls	r3, r3, #2
 80a6bd8:	4413      	add	r3, r2
 80a6bda:	685b      	ldr	r3, [r3, #4]
 80a6bdc:	689b      	ldr	r3, [r3, #8]
 80a6bde:	683a      	ldr	r2, [r7, #0]
 80a6be0:	7850      	ldrb	r0, [r2, #1]
 80a6be2:	2200      	movs	r2, #0
 80a6be4:	6839      	ldr	r1, [r7, #0]
 80a6be6:	4798      	blx	r3
      break;
 80a6be8:	e067      	b.n	80a6cba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80a6bea:	683b      	ldr	r3, [r7, #0]
 80a6bec:	785b      	ldrb	r3, [r3, #1]
 80a6bee:	2b0b      	cmp	r3, #11
 80a6bf0:	d851      	bhi.n	80a6c96 <USBD_CDC_Setup+0x18a>
 80a6bf2:	a201      	add	r2, pc, #4	@ (adr r2, 80a6bf8 <USBD_CDC_Setup+0xec>)
 80a6bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a6bf8:	080a6c29 	.word	0x080a6c29
 80a6bfc:	080a6ca5 	.word	0x080a6ca5
 80a6c00:	080a6c97 	.word	0x080a6c97
 80a6c04:	080a6c97 	.word	0x080a6c97
 80a6c08:	080a6c97 	.word	0x080a6c97
 80a6c0c:	080a6c97 	.word	0x080a6c97
 80a6c10:	080a6c97 	.word	0x080a6c97
 80a6c14:	080a6c97 	.word	0x080a6c97
 80a6c18:	080a6c97 	.word	0x080a6c97
 80a6c1c:	080a6c97 	.word	0x080a6c97
 80a6c20:	080a6c53 	.word	0x080a6c53
 80a6c24:	080a6c7d 	.word	0x080a6c7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a6c28:	687b      	ldr	r3, [r7, #4]
 80a6c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a6c2e:	b2db      	uxtb	r3, r3
 80a6c30:	2b03      	cmp	r3, #3
 80a6c32:	d107      	bne.n	80a6c44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80a6c34:	f107 030a 	add.w	r3, r7, #10
 80a6c38:	2202      	movs	r2, #2
 80a6c3a:	4619      	mov	r1, r3
 80a6c3c:	6878      	ldr	r0, [r7, #4]
 80a6c3e:	f001 fd27 	bl	80a8690 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80a6c42:	e032      	b.n	80a6caa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80a6c44:	6839      	ldr	r1, [r7, #0]
 80a6c46:	6878      	ldr	r0, [r7, #4]
 80a6c48:	f001 fca5 	bl	80a8596 <USBD_CtlError>
            ret = USBD_FAIL;
 80a6c4c:	2303      	movs	r3, #3
 80a6c4e:	75fb      	strb	r3, [r7, #23]
          break;
 80a6c50:	e02b      	b.n	80a6caa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a6c52:	687b      	ldr	r3, [r7, #4]
 80a6c54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a6c58:	b2db      	uxtb	r3, r3
 80a6c5a:	2b03      	cmp	r3, #3
 80a6c5c:	d107      	bne.n	80a6c6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80a6c5e:	f107 030d 	add.w	r3, r7, #13
 80a6c62:	2201      	movs	r2, #1
 80a6c64:	4619      	mov	r1, r3
 80a6c66:	6878      	ldr	r0, [r7, #4]
 80a6c68:	f001 fd12 	bl	80a8690 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80a6c6c:	e01d      	b.n	80a6caa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80a6c6e:	6839      	ldr	r1, [r7, #0]
 80a6c70:	6878      	ldr	r0, [r7, #4]
 80a6c72:	f001 fc90 	bl	80a8596 <USBD_CtlError>
            ret = USBD_FAIL;
 80a6c76:	2303      	movs	r3, #3
 80a6c78:	75fb      	strb	r3, [r7, #23]
          break;
 80a6c7a:	e016      	b.n	80a6caa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80a6c7c:	687b      	ldr	r3, [r7, #4]
 80a6c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a6c82:	b2db      	uxtb	r3, r3
 80a6c84:	2b03      	cmp	r3, #3
 80a6c86:	d00f      	beq.n	80a6ca8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80a6c88:	6839      	ldr	r1, [r7, #0]
 80a6c8a:	6878      	ldr	r0, [r7, #4]
 80a6c8c:	f001 fc83 	bl	80a8596 <USBD_CtlError>
            ret = USBD_FAIL;
 80a6c90:	2303      	movs	r3, #3
 80a6c92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80a6c94:	e008      	b.n	80a6ca8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80a6c96:	6839      	ldr	r1, [r7, #0]
 80a6c98:	6878      	ldr	r0, [r7, #4]
 80a6c9a:	f001 fc7c 	bl	80a8596 <USBD_CtlError>
          ret = USBD_FAIL;
 80a6c9e:	2303      	movs	r3, #3
 80a6ca0:	75fb      	strb	r3, [r7, #23]
          break;
 80a6ca2:	e002      	b.n	80a6caa <USBD_CDC_Setup+0x19e>
          break;
 80a6ca4:	bf00      	nop
 80a6ca6:	e008      	b.n	80a6cba <USBD_CDC_Setup+0x1ae>
          break;
 80a6ca8:	bf00      	nop
      }
      break;
 80a6caa:	e006      	b.n	80a6cba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80a6cac:	6839      	ldr	r1, [r7, #0]
 80a6cae:	6878      	ldr	r0, [r7, #4]
 80a6cb0:	f001 fc71 	bl	80a8596 <USBD_CtlError>
      ret = USBD_FAIL;
 80a6cb4:	2303      	movs	r3, #3
 80a6cb6:	75fb      	strb	r3, [r7, #23]
      break;
 80a6cb8:	bf00      	nop
  }

  return (uint8_t)ret;
 80a6cba:	7dfb      	ldrb	r3, [r7, #23]
}
 80a6cbc:	4618      	mov	r0, r3
 80a6cbe:	3718      	adds	r7, #24
 80a6cc0:	46bd      	mov	sp, r7
 80a6cc2:	bd80      	pop	{r7, pc}

080a6cc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80a6cc4:	b580      	push	{r7, lr}
 80a6cc6:	b084      	sub	sp, #16
 80a6cc8:	af00      	add	r7, sp, #0
 80a6cca:	6078      	str	r0, [r7, #4]
 80a6ccc:	460b      	mov	r3, r1
 80a6cce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80a6cd0:	687b      	ldr	r3, [r7, #4]
 80a6cd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80a6cd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80a6cd8:	687b      	ldr	r3, [r7, #4]
 80a6cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6cde:	687b      	ldr	r3, [r7, #4]
 80a6ce0:	32b0      	adds	r2, #176	@ 0xb0
 80a6ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6ce6:	2b00      	cmp	r3, #0
 80a6ce8:	d101      	bne.n	80a6cee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80a6cea:	2303      	movs	r3, #3
 80a6cec:	e065      	b.n	80a6dba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80a6cee:	687b      	ldr	r3, [r7, #4]
 80a6cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6cf4:	687b      	ldr	r3, [r7, #4]
 80a6cf6:	32b0      	adds	r2, #176	@ 0xb0
 80a6cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6cfc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80a6cfe:	78fb      	ldrb	r3, [r7, #3]
 80a6d00:	f003 020f 	and.w	r2, r3, #15
 80a6d04:	6879      	ldr	r1, [r7, #4]
 80a6d06:	4613      	mov	r3, r2
 80a6d08:	009b      	lsls	r3, r3, #2
 80a6d0a:	4413      	add	r3, r2
 80a6d0c:	009b      	lsls	r3, r3, #2
 80a6d0e:	440b      	add	r3, r1
 80a6d10:	3318      	adds	r3, #24
 80a6d12:	681b      	ldr	r3, [r3, #0]
 80a6d14:	2b00      	cmp	r3, #0
 80a6d16:	d02f      	beq.n	80a6d78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80a6d18:	78fb      	ldrb	r3, [r7, #3]
 80a6d1a:	f003 020f 	and.w	r2, r3, #15
 80a6d1e:	6879      	ldr	r1, [r7, #4]
 80a6d20:	4613      	mov	r3, r2
 80a6d22:	009b      	lsls	r3, r3, #2
 80a6d24:	4413      	add	r3, r2
 80a6d26:	009b      	lsls	r3, r3, #2
 80a6d28:	440b      	add	r3, r1
 80a6d2a:	3318      	adds	r3, #24
 80a6d2c:	681a      	ldr	r2, [r3, #0]
 80a6d2e:	78fb      	ldrb	r3, [r7, #3]
 80a6d30:	f003 010f 	and.w	r1, r3, #15
 80a6d34:	68f8      	ldr	r0, [r7, #12]
 80a6d36:	460b      	mov	r3, r1
 80a6d38:	00db      	lsls	r3, r3, #3
 80a6d3a:	440b      	add	r3, r1
 80a6d3c:	009b      	lsls	r3, r3, #2
 80a6d3e:	4403      	add	r3, r0
 80a6d40:	331c      	adds	r3, #28
 80a6d42:	681b      	ldr	r3, [r3, #0]
 80a6d44:	fbb2 f1f3 	udiv	r1, r2, r3
 80a6d48:	fb01 f303 	mul.w	r3, r1, r3
 80a6d4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80a6d4e:	2b00      	cmp	r3, #0
 80a6d50:	d112      	bne.n	80a6d78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80a6d52:	78fb      	ldrb	r3, [r7, #3]
 80a6d54:	f003 020f 	and.w	r2, r3, #15
 80a6d58:	6879      	ldr	r1, [r7, #4]
 80a6d5a:	4613      	mov	r3, r2
 80a6d5c:	009b      	lsls	r3, r3, #2
 80a6d5e:	4413      	add	r3, r2
 80a6d60:	009b      	lsls	r3, r3, #2
 80a6d62:	440b      	add	r3, r1
 80a6d64:	3318      	adds	r3, #24
 80a6d66:	2200      	movs	r2, #0
 80a6d68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80a6d6a:	78f9      	ldrb	r1, [r7, #3]
 80a6d6c:	2300      	movs	r3, #0
 80a6d6e:	2200      	movs	r2, #0
 80a6d70:	6878      	ldr	r0, [r7, #4]
 80a6d72:	f002 fa42 	bl	80a91fa <USBD_LL_Transmit>
 80a6d76:	e01f      	b.n	80a6db8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80a6d78:	68bb      	ldr	r3, [r7, #8]
 80a6d7a:	2200      	movs	r2, #0
 80a6d7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80a6d80:	687b      	ldr	r3, [r7, #4]
 80a6d82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6d86:	687a      	ldr	r2, [r7, #4]
 80a6d88:	33b0      	adds	r3, #176	@ 0xb0
 80a6d8a:	009b      	lsls	r3, r3, #2
 80a6d8c:	4413      	add	r3, r2
 80a6d8e:	685b      	ldr	r3, [r3, #4]
 80a6d90:	691b      	ldr	r3, [r3, #16]
 80a6d92:	2b00      	cmp	r3, #0
 80a6d94:	d010      	beq.n	80a6db8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80a6d96:	687b      	ldr	r3, [r7, #4]
 80a6d98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6d9c:	687a      	ldr	r2, [r7, #4]
 80a6d9e:	33b0      	adds	r3, #176	@ 0xb0
 80a6da0:	009b      	lsls	r3, r3, #2
 80a6da2:	4413      	add	r3, r2
 80a6da4:	685b      	ldr	r3, [r3, #4]
 80a6da6:	691b      	ldr	r3, [r3, #16]
 80a6da8:	68ba      	ldr	r2, [r7, #8]
 80a6daa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80a6dae:	68ba      	ldr	r2, [r7, #8]
 80a6db0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80a6db4:	78fa      	ldrb	r2, [r7, #3]
 80a6db6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80a6db8:	2300      	movs	r3, #0
}
 80a6dba:	4618      	mov	r0, r3
 80a6dbc:	3710      	adds	r7, #16
 80a6dbe:	46bd      	mov	sp, r7
 80a6dc0:	bd80      	pop	{r7, pc}

080a6dc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80a6dc2:	b580      	push	{r7, lr}
 80a6dc4:	b084      	sub	sp, #16
 80a6dc6:	af00      	add	r7, sp, #0
 80a6dc8:	6078      	str	r0, [r7, #4]
 80a6dca:	460b      	mov	r3, r1
 80a6dcc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80a6dce:	687b      	ldr	r3, [r7, #4]
 80a6dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6dd4:	687b      	ldr	r3, [r7, #4]
 80a6dd6:	32b0      	adds	r2, #176	@ 0xb0
 80a6dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6ddc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80a6dde:	687b      	ldr	r3, [r7, #4]
 80a6de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6de4:	687b      	ldr	r3, [r7, #4]
 80a6de6:	32b0      	adds	r2, #176	@ 0xb0
 80a6de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6dec:	2b00      	cmp	r3, #0
 80a6dee:	d101      	bne.n	80a6df4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80a6df0:	2303      	movs	r3, #3
 80a6df2:	e01a      	b.n	80a6e2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80a6df4:	78fb      	ldrb	r3, [r7, #3]
 80a6df6:	4619      	mov	r1, r3
 80a6df8:	6878      	ldr	r0, [r7, #4]
 80a6dfa:	f002 fa40 	bl	80a927e <USBD_LL_GetRxDataSize>
 80a6dfe:	4602      	mov	r2, r0
 80a6e00:	68fb      	ldr	r3, [r7, #12]
 80a6e02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80a6e06:	687b      	ldr	r3, [r7, #4]
 80a6e08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6e0c:	687a      	ldr	r2, [r7, #4]
 80a6e0e:	33b0      	adds	r3, #176	@ 0xb0
 80a6e10:	009b      	lsls	r3, r3, #2
 80a6e12:	4413      	add	r3, r2
 80a6e14:	685b      	ldr	r3, [r3, #4]
 80a6e16:	68db      	ldr	r3, [r3, #12]
 80a6e18:	68fa      	ldr	r2, [r7, #12]
 80a6e1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80a6e1e:	68fa      	ldr	r2, [r7, #12]
 80a6e20:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80a6e24:	4611      	mov	r1, r2
 80a6e26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80a6e28:	2300      	movs	r3, #0
}
 80a6e2a:	4618      	mov	r0, r3
 80a6e2c:	3710      	adds	r7, #16
 80a6e2e:	46bd      	mov	sp, r7
 80a6e30:	bd80      	pop	{r7, pc}

080a6e32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80a6e32:	b580      	push	{r7, lr}
 80a6e34:	b084      	sub	sp, #16
 80a6e36:	af00      	add	r7, sp, #0
 80a6e38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80a6e3a:	687b      	ldr	r3, [r7, #4]
 80a6e3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a6e40:	687b      	ldr	r3, [r7, #4]
 80a6e42:	32b0      	adds	r2, #176	@ 0xb0
 80a6e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6e48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80a6e4a:	68fb      	ldr	r3, [r7, #12]
 80a6e4c:	2b00      	cmp	r3, #0
 80a6e4e:	d101      	bne.n	80a6e54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80a6e50:	2303      	movs	r3, #3
 80a6e52:	e024      	b.n	80a6e9e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80a6e54:	687b      	ldr	r3, [r7, #4]
 80a6e56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6e5a:	687a      	ldr	r2, [r7, #4]
 80a6e5c:	33b0      	adds	r3, #176	@ 0xb0
 80a6e5e:	009b      	lsls	r3, r3, #2
 80a6e60:	4413      	add	r3, r2
 80a6e62:	685b      	ldr	r3, [r3, #4]
 80a6e64:	2b00      	cmp	r3, #0
 80a6e66:	d019      	beq.n	80a6e9c <USBD_CDC_EP0_RxReady+0x6a>
 80a6e68:	68fb      	ldr	r3, [r7, #12]
 80a6e6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80a6e6e:	2bff      	cmp	r3, #255	@ 0xff
 80a6e70:	d014      	beq.n	80a6e9c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80a6e72:	687b      	ldr	r3, [r7, #4]
 80a6e74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a6e78:	687a      	ldr	r2, [r7, #4]
 80a6e7a:	33b0      	adds	r3, #176	@ 0xb0
 80a6e7c:	009b      	lsls	r3, r3, #2
 80a6e7e:	4413      	add	r3, r2
 80a6e80:	685b      	ldr	r3, [r3, #4]
 80a6e82:	689b      	ldr	r3, [r3, #8]
 80a6e84:	68fa      	ldr	r2, [r7, #12]
 80a6e86:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80a6e8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80a6e8c:	68fa      	ldr	r2, [r7, #12]
 80a6e8e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80a6e92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80a6e94:	68fb      	ldr	r3, [r7, #12]
 80a6e96:	22ff      	movs	r2, #255	@ 0xff
 80a6e98:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80a6e9c:	2300      	movs	r3, #0
}
 80a6e9e:	4618      	mov	r0, r3
 80a6ea0:	3710      	adds	r7, #16
 80a6ea2:	46bd      	mov	sp, r7
 80a6ea4:	bd80      	pop	{r7, pc}
	...

080a6ea8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80a6ea8:	b580      	push	{r7, lr}
 80a6eaa:	b086      	sub	sp, #24
 80a6eac:	af00      	add	r7, sp, #0
 80a6eae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80a6eb0:	2182      	movs	r1, #130	@ 0x82
 80a6eb2:	4818      	ldr	r0, [pc, #96]	@ (80a6f14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80a6eb4:	f000 fd0f 	bl	80a78d6 <USBD_GetEpDesc>
 80a6eb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80a6eba:	2101      	movs	r1, #1
 80a6ebc:	4815      	ldr	r0, [pc, #84]	@ (80a6f14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80a6ebe:	f000 fd0a 	bl	80a78d6 <USBD_GetEpDesc>
 80a6ec2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80a6ec4:	2181      	movs	r1, #129	@ 0x81
 80a6ec6:	4813      	ldr	r0, [pc, #76]	@ (80a6f14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80a6ec8:	f000 fd05 	bl	80a78d6 <USBD_GetEpDesc>
 80a6ecc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80a6ece:	697b      	ldr	r3, [r7, #20]
 80a6ed0:	2b00      	cmp	r3, #0
 80a6ed2:	d002      	beq.n	80a6eda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80a6ed4:	697b      	ldr	r3, [r7, #20]
 80a6ed6:	2210      	movs	r2, #16
 80a6ed8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80a6eda:	693b      	ldr	r3, [r7, #16]
 80a6edc:	2b00      	cmp	r3, #0
 80a6ede:	d006      	beq.n	80a6eee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80a6ee0:	693b      	ldr	r3, [r7, #16]
 80a6ee2:	2200      	movs	r2, #0
 80a6ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80a6ee8:	711a      	strb	r2, [r3, #4]
 80a6eea:	2200      	movs	r2, #0
 80a6eec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80a6eee:	68fb      	ldr	r3, [r7, #12]
 80a6ef0:	2b00      	cmp	r3, #0
 80a6ef2:	d006      	beq.n	80a6f02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80a6ef4:	68fb      	ldr	r3, [r7, #12]
 80a6ef6:	2200      	movs	r2, #0
 80a6ef8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80a6efc:	711a      	strb	r2, [r3, #4]
 80a6efe:	2200      	movs	r2, #0
 80a6f00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80a6f02:	687b      	ldr	r3, [r7, #4]
 80a6f04:	2243      	movs	r2, #67	@ 0x43
 80a6f06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80a6f08:	4b02      	ldr	r3, [pc, #8]	@ (80a6f14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80a6f0a:	4618      	mov	r0, r3
 80a6f0c:	3718      	adds	r7, #24
 80a6f0e:	46bd      	mov	sp, r7
 80a6f10:	bd80      	pop	{r7, pc}
 80a6f12:	bf00      	nop
 80a6f14:	24000054 	.word	0x24000054

080a6f18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80a6f18:	b580      	push	{r7, lr}
 80a6f1a:	b086      	sub	sp, #24
 80a6f1c:	af00      	add	r7, sp, #0
 80a6f1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80a6f20:	2182      	movs	r1, #130	@ 0x82
 80a6f22:	4818      	ldr	r0, [pc, #96]	@ (80a6f84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80a6f24:	f000 fcd7 	bl	80a78d6 <USBD_GetEpDesc>
 80a6f28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80a6f2a:	2101      	movs	r1, #1
 80a6f2c:	4815      	ldr	r0, [pc, #84]	@ (80a6f84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80a6f2e:	f000 fcd2 	bl	80a78d6 <USBD_GetEpDesc>
 80a6f32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80a6f34:	2181      	movs	r1, #129	@ 0x81
 80a6f36:	4813      	ldr	r0, [pc, #76]	@ (80a6f84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80a6f38:	f000 fccd 	bl	80a78d6 <USBD_GetEpDesc>
 80a6f3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80a6f3e:	697b      	ldr	r3, [r7, #20]
 80a6f40:	2b00      	cmp	r3, #0
 80a6f42:	d002      	beq.n	80a6f4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80a6f44:	697b      	ldr	r3, [r7, #20]
 80a6f46:	2210      	movs	r2, #16
 80a6f48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80a6f4a:	693b      	ldr	r3, [r7, #16]
 80a6f4c:	2b00      	cmp	r3, #0
 80a6f4e:	d006      	beq.n	80a6f5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80a6f50:	693b      	ldr	r3, [r7, #16]
 80a6f52:	2200      	movs	r2, #0
 80a6f54:	711a      	strb	r2, [r3, #4]
 80a6f56:	2200      	movs	r2, #0
 80a6f58:	f042 0202 	orr.w	r2, r2, #2
 80a6f5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80a6f5e:	68fb      	ldr	r3, [r7, #12]
 80a6f60:	2b00      	cmp	r3, #0
 80a6f62:	d006      	beq.n	80a6f72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80a6f64:	68fb      	ldr	r3, [r7, #12]
 80a6f66:	2200      	movs	r2, #0
 80a6f68:	711a      	strb	r2, [r3, #4]
 80a6f6a:	2200      	movs	r2, #0
 80a6f6c:	f042 0202 	orr.w	r2, r2, #2
 80a6f70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80a6f72:	687b      	ldr	r3, [r7, #4]
 80a6f74:	2243      	movs	r2, #67	@ 0x43
 80a6f76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80a6f78:	4b02      	ldr	r3, [pc, #8]	@ (80a6f84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80a6f7a:	4618      	mov	r0, r3
 80a6f7c:	3718      	adds	r7, #24
 80a6f7e:	46bd      	mov	sp, r7
 80a6f80:	bd80      	pop	{r7, pc}
 80a6f82:	bf00      	nop
 80a6f84:	24000054 	.word	0x24000054

080a6f88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80a6f88:	b580      	push	{r7, lr}
 80a6f8a:	b086      	sub	sp, #24
 80a6f8c:	af00      	add	r7, sp, #0
 80a6f8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80a6f90:	2182      	movs	r1, #130	@ 0x82
 80a6f92:	4818      	ldr	r0, [pc, #96]	@ (80a6ff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80a6f94:	f000 fc9f 	bl	80a78d6 <USBD_GetEpDesc>
 80a6f98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80a6f9a:	2101      	movs	r1, #1
 80a6f9c:	4815      	ldr	r0, [pc, #84]	@ (80a6ff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80a6f9e:	f000 fc9a 	bl	80a78d6 <USBD_GetEpDesc>
 80a6fa2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80a6fa4:	2181      	movs	r1, #129	@ 0x81
 80a6fa6:	4813      	ldr	r0, [pc, #76]	@ (80a6ff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80a6fa8:	f000 fc95 	bl	80a78d6 <USBD_GetEpDesc>
 80a6fac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80a6fae:	697b      	ldr	r3, [r7, #20]
 80a6fb0:	2b00      	cmp	r3, #0
 80a6fb2:	d002      	beq.n	80a6fba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80a6fb4:	697b      	ldr	r3, [r7, #20]
 80a6fb6:	2210      	movs	r2, #16
 80a6fb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80a6fba:	693b      	ldr	r3, [r7, #16]
 80a6fbc:	2b00      	cmp	r3, #0
 80a6fbe:	d006      	beq.n	80a6fce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80a6fc0:	693b      	ldr	r3, [r7, #16]
 80a6fc2:	2200      	movs	r2, #0
 80a6fc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80a6fc8:	711a      	strb	r2, [r3, #4]
 80a6fca:	2200      	movs	r2, #0
 80a6fcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80a6fce:	68fb      	ldr	r3, [r7, #12]
 80a6fd0:	2b00      	cmp	r3, #0
 80a6fd2:	d006      	beq.n	80a6fe2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80a6fd4:	68fb      	ldr	r3, [r7, #12]
 80a6fd6:	2200      	movs	r2, #0
 80a6fd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80a6fdc:	711a      	strb	r2, [r3, #4]
 80a6fde:	2200      	movs	r2, #0
 80a6fe0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80a6fe2:	687b      	ldr	r3, [r7, #4]
 80a6fe4:	2243      	movs	r2, #67	@ 0x43
 80a6fe6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80a6fe8:	4b02      	ldr	r3, [pc, #8]	@ (80a6ff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80a6fea:	4618      	mov	r0, r3
 80a6fec:	3718      	adds	r7, #24
 80a6fee:	46bd      	mov	sp, r7
 80a6ff0:	bd80      	pop	{r7, pc}
 80a6ff2:	bf00      	nop
 80a6ff4:	24000054 	.word	0x24000054

080a6ff8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80a6ff8:	b480      	push	{r7}
 80a6ffa:	b083      	sub	sp, #12
 80a6ffc:	af00      	add	r7, sp, #0
 80a6ffe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80a7000:	687b      	ldr	r3, [r7, #4]
 80a7002:	220a      	movs	r2, #10
 80a7004:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80a7006:	4b03      	ldr	r3, [pc, #12]	@ (80a7014 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80a7008:	4618      	mov	r0, r3
 80a700a:	370c      	adds	r7, #12
 80a700c:	46bd      	mov	sp, r7
 80a700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a7012:	4770      	bx	lr
 80a7014:	24000010 	.word	0x24000010

080a7018 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80a7018:	b480      	push	{r7}
 80a701a:	b083      	sub	sp, #12
 80a701c:	af00      	add	r7, sp, #0
 80a701e:	6078      	str	r0, [r7, #4]
 80a7020:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80a7022:	683b      	ldr	r3, [r7, #0]
 80a7024:	2b00      	cmp	r3, #0
 80a7026:	d101      	bne.n	80a702c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80a7028:	2303      	movs	r3, #3
 80a702a:	e009      	b.n	80a7040 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80a702c:	687b      	ldr	r3, [r7, #4]
 80a702e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80a7032:	687a      	ldr	r2, [r7, #4]
 80a7034:	33b0      	adds	r3, #176	@ 0xb0
 80a7036:	009b      	lsls	r3, r3, #2
 80a7038:	4413      	add	r3, r2
 80a703a:	683a      	ldr	r2, [r7, #0]
 80a703c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80a703e:	2300      	movs	r3, #0
}
 80a7040:	4618      	mov	r0, r3
 80a7042:	370c      	adds	r7, #12
 80a7044:	46bd      	mov	sp, r7
 80a7046:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a704a:	4770      	bx	lr

080a704c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80a704c:	b480      	push	{r7}
 80a704e:	b087      	sub	sp, #28
 80a7050:	af00      	add	r7, sp, #0
 80a7052:	60f8      	str	r0, [r7, #12]
 80a7054:	60b9      	str	r1, [r7, #8]
 80a7056:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80a7058:	68fb      	ldr	r3, [r7, #12]
 80a705a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a705e:	68fb      	ldr	r3, [r7, #12]
 80a7060:	32b0      	adds	r2, #176	@ 0xb0
 80a7062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7066:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80a7068:	697b      	ldr	r3, [r7, #20]
 80a706a:	2b00      	cmp	r3, #0
 80a706c:	d101      	bne.n	80a7072 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80a706e:	2303      	movs	r3, #3
 80a7070:	e008      	b.n	80a7084 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80a7072:	697b      	ldr	r3, [r7, #20]
 80a7074:	68ba      	ldr	r2, [r7, #8]
 80a7076:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80a707a:	697b      	ldr	r3, [r7, #20]
 80a707c:	687a      	ldr	r2, [r7, #4]
 80a707e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80a7082:	2300      	movs	r3, #0
}
 80a7084:	4618      	mov	r0, r3
 80a7086:	371c      	adds	r7, #28
 80a7088:	46bd      	mov	sp, r7
 80a708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a708e:	4770      	bx	lr

080a7090 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80a7090:	b480      	push	{r7}
 80a7092:	b085      	sub	sp, #20
 80a7094:	af00      	add	r7, sp, #0
 80a7096:	6078      	str	r0, [r7, #4]
 80a7098:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80a709a:	687b      	ldr	r3, [r7, #4]
 80a709c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a70a0:	687b      	ldr	r3, [r7, #4]
 80a70a2:	32b0      	adds	r2, #176	@ 0xb0
 80a70a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a70a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80a70aa:	68fb      	ldr	r3, [r7, #12]
 80a70ac:	2b00      	cmp	r3, #0
 80a70ae:	d101      	bne.n	80a70b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80a70b0:	2303      	movs	r3, #3
 80a70b2:	e004      	b.n	80a70be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80a70b4:	68fb      	ldr	r3, [r7, #12]
 80a70b6:	683a      	ldr	r2, [r7, #0]
 80a70b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80a70bc:	2300      	movs	r3, #0
}
 80a70be:	4618      	mov	r0, r3
 80a70c0:	3714      	adds	r7, #20
 80a70c2:	46bd      	mov	sp, r7
 80a70c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a70c8:	4770      	bx	lr
	...

080a70cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80a70cc:	b580      	push	{r7, lr}
 80a70ce:	b084      	sub	sp, #16
 80a70d0:	af00      	add	r7, sp, #0
 80a70d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80a70d4:	687b      	ldr	r3, [r7, #4]
 80a70d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a70da:	687b      	ldr	r3, [r7, #4]
 80a70dc:	32b0      	adds	r2, #176	@ 0xb0
 80a70de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a70e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80a70e4:	687b      	ldr	r3, [r7, #4]
 80a70e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a70ea:	687b      	ldr	r3, [r7, #4]
 80a70ec:	32b0      	adds	r2, #176	@ 0xb0
 80a70ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a70f2:	2b00      	cmp	r3, #0
 80a70f4:	d101      	bne.n	80a70fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80a70f6:	2303      	movs	r3, #3
 80a70f8:	e018      	b.n	80a712c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80a70fa:	687b      	ldr	r3, [r7, #4]
 80a70fc:	7c1b      	ldrb	r3, [r3, #16]
 80a70fe:	2b00      	cmp	r3, #0
 80a7100:	d10a      	bne.n	80a7118 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80a7102:	4b0c      	ldr	r3, [pc, #48]	@ (80a7134 <USBD_CDC_ReceivePacket+0x68>)
 80a7104:	7819      	ldrb	r1, [r3, #0]
 80a7106:	68fb      	ldr	r3, [r7, #12]
 80a7108:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80a710c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80a7110:	6878      	ldr	r0, [r7, #4]
 80a7112:	f002 f893 	bl	80a923c <USBD_LL_PrepareReceive>
 80a7116:	e008      	b.n	80a712a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80a7118:	4b06      	ldr	r3, [pc, #24]	@ (80a7134 <USBD_CDC_ReceivePacket+0x68>)
 80a711a:	7819      	ldrb	r1, [r3, #0]
 80a711c:	68fb      	ldr	r3, [r7, #12]
 80a711e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80a7122:	2340      	movs	r3, #64	@ 0x40
 80a7124:	6878      	ldr	r0, [r7, #4]
 80a7126:	f002 f889 	bl	80a923c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80a712a:	2300      	movs	r3, #0
}
 80a712c:	4618      	mov	r0, r3
 80a712e:	3710      	adds	r7, #16
 80a7130:	46bd      	mov	sp, r7
 80a7132:	bd80      	pop	{r7, pc}
 80a7134:	24000098 	.word	0x24000098

080a7138 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80a7138:	b580      	push	{r7, lr}
 80a713a:	b086      	sub	sp, #24
 80a713c:	af00      	add	r7, sp, #0
 80a713e:	60f8      	str	r0, [r7, #12]
 80a7140:	60b9      	str	r1, [r7, #8]
 80a7142:	4613      	mov	r3, r2
 80a7144:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80a7146:	68fb      	ldr	r3, [r7, #12]
 80a7148:	2b00      	cmp	r3, #0
 80a714a:	d101      	bne.n	80a7150 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80a714c:	2303      	movs	r3, #3
 80a714e:	e01f      	b.n	80a7190 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80a7150:	68fb      	ldr	r3, [r7, #12]
 80a7152:	2200      	movs	r2, #0
 80a7154:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80a7158:	68fb      	ldr	r3, [r7, #12]
 80a715a:	2200      	movs	r2, #0
 80a715c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80a7160:	68fb      	ldr	r3, [r7, #12]
 80a7162:	2200      	movs	r2, #0
 80a7164:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80a7168:	68bb      	ldr	r3, [r7, #8]
 80a716a:	2b00      	cmp	r3, #0
 80a716c:	d003      	beq.n	80a7176 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80a716e:	68fb      	ldr	r3, [r7, #12]
 80a7170:	68ba      	ldr	r2, [r7, #8]
 80a7172:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80a7176:	68fb      	ldr	r3, [r7, #12]
 80a7178:	2201      	movs	r2, #1
 80a717a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80a717e:	68fb      	ldr	r3, [r7, #12]
 80a7180:	79fa      	ldrb	r2, [r7, #7]
 80a7182:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80a7184:	68f8      	ldr	r0, [r7, #12]
 80a7186:	f001 fefd 	bl	80a8f84 <USBD_LL_Init>
 80a718a:	4603      	mov	r3, r0
 80a718c:	75fb      	strb	r3, [r7, #23]

  return ret;
 80a718e:	7dfb      	ldrb	r3, [r7, #23]
}
 80a7190:	4618      	mov	r0, r3
 80a7192:	3718      	adds	r7, #24
 80a7194:	46bd      	mov	sp, r7
 80a7196:	bd80      	pop	{r7, pc}

080a7198 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80a7198:	b580      	push	{r7, lr}
 80a719a:	b084      	sub	sp, #16
 80a719c:	af00      	add	r7, sp, #0
 80a719e:	6078      	str	r0, [r7, #4]
 80a71a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80a71a2:	2300      	movs	r3, #0
 80a71a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80a71a6:	683b      	ldr	r3, [r7, #0]
 80a71a8:	2b00      	cmp	r3, #0
 80a71aa:	d101      	bne.n	80a71b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80a71ac:	2303      	movs	r3, #3
 80a71ae:	e025      	b.n	80a71fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80a71b0:	687b      	ldr	r3, [r7, #4]
 80a71b2:	683a      	ldr	r2, [r7, #0]
 80a71b4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80a71b8:	687b      	ldr	r3, [r7, #4]
 80a71ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a71be:	687b      	ldr	r3, [r7, #4]
 80a71c0:	32ae      	adds	r2, #174	@ 0xae
 80a71c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a71c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a71c8:	2b00      	cmp	r3, #0
 80a71ca:	d00f      	beq.n	80a71ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80a71cc:	687b      	ldr	r3, [r7, #4]
 80a71ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a71d2:	687b      	ldr	r3, [r7, #4]
 80a71d4:	32ae      	adds	r2, #174	@ 0xae
 80a71d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a71da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a71dc:	f107 020e 	add.w	r2, r7, #14
 80a71e0:	4610      	mov	r0, r2
 80a71e2:	4798      	blx	r3
 80a71e4:	4602      	mov	r2, r0
 80a71e6:	687b      	ldr	r3, [r7, #4]
 80a71e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80a71ec:	687b      	ldr	r3, [r7, #4]
 80a71ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80a71f2:	1c5a      	adds	r2, r3, #1
 80a71f4:	687b      	ldr	r3, [r7, #4]
 80a71f6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80a71fa:	2300      	movs	r3, #0
}
 80a71fc:	4618      	mov	r0, r3
 80a71fe:	3710      	adds	r7, #16
 80a7200:	46bd      	mov	sp, r7
 80a7202:	bd80      	pop	{r7, pc}

080a7204 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80a7204:	b580      	push	{r7, lr}
 80a7206:	b082      	sub	sp, #8
 80a7208:	af00      	add	r7, sp, #0
 80a720a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80a720c:	6878      	ldr	r0, [r7, #4]
 80a720e:	f001 ff0b 	bl	80a9028 <USBD_LL_Start>
 80a7212:	4603      	mov	r3, r0
}
 80a7214:	4618      	mov	r0, r3
 80a7216:	3708      	adds	r7, #8
 80a7218:	46bd      	mov	sp, r7
 80a721a:	bd80      	pop	{r7, pc}

080a721c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80a721c:	b480      	push	{r7}
 80a721e:	b083      	sub	sp, #12
 80a7220:	af00      	add	r7, sp, #0
 80a7222:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80a7224:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80a7226:	4618      	mov	r0, r3
 80a7228:	370c      	adds	r7, #12
 80a722a:	46bd      	mov	sp, r7
 80a722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a7230:	4770      	bx	lr

080a7232 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80a7232:	b580      	push	{r7, lr}
 80a7234:	b084      	sub	sp, #16
 80a7236:	af00      	add	r7, sp, #0
 80a7238:	6078      	str	r0, [r7, #4]
 80a723a:	460b      	mov	r3, r1
 80a723c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80a723e:	2300      	movs	r3, #0
 80a7240:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80a7242:	687b      	ldr	r3, [r7, #4]
 80a7244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7248:	2b00      	cmp	r3, #0
 80a724a:	d009      	beq.n	80a7260 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80a724c:	687b      	ldr	r3, [r7, #4]
 80a724e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7252:	681b      	ldr	r3, [r3, #0]
 80a7254:	78fa      	ldrb	r2, [r7, #3]
 80a7256:	4611      	mov	r1, r2
 80a7258:	6878      	ldr	r0, [r7, #4]
 80a725a:	4798      	blx	r3
 80a725c:	4603      	mov	r3, r0
 80a725e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80a7260:	7bfb      	ldrb	r3, [r7, #15]
}
 80a7262:	4618      	mov	r0, r3
 80a7264:	3710      	adds	r7, #16
 80a7266:	46bd      	mov	sp, r7
 80a7268:	bd80      	pop	{r7, pc}

080a726a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80a726a:	b580      	push	{r7, lr}
 80a726c:	b084      	sub	sp, #16
 80a726e:	af00      	add	r7, sp, #0
 80a7270:	6078      	str	r0, [r7, #4]
 80a7272:	460b      	mov	r3, r1
 80a7274:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80a7276:	2300      	movs	r3, #0
 80a7278:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80a727a:	687b      	ldr	r3, [r7, #4]
 80a727c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7280:	685b      	ldr	r3, [r3, #4]
 80a7282:	78fa      	ldrb	r2, [r7, #3]
 80a7284:	4611      	mov	r1, r2
 80a7286:	6878      	ldr	r0, [r7, #4]
 80a7288:	4798      	blx	r3
 80a728a:	4603      	mov	r3, r0
 80a728c:	2b00      	cmp	r3, #0
 80a728e:	d001      	beq.n	80a7294 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80a7290:	2303      	movs	r3, #3
 80a7292:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80a7294:	7bfb      	ldrb	r3, [r7, #15]
}
 80a7296:	4618      	mov	r0, r3
 80a7298:	3710      	adds	r7, #16
 80a729a:	46bd      	mov	sp, r7
 80a729c:	bd80      	pop	{r7, pc}

080a729e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80a729e:	b580      	push	{r7, lr}
 80a72a0:	b084      	sub	sp, #16
 80a72a2:	af00      	add	r7, sp, #0
 80a72a4:	6078      	str	r0, [r7, #4]
 80a72a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80a72a8:	687b      	ldr	r3, [r7, #4]
 80a72aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80a72ae:	6839      	ldr	r1, [r7, #0]
 80a72b0:	4618      	mov	r0, r3
 80a72b2:	f001 f936 	bl	80a8522 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80a72b6:	687b      	ldr	r3, [r7, #4]
 80a72b8:	2201      	movs	r2, #1
 80a72ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80a72be:	687b      	ldr	r3, [r7, #4]
 80a72c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80a72c4:	461a      	mov	r2, r3
 80a72c6:	687b      	ldr	r3, [r7, #4]
 80a72c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80a72cc:	687b      	ldr	r3, [r7, #4]
 80a72ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80a72d2:	f003 031f 	and.w	r3, r3, #31
 80a72d6:	2b02      	cmp	r3, #2
 80a72d8:	d01a      	beq.n	80a7310 <USBD_LL_SetupStage+0x72>
 80a72da:	2b02      	cmp	r3, #2
 80a72dc:	d822      	bhi.n	80a7324 <USBD_LL_SetupStage+0x86>
 80a72de:	2b00      	cmp	r3, #0
 80a72e0:	d002      	beq.n	80a72e8 <USBD_LL_SetupStage+0x4a>
 80a72e2:	2b01      	cmp	r3, #1
 80a72e4:	d00a      	beq.n	80a72fc <USBD_LL_SetupStage+0x5e>
 80a72e6:	e01d      	b.n	80a7324 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80a72e8:	687b      	ldr	r3, [r7, #4]
 80a72ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80a72ee:	4619      	mov	r1, r3
 80a72f0:	6878      	ldr	r0, [r7, #4]
 80a72f2:	f000 fb63 	bl	80a79bc <USBD_StdDevReq>
 80a72f6:	4603      	mov	r3, r0
 80a72f8:	73fb      	strb	r3, [r7, #15]
      break;
 80a72fa:	e020      	b.n	80a733e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80a72fc:	687b      	ldr	r3, [r7, #4]
 80a72fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80a7302:	4619      	mov	r1, r3
 80a7304:	6878      	ldr	r0, [r7, #4]
 80a7306:	f000 fbcb 	bl	80a7aa0 <USBD_StdItfReq>
 80a730a:	4603      	mov	r3, r0
 80a730c:	73fb      	strb	r3, [r7, #15]
      break;
 80a730e:	e016      	b.n	80a733e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80a7310:	687b      	ldr	r3, [r7, #4]
 80a7312:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80a7316:	4619      	mov	r1, r3
 80a7318:	6878      	ldr	r0, [r7, #4]
 80a731a:	f000 fc2d 	bl	80a7b78 <USBD_StdEPReq>
 80a731e:	4603      	mov	r3, r0
 80a7320:	73fb      	strb	r3, [r7, #15]
      break;
 80a7322:	e00c      	b.n	80a733e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80a7324:	687b      	ldr	r3, [r7, #4]
 80a7326:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80a732a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80a732e:	b2db      	uxtb	r3, r3
 80a7330:	4619      	mov	r1, r3
 80a7332:	6878      	ldr	r0, [r7, #4]
 80a7334:	f001 fed8 	bl	80a90e8 <USBD_LL_StallEP>
 80a7338:	4603      	mov	r3, r0
 80a733a:	73fb      	strb	r3, [r7, #15]
      break;
 80a733c:	bf00      	nop
  }

  return ret;
 80a733e:	7bfb      	ldrb	r3, [r7, #15]
}
 80a7340:	4618      	mov	r0, r3
 80a7342:	3710      	adds	r7, #16
 80a7344:	46bd      	mov	sp, r7
 80a7346:	bd80      	pop	{r7, pc}

080a7348 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80a7348:	b580      	push	{r7, lr}
 80a734a:	b086      	sub	sp, #24
 80a734c:	af00      	add	r7, sp, #0
 80a734e:	60f8      	str	r0, [r7, #12]
 80a7350:	460b      	mov	r3, r1
 80a7352:	607a      	str	r2, [r7, #4]
 80a7354:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80a7356:	2300      	movs	r3, #0
 80a7358:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80a735a:	7afb      	ldrb	r3, [r7, #11]
 80a735c:	2b00      	cmp	r3, #0
 80a735e:	d16e      	bne.n	80a743e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80a7360:	68fb      	ldr	r3, [r7, #12]
 80a7362:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80a7366:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80a7368:	68fb      	ldr	r3, [r7, #12]
 80a736a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80a736e:	2b03      	cmp	r3, #3
 80a7370:	f040 8098 	bne.w	80a74a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80a7374:	693b      	ldr	r3, [r7, #16]
 80a7376:	689a      	ldr	r2, [r3, #8]
 80a7378:	693b      	ldr	r3, [r7, #16]
 80a737a:	68db      	ldr	r3, [r3, #12]
 80a737c:	429a      	cmp	r2, r3
 80a737e:	d913      	bls.n	80a73a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80a7380:	693b      	ldr	r3, [r7, #16]
 80a7382:	689a      	ldr	r2, [r3, #8]
 80a7384:	693b      	ldr	r3, [r7, #16]
 80a7386:	68db      	ldr	r3, [r3, #12]
 80a7388:	1ad2      	subs	r2, r2, r3
 80a738a:	693b      	ldr	r3, [r7, #16]
 80a738c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80a738e:	693b      	ldr	r3, [r7, #16]
 80a7390:	68da      	ldr	r2, [r3, #12]
 80a7392:	693b      	ldr	r3, [r7, #16]
 80a7394:	689b      	ldr	r3, [r3, #8]
 80a7396:	4293      	cmp	r3, r2
 80a7398:	bf28      	it	cs
 80a739a:	4613      	movcs	r3, r2
 80a739c:	461a      	mov	r2, r3
 80a739e:	6879      	ldr	r1, [r7, #4]
 80a73a0:	68f8      	ldr	r0, [r7, #12]
 80a73a2:	f001 f9be 	bl	80a8722 <USBD_CtlContinueRx>
 80a73a6:	e07d      	b.n	80a74a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80a73a8:	68fb      	ldr	r3, [r7, #12]
 80a73aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80a73ae:	f003 031f 	and.w	r3, r3, #31
 80a73b2:	2b02      	cmp	r3, #2
 80a73b4:	d014      	beq.n	80a73e0 <USBD_LL_DataOutStage+0x98>
 80a73b6:	2b02      	cmp	r3, #2
 80a73b8:	d81d      	bhi.n	80a73f6 <USBD_LL_DataOutStage+0xae>
 80a73ba:	2b00      	cmp	r3, #0
 80a73bc:	d002      	beq.n	80a73c4 <USBD_LL_DataOutStage+0x7c>
 80a73be:	2b01      	cmp	r3, #1
 80a73c0:	d003      	beq.n	80a73ca <USBD_LL_DataOutStage+0x82>
 80a73c2:	e018      	b.n	80a73f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80a73c4:	2300      	movs	r3, #0
 80a73c6:	75bb      	strb	r3, [r7, #22]
            break;
 80a73c8:	e018      	b.n	80a73fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80a73ca:	68fb      	ldr	r3, [r7, #12]
 80a73cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80a73d0:	b2db      	uxtb	r3, r3
 80a73d2:	4619      	mov	r1, r3
 80a73d4:	68f8      	ldr	r0, [r7, #12]
 80a73d6:	f000 fa64 	bl	80a78a2 <USBD_CoreFindIF>
 80a73da:	4603      	mov	r3, r0
 80a73dc:	75bb      	strb	r3, [r7, #22]
            break;
 80a73de:	e00d      	b.n	80a73fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80a73e0:	68fb      	ldr	r3, [r7, #12]
 80a73e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80a73e6:	b2db      	uxtb	r3, r3
 80a73e8:	4619      	mov	r1, r3
 80a73ea:	68f8      	ldr	r0, [r7, #12]
 80a73ec:	f000 fa66 	bl	80a78bc <USBD_CoreFindEP>
 80a73f0:	4603      	mov	r3, r0
 80a73f2:	75bb      	strb	r3, [r7, #22]
            break;
 80a73f4:	e002      	b.n	80a73fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80a73f6:	2300      	movs	r3, #0
 80a73f8:	75bb      	strb	r3, [r7, #22]
            break;
 80a73fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80a73fc:	7dbb      	ldrb	r3, [r7, #22]
 80a73fe:	2b00      	cmp	r3, #0
 80a7400:	d119      	bne.n	80a7436 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a7402:	68fb      	ldr	r3, [r7, #12]
 80a7404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a7408:	b2db      	uxtb	r3, r3
 80a740a:	2b03      	cmp	r3, #3
 80a740c:	d113      	bne.n	80a7436 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80a740e:	7dba      	ldrb	r2, [r7, #22]
 80a7410:	68fb      	ldr	r3, [r7, #12]
 80a7412:	32ae      	adds	r2, #174	@ 0xae
 80a7414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7418:	691b      	ldr	r3, [r3, #16]
 80a741a:	2b00      	cmp	r3, #0
 80a741c:	d00b      	beq.n	80a7436 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80a741e:	7dba      	ldrb	r2, [r7, #22]
 80a7420:	68fb      	ldr	r3, [r7, #12]
 80a7422:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80a7426:	7dba      	ldrb	r2, [r7, #22]
 80a7428:	68fb      	ldr	r3, [r7, #12]
 80a742a:	32ae      	adds	r2, #174	@ 0xae
 80a742c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7430:	691b      	ldr	r3, [r3, #16]
 80a7432:	68f8      	ldr	r0, [r7, #12]
 80a7434:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80a7436:	68f8      	ldr	r0, [r7, #12]
 80a7438:	f001 f984 	bl	80a8744 <USBD_CtlSendStatus>
 80a743c:	e032      	b.n	80a74a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80a743e:	7afb      	ldrb	r3, [r7, #11]
 80a7440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80a7444:	b2db      	uxtb	r3, r3
 80a7446:	4619      	mov	r1, r3
 80a7448:	68f8      	ldr	r0, [r7, #12]
 80a744a:	f000 fa37 	bl	80a78bc <USBD_CoreFindEP>
 80a744e:	4603      	mov	r3, r0
 80a7450:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80a7452:	7dbb      	ldrb	r3, [r7, #22]
 80a7454:	2bff      	cmp	r3, #255	@ 0xff
 80a7456:	d025      	beq.n	80a74a4 <USBD_LL_DataOutStage+0x15c>
 80a7458:	7dbb      	ldrb	r3, [r7, #22]
 80a745a:	2b00      	cmp	r3, #0
 80a745c:	d122      	bne.n	80a74a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a745e:	68fb      	ldr	r3, [r7, #12]
 80a7460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a7464:	b2db      	uxtb	r3, r3
 80a7466:	2b03      	cmp	r3, #3
 80a7468:	d117      	bne.n	80a749a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80a746a:	7dba      	ldrb	r2, [r7, #22]
 80a746c:	68fb      	ldr	r3, [r7, #12]
 80a746e:	32ae      	adds	r2, #174	@ 0xae
 80a7470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7474:	699b      	ldr	r3, [r3, #24]
 80a7476:	2b00      	cmp	r3, #0
 80a7478:	d00f      	beq.n	80a749a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80a747a:	7dba      	ldrb	r2, [r7, #22]
 80a747c:	68fb      	ldr	r3, [r7, #12]
 80a747e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80a7482:	7dba      	ldrb	r2, [r7, #22]
 80a7484:	68fb      	ldr	r3, [r7, #12]
 80a7486:	32ae      	adds	r2, #174	@ 0xae
 80a7488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a748c:	699b      	ldr	r3, [r3, #24]
 80a748e:	7afa      	ldrb	r2, [r7, #11]
 80a7490:	4611      	mov	r1, r2
 80a7492:	68f8      	ldr	r0, [r7, #12]
 80a7494:	4798      	blx	r3
 80a7496:	4603      	mov	r3, r0
 80a7498:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80a749a:	7dfb      	ldrb	r3, [r7, #23]
 80a749c:	2b00      	cmp	r3, #0
 80a749e:	d001      	beq.n	80a74a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80a74a0:	7dfb      	ldrb	r3, [r7, #23]
 80a74a2:	e000      	b.n	80a74a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80a74a4:	2300      	movs	r3, #0
}
 80a74a6:	4618      	mov	r0, r3
 80a74a8:	3718      	adds	r7, #24
 80a74aa:	46bd      	mov	sp, r7
 80a74ac:	bd80      	pop	{r7, pc}

080a74ae <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80a74ae:	b580      	push	{r7, lr}
 80a74b0:	b086      	sub	sp, #24
 80a74b2:	af00      	add	r7, sp, #0
 80a74b4:	60f8      	str	r0, [r7, #12]
 80a74b6:	460b      	mov	r3, r1
 80a74b8:	607a      	str	r2, [r7, #4]
 80a74ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80a74bc:	7afb      	ldrb	r3, [r7, #11]
 80a74be:	2b00      	cmp	r3, #0
 80a74c0:	d16f      	bne.n	80a75a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80a74c2:	68fb      	ldr	r3, [r7, #12]
 80a74c4:	3314      	adds	r3, #20
 80a74c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80a74c8:	68fb      	ldr	r3, [r7, #12]
 80a74ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80a74ce:	2b02      	cmp	r3, #2
 80a74d0:	d15a      	bne.n	80a7588 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80a74d2:	693b      	ldr	r3, [r7, #16]
 80a74d4:	689a      	ldr	r2, [r3, #8]
 80a74d6:	693b      	ldr	r3, [r7, #16]
 80a74d8:	68db      	ldr	r3, [r3, #12]
 80a74da:	429a      	cmp	r2, r3
 80a74dc:	d914      	bls.n	80a7508 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80a74de:	693b      	ldr	r3, [r7, #16]
 80a74e0:	689a      	ldr	r2, [r3, #8]
 80a74e2:	693b      	ldr	r3, [r7, #16]
 80a74e4:	68db      	ldr	r3, [r3, #12]
 80a74e6:	1ad2      	subs	r2, r2, r3
 80a74e8:	693b      	ldr	r3, [r7, #16]
 80a74ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80a74ec:	693b      	ldr	r3, [r7, #16]
 80a74ee:	689b      	ldr	r3, [r3, #8]
 80a74f0:	461a      	mov	r2, r3
 80a74f2:	6879      	ldr	r1, [r7, #4]
 80a74f4:	68f8      	ldr	r0, [r7, #12]
 80a74f6:	f001 f8e6 	bl	80a86c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80a74fa:	2300      	movs	r3, #0
 80a74fc:	2200      	movs	r2, #0
 80a74fe:	2100      	movs	r1, #0
 80a7500:	68f8      	ldr	r0, [r7, #12]
 80a7502:	f001 fe9b 	bl	80a923c <USBD_LL_PrepareReceive>
 80a7506:	e03f      	b.n	80a7588 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80a7508:	693b      	ldr	r3, [r7, #16]
 80a750a:	68da      	ldr	r2, [r3, #12]
 80a750c:	693b      	ldr	r3, [r7, #16]
 80a750e:	689b      	ldr	r3, [r3, #8]
 80a7510:	429a      	cmp	r2, r3
 80a7512:	d11c      	bne.n	80a754e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80a7514:	693b      	ldr	r3, [r7, #16]
 80a7516:	685a      	ldr	r2, [r3, #4]
 80a7518:	693b      	ldr	r3, [r7, #16]
 80a751a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80a751c:	429a      	cmp	r2, r3
 80a751e:	d316      	bcc.n	80a754e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80a7520:	693b      	ldr	r3, [r7, #16]
 80a7522:	685a      	ldr	r2, [r3, #4]
 80a7524:	68fb      	ldr	r3, [r7, #12]
 80a7526:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80a752a:	429a      	cmp	r2, r3
 80a752c:	d20f      	bcs.n	80a754e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80a752e:	2200      	movs	r2, #0
 80a7530:	2100      	movs	r1, #0
 80a7532:	68f8      	ldr	r0, [r7, #12]
 80a7534:	f001 f8c7 	bl	80a86c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80a7538:	68fb      	ldr	r3, [r7, #12]
 80a753a:	2200      	movs	r2, #0
 80a753c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80a7540:	2300      	movs	r3, #0
 80a7542:	2200      	movs	r2, #0
 80a7544:	2100      	movs	r1, #0
 80a7546:	68f8      	ldr	r0, [r7, #12]
 80a7548:	f001 fe78 	bl	80a923c <USBD_LL_PrepareReceive>
 80a754c:	e01c      	b.n	80a7588 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a754e:	68fb      	ldr	r3, [r7, #12]
 80a7550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a7554:	b2db      	uxtb	r3, r3
 80a7556:	2b03      	cmp	r3, #3
 80a7558:	d10f      	bne.n	80a757a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80a755a:	68fb      	ldr	r3, [r7, #12]
 80a755c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7560:	68db      	ldr	r3, [r3, #12]
 80a7562:	2b00      	cmp	r3, #0
 80a7564:	d009      	beq.n	80a757a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80a7566:	68fb      	ldr	r3, [r7, #12]
 80a7568:	2200      	movs	r2, #0
 80a756a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80a756e:	68fb      	ldr	r3, [r7, #12]
 80a7570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7574:	68db      	ldr	r3, [r3, #12]
 80a7576:	68f8      	ldr	r0, [r7, #12]
 80a7578:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80a757a:	2180      	movs	r1, #128	@ 0x80
 80a757c:	68f8      	ldr	r0, [r7, #12]
 80a757e:	f001 fdb3 	bl	80a90e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80a7582:	68f8      	ldr	r0, [r7, #12]
 80a7584:	f001 f8f1 	bl	80a876a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80a7588:	68fb      	ldr	r3, [r7, #12]
 80a758a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80a758e:	2b00      	cmp	r3, #0
 80a7590:	d03a      	beq.n	80a7608 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80a7592:	68f8      	ldr	r0, [r7, #12]
 80a7594:	f7ff fe42 	bl	80a721c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80a7598:	68fb      	ldr	r3, [r7, #12]
 80a759a:	2200      	movs	r2, #0
 80a759c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80a75a0:	e032      	b.n	80a7608 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80a75a2:	7afb      	ldrb	r3, [r7, #11]
 80a75a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80a75a8:	b2db      	uxtb	r3, r3
 80a75aa:	4619      	mov	r1, r3
 80a75ac:	68f8      	ldr	r0, [r7, #12]
 80a75ae:	f000 f985 	bl	80a78bc <USBD_CoreFindEP>
 80a75b2:	4603      	mov	r3, r0
 80a75b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80a75b6:	7dfb      	ldrb	r3, [r7, #23]
 80a75b8:	2bff      	cmp	r3, #255	@ 0xff
 80a75ba:	d025      	beq.n	80a7608 <USBD_LL_DataInStage+0x15a>
 80a75bc:	7dfb      	ldrb	r3, [r7, #23]
 80a75be:	2b00      	cmp	r3, #0
 80a75c0:	d122      	bne.n	80a7608 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a75c2:	68fb      	ldr	r3, [r7, #12]
 80a75c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a75c8:	b2db      	uxtb	r3, r3
 80a75ca:	2b03      	cmp	r3, #3
 80a75cc:	d11c      	bne.n	80a7608 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80a75ce:	7dfa      	ldrb	r2, [r7, #23]
 80a75d0:	68fb      	ldr	r3, [r7, #12]
 80a75d2:	32ae      	adds	r2, #174	@ 0xae
 80a75d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a75d8:	695b      	ldr	r3, [r3, #20]
 80a75da:	2b00      	cmp	r3, #0
 80a75dc:	d014      	beq.n	80a7608 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80a75de:	7dfa      	ldrb	r2, [r7, #23]
 80a75e0:	68fb      	ldr	r3, [r7, #12]
 80a75e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80a75e6:	7dfa      	ldrb	r2, [r7, #23]
 80a75e8:	68fb      	ldr	r3, [r7, #12]
 80a75ea:	32ae      	adds	r2, #174	@ 0xae
 80a75ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a75f0:	695b      	ldr	r3, [r3, #20]
 80a75f2:	7afa      	ldrb	r2, [r7, #11]
 80a75f4:	4611      	mov	r1, r2
 80a75f6:	68f8      	ldr	r0, [r7, #12]
 80a75f8:	4798      	blx	r3
 80a75fa:	4603      	mov	r3, r0
 80a75fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80a75fe:	7dbb      	ldrb	r3, [r7, #22]
 80a7600:	2b00      	cmp	r3, #0
 80a7602:	d001      	beq.n	80a7608 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80a7604:	7dbb      	ldrb	r3, [r7, #22]
 80a7606:	e000      	b.n	80a760a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80a7608:	2300      	movs	r3, #0
}
 80a760a:	4618      	mov	r0, r3
 80a760c:	3718      	adds	r7, #24
 80a760e:	46bd      	mov	sp, r7
 80a7610:	bd80      	pop	{r7, pc}

080a7612 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80a7612:	b580      	push	{r7, lr}
 80a7614:	b084      	sub	sp, #16
 80a7616:	af00      	add	r7, sp, #0
 80a7618:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80a761a:	2300      	movs	r3, #0
 80a761c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80a761e:	687b      	ldr	r3, [r7, #4]
 80a7620:	2201      	movs	r2, #1
 80a7622:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80a7626:	687b      	ldr	r3, [r7, #4]
 80a7628:	2200      	movs	r2, #0
 80a762a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80a762e:	687b      	ldr	r3, [r7, #4]
 80a7630:	2200      	movs	r2, #0
 80a7632:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80a7634:	687b      	ldr	r3, [r7, #4]
 80a7636:	2200      	movs	r2, #0
 80a7638:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80a763c:	687b      	ldr	r3, [r7, #4]
 80a763e:	2200      	movs	r2, #0
 80a7640:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80a7644:	687b      	ldr	r3, [r7, #4]
 80a7646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a764a:	2b00      	cmp	r3, #0
 80a764c:	d014      	beq.n	80a7678 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80a764e:	687b      	ldr	r3, [r7, #4]
 80a7650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7654:	685b      	ldr	r3, [r3, #4]
 80a7656:	2b00      	cmp	r3, #0
 80a7658:	d00e      	beq.n	80a7678 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80a765a:	687b      	ldr	r3, [r7, #4]
 80a765c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7660:	685b      	ldr	r3, [r3, #4]
 80a7662:	687a      	ldr	r2, [r7, #4]
 80a7664:	6852      	ldr	r2, [r2, #4]
 80a7666:	b2d2      	uxtb	r2, r2
 80a7668:	4611      	mov	r1, r2
 80a766a:	6878      	ldr	r0, [r7, #4]
 80a766c:	4798      	blx	r3
 80a766e:	4603      	mov	r3, r0
 80a7670:	2b00      	cmp	r3, #0
 80a7672:	d001      	beq.n	80a7678 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80a7674:	2303      	movs	r3, #3
 80a7676:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80a7678:	2340      	movs	r3, #64	@ 0x40
 80a767a:	2200      	movs	r2, #0
 80a767c:	2100      	movs	r1, #0
 80a767e:	6878      	ldr	r0, [r7, #4]
 80a7680:	f001 fced 	bl	80a905e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80a7684:	687b      	ldr	r3, [r7, #4]
 80a7686:	2201      	movs	r2, #1
 80a7688:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80a768c:	687b      	ldr	r3, [r7, #4]
 80a768e:	2240      	movs	r2, #64	@ 0x40
 80a7690:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80a7694:	2340      	movs	r3, #64	@ 0x40
 80a7696:	2200      	movs	r2, #0
 80a7698:	2180      	movs	r1, #128	@ 0x80
 80a769a:	6878      	ldr	r0, [r7, #4]
 80a769c:	f001 fcdf 	bl	80a905e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80a76a0:	687b      	ldr	r3, [r7, #4]
 80a76a2:	2201      	movs	r2, #1
 80a76a4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80a76a6:	687b      	ldr	r3, [r7, #4]
 80a76a8:	2240      	movs	r2, #64	@ 0x40
 80a76aa:	621a      	str	r2, [r3, #32]

  return ret;
 80a76ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80a76ae:	4618      	mov	r0, r3
 80a76b0:	3710      	adds	r7, #16
 80a76b2:	46bd      	mov	sp, r7
 80a76b4:	bd80      	pop	{r7, pc}

080a76b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80a76b6:	b480      	push	{r7}
 80a76b8:	b083      	sub	sp, #12
 80a76ba:	af00      	add	r7, sp, #0
 80a76bc:	6078      	str	r0, [r7, #4]
 80a76be:	460b      	mov	r3, r1
 80a76c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80a76c2:	687b      	ldr	r3, [r7, #4]
 80a76c4:	78fa      	ldrb	r2, [r7, #3]
 80a76c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80a76c8:	2300      	movs	r3, #0
}
 80a76ca:	4618      	mov	r0, r3
 80a76cc:	370c      	adds	r7, #12
 80a76ce:	46bd      	mov	sp, r7
 80a76d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a76d4:	4770      	bx	lr

080a76d6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80a76d6:	b480      	push	{r7}
 80a76d8:	b083      	sub	sp, #12
 80a76da:	af00      	add	r7, sp, #0
 80a76dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80a76de:	687b      	ldr	r3, [r7, #4]
 80a76e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a76e4:	b2db      	uxtb	r3, r3
 80a76e6:	2b04      	cmp	r3, #4
 80a76e8:	d006      	beq.n	80a76f8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80a76ea:	687b      	ldr	r3, [r7, #4]
 80a76ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a76f0:	b2da      	uxtb	r2, r3
 80a76f2:	687b      	ldr	r3, [r7, #4]
 80a76f4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80a76f8:	687b      	ldr	r3, [r7, #4]
 80a76fa:	2204      	movs	r2, #4
 80a76fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80a7700:	2300      	movs	r3, #0
}
 80a7702:	4618      	mov	r0, r3
 80a7704:	370c      	adds	r7, #12
 80a7706:	46bd      	mov	sp, r7
 80a7708:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a770c:	4770      	bx	lr

080a770e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80a770e:	b480      	push	{r7}
 80a7710:	b083      	sub	sp, #12
 80a7712:	af00      	add	r7, sp, #0
 80a7714:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80a7716:	687b      	ldr	r3, [r7, #4]
 80a7718:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a771c:	b2db      	uxtb	r3, r3
 80a771e:	2b04      	cmp	r3, #4
 80a7720:	d106      	bne.n	80a7730 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80a7722:	687b      	ldr	r3, [r7, #4]
 80a7724:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80a7728:	b2da      	uxtb	r2, r3
 80a772a:	687b      	ldr	r3, [r7, #4]
 80a772c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80a7730:	2300      	movs	r3, #0
}
 80a7732:	4618      	mov	r0, r3
 80a7734:	370c      	adds	r7, #12
 80a7736:	46bd      	mov	sp, r7
 80a7738:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a773c:	4770      	bx	lr

080a773e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80a773e:	b580      	push	{r7, lr}
 80a7740:	b082      	sub	sp, #8
 80a7742:	af00      	add	r7, sp, #0
 80a7744:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a7746:	687b      	ldr	r3, [r7, #4]
 80a7748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a774c:	b2db      	uxtb	r3, r3
 80a774e:	2b03      	cmp	r3, #3
 80a7750:	d110      	bne.n	80a7774 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80a7752:	687b      	ldr	r3, [r7, #4]
 80a7754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7758:	2b00      	cmp	r3, #0
 80a775a:	d00b      	beq.n	80a7774 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80a775c:	687b      	ldr	r3, [r7, #4]
 80a775e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7762:	69db      	ldr	r3, [r3, #28]
 80a7764:	2b00      	cmp	r3, #0
 80a7766:	d005      	beq.n	80a7774 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80a7768:	687b      	ldr	r3, [r7, #4]
 80a776a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a776e:	69db      	ldr	r3, [r3, #28]
 80a7770:	6878      	ldr	r0, [r7, #4]
 80a7772:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80a7774:	2300      	movs	r3, #0
}
 80a7776:	4618      	mov	r0, r3
 80a7778:	3708      	adds	r7, #8
 80a777a:	46bd      	mov	sp, r7
 80a777c:	bd80      	pop	{r7, pc}

080a777e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80a777e:	b580      	push	{r7, lr}
 80a7780:	b082      	sub	sp, #8
 80a7782:	af00      	add	r7, sp, #0
 80a7784:	6078      	str	r0, [r7, #4]
 80a7786:	460b      	mov	r3, r1
 80a7788:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80a778a:	687b      	ldr	r3, [r7, #4]
 80a778c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a7790:	687b      	ldr	r3, [r7, #4]
 80a7792:	32ae      	adds	r2, #174	@ 0xae
 80a7794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7798:	2b00      	cmp	r3, #0
 80a779a:	d101      	bne.n	80a77a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80a779c:	2303      	movs	r3, #3
 80a779e:	e01c      	b.n	80a77da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a77a0:	687b      	ldr	r3, [r7, #4]
 80a77a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a77a6:	b2db      	uxtb	r3, r3
 80a77a8:	2b03      	cmp	r3, #3
 80a77aa:	d115      	bne.n	80a77d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80a77ac:	687b      	ldr	r3, [r7, #4]
 80a77ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a77b2:	687b      	ldr	r3, [r7, #4]
 80a77b4:	32ae      	adds	r2, #174	@ 0xae
 80a77b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a77ba:	6a1b      	ldr	r3, [r3, #32]
 80a77bc:	2b00      	cmp	r3, #0
 80a77be:	d00b      	beq.n	80a77d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80a77c0:	687b      	ldr	r3, [r7, #4]
 80a77c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a77c6:	687b      	ldr	r3, [r7, #4]
 80a77c8:	32ae      	adds	r2, #174	@ 0xae
 80a77ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a77ce:	6a1b      	ldr	r3, [r3, #32]
 80a77d0:	78fa      	ldrb	r2, [r7, #3]
 80a77d2:	4611      	mov	r1, r2
 80a77d4:	6878      	ldr	r0, [r7, #4]
 80a77d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80a77d8:	2300      	movs	r3, #0
}
 80a77da:	4618      	mov	r0, r3
 80a77dc:	3708      	adds	r7, #8
 80a77de:	46bd      	mov	sp, r7
 80a77e0:	bd80      	pop	{r7, pc}

080a77e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80a77e2:	b580      	push	{r7, lr}
 80a77e4:	b082      	sub	sp, #8
 80a77e6:	af00      	add	r7, sp, #0
 80a77e8:	6078      	str	r0, [r7, #4]
 80a77ea:	460b      	mov	r3, r1
 80a77ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80a77ee:	687b      	ldr	r3, [r7, #4]
 80a77f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a77f4:	687b      	ldr	r3, [r7, #4]
 80a77f6:	32ae      	adds	r2, #174	@ 0xae
 80a77f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a77fc:	2b00      	cmp	r3, #0
 80a77fe:	d101      	bne.n	80a7804 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80a7800:	2303      	movs	r3, #3
 80a7802:	e01c      	b.n	80a783e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a7804:	687b      	ldr	r3, [r7, #4]
 80a7806:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a780a:	b2db      	uxtb	r3, r3
 80a780c:	2b03      	cmp	r3, #3
 80a780e:	d115      	bne.n	80a783c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80a7810:	687b      	ldr	r3, [r7, #4]
 80a7812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a7816:	687b      	ldr	r3, [r7, #4]
 80a7818:	32ae      	adds	r2, #174	@ 0xae
 80a781a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a781e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80a7820:	2b00      	cmp	r3, #0
 80a7822:	d00b      	beq.n	80a783c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80a7824:	687b      	ldr	r3, [r7, #4]
 80a7826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a782a:	687b      	ldr	r3, [r7, #4]
 80a782c:	32ae      	adds	r2, #174	@ 0xae
 80a782e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80a7834:	78fa      	ldrb	r2, [r7, #3]
 80a7836:	4611      	mov	r1, r2
 80a7838:	6878      	ldr	r0, [r7, #4]
 80a783a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80a783c:	2300      	movs	r3, #0
}
 80a783e:	4618      	mov	r0, r3
 80a7840:	3708      	adds	r7, #8
 80a7842:	46bd      	mov	sp, r7
 80a7844:	bd80      	pop	{r7, pc}

080a7846 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80a7846:	b480      	push	{r7}
 80a7848:	b083      	sub	sp, #12
 80a784a:	af00      	add	r7, sp, #0
 80a784c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80a784e:	2300      	movs	r3, #0
}
 80a7850:	4618      	mov	r0, r3
 80a7852:	370c      	adds	r7, #12
 80a7854:	46bd      	mov	sp, r7
 80a7856:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a785a:	4770      	bx	lr

080a785c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80a785c:	b580      	push	{r7, lr}
 80a785e:	b084      	sub	sp, #16
 80a7860:	af00      	add	r7, sp, #0
 80a7862:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80a7864:	2300      	movs	r3, #0
 80a7866:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80a7868:	687b      	ldr	r3, [r7, #4]
 80a786a:	2201      	movs	r2, #1
 80a786c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80a7870:	687b      	ldr	r3, [r7, #4]
 80a7872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7876:	2b00      	cmp	r3, #0
 80a7878:	d00e      	beq.n	80a7898 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80a787a:	687b      	ldr	r3, [r7, #4]
 80a787c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7880:	685b      	ldr	r3, [r3, #4]
 80a7882:	687a      	ldr	r2, [r7, #4]
 80a7884:	6852      	ldr	r2, [r2, #4]
 80a7886:	b2d2      	uxtb	r2, r2
 80a7888:	4611      	mov	r1, r2
 80a788a:	6878      	ldr	r0, [r7, #4]
 80a788c:	4798      	blx	r3
 80a788e:	4603      	mov	r3, r0
 80a7890:	2b00      	cmp	r3, #0
 80a7892:	d001      	beq.n	80a7898 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80a7894:	2303      	movs	r3, #3
 80a7896:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80a7898:	7bfb      	ldrb	r3, [r7, #15]
}
 80a789a:	4618      	mov	r0, r3
 80a789c:	3710      	adds	r7, #16
 80a789e:	46bd      	mov	sp, r7
 80a78a0:	bd80      	pop	{r7, pc}

080a78a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80a78a2:	b480      	push	{r7}
 80a78a4:	b083      	sub	sp, #12
 80a78a6:	af00      	add	r7, sp, #0
 80a78a8:	6078      	str	r0, [r7, #4]
 80a78aa:	460b      	mov	r3, r1
 80a78ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80a78ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80a78b0:	4618      	mov	r0, r3
 80a78b2:	370c      	adds	r7, #12
 80a78b4:	46bd      	mov	sp, r7
 80a78b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a78ba:	4770      	bx	lr

080a78bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80a78bc:	b480      	push	{r7}
 80a78be:	b083      	sub	sp, #12
 80a78c0:	af00      	add	r7, sp, #0
 80a78c2:	6078      	str	r0, [r7, #4]
 80a78c4:	460b      	mov	r3, r1
 80a78c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80a78c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80a78ca:	4618      	mov	r0, r3
 80a78cc:	370c      	adds	r7, #12
 80a78ce:	46bd      	mov	sp, r7
 80a78d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a78d4:	4770      	bx	lr

080a78d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80a78d6:	b580      	push	{r7, lr}
 80a78d8:	b086      	sub	sp, #24
 80a78da:	af00      	add	r7, sp, #0
 80a78dc:	6078      	str	r0, [r7, #4]
 80a78de:	460b      	mov	r3, r1
 80a78e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80a78e2:	687b      	ldr	r3, [r7, #4]
 80a78e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80a78e6:	687b      	ldr	r3, [r7, #4]
 80a78e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80a78ea:	2300      	movs	r3, #0
 80a78ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80a78ee:	68fb      	ldr	r3, [r7, #12]
 80a78f0:	885b      	ldrh	r3, [r3, #2]
 80a78f2:	b29b      	uxth	r3, r3
 80a78f4:	68fa      	ldr	r2, [r7, #12]
 80a78f6:	7812      	ldrb	r2, [r2, #0]
 80a78f8:	4293      	cmp	r3, r2
 80a78fa:	d91f      	bls.n	80a793c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80a78fc:	68fb      	ldr	r3, [r7, #12]
 80a78fe:	781b      	ldrb	r3, [r3, #0]
 80a7900:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80a7902:	e013      	b.n	80a792c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80a7904:	f107 030a 	add.w	r3, r7, #10
 80a7908:	4619      	mov	r1, r3
 80a790a:	6978      	ldr	r0, [r7, #20]
 80a790c:	f000 f81b 	bl	80a7946 <USBD_GetNextDesc>
 80a7910:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80a7912:	697b      	ldr	r3, [r7, #20]
 80a7914:	785b      	ldrb	r3, [r3, #1]
 80a7916:	2b05      	cmp	r3, #5
 80a7918:	d108      	bne.n	80a792c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80a791a:	697b      	ldr	r3, [r7, #20]
 80a791c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80a791e:	693b      	ldr	r3, [r7, #16]
 80a7920:	789b      	ldrb	r3, [r3, #2]
 80a7922:	78fa      	ldrb	r2, [r7, #3]
 80a7924:	429a      	cmp	r2, r3
 80a7926:	d008      	beq.n	80a793a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80a7928:	2300      	movs	r3, #0
 80a792a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80a792c:	68fb      	ldr	r3, [r7, #12]
 80a792e:	885b      	ldrh	r3, [r3, #2]
 80a7930:	b29a      	uxth	r2, r3
 80a7932:	897b      	ldrh	r3, [r7, #10]
 80a7934:	429a      	cmp	r2, r3
 80a7936:	d8e5      	bhi.n	80a7904 <USBD_GetEpDesc+0x2e>
 80a7938:	e000      	b.n	80a793c <USBD_GetEpDesc+0x66>
          break;
 80a793a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80a793c:	693b      	ldr	r3, [r7, #16]
}
 80a793e:	4618      	mov	r0, r3
 80a7940:	3718      	adds	r7, #24
 80a7942:	46bd      	mov	sp, r7
 80a7944:	bd80      	pop	{r7, pc}

080a7946 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80a7946:	b480      	push	{r7}
 80a7948:	b085      	sub	sp, #20
 80a794a:	af00      	add	r7, sp, #0
 80a794c:	6078      	str	r0, [r7, #4]
 80a794e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80a7950:	687b      	ldr	r3, [r7, #4]
 80a7952:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80a7954:	683b      	ldr	r3, [r7, #0]
 80a7956:	881b      	ldrh	r3, [r3, #0]
 80a7958:	68fa      	ldr	r2, [r7, #12]
 80a795a:	7812      	ldrb	r2, [r2, #0]
 80a795c:	4413      	add	r3, r2
 80a795e:	b29a      	uxth	r2, r3
 80a7960:	683b      	ldr	r3, [r7, #0]
 80a7962:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80a7964:	68fb      	ldr	r3, [r7, #12]
 80a7966:	781b      	ldrb	r3, [r3, #0]
 80a7968:	461a      	mov	r2, r3
 80a796a:	687b      	ldr	r3, [r7, #4]
 80a796c:	4413      	add	r3, r2
 80a796e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80a7970:	68fb      	ldr	r3, [r7, #12]
}
 80a7972:	4618      	mov	r0, r3
 80a7974:	3714      	adds	r7, #20
 80a7976:	46bd      	mov	sp, r7
 80a7978:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a797c:	4770      	bx	lr

080a797e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80a797e:	b480      	push	{r7}
 80a7980:	b087      	sub	sp, #28
 80a7982:	af00      	add	r7, sp, #0
 80a7984:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80a7986:	687b      	ldr	r3, [r7, #4]
 80a7988:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80a798a:	697b      	ldr	r3, [r7, #20]
 80a798c:	781b      	ldrb	r3, [r3, #0]
 80a798e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80a7990:	697b      	ldr	r3, [r7, #20]
 80a7992:	3301      	adds	r3, #1
 80a7994:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80a7996:	697b      	ldr	r3, [r7, #20]
 80a7998:	781b      	ldrb	r3, [r3, #0]
 80a799a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80a799c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80a79a0:	021b      	lsls	r3, r3, #8
 80a79a2:	b21a      	sxth	r2, r3
 80a79a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80a79a8:	4313      	orrs	r3, r2
 80a79aa:	b21b      	sxth	r3, r3
 80a79ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80a79ae:	89fb      	ldrh	r3, [r7, #14]
}
 80a79b0:	4618      	mov	r0, r3
 80a79b2:	371c      	adds	r7, #28
 80a79b4:	46bd      	mov	sp, r7
 80a79b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a79ba:	4770      	bx	lr

080a79bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a79bc:	b580      	push	{r7, lr}
 80a79be:	b084      	sub	sp, #16
 80a79c0:	af00      	add	r7, sp, #0
 80a79c2:	6078      	str	r0, [r7, #4]
 80a79c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80a79c6:	2300      	movs	r3, #0
 80a79c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80a79ca:	683b      	ldr	r3, [r7, #0]
 80a79cc:	781b      	ldrb	r3, [r3, #0]
 80a79ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80a79d2:	2b40      	cmp	r3, #64	@ 0x40
 80a79d4:	d005      	beq.n	80a79e2 <USBD_StdDevReq+0x26>
 80a79d6:	2b40      	cmp	r3, #64	@ 0x40
 80a79d8:	d857      	bhi.n	80a7a8a <USBD_StdDevReq+0xce>
 80a79da:	2b00      	cmp	r3, #0
 80a79dc:	d00f      	beq.n	80a79fe <USBD_StdDevReq+0x42>
 80a79de:	2b20      	cmp	r3, #32
 80a79e0:	d153      	bne.n	80a7a8a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80a79e2:	687b      	ldr	r3, [r7, #4]
 80a79e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80a79e8:	687b      	ldr	r3, [r7, #4]
 80a79ea:	32ae      	adds	r2, #174	@ 0xae
 80a79ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a79f0:	689b      	ldr	r3, [r3, #8]
 80a79f2:	6839      	ldr	r1, [r7, #0]
 80a79f4:	6878      	ldr	r0, [r7, #4]
 80a79f6:	4798      	blx	r3
 80a79f8:	4603      	mov	r3, r0
 80a79fa:	73fb      	strb	r3, [r7, #15]
      break;
 80a79fc:	e04a      	b.n	80a7a94 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80a79fe:	683b      	ldr	r3, [r7, #0]
 80a7a00:	785b      	ldrb	r3, [r3, #1]
 80a7a02:	2b09      	cmp	r3, #9
 80a7a04:	d83b      	bhi.n	80a7a7e <USBD_StdDevReq+0xc2>
 80a7a06:	a201      	add	r2, pc, #4	@ (adr r2, 80a7a0c <USBD_StdDevReq+0x50>)
 80a7a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a7a0c:	080a7a61 	.word	0x080a7a61
 80a7a10:	080a7a75 	.word	0x080a7a75
 80a7a14:	080a7a7f 	.word	0x080a7a7f
 80a7a18:	080a7a6b 	.word	0x080a7a6b
 80a7a1c:	080a7a7f 	.word	0x080a7a7f
 80a7a20:	080a7a3f 	.word	0x080a7a3f
 80a7a24:	080a7a35 	.word	0x080a7a35
 80a7a28:	080a7a7f 	.word	0x080a7a7f
 80a7a2c:	080a7a57 	.word	0x080a7a57
 80a7a30:	080a7a49 	.word	0x080a7a49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80a7a34:	6839      	ldr	r1, [r7, #0]
 80a7a36:	6878      	ldr	r0, [r7, #4]
 80a7a38:	f000 fa3c 	bl	80a7eb4 <USBD_GetDescriptor>
          break;
 80a7a3c:	e024      	b.n	80a7a88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80a7a3e:	6839      	ldr	r1, [r7, #0]
 80a7a40:	6878      	ldr	r0, [r7, #4]
 80a7a42:	f000 fbcb 	bl	80a81dc <USBD_SetAddress>
          break;
 80a7a46:	e01f      	b.n	80a7a88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80a7a48:	6839      	ldr	r1, [r7, #0]
 80a7a4a:	6878      	ldr	r0, [r7, #4]
 80a7a4c:	f000 fc0a 	bl	80a8264 <USBD_SetConfig>
 80a7a50:	4603      	mov	r3, r0
 80a7a52:	73fb      	strb	r3, [r7, #15]
          break;
 80a7a54:	e018      	b.n	80a7a88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80a7a56:	6839      	ldr	r1, [r7, #0]
 80a7a58:	6878      	ldr	r0, [r7, #4]
 80a7a5a:	f000 fcad 	bl	80a83b8 <USBD_GetConfig>
          break;
 80a7a5e:	e013      	b.n	80a7a88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80a7a60:	6839      	ldr	r1, [r7, #0]
 80a7a62:	6878      	ldr	r0, [r7, #4]
 80a7a64:	f000 fcde 	bl	80a8424 <USBD_GetStatus>
          break;
 80a7a68:	e00e      	b.n	80a7a88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80a7a6a:	6839      	ldr	r1, [r7, #0]
 80a7a6c:	6878      	ldr	r0, [r7, #4]
 80a7a6e:	f000 fd0d 	bl	80a848c <USBD_SetFeature>
          break;
 80a7a72:	e009      	b.n	80a7a88 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80a7a74:	6839      	ldr	r1, [r7, #0]
 80a7a76:	6878      	ldr	r0, [r7, #4]
 80a7a78:	f000 fd31 	bl	80a84de <USBD_ClrFeature>
          break;
 80a7a7c:	e004      	b.n	80a7a88 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80a7a7e:	6839      	ldr	r1, [r7, #0]
 80a7a80:	6878      	ldr	r0, [r7, #4]
 80a7a82:	f000 fd88 	bl	80a8596 <USBD_CtlError>
          break;
 80a7a86:	bf00      	nop
      }
      break;
 80a7a88:	e004      	b.n	80a7a94 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80a7a8a:	6839      	ldr	r1, [r7, #0]
 80a7a8c:	6878      	ldr	r0, [r7, #4]
 80a7a8e:	f000 fd82 	bl	80a8596 <USBD_CtlError>
      break;
 80a7a92:	bf00      	nop
  }

  return ret;
 80a7a94:	7bfb      	ldrb	r3, [r7, #15]
}
 80a7a96:	4618      	mov	r0, r3
 80a7a98:	3710      	adds	r7, #16
 80a7a9a:	46bd      	mov	sp, r7
 80a7a9c:	bd80      	pop	{r7, pc}
 80a7a9e:	bf00      	nop

080a7aa0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a7aa0:	b580      	push	{r7, lr}
 80a7aa2:	b084      	sub	sp, #16
 80a7aa4:	af00      	add	r7, sp, #0
 80a7aa6:	6078      	str	r0, [r7, #4]
 80a7aa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80a7aaa:	2300      	movs	r3, #0
 80a7aac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80a7aae:	683b      	ldr	r3, [r7, #0]
 80a7ab0:	781b      	ldrb	r3, [r3, #0]
 80a7ab2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80a7ab6:	2b40      	cmp	r3, #64	@ 0x40
 80a7ab8:	d005      	beq.n	80a7ac6 <USBD_StdItfReq+0x26>
 80a7aba:	2b40      	cmp	r3, #64	@ 0x40
 80a7abc:	d852      	bhi.n	80a7b64 <USBD_StdItfReq+0xc4>
 80a7abe:	2b00      	cmp	r3, #0
 80a7ac0:	d001      	beq.n	80a7ac6 <USBD_StdItfReq+0x26>
 80a7ac2:	2b20      	cmp	r3, #32
 80a7ac4:	d14e      	bne.n	80a7b64 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80a7ac6:	687b      	ldr	r3, [r7, #4]
 80a7ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a7acc:	b2db      	uxtb	r3, r3
 80a7ace:	3b01      	subs	r3, #1
 80a7ad0:	2b02      	cmp	r3, #2
 80a7ad2:	d840      	bhi.n	80a7b56 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80a7ad4:	683b      	ldr	r3, [r7, #0]
 80a7ad6:	889b      	ldrh	r3, [r3, #4]
 80a7ad8:	b2db      	uxtb	r3, r3
 80a7ada:	2b01      	cmp	r3, #1
 80a7adc:	d836      	bhi.n	80a7b4c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80a7ade:	683b      	ldr	r3, [r7, #0]
 80a7ae0:	889b      	ldrh	r3, [r3, #4]
 80a7ae2:	b2db      	uxtb	r3, r3
 80a7ae4:	4619      	mov	r1, r3
 80a7ae6:	6878      	ldr	r0, [r7, #4]
 80a7ae8:	f7ff fedb 	bl	80a78a2 <USBD_CoreFindIF>
 80a7aec:	4603      	mov	r3, r0
 80a7aee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80a7af0:	7bbb      	ldrb	r3, [r7, #14]
 80a7af2:	2bff      	cmp	r3, #255	@ 0xff
 80a7af4:	d01d      	beq.n	80a7b32 <USBD_StdItfReq+0x92>
 80a7af6:	7bbb      	ldrb	r3, [r7, #14]
 80a7af8:	2b00      	cmp	r3, #0
 80a7afa:	d11a      	bne.n	80a7b32 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80a7afc:	7bba      	ldrb	r2, [r7, #14]
 80a7afe:	687b      	ldr	r3, [r7, #4]
 80a7b00:	32ae      	adds	r2, #174	@ 0xae
 80a7b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7b06:	689b      	ldr	r3, [r3, #8]
 80a7b08:	2b00      	cmp	r3, #0
 80a7b0a:	d00f      	beq.n	80a7b2c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80a7b0c:	7bba      	ldrb	r2, [r7, #14]
 80a7b0e:	687b      	ldr	r3, [r7, #4]
 80a7b10:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80a7b14:	7bba      	ldrb	r2, [r7, #14]
 80a7b16:	687b      	ldr	r3, [r7, #4]
 80a7b18:	32ae      	adds	r2, #174	@ 0xae
 80a7b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7b1e:	689b      	ldr	r3, [r3, #8]
 80a7b20:	6839      	ldr	r1, [r7, #0]
 80a7b22:	6878      	ldr	r0, [r7, #4]
 80a7b24:	4798      	blx	r3
 80a7b26:	4603      	mov	r3, r0
 80a7b28:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80a7b2a:	e004      	b.n	80a7b36 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80a7b2c:	2303      	movs	r3, #3
 80a7b2e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80a7b30:	e001      	b.n	80a7b36 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80a7b32:	2303      	movs	r3, #3
 80a7b34:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80a7b36:	683b      	ldr	r3, [r7, #0]
 80a7b38:	88db      	ldrh	r3, [r3, #6]
 80a7b3a:	2b00      	cmp	r3, #0
 80a7b3c:	d110      	bne.n	80a7b60 <USBD_StdItfReq+0xc0>
 80a7b3e:	7bfb      	ldrb	r3, [r7, #15]
 80a7b40:	2b00      	cmp	r3, #0
 80a7b42:	d10d      	bne.n	80a7b60 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80a7b44:	6878      	ldr	r0, [r7, #4]
 80a7b46:	f000 fdfd 	bl	80a8744 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80a7b4a:	e009      	b.n	80a7b60 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80a7b4c:	6839      	ldr	r1, [r7, #0]
 80a7b4e:	6878      	ldr	r0, [r7, #4]
 80a7b50:	f000 fd21 	bl	80a8596 <USBD_CtlError>
          break;
 80a7b54:	e004      	b.n	80a7b60 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80a7b56:	6839      	ldr	r1, [r7, #0]
 80a7b58:	6878      	ldr	r0, [r7, #4]
 80a7b5a:	f000 fd1c 	bl	80a8596 <USBD_CtlError>
          break;
 80a7b5e:	e000      	b.n	80a7b62 <USBD_StdItfReq+0xc2>
          break;
 80a7b60:	bf00      	nop
      }
      break;
 80a7b62:	e004      	b.n	80a7b6e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80a7b64:	6839      	ldr	r1, [r7, #0]
 80a7b66:	6878      	ldr	r0, [r7, #4]
 80a7b68:	f000 fd15 	bl	80a8596 <USBD_CtlError>
      break;
 80a7b6c:	bf00      	nop
  }

  return ret;
 80a7b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 80a7b70:	4618      	mov	r0, r3
 80a7b72:	3710      	adds	r7, #16
 80a7b74:	46bd      	mov	sp, r7
 80a7b76:	bd80      	pop	{r7, pc}

080a7b78 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a7b78:	b580      	push	{r7, lr}
 80a7b7a:	b084      	sub	sp, #16
 80a7b7c:	af00      	add	r7, sp, #0
 80a7b7e:	6078      	str	r0, [r7, #4]
 80a7b80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80a7b82:	2300      	movs	r3, #0
 80a7b84:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80a7b86:	683b      	ldr	r3, [r7, #0]
 80a7b88:	889b      	ldrh	r3, [r3, #4]
 80a7b8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80a7b8c:	683b      	ldr	r3, [r7, #0]
 80a7b8e:	781b      	ldrb	r3, [r3, #0]
 80a7b90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80a7b94:	2b40      	cmp	r3, #64	@ 0x40
 80a7b96:	d007      	beq.n	80a7ba8 <USBD_StdEPReq+0x30>
 80a7b98:	2b40      	cmp	r3, #64	@ 0x40
 80a7b9a:	f200 817f 	bhi.w	80a7e9c <USBD_StdEPReq+0x324>
 80a7b9e:	2b00      	cmp	r3, #0
 80a7ba0:	d02a      	beq.n	80a7bf8 <USBD_StdEPReq+0x80>
 80a7ba2:	2b20      	cmp	r3, #32
 80a7ba4:	f040 817a 	bne.w	80a7e9c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80a7ba8:	7bbb      	ldrb	r3, [r7, #14]
 80a7baa:	4619      	mov	r1, r3
 80a7bac:	6878      	ldr	r0, [r7, #4]
 80a7bae:	f7ff fe85 	bl	80a78bc <USBD_CoreFindEP>
 80a7bb2:	4603      	mov	r3, r0
 80a7bb4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80a7bb6:	7b7b      	ldrb	r3, [r7, #13]
 80a7bb8:	2bff      	cmp	r3, #255	@ 0xff
 80a7bba:	f000 8174 	beq.w	80a7ea6 <USBD_StdEPReq+0x32e>
 80a7bbe:	7b7b      	ldrb	r3, [r7, #13]
 80a7bc0:	2b00      	cmp	r3, #0
 80a7bc2:	f040 8170 	bne.w	80a7ea6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80a7bc6:	7b7a      	ldrb	r2, [r7, #13]
 80a7bc8:	687b      	ldr	r3, [r7, #4]
 80a7bca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80a7bce:	7b7a      	ldrb	r2, [r7, #13]
 80a7bd0:	687b      	ldr	r3, [r7, #4]
 80a7bd2:	32ae      	adds	r2, #174	@ 0xae
 80a7bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7bd8:	689b      	ldr	r3, [r3, #8]
 80a7bda:	2b00      	cmp	r3, #0
 80a7bdc:	f000 8163 	beq.w	80a7ea6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80a7be0:	7b7a      	ldrb	r2, [r7, #13]
 80a7be2:	687b      	ldr	r3, [r7, #4]
 80a7be4:	32ae      	adds	r2, #174	@ 0xae
 80a7be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7bea:	689b      	ldr	r3, [r3, #8]
 80a7bec:	6839      	ldr	r1, [r7, #0]
 80a7bee:	6878      	ldr	r0, [r7, #4]
 80a7bf0:	4798      	blx	r3
 80a7bf2:	4603      	mov	r3, r0
 80a7bf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80a7bf6:	e156      	b.n	80a7ea6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80a7bf8:	683b      	ldr	r3, [r7, #0]
 80a7bfa:	785b      	ldrb	r3, [r3, #1]
 80a7bfc:	2b03      	cmp	r3, #3
 80a7bfe:	d008      	beq.n	80a7c12 <USBD_StdEPReq+0x9a>
 80a7c00:	2b03      	cmp	r3, #3
 80a7c02:	f300 8145 	bgt.w	80a7e90 <USBD_StdEPReq+0x318>
 80a7c06:	2b00      	cmp	r3, #0
 80a7c08:	f000 809b 	beq.w	80a7d42 <USBD_StdEPReq+0x1ca>
 80a7c0c:	2b01      	cmp	r3, #1
 80a7c0e:	d03c      	beq.n	80a7c8a <USBD_StdEPReq+0x112>
 80a7c10:	e13e      	b.n	80a7e90 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80a7c12:	687b      	ldr	r3, [r7, #4]
 80a7c14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a7c18:	b2db      	uxtb	r3, r3
 80a7c1a:	2b02      	cmp	r3, #2
 80a7c1c:	d002      	beq.n	80a7c24 <USBD_StdEPReq+0xac>
 80a7c1e:	2b03      	cmp	r3, #3
 80a7c20:	d016      	beq.n	80a7c50 <USBD_StdEPReq+0xd8>
 80a7c22:	e02c      	b.n	80a7c7e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80a7c24:	7bbb      	ldrb	r3, [r7, #14]
 80a7c26:	2b00      	cmp	r3, #0
 80a7c28:	d00d      	beq.n	80a7c46 <USBD_StdEPReq+0xce>
 80a7c2a:	7bbb      	ldrb	r3, [r7, #14]
 80a7c2c:	2b80      	cmp	r3, #128	@ 0x80
 80a7c2e:	d00a      	beq.n	80a7c46 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80a7c30:	7bbb      	ldrb	r3, [r7, #14]
 80a7c32:	4619      	mov	r1, r3
 80a7c34:	6878      	ldr	r0, [r7, #4]
 80a7c36:	f001 fa57 	bl	80a90e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80a7c3a:	2180      	movs	r1, #128	@ 0x80
 80a7c3c:	6878      	ldr	r0, [r7, #4]
 80a7c3e:	f001 fa53 	bl	80a90e8 <USBD_LL_StallEP>
 80a7c42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80a7c44:	e020      	b.n	80a7c88 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80a7c46:	6839      	ldr	r1, [r7, #0]
 80a7c48:	6878      	ldr	r0, [r7, #4]
 80a7c4a:	f000 fca4 	bl	80a8596 <USBD_CtlError>
              break;
 80a7c4e:	e01b      	b.n	80a7c88 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80a7c50:	683b      	ldr	r3, [r7, #0]
 80a7c52:	885b      	ldrh	r3, [r3, #2]
 80a7c54:	2b00      	cmp	r3, #0
 80a7c56:	d10e      	bne.n	80a7c76 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80a7c58:	7bbb      	ldrb	r3, [r7, #14]
 80a7c5a:	2b00      	cmp	r3, #0
 80a7c5c:	d00b      	beq.n	80a7c76 <USBD_StdEPReq+0xfe>
 80a7c5e:	7bbb      	ldrb	r3, [r7, #14]
 80a7c60:	2b80      	cmp	r3, #128	@ 0x80
 80a7c62:	d008      	beq.n	80a7c76 <USBD_StdEPReq+0xfe>
 80a7c64:	683b      	ldr	r3, [r7, #0]
 80a7c66:	88db      	ldrh	r3, [r3, #6]
 80a7c68:	2b00      	cmp	r3, #0
 80a7c6a:	d104      	bne.n	80a7c76 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80a7c6c:	7bbb      	ldrb	r3, [r7, #14]
 80a7c6e:	4619      	mov	r1, r3
 80a7c70:	6878      	ldr	r0, [r7, #4]
 80a7c72:	f001 fa39 	bl	80a90e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80a7c76:	6878      	ldr	r0, [r7, #4]
 80a7c78:	f000 fd64 	bl	80a8744 <USBD_CtlSendStatus>

              break;
 80a7c7c:	e004      	b.n	80a7c88 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80a7c7e:	6839      	ldr	r1, [r7, #0]
 80a7c80:	6878      	ldr	r0, [r7, #4]
 80a7c82:	f000 fc88 	bl	80a8596 <USBD_CtlError>
              break;
 80a7c86:	bf00      	nop
          }
          break;
 80a7c88:	e107      	b.n	80a7e9a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80a7c8a:	687b      	ldr	r3, [r7, #4]
 80a7c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a7c90:	b2db      	uxtb	r3, r3
 80a7c92:	2b02      	cmp	r3, #2
 80a7c94:	d002      	beq.n	80a7c9c <USBD_StdEPReq+0x124>
 80a7c96:	2b03      	cmp	r3, #3
 80a7c98:	d016      	beq.n	80a7cc8 <USBD_StdEPReq+0x150>
 80a7c9a:	e04b      	b.n	80a7d34 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80a7c9c:	7bbb      	ldrb	r3, [r7, #14]
 80a7c9e:	2b00      	cmp	r3, #0
 80a7ca0:	d00d      	beq.n	80a7cbe <USBD_StdEPReq+0x146>
 80a7ca2:	7bbb      	ldrb	r3, [r7, #14]
 80a7ca4:	2b80      	cmp	r3, #128	@ 0x80
 80a7ca6:	d00a      	beq.n	80a7cbe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80a7ca8:	7bbb      	ldrb	r3, [r7, #14]
 80a7caa:	4619      	mov	r1, r3
 80a7cac:	6878      	ldr	r0, [r7, #4]
 80a7cae:	f001 fa1b 	bl	80a90e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80a7cb2:	2180      	movs	r1, #128	@ 0x80
 80a7cb4:	6878      	ldr	r0, [r7, #4]
 80a7cb6:	f001 fa17 	bl	80a90e8 <USBD_LL_StallEP>
 80a7cba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80a7cbc:	e040      	b.n	80a7d40 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80a7cbe:	6839      	ldr	r1, [r7, #0]
 80a7cc0:	6878      	ldr	r0, [r7, #4]
 80a7cc2:	f000 fc68 	bl	80a8596 <USBD_CtlError>
              break;
 80a7cc6:	e03b      	b.n	80a7d40 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80a7cc8:	683b      	ldr	r3, [r7, #0]
 80a7cca:	885b      	ldrh	r3, [r3, #2]
 80a7ccc:	2b00      	cmp	r3, #0
 80a7cce:	d136      	bne.n	80a7d3e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80a7cd0:	7bbb      	ldrb	r3, [r7, #14]
 80a7cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80a7cd6:	2b00      	cmp	r3, #0
 80a7cd8:	d004      	beq.n	80a7ce4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80a7cda:	7bbb      	ldrb	r3, [r7, #14]
 80a7cdc:	4619      	mov	r1, r3
 80a7cde:	6878      	ldr	r0, [r7, #4]
 80a7ce0:	f001 fa21 	bl	80a9126 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80a7ce4:	6878      	ldr	r0, [r7, #4]
 80a7ce6:	f000 fd2d 	bl	80a8744 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80a7cea:	7bbb      	ldrb	r3, [r7, #14]
 80a7cec:	4619      	mov	r1, r3
 80a7cee:	6878      	ldr	r0, [r7, #4]
 80a7cf0:	f7ff fde4 	bl	80a78bc <USBD_CoreFindEP>
 80a7cf4:	4603      	mov	r3, r0
 80a7cf6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80a7cf8:	7b7b      	ldrb	r3, [r7, #13]
 80a7cfa:	2bff      	cmp	r3, #255	@ 0xff
 80a7cfc:	d01f      	beq.n	80a7d3e <USBD_StdEPReq+0x1c6>
 80a7cfe:	7b7b      	ldrb	r3, [r7, #13]
 80a7d00:	2b00      	cmp	r3, #0
 80a7d02:	d11c      	bne.n	80a7d3e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80a7d04:	7b7a      	ldrb	r2, [r7, #13]
 80a7d06:	687b      	ldr	r3, [r7, #4]
 80a7d08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80a7d0c:	7b7a      	ldrb	r2, [r7, #13]
 80a7d0e:	687b      	ldr	r3, [r7, #4]
 80a7d10:	32ae      	adds	r2, #174	@ 0xae
 80a7d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7d16:	689b      	ldr	r3, [r3, #8]
 80a7d18:	2b00      	cmp	r3, #0
 80a7d1a:	d010      	beq.n	80a7d3e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80a7d1c:	7b7a      	ldrb	r2, [r7, #13]
 80a7d1e:	687b      	ldr	r3, [r7, #4]
 80a7d20:	32ae      	adds	r2, #174	@ 0xae
 80a7d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7d26:	689b      	ldr	r3, [r3, #8]
 80a7d28:	6839      	ldr	r1, [r7, #0]
 80a7d2a:	6878      	ldr	r0, [r7, #4]
 80a7d2c:	4798      	blx	r3
 80a7d2e:	4603      	mov	r3, r0
 80a7d30:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80a7d32:	e004      	b.n	80a7d3e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80a7d34:	6839      	ldr	r1, [r7, #0]
 80a7d36:	6878      	ldr	r0, [r7, #4]
 80a7d38:	f000 fc2d 	bl	80a8596 <USBD_CtlError>
              break;
 80a7d3c:	e000      	b.n	80a7d40 <USBD_StdEPReq+0x1c8>
              break;
 80a7d3e:	bf00      	nop
          }
          break;
 80a7d40:	e0ab      	b.n	80a7e9a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80a7d42:	687b      	ldr	r3, [r7, #4]
 80a7d44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a7d48:	b2db      	uxtb	r3, r3
 80a7d4a:	2b02      	cmp	r3, #2
 80a7d4c:	d002      	beq.n	80a7d54 <USBD_StdEPReq+0x1dc>
 80a7d4e:	2b03      	cmp	r3, #3
 80a7d50:	d032      	beq.n	80a7db8 <USBD_StdEPReq+0x240>
 80a7d52:	e097      	b.n	80a7e84 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80a7d54:	7bbb      	ldrb	r3, [r7, #14]
 80a7d56:	2b00      	cmp	r3, #0
 80a7d58:	d007      	beq.n	80a7d6a <USBD_StdEPReq+0x1f2>
 80a7d5a:	7bbb      	ldrb	r3, [r7, #14]
 80a7d5c:	2b80      	cmp	r3, #128	@ 0x80
 80a7d5e:	d004      	beq.n	80a7d6a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80a7d60:	6839      	ldr	r1, [r7, #0]
 80a7d62:	6878      	ldr	r0, [r7, #4]
 80a7d64:	f000 fc17 	bl	80a8596 <USBD_CtlError>
                break;
 80a7d68:	e091      	b.n	80a7e8e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80a7d6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80a7d6e:	2b00      	cmp	r3, #0
 80a7d70:	da0b      	bge.n	80a7d8a <USBD_StdEPReq+0x212>
 80a7d72:	7bbb      	ldrb	r3, [r7, #14]
 80a7d74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80a7d78:	4613      	mov	r3, r2
 80a7d7a:	009b      	lsls	r3, r3, #2
 80a7d7c:	4413      	add	r3, r2
 80a7d7e:	009b      	lsls	r3, r3, #2
 80a7d80:	3310      	adds	r3, #16
 80a7d82:	687a      	ldr	r2, [r7, #4]
 80a7d84:	4413      	add	r3, r2
 80a7d86:	3304      	adds	r3, #4
 80a7d88:	e00b      	b.n	80a7da2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80a7d8a:	7bbb      	ldrb	r3, [r7, #14]
 80a7d8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80a7d90:	4613      	mov	r3, r2
 80a7d92:	009b      	lsls	r3, r3, #2
 80a7d94:	4413      	add	r3, r2
 80a7d96:	009b      	lsls	r3, r3, #2
 80a7d98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80a7d9c:	687a      	ldr	r2, [r7, #4]
 80a7d9e:	4413      	add	r3, r2
 80a7da0:	3304      	adds	r3, #4
 80a7da2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80a7da4:	68bb      	ldr	r3, [r7, #8]
 80a7da6:	2200      	movs	r2, #0
 80a7da8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80a7daa:	68bb      	ldr	r3, [r7, #8]
 80a7dac:	2202      	movs	r2, #2
 80a7dae:	4619      	mov	r1, r3
 80a7db0:	6878      	ldr	r0, [r7, #4]
 80a7db2:	f000 fc6d 	bl	80a8690 <USBD_CtlSendData>
              break;
 80a7db6:	e06a      	b.n	80a7e8e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80a7db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80a7dbc:	2b00      	cmp	r3, #0
 80a7dbe:	da11      	bge.n	80a7de4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80a7dc0:	7bbb      	ldrb	r3, [r7, #14]
 80a7dc2:	f003 020f 	and.w	r2, r3, #15
 80a7dc6:	6879      	ldr	r1, [r7, #4]
 80a7dc8:	4613      	mov	r3, r2
 80a7dca:	009b      	lsls	r3, r3, #2
 80a7dcc:	4413      	add	r3, r2
 80a7dce:	009b      	lsls	r3, r3, #2
 80a7dd0:	440b      	add	r3, r1
 80a7dd2:	3324      	adds	r3, #36	@ 0x24
 80a7dd4:	881b      	ldrh	r3, [r3, #0]
 80a7dd6:	2b00      	cmp	r3, #0
 80a7dd8:	d117      	bne.n	80a7e0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80a7dda:	6839      	ldr	r1, [r7, #0]
 80a7ddc:	6878      	ldr	r0, [r7, #4]
 80a7dde:	f000 fbda 	bl	80a8596 <USBD_CtlError>
                  break;
 80a7de2:	e054      	b.n	80a7e8e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80a7de4:	7bbb      	ldrb	r3, [r7, #14]
 80a7de6:	f003 020f 	and.w	r2, r3, #15
 80a7dea:	6879      	ldr	r1, [r7, #4]
 80a7dec:	4613      	mov	r3, r2
 80a7dee:	009b      	lsls	r3, r3, #2
 80a7df0:	4413      	add	r3, r2
 80a7df2:	009b      	lsls	r3, r3, #2
 80a7df4:	440b      	add	r3, r1
 80a7df6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80a7dfa:	881b      	ldrh	r3, [r3, #0]
 80a7dfc:	2b00      	cmp	r3, #0
 80a7dfe:	d104      	bne.n	80a7e0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80a7e00:	6839      	ldr	r1, [r7, #0]
 80a7e02:	6878      	ldr	r0, [r7, #4]
 80a7e04:	f000 fbc7 	bl	80a8596 <USBD_CtlError>
                  break;
 80a7e08:	e041      	b.n	80a7e8e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80a7e0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80a7e0e:	2b00      	cmp	r3, #0
 80a7e10:	da0b      	bge.n	80a7e2a <USBD_StdEPReq+0x2b2>
 80a7e12:	7bbb      	ldrb	r3, [r7, #14]
 80a7e14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80a7e18:	4613      	mov	r3, r2
 80a7e1a:	009b      	lsls	r3, r3, #2
 80a7e1c:	4413      	add	r3, r2
 80a7e1e:	009b      	lsls	r3, r3, #2
 80a7e20:	3310      	adds	r3, #16
 80a7e22:	687a      	ldr	r2, [r7, #4]
 80a7e24:	4413      	add	r3, r2
 80a7e26:	3304      	adds	r3, #4
 80a7e28:	e00b      	b.n	80a7e42 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80a7e2a:	7bbb      	ldrb	r3, [r7, #14]
 80a7e2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80a7e30:	4613      	mov	r3, r2
 80a7e32:	009b      	lsls	r3, r3, #2
 80a7e34:	4413      	add	r3, r2
 80a7e36:	009b      	lsls	r3, r3, #2
 80a7e38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80a7e3c:	687a      	ldr	r2, [r7, #4]
 80a7e3e:	4413      	add	r3, r2
 80a7e40:	3304      	adds	r3, #4
 80a7e42:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80a7e44:	7bbb      	ldrb	r3, [r7, #14]
 80a7e46:	2b00      	cmp	r3, #0
 80a7e48:	d002      	beq.n	80a7e50 <USBD_StdEPReq+0x2d8>
 80a7e4a:	7bbb      	ldrb	r3, [r7, #14]
 80a7e4c:	2b80      	cmp	r3, #128	@ 0x80
 80a7e4e:	d103      	bne.n	80a7e58 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80a7e50:	68bb      	ldr	r3, [r7, #8]
 80a7e52:	2200      	movs	r2, #0
 80a7e54:	601a      	str	r2, [r3, #0]
 80a7e56:	e00e      	b.n	80a7e76 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80a7e58:	7bbb      	ldrb	r3, [r7, #14]
 80a7e5a:	4619      	mov	r1, r3
 80a7e5c:	6878      	ldr	r0, [r7, #4]
 80a7e5e:	f001 f981 	bl	80a9164 <USBD_LL_IsStallEP>
 80a7e62:	4603      	mov	r3, r0
 80a7e64:	2b00      	cmp	r3, #0
 80a7e66:	d003      	beq.n	80a7e70 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80a7e68:	68bb      	ldr	r3, [r7, #8]
 80a7e6a:	2201      	movs	r2, #1
 80a7e6c:	601a      	str	r2, [r3, #0]
 80a7e6e:	e002      	b.n	80a7e76 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80a7e70:	68bb      	ldr	r3, [r7, #8]
 80a7e72:	2200      	movs	r2, #0
 80a7e74:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80a7e76:	68bb      	ldr	r3, [r7, #8]
 80a7e78:	2202      	movs	r2, #2
 80a7e7a:	4619      	mov	r1, r3
 80a7e7c:	6878      	ldr	r0, [r7, #4]
 80a7e7e:	f000 fc07 	bl	80a8690 <USBD_CtlSendData>
              break;
 80a7e82:	e004      	b.n	80a7e8e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80a7e84:	6839      	ldr	r1, [r7, #0]
 80a7e86:	6878      	ldr	r0, [r7, #4]
 80a7e88:	f000 fb85 	bl	80a8596 <USBD_CtlError>
              break;
 80a7e8c:	bf00      	nop
          }
          break;
 80a7e8e:	e004      	b.n	80a7e9a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80a7e90:	6839      	ldr	r1, [r7, #0]
 80a7e92:	6878      	ldr	r0, [r7, #4]
 80a7e94:	f000 fb7f 	bl	80a8596 <USBD_CtlError>
          break;
 80a7e98:	bf00      	nop
      }
      break;
 80a7e9a:	e005      	b.n	80a7ea8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80a7e9c:	6839      	ldr	r1, [r7, #0]
 80a7e9e:	6878      	ldr	r0, [r7, #4]
 80a7ea0:	f000 fb79 	bl	80a8596 <USBD_CtlError>
      break;
 80a7ea4:	e000      	b.n	80a7ea8 <USBD_StdEPReq+0x330>
      break;
 80a7ea6:	bf00      	nop
  }

  return ret;
 80a7ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 80a7eaa:	4618      	mov	r0, r3
 80a7eac:	3710      	adds	r7, #16
 80a7eae:	46bd      	mov	sp, r7
 80a7eb0:	bd80      	pop	{r7, pc}
	...

080a7eb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a7eb4:	b580      	push	{r7, lr}
 80a7eb6:	b084      	sub	sp, #16
 80a7eb8:	af00      	add	r7, sp, #0
 80a7eba:	6078      	str	r0, [r7, #4]
 80a7ebc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80a7ebe:	2300      	movs	r3, #0
 80a7ec0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80a7ec2:	2300      	movs	r3, #0
 80a7ec4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80a7ec6:	2300      	movs	r3, #0
 80a7ec8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80a7eca:	683b      	ldr	r3, [r7, #0]
 80a7ecc:	885b      	ldrh	r3, [r3, #2]
 80a7ece:	0a1b      	lsrs	r3, r3, #8
 80a7ed0:	b29b      	uxth	r3, r3
 80a7ed2:	3b01      	subs	r3, #1
 80a7ed4:	2b0e      	cmp	r3, #14
 80a7ed6:	f200 8152 	bhi.w	80a817e <USBD_GetDescriptor+0x2ca>
 80a7eda:	a201      	add	r2, pc, #4	@ (adr r2, 80a7ee0 <USBD_GetDescriptor+0x2c>)
 80a7edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a7ee0:	080a7f51 	.word	0x080a7f51
 80a7ee4:	080a7f69 	.word	0x080a7f69
 80a7ee8:	080a7fa9 	.word	0x080a7fa9
 80a7eec:	080a817f 	.word	0x080a817f
 80a7ef0:	080a817f 	.word	0x080a817f
 80a7ef4:	080a811f 	.word	0x080a811f
 80a7ef8:	080a814b 	.word	0x080a814b
 80a7efc:	080a817f 	.word	0x080a817f
 80a7f00:	080a817f 	.word	0x080a817f
 80a7f04:	080a817f 	.word	0x080a817f
 80a7f08:	080a817f 	.word	0x080a817f
 80a7f0c:	080a817f 	.word	0x080a817f
 80a7f10:	080a817f 	.word	0x080a817f
 80a7f14:	080a817f 	.word	0x080a817f
 80a7f18:	080a7f1d 	.word	0x080a7f1d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80a7f1c:	687b      	ldr	r3, [r7, #4]
 80a7f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7f22:	69db      	ldr	r3, [r3, #28]
 80a7f24:	2b00      	cmp	r3, #0
 80a7f26:	d00b      	beq.n	80a7f40 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80a7f28:	687b      	ldr	r3, [r7, #4]
 80a7f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7f2e:	69db      	ldr	r3, [r3, #28]
 80a7f30:	687a      	ldr	r2, [r7, #4]
 80a7f32:	7c12      	ldrb	r2, [r2, #16]
 80a7f34:	f107 0108 	add.w	r1, r7, #8
 80a7f38:	4610      	mov	r0, r2
 80a7f3a:	4798      	blx	r3
 80a7f3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80a7f3e:	e126      	b.n	80a818e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80a7f40:	6839      	ldr	r1, [r7, #0]
 80a7f42:	6878      	ldr	r0, [r7, #4]
 80a7f44:	f000 fb27 	bl	80a8596 <USBD_CtlError>
        err++;
 80a7f48:	7afb      	ldrb	r3, [r7, #11]
 80a7f4a:	3301      	adds	r3, #1
 80a7f4c:	72fb      	strb	r3, [r7, #11]
      break;
 80a7f4e:	e11e      	b.n	80a818e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80a7f50:	687b      	ldr	r3, [r7, #4]
 80a7f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7f56:	681b      	ldr	r3, [r3, #0]
 80a7f58:	687a      	ldr	r2, [r7, #4]
 80a7f5a:	7c12      	ldrb	r2, [r2, #16]
 80a7f5c:	f107 0108 	add.w	r1, r7, #8
 80a7f60:	4610      	mov	r0, r2
 80a7f62:	4798      	blx	r3
 80a7f64:	60f8      	str	r0, [r7, #12]
      break;
 80a7f66:	e112      	b.n	80a818e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80a7f68:	687b      	ldr	r3, [r7, #4]
 80a7f6a:	7c1b      	ldrb	r3, [r3, #16]
 80a7f6c:	2b00      	cmp	r3, #0
 80a7f6e:	d10d      	bne.n	80a7f8c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80a7f70:	687b      	ldr	r3, [r7, #4]
 80a7f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80a7f78:	f107 0208 	add.w	r2, r7, #8
 80a7f7c:	4610      	mov	r0, r2
 80a7f7e:	4798      	blx	r3
 80a7f80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80a7f82:	68fb      	ldr	r3, [r7, #12]
 80a7f84:	3301      	adds	r3, #1
 80a7f86:	2202      	movs	r2, #2
 80a7f88:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80a7f8a:	e100      	b.n	80a818e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80a7f8c:	687b      	ldr	r3, [r7, #4]
 80a7f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a7f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80a7f94:	f107 0208 	add.w	r2, r7, #8
 80a7f98:	4610      	mov	r0, r2
 80a7f9a:	4798      	blx	r3
 80a7f9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80a7f9e:	68fb      	ldr	r3, [r7, #12]
 80a7fa0:	3301      	adds	r3, #1
 80a7fa2:	2202      	movs	r2, #2
 80a7fa4:	701a      	strb	r2, [r3, #0]
      break;
 80a7fa6:	e0f2      	b.n	80a818e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80a7fa8:	683b      	ldr	r3, [r7, #0]
 80a7faa:	885b      	ldrh	r3, [r3, #2]
 80a7fac:	b2db      	uxtb	r3, r3
 80a7fae:	2b05      	cmp	r3, #5
 80a7fb0:	f200 80ac 	bhi.w	80a810c <USBD_GetDescriptor+0x258>
 80a7fb4:	a201      	add	r2, pc, #4	@ (adr r2, 80a7fbc <USBD_GetDescriptor+0x108>)
 80a7fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a7fba:	bf00      	nop
 80a7fbc:	080a7fd5 	.word	0x080a7fd5
 80a7fc0:	080a8009 	.word	0x080a8009
 80a7fc4:	080a803d 	.word	0x080a803d
 80a7fc8:	080a8071 	.word	0x080a8071
 80a7fcc:	080a80a5 	.word	0x080a80a5
 80a7fd0:	080a80d9 	.word	0x080a80d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80a7fd4:	687b      	ldr	r3, [r7, #4]
 80a7fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7fda:	685b      	ldr	r3, [r3, #4]
 80a7fdc:	2b00      	cmp	r3, #0
 80a7fde:	d00b      	beq.n	80a7ff8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80a7fe0:	687b      	ldr	r3, [r7, #4]
 80a7fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a7fe6:	685b      	ldr	r3, [r3, #4]
 80a7fe8:	687a      	ldr	r2, [r7, #4]
 80a7fea:	7c12      	ldrb	r2, [r2, #16]
 80a7fec:	f107 0108 	add.w	r1, r7, #8
 80a7ff0:	4610      	mov	r0, r2
 80a7ff2:	4798      	blx	r3
 80a7ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80a7ff6:	e091      	b.n	80a811c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80a7ff8:	6839      	ldr	r1, [r7, #0]
 80a7ffa:	6878      	ldr	r0, [r7, #4]
 80a7ffc:	f000 facb 	bl	80a8596 <USBD_CtlError>
            err++;
 80a8000:	7afb      	ldrb	r3, [r7, #11]
 80a8002:	3301      	adds	r3, #1
 80a8004:	72fb      	strb	r3, [r7, #11]
          break;
 80a8006:	e089      	b.n	80a811c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80a8008:	687b      	ldr	r3, [r7, #4]
 80a800a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a800e:	689b      	ldr	r3, [r3, #8]
 80a8010:	2b00      	cmp	r3, #0
 80a8012:	d00b      	beq.n	80a802c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80a8014:	687b      	ldr	r3, [r7, #4]
 80a8016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a801a:	689b      	ldr	r3, [r3, #8]
 80a801c:	687a      	ldr	r2, [r7, #4]
 80a801e:	7c12      	ldrb	r2, [r2, #16]
 80a8020:	f107 0108 	add.w	r1, r7, #8
 80a8024:	4610      	mov	r0, r2
 80a8026:	4798      	blx	r3
 80a8028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80a802a:	e077      	b.n	80a811c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80a802c:	6839      	ldr	r1, [r7, #0]
 80a802e:	6878      	ldr	r0, [r7, #4]
 80a8030:	f000 fab1 	bl	80a8596 <USBD_CtlError>
            err++;
 80a8034:	7afb      	ldrb	r3, [r7, #11]
 80a8036:	3301      	adds	r3, #1
 80a8038:	72fb      	strb	r3, [r7, #11]
          break;
 80a803a:	e06f      	b.n	80a811c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80a803c:	687b      	ldr	r3, [r7, #4]
 80a803e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a8042:	68db      	ldr	r3, [r3, #12]
 80a8044:	2b00      	cmp	r3, #0
 80a8046:	d00b      	beq.n	80a8060 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80a8048:	687b      	ldr	r3, [r7, #4]
 80a804a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a804e:	68db      	ldr	r3, [r3, #12]
 80a8050:	687a      	ldr	r2, [r7, #4]
 80a8052:	7c12      	ldrb	r2, [r2, #16]
 80a8054:	f107 0108 	add.w	r1, r7, #8
 80a8058:	4610      	mov	r0, r2
 80a805a:	4798      	blx	r3
 80a805c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80a805e:	e05d      	b.n	80a811c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80a8060:	6839      	ldr	r1, [r7, #0]
 80a8062:	6878      	ldr	r0, [r7, #4]
 80a8064:	f000 fa97 	bl	80a8596 <USBD_CtlError>
            err++;
 80a8068:	7afb      	ldrb	r3, [r7, #11]
 80a806a:	3301      	adds	r3, #1
 80a806c:	72fb      	strb	r3, [r7, #11]
          break;
 80a806e:	e055      	b.n	80a811c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80a8070:	687b      	ldr	r3, [r7, #4]
 80a8072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a8076:	691b      	ldr	r3, [r3, #16]
 80a8078:	2b00      	cmp	r3, #0
 80a807a:	d00b      	beq.n	80a8094 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80a807c:	687b      	ldr	r3, [r7, #4]
 80a807e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a8082:	691b      	ldr	r3, [r3, #16]
 80a8084:	687a      	ldr	r2, [r7, #4]
 80a8086:	7c12      	ldrb	r2, [r2, #16]
 80a8088:	f107 0108 	add.w	r1, r7, #8
 80a808c:	4610      	mov	r0, r2
 80a808e:	4798      	blx	r3
 80a8090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80a8092:	e043      	b.n	80a811c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80a8094:	6839      	ldr	r1, [r7, #0]
 80a8096:	6878      	ldr	r0, [r7, #4]
 80a8098:	f000 fa7d 	bl	80a8596 <USBD_CtlError>
            err++;
 80a809c:	7afb      	ldrb	r3, [r7, #11]
 80a809e:	3301      	adds	r3, #1
 80a80a0:	72fb      	strb	r3, [r7, #11]
          break;
 80a80a2:	e03b      	b.n	80a811c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80a80a4:	687b      	ldr	r3, [r7, #4]
 80a80a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a80aa:	695b      	ldr	r3, [r3, #20]
 80a80ac:	2b00      	cmp	r3, #0
 80a80ae:	d00b      	beq.n	80a80c8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80a80b0:	687b      	ldr	r3, [r7, #4]
 80a80b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a80b6:	695b      	ldr	r3, [r3, #20]
 80a80b8:	687a      	ldr	r2, [r7, #4]
 80a80ba:	7c12      	ldrb	r2, [r2, #16]
 80a80bc:	f107 0108 	add.w	r1, r7, #8
 80a80c0:	4610      	mov	r0, r2
 80a80c2:	4798      	blx	r3
 80a80c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80a80c6:	e029      	b.n	80a811c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80a80c8:	6839      	ldr	r1, [r7, #0]
 80a80ca:	6878      	ldr	r0, [r7, #4]
 80a80cc:	f000 fa63 	bl	80a8596 <USBD_CtlError>
            err++;
 80a80d0:	7afb      	ldrb	r3, [r7, #11]
 80a80d2:	3301      	adds	r3, #1
 80a80d4:	72fb      	strb	r3, [r7, #11]
          break;
 80a80d6:	e021      	b.n	80a811c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80a80d8:	687b      	ldr	r3, [r7, #4]
 80a80da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a80de:	699b      	ldr	r3, [r3, #24]
 80a80e0:	2b00      	cmp	r3, #0
 80a80e2:	d00b      	beq.n	80a80fc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80a80e4:	687b      	ldr	r3, [r7, #4]
 80a80e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80a80ea:	699b      	ldr	r3, [r3, #24]
 80a80ec:	687a      	ldr	r2, [r7, #4]
 80a80ee:	7c12      	ldrb	r2, [r2, #16]
 80a80f0:	f107 0108 	add.w	r1, r7, #8
 80a80f4:	4610      	mov	r0, r2
 80a80f6:	4798      	blx	r3
 80a80f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80a80fa:	e00f      	b.n	80a811c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80a80fc:	6839      	ldr	r1, [r7, #0]
 80a80fe:	6878      	ldr	r0, [r7, #4]
 80a8100:	f000 fa49 	bl	80a8596 <USBD_CtlError>
            err++;
 80a8104:	7afb      	ldrb	r3, [r7, #11]
 80a8106:	3301      	adds	r3, #1
 80a8108:	72fb      	strb	r3, [r7, #11]
          break;
 80a810a:	e007      	b.n	80a811c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80a810c:	6839      	ldr	r1, [r7, #0]
 80a810e:	6878      	ldr	r0, [r7, #4]
 80a8110:	f000 fa41 	bl	80a8596 <USBD_CtlError>
          err++;
 80a8114:	7afb      	ldrb	r3, [r7, #11]
 80a8116:	3301      	adds	r3, #1
 80a8118:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80a811a:	bf00      	nop
      }
      break;
 80a811c:	e037      	b.n	80a818e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80a811e:	687b      	ldr	r3, [r7, #4]
 80a8120:	7c1b      	ldrb	r3, [r3, #16]
 80a8122:	2b00      	cmp	r3, #0
 80a8124:	d109      	bne.n	80a813a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80a8126:	687b      	ldr	r3, [r7, #4]
 80a8128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a812c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80a812e:	f107 0208 	add.w	r2, r7, #8
 80a8132:	4610      	mov	r0, r2
 80a8134:	4798      	blx	r3
 80a8136:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80a8138:	e029      	b.n	80a818e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80a813a:	6839      	ldr	r1, [r7, #0]
 80a813c:	6878      	ldr	r0, [r7, #4]
 80a813e:	f000 fa2a 	bl	80a8596 <USBD_CtlError>
        err++;
 80a8142:	7afb      	ldrb	r3, [r7, #11]
 80a8144:	3301      	adds	r3, #1
 80a8146:	72fb      	strb	r3, [r7, #11]
      break;
 80a8148:	e021      	b.n	80a818e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80a814a:	687b      	ldr	r3, [r7, #4]
 80a814c:	7c1b      	ldrb	r3, [r3, #16]
 80a814e:	2b00      	cmp	r3, #0
 80a8150:	d10d      	bne.n	80a816e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80a8152:	687b      	ldr	r3, [r7, #4]
 80a8154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80a8158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80a815a:	f107 0208 	add.w	r2, r7, #8
 80a815e:	4610      	mov	r0, r2
 80a8160:	4798      	blx	r3
 80a8162:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80a8164:	68fb      	ldr	r3, [r7, #12]
 80a8166:	3301      	adds	r3, #1
 80a8168:	2207      	movs	r2, #7
 80a816a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80a816c:	e00f      	b.n	80a818e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80a816e:	6839      	ldr	r1, [r7, #0]
 80a8170:	6878      	ldr	r0, [r7, #4]
 80a8172:	f000 fa10 	bl	80a8596 <USBD_CtlError>
        err++;
 80a8176:	7afb      	ldrb	r3, [r7, #11]
 80a8178:	3301      	adds	r3, #1
 80a817a:	72fb      	strb	r3, [r7, #11]
      break;
 80a817c:	e007      	b.n	80a818e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80a817e:	6839      	ldr	r1, [r7, #0]
 80a8180:	6878      	ldr	r0, [r7, #4]
 80a8182:	f000 fa08 	bl	80a8596 <USBD_CtlError>
      err++;
 80a8186:	7afb      	ldrb	r3, [r7, #11]
 80a8188:	3301      	adds	r3, #1
 80a818a:	72fb      	strb	r3, [r7, #11]
      break;
 80a818c:	bf00      	nop
  }

  if (err != 0U)
 80a818e:	7afb      	ldrb	r3, [r7, #11]
 80a8190:	2b00      	cmp	r3, #0
 80a8192:	d11e      	bne.n	80a81d2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80a8194:	683b      	ldr	r3, [r7, #0]
 80a8196:	88db      	ldrh	r3, [r3, #6]
 80a8198:	2b00      	cmp	r3, #0
 80a819a:	d016      	beq.n	80a81ca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80a819c:	893b      	ldrh	r3, [r7, #8]
 80a819e:	2b00      	cmp	r3, #0
 80a81a0:	d00e      	beq.n	80a81c0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80a81a2:	683b      	ldr	r3, [r7, #0]
 80a81a4:	88da      	ldrh	r2, [r3, #6]
 80a81a6:	893b      	ldrh	r3, [r7, #8]
 80a81a8:	4293      	cmp	r3, r2
 80a81aa:	bf28      	it	cs
 80a81ac:	4613      	movcs	r3, r2
 80a81ae:	b29b      	uxth	r3, r3
 80a81b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80a81b2:	893b      	ldrh	r3, [r7, #8]
 80a81b4:	461a      	mov	r2, r3
 80a81b6:	68f9      	ldr	r1, [r7, #12]
 80a81b8:	6878      	ldr	r0, [r7, #4]
 80a81ba:	f000 fa69 	bl	80a8690 <USBD_CtlSendData>
 80a81be:	e009      	b.n	80a81d4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80a81c0:	6839      	ldr	r1, [r7, #0]
 80a81c2:	6878      	ldr	r0, [r7, #4]
 80a81c4:	f000 f9e7 	bl	80a8596 <USBD_CtlError>
 80a81c8:	e004      	b.n	80a81d4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80a81ca:	6878      	ldr	r0, [r7, #4]
 80a81cc:	f000 faba 	bl	80a8744 <USBD_CtlSendStatus>
 80a81d0:	e000      	b.n	80a81d4 <USBD_GetDescriptor+0x320>
    return;
 80a81d2:	bf00      	nop
  }
}
 80a81d4:	3710      	adds	r7, #16
 80a81d6:	46bd      	mov	sp, r7
 80a81d8:	bd80      	pop	{r7, pc}
 80a81da:	bf00      	nop

080a81dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a81dc:	b580      	push	{r7, lr}
 80a81de:	b084      	sub	sp, #16
 80a81e0:	af00      	add	r7, sp, #0
 80a81e2:	6078      	str	r0, [r7, #4]
 80a81e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80a81e6:	683b      	ldr	r3, [r7, #0]
 80a81e8:	889b      	ldrh	r3, [r3, #4]
 80a81ea:	2b00      	cmp	r3, #0
 80a81ec:	d131      	bne.n	80a8252 <USBD_SetAddress+0x76>
 80a81ee:	683b      	ldr	r3, [r7, #0]
 80a81f0:	88db      	ldrh	r3, [r3, #6]
 80a81f2:	2b00      	cmp	r3, #0
 80a81f4:	d12d      	bne.n	80a8252 <USBD_SetAddress+0x76>
 80a81f6:	683b      	ldr	r3, [r7, #0]
 80a81f8:	885b      	ldrh	r3, [r3, #2]
 80a81fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80a81fc:	d829      	bhi.n	80a8252 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80a81fe:	683b      	ldr	r3, [r7, #0]
 80a8200:	885b      	ldrh	r3, [r3, #2]
 80a8202:	b2db      	uxtb	r3, r3
 80a8204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80a8208:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a820a:	687b      	ldr	r3, [r7, #4]
 80a820c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a8210:	b2db      	uxtb	r3, r3
 80a8212:	2b03      	cmp	r3, #3
 80a8214:	d104      	bne.n	80a8220 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80a8216:	6839      	ldr	r1, [r7, #0]
 80a8218:	6878      	ldr	r0, [r7, #4]
 80a821a:	f000 f9bc 	bl	80a8596 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a821e:	e01d      	b.n	80a825c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80a8220:	687b      	ldr	r3, [r7, #4]
 80a8222:	7bfa      	ldrb	r2, [r7, #15]
 80a8224:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80a8228:	7bfb      	ldrb	r3, [r7, #15]
 80a822a:	4619      	mov	r1, r3
 80a822c:	6878      	ldr	r0, [r7, #4]
 80a822e:	f000 ffc5 	bl	80a91bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80a8232:	6878      	ldr	r0, [r7, #4]
 80a8234:	f000 fa86 	bl	80a8744 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80a8238:	7bfb      	ldrb	r3, [r7, #15]
 80a823a:	2b00      	cmp	r3, #0
 80a823c:	d004      	beq.n	80a8248 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80a823e:	687b      	ldr	r3, [r7, #4]
 80a8240:	2202      	movs	r2, #2
 80a8242:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a8246:	e009      	b.n	80a825c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80a8248:	687b      	ldr	r3, [r7, #4]
 80a824a:	2201      	movs	r2, #1
 80a824c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80a8250:	e004      	b.n	80a825c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80a8252:	6839      	ldr	r1, [r7, #0]
 80a8254:	6878      	ldr	r0, [r7, #4]
 80a8256:	f000 f99e 	bl	80a8596 <USBD_CtlError>
  }
}
 80a825a:	bf00      	nop
 80a825c:	bf00      	nop
 80a825e:	3710      	adds	r7, #16
 80a8260:	46bd      	mov	sp, r7
 80a8262:	bd80      	pop	{r7, pc}

080a8264 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a8264:	b580      	push	{r7, lr}
 80a8266:	b084      	sub	sp, #16
 80a8268:	af00      	add	r7, sp, #0
 80a826a:	6078      	str	r0, [r7, #4]
 80a826c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80a826e:	2300      	movs	r3, #0
 80a8270:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80a8272:	683b      	ldr	r3, [r7, #0]
 80a8274:	885b      	ldrh	r3, [r3, #2]
 80a8276:	b2da      	uxtb	r2, r3
 80a8278:	4b4e      	ldr	r3, [pc, #312]	@ (80a83b4 <USBD_SetConfig+0x150>)
 80a827a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80a827c:	4b4d      	ldr	r3, [pc, #308]	@ (80a83b4 <USBD_SetConfig+0x150>)
 80a827e:	781b      	ldrb	r3, [r3, #0]
 80a8280:	2b01      	cmp	r3, #1
 80a8282:	d905      	bls.n	80a8290 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80a8284:	6839      	ldr	r1, [r7, #0]
 80a8286:	6878      	ldr	r0, [r7, #4]
 80a8288:	f000 f985 	bl	80a8596 <USBD_CtlError>
    return USBD_FAIL;
 80a828c:	2303      	movs	r3, #3
 80a828e:	e08c      	b.n	80a83aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80a8290:	687b      	ldr	r3, [r7, #4]
 80a8292:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a8296:	b2db      	uxtb	r3, r3
 80a8298:	2b02      	cmp	r3, #2
 80a829a:	d002      	beq.n	80a82a2 <USBD_SetConfig+0x3e>
 80a829c:	2b03      	cmp	r3, #3
 80a829e:	d029      	beq.n	80a82f4 <USBD_SetConfig+0x90>
 80a82a0:	e075      	b.n	80a838e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80a82a2:	4b44      	ldr	r3, [pc, #272]	@ (80a83b4 <USBD_SetConfig+0x150>)
 80a82a4:	781b      	ldrb	r3, [r3, #0]
 80a82a6:	2b00      	cmp	r3, #0
 80a82a8:	d020      	beq.n	80a82ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80a82aa:	4b42      	ldr	r3, [pc, #264]	@ (80a83b4 <USBD_SetConfig+0x150>)
 80a82ac:	781b      	ldrb	r3, [r3, #0]
 80a82ae:	461a      	mov	r2, r3
 80a82b0:	687b      	ldr	r3, [r7, #4]
 80a82b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80a82b4:	4b3f      	ldr	r3, [pc, #252]	@ (80a83b4 <USBD_SetConfig+0x150>)
 80a82b6:	781b      	ldrb	r3, [r3, #0]
 80a82b8:	4619      	mov	r1, r3
 80a82ba:	6878      	ldr	r0, [r7, #4]
 80a82bc:	f7fe ffb9 	bl	80a7232 <USBD_SetClassConfig>
 80a82c0:	4603      	mov	r3, r0
 80a82c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80a82c4:	7bfb      	ldrb	r3, [r7, #15]
 80a82c6:	2b00      	cmp	r3, #0
 80a82c8:	d008      	beq.n	80a82dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80a82ca:	6839      	ldr	r1, [r7, #0]
 80a82cc:	6878      	ldr	r0, [r7, #4]
 80a82ce:	f000 f962 	bl	80a8596 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80a82d2:	687b      	ldr	r3, [r7, #4]
 80a82d4:	2202      	movs	r2, #2
 80a82d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80a82da:	e065      	b.n	80a83a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80a82dc:	6878      	ldr	r0, [r7, #4]
 80a82de:	f000 fa31 	bl	80a8744 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80a82e2:	687b      	ldr	r3, [r7, #4]
 80a82e4:	2203      	movs	r2, #3
 80a82e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80a82ea:	e05d      	b.n	80a83a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80a82ec:	6878      	ldr	r0, [r7, #4]
 80a82ee:	f000 fa29 	bl	80a8744 <USBD_CtlSendStatus>
      break;
 80a82f2:	e059      	b.n	80a83a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80a82f4:	4b2f      	ldr	r3, [pc, #188]	@ (80a83b4 <USBD_SetConfig+0x150>)
 80a82f6:	781b      	ldrb	r3, [r3, #0]
 80a82f8:	2b00      	cmp	r3, #0
 80a82fa:	d112      	bne.n	80a8322 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80a82fc:	687b      	ldr	r3, [r7, #4]
 80a82fe:	2202      	movs	r2, #2
 80a8300:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80a8304:	4b2b      	ldr	r3, [pc, #172]	@ (80a83b4 <USBD_SetConfig+0x150>)
 80a8306:	781b      	ldrb	r3, [r3, #0]
 80a8308:	461a      	mov	r2, r3
 80a830a:	687b      	ldr	r3, [r7, #4]
 80a830c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80a830e:	4b29      	ldr	r3, [pc, #164]	@ (80a83b4 <USBD_SetConfig+0x150>)
 80a8310:	781b      	ldrb	r3, [r3, #0]
 80a8312:	4619      	mov	r1, r3
 80a8314:	6878      	ldr	r0, [r7, #4]
 80a8316:	f7fe ffa8 	bl	80a726a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80a831a:	6878      	ldr	r0, [r7, #4]
 80a831c:	f000 fa12 	bl	80a8744 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80a8320:	e042      	b.n	80a83a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80a8322:	4b24      	ldr	r3, [pc, #144]	@ (80a83b4 <USBD_SetConfig+0x150>)
 80a8324:	781b      	ldrb	r3, [r3, #0]
 80a8326:	461a      	mov	r2, r3
 80a8328:	687b      	ldr	r3, [r7, #4]
 80a832a:	685b      	ldr	r3, [r3, #4]
 80a832c:	429a      	cmp	r2, r3
 80a832e:	d02a      	beq.n	80a8386 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80a8330:	687b      	ldr	r3, [r7, #4]
 80a8332:	685b      	ldr	r3, [r3, #4]
 80a8334:	b2db      	uxtb	r3, r3
 80a8336:	4619      	mov	r1, r3
 80a8338:	6878      	ldr	r0, [r7, #4]
 80a833a:	f7fe ff96 	bl	80a726a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80a833e:	4b1d      	ldr	r3, [pc, #116]	@ (80a83b4 <USBD_SetConfig+0x150>)
 80a8340:	781b      	ldrb	r3, [r3, #0]
 80a8342:	461a      	mov	r2, r3
 80a8344:	687b      	ldr	r3, [r7, #4]
 80a8346:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80a8348:	4b1a      	ldr	r3, [pc, #104]	@ (80a83b4 <USBD_SetConfig+0x150>)
 80a834a:	781b      	ldrb	r3, [r3, #0]
 80a834c:	4619      	mov	r1, r3
 80a834e:	6878      	ldr	r0, [r7, #4]
 80a8350:	f7fe ff6f 	bl	80a7232 <USBD_SetClassConfig>
 80a8354:	4603      	mov	r3, r0
 80a8356:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80a8358:	7bfb      	ldrb	r3, [r7, #15]
 80a835a:	2b00      	cmp	r3, #0
 80a835c:	d00f      	beq.n	80a837e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80a835e:	6839      	ldr	r1, [r7, #0]
 80a8360:	6878      	ldr	r0, [r7, #4]
 80a8362:	f000 f918 	bl	80a8596 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80a8366:	687b      	ldr	r3, [r7, #4]
 80a8368:	685b      	ldr	r3, [r3, #4]
 80a836a:	b2db      	uxtb	r3, r3
 80a836c:	4619      	mov	r1, r3
 80a836e:	6878      	ldr	r0, [r7, #4]
 80a8370:	f7fe ff7b 	bl	80a726a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80a8374:	687b      	ldr	r3, [r7, #4]
 80a8376:	2202      	movs	r2, #2
 80a8378:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80a837c:	e014      	b.n	80a83a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80a837e:	6878      	ldr	r0, [r7, #4]
 80a8380:	f000 f9e0 	bl	80a8744 <USBD_CtlSendStatus>
      break;
 80a8384:	e010      	b.n	80a83a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80a8386:	6878      	ldr	r0, [r7, #4]
 80a8388:	f000 f9dc 	bl	80a8744 <USBD_CtlSendStatus>
      break;
 80a838c:	e00c      	b.n	80a83a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80a838e:	6839      	ldr	r1, [r7, #0]
 80a8390:	6878      	ldr	r0, [r7, #4]
 80a8392:	f000 f900 	bl	80a8596 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80a8396:	4b07      	ldr	r3, [pc, #28]	@ (80a83b4 <USBD_SetConfig+0x150>)
 80a8398:	781b      	ldrb	r3, [r3, #0]
 80a839a:	4619      	mov	r1, r3
 80a839c:	6878      	ldr	r0, [r7, #4]
 80a839e:	f7fe ff64 	bl	80a726a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80a83a2:	2303      	movs	r3, #3
 80a83a4:	73fb      	strb	r3, [r7, #15]
      break;
 80a83a6:	bf00      	nop
  }

  return ret;
 80a83a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80a83aa:	4618      	mov	r0, r3
 80a83ac:	3710      	adds	r7, #16
 80a83ae:	46bd      	mov	sp, r7
 80a83b0:	bd80      	pop	{r7, pc}
 80a83b2:	bf00      	nop
 80a83b4:	24000198 	.word	0x24000198

080a83b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a83b8:	b580      	push	{r7, lr}
 80a83ba:	b082      	sub	sp, #8
 80a83bc:	af00      	add	r7, sp, #0
 80a83be:	6078      	str	r0, [r7, #4]
 80a83c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80a83c2:	683b      	ldr	r3, [r7, #0]
 80a83c4:	88db      	ldrh	r3, [r3, #6]
 80a83c6:	2b01      	cmp	r3, #1
 80a83c8:	d004      	beq.n	80a83d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80a83ca:	6839      	ldr	r1, [r7, #0]
 80a83cc:	6878      	ldr	r0, [r7, #4]
 80a83ce:	f000 f8e2 	bl	80a8596 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80a83d2:	e023      	b.n	80a841c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80a83d4:	687b      	ldr	r3, [r7, #4]
 80a83d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a83da:	b2db      	uxtb	r3, r3
 80a83dc:	2b02      	cmp	r3, #2
 80a83de:	dc02      	bgt.n	80a83e6 <USBD_GetConfig+0x2e>
 80a83e0:	2b00      	cmp	r3, #0
 80a83e2:	dc03      	bgt.n	80a83ec <USBD_GetConfig+0x34>
 80a83e4:	e015      	b.n	80a8412 <USBD_GetConfig+0x5a>
 80a83e6:	2b03      	cmp	r3, #3
 80a83e8:	d00b      	beq.n	80a8402 <USBD_GetConfig+0x4a>
 80a83ea:	e012      	b.n	80a8412 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80a83ec:	687b      	ldr	r3, [r7, #4]
 80a83ee:	2200      	movs	r2, #0
 80a83f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80a83f2:	687b      	ldr	r3, [r7, #4]
 80a83f4:	3308      	adds	r3, #8
 80a83f6:	2201      	movs	r2, #1
 80a83f8:	4619      	mov	r1, r3
 80a83fa:	6878      	ldr	r0, [r7, #4]
 80a83fc:	f000 f948 	bl	80a8690 <USBD_CtlSendData>
        break;
 80a8400:	e00c      	b.n	80a841c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80a8402:	687b      	ldr	r3, [r7, #4]
 80a8404:	3304      	adds	r3, #4
 80a8406:	2201      	movs	r2, #1
 80a8408:	4619      	mov	r1, r3
 80a840a:	6878      	ldr	r0, [r7, #4]
 80a840c:	f000 f940 	bl	80a8690 <USBD_CtlSendData>
        break;
 80a8410:	e004      	b.n	80a841c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80a8412:	6839      	ldr	r1, [r7, #0]
 80a8414:	6878      	ldr	r0, [r7, #4]
 80a8416:	f000 f8be 	bl	80a8596 <USBD_CtlError>
        break;
 80a841a:	bf00      	nop
}
 80a841c:	bf00      	nop
 80a841e:	3708      	adds	r7, #8
 80a8420:	46bd      	mov	sp, r7
 80a8422:	bd80      	pop	{r7, pc}

080a8424 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a8424:	b580      	push	{r7, lr}
 80a8426:	b082      	sub	sp, #8
 80a8428:	af00      	add	r7, sp, #0
 80a842a:	6078      	str	r0, [r7, #4]
 80a842c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80a842e:	687b      	ldr	r3, [r7, #4]
 80a8430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a8434:	b2db      	uxtb	r3, r3
 80a8436:	3b01      	subs	r3, #1
 80a8438:	2b02      	cmp	r3, #2
 80a843a:	d81e      	bhi.n	80a847a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80a843c:	683b      	ldr	r3, [r7, #0]
 80a843e:	88db      	ldrh	r3, [r3, #6]
 80a8440:	2b02      	cmp	r3, #2
 80a8442:	d004      	beq.n	80a844e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80a8444:	6839      	ldr	r1, [r7, #0]
 80a8446:	6878      	ldr	r0, [r7, #4]
 80a8448:	f000 f8a5 	bl	80a8596 <USBD_CtlError>
        break;
 80a844c:	e01a      	b.n	80a8484 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80a844e:	687b      	ldr	r3, [r7, #4]
 80a8450:	2201      	movs	r2, #1
 80a8452:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80a8454:	687b      	ldr	r3, [r7, #4]
 80a8456:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80a845a:	2b00      	cmp	r3, #0
 80a845c:	d005      	beq.n	80a846a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80a845e:	687b      	ldr	r3, [r7, #4]
 80a8460:	68db      	ldr	r3, [r3, #12]
 80a8462:	f043 0202 	orr.w	r2, r3, #2
 80a8466:	687b      	ldr	r3, [r7, #4]
 80a8468:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80a846a:	687b      	ldr	r3, [r7, #4]
 80a846c:	330c      	adds	r3, #12
 80a846e:	2202      	movs	r2, #2
 80a8470:	4619      	mov	r1, r3
 80a8472:	6878      	ldr	r0, [r7, #4]
 80a8474:	f000 f90c 	bl	80a8690 <USBD_CtlSendData>
      break;
 80a8478:	e004      	b.n	80a8484 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80a847a:	6839      	ldr	r1, [r7, #0]
 80a847c:	6878      	ldr	r0, [r7, #4]
 80a847e:	f000 f88a 	bl	80a8596 <USBD_CtlError>
      break;
 80a8482:	bf00      	nop
  }
}
 80a8484:	bf00      	nop
 80a8486:	3708      	adds	r7, #8
 80a8488:	46bd      	mov	sp, r7
 80a848a:	bd80      	pop	{r7, pc}

080a848c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a848c:	b580      	push	{r7, lr}
 80a848e:	b082      	sub	sp, #8
 80a8490:	af00      	add	r7, sp, #0
 80a8492:	6078      	str	r0, [r7, #4]
 80a8494:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80a8496:	683b      	ldr	r3, [r7, #0]
 80a8498:	885b      	ldrh	r3, [r3, #2]
 80a849a:	2b01      	cmp	r3, #1
 80a849c:	d107      	bne.n	80a84ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80a849e:	687b      	ldr	r3, [r7, #4]
 80a84a0:	2201      	movs	r2, #1
 80a84a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80a84a6:	6878      	ldr	r0, [r7, #4]
 80a84a8:	f000 f94c 	bl	80a8744 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80a84ac:	e013      	b.n	80a84d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80a84ae:	683b      	ldr	r3, [r7, #0]
 80a84b0:	885b      	ldrh	r3, [r3, #2]
 80a84b2:	2b02      	cmp	r3, #2
 80a84b4:	d10b      	bne.n	80a84ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80a84b6:	683b      	ldr	r3, [r7, #0]
 80a84b8:	889b      	ldrh	r3, [r3, #4]
 80a84ba:	0a1b      	lsrs	r3, r3, #8
 80a84bc:	b29b      	uxth	r3, r3
 80a84be:	b2da      	uxtb	r2, r3
 80a84c0:	687b      	ldr	r3, [r7, #4]
 80a84c2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80a84c6:	6878      	ldr	r0, [r7, #4]
 80a84c8:	f000 f93c 	bl	80a8744 <USBD_CtlSendStatus>
}
 80a84cc:	e003      	b.n	80a84d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80a84ce:	6839      	ldr	r1, [r7, #0]
 80a84d0:	6878      	ldr	r0, [r7, #4]
 80a84d2:	f000 f860 	bl	80a8596 <USBD_CtlError>
}
 80a84d6:	bf00      	nop
 80a84d8:	3708      	adds	r7, #8
 80a84da:	46bd      	mov	sp, r7
 80a84dc:	bd80      	pop	{r7, pc}

080a84de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a84de:	b580      	push	{r7, lr}
 80a84e0:	b082      	sub	sp, #8
 80a84e2:	af00      	add	r7, sp, #0
 80a84e4:	6078      	str	r0, [r7, #4]
 80a84e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80a84e8:	687b      	ldr	r3, [r7, #4]
 80a84ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80a84ee:	b2db      	uxtb	r3, r3
 80a84f0:	3b01      	subs	r3, #1
 80a84f2:	2b02      	cmp	r3, #2
 80a84f4:	d80b      	bhi.n	80a850e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80a84f6:	683b      	ldr	r3, [r7, #0]
 80a84f8:	885b      	ldrh	r3, [r3, #2]
 80a84fa:	2b01      	cmp	r3, #1
 80a84fc:	d10c      	bne.n	80a8518 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80a84fe:	687b      	ldr	r3, [r7, #4]
 80a8500:	2200      	movs	r2, #0
 80a8502:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80a8506:	6878      	ldr	r0, [r7, #4]
 80a8508:	f000 f91c 	bl	80a8744 <USBD_CtlSendStatus>
      }
      break;
 80a850c:	e004      	b.n	80a8518 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80a850e:	6839      	ldr	r1, [r7, #0]
 80a8510:	6878      	ldr	r0, [r7, #4]
 80a8512:	f000 f840 	bl	80a8596 <USBD_CtlError>
      break;
 80a8516:	e000      	b.n	80a851a <USBD_ClrFeature+0x3c>
      break;
 80a8518:	bf00      	nop
  }
}
 80a851a:	bf00      	nop
 80a851c:	3708      	adds	r7, #8
 80a851e:	46bd      	mov	sp, r7
 80a8520:	bd80      	pop	{r7, pc}

080a8522 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80a8522:	b580      	push	{r7, lr}
 80a8524:	b084      	sub	sp, #16
 80a8526:	af00      	add	r7, sp, #0
 80a8528:	6078      	str	r0, [r7, #4]
 80a852a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80a852c:	683b      	ldr	r3, [r7, #0]
 80a852e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80a8530:	68fb      	ldr	r3, [r7, #12]
 80a8532:	781a      	ldrb	r2, [r3, #0]
 80a8534:	687b      	ldr	r3, [r7, #4]
 80a8536:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80a8538:	68fb      	ldr	r3, [r7, #12]
 80a853a:	3301      	adds	r3, #1
 80a853c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80a853e:	68fb      	ldr	r3, [r7, #12]
 80a8540:	781a      	ldrb	r2, [r3, #0]
 80a8542:	687b      	ldr	r3, [r7, #4]
 80a8544:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80a8546:	68fb      	ldr	r3, [r7, #12]
 80a8548:	3301      	adds	r3, #1
 80a854a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80a854c:	68f8      	ldr	r0, [r7, #12]
 80a854e:	f7ff fa16 	bl	80a797e <SWAPBYTE>
 80a8552:	4603      	mov	r3, r0
 80a8554:	461a      	mov	r2, r3
 80a8556:	687b      	ldr	r3, [r7, #4]
 80a8558:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80a855a:	68fb      	ldr	r3, [r7, #12]
 80a855c:	3301      	adds	r3, #1
 80a855e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80a8560:	68fb      	ldr	r3, [r7, #12]
 80a8562:	3301      	adds	r3, #1
 80a8564:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80a8566:	68f8      	ldr	r0, [r7, #12]
 80a8568:	f7ff fa09 	bl	80a797e <SWAPBYTE>
 80a856c:	4603      	mov	r3, r0
 80a856e:	461a      	mov	r2, r3
 80a8570:	687b      	ldr	r3, [r7, #4]
 80a8572:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80a8574:	68fb      	ldr	r3, [r7, #12]
 80a8576:	3301      	adds	r3, #1
 80a8578:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80a857a:	68fb      	ldr	r3, [r7, #12]
 80a857c:	3301      	adds	r3, #1
 80a857e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80a8580:	68f8      	ldr	r0, [r7, #12]
 80a8582:	f7ff f9fc 	bl	80a797e <SWAPBYTE>
 80a8586:	4603      	mov	r3, r0
 80a8588:	461a      	mov	r2, r3
 80a858a:	687b      	ldr	r3, [r7, #4]
 80a858c:	80da      	strh	r2, [r3, #6]
}
 80a858e:	bf00      	nop
 80a8590:	3710      	adds	r7, #16
 80a8592:	46bd      	mov	sp, r7
 80a8594:	bd80      	pop	{r7, pc}

080a8596 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80a8596:	b580      	push	{r7, lr}
 80a8598:	b082      	sub	sp, #8
 80a859a:	af00      	add	r7, sp, #0
 80a859c:	6078      	str	r0, [r7, #4]
 80a859e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80a85a0:	2180      	movs	r1, #128	@ 0x80
 80a85a2:	6878      	ldr	r0, [r7, #4]
 80a85a4:	f000 fda0 	bl	80a90e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80a85a8:	2100      	movs	r1, #0
 80a85aa:	6878      	ldr	r0, [r7, #4]
 80a85ac:	f000 fd9c 	bl	80a90e8 <USBD_LL_StallEP>
}
 80a85b0:	bf00      	nop
 80a85b2:	3708      	adds	r7, #8
 80a85b4:	46bd      	mov	sp, r7
 80a85b6:	bd80      	pop	{r7, pc}

080a85b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80a85b8:	b580      	push	{r7, lr}
 80a85ba:	b086      	sub	sp, #24
 80a85bc:	af00      	add	r7, sp, #0
 80a85be:	60f8      	str	r0, [r7, #12]
 80a85c0:	60b9      	str	r1, [r7, #8]
 80a85c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80a85c4:	2300      	movs	r3, #0
 80a85c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80a85c8:	68fb      	ldr	r3, [r7, #12]
 80a85ca:	2b00      	cmp	r3, #0
 80a85cc:	d042      	beq.n	80a8654 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80a85ce:	68fb      	ldr	r3, [r7, #12]
 80a85d0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80a85d2:	6938      	ldr	r0, [r7, #16]
 80a85d4:	f000 f842 	bl	80a865c <USBD_GetLen>
 80a85d8:	4603      	mov	r3, r0
 80a85da:	3301      	adds	r3, #1
 80a85dc:	005b      	lsls	r3, r3, #1
 80a85de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80a85e2:	d808      	bhi.n	80a85f6 <USBD_GetString+0x3e>
 80a85e4:	6938      	ldr	r0, [r7, #16]
 80a85e6:	f000 f839 	bl	80a865c <USBD_GetLen>
 80a85ea:	4603      	mov	r3, r0
 80a85ec:	3301      	adds	r3, #1
 80a85ee:	b29b      	uxth	r3, r3
 80a85f0:	005b      	lsls	r3, r3, #1
 80a85f2:	b29a      	uxth	r2, r3
 80a85f4:	e001      	b.n	80a85fa <USBD_GetString+0x42>
 80a85f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80a85fa:	687b      	ldr	r3, [r7, #4]
 80a85fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80a85fe:	7dfb      	ldrb	r3, [r7, #23]
 80a8600:	68ba      	ldr	r2, [r7, #8]
 80a8602:	4413      	add	r3, r2
 80a8604:	687a      	ldr	r2, [r7, #4]
 80a8606:	7812      	ldrb	r2, [r2, #0]
 80a8608:	701a      	strb	r2, [r3, #0]
  idx++;
 80a860a:	7dfb      	ldrb	r3, [r7, #23]
 80a860c:	3301      	adds	r3, #1
 80a860e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80a8610:	7dfb      	ldrb	r3, [r7, #23]
 80a8612:	68ba      	ldr	r2, [r7, #8]
 80a8614:	4413      	add	r3, r2
 80a8616:	2203      	movs	r2, #3
 80a8618:	701a      	strb	r2, [r3, #0]
  idx++;
 80a861a:	7dfb      	ldrb	r3, [r7, #23]
 80a861c:	3301      	adds	r3, #1
 80a861e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80a8620:	e013      	b.n	80a864a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80a8622:	7dfb      	ldrb	r3, [r7, #23]
 80a8624:	68ba      	ldr	r2, [r7, #8]
 80a8626:	4413      	add	r3, r2
 80a8628:	693a      	ldr	r2, [r7, #16]
 80a862a:	7812      	ldrb	r2, [r2, #0]
 80a862c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80a862e:	693b      	ldr	r3, [r7, #16]
 80a8630:	3301      	adds	r3, #1
 80a8632:	613b      	str	r3, [r7, #16]
    idx++;
 80a8634:	7dfb      	ldrb	r3, [r7, #23]
 80a8636:	3301      	adds	r3, #1
 80a8638:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80a863a:	7dfb      	ldrb	r3, [r7, #23]
 80a863c:	68ba      	ldr	r2, [r7, #8]
 80a863e:	4413      	add	r3, r2
 80a8640:	2200      	movs	r2, #0
 80a8642:	701a      	strb	r2, [r3, #0]
    idx++;
 80a8644:	7dfb      	ldrb	r3, [r7, #23]
 80a8646:	3301      	adds	r3, #1
 80a8648:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80a864a:	693b      	ldr	r3, [r7, #16]
 80a864c:	781b      	ldrb	r3, [r3, #0]
 80a864e:	2b00      	cmp	r3, #0
 80a8650:	d1e7      	bne.n	80a8622 <USBD_GetString+0x6a>
 80a8652:	e000      	b.n	80a8656 <USBD_GetString+0x9e>
    return;
 80a8654:	bf00      	nop
  }
}
 80a8656:	3718      	adds	r7, #24
 80a8658:	46bd      	mov	sp, r7
 80a865a:	bd80      	pop	{r7, pc}

080a865c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80a865c:	b480      	push	{r7}
 80a865e:	b085      	sub	sp, #20
 80a8660:	af00      	add	r7, sp, #0
 80a8662:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80a8664:	2300      	movs	r3, #0
 80a8666:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80a8668:	687b      	ldr	r3, [r7, #4]
 80a866a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80a866c:	e005      	b.n	80a867a <USBD_GetLen+0x1e>
  {
    len++;
 80a866e:	7bfb      	ldrb	r3, [r7, #15]
 80a8670:	3301      	adds	r3, #1
 80a8672:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80a8674:	68bb      	ldr	r3, [r7, #8]
 80a8676:	3301      	adds	r3, #1
 80a8678:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80a867a:	68bb      	ldr	r3, [r7, #8]
 80a867c:	781b      	ldrb	r3, [r3, #0]
 80a867e:	2b00      	cmp	r3, #0
 80a8680:	d1f5      	bne.n	80a866e <USBD_GetLen+0x12>
  }

  return len;
 80a8682:	7bfb      	ldrb	r3, [r7, #15]
}
 80a8684:	4618      	mov	r0, r3
 80a8686:	3714      	adds	r7, #20
 80a8688:	46bd      	mov	sp, r7
 80a868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a868e:	4770      	bx	lr

080a8690 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80a8690:	b580      	push	{r7, lr}
 80a8692:	b084      	sub	sp, #16
 80a8694:	af00      	add	r7, sp, #0
 80a8696:	60f8      	str	r0, [r7, #12]
 80a8698:	60b9      	str	r1, [r7, #8]
 80a869a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80a869c:	68fb      	ldr	r3, [r7, #12]
 80a869e:	2202      	movs	r2, #2
 80a86a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80a86a4:	68fb      	ldr	r3, [r7, #12]
 80a86a6:	687a      	ldr	r2, [r7, #4]
 80a86a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80a86aa:	68fb      	ldr	r3, [r7, #12]
 80a86ac:	687a      	ldr	r2, [r7, #4]
 80a86ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80a86b0:	687b      	ldr	r3, [r7, #4]
 80a86b2:	68ba      	ldr	r2, [r7, #8]
 80a86b4:	2100      	movs	r1, #0
 80a86b6:	68f8      	ldr	r0, [r7, #12]
 80a86b8:	f000 fd9f 	bl	80a91fa <USBD_LL_Transmit>

  return USBD_OK;
 80a86bc:	2300      	movs	r3, #0
}
 80a86be:	4618      	mov	r0, r3
 80a86c0:	3710      	adds	r7, #16
 80a86c2:	46bd      	mov	sp, r7
 80a86c4:	bd80      	pop	{r7, pc}

080a86c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80a86c6:	b580      	push	{r7, lr}
 80a86c8:	b084      	sub	sp, #16
 80a86ca:	af00      	add	r7, sp, #0
 80a86cc:	60f8      	str	r0, [r7, #12]
 80a86ce:	60b9      	str	r1, [r7, #8]
 80a86d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80a86d2:	687b      	ldr	r3, [r7, #4]
 80a86d4:	68ba      	ldr	r2, [r7, #8]
 80a86d6:	2100      	movs	r1, #0
 80a86d8:	68f8      	ldr	r0, [r7, #12]
 80a86da:	f000 fd8e 	bl	80a91fa <USBD_LL_Transmit>

  return USBD_OK;
 80a86de:	2300      	movs	r3, #0
}
 80a86e0:	4618      	mov	r0, r3
 80a86e2:	3710      	adds	r7, #16
 80a86e4:	46bd      	mov	sp, r7
 80a86e6:	bd80      	pop	{r7, pc}

080a86e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80a86e8:	b580      	push	{r7, lr}
 80a86ea:	b084      	sub	sp, #16
 80a86ec:	af00      	add	r7, sp, #0
 80a86ee:	60f8      	str	r0, [r7, #12]
 80a86f0:	60b9      	str	r1, [r7, #8]
 80a86f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80a86f4:	68fb      	ldr	r3, [r7, #12]
 80a86f6:	2203      	movs	r2, #3
 80a86f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80a86fc:	68fb      	ldr	r3, [r7, #12]
 80a86fe:	687a      	ldr	r2, [r7, #4]
 80a8700:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80a8704:	68fb      	ldr	r3, [r7, #12]
 80a8706:	687a      	ldr	r2, [r7, #4]
 80a8708:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80a870c:	687b      	ldr	r3, [r7, #4]
 80a870e:	68ba      	ldr	r2, [r7, #8]
 80a8710:	2100      	movs	r1, #0
 80a8712:	68f8      	ldr	r0, [r7, #12]
 80a8714:	f000 fd92 	bl	80a923c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80a8718:	2300      	movs	r3, #0
}
 80a871a:	4618      	mov	r0, r3
 80a871c:	3710      	adds	r7, #16
 80a871e:	46bd      	mov	sp, r7
 80a8720:	bd80      	pop	{r7, pc}

080a8722 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80a8722:	b580      	push	{r7, lr}
 80a8724:	b084      	sub	sp, #16
 80a8726:	af00      	add	r7, sp, #0
 80a8728:	60f8      	str	r0, [r7, #12]
 80a872a:	60b9      	str	r1, [r7, #8]
 80a872c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80a872e:	687b      	ldr	r3, [r7, #4]
 80a8730:	68ba      	ldr	r2, [r7, #8]
 80a8732:	2100      	movs	r1, #0
 80a8734:	68f8      	ldr	r0, [r7, #12]
 80a8736:	f000 fd81 	bl	80a923c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80a873a:	2300      	movs	r3, #0
}
 80a873c:	4618      	mov	r0, r3
 80a873e:	3710      	adds	r7, #16
 80a8740:	46bd      	mov	sp, r7
 80a8742:	bd80      	pop	{r7, pc}

080a8744 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80a8744:	b580      	push	{r7, lr}
 80a8746:	b082      	sub	sp, #8
 80a8748:	af00      	add	r7, sp, #0
 80a874a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80a874c:	687b      	ldr	r3, [r7, #4]
 80a874e:	2204      	movs	r2, #4
 80a8750:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80a8754:	2300      	movs	r3, #0
 80a8756:	2200      	movs	r2, #0
 80a8758:	2100      	movs	r1, #0
 80a875a:	6878      	ldr	r0, [r7, #4]
 80a875c:	f000 fd4d 	bl	80a91fa <USBD_LL_Transmit>

  return USBD_OK;
 80a8760:	2300      	movs	r3, #0
}
 80a8762:	4618      	mov	r0, r3
 80a8764:	3708      	adds	r7, #8
 80a8766:	46bd      	mov	sp, r7
 80a8768:	bd80      	pop	{r7, pc}

080a876a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80a876a:	b580      	push	{r7, lr}
 80a876c:	b082      	sub	sp, #8
 80a876e:	af00      	add	r7, sp, #0
 80a8770:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80a8772:	687b      	ldr	r3, [r7, #4]
 80a8774:	2205      	movs	r2, #5
 80a8776:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80a877a:	2300      	movs	r3, #0
 80a877c:	2200      	movs	r2, #0
 80a877e:	2100      	movs	r1, #0
 80a8780:	6878      	ldr	r0, [r7, #4]
 80a8782:	f000 fd5b 	bl	80a923c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80a8786:	2300      	movs	r3, #0
}
 80a8788:	4618      	mov	r0, r3
 80a878a:	3708      	adds	r7, #8
 80a878c:	46bd      	mov	sp, r7
 80a878e:	bd80      	pop	{r7, pc}

080a8790 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80a8790:	b580      	push	{r7, lr}
 80a8792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80a8794:	2201      	movs	r2, #1
 80a8796:	4913      	ldr	r1, [pc, #76]	@ (80a87e4 <MX_USB_DEVICE_Init+0x54>)
 80a8798:	4813      	ldr	r0, [pc, #76]	@ (80a87e8 <MX_USB_DEVICE_Init+0x58>)
 80a879a:	f7fe fccd 	bl	80a7138 <USBD_Init>
 80a879e:	4603      	mov	r3, r0
 80a87a0:	2b00      	cmp	r3, #0
 80a87a2:	d001      	beq.n	80a87a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80a87a4:	f7f8 f8ac 	bl	80a0900 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80a87a8:	4910      	ldr	r1, [pc, #64]	@ (80a87ec <MX_USB_DEVICE_Init+0x5c>)
 80a87aa:	480f      	ldr	r0, [pc, #60]	@ (80a87e8 <MX_USB_DEVICE_Init+0x58>)
 80a87ac:	f7fe fcf4 	bl	80a7198 <USBD_RegisterClass>
 80a87b0:	4603      	mov	r3, r0
 80a87b2:	2b00      	cmp	r3, #0
 80a87b4:	d001      	beq.n	80a87ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80a87b6:	f7f8 f8a3 	bl	80a0900 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80a87ba:	490d      	ldr	r1, [pc, #52]	@ (80a87f0 <MX_USB_DEVICE_Init+0x60>)
 80a87bc:	480a      	ldr	r0, [pc, #40]	@ (80a87e8 <MX_USB_DEVICE_Init+0x58>)
 80a87be:	f7fe fc2b 	bl	80a7018 <USBD_CDC_RegisterInterface>
 80a87c2:	4603      	mov	r3, r0
 80a87c4:	2b00      	cmp	r3, #0
 80a87c6:	d001      	beq.n	80a87cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80a87c8:	f7f8 f89a 	bl	80a0900 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80a87cc:	4806      	ldr	r0, [pc, #24]	@ (80a87e8 <MX_USB_DEVICE_Init+0x58>)
 80a87ce:	f7fe fd19 	bl	80a7204 <USBD_Start>
 80a87d2:	4603      	mov	r3, r0
 80a87d4:	2b00      	cmp	r3, #0
 80a87d6:	d001      	beq.n	80a87dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80a87d8:	f7f8 f892 	bl	80a0900 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80a87dc:	f7fa f8e2 	bl	80a29a4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80a87e0:	bf00      	nop
 80a87e2:	bd80      	pop	{r7, pc}
 80a87e4:	240000b0 	.word	0x240000b0
 80a87e8:	2400019c 	.word	0x2400019c
 80a87ec:	2400001c 	.word	0x2400001c
 80a87f0:	2400009c 	.word	0x2400009c

080a87f4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80a87f4:	b580      	push	{r7, lr}
 80a87f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80a87f8:	2200      	movs	r2, #0
 80a87fa:	4905      	ldr	r1, [pc, #20]	@ (80a8810 <CDC_Init_HS+0x1c>)
 80a87fc:	4805      	ldr	r0, [pc, #20]	@ (80a8814 <CDC_Init_HS+0x20>)
 80a87fe:	f7fe fc25 	bl	80a704c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80a8802:	4905      	ldr	r1, [pc, #20]	@ (80a8818 <CDC_Init_HS+0x24>)
 80a8804:	4803      	ldr	r0, [pc, #12]	@ (80a8814 <CDC_Init_HS+0x20>)
 80a8806:	f7fe fc43 	bl	80a7090 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80a880a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80a880c:	4618      	mov	r0, r3
 80a880e:	bd80      	pop	{r7, pc}
 80a8810:	24000c78 	.word	0x24000c78
 80a8814:	2400019c 	.word	0x2400019c
 80a8818:	24000478 	.word	0x24000478

080a881c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80a881c:	b480      	push	{r7}
 80a881e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80a8820:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80a8822:	4618      	mov	r0, r3
 80a8824:	46bd      	mov	sp, r7
 80a8826:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a882a:	4770      	bx	lr

080a882c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80a882c:	b480      	push	{r7}
 80a882e:	b083      	sub	sp, #12
 80a8830:	af00      	add	r7, sp, #0
 80a8832:	4603      	mov	r3, r0
 80a8834:	6039      	str	r1, [r7, #0]
 80a8836:	71fb      	strb	r3, [r7, #7]
 80a8838:	4613      	mov	r3, r2
 80a883a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80a883c:	79fb      	ldrb	r3, [r7, #7]
 80a883e:	2b23      	cmp	r3, #35	@ 0x23
 80a8840:	d84a      	bhi.n	80a88d8 <CDC_Control_HS+0xac>
 80a8842:	a201      	add	r2, pc, #4	@ (adr r2, 80a8848 <CDC_Control_HS+0x1c>)
 80a8844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a8848:	080a88d9 	.word	0x080a88d9
 80a884c:	080a88d9 	.word	0x080a88d9
 80a8850:	080a88d9 	.word	0x080a88d9
 80a8854:	080a88d9 	.word	0x080a88d9
 80a8858:	080a88d9 	.word	0x080a88d9
 80a885c:	080a88d9 	.word	0x080a88d9
 80a8860:	080a88d9 	.word	0x080a88d9
 80a8864:	080a88d9 	.word	0x080a88d9
 80a8868:	080a88d9 	.word	0x080a88d9
 80a886c:	080a88d9 	.word	0x080a88d9
 80a8870:	080a88d9 	.word	0x080a88d9
 80a8874:	080a88d9 	.word	0x080a88d9
 80a8878:	080a88d9 	.word	0x080a88d9
 80a887c:	080a88d9 	.word	0x080a88d9
 80a8880:	080a88d9 	.word	0x080a88d9
 80a8884:	080a88d9 	.word	0x080a88d9
 80a8888:	080a88d9 	.word	0x080a88d9
 80a888c:	080a88d9 	.word	0x080a88d9
 80a8890:	080a88d9 	.word	0x080a88d9
 80a8894:	080a88d9 	.word	0x080a88d9
 80a8898:	080a88d9 	.word	0x080a88d9
 80a889c:	080a88d9 	.word	0x080a88d9
 80a88a0:	080a88d9 	.word	0x080a88d9
 80a88a4:	080a88d9 	.word	0x080a88d9
 80a88a8:	080a88d9 	.word	0x080a88d9
 80a88ac:	080a88d9 	.word	0x080a88d9
 80a88b0:	080a88d9 	.word	0x080a88d9
 80a88b4:	080a88d9 	.word	0x080a88d9
 80a88b8:	080a88d9 	.word	0x080a88d9
 80a88bc:	080a88d9 	.word	0x080a88d9
 80a88c0:	080a88d9 	.word	0x080a88d9
 80a88c4:	080a88d9 	.word	0x080a88d9
 80a88c8:	080a88d9 	.word	0x080a88d9
 80a88cc:	080a88d9 	.word	0x080a88d9
 80a88d0:	080a88d9 	.word	0x080a88d9
 80a88d4:	080a88d9 	.word	0x080a88d9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80a88d8:	bf00      	nop
  }

  return (USBD_OK);
 80a88da:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80a88dc:	4618      	mov	r0, r3
 80a88de:	370c      	adds	r7, #12
 80a88e0:	46bd      	mov	sp, r7
 80a88e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a88e6:	4770      	bx	lr

080a88e8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80a88e8:	b580      	push	{r7, lr}
 80a88ea:	b082      	sub	sp, #8
 80a88ec:	af00      	add	r7, sp, #0
 80a88ee:	6078      	str	r0, [r7, #4]
 80a88f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80a88f2:	6879      	ldr	r1, [r7, #4]
 80a88f4:	4805      	ldr	r0, [pc, #20]	@ (80a890c <CDC_Receive_HS+0x24>)
 80a88f6:	f7fe fbcb 	bl	80a7090 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80a88fa:	4804      	ldr	r0, [pc, #16]	@ (80a890c <CDC_Receive_HS+0x24>)
 80a88fc:	f7fe fbe6 	bl	80a70cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80a8900:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80a8902:	4618      	mov	r0, r3
 80a8904:	3708      	adds	r7, #8
 80a8906:	46bd      	mov	sp, r7
 80a8908:	bd80      	pop	{r7, pc}
 80a890a:	bf00      	nop
 80a890c:	2400019c 	.word	0x2400019c

080a8910 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80a8910:	b480      	push	{r7}
 80a8912:	b087      	sub	sp, #28
 80a8914:	af00      	add	r7, sp, #0
 80a8916:	60f8      	str	r0, [r7, #12]
 80a8918:	60b9      	str	r1, [r7, #8]
 80a891a:	4613      	mov	r3, r2
 80a891c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80a891e:	2300      	movs	r3, #0
 80a8920:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80a8922:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80a8926:	4618      	mov	r0, r3
 80a8928:	371c      	adds	r7, #28
 80a892a:	46bd      	mov	sp, r7
 80a892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a8930:	4770      	bx	lr
	...

080a8934 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80a8934:	b480      	push	{r7}
 80a8936:	b083      	sub	sp, #12
 80a8938:	af00      	add	r7, sp, #0
 80a893a:	4603      	mov	r3, r0
 80a893c:	6039      	str	r1, [r7, #0]
 80a893e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80a8940:	683b      	ldr	r3, [r7, #0]
 80a8942:	2212      	movs	r2, #18
 80a8944:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80a8946:	4b03      	ldr	r3, [pc, #12]	@ (80a8954 <USBD_HS_DeviceDescriptor+0x20>)
}
 80a8948:	4618      	mov	r0, r3
 80a894a:	370c      	adds	r7, #12
 80a894c:	46bd      	mov	sp, r7
 80a894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a8952:	4770      	bx	lr
 80a8954:	240000d0 	.word	0x240000d0

080a8958 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80a8958:	b480      	push	{r7}
 80a895a:	b083      	sub	sp, #12
 80a895c:	af00      	add	r7, sp, #0
 80a895e:	4603      	mov	r3, r0
 80a8960:	6039      	str	r1, [r7, #0]
 80a8962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80a8964:	683b      	ldr	r3, [r7, #0]
 80a8966:	2204      	movs	r2, #4
 80a8968:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80a896a:	4b03      	ldr	r3, [pc, #12]	@ (80a8978 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80a896c:	4618      	mov	r0, r3
 80a896e:	370c      	adds	r7, #12
 80a8970:	46bd      	mov	sp, r7
 80a8972:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a8976:	4770      	bx	lr
 80a8978:	240000e4 	.word	0x240000e4

080a897c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80a897c:	b580      	push	{r7, lr}
 80a897e:	b082      	sub	sp, #8
 80a8980:	af00      	add	r7, sp, #0
 80a8982:	4603      	mov	r3, r0
 80a8984:	6039      	str	r1, [r7, #0]
 80a8986:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80a8988:	79fb      	ldrb	r3, [r7, #7]
 80a898a:	2b00      	cmp	r3, #0
 80a898c:	d105      	bne.n	80a899a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80a898e:	683a      	ldr	r2, [r7, #0]
 80a8990:	4907      	ldr	r1, [pc, #28]	@ (80a89b0 <USBD_HS_ProductStrDescriptor+0x34>)
 80a8992:	4808      	ldr	r0, [pc, #32]	@ (80a89b4 <USBD_HS_ProductStrDescriptor+0x38>)
 80a8994:	f7ff fe10 	bl	80a85b8 <USBD_GetString>
 80a8998:	e004      	b.n	80a89a4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80a899a:	683a      	ldr	r2, [r7, #0]
 80a899c:	4904      	ldr	r1, [pc, #16]	@ (80a89b0 <USBD_HS_ProductStrDescriptor+0x34>)
 80a899e:	4805      	ldr	r0, [pc, #20]	@ (80a89b4 <USBD_HS_ProductStrDescriptor+0x38>)
 80a89a0:	f7ff fe0a 	bl	80a85b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80a89a4:	4b02      	ldr	r3, [pc, #8]	@ (80a89b0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80a89a6:	4618      	mov	r0, r3
 80a89a8:	3708      	adds	r7, #8
 80a89aa:	46bd      	mov	sp, r7
 80a89ac:	bd80      	pop	{r7, pc}
 80a89ae:	bf00      	nop
 80a89b0:	24001478 	.word	0x24001478
 80a89b4:	080aa208 	.word	0x080aa208

080a89b8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80a89b8:	b580      	push	{r7, lr}
 80a89ba:	b082      	sub	sp, #8
 80a89bc:	af00      	add	r7, sp, #0
 80a89be:	4603      	mov	r3, r0
 80a89c0:	6039      	str	r1, [r7, #0]
 80a89c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80a89c4:	683a      	ldr	r2, [r7, #0]
 80a89c6:	4904      	ldr	r1, [pc, #16]	@ (80a89d8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80a89c8:	4804      	ldr	r0, [pc, #16]	@ (80a89dc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80a89ca:	f7ff fdf5 	bl	80a85b8 <USBD_GetString>
  return USBD_StrDesc;
 80a89ce:	4b02      	ldr	r3, [pc, #8]	@ (80a89d8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80a89d0:	4618      	mov	r0, r3
 80a89d2:	3708      	adds	r7, #8
 80a89d4:	46bd      	mov	sp, r7
 80a89d6:	bd80      	pop	{r7, pc}
 80a89d8:	24001478 	.word	0x24001478
 80a89dc:	080aa220 	.word	0x080aa220

080a89e0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80a89e0:	b580      	push	{r7, lr}
 80a89e2:	b082      	sub	sp, #8
 80a89e4:	af00      	add	r7, sp, #0
 80a89e6:	4603      	mov	r3, r0
 80a89e8:	6039      	str	r1, [r7, #0]
 80a89ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80a89ec:	683b      	ldr	r3, [r7, #0]
 80a89ee:	221a      	movs	r2, #26
 80a89f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80a89f2:	f000 f843 	bl	80a8a7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80a89f6:	4b02      	ldr	r3, [pc, #8]	@ (80a8a00 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80a89f8:	4618      	mov	r0, r3
 80a89fa:	3708      	adds	r7, #8
 80a89fc:	46bd      	mov	sp, r7
 80a89fe:	bd80      	pop	{r7, pc}
 80a8a00:	240000e8 	.word	0x240000e8

080a8a04 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80a8a04:	b580      	push	{r7, lr}
 80a8a06:	b082      	sub	sp, #8
 80a8a08:	af00      	add	r7, sp, #0
 80a8a0a:	4603      	mov	r3, r0
 80a8a0c:	6039      	str	r1, [r7, #0]
 80a8a0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80a8a10:	79fb      	ldrb	r3, [r7, #7]
 80a8a12:	2b00      	cmp	r3, #0
 80a8a14:	d105      	bne.n	80a8a22 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80a8a16:	683a      	ldr	r2, [r7, #0]
 80a8a18:	4907      	ldr	r1, [pc, #28]	@ (80a8a38 <USBD_HS_ConfigStrDescriptor+0x34>)
 80a8a1a:	4808      	ldr	r0, [pc, #32]	@ (80a8a3c <USBD_HS_ConfigStrDescriptor+0x38>)
 80a8a1c:	f7ff fdcc 	bl	80a85b8 <USBD_GetString>
 80a8a20:	e004      	b.n	80a8a2c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80a8a22:	683a      	ldr	r2, [r7, #0]
 80a8a24:	4904      	ldr	r1, [pc, #16]	@ (80a8a38 <USBD_HS_ConfigStrDescriptor+0x34>)
 80a8a26:	4805      	ldr	r0, [pc, #20]	@ (80a8a3c <USBD_HS_ConfigStrDescriptor+0x38>)
 80a8a28:	f7ff fdc6 	bl	80a85b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80a8a2c:	4b02      	ldr	r3, [pc, #8]	@ (80a8a38 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80a8a2e:	4618      	mov	r0, r3
 80a8a30:	3708      	adds	r7, #8
 80a8a32:	46bd      	mov	sp, r7
 80a8a34:	bd80      	pop	{r7, pc}
 80a8a36:	bf00      	nop
 80a8a38:	24001478 	.word	0x24001478
 80a8a3c:	080aa234 	.word	0x080aa234

080a8a40 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80a8a40:	b580      	push	{r7, lr}
 80a8a42:	b082      	sub	sp, #8
 80a8a44:	af00      	add	r7, sp, #0
 80a8a46:	4603      	mov	r3, r0
 80a8a48:	6039      	str	r1, [r7, #0]
 80a8a4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80a8a4c:	79fb      	ldrb	r3, [r7, #7]
 80a8a4e:	2b00      	cmp	r3, #0
 80a8a50:	d105      	bne.n	80a8a5e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80a8a52:	683a      	ldr	r2, [r7, #0]
 80a8a54:	4907      	ldr	r1, [pc, #28]	@ (80a8a74 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80a8a56:	4808      	ldr	r0, [pc, #32]	@ (80a8a78 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80a8a58:	f7ff fdae 	bl	80a85b8 <USBD_GetString>
 80a8a5c:	e004      	b.n	80a8a68 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80a8a5e:	683a      	ldr	r2, [r7, #0]
 80a8a60:	4904      	ldr	r1, [pc, #16]	@ (80a8a74 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80a8a62:	4805      	ldr	r0, [pc, #20]	@ (80a8a78 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80a8a64:	f7ff fda8 	bl	80a85b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80a8a68:	4b02      	ldr	r3, [pc, #8]	@ (80a8a74 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80a8a6a:	4618      	mov	r0, r3
 80a8a6c:	3708      	adds	r7, #8
 80a8a6e:	46bd      	mov	sp, r7
 80a8a70:	bd80      	pop	{r7, pc}
 80a8a72:	bf00      	nop
 80a8a74:	24001478 	.word	0x24001478
 80a8a78:	080aa240 	.word	0x080aa240

080a8a7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80a8a7c:	b580      	push	{r7, lr}
 80a8a7e:	b084      	sub	sp, #16
 80a8a80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80a8a82:	4b0f      	ldr	r3, [pc, #60]	@ (80a8ac0 <Get_SerialNum+0x44>)
 80a8a84:	681b      	ldr	r3, [r3, #0]
 80a8a86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80a8a88:	4b0e      	ldr	r3, [pc, #56]	@ (80a8ac4 <Get_SerialNum+0x48>)
 80a8a8a:	681b      	ldr	r3, [r3, #0]
 80a8a8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80a8a8e:	4b0e      	ldr	r3, [pc, #56]	@ (80a8ac8 <Get_SerialNum+0x4c>)
 80a8a90:	681b      	ldr	r3, [r3, #0]
 80a8a92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80a8a94:	68fa      	ldr	r2, [r7, #12]
 80a8a96:	687b      	ldr	r3, [r7, #4]
 80a8a98:	4413      	add	r3, r2
 80a8a9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80a8a9c:	68fb      	ldr	r3, [r7, #12]
 80a8a9e:	2b00      	cmp	r3, #0
 80a8aa0:	d009      	beq.n	80a8ab6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80a8aa2:	2208      	movs	r2, #8
 80a8aa4:	4909      	ldr	r1, [pc, #36]	@ (80a8acc <Get_SerialNum+0x50>)
 80a8aa6:	68f8      	ldr	r0, [r7, #12]
 80a8aa8:	f000 f814 	bl	80a8ad4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80a8aac:	2204      	movs	r2, #4
 80a8aae:	4908      	ldr	r1, [pc, #32]	@ (80a8ad0 <Get_SerialNum+0x54>)
 80a8ab0:	68b8      	ldr	r0, [r7, #8]
 80a8ab2:	f000 f80f 	bl	80a8ad4 <IntToUnicode>
  }
}
 80a8ab6:	bf00      	nop
 80a8ab8:	3710      	adds	r7, #16
 80a8aba:	46bd      	mov	sp, r7
 80a8abc:	bd80      	pop	{r7, pc}
 80a8abe:	bf00      	nop
 80a8ac0:	1ff1e800 	.word	0x1ff1e800
 80a8ac4:	1ff1e804 	.word	0x1ff1e804
 80a8ac8:	1ff1e808 	.word	0x1ff1e808
 80a8acc:	240000ea 	.word	0x240000ea
 80a8ad0:	240000fa 	.word	0x240000fa

080a8ad4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80a8ad4:	b480      	push	{r7}
 80a8ad6:	b087      	sub	sp, #28
 80a8ad8:	af00      	add	r7, sp, #0
 80a8ada:	60f8      	str	r0, [r7, #12]
 80a8adc:	60b9      	str	r1, [r7, #8]
 80a8ade:	4613      	mov	r3, r2
 80a8ae0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80a8ae2:	2300      	movs	r3, #0
 80a8ae4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80a8ae6:	2300      	movs	r3, #0
 80a8ae8:	75fb      	strb	r3, [r7, #23]
 80a8aea:	e027      	b.n	80a8b3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80a8aec:	68fb      	ldr	r3, [r7, #12]
 80a8aee:	0f1b      	lsrs	r3, r3, #28
 80a8af0:	2b09      	cmp	r3, #9
 80a8af2:	d80b      	bhi.n	80a8b0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80a8af4:	68fb      	ldr	r3, [r7, #12]
 80a8af6:	0f1b      	lsrs	r3, r3, #28
 80a8af8:	b2da      	uxtb	r2, r3
 80a8afa:	7dfb      	ldrb	r3, [r7, #23]
 80a8afc:	005b      	lsls	r3, r3, #1
 80a8afe:	4619      	mov	r1, r3
 80a8b00:	68bb      	ldr	r3, [r7, #8]
 80a8b02:	440b      	add	r3, r1
 80a8b04:	3230      	adds	r2, #48	@ 0x30
 80a8b06:	b2d2      	uxtb	r2, r2
 80a8b08:	701a      	strb	r2, [r3, #0]
 80a8b0a:	e00a      	b.n	80a8b22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80a8b0c:	68fb      	ldr	r3, [r7, #12]
 80a8b0e:	0f1b      	lsrs	r3, r3, #28
 80a8b10:	b2da      	uxtb	r2, r3
 80a8b12:	7dfb      	ldrb	r3, [r7, #23]
 80a8b14:	005b      	lsls	r3, r3, #1
 80a8b16:	4619      	mov	r1, r3
 80a8b18:	68bb      	ldr	r3, [r7, #8]
 80a8b1a:	440b      	add	r3, r1
 80a8b1c:	3237      	adds	r2, #55	@ 0x37
 80a8b1e:	b2d2      	uxtb	r2, r2
 80a8b20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80a8b22:	68fb      	ldr	r3, [r7, #12]
 80a8b24:	011b      	lsls	r3, r3, #4
 80a8b26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80a8b28:	7dfb      	ldrb	r3, [r7, #23]
 80a8b2a:	005b      	lsls	r3, r3, #1
 80a8b2c:	3301      	adds	r3, #1
 80a8b2e:	68ba      	ldr	r2, [r7, #8]
 80a8b30:	4413      	add	r3, r2
 80a8b32:	2200      	movs	r2, #0
 80a8b34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80a8b36:	7dfb      	ldrb	r3, [r7, #23]
 80a8b38:	3301      	adds	r3, #1
 80a8b3a:	75fb      	strb	r3, [r7, #23]
 80a8b3c:	7dfa      	ldrb	r2, [r7, #23]
 80a8b3e:	79fb      	ldrb	r3, [r7, #7]
 80a8b40:	429a      	cmp	r2, r3
 80a8b42:	d3d3      	bcc.n	80a8aec <IntToUnicode+0x18>
  }
}
 80a8b44:	bf00      	nop
 80a8b46:	bf00      	nop
 80a8b48:	371c      	adds	r7, #28
 80a8b4a:	46bd      	mov	sp, r7
 80a8b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a8b50:	4770      	bx	lr
	...

080a8b54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80a8b54:	b580      	push	{r7, lr}
 80a8b56:	b0c2      	sub	sp, #264	@ 0x108
 80a8b58:	af00      	add	r7, sp, #0
 80a8b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80a8b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80a8b62:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80a8b64:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80a8b68:	2200      	movs	r2, #0
 80a8b6a:	601a      	str	r2, [r3, #0]
 80a8b6c:	605a      	str	r2, [r3, #4]
 80a8b6e:	609a      	str	r2, [r3, #8]
 80a8b70:	60da      	str	r2, [r3, #12]
 80a8b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80a8b74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80a8b78:	22c8      	movs	r2, #200	@ 0xc8
 80a8b7a:	2100      	movs	r1, #0
 80a8b7c:	4618      	mov	r0, r3
 80a8b7e:	f000 fcec 	bl	80a955a <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80a8b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80a8b86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80a8b8a:	681b      	ldr	r3, [r3, #0]
 80a8b8c:	681b      	ldr	r3, [r3, #0]
 80a8b8e:	4a7d      	ldr	r2, [pc, #500]	@ (80a8d84 <HAL_PCD_MspInit+0x230>)
 80a8b90:	4293      	cmp	r3, r2
 80a8b92:	f040 80f2 	bne.w	80a8d7a <HAL_PCD_MspInit+0x226>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80a8b96:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80a8b9a:	f04f 0300 	mov.w	r3, #0
 80a8b9e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80a8ba2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80a8ba6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80a8baa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80a8bae:	4618      	mov	r0, r3
 80a8bb0:	f7fa ff2c 	bl	80a3a0c <HAL_RCCEx_PeriphCLKConfig>
 80a8bb4:	4603      	mov	r3, r0
 80a8bb6:	2b00      	cmp	r3, #0
 80a8bb8:	d001      	beq.n	80a8bbe <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 80a8bba:	f7f7 fea1 	bl	80a0900 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80a8bbe:	f7f9 fef1 	bl	80a29a4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80a8bc2:	4b71      	ldr	r3, [pc, #452]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8bc8:	4a6f      	ldr	r2, [pc, #444]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8bca:	f043 0302 	orr.w	r3, r3, #2
 80a8bce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a8bd2:	4b6d      	ldr	r3, [pc, #436]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8bd8:	f003 0302 	and.w	r3, r3, #2
 80a8bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 80a8bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80a8be0:	4b69      	ldr	r3, [pc, #420]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8be6:	4a68      	ldr	r2, [pc, #416]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80a8bec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a8bf0:	4b65      	ldr	r3, [pc, #404]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80a8bfa:	623b      	str	r3, [r7, #32]
 80a8bfc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80a8bfe:	4b62      	ldr	r3, [pc, #392]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8c04:	4a60      	ldr	r2, [pc, #384]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8c06:	f043 0304 	orr.w	r3, r3, #4
 80a8c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a8c0e:	4b5e      	ldr	r3, [pc, #376]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8c14:	f003 0304 	and.w	r3, r3, #4
 80a8c18:	61fb      	str	r3, [r7, #28]
 80a8c1a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80a8c1c:	4b5a      	ldr	r3, [pc, #360]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8c22:	4a59      	ldr	r2, [pc, #356]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80a8c28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a8c2c:	4b56      	ldr	r3, [pc, #344]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80a8c36:	61bb      	str	r3, [r7, #24]
 80a8c38:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80a8c3a:	4b53      	ldr	r3, [pc, #332]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8c40:	4a51      	ldr	r2, [pc, #324]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8c42:	f043 0301 	orr.w	r3, r3, #1
 80a8c46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80a8c4a:	4b4f      	ldr	r3, [pc, #316]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80a8c50:	f003 0301 	and.w	r3, r3, #1
 80a8c54:	617b      	str	r3, [r7, #20]
 80a8c56:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 80a8c58:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80a8c5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a8c60:	2302      	movs	r3, #2
 80a8c62:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a8c66:	2300      	movs	r3, #0
 80a8c68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80a8c6c:	2302      	movs	r3, #2
 80a8c6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80a8c72:	230a      	movs	r3, #10
 80a8c74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80a8c78:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80a8c7c:	4619      	mov	r1, r3
 80a8c7e:	4843      	ldr	r0, [pc, #268]	@ (80a8d8c <HAL_PCD_MspInit+0x238>)
 80a8c80:	f7f8 f96a 	bl	80a0f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 80a8c84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80a8c88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a8c8c:	2302      	movs	r3, #2
 80a8c8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a8c92:	2300      	movs	r3, #0
 80a8c94:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80a8c98:	2302      	movs	r3, #2
 80a8c9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80a8c9e:	230a      	movs	r3, #10
 80a8ca0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 80a8ca4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80a8ca8:	4619      	mov	r1, r3
 80a8caa:	4839      	ldr	r0, [pc, #228]	@ (80a8d90 <HAL_PCD_MspInit+0x23c>)
 80a8cac:	f7f8 f954 	bl	80a0f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 80a8cb0:	2301      	movs	r3, #1
 80a8cb2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a8cb6:	2302      	movs	r3, #2
 80a8cb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a8cbc:	2300      	movs	r3, #0
 80a8cbe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80a8cc2:	2302      	movs	r3, #2
 80a8cc4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80a8cc8:	230a      	movs	r3, #10
 80a8cca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 80a8cce:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80a8cd2:	4619      	mov	r1, r3
 80a8cd4:	482f      	ldr	r0, [pc, #188]	@ (80a8d94 <HAL_PCD_MspInit+0x240>)
 80a8cd6:	f7f8 f93f 	bl	80a0f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80a8cda:	2310      	movs	r3, #16
 80a8cdc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a8ce0:	2302      	movs	r3, #2
 80a8ce2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a8ce6:	2300      	movs	r3, #0
 80a8ce8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80a8cec:	2302      	movs	r3, #2
 80a8cee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80a8cf2:	230a      	movs	r3, #10
 80a8cf4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80a8cf8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80a8cfc:	4619      	mov	r1, r3
 80a8cfe:	4826      	ldr	r0, [pc, #152]	@ (80a8d98 <HAL_PCD_MspInit+0x244>)
 80a8d00:	f7f8 f92a 	bl	80a0f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 80a8d04:	2328      	movs	r3, #40	@ 0x28
 80a8d06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a8d0a:	2302      	movs	r3, #2
 80a8d0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a8d10:	2300      	movs	r3, #0
 80a8d12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80a8d16:	2302      	movs	r3, #2
 80a8d18:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80a8d1c:	230a      	movs	r3, #10
 80a8d1e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80a8d22:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80a8d26:	4619      	mov	r1, r3
 80a8d28:	481c      	ldr	r0, [pc, #112]	@ (80a8d9c <HAL_PCD_MspInit+0x248>)
 80a8d2a:	f7f8 f915 	bl	80a0f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80a8d2e:	4b16      	ldr	r3, [pc, #88]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8d30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80a8d34:	4a14      	ldr	r2, [pc, #80]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8d36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80a8d3a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80a8d3e:	4b12      	ldr	r3, [pc, #72]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80a8d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80a8d48:	613b      	str	r3, [r7, #16]
 80a8d4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80a8d4c:	4b0e      	ldr	r3, [pc, #56]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80a8d52:	4a0d      	ldr	r2, [pc, #52]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8d54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80a8d58:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80a8d5c:	4b0a      	ldr	r3, [pc, #40]	@ (80a8d88 <HAL_PCD_MspInit+0x234>)
 80a8d5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80a8d62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80a8d66:	60fb      	str	r3, [r7, #12]
 80a8d68:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80a8d6a:	2200      	movs	r2, #0
 80a8d6c:	2100      	movs	r1, #0
 80a8d6e:	204d      	movs	r0, #77	@ 0x4d
 80a8d70:	f7f8 f8bd 	bl	80a0eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80a8d74:	204d      	movs	r0, #77	@ 0x4d
 80a8d76:	f7f8 f8d4 	bl	80a0f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80a8d7a:	bf00      	nop
 80a8d7c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80a8d80:	46bd      	mov	sp, r7
 80a8d82:	bd80      	pop	{r7, pc}
 80a8d84:	40040000 	.word	0x40040000
 80a8d88:	58024400 	.word	0x58024400
 80a8d8c:	58020400 	.word	0x58020400
 80a8d90:	58022000 	.word	0x58022000
 80a8d94:	58020800 	.word	0x58020800
 80a8d98:	58021c00 	.word	0x58021c00
 80a8d9c:	58020000 	.word	0x58020000

080a8da0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8da0:	b580      	push	{r7, lr}
 80a8da2:	b082      	sub	sp, #8
 80a8da4:	af00      	add	r7, sp, #0
 80a8da6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80a8da8:	687b      	ldr	r3, [r7, #4]
 80a8daa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80a8dae:	687b      	ldr	r3, [r7, #4]
 80a8db0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80a8db4:	4619      	mov	r1, r3
 80a8db6:	4610      	mov	r0, r2
 80a8db8:	f7fe fa71 	bl	80a729e <USBD_LL_SetupStage>
}
 80a8dbc:	bf00      	nop
 80a8dbe:	3708      	adds	r7, #8
 80a8dc0:	46bd      	mov	sp, r7
 80a8dc2:	bd80      	pop	{r7, pc}

080a8dc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8dc4:	b580      	push	{r7, lr}
 80a8dc6:	b082      	sub	sp, #8
 80a8dc8:	af00      	add	r7, sp, #0
 80a8dca:	6078      	str	r0, [r7, #4]
 80a8dcc:	460b      	mov	r3, r1
 80a8dce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80a8dd0:	687b      	ldr	r3, [r7, #4]
 80a8dd2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80a8dd6:	78fa      	ldrb	r2, [r7, #3]
 80a8dd8:	6879      	ldr	r1, [r7, #4]
 80a8dda:	4613      	mov	r3, r2
 80a8ddc:	00db      	lsls	r3, r3, #3
 80a8dde:	4413      	add	r3, r2
 80a8de0:	009b      	lsls	r3, r3, #2
 80a8de2:	440b      	add	r3, r1
 80a8de4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80a8de8:	681a      	ldr	r2, [r3, #0]
 80a8dea:	78fb      	ldrb	r3, [r7, #3]
 80a8dec:	4619      	mov	r1, r3
 80a8dee:	f7fe faab 	bl	80a7348 <USBD_LL_DataOutStage>
}
 80a8df2:	bf00      	nop
 80a8df4:	3708      	adds	r7, #8
 80a8df6:	46bd      	mov	sp, r7
 80a8df8:	bd80      	pop	{r7, pc}

080a8dfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8dfa:	b580      	push	{r7, lr}
 80a8dfc:	b082      	sub	sp, #8
 80a8dfe:	af00      	add	r7, sp, #0
 80a8e00:	6078      	str	r0, [r7, #4]
 80a8e02:	460b      	mov	r3, r1
 80a8e04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80a8e06:	687b      	ldr	r3, [r7, #4]
 80a8e08:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80a8e0c:	78fa      	ldrb	r2, [r7, #3]
 80a8e0e:	6879      	ldr	r1, [r7, #4]
 80a8e10:	4613      	mov	r3, r2
 80a8e12:	00db      	lsls	r3, r3, #3
 80a8e14:	4413      	add	r3, r2
 80a8e16:	009b      	lsls	r3, r3, #2
 80a8e18:	440b      	add	r3, r1
 80a8e1a:	3320      	adds	r3, #32
 80a8e1c:	681a      	ldr	r2, [r3, #0]
 80a8e1e:	78fb      	ldrb	r3, [r7, #3]
 80a8e20:	4619      	mov	r1, r3
 80a8e22:	f7fe fb44 	bl	80a74ae <USBD_LL_DataInStage>
}
 80a8e26:	bf00      	nop
 80a8e28:	3708      	adds	r7, #8
 80a8e2a:	46bd      	mov	sp, r7
 80a8e2c:	bd80      	pop	{r7, pc}

080a8e2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8e2e:	b580      	push	{r7, lr}
 80a8e30:	b082      	sub	sp, #8
 80a8e32:	af00      	add	r7, sp, #0
 80a8e34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80a8e36:	687b      	ldr	r3, [r7, #4]
 80a8e38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8e3c:	4618      	mov	r0, r3
 80a8e3e:	f7fe fc7e 	bl	80a773e <USBD_LL_SOF>
}
 80a8e42:	bf00      	nop
 80a8e44:	3708      	adds	r7, #8
 80a8e46:	46bd      	mov	sp, r7
 80a8e48:	bd80      	pop	{r7, pc}

080a8e4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8e4a:	b580      	push	{r7, lr}
 80a8e4c:	b084      	sub	sp, #16
 80a8e4e:	af00      	add	r7, sp, #0
 80a8e50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80a8e52:	2301      	movs	r3, #1
 80a8e54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80a8e56:	687b      	ldr	r3, [r7, #4]
 80a8e58:	79db      	ldrb	r3, [r3, #7]
 80a8e5a:	2b00      	cmp	r3, #0
 80a8e5c:	d102      	bne.n	80a8e64 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80a8e5e:	2300      	movs	r3, #0
 80a8e60:	73fb      	strb	r3, [r7, #15]
 80a8e62:	e008      	b.n	80a8e76 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80a8e64:	687b      	ldr	r3, [r7, #4]
 80a8e66:	79db      	ldrb	r3, [r3, #7]
 80a8e68:	2b02      	cmp	r3, #2
 80a8e6a:	d102      	bne.n	80a8e72 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80a8e6c:	2301      	movs	r3, #1
 80a8e6e:	73fb      	strb	r3, [r7, #15]
 80a8e70:	e001      	b.n	80a8e76 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80a8e72:	f7f7 fd45 	bl	80a0900 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80a8e76:	687b      	ldr	r3, [r7, #4]
 80a8e78:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8e7c:	7bfa      	ldrb	r2, [r7, #15]
 80a8e7e:	4611      	mov	r1, r2
 80a8e80:	4618      	mov	r0, r3
 80a8e82:	f7fe fc18 	bl	80a76b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80a8e86:	687b      	ldr	r3, [r7, #4]
 80a8e88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8e8c:	4618      	mov	r0, r3
 80a8e8e:	f7fe fbc0 	bl	80a7612 <USBD_LL_Reset>
}
 80a8e92:	bf00      	nop
 80a8e94:	3710      	adds	r7, #16
 80a8e96:	46bd      	mov	sp, r7
 80a8e98:	bd80      	pop	{r7, pc}
	...

080a8e9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8e9c:	b580      	push	{r7, lr}
 80a8e9e:	b082      	sub	sp, #8
 80a8ea0:	af00      	add	r7, sp, #0
 80a8ea2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80a8ea4:	687b      	ldr	r3, [r7, #4]
 80a8ea6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8eaa:	4618      	mov	r0, r3
 80a8eac:	f7fe fc13 	bl	80a76d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80a8eb0:	687b      	ldr	r3, [r7, #4]
 80a8eb2:	681b      	ldr	r3, [r3, #0]
 80a8eb4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80a8eb8:	681b      	ldr	r3, [r3, #0]
 80a8eba:	687a      	ldr	r2, [r7, #4]
 80a8ebc:	6812      	ldr	r2, [r2, #0]
 80a8ebe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80a8ec2:	f043 0301 	orr.w	r3, r3, #1
 80a8ec6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80a8ec8:	687b      	ldr	r3, [r7, #4]
 80a8eca:	7adb      	ldrb	r3, [r3, #11]
 80a8ecc:	2b00      	cmp	r3, #0
 80a8ece:	d005      	beq.n	80a8edc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80a8ed0:	4b04      	ldr	r3, [pc, #16]	@ (80a8ee4 <HAL_PCD_SuspendCallback+0x48>)
 80a8ed2:	691b      	ldr	r3, [r3, #16]
 80a8ed4:	4a03      	ldr	r2, [pc, #12]	@ (80a8ee4 <HAL_PCD_SuspendCallback+0x48>)
 80a8ed6:	f043 0306 	orr.w	r3, r3, #6
 80a8eda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80a8edc:	bf00      	nop
 80a8ede:	3708      	adds	r7, #8
 80a8ee0:	46bd      	mov	sp, r7
 80a8ee2:	bd80      	pop	{r7, pc}
 80a8ee4:	e000ed00 	.word	0xe000ed00

080a8ee8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8ee8:	b580      	push	{r7, lr}
 80a8eea:	b082      	sub	sp, #8
 80a8eec:	af00      	add	r7, sp, #0
 80a8eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80a8ef0:	687b      	ldr	r3, [r7, #4]
 80a8ef2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8ef6:	4618      	mov	r0, r3
 80a8ef8:	f7fe fc09 	bl	80a770e <USBD_LL_Resume>
}
 80a8efc:	bf00      	nop
 80a8efe:	3708      	adds	r7, #8
 80a8f00:	46bd      	mov	sp, r7
 80a8f02:	bd80      	pop	{r7, pc}

080a8f04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8f04:	b580      	push	{r7, lr}
 80a8f06:	b082      	sub	sp, #8
 80a8f08:	af00      	add	r7, sp, #0
 80a8f0a:	6078      	str	r0, [r7, #4]
 80a8f0c:	460b      	mov	r3, r1
 80a8f0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80a8f10:	687b      	ldr	r3, [r7, #4]
 80a8f12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8f16:	78fa      	ldrb	r2, [r7, #3]
 80a8f18:	4611      	mov	r1, r2
 80a8f1a:	4618      	mov	r0, r3
 80a8f1c:	f7fe fc61 	bl	80a77e2 <USBD_LL_IsoOUTIncomplete>
}
 80a8f20:	bf00      	nop
 80a8f22:	3708      	adds	r7, #8
 80a8f24:	46bd      	mov	sp, r7
 80a8f26:	bd80      	pop	{r7, pc}

080a8f28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8f28:	b580      	push	{r7, lr}
 80a8f2a:	b082      	sub	sp, #8
 80a8f2c:	af00      	add	r7, sp, #0
 80a8f2e:	6078      	str	r0, [r7, #4]
 80a8f30:	460b      	mov	r3, r1
 80a8f32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80a8f34:	687b      	ldr	r3, [r7, #4]
 80a8f36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8f3a:	78fa      	ldrb	r2, [r7, #3]
 80a8f3c:	4611      	mov	r1, r2
 80a8f3e:	4618      	mov	r0, r3
 80a8f40:	f7fe fc1d 	bl	80a777e <USBD_LL_IsoINIncomplete>
}
 80a8f44:	bf00      	nop
 80a8f46:	3708      	adds	r7, #8
 80a8f48:	46bd      	mov	sp, r7
 80a8f4a:	bd80      	pop	{r7, pc}

080a8f4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8f4c:	b580      	push	{r7, lr}
 80a8f4e:	b082      	sub	sp, #8
 80a8f50:	af00      	add	r7, sp, #0
 80a8f52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80a8f54:	687b      	ldr	r3, [r7, #4]
 80a8f56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8f5a:	4618      	mov	r0, r3
 80a8f5c:	f7fe fc73 	bl	80a7846 <USBD_LL_DevConnected>
}
 80a8f60:	bf00      	nop
 80a8f62:	3708      	adds	r7, #8
 80a8f64:	46bd      	mov	sp, r7
 80a8f66:	bd80      	pop	{r7, pc}

080a8f68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80a8f68:	b580      	push	{r7, lr}
 80a8f6a:	b082      	sub	sp, #8
 80a8f6c:	af00      	add	r7, sp, #0
 80a8f6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80a8f70:	687b      	ldr	r3, [r7, #4]
 80a8f72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80a8f76:	4618      	mov	r0, r3
 80a8f78:	f7fe fc70 	bl	80a785c <USBD_LL_DevDisconnected>
}
 80a8f7c:	bf00      	nop
 80a8f7e:	3708      	adds	r7, #8
 80a8f80:	46bd      	mov	sp, r7
 80a8f82:	bd80      	pop	{r7, pc}

080a8f84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80a8f84:	b580      	push	{r7, lr}
 80a8f86:	b082      	sub	sp, #8
 80a8f88:	af00      	add	r7, sp, #0
 80a8f8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80a8f8c:	687b      	ldr	r3, [r7, #4]
 80a8f8e:	781b      	ldrb	r3, [r3, #0]
 80a8f90:	2b01      	cmp	r3, #1
 80a8f92:	d140      	bne.n	80a9016 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80a8f94:	4a22      	ldr	r2, [pc, #136]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a8f96:	687b      	ldr	r3, [r7, #4]
 80a8f98:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 80a8f9c:	687b      	ldr	r3, [r7, #4]
 80a8f9e:	4a20      	ldr	r2, [pc, #128]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a8fa0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80a8fa4:	4b1e      	ldr	r3, [pc, #120]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a8fa6:	4a1f      	ldr	r2, [pc, #124]	@ (80a9024 <USBD_LL_Init+0xa0>)
 80a8fa8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80a8faa:	4b1d      	ldr	r3, [pc, #116]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a8fac:	2209      	movs	r2, #9
 80a8fae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80a8fb0:	4b1b      	ldr	r3, [pc, #108]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a8fb2:	2200      	movs	r2, #0
 80a8fb4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80a8fb6:	4b1a      	ldr	r3, [pc, #104]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a8fb8:	2200      	movs	r2, #0
 80a8fba:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80a8fbc:	4b18      	ldr	r3, [pc, #96]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a8fbe:	2201      	movs	r2, #1
 80a8fc0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80a8fc2:	4b17      	ldr	r3, [pc, #92]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a8fc4:	2200      	movs	r2, #0
 80a8fc6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80a8fc8:	4b15      	ldr	r3, [pc, #84]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a8fca:	2200      	movs	r2, #0
 80a8fcc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80a8fce:	4b14      	ldr	r3, [pc, #80]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a8fd0:	2200      	movs	r2, #0
 80a8fd2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80a8fd4:	4b12      	ldr	r3, [pc, #72]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a8fd6:	2200      	movs	r2, #0
 80a8fd8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80a8fda:	4b11      	ldr	r3, [pc, #68]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a8fdc:	2200      	movs	r2, #0
 80a8fde:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80a8fe0:	4b0f      	ldr	r3, [pc, #60]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a8fe2:	2200      	movs	r2, #0
 80a8fe4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80a8fe6:	480e      	ldr	r0, [pc, #56]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a8fe8:	f7f8 f9e2 	bl	80a13b0 <HAL_PCD_Init>
 80a8fec:	4603      	mov	r3, r0
 80a8fee:	2b00      	cmp	r3, #0
 80a8ff0:	d001      	beq.n	80a8ff6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80a8ff2:	f7f7 fc85 	bl	80a0900 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80a8ff6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80a8ffa:	4809      	ldr	r0, [pc, #36]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a8ffc:	f7f9 fc37 	bl	80a286e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80a9000:	2280      	movs	r2, #128	@ 0x80
 80a9002:	2100      	movs	r1, #0
 80a9004:	4806      	ldr	r0, [pc, #24]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a9006:	f7f9 fbeb 	bl	80a27e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80a900a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 80a900e:	2101      	movs	r1, #1
 80a9010:	4803      	ldr	r0, [pc, #12]	@ (80a9020 <USBD_LL_Init+0x9c>)
 80a9012:	f7f9 fbe5 	bl	80a27e0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80a9016:	2300      	movs	r3, #0
}
 80a9018:	4618      	mov	r0, r3
 80a901a:	3708      	adds	r7, #8
 80a901c:	46bd      	mov	sp, r7
 80a901e:	bd80      	pop	{r7, pc}
 80a9020:	24001678 	.word	0x24001678
 80a9024:	40040000 	.word	0x40040000

080a9028 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80a9028:	b580      	push	{r7, lr}
 80a902a:	b084      	sub	sp, #16
 80a902c:	af00      	add	r7, sp, #0
 80a902e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80a9030:	2300      	movs	r3, #0
 80a9032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a9034:	2300      	movs	r3, #0
 80a9036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80a9038:	687b      	ldr	r3, [r7, #4]
 80a903a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80a903e:	4618      	mov	r0, r3
 80a9040:	f7f8 fac2 	bl	80a15c8 <HAL_PCD_Start>
 80a9044:	4603      	mov	r3, r0
 80a9046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80a9048:	7bfb      	ldrb	r3, [r7, #15]
 80a904a:	4618      	mov	r0, r3
 80a904c:	f000 f942 	bl	80a92d4 <USBD_Get_USB_Status>
 80a9050:	4603      	mov	r3, r0
 80a9052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80a9054:	7bbb      	ldrb	r3, [r7, #14]
}
 80a9056:	4618      	mov	r0, r3
 80a9058:	3710      	adds	r7, #16
 80a905a:	46bd      	mov	sp, r7
 80a905c:	bd80      	pop	{r7, pc}

080a905e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80a905e:	b580      	push	{r7, lr}
 80a9060:	b084      	sub	sp, #16
 80a9062:	af00      	add	r7, sp, #0
 80a9064:	6078      	str	r0, [r7, #4]
 80a9066:	4608      	mov	r0, r1
 80a9068:	4611      	mov	r1, r2
 80a906a:	461a      	mov	r2, r3
 80a906c:	4603      	mov	r3, r0
 80a906e:	70fb      	strb	r3, [r7, #3]
 80a9070:	460b      	mov	r3, r1
 80a9072:	70bb      	strb	r3, [r7, #2]
 80a9074:	4613      	mov	r3, r2
 80a9076:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80a9078:	2300      	movs	r3, #0
 80a907a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a907c:	2300      	movs	r3, #0
 80a907e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80a9080:	687b      	ldr	r3, [r7, #4]
 80a9082:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80a9086:	78bb      	ldrb	r3, [r7, #2]
 80a9088:	883a      	ldrh	r2, [r7, #0]
 80a908a:	78f9      	ldrb	r1, [r7, #3]
 80a908c:	f7f8 ffc3 	bl	80a2016 <HAL_PCD_EP_Open>
 80a9090:	4603      	mov	r3, r0
 80a9092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80a9094:	7bfb      	ldrb	r3, [r7, #15]
 80a9096:	4618      	mov	r0, r3
 80a9098:	f000 f91c 	bl	80a92d4 <USBD_Get_USB_Status>
 80a909c:	4603      	mov	r3, r0
 80a909e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80a90a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80a90a2:	4618      	mov	r0, r3
 80a90a4:	3710      	adds	r7, #16
 80a90a6:	46bd      	mov	sp, r7
 80a90a8:	bd80      	pop	{r7, pc}

080a90aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80a90aa:	b580      	push	{r7, lr}
 80a90ac:	b084      	sub	sp, #16
 80a90ae:	af00      	add	r7, sp, #0
 80a90b0:	6078      	str	r0, [r7, #4]
 80a90b2:	460b      	mov	r3, r1
 80a90b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80a90b6:	2300      	movs	r3, #0
 80a90b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a90ba:	2300      	movs	r3, #0
 80a90bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80a90be:	687b      	ldr	r3, [r7, #4]
 80a90c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80a90c4:	78fa      	ldrb	r2, [r7, #3]
 80a90c6:	4611      	mov	r1, r2
 80a90c8:	4618      	mov	r0, r3
 80a90ca:	f7f9 f80e 	bl	80a20ea <HAL_PCD_EP_Close>
 80a90ce:	4603      	mov	r3, r0
 80a90d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80a90d2:	7bfb      	ldrb	r3, [r7, #15]
 80a90d4:	4618      	mov	r0, r3
 80a90d6:	f000 f8fd 	bl	80a92d4 <USBD_Get_USB_Status>
 80a90da:	4603      	mov	r3, r0
 80a90dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80a90de:	7bbb      	ldrb	r3, [r7, #14]
}
 80a90e0:	4618      	mov	r0, r3
 80a90e2:	3710      	adds	r7, #16
 80a90e4:	46bd      	mov	sp, r7
 80a90e6:	bd80      	pop	{r7, pc}

080a90e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80a90e8:	b580      	push	{r7, lr}
 80a90ea:	b084      	sub	sp, #16
 80a90ec:	af00      	add	r7, sp, #0
 80a90ee:	6078      	str	r0, [r7, #4]
 80a90f0:	460b      	mov	r3, r1
 80a90f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80a90f4:	2300      	movs	r3, #0
 80a90f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a90f8:	2300      	movs	r3, #0
 80a90fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80a90fc:	687b      	ldr	r3, [r7, #4]
 80a90fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80a9102:	78fa      	ldrb	r2, [r7, #3]
 80a9104:	4611      	mov	r1, r2
 80a9106:	4618      	mov	r0, r3
 80a9108:	f7f9 f8c6 	bl	80a2298 <HAL_PCD_EP_SetStall>
 80a910c:	4603      	mov	r3, r0
 80a910e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80a9110:	7bfb      	ldrb	r3, [r7, #15]
 80a9112:	4618      	mov	r0, r3
 80a9114:	f000 f8de 	bl	80a92d4 <USBD_Get_USB_Status>
 80a9118:	4603      	mov	r3, r0
 80a911a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80a911c:	7bbb      	ldrb	r3, [r7, #14]
}
 80a911e:	4618      	mov	r0, r3
 80a9120:	3710      	adds	r7, #16
 80a9122:	46bd      	mov	sp, r7
 80a9124:	bd80      	pop	{r7, pc}

080a9126 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80a9126:	b580      	push	{r7, lr}
 80a9128:	b084      	sub	sp, #16
 80a912a:	af00      	add	r7, sp, #0
 80a912c:	6078      	str	r0, [r7, #4]
 80a912e:	460b      	mov	r3, r1
 80a9130:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80a9132:	2300      	movs	r3, #0
 80a9134:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a9136:	2300      	movs	r3, #0
 80a9138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80a913a:	687b      	ldr	r3, [r7, #4]
 80a913c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80a9140:	78fa      	ldrb	r2, [r7, #3]
 80a9142:	4611      	mov	r1, r2
 80a9144:	4618      	mov	r0, r3
 80a9146:	f7f9 f90a 	bl	80a235e <HAL_PCD_EP_ClrStall>
 80a914a:	4603      	mov	r3, r0
 80a914c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80a914e:	7bfb      	ldrb	r3, [r7, #15]
 80a9150:	4618      	mov	r0, r3
 80a9152:	f000 f8bf 	bl	80a92d4 <USBD_Get_USB_Status>
 80a9156:	4603      	mov	r3, r0
 80a9158:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80a915a:	7bbb      	ldrb	r3, [r7, #14]
}
 80a915c:	4618      	mov	r0, r3
 80a915e:	3710      	adds	r7, #16
 80a9160:	46bd      	mov	sp, r7
 80a9162:	bd80      	pop	{r7, pc}

080a9164 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80a9164:	b480      	push	{r7}
 80a9166:	b085      	sub	sp, #20
 80a9168:	af00      	add	r7, sp, #0
 80a916a:	6078      	str	r0, [r7, #4]
 80a916c:	460b      	mov	r3, r1
 80a916e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80a9170:	687b      	ldr	r3, [r7, #4]
 80a9172:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80a9176:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80a9178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80a917c:	2b00      	cmp	r3, #0
 80a917e:	da0b      	bge.n	80a9198 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80a9180:	78fb      	ldrb	r3, [r7, #3]
 80a9182:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80a9186:	68f9      	ldr	r1, [r7, #12]
 80a9188:	4613      	mov	r3, r2
 80a918a:	00db      	lsls	r3, r3, #3
 80a918c:	4413      	add	r3, r2
 80a918e:	009b      	lsls	r3, r3, #2
 80a9190:	440b      	add	r3, r1
 80a9192:	3316      	adds	r3, #22
 80a9194:	781b      	ldrb	r3, [r3, #0]
 80a9196:	e00b      	b.n	80a91b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80a9198:	78fb      	ldrb	r3, [r7, #3]
 80a919a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80a919e:	68f9      	ldr	r1, [r7, #12]
 80a91a0:	4613      	mov	r3, r2
 80a91a2:	00db      	lsls	r3, r3, #3
 80a91a4:	4413      	add	r3, r2
 80a91a6:	009b      	lsls	r3, r3, #2
 80a91a8:	440b      	add	r3, r1
 80a91aa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80a91ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80a91b0:	4618      	mov	r0, r3
 80a91b2:	3714      	adds	r7, #20
 80a91b4:	46bd      	mov	sp, r7
 80a91b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a91ba:	4770      	bx	lr

080a91bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80a91bc:	b580      	push	{r7, lr}
 80a91be:	b084      	sub	sp, #16
 80a91c0:	af00      	add	r7, sp, #0
 80a91c2:	6078      	str	r0, [r7, #4]
 80a91c4:	460b      	mov	r3, r1
 80a91c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80a91c8:	2300      	movs	r3, #0
 80a91ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a91cc:	2300      	movs	r3, #0
 80a91ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80a91d0:	687b      	ldr	r3, [r7, #4]
 80a91d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80a91d6:	78fa      	ldrb	r2, [r7, #3]
 80a91d8:	4611      	mov	r1, r2
 80a91da:	4618      	mov	r0, r3
 80a91dc:	f7f8 fef7 	bl	80a1fce <HAL_PCD_SetAddress>
 80a91e0:	4603      	mov	r3, r0
 80a91e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80a91e4:	7bfb      	ldrb	r3, [r7, #15]
 80a91e6:	4618      	mov	r0, r3
 80a91e8:	f000 f874 	bl	80a92d4 <USBD_Get_USB_Status>
 80a91ec:	4603      	mov	r3, r0
 80a91ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80a91f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80a91f2:	4618      	mov	r0, r3
 80a91f4:	3710      	adds	r7, #16
 80a91f6:	46bd      	mov	sp, r7
 80a91f8:	bd80      	pop	{r7, pc}

080a91fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80a91fa:	b580      	push	{r7, lr}
 80a91fc:	b086      	sub	sp, #24
 80a91fe:	af00      	add	r7, sp, #0
 80a9200:	60f8      	str	r0, [r7, #12]
 80a9202:	607a      	str	r2, [r7, #4]
 80a9204:	603b      	str	r3, [r7, #0]
 80a9206:	460b      	mov	r3, r1
 80a9208:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80a920a:	2300      	movs	r3, #0
 80a920c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a920e:	2300      	movs	r3, #0
 80a9210:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80a9212:	68fb      	ldr	r3, [r7, #12]
 80a9214:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80a9218:	7af9      	ldrb	r1, [r7, #11]
 80a921a:	683b      	ldr	r3, [r7, #0]
 80a921c:	687a      	ldr	r2, [r7, #4]
 80a921e:	f7f9 f801 	bl	80a2224 <HAL_PCD_EP_Transmit>
 80a9222:	4603      	mov	r3, r0
 80a9224:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80a9226:	7dfb      	ldrb	r3, [r7, #23]
 80a9228:	4618      	mov	r0, r3
 80a922a:	f000 f853 	bl	80a92d4 <USBD_Get_USB_Status>
 80a922e:	4603      	mov	r3, r0
 80a9230:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80a9232:	7dbb      	ldrb	r3, [r7, #22]
}
 80a9234:	4618      	mov	r0, r3
 80a9236:	3718      	adds	r7, #24
 80a9238:	46bd      	mov	sp, r7
 80a923a:	bd80      	pop	{r7, pc}

080a923c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80a923c:	b580      	push	{r7, lr}
 80a923e:	b086      	sub	sp, #24
 80a9240:	af00      	add	r7, sp, #0
 80a9242:	60f8      	str	r0, [r7, #12]
 80a9244:	607a      	str	r2, [r7, #4]
 80a9246:	603b      	str	r3, [r7, #0]
 80a9248:	460b      	mov	r3, r1
 80a924a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80a924c:	2300      	movs	r3, #0
 80a924e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a9250:	2300      	movs	r3, #0
 80a9252:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80a9254:	68fb      	ldr	r3, [r7, #12]
 80a9256:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80a925a:	7af9      	ldrb	r1, [r7, #11]
 80a925c:	683b      	ldr	r3, [r7, #0]
 80a925e:	687a      	ldr	r2, [r7, #4]
 80a9260:	f7f8 ff8d 	bl	80a217e <HAL_PCD_EP_Receive>
 80a9264:	4603      	mov	r3, r0
 80a9266:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80a9268:	7dfb      	ldrb	r3, [r7, #23]
 80a926a:	4618      	mov	r0, r3
 80a926c:	f000 f832 	bl	80a92d4 <USBD_Get_USB_Status>
 80a9270:	4603      	mov	r3, r0
 80a9272:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80a9274:	7dbb      	ldrb	r3, [r7, #22]
}
 80a9276:	4618      	mov	r0, r3
 80a9278:	3718      	adds	r7, #24
 80a927a:	46bd      	mov	sp, r7
 80a927c:	bd80      	pop	{r7, pc}

080a927e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80a927e:	b580      	push	{r7, lr}
 80a9280:	b082      	sub	sp, #8
 80a9282:	af00      	add	r7, sp, #0
 80a9284:	6078      	str	r0, [r7, #4]
 80a9286:	460b      	mov	r3, r1
 80a9288:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80a928a:	687b      	ldr	r3, [r7, #4]
 80a928c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80a9290:	78fa      	ldrb	r2, [r7, #3]
 80a9292:	4611      	mov	r1, r2
 80a9294:	4618      	mov	r0, r3
 80a9296:	f7f8 ffad 	bl	80a21f4 <HAL_PCD_EP_GetRxCount>
 80a929a:	4603      	mov	r3, r0
}
 80a929c:	4618      	mov	r0, r3
 80a929e:	3708      	adds	r7, #8
 80a92a0:	46bd      	mov	sp, r7
 80a92a2:	bd80      	pop	{r7, pc}

080a92a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80a92a4:	b480      	push	{r7}
 80a92a6:	b083      	sub	sp, #12
 80a92a8:	af00      	add	r7, sp, #0
 80a92aa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80a92ac:	4b03      	ldr	r3, [pc, #12]	@ (80a92bc <USBD_static_malloc+0x18>)
}
 80a92ae:	4618      	mov	r0, r3
 80a92b0:	370c      	adds	r7, #12
 80a92b2:	46bd      	mov	sp, r7
 80a92b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a92b8:	4770      	bx	lr
 80a92ba:	bf00      	nop
 80a92bc:	24001b5c 	.word	0x24001b5c

080a92c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80a92c0:	b480      	push	{r7}
 80a92c2:	b083      	sub	sp, #12
 80a92c4:	af00      	add	r7, sp, #0
 80a92c6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80a92c8:	bf00      	nop
 80a92ca:	370c      	adds	r7, #12
 80a92cc:	46bd      	mov	sp, r7
 80a92ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a92d2:	4770      	bx	lr

080a92d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80a92d4:	b480      	push	{r7}
 80a92d6:	b085      	sub	sp, #20
 80a92d8:	af00      	add	r7, sp, #0
 80a92da:	4603      	mov	r3, r0
 80a92dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80a92de:	2300      	movs	r3, #0
 80a92e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80a92e2:	79fb      	ldrb	r3, [r7, #7]
 80a92e4:	2b03      	cmp	r3, #3
 80a92e6:	d817      	bhi.n	80a9318 <USBD_Get_USB_Status+0x44>
 80a92e8:	a201      	add	r2, pc, #4	@ (adr r2, 80a92f0 <USBD_Get_USB_Status+0x1c>)
 80a92ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a92ee:	bf00      	nop
 80a92f0:	080a9301 	.word	0x080a9301
 80a92f4:	080a9307 	.word	0x080a9307
 80a92f8:	080a930d 	.word	0x080a930d
 80a92fc:	080a9313 	.word	0x080a9313
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80a9300:	2300      	movs	r3, #0
 80a9302:	73fb      	strb	r3, [r7, #15]
    break;
 80a9304:	e00b      	b.n	80a931e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80a9306:	2303      	movs	r3, #3
 80a9308:	73fb      	strb	r3, [r7, #15]
    break;
 80a930a:	e008      	b.n	80a931e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80a930c:	2301      	movs	r3, #1
 80a930e:	73fb      	strb	r3, [r7, #15]
    break;
 80a9310:	e005      	b.n	80a931e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80a9312:	2303      	movs	r3, #3
 80a9314:	73fb      	strb	r3, [r7, #15]
    break;
 80a9316:	e002      	b.n	80a931e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80a9318:	2303      	movs	r3, #3
 80a931a:	73fb      	strb	r3, [r7, #15]
    break;
 80a931c:	bf00      	nop
  }
  return usb_status;
 80a931e:	7bfb      	ldrb	r3, [r7, #15]
}
 80a9320:	4618      	mov	r0, r3
 80a9322:	3714      	adds	r7, #20
 80a9324:	46bd      	mov	sp, r7
 80a9326:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a932a:	4770      	bx	lr

080a932c <std>:
 80a932c:	2300      	movs	r3, #0
 80a932e:	b510      	push	{r4, lr}
 80a9330:	4604      	mov	r4, r0
 80a9332:	e9c0 3300 	strd	r3, r3, [r0]
 80a9336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80a933a:	6083      	str	r3, [r0, #8]
 80a933c:	8181      	strh	r1, [r0, #12]
 80a933e:	6643      	str	r3, [r0, #100]	@ 0x64
 80a9340:	81c2      	strh	r2, [r0, #14]
 80a9342:	6183      	str	r3, [r0, #24]
 80a9344:	4619      	mov	r1, r3
 80a9346:	2208      	movs	r2, #8
 80a9348:	305c      	adds	r0, #92	@ 0x5c
 80a934a:	f000 f906 	bl	80a955a <memset>
 80a934e:	4b0d      	ldr	r3, [pc, #52]	@ (80a9384 <std+0x58>)
 80a9350:	6263      	str	r3, [r4, #36]	@ 0x24
 80a9352:	4b0d      	ldr	r3, [pc, #52]	@ (80a9388 <std+0x5c>)
 80a9354:	62a3      	str	r3, [r4, #40]	@ 0x28
 80a9356:	4b0d      	ldr	r3, [pc, #52]	@ (80a938c <std+0x60>)
 80a9358:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80a935a:	4b0d      	ldr	r3, [pc, #52]	@ (80a9390 <std+0x64>)
 80a935c:	6323      	str	r3, [r4, #48]	@ 0x30
 80a935e:	4b0d      	ldr	r3, [pc, #52]	@ (80a9394 <std+0x68>)
 80a9360:	6224      	str	r4, [r4, #32]
 80a9362:	429c      	cmp	r4, r3
 80a9364:	d006      	beq.n	80a9374 <std+0x48>
 80a9366:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80a936a:	4294      	cmp	r4, r2
 80a936c:	d002      	beq.n	80a9374 <std+0x48>
 80a936e:	33d0      	adds	r3, #208	@ 0xd0
 80a9370:	429c      	cmp	r4, r3
 80a9372:	d105      	bne.n	80a9380 <std+0x54>
 80a9374:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80a9378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a937c:	f000 b966 	b.w	80a964c <__retarget_lock_init_recursive>
 80a9380:	bd10      	pop	{r4, pc}
 80a9382:	bf00      	nop
 80a9384:	080a94d5 	.word	0x080a94d5
 80a9388:	080a94f7 	.word	0x080a94f7
 80a938c:	080a952f 	.word	0x080a952f
 80a9390:	080a9553 	.word	0x080a9553
 80a9394:	24001d7c 	.word	0x24001d7c

080a9398 <stdio_exit_handler>:
 80a9398:	4a02      	ldr	r2, [pc, #8]	@ (80a93a4 <stdio_exit_handler+0xc>)
 80a939a:	4903      	ldr	r1, [pc, #12]	@ (80a93a8 <stdio_exit_handler+0x10>)
 80a939c:	4803      	ldr	r0, [pc, #12]	@ (80a93ac <stdio_exit_handler+0x14>)
 80a939e:	f000 b869 	b.w	80a9474 <_fwalk_sglue>
 80a93a2:	bf00      	nop
 80a93a4:	24000104 	.word	0x24000104
 80a93a8:	080a9ee9 	.word	0x080a9ee9
 80a93ac:	24000114 	.word	0x24000114

080a93b0 <cleanup_stdio>:
 80a93b0:	6841      	ldr	r1, [r0, #4]
 80a93b2:	4b0c      	ldr	r3, [pc, #48]	@ (80a93e4 <cleanup_stdio+0x34>)
 80a93b4:	4299      	cmp	r1, r3
 80a93b6:	b510      	push	{r4, lr}
 80a93b8:	4604      	mov	r4, r0
 80a93ba:	d001      	beq.n	80a93c0 <cleanup_stdio+0x10>
 80a93bc:	f000 fd94 	bl	80a9ee8 <_fflush_r>
 80a93c0:	68a1      	ldr	r1, [r4, #8]
 80a93c2:	4b09      	ldr	r3, [pc, #36]	@ (80a93e8 <cleanup_stdio+0x38>)
 80a93c4:	4299      	cmp	r1, r3
 80a93c6:	d002      	beq.n	80a93ce <cleanup_stdio+0x1e>
 80a93c8:	4620      	mov	r0, r4
 80a93ca:	f000 fd8d 	bl	80a9ee8 <_fflush_r>
 80a93ce:	68e1      	ldr	r1, [r4, #12]
 80a93d0:	4b06      	ldr	r3, [pc, #24]	@ (80a93ec <cleanup_stdio+0x3c>)
 80a93d2:	4299      	cmp	r1, r3
 80a93d4:	d004      	beq.n	80a93e0 <cleanup_stdio+0x30>
 80a93d6:	4620      	mov	r0, r4
 80a93d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a93dc:	f000 bd84 	b.w	80a9ee8 <_fflush_r>
 80a93e0:	bd10      	pop	{r4, pc}
 80a93e2:	bf00      	nop
 80a93e4:	24001d7c 	.word	0x24001d7c
 80a93e8:	24001de4 	.word	0x24001de4
 80a93ec:	24001e4c 	.word	0x24001e4c

080a93f0 <global_stdio_init.part.0>:
 80a93f0:	b510      	push	{r4, lr}
 80a93f2:	4b0b      	ldr	r3, [pc, #44]	@ (80a9420 <global_stdio_init.part.0+0x30>)
 80a93f4:	4c0b      	ldr	r4, [pc, #44]	@ (80a9424 <global_stdio_init.part.0+0x34>)
 80a93f6:	4a0c      	ldr	r2, [pc, #48]	@ (80a9428 <global_stdio_init.part.0+0x38>)
 80a93f8:	601a      	str	r2, [r3, #0]
 80a93fa:	4620      	mov	r0, r4
 80a93fc:	2200      	movs	r2, #0
 80a93fe:	2104      	movs	r1, #4
 80a9400:	f7ff ff94 	bl	80a932c <std>
 80a9404:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80a9408:	2201      	movs	r2, #1
 80a940a:	2109      	movs	r1, #9
 80a940c:	f7ff ff8e 	bl	80a932c <std>
 80a9410:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80a9414:	2202      	movs	r2, #2
 80a9416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a941a:	2112      	movs	r1, #18
 80a941c:	f7ff bf86 	b.w	80a932c <std>
 80a9420:	24001eb4 	.word	0x24001eb4
 80a9424:	24001d7c 	.word	0x24001d7c
 80a9428:	080a9399 	.word	0x080a9399

080a942c <__sfp_lock_acquire>:
 80a942c:	4801      	ldr	r0, [pc, #4]	@ (80a9434 <__sfp_lock_acquire+0x8>)
 80a942e:	f000 b90e 	b.w	80a964e <__retarget_lock_acquire_recursive>
 80a9432:	bf00      	nop
 80a9434:	24001ebd 	.word	0x24001ebd

080a9438 <__sfp_lock_release>:
 80a9438:	4801      	ldr	r0, [pc, #4]	@ (80a9440 <__sfp_lock_release+0x8>)
 80a943a:	f000 b909 	b.w	80a9650 <__retarget_lock_release_recursive>
 80a943e:	bf00      	nop
 80a9440:	24001ebd 	.word	0x24001ebd

080a9444 <__sinit>:
 80a9444:	b510      	push	{r4, lr}
 80a9446:	4604      	mov	r4, r0
 80a9448:	f7ff fff0 	bl	80a942c <__sfp_lock_acquire>
 80a944c:	6a23      	ldr	r3, [r4, #32]
 80a944e:	b11b      	cbz	r3, 80a9458 <__sinit+0x14>
 80a9450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a9454:	f7ff bff0 	b.w	80a9438 <__sfp_lock_release>
 80a9458:	4b04      	ldr	r3, [pc, #16]	@ (80a946c <__sinit+0x28>)
 80a945a:	6223      	str	r3, [r4, #32]
 80a945c:	4b04      	ldr	r3, [pc, #16]	@ (80a9470 <__sinit+0x2c>)
 80a945e:	681b      	ldr	r3, [r3, #0]
 80a9460:	2b00      	cmp	r3, #0
 80a9462:	d1f5      	bne.n	80a9450 <__sinit+0xc>
 80a9464:	f7ff ffc4 	bl	80a93f0 <global_stdio_init.part.0>
 80a9468:	e7f2      	b.n	80a9450 <__sinit+0xc>
 80a946a:	bf00      	nop
 80a946c:	080a93b1 	.word	0x080a93b1
 80a9470:	24001eb4 	.word	0x24001eb4

080a9474 <_fwalk_sglue>:
 80a9474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a9478:	4607      	mov	r7, r0
 80a947a:	4688      	mov	r8, r1
 80a947c:	4614      	mov	r4, r2
 80a947e:	2600      	movs	r6, #0
 80a9480:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80a9484:	f1b9 0901 	subs.w	r9, r9, #1
 80a9488:	d505      	bpl.n	80a9496 <_fwalk_sglue+0x22>
 80a948a:	6824      	ldr	r4, [r4, #0]
 80a948c:	2c00      	cmp	r4, #0
 80a948e:	d1f7      	bne.n	80a9480 <_fwalk_sglue+0xc>
 80a9490:	4630      	mov	r0, r6
 80a9492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a9496:	89ab      	ldrh	r3, [r5, #12]
 80a9498:	2b01      	cmp	r3, #1
 80a949a:	d907      	bls.n	80a94ac <_fwalk_sglue+0x38>
 80a949c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80a94a0:	3301      	adds	r3, #1
 80a94a2:	d003      	beq.n	80a94ac <_fwalk_sglue+0x38>
 80a94a4:	4629      	mov	r1, r5
 80a94a6:	4638      	mov	r0, r7
 80a94a8:	47c0      	blx	r8
 80a94aa:	4306      	orrs	r6, r0
 80a94ac:	3568      	adds	r5, #104	@ 0x68
 80a94ae:	e7e9      	b.n	80a9484 <_fwalk_sglue+0x10>

080a94b0 <iprintf>:
 80a94b0:	b40f      	push	{r0, r1, r2, r3}
 80a94b2:	b507      	push	{r0, r1, r2, lr}
 80a94b4:	4906      	ldr	r1, [pc, #24]	@ (80a94d0 <iprintf+0x20>)
 80a94b6:	ab04      	add	r3, sp, #16
 80a94b8:	6808      	ldr	r0, [r1, #0]
 80a94ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80a94be:	6881      	ldr	r1, [r0, #8]
 80a94c0:	9301      	str	r3, [sp, #4]
 80a94c2:	f000 f9e9 	bl	80a9898 <_vfiprintf_r>
 80a94c6:	b003      	add	sp, #12
 80a94c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80a94cc:	b004      	add	sp, #16
 80a94ce:	4770      	bx	lr
 80a94d0:	24000110 	.word	0x24000110

080a94d4 <__sread>:
 80a94d4:	b510      	push	{r4, lr}
 80a94d6:	460c      	mov	r4, r1
 80a94d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80a94dc:	f000 f868 	bl	80a95b0 <_read_r>
 80a94e0:	2800      	cmp	r0, #0
 80a94e2:	bfab      	itete	ge
 80a94e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80a94e6:	89a3      	ldrhlt	r3, [r4, #12]
 80a94e8:	181b      	addge	r3, r3, r0
 80a94ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80a94ee:	bfac      	ite	ge
 80a94f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80a94f2:	81a3      	strhlt	r3, [r4, #12]
 80a94f4:	bd10      	pop	{r4, pc}

080a94f6 <__swrite>:
 80a94f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a94fa:	461f      	mov	r7, r3
 80a94fc:	898b      	ldrh	r3, [r1, #12]
 80a94fe:	05db      	lsls	r3, r3, #23
 80a9500:	4605      	mov	r5, r0
 80a9502:	460c      	mov	r4, r1
 80a9504:	4616      	mov	r6, r2
 80a9506:	d505      	bpl.n	80a9514 <__swrite+0x1e>
 80a9508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80a950c:	2302      	movs	r3, #2
 80a950e:	2200      	movs	r2, #0
 80a9510:	f000 f83c 	bl	80a958c <_lseek_r>
 80a9514:	89a3      	ldrh	r3, [r4, #12]
 80a9516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80a951a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80a951e:	81a3      	strh	r3, [r4, #12]
 80a9520:	4632      	mov	r2, r6
 80a9522:	463b      	mov	r3, r7
 80a9524:	4628      	mov	r0, r5
 80a9526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a952a:	f000 b853 	b.w	80a95d4 <_write_r>

080a952e <__sseek>:
 80a952e:	b510      	push	{r4, lr}
 80a9530:	460c      	mov	r4, r1
 80a9532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80a9536:	f000 f829 	bl	80a958c <_lseek_r>
 80a953a:	1c43      	adds	r3, r0, #1
 80a953c:	89a3      	ldrh	r3, [r4, #12]
 80a953e:	bf15      	itete	ne
 80a9540:	6560      	strne	r0, [r4, #84]	@ 0x54
 80a9542:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80a9546:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80a954a:	81a3      	strheq	r3, [r4, #12]
 80a954c:	bf18      	it	ne
 80a954e:	81a3      	strhne	r3, [r4, #12]
 80a9550:	bd10      	pop	{r4, pc}

080a9552 <__sclose>:
 80a9552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80a9556:	f000 b809 	b.w	80a956c <_close_r>

080a955a <memset>:
 80a955a:	4402      	add	r2, r0
 80a955c:	4603      	mov	r3, r0
 80a955e:	4293      	cmp	r3, r2
 80a9560:	d100      	bne.n	80a9564 <memset+0xa>
 80a9562:	4770      	bx	lr
 80a9564:	f803 1b01 	strb.w	r1, [r3], #1
 80a9568:	e7f9      	b.n	80a955e <memset+0x4>
	...

080a956c <_close_r>:
 80a956c:	b538      	push	{r3, r4, r5, lr}
 80a956e:	4d06      	ldr	r5, [pc, #24]	@ (80a9588 <_close_r+0x1c>)
 80a9570:	2300      	movs	r3, #0
 80a9572:	4604      	mov	r4, r0
 80a9574:	4608      	mov	r0, r1
 80a9576:	602b      	str	r3, [r5, #0]
 80a9578:	f7f7 fa85 	bl	80a0a86 <_close>
 80a957c:	1c43      	adds	r3, r0, #1
 80a957e:	d102      	bne.n	80a9586 <_close_r+0x1a>
 80a9580:	682b      	ldr	r3, [r5, #0]
 80a9582:	b103      	cbz	r3, 80a9586 <_close_r+0x1a>
 80a9584:	6023      	str	r3, [r4, #0]
 80a9586:	bd38      	pop	{r3, r4, r5, pc}
 80a9588:	24001eb8 	.word	0x24001eb8

080a958c <_lseek_r>:
 80a958c:	b538      	push	{r3, r4, r5, lr}
 80a958e:	4d07      	ldr	r5, [pc, #28]	@ (80a95ac <_lseek_r+0x20>)
 80a9590:	4604      	mov	r4, r0
 80a9592:	4608      	mov	r0, r1
 80a9594:	4611      	mov	r1, r2
 80a9596:	2200      	movs	r2, #0
 80a9598:	602a      	str	r2, [r5, #0]
 80a959a:	461a      	mov	r2, r3
 80a959c:	f7f7 fa9a 	bl	80a0ad4 <_lseek>
 80a95a0:	1c43      	adds	r3, r0, #1
 80a95a2:	d102      	bne.n	80a95aa <_lseek_r+0x1e>
 80a95a4:	682b      	ldr	r3, [r5, #0]
 80a95a6:	b103      	cbz	r3, 80a95aa <_lseek_r+0x1e>
 80a95a8:	6023      	str	r3, [r4, #0]
 80a95aa:	bd38      	pop	{r3, r4, r5, pc}
 80a95ac:	24001eb8 	.word	0x24001eb8

080a95b0 <_read_r>:
 80a95b0:	b538      	push	{r3, r4, r5, lr}
 80a95b2:	4d07      	ldr	r5, [pc, #28]	@ (80a95d0 <_read_r+0x20>)
 80a95b4:	4604      	mov	r4, r0
 80a95b6:	4608      	mov	r0, r1
 80a95b8:	4611      	mov	r1, r2
 80a95ba:	2200      	movs	r2, #0
 80a95bc:	602a      	str	r2, [r5, #0]
 80a95be:	461a      	mov	r2, r3
 80a95c0:	f7f7 fa28 	bl	80a0a14 <_read>
 80a95c4:	1c43      	adds	r3, r0, #1
 80a95c6:	d102      	bne.n	80a95ce <_read_r+0x1e>
 80a95c8:	682b      	ldr	r3, [r5, #0]
 80a95ca:	b103      	cbz	r3, 80a95ce <_read_r+0x1e>
 80a95cc:	6023      	str	r3, [r4, #0]
 80a95ce:	bd38      	pop	{r3, r4, r5, pc}
 80a95d0:	24001eb8 	.word	0x24001eb8

080a95d4 <_write_r>:
 80a95d4:	b538      	push	{r3, r4, r5, lr}
 80a95d6:	4d07      	ldr	r5, [pc, #28]	@ (80a95f4 <_write_r+0x20>)
 80a95d8:	4604      	mov	r4, r0
 80a95da:	4608      	mov	r0, r1
 80a95dc:	4611      	mov	r1, r2
 80a95de:	2200      	movs	r2, #0
 80a95e0:	602a      	str	r2, [r5, #0]
 80a95e2:	461a      	mov	r2, r3
 80a95e4:	f7f7 fa33 	bl	80a0a4e <_write>
 80a95e8:	1c43      	adds	r3, r0, #1
 80a95ea:	d102      	bne.n	80a95f2 <_write_r+0x1e>
 80a95ec:	682b      	ldr	r3, [r5, #0]
 80a95ee:	b103      	cbz	r3, 80a95f2 <_write_r+0x1e>
 80a95f0:	6023      	str	r3, [r4, #0]
 80a95f2:	bd38      	pop	{r3, r4, r5, pc}
 80a95f4:	24001eb8 	.word	0x24001eb8

080a95f8 <__errno>:
 80a95f8:	4b01      	ldr	r3, [pc, #4]	@ (80a9600 <__errno+0x8>)
 80a95fa:	6818      	ldr	r0, [r3, #0]
 80a95fc:	4770      	bx	lr
 80a95fe:	bf00      	nop
 80a9600:	24000110 	.word	0x24000110

080a9604 <__libc_init_array>:
 80a9604:	b570      	push	{r4, r5, r6, lr}
 80a9606:	4d0d      	ldr	r5, [pc, #52]	@ (80a963c <__libc_init_array+0x38>)
 80a9608:	4c0d      	ldr	r4, [pc, #52]	@ (80a9640 <__libc_init_array+0x3c>)
 80a960a:	1b64      	subs	r4, r4, r5
 80a960c:	10a4      	asrs	r4, r4, #2
 80a960e:	2600      	movs	r6, #0
 80a9610:	42a6      	cmp	r6, r4
 80a9612:	d109      	bne.n	80a9628 <__libc_init_array+0x24>
 80a9614:	4d0b      	ldr	r5, [pc, #44]	@ (80a9644 <__libc_init_array+0x40>)
 80a9616:	4c0c      	ldr	r4, [pc, #48]	@ (80a9648 <__libc_init_array+0x44>)
 80a9618:	f000 fdb6 	bl	80aa188 <_init>
 80a961c:	1b64      	subs	r4, r4, r5
 80a961e:	10a4      	asrs	r4, r4, #2
 80a9620:	2600      	movs	r6, #0
 80a9622:	42a6      	cmp	r6, r4
 80a9624:	d105      	bne.n	80a9632 <__libc_init_array+0x2e>
 80a9626:	bd70      	pop	{r4, r5, r6, pc}
 80a9628:	f855 3b04 	ldr.w	r3, [r5], #4
 80a962c:	4798      	blx	r3
 80a962e:	3601      	adds	r6, #1
 80a9630:	e7ee      	b.n	80a9610 <__libc_init_array+0xc>
 80a9632:	f855 3b04 	ldr.w	r3, [r5], #4
 80a9636:	4798      	blx	r3
 80a9638:	3601      	adds	r6, #1
 80a963a:	e7f2      	b.n	80a9622 <__libc_init_array+0x1e>
 80a963c:	080aa29c 	.word	0x080aa29c
 80a9640:	080aa29c 	.word	0x080aa29c
 80a9644:	080aa29c 	.word	0x080aa29c
 80a9648:	080aa2a0 	.word	0x080aa2a0

080a964c <__retarget_lock_init_recursive>:
 80a964c:	4770      	bx	lr

080a964e <__retarget_lock_acquire_recursive>:
 80a964e:	4770      	bx	lr

080a9650 <__retarget_lock_release_recursive>:
 80a9650:	4770      	bx	lr
	...

080a9654 <_free_r>:
 80a9654:	b538      	push	{r3, r4, r5, lr}
 80a9656:	4605      	mov	r5, r0
 80a9658:	2900      	cmp	r1, #0
 80a965a:	d041      	beq.n	80a96e0 <_free_r+0x8c>
 80a965c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80a9660:	1f0c      	subs	r4, r1, #4
 80a9662:	2b00      	cmp	r3, #0
 80a9664:	bfb8      	it	lt
 80a9666:	18e4      	addlt	r4, r4, r3
 80a9668:	f000 f8e0 	bl	80a982c <__malloc_lock>
 80a966c:	4a1d      	ldr	r2, [pc, #116]	@ (80a96e4 <_free_r+0x90>)
 80a966e:	6813      	ldr	r3, [r2, #0]
 80a9670:	b933      	cbnz	r3, 80a9680 <_free_r+0x2c>
 80a9672:	6063      	str	r3, [r4, #4]
 80a9674:	6014      	str	r4, [r2, #0]
 80a9676:	4628      	mov	r0, r5
 80a9678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a967c:	f000 b8dc 	b.w	80a9838 <__malloc_unlock>
 80a9680:	42a3      	cmp	r3, r4
 80a9682:	d908      	bls.n	80a9696 <_free_r+0x42>
 80a9684:	6820      	ldr	r0, [r4, #0]
 80a9686:	1821      	adds	r1, r4, r0
 80a9688:	428b      	cmp	r3, r1
 80a968a:	bf01      	itttt	eq
 80a968c:	6819      	ldreq	r1, [r3, #0]
 80a968e:	685b      	ldreq	r3, [r3, #4]
 80a9690:	1809      	addeq	r1, r1, r0
 80a9692:	6021      	streq	r1, [r4, #0]
 80a9694:	e7ed      	b.n	80a9672 <_free_r+0x1e>
 80a9696:	461a      	mov	r2, r3
 80a9698:	685b      	ldr	r3, [r3, #4]
 80a969a:	b10b      	cbz	r3, 80a96a0 <_free_r+0x4c>
 80a969c:	42a3      	cmp	r3, r4
 80a969e:	d9fa      	bls.n	80a9696 <_free_r+0x42>
 80a96a0:	6811      	ldr	r1, [r2, #0]
 80a96a2:	1850      	adds	r0, r2, r1
 80a96a4:	42a0      	cmp	r0, r4
 80a96a6:	d10b      	bne.n	80a96c0 <_free_r+0x6c>
 80a96a8:	6820      	ldr	r0, [r4, #0]
 80a96aa:	4401      	add	r1, r0
 80a96ac:	1850      	adds	r0, r2, r1
 80a96ae:	4283      	cmp	r3, r0
 80a96b0:	6011      	str	r1, [r2, #0]
 80a96b2:	d1e0      	bne.n	80a9676 <_free_r+0x22>
 80a96b4:	6818      	ldr	r0, [r3, #0]
 80a96b6:	685b      	ldr	r3, [r3, #4]
 80a96b8:	6053      	str	r3, [r2, #4]
 80a96ba:	4408      	add	r0, r1
 80a96bc:	6010      	str	r0, [r2, #0]
 80a96be:	e7da      	b.n	80a9676 <_free_r+0x22>
 80a96c0:	d902      	bls.n	80a96c8 <_free_r+0x74>
 80a96c2:	230c      	movs	r3, #12
 80a96c4:	602b      	str	r3, [r5, #0]
 80a96c6:	e7d6      	b.n	80a9676 <_free_r+0x22>
 80a96c8:	6820      	ldr	r0, [r4, #0]
 80a96ca:	1821      	adds	r1, r4, r0
 80a96cc:	428b      	cmp	r3, r1
 80a96ce:	bf04      	itt	eq
 80a96d0:	6819      	ldreq	r1, [r3, #0]
 80a96d2:	685b      	ldreq	r3, [r3, #4]
 80a96d4:	6063      	str	r3, [r4, #4]
 80a96d6:	bf04      	itt	eq
 80a96d8:	1809      	addeq	r1, r1, r0
 80a96da:	6021      	streq	r1, [r4, #0]
 80a96dc:	6054      	str	r4, [r2, #4]
 80a96de:	e7ca      	b.n	80a9676 <_free_r+0x22>
 80a96e0:	bd38      	pop	{r3, r4, r5, pc}
 80a96e2:	bf00      	nop
 80a96e4:	24001ec4 	.word	0x24001ec4

080a96e8 <sbrk_aligned>:
 80a96e8:	b570      	push	{r4, r5, r6, lr}
 80a96ea:	4e0f      	ldr	r6, [pc, #60]	@ (80a9728 <sbrk_aligned+0x40>)
 80a96ec:	460c      	mov	r4, r1
 80a96ee:	6831      	ldr	r1, [r6, #0]
 80a96f0:	4605      	mov	r5, r0
 80a96f2:	b911      	cbnz	r1, 80a96fa <sbrk_aligned+0x12>
 80a96f4:	f000 fcb4 	bl	80aa060 <_sbrk_r>
 80a96f8:	6030      	str	r0, [r6, #0]
 80a96fa:	4621      	mov	r1, r4
 80a96fc:	4628      	mov	r0, r5
 80a96fe:	f000 fcaf 	bl	80aa060 <_sbrk_r>
 80a9702:	1c43      	adds	r3, r0, #1
 80a9704:	d103      	bne.n	80a970e <sbrk_aligned+0x26>
 80a9706:	f04f 34ff 	mov.w	r4, #4294967295
 80a970a:	4620      	mov	r0, r4
 80a970c:	bd70      	pop	{r4, r5, r6, pc}
 80a970e:	1cc4      	adds	r4, r0, #3
 80a9710:	f024 0403 	bic.w	r4, r4, #3
 80a9714:	42a0      	cmp	r0, r4
 80a9716:	d0f8      	beq.n	80a970a <sbrk_aligned+0x22>
 80a9718:	1a21      	subs	r1, r4, r0
 80a971a:	4628      	mov	r0, r5
 80a971c:	f000 fca0 	bl	80aa060 <_sbrk_r>
 80a9720:	3001      	adds	r0, #1
 80a9722:	d1f2      	bne.n	80a970a <sbrk_aligned+0x22>
 80a9724:	e7ef      	b.n	80a9706 <sbrk_aligned+0x1e>
 80a9726:	bf00      	nop
 80a9728:	24001ec0 	.word	0x24001ec0

080a972c <_malloc_r>:
 80a972c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a9730:	1ccd      	adds	r5, r1, #3
 80a9732:	f025 0503 	bic.w	r5, r5, #3
 80a9736:	3508      	adds	r5, #8
 80a9738:	2d0c      	cmp	r5, #12
 80a973a:	bf38      	it	cc
 80a973c:	250c      	movcc	r5, #12
 80a973e:	2d00      	cmp	r5, #0
 80a9740:	4606      	mov	r6, r0
 80a9742:	db01      	blt.n	80a9748 <_malloc_r+0x1c>
 80a9744:	42a9      	cmp	r1, r5
 80a9746:	d904      	bls.n	80a9752 <_malloc_r+0x26>
 80a9748:	230c      	movs	r3, #12
 80a974a:	6033      	str	r3, [r6, #0]
 80a974c:	2000      	movs	r0, #0
 80a974e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a9752:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80a9828 <_malloc_r+0xfc>
 80a9756:	f000 f869 	bl	80a982c <__malloc_lock>
 80a975a:	f8d8 3000 	ldr.w	r3, [r8]
 80a975e:	461c      	mov	r4, r3
 80a9760:	bb44      	cbnz	r4, 80a97b4 <_malloc_r+0x88>
 80a9762:	4629      	mov	r1, r5
 80a9764:	4630      	mov	r0, r6
 80a9766:	f7ff ffbf 	bl	80a96e8 <sbrk_aligned>
 80a976a:	1c43      	adds	r3, r0, #1
 80a976c:	4604      	mov	r4, r0
 80a976e:	d158      	bne.n	80a9822 <_malloc_r+0xf6>
 80a9770:	f8d8 4000 	ldr.w	r4, [r8]
 80a9774:	4627      	mov	r7, r4
 80a9776:	2f00      	cmp	r7, #0
 80a9778:	d143      	bne.n	80a9802 <_malloc_r+0xd6>
 80a977a:	2c00      	cmp	r4, #0
 80a977c:	d04b      	beq.n	80a9816 <_malloc_r+0xea>
 80a977e:	6823      	ldr	r3, [r4, #0]
 80a9780:	4639      	mov	r1, r7
 80a9782:	4630      	mov	r0, r6
 80a9784:	eb04 0903 	add.w	r9, r4, r3
 80a9788:	f000 fc6a 	bl	80aa060 <_sbrk_r>
 80a978c:	4581      	cmp	r9, r0
 80a978e:	d142      	bne.n	80a9816 <_malloc_r+0xea>
 80a9790:	6821      	ldr	r1, [r4, #0]
 80a9792:	1a6d      	subs	r5, r5, r1
 80a9794:	4629      	mov	r1, r5
 80a9796:	4630      	mov	r0, r6
 80a9798:	f7ff ffa6 	bl	80a96e8 <sbrk_aligned>
 80a979c:	3001      	adds	r0, #1
 80a979e:	d03a      	beq.n	80a9816 <_malloc_r+0xea>
 80a97a0:	6823      	ldr	r3, [r4, #0]
 80a97a2:	442b      	add	r3, r5
 80a97a4:	6023      	str	r3, [r4, #0]
 80a97a6:	f8d8 3000 	ldr.w	r3, [r8]
 80a97aa:	685a      	ldr	r2, [r3, #4]
 80a97ac:	bb62      	cbnz	r2, 80a9808 <_malloc_r+0xdc>
 80a97ae:	f8c8 7000 	str.w	r7, [r8]
 80a97b2:	e00f      	b.n	80a97d4 <_malloc_r+0xa8>
 80a97b4:	6822      	ldr	r2, [r4, #0]
 80a97b6:	1b52      	subs	r2, r2, r5
 80a97b8:	d420      	bmi.n	80a97fc <_malloc_r+0xd0>
 80a97ba:	2a0b      	cmp	r2, #11
 80a97bc:	d917      	bls.n	80a97ee <_malloc_r+0xc2>
 80a97be:	1961      	adds	r1, r4, r5
 80a97c0:	42a3      	cmp	r3, r4
 80a97c2:	6025      	str	r5, [r4, #0]
 80a97c4:	bf18      	it	ne
 80a97c6:	6059      	strne	r1, [r3, #4]
 80a97c8:	6863      	ldr	r3, [r4, #4]
 80a97ca:	bf08      	it	eq
 80a97cc:	f8c8 1000 	streq.w	r1, [r8]
 80a97d0:	5162      	str	r2, [r4, r5]
 80a97d2:	604b      	str	r3, [r1, #4]
 80a97d4:	4630      	mov	r0, r6
 80a97d6:	f000 f82f 	bl	80a9838 <__malloc_unlock>
 80a97da:	f104 000b 	add.w	r0, r4, #11
 80a97de:	1d23      	adds	r3, r4, #4
 80a97e0:	f020 0007 	bic.w	r0, r0, #7
 80a97e4:	1ac2      	subs	r2, r0, r3
 80a97e6:	bf1c      	itt	ne
 80a97e8:	1a1b      	subne	r3, r3, r0
 80a97ea:	50a3      	strne	r3, [r4, r2]
 80a97ec:	e7af      	b.n	80a974e <_malloc_r+0x22>
 80a97ee:	6862      	ldr	r2, [r4, #4]
 80a97f0:	42a3      	cmp	r3, r4
 80a97f2:	bf0c      	ite	eq
 80a97f4:	f8c8 2000 	streq.w	r2, [r8]
 80a97f8:	605a      	strne	r2, [r3, #4]
 80a97fa:	e7eb      	b.n	80a97d4 <_malloc_r+0xa8>
 80a97fc:	4623      	mov	r3, r4
 80a97fe:	6864      	ldr	r4, [r4, #4]
 80a9800:	e7ae      	b.n	80a9760 <_malloc_r+0x34>
 80a9802:	463c      	mov	r4, r7
 80a9804:	687f      	ldr	r7, [r7, #4]
 80a9806:	e7b6      	b.n	80a9776 <_malloc_r+0x4a>
 80a9808:	461a      	mov	r2, r3
 80a980a:	685b      	ldr	r3, [r3, #4]
 80a980c:	42a3      	cmp	r3, r4
 80a980e:	d1fb      	bne.n	80a9808 <_malloc_r+0xdc>
 80a9810:	2300      	movs	r3, #0
 80a9812:	6053      	str	r3, [r2, #4]
 80a9814:	e7de      	b.n	80a97d4 <_malloc_r+0xa8>
 80a9816:	230c      	movs	r3, #12
 80a9818:	6033      	str	r3, [r6, #0]
 80a981a:	4630      	mov	r0, r6
 80a981c:	f000 f80c 	bl	80a9838 <__malloc_unlock>
 80a9820:	e794      	b.n	80a974c <_malloc_r+0x20>
 80a9822:	6005      	str	r5, [r0, #0]
 80a9824:	e7d6      	b.n	80a97d4 <_malloc_r+0xa8>
 80a9826:	bf00      	nop
 80a9828:	24001ec4 	.word	0x24001ec4

080a982c <__malloc_lock>:
 80a982c:	4801      	ldr	r0, [pc, #4]	@ (80a9834 <__malloc_lock+0x8>)
 80a982e:	f7ff bf0e 	b.w	80a964e <__retarget_lock_acquire_recursive>
 80a9832:	bf00      	nop
 80a9834:	24001ebc 	.word	0x24001ebc

080a9838 <__malloc_unlock>:
 80a9838:	4801      	ldr	r0, [pc, #4]	@ (80a9840 <__malloc_unlock+0x8>)
 80a983a:	f7ff bf09 	b.w	80a9650 <__retarget_lock_release_recursive>
 80a983e:	bf00      	nop
 80a9840:	24001ebc 	.word	0x24001ebc

080a9844 <__sfputc_r>:
 80a9844:	6893      	ldr	r3, [r2, #8]
 80a9846:	3b01      	subs	r3, #1
 80a9848:	2b00      	cmp	r3, #0
 80a984a:	b410      	push	{r4}
 80a984c:	6093      	str	r3, [r2, #8]
 80a984e:	da08      	bge.n	80a9862 <__sfputc_r+0x1e>
 80a9850:	6994      	ldr	r4, [r2, #24]
 80a9852:	42a3      	cmp	r3, r4
 80a9854:	db01      	blt.n	80a985a <__sfputc_r+0x16>
 80a9856:	290a      	cmp	r1, #10
 80a9858:	d103      	bne.n	80a9862 <__sfputc_r+0x1e>
 80a985a:	f85d 4b04 	ldr.w	r4, [sp], #4
 80a985e:	f000 bb6b 	b.w	80a9f38 <__swbuf_r>
 80a9862:	6813      	ldr	r3, [r2, #0]
 80a9864:	1c58      	adds	r0, r3, #1
 80a9866:	6010      	str	r0, [r2, #0]
 80a9868:	7019      	strb	r1, [r3, #0]
 80a986a:	4608      	mov	r0, r1
 80a986c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80a9870:	4770      	bx	lr

080a9872 <__sfputs_r>:
 80a9872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a9874:	4606      	mov	r6, r0
 80a9876:	460f      	mov	r7, r1
 80a9878:	4614      	mov	r4, r2
 80a987a:	18d5      	adds	r5, r2, r3
 80a987c:	42ac      	cmp	r4, r5
 80a987e:	d101      	bne.n	80a9884 <__sfputs_r+0x12>
 80a9880:	2000      	movs	r0, #0
 80a9882:	e007      	b.n	80a9894 <__sfputs_r+0x22>
 80a9884:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a9888:	463a      	mov	r2, r7
 80a988a:	4630      	mov	r0, r6
 80a988c:	f7ff ffda 	bl	80a9844 <__sfputc_r>
 80a9890:	1c43      	adds	r3, r0, #1
 80a9892:	d1f3      	bne.n	80a987c <__sfputs_r+0xa>
 80a9894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a9898 <_vfiprintf_r>:
 80a9898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a989c:	460d      	mov	r5, r1
 80a989e:	b09d      	sub	sp, #116	@ 0x74
 80a98a0:	4614      	mov	r4, r2
 80a98a2:	4698      	mov	r8, r3
 80a98a4:	4606      	mov	r6, r0
 80a98a6:	b118      	cbz	r0, 80a98b0 <_vfiprintf_r+0x18>
 80a98a8:	6a03      	ldr	r3, [r0, #32]
 80a98aa:	b90b      	cbnz	r3, 80a98b0 <_vfiprintf_r+0x18>
 80a98ac:	f7ff fdca 	bl	80a9444 <__sinit>
 80a98b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80a98b2:	07d9      	lsls	r1, r3, #31
 80a98b4:	d405      	bmi.n	80a98c2 <_vfiprintf_r+0x2a>
 80a98b6:	89ab      	ldrh	r3, [r5, #12]
 80a98b8:	059a      	lsls	r2, r3, #22
 80a98ba:	d402      	bmi.n	80a98c2 <_vfiprintf_r+0x2a>
 80a98bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80a98be:	f7ff fec6 	bl	80a964e <__retarget_lock_acquire_recursive>
 80a98c2:	89ab      	ldrh	r3, [r5, #12]
 80a98c4:	071b      	lsls	r3, r3, #28
 80a98c6:	d501      	bpl.n	80a98cc <_vfiprintf_r+0x34>
 80a98c8:	692b      	ldr	r3, [r5, #16]
 80a98ca:	b99b      	cbnz	r3, 80a98f4 <_vfiprintf_r+0x5c>
 80a98cc:	4629      	mov	r1, r5
 80a98ce:	4630      	mov	r0, r6
 80a98d0:	f000 fb70 	bl	80a9fb4 <__swsetup_r>
 80a98d4:	b170      	cbz	r0, 80a98f4 <_vfiprintf_r+0x5c>
 80a98d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80a98d8:	07dc      	lsls	r4, r3, #31
 80a98da:	d504      	bpl.n	80a98e6 <_vfiprintf_r+0x4e>
 80a98dc:	f04f 30ff 	mov.w	r0, #4294967295
 80a98e0:	b01d      	add	sp, #116	@ 0x74
 80a98e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a98e6:	89ab      	ldrh	r3, [r5, #12]
 80a98e8:	0598      	lsls	r0, r3, #22
 80a98ea:	d4f7      	bmi.n	80a98dc <_vfiprintf_r+0x44>
 80a98ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80a98ee:	f7ff feaf 	bl	80a9650 <__retarget_lock_release_recursive>
 80a98f2:	e7f3      	b.n	80a98dc <_vfiprintf_r+0x44>
 80a98f4:	2300      	movs	r3, #0
 80a98f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80a98f8:	2320      	movs	r3, #32
 80a98fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80a98fe:	f8cd 800c 	str.w	r8, [sp, #12]
 80a9902:	2330      	movs	r3, #48	@ 0x30
 80a9904:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80a9ab4 <_vfiprintf_r+0x21c>
 80a9908:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80a990c:	f04f 0901 	mov.w	r9, #1
 80a9910:	4623      	mov	r3, r4
 80a9912:	469a      	mov	sl, r3
 80a9914:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a9918:	b10a      	cbz	r2, 80a991e <_vfiprintf_r+0x86>
 80a991a:	2a25      	cmp	r2, #37	@ 0x25
 80a991c:	d1f9      	bne.n	80a9912 <_vfiprintf_r+0x7a>
 80a991e:	ebba 0b04 	subs.w	fp, sl, r4
 80a9922:	d00b      	beq.n	80a993c <_vfiprintf_r+0xa4>
 80a9924:	465b      	mov	r3, fp
 80a9926:	4622      	mov	r2, r4
 80a9928:	4629      	mov	r1, r5
 80a992a:	4630      	mov	r0, r6
 80a992c:	f7ff ffa1 	bl	80a9872 <__sfputs_r>
 80a9930:	3001      	adds	r0, #1
 80a9932:	f000 80a7 	beq.w	80a9a84 <_vfiprintf_r+0x1ec>
 80a9936:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80a9938:	445a      	add	r2, fp
 80a993a:	9209      	str	r2, [sp, #36]	@ 0x24
 80a993c:	f89a 3000 	ldrb.w	r3, [sl]
 80a9940:	2b00      	cmp	r3, #0
 80a9942:	f000 809f 	beq.w	80a9a84 <_vfiprintf_r+0x1ec>
 80a9946:	2300      	movs	r3, #0
 80a9948:	f04f 32ff 	mov.w	r2, #4294967295
 80a994c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80a9950:	f10a 0a01 	add.w	sl, sl, #1
 80a9954:	9304      	str	r3, [sp, #16]
 80a9956:	9307      	str	r3, [sp, #28]
 80a9958:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80a995c:	931a      	str	r3, [sp, #104]	@ 0x68
 80a995e:	4654      	mov	r4, sl
 80a9960:	2205      	movs	r2, #5
 80a9962:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a9966:	4853      	ldr	r0, [pc, #332]	@ (80a9ab4 <_vfiprintf_r+0x21c>)
 80a9968:	f7f6 fcba 	bl	80a02e0 <memchr>
 80a996c:	9a04      	ldr	r2, [sp, #16]
 80a996e:	b9d8      	cbnz	r0, 80a99a8 <_vfiprintf_r+0x110>
 80a9970:	06d1      	lsls	r1, r2, #27
 80a9972:	bf44      	itt	mi
 80a9974:	2320      	movmi	r3, #32
 80a9976:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80a997a:	0713      	lsls	r3, r2, #28
 80a997c:	bf44      	itt	mi
 80a997e:	232b      	movmi	r3, #43	@ 0x2b
 80a9980:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80a9984:	f89a 3000 	ldrb.w	r3, [sl]
 80a9988:	2b2a      	cmp	r3, #42	@ 0x2a
 80a998a:	d015      	beq.n	80a99b8 <_vfiprintf_r+0x120>
 80a998c:	9a07      	ldr	r2, [sp, #28]
 80a998e:	4654      	mov	r4, sl
 80a9990:	2000      	movs	r0, #0
 80a9992:	f04f 0c0a 	mov.w	ip, #10
 80a9996:	4621      	mov	r1, r4
 80a9998:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a999c:	3b30      	subs	r3, #48	@ 0x30
 80a999e:	2b09      	cmp	r3, #9
 80a99a0:	d94b      	bls.n	80a9a3a <_vfiprintf_r+0x1a2>
 80a99a2:	b1b0      	cbz	r0, 80a99d2 <_vfiprintf_r+0x13a>
 80a99a4:	9207      	str	r2, [sp, #28]
 80a99a6:	e014      	b.n	80a99d2 <_vfiprintf_r+0x13a>
 80a99a8:	eba0 0308 	sub.w	r3, r0, r8
 80a99ac:	fa09 f303 	lsl.w	r3, r9, r3
 80a99b0:	4313      	orrs	r3, r2
 80a99b2:	9304      	str	r3, [sp, #16]
 80a99b4:	46a2      	mov	sl, r4
 80a99b6:	e7d2      	b.n	80a995e <_vfiprintf_r+0xc6>
 80a99b8:	9b03      	ldr	r3, [sp, #12]
 80a99ba:	1d19      	adds	r1, r3, #4
 80a99bc:	681b      	ldr	r3, [r3, #0]
 80a99be:	9103      	str	r1, [sp, #12]
 80a99c0:	2b00      	cmp	r3, #0
 80a99c2:	bfbb      	ittet	lt
 80a99c4:	425b      	neglt	r3, r3
 80a99c6:	f042 0202 	orrlt.w	r2, r2, #2
 80a99ca:	9307      	strge	r3, [sp, #28]
 80a99cc:	9307      	strlt	r3, [sp, #28]
 80a99ce:	bfb8      	it	lt
 80a99d0:	9204      	strlt	r2, [sp, #16]
 80a99d2:	7823      	ldrb	r3, [r4, #0]
 80a99d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80a99d6:	d10a      	bne.n	80a99ee <_vfiprintf_r+0x156>
 80a99d8:	7863      	ldrb	r3, [r4, #1]
 80a99da:	2b2a      	cmp	r3, #42	@ 0x2a
 80a99dc:	d132      	bne.n	80a9a44 <_vfiprintf_r+0x1ac>
 80a99de:	9b03      	ldr	r3, [sp, #12]
 80a99e0:	1d1a      	adds	r2, r3, #4
 80a99e2:	681b      	ldr	r3, [r3, #0]
 80a99e4:	9203      	str	r2, [sp, #12]
 80a99e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80a99ea:	3402      	adds	r4, #2
 80a99ec:	9305      	str	r3, [sp, #20]
 80a99ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80a9ac4 <_vfiprintf_r+0x22c>
 80a99f2:	7821      	ldrb	r1, [r4, #0]
 80a99f4:	2203      	movs	r2, #3
 80a99f6:	4650      	mov	r0, sl
 80a99f8:	f7f6 fc72 	bl	80a02e0 <memchr>
 80a99fc:	b138      	cbz	r0, 80a9a0e <_vfiprintf_r+0x176>
 80a99fe:	9b04      	ldr	r3, [sp, #16]
 80a9a00:	eba0 000a 	sub.w	r0, r0, sl
 80a9a04:	2240      	movs	r2, #64	@ 0x40
 80a9a06:	4082      	lsls	r2, r0
 80a9a08:	4313      	orrs	r3, r2
 80a9a0a:	3401      	adds	r4, #1
 80a9a0c:	9304      	str	r3, [sp, #16]
 80a9a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a9a12:	4829      	ldr	r0, [pc, #164]	@ (80a9ab8 <_vfiprintf_r+0x220>)
 80a9a14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80a9a18:	2206      	movs	r2, #6
 80a9a1a:	f7f6 fc61 	bl	80a02e0 <memchr>
 80a9a1e:	2800      	cmp	r0, #0
 80a9a20:	d03f      	beq.n	80a9aa2 <_vfiprintf_r+0x20a>
 80a9a22:	4b26      	ldr	r3, [pc, #152]	@ (80a9abc <_vfiprintf_r+0x224>)
 80a9a24:	bb1b      	cbnz	r3, 80a9a6e <_vfiprintf_r+0x1d6>
 80a9a26:	9b03      	ldr	r3, [sp, #12]
 80a9a28:	3307      	adds	r3, #7
 80a9a2a:	f023 0307 	bic.w	r3, r3, #7
 80a9a2e:	3308      	adds	r3, #8
 80a9a30:	9303      	str	r3, [sp, #12]
 80a9a32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80a9a34:	443b      	add	r3, r7
 80a9a36:	9309      	str	r3, [sp, #36]	@ 0x24
 80a9a38:	e76a      	b.n	80a9910 <_vfiprintf_r+0x78>
 80a9a3a:	fb0c 3202 	mla	r2, ip, r2, r3
 80a9a3e:	460c      	mov	r4, r1
 80a9a40:	2001      	movs	r0, #1
 80a9a42:	e7a8      	b.n	80a9996 <_vfiprintf_r+0xfe>
 80a9a44:	2300      	movs	r3, #0
 80a9a46:	3401      	adds	r4, #1
 80a9a48:	9305      	str	r3, [sp, #20]
 80a9a4a:	4619      	mov	r1, r3
 80a9a4c:	f04f 0c0a 	mov.w	ip, #10
 80a9a50:	4620      	mov	r0, r4
 80a9a52:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a9a56:	3a30      	subs	r2, #48	@ 0x30
 80a9a58:	2a09      	cmp	r2, #9
 80a9a5a:	d903      	bls.n	80a9a64 <_vfiprintf_r+0x1cc>
 80a9a5c:	2b00      	cmp	r3, #0
 80a9a5e:	d0c6      	beq.n	80a99ee <_vfiprintf_r+0x156>
 80a9a60:	9105      	str	r1, [sp, #20]
 80a9a62:	e7c4      	b.n	80a99ee <_vfiprintf_r+0x156>
 80a9a64:	fb0c 2101 	mla	r1, ip, r1, r2
 80a9a68:	4604      	mov	r4, r0
 80a9a6a:	2301      	movs	r3, #1
 80a9a6c:	e7f0      	b.n	80a9a50 <_vfiprintf_r+0x1b8>
 80a9a6e:	ab03      	add	r3, sp, #12
 80a9a70:	9300      	str	r3, [sp, #0]
 80a9a72:	462a      	mov	r2, r5
 80a9a74:	4b12      	ldr	r3, [pc, #72]	@ (80a9ac0 <_vfiprintf_r+0x228>)
 80a9a76:	a904      	add	r1, sp, #16
 80a9a78:	4630      	mov	r0, r6
 80a9a7a:	f3af 8000 	nop.w
 80a9a7e:	4607      	mov	r7, r0
 80a9a80:	1c78      	adds	r0, r7, #1
 80a9a82:	d1d6      	bne.n	80a9a32 <_vfiprintf_r+0x19a>
 80a9a84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80a9a86:	07d9      	lsls	r1, r3, #31
 80a9a88:	d405      	bmi.n	80a9a96 <_vfiprintf_r+0x1fe>
 80a9a8a:	89ab      	ldrh	r3, [r5, #12]
 80a9a8c:	059a      	lsls	r2, r3, #22
 80a9a8e:	d402      	bmi.n	80a9a96 <_vfiprintf_r+0x1fe>
 80a9a90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80a9a92:	f7ff fddd 	bl	80a9650 <__retarget_lock_release_recursive>
 80a9a96:	89ab      	ldrh	r3, [r5, #12]
 80a9a98:	065b      	lsls	r3, r3, #25
 80a9a9a:	f53f af1f 	bmi.w	80a98dc <_vfiprintf_r+0x44>
 80a9a9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80a9aa0:	e71e      	b.n	80a98e0 <_vfiprintf_r+0x48>
 80a9aa2:	ab03      	add	r3, sp, #12
 80a9aa4:	9300      	str	r3, [sp, #0]
 80a9aa6:	462a      	mov	r2, r5
 80a9aa8:	4b05      	ldr	r3, [pc, #20]	@ (80a9ac0 <_vfiprintf_r+0x228>)
 80a9aaa:	a904      	add	r1, sp, #16
 80a9aac:	4630      	mov	r0, r6
 80a9aae:	f000 f879 	bl	80a9ba4 <_printf_i>
 80a9ab2:	e7e4      	b.n	80a9a7e <_vfiprintf_r+0x1e6>
 80a9ab4:	080aa260 	.word	0x080aa260
 80a9ab8:	080aa26a 	.word	0x080aa26a
 80a9abc:	00000000 	.word	0x00000000
 80a9ac0:	080a9873 	.word	0x080a9873
 80a9ac4:	080aa266 	.word	0x080aa266

080a9ac8 <_printf_common>:
 80a9ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a9acc:	4616      	mov	r6, r2
 80a9ace:	4698      	mov	r8, r3
 80a9ad0:	688a      	ldr	r2, [r1, #8]
 80a9ad2:	690b      	ldr	r3, [r1, #16]
 80a9ad4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80a9ad8:	4293      	cmp	r3, r2
 80a9ada:	bfb8      	it	lt
 80a9adc:	4613      	movlt	r3, r2
 80a9ade:	6033      	str	r3, [r6, #0]
 80a9ae0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80a9ae4:	4607      	mov	r7, r0
 80a9ae6:	460c      	mov	r4, r1
 80a9ae8:	b10a      	cbz	r2, 80a9aee <_printf_common+0x26>
 80a9aea:	3301      	adds	r3, #1
 80a9aec:	6033      	str	r3, [r6, #0]
 80a9aee:	6823      	ldr	r3, [r4, #0]
 80a9af0:	0699      	lsls	r1, r3, #26
 80a9af2:	bf42      	ittt	mi
 80a9af4:	6833      	ldrmi	r3, [r6, #0]
 80a9af6:	3302      	addmi	r3, #2
 80a9af8:	6033      	strmi	r3, [r6, #0]
 80a9afa:	6825      	ldr	r5, [r4, #0]
 80a9afc:	f015 0506 	ands.w	r5, r5, #6
 80a9b00:	d106      	bne.n	80a9b10 <_printf_common+0x48>
 80a9b02:	f104 0a19 	add.w	sl, r4, #25
 80a9b06:	68e3      	ldr	r3, [r4, #12]
 80a9b08:	6832      	ldr	r2, [r6, #0]
 80a9b0a:	1a9b      	subs	r3, r3, r2
 80a9b0c:	42ab      	cmp	r3, r5
 80a9b0e:	dc26      	bgt.n	80a9b5e <_printf_common+0x96>
 80a9b10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80a9b14:	6822      	ldr	r2, [r4, #0]
 80a9b16:	3b00      	subs	r3, #0
 80a9b18:	bf18      	it	ne
 80a9b1a:	2301      	movne	r3, #1
 80a9b1c:	0692      	lsls	r2, r2, #26
 80a9b1e:	d42b      	bmi.n	80a9b78 <_printf_common+0xb0>
 80a9b20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80a9b24:	4641      	mov	r1, r8
 80a9b26:	4638      	mov	r0, r7
 80a9b28:	47c8      	blx	r9
 80a9b2a:	3001      	adds	r0, #1
 80a9b2c:	d01e      	beq.n	80a9b6c <_printf_common+0xa4>
 80a9b2e:	6823      	ldr	r3, [r4, #0]
 80a9b30:	6922      	ldr	r2, [r4, #16]
 80a9b32:	f003 0306 	and.w	r3, r3, #6
 80a9b36:	2b04      	cmp	r3, #4
 80a9b38:	bf02      	ittt	eq
 80a9b3a:	68e5      	ldreq	r5, [r4, #12]
 80a9b3c:	6833      	ldreq	r3, [r6, #0]
 80a9b3e:	1aed      	subeq	r5, r5, r3
 80a9b40:	68a3      	ldr	r3, [r4, #8]
 80a9b42:	bf0c      	ite	eq
 80a9b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80a9b48:	2500      	movne	r5, #0
 80a9b4a:	4293      	cmp	r3, r2
 80a9b4c:	bfc4      	itt	gt
 80a9b4e:	1a9b      	subgt	r3, r3, r2
 80a9b50:	18ed      	addgt	r5, r5, r3
 80a9b52:	2600      	movs	r6, #0
 80a9b54:	341a      	adds	r4, #26
 80a9b56:	42b5      	cmp	r5, r6
 80a9b58:	d11a      	bne.n	80a9b90 <_printf_common+0xc8>
 80a9b5a:	2000      	movs	r0, #0
 80a9b5c:	e008      	b.n	80a9b70 <_printf_common+0xa8>
 80a9b5e:	2301      	movs	r3, #1
 80a9b60:	4652      	mov	r2, sl
 80a9b62:	4641      	mov	r1, r8
 80a9b64:	4638      	mov	r0, r7
 80a9b66:	47c8      	blx	r9
 80a9b68:	3001      	adds	r0, #1
 80a9b6a:	d103      	bne.n	80a9b74 <_printf_common+0xac>
 80a9b6c:	f04f 30ff 	mov.w	r0, #4294967295
 80a9b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a9b74:	3501      	adds	r5, #1
 80a9b76:	e7c6      	b.n	80a9b06 <_printf_common+0x3e>
 80a9b78:	18e1      	adds	r1, r4, r3
 80a9b7a:	1c5a      	adds	r2, r3, #1
 80a9b7c:	2030      	movs	r0, #48	@ 0x30
 80a9b7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80a9b82:	4422      	add	r2, r4
 80a9b84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80a9b88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80a9b8c:	3302      	adds	r3, #2
 80a9b8e:	e7c7      	b.n	80a9b20 <_printf_common+0x58>
 80a9b90:	2301      	movs	r3, #1
 80a9b92:	4622      	mov	r2, r4
 80a9b94:	4641      	mov	r1, r8
 80a9b96:	4638      	mov	r0, r7
 80a9b98:	47c8      	blx	r9
 80a9b9a:	3001      	adds	r0, #1
 80a9b9c:	d0e6      	beq.n	80a9b6c <_printf_common+0xa4>
 80a9b9e:	3601      	adds	r6, #1
 80a9ba0:	e7d9      	b.n	80a9b56 <_printf_common+0x8e>
	...

080a9ba4 <_printf_i>:
 80a9ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80a9ba8:	7e0f      	ldrb	r7, [r1, #24]
 80a9baa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80a9bac:	2f78      	cmp	r7, #120	@ 0x78
 80a9bae:	4691      	mov	r9, r2
 80a9bb0:	4680      	mov	r8, r0
 80a9bb2:	460c      	mov	r4, r1
 80a9bb4:	469a      	mov	sl, r3
 80a9bb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80a9bba:	d807      	bhi.n	80a9bcc <_printf_i+0x28>
 80a9bbc:	2f62      	cmp	r7, #98	@ 0x62
 80a9bbe:	d80a      	bhi.n	80a9bd6 <_printf_i+0x32>
 80a9bc0:	2f00      	cmp	r7, #0
 80a9bc2:	f000 80d1 	beq.w	80a9d68 <_printf_i+0x1c4>
 80a9bc6:	2f58      	cmp	r7, #88	@ 0x58
 80a9bc8:	f000 80b8 	beq.w	80a9d3c <_printf_i+0x198>
 80a9bcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80a9bd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80a9bd4:	e03a      	b.n	80a9c4c <_printf_i+0xa8>
 80a9bd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80a9bda:	2b15      	cmp	r3, #21
 80a9bdc:	d8f6      	bhi.n	80a9bcc <_printf_i+0x28>
 80a9bde:	a101      	add	r1, pc, #4	@ (adr r1, 80a9be4 <_printf_i+0x40>)
 80a9be0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80a9be4:	080a9c3d 	.word	0x080a9c3d
 80a9be8:	080a9c51 	.word	0x080a9c51
 80a9bec:	080a9bcd 	.word	0x080a9bcd
 80a9bf0:	080a9bcd 	.word	0x080a9bcd
 80a9bf4:	080a9bcd 	.word	0x080a9bcd
 80a9bf8:	080a9bcd 	.word	0x080a9bcd
 80a9bfc:	080a9c51 	.word	0x080a9c51
 80a9c00:	080a9bcd 	.word	0x080a9bcd
 80a9c04:	080a9bcd 	.word	0x080a9bcd
 80a9c08:	080a9bcd 	.word	0x080a9bcd
 80a9c0c:	080a9bcd 	.word	0x080a9bcd
 80a9c10:	080a9d4f 	.word	0x080a9d4f
 80a9c14:	080a9c7b 	.word	0x080a9c7b
 80a9c18:	080a9d09 	.word	0x080a9d09
 80a9c1c:	080a9bcd 	.word	0x080a9bcd
 80a9c20:	080a9bcd 	.word	0x080a9bcd
 80a9c24:	080a9d71 	.word	0x080a9d71
 80a9c28:	080a9bcd 	.word	0x080a9bcd
 80a9c2c:	080a9c7b 	.word	0x080a9c7b
 80a9c30:	080a9bcd 	.word	0x080a9bcd
 80a9c34:	080a9bcd 	.word	0x080a9bcd
 80a9c38:	080a9d11 	.word	0x080a9d11
 80a9c3c:	6833      	ldr	r3, [r6, #0]
 80a9c3e:	1d1a      	adds	r2, r3, #4
 80a9c40:	681b      	ldr	r3, [r3, #0]
 80a9c42:	6032      	str	r2, [r6, #0]
 80a9c44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80a9c48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80a9c4c:	2301      	movs	r3, #1
 80a9c4e:	e09c      	b.n	80a9d8a <_printf_i+0x1e6>
 80a9c50:	6833      	ldr	r3, [r6, #0]
 80a9c52:	6820      	ldr	r0, [r4, #0]
 80a9c54:	1d19      	adds	r1, r3, #4
 80a9c56:	6031      	str	r1, [r6, #0]
 80a9c58:	0606      	lsls	r6, r0, #24
 80a9c5a:	d501      	bpl.n	80a9c60 <_printf_i+0xbc>
 80a9c5c:	681d      	ldr	r5, [r3, #0]
 80a9c5e:	e003      	b.n	80a9c68 <_printf_i+0xc4>
 80a9c60:	0645      	lsls	r5, r0, #25
 80a9c62:	d5fb      	bpl.n	80a9c5c <_printf_i+0xb8>
 80a9c64:	f9b3 5000 	ldrsh.w	r5, [r3]
 80a9c68:	2d00      	cmp	r5, #0
 80a9c6a:	da03      	bge.n	80a9c74 <_printf_i+0xd0>
 80a9c6c:	232d      	movs	r3, #45	@ 0x2d
 80a9c6e:	426d      	negs	r5, r5
 80a9c70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80a9c74:	4858      	ldr	r0, [pc, #352]	@ (80a9dd8 <_printf_i+0x234>)
 80a9c76:	230a      	movs	r3, #10
 80a9c78:	e011      	b.n	80a9c9e <_printf_i+0xfa>
 80a9c7a:	6821      	ldr	r1, [r4, #0]
 80a9c7c:	6833      	ldr	r3, [r6, #0]
 80a9c7e:	0608      	lsls	r0, r1, #24
 80a9c80:	f853 5b04 	ldr.w	r5, [r3], #4
 80a9c84:	d402      	bmi.n	80a9c8c <_printf_i+0xe8>
 80a9c86:	0649      	lsls	r1, r1, #25
 80a9c88:	bf48      	it	mi
 80a9c8a:	b2ad      	uxthmi	r5, r5
 80a9c8c:	2f6f      	cmp	r7, #111	@ 0x6f
 80a9c8e:	4852      	ldr	r0, [pc, #328]	@ (80a9dd8 <_printf_i+0x234>)
 80a9c90:	6033      	str	r3, [r6, #0]
 80a9c92:	bf14      	ite	ne
 80a9c94:	230a      	movne	r3, #10
 80a9c96:	2308      	moveq	r3, #8
 80a9c98:	2100      	movs	r1, #0
 80a9c9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80a9c9e:	6866      	ldr	r6, [r4, #4]
 80a9ca0:	60a6      	str	r6, [r4, #8]
 80a9ca2:	2e00      	cmp	r6, #0
 80a9ca4:	db05      	blt.n	80a9cb2 <_printf_i+0x10e>
 80a9ca6:	6821      	ldr	r1, [r4, #0]
 80a9ca8:	432e      	orrs	r6, r5
 80a9caa:	f021 0104 	bic.w	r1, r1, #4
 80a9cae:	6021      	str	r1, [r4, #0]
 80a9cb0:	d04b      	beq.n	80a9d4a <_printf_i+0x1a6>
 80a9cb2:	4616      	mov	r6, r2
 80a9cb4:	fbb5 f1f3 	udiv	r1, r5, r3
 80a9cb8:	fb03 5711 	mls	r7, r3, r1, r5
 80a9cbc:	5dc7      	ldrb	r7, [r0, r7]
 80a9cbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80a9cc2:	462f      	mov	r7, r5
 80a9cc4:	42bb      	cmp	r3, r7
 80a9cc6:	460d      	mov	r5, r1
 80a9cc8:	d9f4      	bls.n	80a9cb4 <_printf_i+0x110>
 80a9cca:	2b08      	cmp	r3, #8
 80a9ccc:	d10b      	bne.n	80a9ce6 <_printf_i+0x142>
 80a9cce:	6823      	ldr	r3, [r4, #0]
 80a9cd0:	07df      	lsls	r7, r3, #31
 80a9cd2:	d508      	bpl.n	80a9ce6 <_printf_i+0x142>
 80a9cd4:	6923      	ldr	r3, [r4, #16]
 80a9cd6:	6861      	ldr	r1, [r4, #4]
 80a9cd8:	4299      	cmp	r1, r3
 80a9cda:	bfde      	ittt	le
 80a9cdc:	2330      	movle	r3, #48	@ 0x30
 80a9cde:	f806 3c01 	strble.w	r3, [r6, #-1]
 80a9ce2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80a9ce6:	1b92      	subs	r2, r2, r6
 80a9ce8:	6122      	str	r2, [r4, #16]
 80a9cea:	f8cd a000 	str.w	sl, [sp]
 80a9cee:	464b      	mov	r3, r9
 80a9cf0:	aa03      	add	r2, sp, #12
 80a9cf2:	4621      	mov	r1, r4
 80a9cf4:	4640      	mov	r0, r8
 80a9cf6:	f7ff fee7 	bl	80a9ac8 <_printf_common>
 80a9cfa:	3001      	adds	r0, #1
 80a9cfc:	d14a      	bne.n	80a9d94 <_printf_i+0x1f0>
 80a9cfe:	f04f 30ff 	mov.w	r0, #4294967295
 80a9d02:	b004      	add	sp, #16
 80a9d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a9d08:	6823      	ldr	r3, [r4, #0]
 80a9d0a:	f043 0320 	orr.w	r3, r3, #32
 80a9d0e:	6023      	str	r3, [r4, #0]
 80a9d10:	4832      	ldr	r0, [pc, #200]	@ (80a9ddc <_printf_i+0x238>)
 80a9d12:	2778      	movs	r7, #120	@ 0x78
 80a9d14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80a9d18:	6823      	ldr	r3, [r4, #0]
 80a9d1a:	6831      	ldr	r1, [r6, #0]
 80a9d1c:	061f      	lsls	r7, r3, #24
 80a9d1e:	f851 5b04 	ldr.w	r5, [r1], #4
 80a9d22:	d402      	bmi.n	80a9d2a <_printf_i+0x186>
 80a9d24:	065f      	lsls	r7, r3, #25
 80a9d26:	bf48      	it	mi
 80a9d28:	b2ad      	uxthmi	r5, r5
 80a9d2a:	6031      	str	r1, [r6, #0]
 80a9d2c:	07d9      	lsls	r1, r3, #31
 80a9d2e:	bf44      	itt	mi
 80a9d30:	f043 0320 	orrmi.w	r3, r3, #32
 80a9d34:	6023      	strmi	r3, [r4, #0]
 80a9d36:	b11d      	cbz	r5, 80a9d40 <_printf_i+0x19c>
 80a9d38:	2310      	movs	r3, #16
 80a9d3a:	e7ad      	b.n	80a9c98 <_printf_i+0xf4>
 80a9d3c:	4826      	ldr	r0, [pc, #152]	@ (80a9dd8 <_printf_i+0x234>)
 80a9d3e:	e7e9      	b.n	80a9d14 <_printf_i+0x170>
 80a9d40:	6823      	ldr	r3, [r4, #0]
 80a9d42:	f023 0320 	bic.w	r3, r3, #32
 80a9d46:	6023      	str	r3, [r4, #0]
 80a9d48:	e7f6      	b.n	80a9d38 <_printf_i+0x194>
 80a9d4a:	4616      	mov	r6, r2
 80a9d4c:	e7bd      	b.n	80a9cca <_printf_i+0x126>
 80a9d4e:	6833      	ldr	r3, [r6, #0]
 80a9d50:	6825      	ldr	r5, [r4, #0]
 80a9d52:	6961      	ldr	r1, [r4, #20]
 80a9d54:	1d18      	adds	r0, r3, #4
 80a9d56:	6030      	str	r0, [r6, #0]
 80a9d58:	062e      	lsls	r6, r5, #24
 80a9d5a:	681b      	ldr	r3, [r3, #0]
 80a9d5c:	d501      	bpl.n	80a9d62 <_printf_i+0x1be>
 80a9d5e:	6019      	str	r1, [r3, #0]
 80a9d60:	e002      	b.n	80a9d68 <_printf_i+0x1c4>
 80a9d62:	0668      	lsls	r0, r5, #25
 80a9d64:	d5fb      	bpl.n	80a9d5e <_printf_i+0x1ba>
 80a9d66:	8019      	strh	r1, [r3, #0]
 80a9d68:	2300      	movs	r3, #0
 80a9d6a:	6123      	str	r3, [r4, #16]
 80a9d6c:	4616      	mov	r6, r2
 80a9d6e:	e7bc      	b.n	80a9cea <_printf_i+0x146>
 80a9d70:	6833      	ldr	r3, [r6, #0]
 80a9d72:	1d1a      	adds	r2, r3, #4
 80a9d74:	6032      	str	r2, [r6, #0]
 80a9d76:	681e      	ldr	r6, [r3, #0]
 80a9d78:	6862      	ldr	r2, [r4, #4]
 80a9d7a:	2100      	movs	r1, #0
 80a9d7c:	4630      	mov	r0, r6
 80a9d7e:	f7f6 faaf 	bl	80a02e0 <memchr>
 80a9d82:	b108      	cbz	r0, 80a9d88 <_printf_i+0x1e4>
 80a9d84:	1b80      	subs	r0, r0, r6
 80a9d86:	6060      	str	r0, [r4, #4]
 80a9d88:	6863      	ldr	r3, [r4, #4]
 80a9d8a:	6123      	str	r3, [r4, #16]
 80a9d8c:	2300      	movs	r3, #0
 80a9d8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80a9d92:	e7aa      	b.n	80a9cea <_printf_i+0x146>
 80a9d94:	6923      	ldr	r3, [r4, #16]
 80a9d96:	4632      	mov	r2, r6
 80a9d98:	4649      	mov	r1, r9
 80a9d9a:	4640      	mov	r0, r8
 80a9d9c:	47d0      	blx	sl
 80a9d9e:	3001      	adds	r0, #1
 80a9da0:	d0ad      	beq.n	80a9cfe <_printf_i+0x15a>
 80a9da2:	6823      	ldr	r3, [r4, #0]
 80a9da4:	079b      	lsls	r3, r3, #30
 80a9da6:	d413      	bmi.n	80a9dd0 <_printf_i+0x22c>
 80a9da8:	68e0      	ldr	r0, [r4, #12]
 80a9daa:	9b03      	ldr	r3, [sp, #12]
 80a9dac:	4298      	cmp	r0, r3
 80a9dae:	bfb8      	it	lt
 80a9db0:	4618      	movlt	r0, r3
 80a9db2:	e7a6      	b.n	80a9d02 <_printf_i+0x15e>
 80a9db4:	2301      	movs	r3, #1
 80a9db6:	4632      	mov	r2, r6
 80a9db8:	4649      	mov	r1, r9
 80a9dba:	4640      	mov	r0, r8
 80a9dbc:	47d0      	blx	sl
 80a9dbe:	3001      	adds	r0, #1
 80a9dc0:	d09d      	beq.n	80a9cfe <_printf_i+0x15a>
 80a9dc2:	3501      	adds	r5, #1
 80a9dc4:	68e3      	ldr	r3, [r4, #12]
 80a9dc6:	9903      	ldr	r1, [sp, #12]
 80a9dc8:	1a5b      	subs	r3, r3, r1
 80a9dca:	42ab      	cmp	r3, r5
 80a9dcc:	dcf2      	bgt.n	80a9db4 <_printf_i+0x210>
 80a9dce:	e7eb      	b.n	80a9da8 <_printf_i+0x204>
 80a9dd0:	2500      	movs	r5, #0
 80a9dd2:	f104 0619 	add.w	r6, r4, #25
 80a9dd6:	e7f5      	b.n	80a9dc4 <_printf_i+0x220>
 80a9dd8:	080aa271 	.word	0x080aa271
 80a9ddc:	080aa282 	.word	0x080aa282

080a9de0 <__sflush_r>:
 80a9de0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80a9de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a9de8:	0716      	lsls	r6, r2, #28
 80a9dea:	4605      	mov	r5, r0
 80a9dec:	460c      	mov	r4, r1
 80a9dee:	d454      	bmi.n	80a9e9a <__sflush_r+0xba>
 80a9df0:	684b      	ldr	r3, [r1, #4]
 80a9df2:	2b00      	cmp	r3, #0
 80a9df4:	dc02      	bgt.n	80a9dfc <__sflush_r+0x1c>
 80a9df6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80a9df8:	2b00      	cmp	r3, #0
 80a9dfa:	dd48      	ble.n	80a9e8e <__sflush_r+0xae>
 80a9dfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80a9dfe:	2e00      	cmp	r6, #0
 80a9e00:	d045      	beq.n	80a9e8e <__sflush_r+0xae>
 80a9e02:	2300      	movs	r3, #0
 80a9e04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80a9e08:	682f      	ldr	r7, [r5, #0]
 80a9e0a:	6a21      	ldr	r1, [r4, #32]
 80a9e0c:	602b      	str	r3, [r5, #0]
 80a9e0e:	d030      	beq.n	80a9e72 <__sflush_r+0x92>
 80a9e10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80a9e12:	89a3      	ldrh	r3, [r4, #12]
 80a9e14:	0759      	lsls	r1, r3, #29
 80a9e16:	d505      	bpl.n	80a9e24 <__sflush_r+0x44>
 80a9e18:	6863      	ldr	r3, [r4, #4]
 80a9e1a:	1ad2      	subs	r2, r2, r3
 80a9e1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80a9e1e:	b10b      	cbz	r3, 80a9e24 <__sflush_r+0x44>
 80a9e20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80a9e22:	1ad2      	subs	r2, r2, r3
 80a9e24:	2300      	movs	r3, #0
 80a9e26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80a9e28:	6a21      	ldr	r1, [r4, #32]
 80a9e2a:	4628      	mov	r0, r5
 80a9e2c:	47b0      	blx	r6
 80a9e2e:	1c43      	adds	r3, r0, #1
 80a9e30:	89a3      	ldrh	r3, [r4, #12]
 80a9e32:	d106      	bne.n	80a9e42 <__sflush_r+0x62>
 80a9e34:	6829      	ldr	r1, [r5, #0]
 80a9e36:	291d      	cmp	r1, #29
 80a9e38:	d82b      	bhi.n	80a9e92 <__sflush_r+0xb2>
 80a9e3a:	4a2a      	ldr	r2, [pc, #168]	@ (80a9ee4 <__sflush_r+0x104>)
 80a9e3c:	40ca      	lsrs	r2, r1
 80a9e3e:	07d6      	lsls	r6, r2, #31
 80a9e40:	d527      	bpl.n	80a9e92 <__sflush_r+0xb2>
 80a9e42:	2200      	movs	r2, #0
 80a9e44:	6062      	str	r2, [r4, #4]
 80a9e46:	04d9      	lsls	r1, r3, #19
 80a9e48:	6922      	ldr	r2, [r4, #16]
 80a9e4a:	6022      	str	r2, [r4, #0]
 80a9e4c:	d504      	bpl.n	80a9e58 <__sflush_r+0x78>
 80a9e4e:	1c42      	adds	r2, r0, #1
 80a9e50:	d101      	bne.n	80a9e56 <__sflush_r+0x76>
 80a9e52:	682b      	ldr	r3, [r5, #0]
 80a9e54:	b903      	cbnz	r3, 80a9e58 <__sflush_r+0x78>
 80a9e56:	6560      	str	r0, [r4, #84]	@ 0x54
 80a9e58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80a9e5a:	602f      	str	r7, [r5, #0]
 80a9e5c:	b1b9      	cbz	r1, 80a9e8e <__sflush_r+0xae>
 80a9e5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80a9e62:	4299      	cmp	r1, r3
 80a9e64:	d002      	beq.n	80a9e6c <__sflush_r+0x8c>
 80a9e66:	4628      	mov	r0, r5
 80a9e68:	f7ff fbf4 	bl	80a9654 <_free_r>
 80a9e6c:	2300      	movs	r3, #0
 80a9e6e:	6363      	str	r3, [r4, #52]	@ 0x34
 80a9e70:	e00d      	b.n	80a9e8e <__sflush_r+0xae>
 80a9e72:	2301      	movs	r3, #1
 80a9e74:	4628      	mov	r0, r5
 80a9e76:	47b0      	blx	r6
 80a9e78:	4602      	mov	r2, r0
 80a9e7a:	1c50      	adds	r0, r2, #1
 80a9e7c:	d1c9      	bne.n	80a9e12 <__sflush_r+0x32>
 80a9e7e:	682b      	ldr	r3, [r5, #0]
 80a9e80:	2b00      	cmp	r3, #0
 80a9e82:	d0c6      	beq.n	80a9e12 <__sflush_r+0x32>
 80a9e84:	2b1d      	cmp	r3, #29
 80a9e86:	d001      	beq.n	80a9e8c <__sflush_r+0xac>
 80a9e88:	2b16      	cmp	r3, #22
 80a9e8a:	d11e      	bne.n	80a9eca <__sflush_r+0xea>
 80a9e8c:	602f      	str	r7, [r5, #0]
 80a9e8e:	2000      	movs	r0, #0
 80a9e90:	e022      	b.n	80a9ed8 <__sflush_r+0xf8>
 80a9e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80a9e96:	b21b      	sxth	r3, r3
 80a9e98:	e01b      	b.n	80a9ed2 <__sflush_r+0xf2>
 80a9e9a:	690f      	ldr	r7, [r1, #16]
 80a9e9c:	2f00      	cmp	r7, #0
 80a9e9e:	d0f6      	beq.n	80a9e8e <__sflush_r+0xae>
 80a9ea0:	0793      	lsls	r3, r2, #30
 80a9ea2:	680e      	ldr	r6, [r1, #0]
 80a9ea4:	bf08      	it	eq
 80a9ea6:	694b      	ldreq	r3, [r1, #20]
 80a9ea8:	600f      	str	r7, [r1, #0]
 80a9eaa:	bf18      	it	ne
 80a9eac:	2300      	movne	r3, #0
 80a9eae:	eba6 0807 	sub.w	r8, r6, r7
 80a9eb2:	608b      	str	r3, [r1, #8]
 80a9eb4:	f1b8 0f00 	cmp.w	r8, #0
 80a9eb8:	dde9      	ble.n	80a9e8e <__sflush_r+0xae>
 80a9eba:	6a21      	ldr	r1, [r4, #32]
 80a9ebc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80a9ebe:	4643      	mov	r3, r8
 80a9ec0:	463a      	mov	r2, r7
 80a9ec2:	4628      	mov	r0, r5
 80a9ec4:	47b0      	blx	r6
 80a9ec6:	2800      	cmp	r0, #0
 80a9ec8:	dc08      	bgt.n	80a9edc <__sflush_r+0xfc>
 80a9eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80a9ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80a9ed2:	81a3      	strh	r3, [r4, #12]
 80a9ed4:	f04f 30ff 	mov.w	r0, #4294967295
 80a9ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a9edc:	4407      	add	r7, r0
 80a9ede:	eba8 0800 	sub.w	r8, r8, r0
 80a9ee2:	e7e7      	b.n	80a9eb4 <__sflush_r+0xd4>
 80a9ee4:	20400001 	.word	0x20400001

080a9ee8 <_fflush_r>:
 80a9ee8:	b538      	push	{r3, r4, r5, lr}
 80a9eea:	690b      	ldr	r3, [r1, #16]
 80a9eec:	4605      	mov	r5, r0
 80a9eee:	460c      	mov	r4, r1
 80a9ef0:	b913      	cbnz	r3, 80a9ef8 <_fflush_r+0x10>
 80a9ef2:	2500      	movs	r5, #0
 80a9ef4:	4628      	mov	r0, r5
 80a9ef6:	bd38      	pop	{r3, r4, r5, pc}
 80a9ef8:	b118      	cbz	r0, 80a9f02 <_fflush_r+0x1a>
 80a9efa:	6a03      	ldr	r3, [r0, #32]
 80a9efc:	b90b      	cbnz	r3, 80a9f02 <_fflush_r+0x1a>
 80a9efe:	f7ff faa1 	bl	80a9444 <__sinit>
 80a9f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80a9f06:	2b00      	cmp	r3, #0
 80a9f08:	d0f3      	beq.n	80a9ef2 <_fflush_r+0xa>
 80a9f0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80a9f0c:	07d0      	lsls	r0, r2, #31
 80a9f0e:	d404      	bmi.n	80a9f1a <_fflush_r+0x32>
 80a9f10:	0599      	lsls	r1, r3, #22
 80a9f12:	d402      	bmi.n	80a9f1a <_fflush_r+0x32>
 80a9f14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80a9f16:	f7ff fb9a 	bl	80a964e <__retarget_lock_acquire_recursive>
 80a9f1a:	4628      	mov	r0, r5
 80a9f1c:	4621      	mov	r1, r4
 80a9f1e:	f7ff ff5f 	bl	80a9de0 <__sflush_r>
 80a9f22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80a9f24:	07da      	lsls	r2, r3, #31
 80a9f26:	4605      	mov	r5, r0
 80a9f28:	d4e4      	bmi.n	80a9ef4 <_fflush_r+0xc>
 80a9f2a:	89a3      	ldrh	r3, [r4, #12]
 80a9f2c:	059b      	lsls	r3, r3, #22
 80a9f2e:	d4e1      	bmi.n	80a9ef4 <_fflush_r+0xc>
 80a9f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80a9f32:	f7ff fb8d 	bl	80a9650 <__retarget_lock_release_recursive>
 80a9f36:	e7dd      	b.n	80a9ef4 <_fflush_r+0xc>

080a9f38 <__swbuf_r>:
 80a9f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a9f3a:	460e      	mov	r6, r1
 80a9f3c:	4614      	mov	r4, r2
 80a9f3e:	4605      	mov	r5, r0
 80a9f40:	b118      	cbz	r0, 80a9f4a <__swbuf_r+0x12>
 80a9f42:	6a03      	ldr	r3, [r0, #32]
 80a9f44:	b90b      	cbnz	r3, 80a9f4a <__swbuf_r+0x12>
 80a9f46:	f7ff fa7d 	bl	80a9444 <__sinit>
 80a9f4a:	69a3      	ldr	r3, [r4, #24]
 80a9f4c:	60a3      	str	r3, [r4, #8]
 80a9f4e:	89a3      	ldrh	r3, [r4, #12]
 80a9f50:	071a      	lsls	r2, r3, #28
 80a9f52:	d501      	bpl.n	80a9f58 <__swbuf_r+0x20>
 80a9f54:	6923      	ldr	r3, [r4, #16]
 80a9f56:	b943      	cbnz	r3, 80a9f6a <__swbuf_r+0x32>
 80a9f58:	4621      	mov	r1, r4
 80a9f5a:	4628      	mov	r0, r5
 80a9f5c:	f000 f82a 	bl	80a9fb4 <__swsetup_r>
 80a9f60:	b118      	cbz	r0, 80a9f6a <__swbuf_r+0x32>
 80a9f62:	f04f 37ff 	mov.w	r7, #4294967295
 80a9f66:	4638      	mov	r0, r7
 80a9f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a9f6a:	6823      	ldr	r3, [r4, #0]
 80a9f6c:	6922      	ldr	r2, [r4, #16]
 80a9f6e:	1a98      	subs	r0, r3, r2
 80a9f70:	6963      	ldr	r3, [r4, #20]
 80a9f72:	b2f6      	uxtb	r6, r6
 80a9f74:	4283      	cmp	r3, r0
 80a9f76:	4637      	mov	r7, r6
 80a9f78:	dc05      	bgt.n	80a9f86 <__swbuf_r+0x4e>
 80a9f7a:	4621      	mov	r1, r4
 80a9f7c:	4628      	mov	r0, r5
 80a9f7e:	f7ff ffb3 	bl	80a9ee8 <_fflush_r>
 80a9f82:	2800      	cmp	r0, #0
 80a9f84:	d1ed      	bne.n	80a9f62 <__swbuf_r+0x2a>
 80a9f86:	68a3      	ldr	r3, [r4, #8]
 80a9f88:	3b01      	subs	r3, #1
 80a9f8a:	60a3      	str	r3, [r4, #8]
 80a9f8c:	6823      	ldr	r3, [r4, #0]
 80a9f8e:	1c5a      	adds	r2, r3, #1
 80a9f90:	6022      	str	r2, [r4, #0]
 80a9f92:	701e      	strb	r6, [r3, #0]
 80a9f94:	6962      	ldr	r2, [r4, #20]
 80a9f96:	1c43      	adds	r3, r0, #1
 80a9f98:	429a      	cmp	r2, r3
 80a9f9a:	d004      	beq.n	80a9fa6 <__swbuf_r+0x6e>
 80a9f9c:	89a3      	ldrh	r3, [r4, #12]
 80a9f9e:	07db      	lsls	r3, r3, #31
 80a9fa0:	d5e1      	bpl.n	80a9f66 <__swbuf_r+0x2e>
 80a9fa2:	2e0a      	cmp	r6, #10
 80a9fa4:	d1df      	bne.n	80a9f66 <__swbuf_r+0x2e>
 80a9fa6:	4621      	mov	r1, r4
 80a9fa8:	4628      	mov	r0, r5
 80a9faa:	f7ff ff9d 	bl	80a9ee8 <_fflush_r>
 80a9fae:	2800      	cmp	r0, #0
 80a9fb0:	d0d9      	beq.n	80a9f66 <__swbuf_r+0x2e>
 80a9fb2:	e7d6      	b.n	80a9f62 <__swbuf_r+0x2a>

080a9fb4 <__swsetup_r>:
 80a9fb4:	b538      	push	{r3, r4, r5, lr}
 80a9fb6:	4b29      	ldr	r3, [pc, #164]	@ (80aa05c <__swsetup_r+0xa8>)
 80a9fb8:	4605      	mov	r5, r0
 80a9fba:	6818      	ldr	r0, [r3, #0]
 80a9fbc:	460c      	mov	r4, r1
 80a9fbe:	b118      	cbz	r0, 80a9fc8 <__swsetup_r+0x14>
 80a9fc0:	6a03      	ldr	r3, [r0, #32]
 80a9fc2:	b90b      	cbnz	r3, 80a9fc8 <__swsetup_r+0x14>
 80a9fc4:	f7ff fa3e 	bl	80a9444 <__sinit>
 80a9fc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80a9fcc:	0719      	lsls	r1, r3, #28
 80a9fce:	d422      	bmi.n	80aa016 <__swsetup_r+0x62>
 80a9fd0:	06da      	lsls	r2, r3, #27
 80a9fd2:	d407      	bmi.n	80a9fe4 <__swsetup_r+0x30>
 80a9fd4:	2209      	movs	r2, #9
 80a9fd6:	602a      	str	r2, [r5, #0]
 80a9fd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80a9fdc:	81a3      	strh	r3, [r4, #12]
 80a9fde:	f04f 30ff 	mov.w	r0, #4294967295
 80a9fe2:	e033      	b.n	80aa04c <__swsetup_r+0x98>
 80a9fe4:	0758      	lsls	r0, r3, #29
 80a9fe6:	d512      	bpl.n	80aa00e <__swsetup_r+0x5a>
 80a9fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80a9fea:	b141      	cbz	r1, 80a9ffe <__swsetup_r+0x4a>
 80a9fec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80a9ff0:	4299      	cmp	r1, r3
 80a9ff2:	d002      	beq.n	80a9ffa <__swsetup_r+0x46>
 80a9ff4:	4628      	mov	r0, r5
 80a9ff6:	f7ff fb2d 	bl	80a9654 <_free_r>
 80a9ffa:	2300      	movs	r3, #0
 80a9ffc:	6363      	str	r3, [r4, #52]	@ 0x34
 80a9ffe:	89a3      	ldrh	r3, [r4, #12]
 80aa000:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80aa004:	81a3      	strh	r3, [r4, #12]
 80aa006:	2300      	movs	r3, #0
 80aa008:	6063      	str	r3, [r4, #4]
 80aa00a:	6923      	ldr	r3, [r4, #16]
 80aa00c:	6023      	str	r3, [r4, #0]
 80aa00e:	89a3      	ldrh	r3, [r4, #12]
 80aa010:	f043 0308 	orr.w	r3, r3, #8
 80aa014:	81a3      	strh	r3, [r4, #12]
 80aa016:	6923      	ldr	r3, [r4, #16]
 80aa018:	b94b      	cbnz	r3, 80aa02e <__swsetup_r+0x7a>
 80aa01a:	89a3      	ldrh	r3, [r4, #12]
 80aa01c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80aa020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80aa024:	d003      	beq.n	80aa02e <__swsetup_r+0x7a>
 80aa026:	4621      	mov	r1, r4
 80aa028:	4628      	mov	r0, r5
 80aa02a:	f000 f84f 	bl	80aa0cc <__smakebuf_r>
 80aa02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80aa032:	f013 0201 	ands.w	r2, r3, #1
 80aa036:	d00a      	beq.n	80aa04e <__swsetup_r+0x9a>
 80aa038:	2200      	movs	r2, #0
 80aa03a:	60a2      	str	r2, [r4, #8]
 80aa03c:	6962      	ldr	r2, [r4, #20]
 80aa03e:	4252      	negs	r2, r2
 80aa040:	61a2      	str	r2, [r4, #24]
 80aa042:	6922      	ldr	r2, [r4, #16]
 80aa044:	b942      	cbnz	r2, 80aa058 <__swsetup_r+0xa4>
 80aa046:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80aa04a:	d1c5      	bne.n	80a9fd8 <__swsetup_r+0x24>
 80aa04c:	bd38      	pop	{r3, r4, r5, pc}
 80aa04e:	0799      	lsls	r1, r3, #30
 80aa050:	bf58      	it	pl
 80aa052:	6962      	ldrpl	r2, [r4, #20]
 80aa054:	60a2      	str	r2, [r4, #8]
 80aa056:	e7f4      	b.n	80aa042 <__swsetup_r+0x8e>
 80aa058:	2000      	movs	r0, #0
 80aa05a:	e7f7      	b.n	80aa04c <__swsetup_r+0x98>
 80aa05c:	24000110 	.word	0x24000110

080aa060 <_sbrk_r>:
 80aa060:	b538      	push	{r3, r4, r5, lr}
 80aa062:	4d06      	ldr	r5, [pc, #24]	@ (80aa07c <_sbrk_r+0x1c>)
 80aa064:	2300      	movs	r3, #0
 80aa066:	4604      	mov	r4, r0
 80aa068:	4608      	mov	r0, r1
 80aa06a:	602b      	str	r3, [r5, #0]
 80aa06c:	f7f6 fd40 	bl	80a0af0 <_sbrk>
 80aa070:	1c43      	adds	r3, r0, #1
 80aa072:	d102      	bne.n	80aa07a <_sbrk_r+0x1a>
 80aa074:	682b      	ldr	r3, [r5, #0]
 80aa076:	b103      	cbz	r3, 80aa07a <_sbrk_r+0x1a>
 80aa078:	6023      	str	r3, [r4, #0]
 80aa07a:	bd38      	pop	{r3, r4, r5, pc}
 80aa07c:	24001eb8 	.word	0x24001eb8

080aa080 <__swhatbuf_r>:
 80aa080:	b570      	push	{r4, r5, r6, lr}
 80aa082:	460c      	mov	r4, r1
 80aa084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80aa088:	2900      	cmp	r1, #0
 80aa08a:	b096      	sub	sp, #88	@ 0x58
 80aa08c:	4615      	mov	r5, r2
 80aa08e:	461e      	mov	r6, r3
 80aa090:	da0d      	bge.n	80aa0ae <__swhatbuf_r+0x2e>
 80aa092:	89a3      	ldrh	r3, [r4, #12]
 80aa094:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80aa098:	f04f 0100 	mov.w	r1, #0
 80aa09c:	bf14      	ite	ne
 80aa09e:	2340      	movne	r3, #64	@ 0x40
 80aa0a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80aa0a4:	2000      	movs	r0, #0
 80aa0a6:	6031      	str	r1, [r6, #0]
 80aa0a8:	602b      	str	r3, [r5, #0]
 80aa0aa:	b016      	add	sp, #88	@ 0x58
 80aa0ac:	bd70      	pop	{r4, r5, r6, pc}
 80aa0ae:	466a      	mov	r2, sp
 80aa0b0:	f000 f848 	bl	80aa144 <_fstat_r>
 80aa0b4:	2800      	cmp	r0, #0
 80aa0b6:	dbec      	blt.n	80aa092 <__swhatbuf_r+0x12>
 80aa0b8:	9901      	ldr	r1, [sp, #4]
 80aa0ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80aa0be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80aa0c2:	4259      	negs	r1, r3
 80aa0c4:	4159      	adcs	r1, r3
 80aa0c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80aa0ca:	e7eb      	b.n	80aa0a4 <__swhatbuf_r+0x24>

080aa0cc <__smakebuf_r>:
 80aa0cc:	898b      	ldrh	r3, [r1, #12]
 80aa0ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80aa0d0:	079d      	lsls	r5, r3, #30
 80aa0d2:	4606      	mov	r6, r0
 80aa0d4:	460c      	mov	r4, r1
 80aa0d6:	d507      	bpl.n	80aa0e8 <__smakebuf_r+0x1c>
 80aa0d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80aa0dc:	6023      	str	r3, [r4, #0]
 80aa0de:	6123      	str	r3, [r4, #16]
 80aa0e0:	2301      	movs	r3, #1
 80aa0e2:	6163      	str	r3, [r4, #20]
 80aa0e4:	b003      	add	sp, #12
 80aa0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80aa0e8:	ab01      	add	r3, sp, #4
 80aa0ea:	466a      	mov	r2, sp
 80aa0ec:	f7ff ffc8 	bl	80aa080 <__swhatbuf_r>
 80aa0f0:	9f00      	ldr	r7, [sp, #0]
 80aa0f2:	4605      	mov	r5, r0
 80aa0f4:	4639      	mov	r1, r7
 80aa0f6:	4630      	mov	r0, r6
 80aa0f8:	f7ff fb18 	bl	80a972c <_malloc_r>
 80aa0fc:	b948      	cbnz	r0, 80aa112 <__smakebuf_r+0x46>
 80aa0fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80aa102:	059a      	lsls	r2, r3, #22
 80aa104:	d4ee      	bmi.n	80aa0e4 <__smakebuf_r+0x18>
 80aa106:	f023 0303 	bic.w	r3, r3, #3
 80aa10a:	f043 0302 	orr.w	r3, r3, #2
 80aa10e:	81a3      	strh	r3, [r4, #12]
 80aa110:	e7e2      	b.n	80aa0d8 <__smakebuf_r+0xc>
 80aa112:	89a3      	ldrh	r3, [r4, #12]
 80aa114:	6020      	str	r0, [r4, #0]
 80aa116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80aa11a:	81a3      	strh	r3, [r4, #12]
 80aa11c:	9b01      	ldr	r3, [sp, #4]
 80aa11e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80aa122:	b15b      	cbz	r3, 80aa13c <__smakebuf_r+0x70>
 80aa124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80aa128:	4630      	mov	r0, r6
 80aa12a:	f000 f81d 	bl	80aa168 <_isatty_r>
 80aa12e:	b128      	cbz	r0, 80aa13c <__smakebuf_r+0x70>
 80aa130:	89a3      	ldrh	r3, [r4, #12]
 80aa132:	f023 0303 	bic.w	r3, r3, #3
 80aa136:	f043 0301 	orr.w	r3, r3, #1
 80aa13a:	81a3      	strh	r3, [r4, #12]
 80aa13c:	89a3      	ldrh	r3, [r4, #12]
 80aa13e:	431d      	orrs	r5, r3
 80aa140:	81a5      	strh	r5, [r4, #12]
 80aa142:	e7cf      	b.n	80aa0e4 <__smakebuf_r+0x18>

080aa144 <_fstat_r>:
 80aa144:	b538      	push	{r3, r4, r5, lr}
 80aa146:	4d07      	ldr	r5, [pc, #28]	@ (80aa164 <_fstat_r+0x20>)
 80aa148:	2300      	movs	r3, #0
 80aa14a:	4604      	mov	r4, r0
 80aa14c:	4608      	mov	r0, r1
 80aa14e:	4611      	mov	r1, r2
 80aa150:	602b      	str	r3, [r5, #0]
 80aa152:	f7f6 fca4 	bl	80a0a9e <_fstat>
 80aa156:	1c43      	adds	r3, r0, #1
 80aa158:	d102      	bne.n	80aa160 <_fstat_r+0x1c>
 80aa15a:	682b      	ldr	r3, [r5, #0]
 80aa15c:	b103      	cbz	r3, 80aa160 <_fstat_r+0x1c>
 80aa15e:	6023      	str	r3, [r4, #0]
 80aa160:	bd38      	pop	{r3, r4, r5, pc}
 80aa162:	bf00      	nop
 80aa164:	24001eb8 	.word	0x24001eb8

080aa168 <_isatty_r>:
 80aa168:	b538      	push	{r3, r4, r5, lr}
 80aa16a:	4d06      	ldr	r5, [pc, #24]	@ (80aa184 <_isatty_r+0x1c>)
 80aa16c:	2300      	movs	r3, #0
 80aa16e:	4604      	mov	r4, r0
 80aa170:	4608      	mov	r0, r1
 80aa172:	602b      	str	r3, [r5, #0]
 80aa174:	f7f6 fca3 	bl	80a0abe <_isatty>
 80aa178:	1c43      	adds	r3, r0, #1
 80aa17a:	d102      	bne.n	80aa182 <_isatty_r+0x1a>
 80aa17c:	682b      	ldr	r3, [r5, #0]
 80aa17e:	b103      	cbz	r3, 80aa182 <_isatty_r+0x1a>
 80aa180:	6023      	str	r3, [r4, #0]
 80aa182:	bd38      	pop	{r3, r4, r5, pc}
 80aa184:	24001eb8 	.word	0x24001eb8

080aa188 <_init>:
 80aa188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80aa18a:	bf00      	nop
 80aa18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80aa18e:	bc08      	pop	{r3}
 80aa190:	469e      	mov	lr, r3
 80aa192:	4770      	bx	lr

080aa194 <_fini>:
 80aa194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80aa196:	bf00      	nop
 80aa198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80aa19a:	bc08      	pop	{r3}
 80aa19c:	469e      	mov	lr, r3
 80aa19e:	4770      	bx	lr
