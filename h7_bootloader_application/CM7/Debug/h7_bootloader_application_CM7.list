
h7_bootloader_application_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf50  080402a0  080402a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0804c1f0  0804c1f0  0000d1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804c344  0804c344  0000e140  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0804c344  0804c344  0000d344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804c34c  0804c34c  0000e140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804c34c  0804c34c  0000d34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0804c350  0804c350  0000d350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000140  24000000  0804c354  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001110  24000140  0804c494  0000e140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001250  0804c494  0000e250  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e140  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bbae  00000000  00000000  0000e16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f9f  00000000  00000000  00029d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  0002dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f48  00000000  00000000  0002f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00043190  00000000  00000000  00030028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc7b  00000000  00000000  000731b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019cce5  00000000  00000000  0008fe33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022cb18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a08  00000000  00000000  0022cb5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00232564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080402a0 <__do_global_dtors_aux>:
 80402a0:	b510      	push	{r4, lr}
 80402a2:	4c05      	ldr	r4, [pc, #20]	@ (80402b8 <__do_global_dtors_aux+0x18>)
 80402a4:	7823      	ldrb	r3, [r4, #0]
 80402a6:	b933      	cbnz	r3, 80402b6 <__do_global_dtors_aux+0x16>
 80402a8:	4b04      	ldr	r3, [pc, #16]	@ (80402bc <__do_global_dtors_aux+0x1c>)
 80402aa:	b113      	cbz	r3, 80402b2 <__do_global_dtors_aux+0x12>
 80402ac:	4804      	ldr	r0, [pc, #16]	@ (80402c0 <__do_global_dtors_aux+0x20>)
 80402ae:	f3af 8000 	nop.w
 80402b2:	2301      	movs	r3, #1
 80402b4:	7023      	strb	r3, [r4, #0]
 80402b6:	bd10      	pop	{r4, pc}
 80402b8:	24000140 	.word	0x24000140
 80402bc:	00000000 	.word	0x00000000
 80402c0:	0804c1d8 	.word	0x0804c1d8

080402c4 <frame_dummy>:
 80402c4:	b508      	push	{r3, lr}
 80402c6:	4b03      	ldr	r3, [pc, #12]	@ (80402d4 <frame_dummy+0x10>)
 80402c8:	b11b      	cbz	r3, 80402d2 <frame_dummy+0xe>
 80402ca:	4903      	ldr	r1, [pc, #12]	@ (80402d8 <frame_dummy+0x14>)
 80402cc:	4803      	ldr	r0, [pc, #12]	@ (80402dc <frame_dummy+0x18>)
 80402ce:	f3af 8000 	nop.w
 80402d2:	bd08      	pop	{r3, pc}
 80402d4:	00000000 	.word	0x00000000
 80402d8:	24000144 	.word	0x24000144
 80402dc:	0804c1d8 	.word	0x0804c1d8

080402e0 <memchr>:
 80402e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80402e4:	2a10      	cmp	r2, #16
 80402e6:	db2b      	blt.n	8040340 <memchr+0x60>
 80402e8:	f010 0f07 	tst.w	r0, #7
 80402ec:	d008      	beq.n	8040300 <memchr+0x20>
 80402ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80402f2:	3a01      	subs	r2, #1
 80402f4:	428b      	cmp	r3, r1
 80402f6:	d02d      	beq.n	8040354 <memchr+0x74>
 80402f8:	f010 0f07 	tst.w	r0, #7
 80402fc:	b342      	cbz	r2, 8040350 <memchr+0x70>
 80402fe:	d1f6      	bne.n	80402ee <memchr+0xe>
 8040300:	b4f0      	push	{r4, r5, r6, r7}
 8040302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804030a:	f022 0407 	bic.w	r4, r2, #7
 804030e:	f07f 0700 	mvns.w	r7, #0
 8040312:	2300      	movs	r3, #0
 8040314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040318:	3c08      	subs	r4, #8
 804031a:	ea85 0501 	eor.w	r5, r5, r1
 804031e:	ea86 0601 	eor.w	r6, r6, r1
 8040322:	fa85 f547 	uadd8	r5, r5, r7
 8040326:	faa3 f587 	sel	r5, r3, r7
 804032a:	fa86 f647 	uadd8	r6, r6, r7
 804032e:	faa5 f687 	sel	r6, r5, r7
 8040332:	b98e      	cbnz	r6, 8040358 <memchr+0x78>
 8040334:	d1ee      	bne.n	8040314 <memchr+0x34>
 8040336:	bcf0      	pop	{r4, r5, r6, r7}
 8040338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 804033c:	f002 0207 	and.w	r2, r2, #7
 8040340:	b132      	cbz	r2, 8040350 <memchr+0x70>
 8040342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040346:	3a01      	subs	r2, #1
 8040348:	ea83 0301 	eor.w	r3, r3, r1
 804034c:	b113      	cbz	r3, 8040354 <memchr+0x74>
 804034e:	d1f8      	bne.n	8040342 <memchr+0x62>
 8040350:	2000      	movs	r0, #0
 8040352:	4770      	bx	lr
 8040354:	3801      	subs	r0, #1
 8040356:	4770      	bx	lr
 8040358:	2d00      	cmp	r5, #0
 804035a:	bf06      	itte	eq
 804035c:	4635      	moveq	r5, r6
 804035e:	3803      	subeq	r0, #3
 8040360:	3807      	subne	r0, #7
 8040362:	f015 0f01 	tst.w	r5, #1
 8040366:	d107      	bne.n	8040378 <memchr+0x98>
 8040368:	3001      	adds	r0, #1
 804036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 804036e:	bf02      	ittt	eq
 8040370:	3001      	addeq	r0, #1
 8040372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8040376:	3001      	addeq	r0, #1
 8040378:	bcf0      	pop	{r4, r5, r6, r7}
 804037a:	3801      	subs	r0, #1
 804037c:	4770      	bx	lr
 804037e:	bf00      	nop

08040380 <__aeabi_uldivmod>:
 8040380:	b953      	cbnz	r3, 8040398 <__aeabi_uldivmod+0x18>
 8040382:	b94a      	cbnz	r2, 8040398 <__aeabi_uldivmod+0x18>
 8040384:	2900      	cmp	r1, #0
 8040386:	bf08      	it	eq
 8040388:	2800      	cmpeq	r0, #0
 804038a:	bf1c      	itt	ne
 804038c:	f04f 31ff 	movne.w	r1, #4294967295
 8040390:	f04f 30ff 	movne.w	r0, #4294967295
 8040394:	f000 b988 	b.w	80406a8 <__aeabi_idiv0>
 8040398:	f1ad 0c08 	sub.w	ip, sp, #8
 804039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80403a0:	f000 f806 	bl	80403b0 <__udivmoddi4>
 80403a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80403a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80403ac:	b004      	add	sp, #16
 80403ae:	4770      	bx	lr

080403b0 <__udivmoddi4>:
 80403b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80403b4:	9d08      	ldr	r5, [sp, #32]
 80403b6:	468e      	mov	lr, r1
 80403b8:	4604      	mov	r4, r0
 80403ba:	4688      	mov	r8, r1
 80403bc:	2b00      	cmp	r3, #0
 80403be:	d14a      	bne.n	8040456 <__udivmoddi4+0xa6>
 80403c0:	428a      	cmp	r2, r1
 80403c2:	4617      	mov	r7, r2
 80403c4:	d962      	bls.n	804048c <__udivmoddi4+0xdc>
 80403c6:	fab2 f682 	clz	r6, r2
 80403ca:	b14e      	cbz	r6, 80403e0 <__udivmoddi4+0x30>
 80403cc:	f1c6 0320 	rsb	r3, r6, #32
 80403d0:	fa01 f806 	lsl.w	r8, r1, r6
 80403d4:	fa20 f303 	lsr.w	r3, r0, r3
 80403d8:	40b7      	lsls	r7, r6
 80403da:	ea43 0808 	orr.w	r8, r3, r8
 80403de:	40b4      	lsls	r4, r6
 80403e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80403e4:	fa1f fc87 	uxth.w	ip, r7
 80403e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80403ec:	0c23      	lsrs	r3, r4, #16
 80403ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80403f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80403f6:	fb01 f20c 	mul.w	r2, r1, ip
 80403fa:	429a      	cmp	r2, r3
 80403fc:	d909      	bls.n	8040412 <__udivmoddi4+0x62>
 80403fe:	18fb      	adds	r3, r7, r3
 8040400:	f101 30ff 	add.w	r0, r1, #4294967295
 8040404:	f080 80ea 	bcs.w	80405dc <__udivmoddi4+0x22c>
 8040408:	429a      	cmp	r2, r3
 804040a:	f240 80e7 	bls.w	80405dc <__udivmoddi4+0x22c>
 804040e:	3902      	subs	r1, #2
 8040410:	443b      	add	r3, r7
 8040412:	1a9a      	subs	r2, r3, r2
 8040414:	b2a3      	uxth	r3, r4
 8040416:	fbb2 f0fe 	udiv	r0, r2, lr
 804041a:	fb0e 2210 	mls	r2, lr, r0, r2
 804041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8040422:	fb00 fc0c 	mul.w	ip, r0, ip
 8040426:	459c      	cmp	ip, r3
 8040428:	d909      	bls.n	804043e <__udivmoddi4+0x8e>
 804042a:	18fb      	adds	r3, r7, r3
 804042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8040430:	f080 80d6 	bcs.w	80405e0 <__udivmoddi4+0x230>
 8040434:	459c      	cmp	ip, r3
 8040436:	f240 80d3 	bls.w	80405e0 <__udivmoddi4+0x230>
 804043a:	443b      	add	r3, r7
 804043c:	3802      	subs	r0, #2
 804043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8040442:	eba3 030c 	sub.w	r3, r3, ip
 8040446:	2100      	movs	r1, #0
 8040448:	b11d      	cbz	r5, 8040452 <__udivmoddi4+0xa2>
 804044a:	40f3      	lsrs	r3, r6
 804044c:	2200      	movs	r2, #0
 804044e:	e9c5 3200 	strd	r3, r2, [r5]
 8040452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040456:	428b      	cmp	r3, r1
 8040458:	d905      	bls.n	8040466 <__udivmoddi4+0xb6>
 804045a:	b10d      	cbz	r5, 8040460 <__udivmoddi4+0xb0>
 804045c:	e9c5 0100 	strd	r0, r1, [r5]
 8040460:	2100      	movs	r1, #0
 8040462:	4608      	mov	r0, r1
 8040464:	e7f5      	b.n	8040452 <__udivmoddi4+0xa2>
 8040466:	fab3 f183 	clz	r1, r3
 804046a:	2900      	cmp	r1, #0
 804046c:	d146      	bne.n	80404fc <__udivmoddi4+0x14c>
 804046e:	4573      	cmp	r3, lr
 8040470:	d302      	bcc.n	8040478 <__udivmoddi4+0xc8>
 8040472:	4282      	cmp	r2, r0
 8040474:	f200 8105 	bhi.w	8040682 <__udivmoddi4+0x2d2>
 8040478:	1a84      	subs	r4, r0, r2
 804047a:	eb6e 0203 	sbc.w	r2, lr, r3
 804047e:	2001      	movs	r0, #1
 8040480:	4690      	mov	r8, r2
 8040482:	2d00      	cmp	r5, #0
 8040484:	d0e5      	beq.n	8040452 <__udivmoddi4+0xa2>
 8040486:	e9c5 4800 	strd	r4, r8, [r5]
 804048a:	e7e2      	b.n	8040452 <__udivmoddi4+0xa2>
 804048c:	2a00      	cmp	r2, #0
 804048e:	f000 8090 	beq.w	80405b2 <__udivmoddi4+0x202>
 8040492:	fab2 f682 	clz	r6, r2
 8040496:	2e00      	cmp	r6, #0
 8040498:	f040 80a4 	bne.w	80405e4 <__udivmoddi4+0x234>
 804049c:	1a8a      	subs	r2, r1, r2
 804049e:	0c03      	lsrs	r3, r0, #16
 80404a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80404a4:	b280      	uxth	r0, r0
 80404a6:	b2bc      	uxth	r4, r7
 80404a8:	2101      	movs	r1, #1
 80404aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80404ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80404b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80404b6:	fb04 f20c 	mul.w	r2, r4, ip
 80404ba:	429a      	cmp	r2, r3
 80404bc:	d907      	bls.n	80404ce <__udivmoddi4+0x11e>
 80404be:	18fb      	adds	r3, r7, r3
 80404c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80404c4:	d202      	bcs.n	80404cc <__udivmoddi4+0x11c>
 80404c6:	429a      	cmp	r2, r3
 80404c8:	f200 80e0 	bhi.w	804068c <__udivmoddi4+0x2dc>
 80404cc:	46c4      	mov	ip, r8
 80404ce:	1a9b      	subs	r3, r3, r2
 80404d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80404d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80404d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80404dc:	fb02 f404 	mul.w	r4, r2, r4
 80404e0:	429c      	cmp	r4, r3
 80404e2:	d907      	bls.n	80404f4 <__udivmoddi4+0x144>
 80404e4:	18fb      	adds	r3, r7, r3
 80404e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80404ea:	d202      	bcs.n	80404f2 <__udivmoddi4+0x142>
 80404ec:	429c      	cmp	r4, r3
 80404ee:	f200 80ca 	bhi.w	8040686 <__udivmoddi4+0x2d6>
 80404f2:	4602      	mov	r2, r0
 80404f4:	1b1b      	subs	r3, r3, r4
 80404f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80404fa:	e7a5      	b.n	8040448 <__udivmoddi4+0x98>
 80404fc:	f1c1 0620 	rsb	r6, r1, #32
 8040500:	408b      	lsls	r3, r1
 8040502:	fa22 f706 	lsr.w	r7, r2, r6
 8040506:	431f      	orrs	r7, r3
 8040508:	fa0e f401 	lsl.w	r4, lr, r1
 804050c:	fa20 f306 	lsr.w	r3, r0, r6
 8040510:	fa2e fe06 	lsr.w	lr, lr, r6
 8040514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8040518:	4323      	orrs	r3, r4
 804051a:	fa00 f801 	lsl.w	r8, r0, r1
 804051e:	fa1f fc87 	uxth.w	ip, r7
 8040522:	fbbe f0f9 	udiv	r0, lr, r9
 8040526:	0c1c      	lsrs	r4, r3, #16
 8040528:	fb09 ee10 	mls	lr, r9, r0, lr
 804052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8040530:	fb00 fe0c 	mul.w	lr, r0, ip
 8040534:	45a6      	cmp	lr, r4
 8040536:	fa02 f201 	lsl.w	r2, r2, r1
 804053a:	d909      	bls.n	8040550 <__udivmoddi4+0x1a0>
 804053c:	193c      	adds	r4, r7, r4
 804053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8040542:	f080 809c 	bcs.w	804067e <__udivmoddi4+0x2ce>
 8040546:	45a6      	cmp	lr, r4
 8040548:	f240 8099 	bls.w	804067e <__udivmoddi4+0x2ce>
 804054c:	3802      	subs	r0, #2
 804054e:	443c      	add	r4, r7
 8040550:	eba4 040e 	sub.w	r4, r4, lr
 8040554:	fa1f fe83 	uxth.w	lr, r3
 8040558:	fbb4 f3f9 	udiv	r3, r4, r9
 804055c:	fb09 4413 	mls	r4, r9, r3, r4
 8040560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8040564:	fb03 fc0c 	mul.w	ip, r3, ip
 8040568:	45a4      	cmp	ip, r4
 804056a:	d908      	bls.n	804057e <__udivmoddi4+0x1ce>
 804056c:	193c      	adds	r4, r7, r4
 804056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8040572:	f080 8082 	bcs.w	804067a <__udivmoddi4+0x2ca>
 8040576:	45a4      	cmp	ip, r4
 8040578:	d97f      	bls.n	804067a <__udivmoddi4+0x2ca>
 804057a:	3b02      	subs	r3, #2
 804057c:	443c      	add	r4, r7
 804057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8040582:	eba4 040c 	sub.w	r4, r4, ip
 8040586:	fba0 ec02 	umull	lr, ip, r0, r2
 804058a:	4564      	cmp	r4, ip
 804058c:	4673      	mov	r3, lr
 804058e:	46e1      	mov	r9, ip
 8040590:	d362      	bcc.n	8040658 <__udivmoddi4+0x2a8>
 8040592:	d05f      	beq.n	8040654 <__udivmoddi4+0x2a4>
 8040594:	b15d      	cbz	r5, 80405ae <__udivmoddi4+0x1fe>
 8040596:	ebb8 0203 	subs.w	r2, r8, r3
 804059a:	eb64 0409 	sbc.w	r4, r4, r9
 804059e:	fa04 f606 	lsl.w	r6, r4, r6
 80405a2:	fa22 f301 	lsr.w	r3, r2, r1
 80405a6:	431e      	orrs	r6, r3
 80405a8:	40cc      	lsrs	r4, r1
 80405aa:	e9c5 6400 	strd	r6, r4, [r5]
 80405ae:	2100      	movs	r1, #0
 80405b0:	e74f      	b.n	8040452 <__udivmoddi4+0xa2>
 80405b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80405b6:	0c01      	lsrs	r1, r0, #16
 80405b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80405bc:	b280      	uxth	r0, r0
 80405be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80405c2:	463b      	mov	r3, r7
 80405c4:	4638      	mov	r0, r7
 80405c6:	463c      	mov	r4, r7
 80405c8:	46b8      	mov	r8, r7
 80405ca:	46be      	mov	lr, r7
 80405cc:	2620      	movs	r6, #32
 80405ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80405d2:	eba2 0208 	sub.w	r2, r2, r8
 80405d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80405da:	e766      	b.n	80404aa <__udivmoddi4+0xfa>
 80405dc:	4601      	mov	r1, r0
 80405de:	e718      	b.n	8040412 <__udivmoddi4+0x62>
 80405e0:	4610      	mov	r0, r2
 80405e2:	e72c      	b.n	804043e <__udivmoddi4+0x8e>
 80405e4:	f1c6 0220 	rsb	r2, r6, #32
 80405e8:	fa2e f302 	lsr.w	r3, lr, r2
 80405ec:	40b7      	lsls	r7, r6
 80405ee:	40b1      	lsls	r1, r6
 80405f0:	fa20 f202 	lsr.w	r2, r0, r2
 80405f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80405f8:	430a      	orrs	r2, r1
 80405fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80405fe:	b2bc      	uxth	r4, r7
 8040600:	fb0e 3318 	mls	r3, lr, r8, r3
 8040604:	0c11      	lsrs	r1, r2, #16
 8040606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 804060a:	fb08 f904 	mul.w	r9, r8, r4
 804060e:	40b0      	lsls	r0, r6
 8040610:	4589      	cmp	r9, r1
 8040612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8040616:	b280      	uxth	r0, r0
 8040618:	d93e      	bls.n	8040698 <__udivmoddi4+0x2e8>
 804061a:	1879      	adds	r1, r7, r1
 804061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8040620:	d201      	bcs.n	8040626 <__udivmoddi4+0x276>
 8040622:	4589      	cmp	r9, r1
 8040624:	d81f      	bhi.n	8040666 <__udivmoddi4+0x2b6>
 8040626:	eba1 0109 	sub.w	r1, r1, r9
 804062a:	fbb1 f9fe 	udiv	r9, r1, lr
 804062e:	fb09 f804 	mul.w	r8, r9, r4
 8040632:	fb0e 1119 	mls	r1, lr, r9, r1
 8040636:	b292      	uxth	r2, r2
 8040638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 804063c:	4542      	cmp	r2, r8
 804063e:	d229      	bcs.n	8040694 <__udivmoddi4+0x2e4>
 8040640:	18ba      	adds	r2, r7, r2
 8040642:	f109 31ff 	add.w	r1, r9, #4294967295
 8040646:	d2c4      	bcs.n	80405d2 <__udivmoddi4+0x222>
 8040648:	4542      	cmp	r2, r8
 804064a:	d2c2      	bcs.n	80405d2 <__udivmoddi4+0x222>
 804064c:	f1a9 0102 	sub.w	r1, r9, #2
 8040650:	443a      	add	r2, r7
 8040652:	e7be      	b.n	80405d2 <__udivmoddi4+0x222>
 8040654:	45f0      	cmp	r8, lr
 8040656:	d29d      	bcs.n	8040594 <__udivmoddi4+0x1e4>
 8040658:	ebbe 0302 	subs.w	r3, lr, r2
 804065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8040660:	3801      	subs	r0, #1
 8040662:	46e1      	mov	r9, ip
 8040664:	e796      	b.n	8040594 <__udivmoddi4+0x1e4>
 8040666:	eba7 0909 	sub.w	r9, r7, r9
 804066a:	4449      	add	r1, r9
 804066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8040670:	fbb1 f9fe 	udiv	r9, r1, lr
 8040674:	fb09 f804 	mul.w	r8, r9, r4
 8040678:	e7db      	b.n	8040632 <__udivmoddi4+0x282>
 804067a:	4673      	mov	r3, lr
 804067c:	e77f      	b.n	804057e <__udivmoddi4+0x1ce>
 804067e:	4650      	mov	r0, sl
 8040680:	e766      	b.n	8040550 <__udivmoddi4+0x1a0>
 8040682:	4608      	mov	r0, r1
 8040684:	e6fd      	b.n	8040482 <__udivmoddi4+0xd2>
 8040686:	443b      	add	r3, r7
 8040688:	3a02      	subs	r2, #2
 804068a:	e733      	b.n	80404f4 <__udivmoddi4+0x144>
 804068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8040690:	443b      	add	r3, r7
 8040692:	e71c      	b.n	80404ce <__udivmoddi4+0x11e>
 8040694:	4649      	mov	r1, r9
 8040696:	e79c      	b.n	80405d2 <__udivmoddi4+0x222>
 8040698:	eba1 0109 	sub.w	r1, r1, r9
 804069c:	46c4      	mov	ip, r8
 804069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80406a2:	fb09 f804 	mul.w	r8, r9, r4
 80406a6:	e7c4      	b.n	8040632 <__udivmoddi4+0x282>

080406a8 <__aeabi_idiv0>:
 80406a8:	4770      	bx	lr
 80406aa:	bf00      	nop

080406ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80406ac:	b480      	push	{r7}
 80406ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80406b0:	4b4a      	ldr	r3, [pc, #296]	@ (80407dc <SystemInit+0x130>)
 80406b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80406b6:	4a49      	ldr	r2, [pc, #292]	@ (80407dc <SystemInit+0x130>)
 80406b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80406bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80406c0:	4b46      	ldr	r3, [pc, #280]	@ (80407dc <SystemInit+0x130>)
 80406c2:	691b      	ldr	r3, [r3, #16]
 80406c4:	4a45      	ldr	r2, [pc, #276]	@ (80407dc <SystemInit+0x130>)
 80406c6:	f043 0310 	orr.w	r3, r3, #16
 80406ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80406cc:	4b44      	ldr	r3, [pc, #272]	@ (80407e0 <SystemInit+0x134>)
 80406ce:	681b      	ldr	r3, [r3, #0]
 80406d0:	f003 030f 	and.w	r3, r3, #15
 80406d4:	2b06      	cmp	r3, #6
 80406d6:	d807      	bhi.n	80406e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80406d8:	4b41      	ldr	r3, [pc, #260]	@ (80407e0 <SystemInit+0x134>)
 80406da:	681b      	ldr	r3, [r3, #0]
 80406dc:	f023 030f 	bic.w	r3, r3, #15
 80406e0:	4a3f      	ldr	r2, [pc, #252]	@ (80407e0 <SystemInit+0x134>)
 80406e2:	f043 0307 	orr.w	r3, r3, #7
 80406e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80406e8:	4b3e      	ldr	r3, [pc, #248]	@ (80407e4 <SystemInit+0x138>)
 80406ea:	681b      	ldr	r3, [r3, #0]
 80406ec:	4a3d      	ldr	r2, [pc, #244]	@ (80407e4 <SystemInit+0x138>)
 80406ee:	f043 0301 	orr.w	r3, r3, #1
 80406f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80406f4:	4b3b      	ldr	r3, [pc, #236]	@ (80407e4 <SystemInit+0x138>)
 80406f6:	2200      	movs	r2, #0
 80406f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80406fa:	4b3a      	ldr	r3, [pc, #232]	@ (80407e4 <SystemInit+0x138>)
 80406fc:	681a      	ldr	r2, [r3, #0]
 80406fe:	4939      	ldr	r1, [pc, #228]	@ (80407e4 <SystemInit+0x138>)
 8040700:	4b39      	ldr	r3, [pc, #228]	@ (80407e8 <SystemInit+0x13c>)
 8040702:	4013      	ands	r3, r2
 8040704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8040706:	4b36      	ldr	r3, [pc, #216]	@ (80407e0 <SystemInit+0x134>)
 8040708:	681b      	ldr	r3, [r3, #0]
 804070a:	f003 0308 	and.w	r3, r3, #8
 804070e:	2b00      	cmp	r3, #0
 8040710:	d007      	beq.n	8040722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8040712:	4b33      	ldr	r3, [pc, #204]	@ (80407e0 <SystemInit+0x134>)
 8040714:	681b      	ldr	r3, [r3, #0]
 8040716:	f023 030f 	bic.w	r3, r3, #15
 804071a:	4a31      	ldr	r2, [pc, #196]	@ (80407e0 <SystemInit+0x134>)
 804071c:	f043 0307 	orr.w	r3, r3, #7
 8040720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8040722:	4b30      	ldr	r3, [pc, #192]	@ (80407e4 <SystemInit+0x138>)
 8040724:	2200      	movs	r2, #0
 8040726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8040728:	4b2e      	ldr	r3, [pc, #184]	@ (80407e4 <SystemInit+0x138>)
 804072a:	2200      	movs	r2, #0
 804072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 804072e:	4b2d      	ldr	r3, [pc, #180]	@ (80407e4 <SystemInit+0x138>)
 8040730:	2200      	movs	r2, #0
 8040732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8040734:	4b2b      	ldr	r3, [pc, #172]	@ (80407e4 <SystemInit+0x138>)
 8040736:	4a2d      	ldr	r2, [pc, #180]	@ (80407ec <SystemInit+0x140>)
 8040738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 804073a:	4b2a      	ldr	r3, [pc, #168]	@ (80407e4 <SystemInit+0x138>)
 804073c:	4a2c      	ldr	r2, [pc, #176]	@ (80407f0 <SystemInit+0x144>)
 804073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8040740:	4b28      	ldr	r3, [pc, #160]	@ (80407e4 <SystemInit+0x138>)
 8040742:	4a2c      	ldr	r2, [pc, #176]	@ (80407f4 <SystemInit+0x148>)
 8040744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8040746:	4b27      	ldr	r3, [pc, #156]	@ (80407e4 <SystemInit+0x138>)
 8040748:	2200      	movs	r2, #0
 804074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 804074c:	4b25      	ldr	r3, [pc, #148]	@ (80407e4 <SystemInit+0x138>)
 804074e:	4a29      	ldr	r2, [pc, #164]	@ (80407f4 <SystemInit+0x148>)
 8040750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8040752:	4b24      	ldr	r3, [pc, #144]	@ (80407e4 <SystemInit+0x138>)
 8040754:	2200      	movs	r2, #0
 8040756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8040758:	4b22      	ldr	r3, [pc, #136]	@ (80407e4 <SystemInit+0x138>)
 804075a:	4a26      	ldr	r2, [pc, #152]	@ (80407f4 <SystemInit+0x148>)
 804075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 804075e:	4b21      	ldr	r3, [pc, #132]	@ (80407e4 <SystemInit+0x138>)
 8040760:	2200      	movs	r2, #0
 8040762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8040764:	4b1f      	ldr	r3, [pc, #124]	@ (80407e4 <SystemInit+0x138>)
 8040766:	681b      	ldr	r3, [r3, #0]
 8040768:	4a1e      	ldr	r2, [pc, #120]	@ (80407e4 <SystemInit+0x138>)
 804076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 804076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8040770:	4b1c      	ldr	r3, [pc, #112]	@ (80407e4 <SystemInit+0x138>)
 8040772:	2200      	movs	r2, #0
 8040774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8040776:	4b20      	ldr	r3, [pc, #128]	@ (80407f8 <SystemInit+0x14c>)
 8040778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804077a:	4a1f      	ldr	r2, [pc, #124]	@ (80407f8 <SystemInit+0x14c>)
 804077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8040780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8040782:	4b1e      	ldr	r3, [pc, #120]	@ (80407fc <SystemInit+0x150>)
 8040784:	681a      	ldr	r2, [r3, #0]
 8040786:	4b1e      	ldr	r3, [pc, #120]	@ (8040800 <SystemInit+0x154>)
 8040788:	4013      	ands	r3, r2
 804078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 804078e:	d202      	bcs.n	8040796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8040790:	4b1c      	ldr	r3, [pc, #112]	@ (8040804 <SystemInit+0x158>)
 8040792:	2201      	movs	r2, #1
 8040794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8040796:	4b13      	ldr	r3, [pc, #76]	@ (80407e4 <SystemInit+0x138>)
 8040798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 804079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80407a0:	2b00      	cmp	r3, #0
 80407a2:	d113      	bne.n	80407cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80407a4:	4b0f      	ldr	r3, [pc, #60]	@ (80407e4 <SystemInit+0x138>)
 80407a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80407aa:	4a0e      	ldr	r2, [pc, #56]	@ (80407e4 <SystemInit+0x138>)
 80407ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80407b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80407b4:	4b14      	ldr	r3, [pc, #80]	@ (8040808 <SystemInit+0x15c>)
 80407b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80407ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80407bc:	4b09      	ldr	r3, [pc, #36]	@ (80407e4 <SystemInit+0x138>)
 80407be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80407c2:	4a08      	ldr	r2, [pc, #32]	@ (80407e4 <SystemInit+0x138>)
 80407c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80407c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  }

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 80407cc:	4b03      	ldr	r3, [pc, #12]	@ (80407dc <SystemInit+0x130>)
 80407ce:	4a0f      	ldr	r2, [pc, #60]	@ (804080c <SystemInit+0x160>)
 80407d0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80407d2:	bf00      	nop
 80407d4:	46bd      	mov	sp, r7
 80407d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407da:	4770      	bx	lr
 80407dc:	e000ed00 	.word	0xe000ed00
 80407e0:	52002000 	.word	0x52002000
 80407e4:	58024400 	.word	0x58024400
 80407e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80407ec:	02020200 	.word	0x02020200
 80407f0:	01ff0000 	.word	0x01ff0000
 80407f4:	01010280 	.word	0x01010280
 80407f8:	580000c0 	.word	0x580000c0
 80407fc:	5c001000 	.word	0x5c001000
 8040800:	ffff0000 	.word	0xffff0000
 8040804:	51008108 	.word	0x51008108
 8040808:	52004000 	.word	0x52004000
 804080c:	08040000 	.word	0x08040000

08040810 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8040810:	b480      	push	{r7}
 8040812:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8040814:	4b09      	ldr	r3, [pc, #36]	@ (804083c <ExitRun0Mode+0x2c>)
 8040816:	68db      	ldr	r3, [r3, #12]
 8040818:	4a08      	ldr	r2, [pc, #32]	@ (804083c <ExitRun0Mode+0x2c>)
 804081a:	f023 0302 	bic.w	r3, r3, #2
 804081e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8040820:	bf00      	nop
 8040822:	4b06      	ldr	r3, [pc, #24]	@ (804083c <ExitRun0Mode+0x2c>)
 8040824:	685b      	ldr	r3, [r3, #4]
 8040826:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 804082a:	2b00      	cmp	r3, #0
 804082c:	d0f9      	beq.n	8040822 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 804082e:	bf00      	nop
 8040830:	bf00      	nop
 8040832:	46bd      	mov	sp, r7
 8040834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040838:	4770      	bx	lr
 804083a:	bf00      	nop
 804083c:	58024800 	.word	0x58024800

08040840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040840:	b580      	push	{r7, lr}
 8040842:	b082      	sub	sp, #8
 8040844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	 printf("inside the primary region \n\r");
 8040846:	481a      	ldr	r0, [pc, #104]	@ (80408b0 <main+0x70>)
 8040848:	f00a fe5a 	bl	804b500 <iprintf>
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 804084c:	f000 fbbe 	bl	8040fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040850:	f000 f836 	bl	80408c0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8040854:	f000 f8ba 	bl	80409cc <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8040858:	4b16      	ldr	r3, [pc, #88]	@ (80408b4 <main+0x74>)
 804085a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804085e:	4a15      	ldr	r2, [pc, #84]	@ (80408b4 <main+0x74>)
 8040860:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8040864:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040868:	4b12      	ldr	r3, [pc, #72]	@ (80408b4 <main+0x74>)
 804086a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804086e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8040872:	607b      	str	r3, [r7, #4]
 8040874:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8040876:	2000      	movs	r0, #0
 8040878:	f001 f850 	bl	804191c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 804087c:	2100      	movs	r1, #0
 804087e:	2000      	movs	r0, #0
 8040880:	f001 f866 	bl	8041950 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040884:	f000 f940 	bl	8040b08 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8040888:	f000 f8f2 	bl	8040a70 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 804088c:	f00a f818 	bl	804a8c0 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8040890:	f000 f8cc 	bl	8040a2c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  printf("Firmware Application \n\r");
 8040894:	4808      	ldr	r0, [pc, #32]	@ (80408b8 <main+0x78>)
 8040896:	f00a fe33 	bl	804b500 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11); // Toggle PA11
 804089a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 804089e:	4807      	ldr	r0, [pc, #28]	@ (80408bc <main+0x7c>)
 80408a0:	f001 f821 	bl	80418e6 <HAL_GPIO_TogglePin>
      HAL_Delay(100); // Delay for 500 ms
 80408a4:	2064      	movs	r0, #100	@ 0x64
 80408a6:	f000 fc23 	bl	80410f0 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11); // Toggle PA11
 80408aa:	bf00      	nop
 80408ac:	e7f5      	b.n	804089a <main+0x5a>
 80408ae:	bf00      	nop
 80408b0:	0804c1f0 	.word	0x0804c1f0
 80408b4:	58024400 	.word	0x58024400
 80408b8:	0804c210 	.word	0x0804c210
 80408bc:	58020000 	.word	0x58020000

080408c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80408c0:	b580      	push	{r7, lr}
 80408c2:	b09c      	sub	sp, #112	@ 0x70
 80408c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80408c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80408ca:	224c      	movs	r2, #76	@ 0x4c
 80408cc:	2100      	movs	r1, #0
 80408ce:	4618      	mov	r0, r3
 80408d0:	f00a fe6b 	bl	804b5aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80408d4:	1d3b      	adds	r3, r7, #4
 80408d6:	2220      	movs	r2, #32
 80408d8:	2100      	movs	r1, #0
 80408da:	4618      	mov	r0, r3
 80408dc:	f00a fe65 	bl	804b5aa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80408e0:	2004      	movs	r0, #4
 80408e2:	f002 fac3 	bl	8042e6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80408e6:	2300      	movs	r3, #0
 80408e8:	603b      	str	r3, [r7, #0]
 80408ea:	4b36      	ldr	r3, [pc, #216]	@ (80409c4 <SystemClock_Config+0x104>)
 80408ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80408ee:	4a35      	ldr	r2, [pc, #212]	@ (80409c4 <SystemClock_Config+0x104>)
 80408f0:	f023 0301 	bic.w	r3, r3, #1
 80408f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80408f6:	4b33      	ldr	r3, [pc, #204]	@ (80409c4 <SystemClock_Config+0x104>)
 80408f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80408fa:	f003 0301 	and.w	r3, r3, #1
 80408fe:	603b      	str	r3, [r7, #0]
 8040900:	4b31      	ldr	r3, [pc, #196]	@ (80409c8 <SystemClock_Config+0x108>)
 8040902:	699b      	ldr	r3, [r3, #24]
 8040904:	4a30      	ldr	r2, [pc, #192]	@ (80409c8 <SystemClock_Config+0x108>)
 8040906:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 804090a:	6193      	str	r3, [r2, #24]
 804090c:	4b2e      	ldr	r3, [pc, #184]	@ (80409c8 <SystemClock_Config+0x108>)
 804090e:	699b      	ldr	r3, [r3, #24]
 8040910:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8040914:	603b      	str	r3, [r7, #0]
 8040916:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8040918:	bf00      	nop
 804091a:	4b2b      	ldr	r3, [pc, #172]	@ (80409c8 <SystemClock_Config+0x108>)
 804091c:	699b      	ldr	r3, [r3, #24]
 804091e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8040922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8040926:	d1f8      	bne.n	804091a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8040928:	230b      	movs	r3, #11
 804092a:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 804092c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8040930:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8040932:	2301      	movs	r3, #1
 8040934:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8040936:	2340      	movs	r3, #64	@ 0x40
 8040938:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 804093a:	2301      	movs	r3, #1
 804093c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804093e:	2302      	movs	r3, #2
 8040940:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8040942:	2302      	movs	r3, #2
 8040944:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8040946:	2305      	movs	r3, #5
 8040948:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 804094a:	2330      	movs	r3, #48	@ 0x30
 804094c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 804094e:	2302      	movs	r3, #2
 8040950:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8040952:	2305      	movs	r3, #5
 8040954:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8040956:	2302      	movs	r3, #2
 8040958:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 804095a:	2308      	movs	r3, #8
 804095c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 804095e:	2300      	movs	r3, #0
 8040960:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8040962:	2300      	movs	r3, #0
 8040964:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 804096a:	4618      	mov	r0, r3
 804096c:	f002 fae8 	bl	8042f40 <HAL_RCC_OscConfig>
 8040970:	4603      	mov	r3, r0
 8040972:	2b00      	cmp	r3, #0
 8040974:	d001      	beq.n	804097a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8040976:	f000 f94b 	bl	8040c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 804097a:	233f      	movs	r3, #63	@ 0x3f
 804097c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 804097e:	2300      	movs	r3, #0
 8040980:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8040982:	2300      	movs	r3, #0
 8040984:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8040986:	2300      	movs	r3, #0
 8040988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 804098a:	2300      	movs	r3, #0
 804098c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 804098e:	2300      	movs	r3, #0
 8040990:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8040992:	2300      	movs	r3, #0
 8040994:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8040996:	2300      	movs	r3, #0
 8040998:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 804099a:	1d3b      	adds	r3, r7, #4
 804099c:	2100      	movs	r1, #0
 804099e:	4618      	mov	r0, r3
 80409a0:	f002 ff28 	bl	80437f4 <HAL_RCC_ClockConfig>
 80409a4:	4603      	mov	r3, r0
 80409a6:	2b00      	cmp	r3, #0
 80409a8:	d001      	beq.n	80409ae <SystemClock_Config+0xee>
  {
    Error_Handler();
 80409aa:	f000 f931 	bl	8040c10 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80409ae:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80409b2:	2100      	movs	r1, #0
 80409b4:	2000      	movs	r0, #0
 80409b6:	f003 f8d3 	bl	8043b60 <HAL_RCC_MCOConfig>
}
 80409ba:	bf00      	nop
 80409bc:	3770      	adds	r7, #112	@ 0x70
 80409be:	46bd      	mov	sp, r7
 80409c0:	bd80      	pop	{r7, pc}
 80409c2:	bf00      	nop
 80409c4:	58000400 	.word	0x58000400
 80409c8:	58024800 	.word	0x58024800

080409cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80409cc:	b580      	push	{r7, lr}
 80409ce:	b0b2      	sub	sp, #200	@ 0xc8
 80409d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80409d2:	463b      	mov	r3, r7
 80409d4:	22c8      	movs	r2, #200	@ 0xc8
 80409d6:	2100      	movs	r1, #0
 80409d8:	4618      	mov	r0, r3
 80409da:	f00a fde6 	bl	804b5aa <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80409de:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80409e2:	f04f 0300 	mov.w	r3, #0
 80409e6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80409ea:	2302      	movs	r3, #2
 80409ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80409ee:	230c      	movs	r3, #12
 80409f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80409f2:	2302      	movs	r3, #2
 80409f4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80409f6:	2302      	movs	r3, #2
 80409f8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80409fa:	2302      	movs	r3, #2
 80409fc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80409fe:	23c0      	movs	r3, #192	@ 0xc0
 8040a00:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8040a02:	2320      	movs	r3, #32
 8040a04:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8040a06:	2300      	movs	r3, #0
 8040a08:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8040a0a:	2300      	movs	r3, #0
 8040a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040a10:	463b      	mov	r3, r7
 8040a12:	4618      	mov	r0, r3
 8040a14:	f003 fae4 	bl	8043fe0 <HAL_RCCEx_PeriphCLKConfig>
 8040a18:	4603      	mov	r3, r0
 8040a1a:	2b00      	cmp	r3, #0
 8040a1c:	d001      	beq.n	8040a22 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8040a1e:	f000 f8f7 	bl	8040c10 <Error_Handler>
  }
}
 8040a22:	bf00      	nop
 8040a24:	37c8      	adds	r7, #200	@ 0xc8
 8040a26:	46bd      	mov	sp, r7
 8040a28:	bd80      	pop	{r7, pc}
	...

08040a2c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8040a2c:	b580      	push	{r7, lr}
 8040a2e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8040a30:	4b0d      	ldr	r3, [pc, #52]	@ (8040a68 <MX_CRC_Init+0x3c>)
 8040a32:	4a0e      	ldr	r2, [pc, #56]	@ (8040a6c <MX_CRC_Init+0x40>)
 8040a34:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8040a36:	4b0c      	ldr	r3, [pc, #48]	@ (8040a68 <MX_CRC_Init+0x3c>)
 8040a38:	2200      	movs	r2, #0
 8040a3a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8040a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8040a68 <MX_CRC_Init+0x3c>)
 8040a3e:	2200      	movs	r2, #0
 8040a40:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8040a42:	4b09      	ldr	r3, [pc, #36]	@ (8040a68 <MX_CRC_Init+0x3c>)
 8040a44:	2200      	movs	r2, #0
 8040a46:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8040a48:	4b07      	ldr	r3, [pc, #28]	@ (8040a68 <MX_CRC_Init+0x3c>)
 8040a4a:	2200      	movs	r2, #0
 8040a4c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8040a4e:	4b06      	ldr	r3, [pc, #24]	@ (8040a68 <MX_CRC_Init+0x3c>)
 8040a50:	2201      	movs	r2, #1
 8040a52:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8040a54:	4804      	ldr	r0, [pc, #16]	@ (8040a68 <MX_CRC_Init+0x3c>)
 8040a56:	f000 fc8b 	bl	8041370 <HAL_CRC_Init>
 8040a5a:	4603      	mov	r3, r0
 8040a5c:	2b00      	cmp	r3, #0
 8040a5e:	d001      	beq.n	8040a64 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8040a60:	f000 f8d6 	bl	8040c10 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8040a64:	bf00      	nop
 8040a66:	bd80      	pop	{r7, pc}
 8040a68:	2400015c 	.word	0x2400015c
 8040a6c:	58024c00 	.word	0x58024c00

08040a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040a70:	b580      	push	{r7, lr}
 8040a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040a74:	4b22      	ldr	r3, [pc, #136]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040a76:	4a23      	ldr	r2, [pc, #140]	@ (8040b04 <MX_USART1_UART_Init+0x94>)
 8040a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8040a7a:	4b21      	ldr	r3, [pc, #132]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040a7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8040a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040a82:	4b1f      	ldr	r3, [pc, #124]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040a84:	2200      	movs	r2, #0
 8040a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040a88:	4b1d      	ldr	r3, [pc, #116]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040a8a:	2200      	movs	r2, #0
 8040a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040a90:	2200      	movs	r2, #0
 8040a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040a94:	4b1a      	ldr	r3, [pc, #104]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040a96:	220c      	movs	r2, #12
 8040a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040a9a:	4b19      	ldr	r3, [pc, #100]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040a9c:	2200      	movs	r2, #0
 8040a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040aa0:	4b17      	ldr	r3, [pc, #92]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040aa2:	2200      	movs	r2, #0
 8040aa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040aa6:	4b16      	ldr	r3, [pc, #88]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040aa8:	2200      	movs	r2, #0
 8040aaa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8040aac:	4b14      	ldr	r3, [pc, #80]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040aae:	2200      	movs	r2, #0
 8040ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040ab2:	4b13      	ldr	r3, [pc, #76]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040ab4:	2200      	movs	r2, #0
 8040ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040ab8:	4811      	ldr	r0, [pc, #68]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040aba:	f005 f8fd 	bl	8045cb8 <HAL_UART_Init>
 8040abe:	4603      	mov	r3, r0
 8040ac0:	2b00      	cmp	r3, #0
 8040ac2:	d001      	beq.n	8040ac8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8040ac4:	f000 f8a4 	bl	8040c10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040ac8:	2100      	movs	r1, #0
 8040aca:	480d      	ldr	r0, [pc, #52]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040acc:	f006 f905 	bl	8046cda <HAL_UARTEx_SetTxFifoThreshold>
 8040ad0:	4603      	mov	r3, r0
 8040ad2:	2b00      	cmp	r3, #0
 8040ad4:	d001      	beq.n	8040ada <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8040ad6:	f000 f89b 	bl	8040c10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040ada:	2100      	movs	r1, #0
 8040adc:	4808      	ldr	r0, [pc, #32]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040ade:	f006 f93a 	bl	8046d56 <HAL_UARTEx_SetRxFifoThreshold>
 8040ae2:	4603      	mov	r3, r0
 8040ae4:	2b00      	cmp	r3, #0
 8040ae6:	d001      	beq.n	8040aec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8040ae8:	f000 f892 	bl	8040c10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8040aec:	4804      	ldr	r0, [pc, #16]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040aee:	f006 f8bb 	bl	8046c68 <HAL_UARTEx_DisableFifoMode>
 8040af2:	4603      	mov	r3, r0
 8040af4:	2b00      	cmp	r3, #0
 8040af6:	d001      	beq.n	8040afc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8040af8:	f000 f88a 	bl	8040c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040afc:	bf00      	nop
 8040afe:	bd80      	pop	{r7, pc}
 8040b00:	24000180 	.word	0x24000180
 8040b04:	40011000 	.word	0x40011000

08040b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040b08:	b580      	push	{r7, lr}
 8040b0a:	b08a      	sub	sp, #40	@ 0x28
 8040b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040b0e:	f107 0314 	add.w	r3, r7, #20
 8040b12:	2200      	movs	r2, #0
 8040b14:	601a      	str	r2, [r3, #0]
 8040b16:	605a      	str	r2, [r3, #4]
 8040b18:	609a      	str	r2, [r3, #8]
 8040b1a:	60da      	str	r2, [r3, #12]
 8040b1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b24:	4a38      	ldr	r2, [pc, #224]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b26:	f043 0302 	orr.w	r3, r3, #2
 8040b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040b2e:	4b36      	ldr	r3, [pc, #216]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b34:	f003 0302 	and.w	r3, r3, #2
 8040b38:	613b      	str	r3, [r7, #16]
 8040b3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040b3c:	4b32      	ldr	r3, [pc, #200]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b42:	4a31      	ldr	r2, [pc, #196]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b44:	f043 0301 	orr.w	r3, r3, #1
 8040b48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b52:	f003 0301 	and.w	r3, r3, #1
 8040b56:	60fb      	str	r3, [r7, #12]
 8040b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b60:	4a29      	ldr	r2, [pc, #164]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b62:	f043 0304 	orr.w	r3, r3, #4
 8040b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040b6a:	4b27      	ldr	r3, [pc, #156]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b70:	f003 0304 	and.w	r3, r3, #4
 8040b74:	60bb      	str	r3, [r7, #8]
 8040b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8040b78:	4b23      	ldr	r3, [pc, #140]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b7e:	4a22      	ldr	r2, [pc, #136]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8040b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040b88:	4b1f      	ldr	r3, [pc, #124]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8040b92:	607b      	str	r3, [r7, #4]
 8040b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040b96:	4b1c      	ldr	r3, [pc, #112]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8040ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040ba6:	4b18      	ldr	r3, [pc, #96]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8040bb0:	603b      	str	r3, [r7, #0]
 8040bb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8040bb4:	2200      	movs	r2, #0
 8040bb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8040bba:	4814      	ldr	r0, [pc, #80]	@ (8040c0c <MX_GPIO_Init+0x104>)
 8040bbc:	f000 fe7a 	bl	80418b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8040bc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8040bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040bc6:	2302      	movs	r3, #2
 8040bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040bca:	2300      	movs	r3, #0
 8040bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040bce:	2300      	movs	r3, #0
 8040bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8040bd2:	2300      	movs	r3, #0
 8040bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8040bd6:	f107 0314 	add.w	r3, r7, #20
 8040bda:	4619      	mov	r1, r3
 8040bdc:	480b      	ldr	r0, [pc, #44]	@ (8040c0c <MX_GPIO_Init+0x104>)
 8040bde:	f000 fcb9 	bl	8041554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8040be2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8040be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040be8:	2301      	movs	r3, #1
 8040bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040bec:	2300      	movs	r3, #0
 8040bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040bf0:	2300      	movs	r3, #0
 8040bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040bf4:	f107 0314 	add.w	r3, r7, #20
 8040bf8:	4619      	mov	r1, r3
 8040bfa:	4804      	ldr	r0, [pc, #16]	@ (8040c0c <MX_GPIO_Init+0x104>)
 8040bfc:	f000 fcaa 	bl	8041554 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8040c00:	bf00      	nop
 8040c02:	3728      	adds	r7, #40	@ 0x28
 8040c04:	46bd      	mov	sp, r7
 8040c06:	bd80      	pop	{r7, pc}
 8040c08:	58024400 	.word	0x58024400
 8040c0c:	58020000 	.word	0x58020000

08040c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040c10:	b480      	push	{r7}
 8040c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040c14:	b672      	cpsid	i
}
 8040c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040c18:	bf00      	nop
 8040c1a:	e7fd      	b.n	8040c18 <Error_Handler+0x8>

08040c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040c1c:	b480      	push	{r7}
 8040c1e:	b083      	sub	sp, #12
 8040c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040c22:	4b0a      	ldr	r3, [pc, #40]	@ (8040c4c <HAL_MspInit+0x30>)
 8040c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8040c28:	4a08      	ldr	r2, [pc, #32]	@ (8040c4c <HAL_MspInit+0x30>)
 8040c2a:	f043 0302 	orr.w	r3, r3, #2
 8040c2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8040c32:	4b06      	ldr	r3, [pc, #24]	@ (8040c4c <HAL_MspInit+0x30>)
 8040c34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8040c38:	f003 0302 	and.w	r3, r3, #2
 8040c3c:	607b      	str	r3, [r7, #4]
 8040c3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040c40:	bf00      	nop
 8040c42:	370c      	adds	r7, #12
 8040c44:	46bd      	mov	sp, r7
 8040c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c4a:	4770      	bx	lr
 8040c4c:	58024400 	.word	0x58024400

08040c50 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8040c50:	b480      	push	{r7}
 8040c52:	b085      	sub	sp, #20
 8040c54:	af00      	add	r7, sp, #0
 8040c56:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8040c58:	687b      	ldr	r3, [r7, #4]
 8040c5a:	681b      	ldr	r3, [r3, #0]
 8040c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8040c8c <HAL_CRC_MspInit+0x3c>)
 8040c5e:	4293      	cmp	r3, r2
 8040c60:	d10e      	bne.n	8040c80 <HAL_CRC_MspInit+0x30>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8040c62:	4b0b      	ldr	r3, [pc, #44]	@ (8040c90 <HAL_CRC_MspInit+0x40>)
 8040c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040c68:	4a09      	ldr	r2, [pc, #36]	@ (8040c90 <HAL_CRC_MspInit+0x40>)
 8040c6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8040c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040c72:	4b07      	ldr	r3, [pc, #28]	@ (8040c90 <HAL_CRC_MspInit+0x40>)
 8040c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040c78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8040c7c:	60fb      	str	r3, [r7, #12]
 8040c7e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8040c80:	bf00      	nop
 8040c82:	3714      	adds	r7, #20
 8040c84:	46bd      	mov	sp, r7
 8040c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c8a:	4770      	bx	lr
 8040c8c:	58024c00 	.word	0x58024c00
 8040c90:	58024400 	.word	0x58024400

08040c94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040c94:	b580      	push	{r7, lr}
 8040c96:	b0bc      	sub	sp, #240	@ 0xf0
 8040c98:	af00      	add	r7, sp, #0
 8040c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040c9c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8040ca0:	2200      	movs	r2, #0
 8040ca2:	601a      	str	r2, [r3, #0]
 8040ca4:	605a      	str	r2, [r3, #4]
 8040ca6:	609a      	str	r2, [r3, #8]
 8040ca8:	60da      	str	r2, [r3, #12]
 8040caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040cac:	f107 0310 	add.w	r3, r7, #16
 8040cb0:	22c8      	movs	r2, #200	@ 0xc8
 8040cb2:	2100      	movs	r1, #0
 8040cb4:	4618      	mov	r0, r3
 8040cb6:	f00a fc78 	bl	804b5aa <memset>
  if(huart->Instance==USART1)
 8040cba:	687b      	ldr	r3, [r7, #4]
 8040cbc:	681b      	ldr	r3, [r3, #0]
 8040cbe:	4a27      	ldr	r2, [pc, #156]	@ (8040d5c <HAL_UART_MspInit+0xc8>)
 8040cc0:	4293      	cmp	r3, r2
 8040cc2:	d146      	bne.n	8040d52 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8040cc4:	f04f 0201 	mov.w	r2, #1
 8040cc8:	f04f 0300 	mov.w	r3, #0
 8040ccc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8040cd0:	2300      	movs	r3, #0
 8040cd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040cd6:	f107 0310 	add.w	r3, r7, #16
 8040cda:	4618      	mov	r0, r3
 8040cdc:	f003 f980 	bl	8043fe0 <HAL_RCCEx_PeriphCLKConfig>
 8040ce0:	4603      	mov	r3, r0
 8040ce2:	2b00      	cmp	r3, #0
 8040ce4:	d001      	beq.n	8040cea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8040ce6:	f7ff ff93 	bl	8040c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8040cea:	4b1d      	ldr	r3, [pc, #116]	@ (8040d60 <HAL_UART_MspInit+0xcc>)
 8040cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8040cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8040d60 <HAL_UART_MspInit+0xcc>)
 8040cf2:	f043 0310 	orr.w	r3, r3, #16
 8040cf6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8040cfa:	4b19      	ldr	r3, [pc, #100]	@ (8040d60 <HAL_UART_MspInit+0xcc>)
 8040cfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8040d00:	f003 0310 	and.w	r3, r3, #16
 8040d04:	60fb      	str	r3, [r7, #12]
 8040d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040d08:	4b15      	ldr	r3, [pc, #84]	@ (8040d60 <HAL_UART_MspInit+0xcc>)
 8040d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040d0e:	4a14      	ldr	r2, [pc, #80]	@ (8040d60 <HAL_UART_MspInit+0xcc>)
 8040d10:	f043 0301 	orr.w	r3, r3, #1
 8040d14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040d18:	4b11      	ldr	r3, [pc, #68]	@ (8040d60 <HAL_UART_MspInit+0xcc>)
 8040d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040d1e:	f003 0301 	and.w	r3, r3, #1
 8040d22:	60bb      	str	r3, [r7, #8]
 8040d24:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8040d26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8040d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040d2e:	2302      	movs	r3, #2
 8040d30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d34:	2300      	movs	r3, #0
 8040d36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040d3a:	2300      	movs	r3, #0
 8040d3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8040d40:	2307      	movs	r3, #7
 8040d42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040d46:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8040d4a:	4619      	mov	r1, r3
 8040d4c:	4805      	ldr	r0, [pc, #20]	@ (8040d64 <HAL_UART_MspInit+0xd0>)
 8040d4e:	f000 fc01 	bl	8041554 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8040d52:	bf00      	nop
 8040d54:	37f0      	adds	r7, #240	@ 0xf0
 8040d56:	46bd      	mov	sp, r7
 8040d58:	bd80      	pop	{r7, pc}
 8040d5a:	bf00      	nop
 8040d5c:	40011000 	.word	0x40011000
 8040d60:	58024400 	.word	0x58024400
 8040d64:	58020000 	.word	0x58020000

08040d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040d68:	b480      	push	{r7}
 8040d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8040d6c:	bf00      	nop
 8040d6e:	e7fd      	b.n	8040d6c <NMI_Handler+0x4>

08040d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040d70:	b480      	push	{r7}
 8040d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040d74:	bf00      	nop
 8040d76:	e7fd      	b.n	8040d74 <HardFault_Handler+0x4>

08040d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040d78:	b480      	push	{r7}
 8040d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040d7c:	bf00      	nop
 8040d7e:	e7fd      	b.n	8040d7c <MemManage_Handler+0x4>

08040d80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040d80:	b480      	push	{r7}
 8040d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040d84:	bf00      	nop
 8040d86:	e7fd      	b.n	8040d84 <BusFault_Handler+0x4>

08040d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040d88:	b480      	push	{r7}
 8040d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040d8c:	bf00      	nop
 8040d8e:	e7fd      	b.n	8040d8c <UsageFault_Handler+0x4>

08040d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040d90:	b480      	push	{r7}
 8040d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040d94:	bf00      	nop
 8040d96:	46bd      	mov	sp, r7
 8040d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d9c:	4770      	bx	lr

08040d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040d9e:	b480      	push	{r7}
 8040da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040da2:	bf00      	nop
 8040da4:	46bd      	mov	sp, r7
 8040da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040daa:	4770      	bx	lr

08040dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040dac:	b480      	push	{r7}
 8040dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040db0:	bf00      	nop
 8040db2:	46bd      	mov	sp, r7
 8040db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040db8:	4770      	bx	lr

08040dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040dba:	b580      	push	{r7, lr}
 8040dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040dbe:	f000 f977 	bl	80410b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040dc2:	bf00      	nop
 8040dc4:	bd80      	pop	{r7, pc}
	...

08040dc8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8040dc8:	b580      	push	{r7, lr}
 8040dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8040dcc:	4802      	ldr	r0, [pc, #8]	@ (8040dd8 <OTG_HS_IRQHandler+0x10>)
 8040dce:	f000 ff4f 	bl	8041c70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8040dd2:	bf00      	nop
 8040dd4:	bd80      	pop	{r7, pc}
 8040dd6:	bf00      	nop
 8040dd8:	240007fc 	.word	0x240007fc

08040ddc <ITM_SendChar>:
#define DEMCR        			*((volatile uint32_t*) 0xE000EDFCU )
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )
void ITM_SendChar(uint8_t ch)
{
 8040ddc:	b480      	push	{r7}
 8040dde:	b083      	sub	sp, #12
 8040de0:	af00      	add	r7, sp, #0
 8040de2:	4603      	mov	r3, r0
 8040de4:	71fb      	strb	r3, [r7, #7]
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8040de6:	4b0f      	ldr	r3, [pc, #60]	@ (8040e24 <ITM_SendChar+0x48>)
 8040de8:	681b      	ldr	r3, [r3, #0]
 8040dea:	4a0e      	ldr	r2, [pc, #56]	@ (8040e24 <ITM_SendChar+0x48>)
 8040dec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8040df0:	6013      	str	r3, [r2, #0]
	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8040df2:	4b0d      	ldr	r3, [pc, #52]	@ (8040e28 <ITM_SendChar+0x4c>)
 8040df4:	681b      	ldr	r3, [r3, #0]
 8040df6:	4a0c      	ldr	r2, [pc, #48]	@ (8040e28 <ITM_SendChar+0x4c>)
 8040df8:	f043 0301 	orr.w	r3, r3, #1
 8040dfc:	6013      	str	r3, [r2, #0]
	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8040dfe:	bf00      	nop
 8040e00:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8040e04:	681b      	ldr	r3, [r3, #0]
 8040e06:	f003 0301 	and.w	r3, r3, #1
 8040e0a:	2b00      	cmp	r3, #0
 8040e0c:	d0f8      	beq.n	8040e00 <ITM_SendChar+0x24>
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8040e0e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8040e12:	79fb      	ldrb	r3, [r7, #7]
 8040e14:	6013      	str	r3, [r2, #0]
}
 8040e16:	bf00      	nop
 8040e18:	370c      	adds	r7, #12
 8040e1a:	46bd      	mov	sp, r7
 8040e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e20:	4770      	bx	lr
 8040e22:	bf00      	nop
 8040e24:	e000edfc 	.word	0xe000edfc
 8040e28:	e0000e00 	.word	0xe0000e00

08040e2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8040e2c:	b580      	push	{r7, lr}
 8040e2e:	b086      	sub	sp, #24
 8040e30:	af00      	add	r7, sp, #0
 8040e32:	60f8      	str	r0, [r7, #12]
 8040e34:	60b9      	str	r1, [r7, #8]
 8040e36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040e38:	2300      	movs	r3, #0
 8040e3a:	617b      	str	r3, [r7, #20]
 8040e3c:	e00a      	b.n	8040e54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8040e3e:	f3af 8000 	nop.w
 8040e42:	4601      	mov	r1, r0
 8040e44:	68bb      	ldr	r3, [r7, #8]
 8040e46:	1c5a      	adds	r2, r3, #1
 8040e48:	60ba      	str	r2, [r7, #8]
 8040e4a:	b2ca      	uxtb	r2, r1
 8040e4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040e4e:	697b      	ldr	r3, [r7, #20]
 8040e50:	3301      	adds	r3, #1
 8040e52:	617b      	str	r3, [r7, #20]
 8040e54:	697a      	ldr	r2, [r7, #20]
 8040e56:	687b      	ldr	r3, [r7, #4]
 8040e58:	429a      	cmp	r2, r3
 8040e5a:	dbf0      	blt.n	8040e3e <_read+0x12>
  }

  return len;
 8040e5c:	687b      	ldr	r3, [r7, #4]
}
 8040e5e:	4618      	mov	r0, r3
 8040e60:	3718      	adds	r7, #24
 8040e62:	46bd      	mov	sp, r7
 8040e64:	bd80      	pop	{r7, pc}

08040e66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8040e66:	b580      	push	{r7, lr}
 8040e68:	b086      	sub	sp, #24
 8040e6a:	af00      	add	r7, sp, #0
 8040e6c:	60f8      	str	r0, [r7, #12]
 8040e6e:	60b9      	str	r1, [r7, #8]
 8040e70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040e72:	2300      	movs	r3, #0
 8040e74:	617b      	str	r3, [r7, #20]
 8040e76:	e009      	b.n	8040e8c <_write+0x26>
  {
  //  __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8040e78:	68bb      	ldr	r3, [r7, #8]
 8040e7a:	1c5a      	adds	r2, r3, #1
 8040e7c:	60ba      	str	r2, [r7, #8]
 8040e7e:	781b      	ldrb	r3, [r3, #0]
 8040e80:	4618      	mov	r0, r3
 8040e82:	f7ff ffab 	bl	8040ddc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040e86:	697b      	ldr	r3, [r7, #20]
 8040e88:	3301      	adds	r3, #1
 8040e8a:	617b      	str	r3, [r7, #20]
 8040e8c:	697a      	ldr	r2, [r7, #20]
 8040e8e:	687b      	ldr	r3, [r7, #4]
 8040e90:	429a      	cmp	r2, r3
 8040e92:	dbf1      	blt.n	8040e78 <_write+0x12>
  }
  return len;
 8040e94:	687b      	ldr	r3, [r7, #4]
}
 8040e96:	4618      	mov	r0, r3
 8040e98:	3718      	adds	r7, #24
 8040e9a:	46bd      	mov	sp, r7
 8040e9c:	bd80      	pop	{r7, pc}

08040e9e <_close>:

int _close(int file)
{
 8040e9e:	b480      	push	{r7}
 8040ea0:	b083      	sub	sp, #12
 8040ea2:	af00      	add	r7, sp, #0
 8040ea4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8040ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8040eaa:	4618      	mov	r0, r3
 8040eac:	370c      	adds	r7, #12
 8040eae:	46bd      	mov	sp, r7
 8040eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040eb4:	4770      	bx	lr

08040eb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8040eb6:	b480      	push	{r7}
 8040eb8:	b083      	sub	sp, #12
 8040eba:	af00      	add	r7, sp, #0
 8040ebc:	6078      	str	r0, [r7, #4]
 8040ebe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8040ec0:	683b      	ldr	r3, [r7, #0]
 8040ec2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8040ec6:	605a      	str	r2, [r3, #4]
  return 0;
 8040ec8:	2300      	movs	r3, #0
}
 8040eca:	4618      	mov	r0, r3
 8040ecc:	370c      	adds	r7, #12
 8040ece:	46bd      	mov	sp, r7
 8040ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ed4:	4770      	bx	lr

08040ed6 <_isatty>:

int _isatty(int file)
{
 8040ed6:	b480      	push	{r7}
 8040ed8:	b083      	sub	sp, #12
 8040eda:	af00      	add	r7, sp, #0
 8040edc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8040ede:	2301      	movs	r3, #1
}
 8040ee0:	4618      	mov	r0, r3
 8040ee2:	370c      	adds	r7, #12
 8040ee4:	46bd      	mov	sp, r7
 8040ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040eea:	4770      	bx	lr

08040eec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8040eec:	b480      	push	{r7}
 8040eee:	b085      	sub	sp, #20
 8040ef0:	af00      	add	r7, sp, #0
 8040ef2:	60f8      	str	r0, [r7, #12]
 8040ef4:	60b9      	str	r1, [r7, #8]
 8040ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8040ef8:	2300      	movs	r3, #0
}
 8040efa:	4618      	mov	r0, r3
 8040efc:	3714      	adds	r7, #20
 8040efe:	46bd      	mov	sp, r7
 8040f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f04:	4770      	bx	lr
	...

08040f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040f08:	b580      	push	{r7, lr}
 8040f0a:	b086      	sub	sp, #24
 8040f0c:	af00      	add	r7, sp, #0
 8040f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8040f10:	4a14      	ldr	r2, [pc, #80]	@ (8040f64 <_sbrk+0x5c>)
 8040f12:	4b15      	ldr	r3, [pc, #84]	@ (8040f68 <_sbrk+0x60>)
 8040f14:	1ad3      	subs	r3, r2, r3
 8040f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040f18:	697b      	ldr	r3, [r7, #20]
 8040f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8040f1c:	4b13      	ldr	r3, [pc, #76]	@ (8040f6c <_sbrk+0x64>)
 8040f1e:	681b      	ldr	r3, [r3, #0]
 8040f20:	2b00      	cmp	r3, #0
 8040f22:	d102      	bne.n	8040f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8040f24:	4b11      	ldr	r3, [pc, #68]	@ (8040f6c <_sbrk+0x64>)
 8040f26:	4a12      	ldr	r2, [pc, #72]	@ (8040f70 <_sbrk+0x68>)
 8040f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8040f2a:	4b10      	ldr	r3, [pc, #64]	@ (8040f6c <_sbrk+0x64>)
 8040f2c:	681a      	ldr	r2, [r3, #0]
 8040f2e:	687b      	ldr	r3, [r7, #4]
 8040f30:	4413      	add	r3, r2
 8040f32:	693a      	ldr	r2, [r7, #16]
 8040f34:	429a      	cmp	r2, r3
 8040f36:	d207      	bcs.n	8040f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8040f38:	f00a fb86 	bl	804b648 <__errno>
 8040f3c:	4603      	mov	r3, r0
 8040f3e:	220c      	movs	r2, #12
 8040f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8040f42:	f04f 33ff 	mov.w	r3, #4294967295
 8040f46:	e009      	b.n	8040f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8040f48:	4b08      	ldr	r3, [pc, #32]	@ (8040f6c <_sbrk+0x64>)
 8040f4a:	681b      	ldr	r3, [r3, #0]
 8040f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8040f4e:	4b07      	ldr	r3, [pc, #28]	@ (8040f6c <_sbrk+0x64>)
 8040f50:	681a      	ldr	r2, [r3, #0]
 8040f52:	687b      	ldr	r3, [r7, #4]
 8040f54:	4413      	add	r3, r2
 8040f56:	4a05      	ldr	r2, [pc, #20]	@ (8040f6c <_sbrk+0x64>)
 8040f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8040f5a:	68fb      	ldr	r3, [r7, #12]
}
 8040f5c:	4618      	mov	r0, r3
 8040f5e:	3718      	adds	r7, #24
 8040f60:	46bd      	mov	sp, r7
 8040f62:	bd80      	pop	{r7, pc}
 8040f64:	2407fffc 	.word	0x2407fffc
 8040f68:	00000400 	.word	0x00000400
 8040f6c:	24000214 	.word	0x24000214
 8040f70:	24001250 	.word	0x24001250

08040f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8040f74:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8040fb0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8040f78:	f7ff fc4a 	bl	8040810 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8040f7c:	f7ff fb96 	bl	80406ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8040f80:	480c      	ldr	r0, [pc, #48]	@ (8040fb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8040f82:	490d      	ldr	r1, [pc, #52]	@ (8040fb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8040f84:	4a0d      	ldr	r2, [pc, #52]	@ (8040fbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8040f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040f88:	e002      	b.n	8040f90 <LoopCopyDataInit>

08040f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040f8e:	3304      	adds	r3, #4

08040f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040f94:	d3f9      	bcc.n	8040f8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040f96:	4a0a      	ldr	r2, [pc, #40]	@ (8040fc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8040f98:	4c0a      	ldr	r4, [pc, #40]	@ (8040fc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8040f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040f9c:	e001      	b.n	8040fa2 <LoopFillZerobss>

08040f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040fa0:	3204      	adds	r2, #4

08040fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040fa4:	d3fb      	bcc.n	8040f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8040fa6:	f00a fb55 	bl	804b654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040faa:	f7ff fc49 	bl	8040840 <main>
  bx  lr
 8040fae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8040fb0:	2407fffc 	.word	0x2407fffc
  ldr r0, =_sdata
 8040fb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8040fb8:	24000140 	.word	0x24000140
  ldr r2, =_sidata
 8040fbc:	0804c354 	.word	0x0804c354
  ldr r2, =_sbss
 8040fc0:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8040fc4:	24001250 	.word	0x24001250

08040fc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040fc8:	e7fe      	b.n	8040fc8 <ADC3_IRQHandler>
	...

08040fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040fcc:	b580      	push	{r7, lr}
 8040fce:	b082      	sub	sp, #8
 8040fd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040fd2:	2003      	movs	r0, #3
 8040fd4:	f000 f98c 	bl	80412f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8040fd8:	f002 fe2c 	bl	8043c34 <HAL_RCC_GetSysClockFreq>
 8040fdc:	4602      	mov	r2, r0
 8040fde:	4b15      	ldr	r3, [pc, #84]	@ (8041034 <HAL_Init+0x68>)
 8040fe0:	699b      	ldr	r3, [r3, #24]
 8040fe2:	0a1b      	lsrs	r3, r3, #8
 8040fe4:	f003 030f 	and.w	r3, r3, #15
 8040fe8:	4913      	ldr	r1, [pc, #76]	@ (8041038 <HAL_Init+0x6c>)
 8040fea:	5ccb      	ldrb	r3, [r1, r3]
 8040fec:	f003 031f 	and.w	r3, r3, #31
 8040ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8040ff4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8040ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8041034 <HAL_Init+0x68>)
 8040ff8:	699b      	ldr	r3, [r3, #24]
 8040ffa:	f003 030f 	and.w	r3, r3, #15
 8040ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8041038 <HAL_Init+0x6c>)
 8041000:	5cd3      	ldrb	r3, [r2, r3]
 8041002:	f003 031f 	and.w	r3, r3, #31
 8041006:	687a      	ldr	r2, [r7, #4]
 8041008:	fa22 f303 	lsr.w	r3, r2, r3
 804100c:	4a0b      	ldr	r2, [pc, #44]	@ (804103c <HAL_Init+0x70>)
 804100e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8041010:	4a0b      	ldr	r2, [pc, #44]	@ (8041040 <HAL_Init+0x74>)
 8041012:	687b      	ldr	r3, [r7, #4]
 8041014:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8041016:	2000      	movs	r0, #0
 8041018:	f000 f814 	bl	8041044 <HAL_InitTick>
 804101c:	4603      	mov	r3, r0
 804101e:	2b00      	cmp	r3, #0
 8041020:	d001      	beq.n	8041026 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8041022:	2301      	movs	r3, #1
 8041024:	e002      	b.n	804102c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8041026:	f7ff fdf9 	bl	8040c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 804102a:	2300      	movs	r3, #0
}
 804102c:	4618      	mov	r0, r3
 804102e:	3708      	adds	r7, #8
 8041030:	46bd      	mov	sp, r7
 8041032:	bd80      	pop	{r7, pc}
 8041034:	58024400 	.word	0x58024400
 8041038:	0804c2d8 	.word	0x0804c2d8
 804103c:	24000004 	.word	0x24000004
 8041040:	24000000 	.word	0x24000000

08041044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8041044:	b580      	push	{r7, lr}
 8041046:	b082      	sub	sp, #8
 8041048:	af00      	add	r7, sp, #0
 804104a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 804104c:	4b15      	ldr	r3, [pc, #84]	@ (80410a4 <HAL_InitTick+0x60>)
 804104e:	781b      	ldrb	r3, [r3, #0]
 8041050:	2b00      	cmp	r3, #0
 8041052:	d101      	bne.n	8041058 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8041054:	2301      	movs	r3, #1
 8041056:	e021      	b.n	804109c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8041058:	4b13      	ldr	r3, [pc, #76]	@ (80410a8 <HAL_InitTick+0x64>)
 804105a:	681a      	ldr	r2, [r3, #0]
 804105c:	4b11      	ldr	r3, [pc, #68]	@ (80410a4 <HAL_InitTick+0x60>)
 804105e:	781b      	ldrb	r3, [r3, #0]
 8041060:	4619      	mov	r1, r3
 8041062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8041066:	fbb3 f3f1 	udiv	r3, r3, r1
 804106a:	fbb2 f3f3 	udiv	r3, r2, r3
 804106e:	4618      	mov	r0, r3
 8041070:	f000 f971 	bl	8041356 <HAL_SYSTICK_Config>
 8041074:	4603      	mov	r3, r0
 8041076:	2b00      	cmp	r3, #0
 8041078:	d001      	beq.n	804107e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 804107a:	2301      	movs	r3, #1
 804107c:	e00e      	b.n	804109c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 804107e:	687b      	ldr	r3, [r7, #4]
 8041080:	2b0f      	cmp	r3, #15
 8041082:	d80a      	bhi.n	804109a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8041084:	2200      	movs	r2, #0
 8041086:	6879      	ldr	r1, [r7, #4]
 8041088:	f04f 30ff 	mov.w	r0, #4294967295
 804108c:	f000 f93b 	bl	8041306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8041090:	4a06      	ldr	r2, [pc, #24]	@ (80410ac <HAL_InitTick+0x68>)
 8041092:	687b      	ldr	r3, [r7, #4]
 8041094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8041096:	2300      	movs	r3, #0
 8041098:	e000      	b.n	804109c <HAL_InitTick+0x58>
    return HAL_ERROR;
 804109a:	2301      	movs	r3, #1
}
 804109c:	4618      	mov	r0, r3
 804109e:	3708      	adds	r7, #8
 80410a0:	46bd      	mov	sp, r7
 80410a2:	bd80      	pop	{r7, pc}
 80410a4:	2400000c 	.word	0x2400000c
 80410a8:	24000000 	.word	0x24000000
 80410ac:	24000008 	.word	0x24000008

080410b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80410b0:	b480      	push	{r7}
 80410b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80410b4:	4b06      	ldr	r3, [pc, #24]	@ (80410d0 <HAL_IncTick+0x20>)
 80410b6:	781b      	ldrb	r3, [r3, #0]
 80410b8:	461a      	mov	r2, r3
 80410ba:	4b06      	ldr	r3, [pc, #24]	@ (80410d4 <HAL_IncTick+0x24>)
 80410bc:	681b      	ldr	r3, [r3, #0]
 80410be:	4413      	add	r3, r2
 80410c0:	4a04      	ldr	r2, [pc, #16]	@ (80410d4 <HAL_IncTick+0x24>)
 80410c2:	6013      	str	r3, [r2, #0]
}
 80410c4:	bf00      	nop
 80410c6:	46bd      	mov	sp, r7
 80410c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410cc:	4770      	bx	lr
 80410ce:	bf00      	nop
 80410d0:	2400000c 	.word	0x2400000c
 80410d4:	24000218 	.word	0x24000218

080410d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80410d8:	b480      	push	{r7}
 80410da:	af00      	add	r7, sp, #0
  return uwTick;
 80410dc:	4b03      	ldr	r3, [pc, #12]	@ (80410ec <HAL_GetTick+0x14>)
 80410de:	681b      	ldr	r3, [r3, #0]
}
 80410e0:	4618      	mov	r0, r3
 80410e2:	46bd      	mov	sp, r7
 80410e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410e8:	4770      	bx	lr
 80410ea:	bf00      	nop
 80410ec:	24000218 	.word	0x24000218

080410f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80410f0:	b580      	push	{r7, lr}
 80410f2:	b084      	sub	sp, #16
 80410f4:	af00      	add	r7, sp, #0
 80410f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80410f8:	f7ff ffee 	bl	80410d8 <HAL_GetTick>
 80410fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80410fe:	687b      	ldr	r3, [r7, #4]
 8041100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8041102:	68fb      	ldr	r3, [r7, #12]
 8041104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8041108:	d005      	beq.n	8041116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 804110a:	4b0a      	ldr	r3, [pc, #40]	@ (8041134 <HAL_Delay+0x44>)
 804110c:	781b      	ldrb	r3, [r3, #0]
 804110e:	461a      	mov	r2, r3
 8041110:	68fb      	ldr	r3, [r7, #12]
 8041112:	4413      	add	r3, r2
 8041114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8041116:	bf00      	nop
 8041118:	f7ff ffde 	bl	80410d8 <HAL_GetTick>
 804111c:	4602      	mov	r2, r0
 804111e:	68bb      	ldr	r3, [r7, #8]
 8041120:	1ad3      	subs	r3, r2, r3
 8041122:	68fa      	ldr	r2, [r7, #12]
 8041124:	429a      	cmp	r2, r3
 8041126:	d8f7      	bhi.n	8041118 <HAL_Delay+0x28>
  {
  }
}
 8041128:	bf00      	nop
 804112a:	bf00      	nop
 804112c:	3710      	adds	r7, #16
 804112e:	46bd      	mov	sp, r7
 8041130:	bd80      	pop	{r7, pc}
 8041132:	bf00      	nop
 8041134:	2400000c 	.word	0x2400000c

08041138 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8041138:	b480      	push	{r7}
 804113a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 804113c:	4b03      	ldr	r3, [pc, #12]	@ (804114c <HAL_GetREVID+0x14>)
 804113e:	681b      	ldr	r3, [r3, #0]
 8041140:	0c1b      	lsrs	r3, r3, #16
}
 8041142:	4618      	mov	r0, r3
 8041144:	46bd      	mov	sp, r7
 8041146:	f85d 7b04 	ldr.w	r7, [sp], #4
 804114a:	4770      	bx	lr
 804114c:	5c001000 	.word	0x5c001000

08041150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8041150:	b480      	push	{r7}
 8041152:	b085      	sub	sp, #20
 8041154:	af00      	add	r7, sp, #0
 8041156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8041158:	687b      	ldr	r3, [r7, #4]
 804115a:	f003 0307 	and.w	r3, r3, #7
 804115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8041160:	4b0b      	ldr	r3, [pc, #44]	@ (8041190 <__NVIC_SetPriorityGrouping+0x40>)
 8041162:	68db      	ldr	r3, [r3, #12]
 8041164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8041166:	68ba      	ldr	r2, [r7, #8]
 8041168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 804116c:	4013      	ands	r3, r2
 804116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8041170:	68fb      	ldr	r3, [r7, #12]
 8041172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8041174:	68bb      	ldr	r3, [r7, #8]
 8041176:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8041178:	4b06      	ldr	r3, [pc, #24]	@ (8041194 <__NVIC_SetPriorityGrouping+0x44>)
 804117a:	4313      	orrs	r3, r2
 804117c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 804117e:	4a04      	ldr	r2, [pc, #16]	@ (8041190 <__NVIC_SetPriorityGrouping+0x40>)
 8041180:	68bb      	ldr	r3, [r7, #8]
 8041182:	60d3      	str	r3, [r2, #12]
}
 8041184:	bf00      	nop
 8041186:	3714      	adds	r7, #20
 8041188:	46bd      	mov	sp, r7
 804118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804118e:	4770      	bx	lr
 8041190:	e000ed00 	.word	0xe000ed00
 8041194:	05fa0000 	.word	0x05fa0000

08041198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8041198:	b480      	push	{r7}
 804119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 804119c:	4b04      	ldr	r3, [pc, #16]	@ (80411b0 <__NVIC_GetPriorityGrouping+0x18>)
 804119e:	68db      	ldr	r3, [r3, #12]
 80411a0:	0a1b      	lsrs	r3, r3, #8
 80411a2:	f003 0307 	and.w	r3, r3, #7
}
 80411a6:	4618      	mov	r0, r3
 80411a8:	46bd      	mov	sp, r7
 80411aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80411ae:	4770      	bx	lr
 80411b0:	e000ed00 	.word	0xe000ed00

080411b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80411b4:	b480      	push	{r7}
 80411b6:	b083      	sub	sp, #12
 80411b8:	af00      	add	r7, sp, #0
 80411ba:	4603      	mov	r3, r0
 80411bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80411be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80411c2:	2b00      	cmp	r3, #0
 80411c4:	db0b      	blt.n	80411de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80411c6:	88fb      	ldrh	r3, [r7, #6]
 80411c8:	f003 021f 	and.w	r2, r3, #31
 80411cc:	4907      	ldr	r1, [pc, #28]	@ (80411ec <__NVIC_EnableIRQ+0x38>)
 80411ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80411d2:	095b      	lsrs	r3, r3, #5
 80411d4:	2001      	movs	r0, #1
 80411d6:	fa00 f202 	lsl.w	r2, r0, r2
 80411da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80411de:	bf00      	nop
 80411e0:	370c      	adds	r7, #12
 80411e2:	46bd      	mov	sp, r7
 80411e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80411e8:	4770      	bx	lr
 80411ea:	bf00      	nop
 80411ec:	e000e100 	.word	0xe000e100

080411f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80411f0:	b480      	push	{r7}
 80411f2:	b083      	sub	sp, #12
 80411f4:	af00      	add	r7, sp, #0
 80411f6:	4603      	mov	r3, r0
 80411f8:	6039      	str	r1, [r7, #0]
 80411fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80411fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8041200:	2b00      	cmp	r3, #0
 8041202:	db0a      	blt.n	804121a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041204:	683b      	ldr	r3, [r7, #0]
 8041206:	b2da      	uxtb	r2, r3
 8041208:	490c      	ldr	r1, [pc, #48]	@ (804123c <__NVIC_SetPriority+0x4c>)
 804120a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 804120e:	0112      	lsls	r2, r2, #4
 8041210:	b2d2      	uxtb	r2, r2
 8041212:	440b      	add	r3, r1
 8041214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8041218:	e00a      	b.n	8041230 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804121a:	683b      	ldr	r3, [r7, #0]
 804121c:	b2da      	uxtb	r2, r3
 804121e:	4908      	ldr	r1, [pc, #32]	@ (8041240 <__NVIC_SetPriority+0x50>)
 8041220:	88fb      	ldrh	r3, [r7, #6]
 8041222:	f003 030f 	and.w	r3, r3, #15
 8041226:	3b04      	subs	r3, #4
 8041228:	0112      	lsls	r2, r2, #4
 804122a:	b2d2      	uxtb	r2, r2
 804122c:	440b      	add	r3, r1
 804122e:	761a      	strb	r2, [r3, #24]
}
 8041230:	bf00      	nop
 8041232:	370c      	adds	r7, #12
 8041234:	46bd      	mov	sp, r7
 8041236:	f85d 7b04 	ldr.w	r7, [sp], #4
 804123a:	4770      	bx	lr
 804123c:	e000e100 	.word	0xe000e100
 8041240:	e000ed00 	.word	0xe000ed00

08041244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8041244:	b480      	push	{r7}
 8041246:	b089      	sub	sp, #36	@ 0x24
 8041248:	af00      	add	r7, sp, #0
 804124a:	60f8      	str	r0, [r7, #12]
 804124c:	60b9      	str	r1, [r7, #8]
 804124e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8041250:	68fb      	ldr	r3, [r7, #12]
 8041252:	f003 0307 	and.w	r3, r3, #7
 8041256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8041258:	69fb      	ldr	r3, [r7, #28]
 804125a:	f1c3 0307 	rsb	r3, r3, #7
 804125e:	2b04      	cmp	r3, #4
 8041260:	bf28      	it	cs
 8041262:	2304      	movcs	r3, #4
 8041264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8041266:	69fb      	ldr	r3, [r7, #28]
 8041268:	3304      	adds	r3, #4
 804126a:	2b06      	cmp	r3, #6
 804126c:	d902      	bls.n	8041274 <NVIC_EncodePriority+0x30>
 804126e:	69fb      	ldr	r3, [r7, #28]
 8041270:	3b03      	subs	r3, #3
 8041272:	e000      	b.n	8041276 <NVIC_EncodePriority+0x32>
 8041274:	2300      	movs	r3, #0
 8041276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8041278:	f04f 32ff 	mov.w	r2, #4294967295
 804127c:	69bb      	ldr	r3, [r7, #24]
 804127e:	fa02 f303 	lsl.w	r3, r2, r3
 8041282:	43da      	mvns	r2, r3
 8041284:	68bb      	ldr	r3, [r7, #8]
 8041286:	401a      	ands	r2, r3
 8041288:	697b      	ldr	r3, [r7, #20]
 804128a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 804128c:	f04f 31ff 	mov.w	r1, #4294967295
 8041290:	697b      	ldr	r3, [r7, #20]
 8041292:	fa01 f303 	lsl.w	r3, r1, r3
 8041296:	43d9      	mvns	r1, r3
 8041298:	687b      	ldr	r3, [r7, #4]
 804129a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 804129c:	4313      	orrs	r3, r2
         );
}
 804129e:	4618      	mov	r0, r3
 80412a0:	3724      	adds	r7, #36	@ 0x24
 80412a2:	46bd      	mov	sp, r7
 80412a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80412a8:	4770      	bx	lr
	...

080412ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80412ac:	b580      	push	{r7, lr}
 80412ae:	b082      	sub	sp, #8
 80412b0:	af00      	add	r7, sp, #0
 80412b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80412b4:	687b      	ldr	r3, [r7, #4]
 80412b6:	3b01      	subs	r3, #1
 80412b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80412bc:	d301      	bcc.n	80412c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80412be:	2301      	movs	r3, #1
 80412c0:	e00f      	b.n	80412e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80412c2:	4a0a      	ldr	r2, [pc, #40]	@ (80412ec <SysTick_Config+0x40>)
 80412c4:	687b      	ldr	r3, [r7, #4]
 80412c6:	3b01      	subs	r3, #1
 80412c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80412ca:	210f      	movs	r1, #15
 80412cc:	f04f 30ff 	mov.w	r0, #4294967295
 80412d0:	f7ff ff8e 	bl	80411f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80412d4:	4b05      	ldr	r3, [pc, #20]	@ (80412ec <SysTick_Config+0x40>)
 80412d6:	2200      	movs	r2, #0
 80412d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80412da:	4b04      	ldr	r3, [pc, #16]	@ (80412ec <SysTick_Config+0x40>)
 80412dc:	2207      	movs	r2, #7
 80412de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80412e0:	2300      	movs	r3, #0
}
 80412e2:	4618      	mov	r0, r3
 80412e4:	3708      	adds	r7, #8
 80412e6:	46bd      	mov	sp, r7
 80412e8:	bd80      	pop	{r7, pc}
 80412ea:	bf00      	nop
 80412ec:	e000e010 	.word	0xe000e010

080412f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80412f0:	b580      	push	{r7, lr}
 80412f2:	b082      	sub	sp, #8
 80412f4:	af00      	add	r7, sp, #0
 80412f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80412f8:	6878      	ldr	r0, [r7, #4]
 80412fa:	f7ff ff29 	bl	8041150 <__NVIC_SetPriorityGrouping>
}
 80412fe:	bf00      	nop
 8041300:	3708      	adds	r7, #8
 8041302:	46bd      	mov	sp, r7
 8041304:	bd80      	pop	{r7, pc}

08041306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8041306:	b580      	push	{r7, lr}
 8041308:	b086      	sub	sp, #24
 804130a:	af00      	add	r7, sp, #0
 804130c:	4603      	mov	r3, r0
 804130e:	60b9      	str	r1, [r7, #8]
 8041310:	607a      	str	r2, [r7, #4]
 8041312:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8041314:	f7ff ff40 	bl	8041198 <__NVIC_GetPriorityGrouping>
 8041318:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 804131a:	687a      	ldr	r2, [r7, #4]
 804131c:	68b9      	ldr	r1, [r7, #8]
 804131e:	6978      	ldr	r0, [r7, #20]
 8041320:	f7ff ff90 	bl	8041244 <NVIC_EncodePriority>
 8041324:	4602      	mov	r2, r0
 8041326:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 804132a:	4611      	mov	r1, r2
 804132c:	4618      	mov	r0, r3
 804132e:	f7ff ff5f 	bl	80411f0 <__NVIC_SetPriority>
}
 8041332:	bf00      	nop
 8041334:	3718      	adds	r7, #24
 8041336:	46bd      	mov	sp, r7
 8041338:	bd80      	pop	{r7, pc}

0804133a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 804133a:	b580      	push	{r7, lr}
 804133c:	b082      	sub	sp, #8
 804133e:	af00      	add	r7, sp, #0
 8041340:	4603      	mov	r3, r0
 8041342:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8041344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8041348:	4618      	mov	r0, r3
 804134a:	f7ff ff33 	bl	80411b4 <__NVIC_EnableIRQ>
}
 804134e:	bf00      	nop
 8041350:	3708      	adds	r7, #8
 8041352:	46bd      	mov	sp, r7
 8041354:	bd80      	pop	{r7, pc}

08041356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8041356:	b580      	push	{r7, lr}
 8041358:	b082      	sub	sp, #8
 804135a:	af00      	add	r7, sp, #0
 804135c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 804135e:	6878      	ldr	r0, [r7, #4]
 8041360:	f7ff ffa4 	bl	80412ac <SysTick_Config>
 8041364:	4603      	mov	r3, r0
}
 8041366:	4618      	mov	r0, r3
 8041368:	3708      	adds	r7, #8
 804136a:	46bd      	mov	sp, r7
 804136c:	bd80      	pop	{r7, pc}
	...

08041370 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8041370:	b580      	push	{r7, lr}
 8041372:	b082      	sub	sp, #8
 8041374:	af00      	add	r7, sp, #0
 8041376:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8041378:	687b      	ldr	r3, [r7, #4]
 804137a:	2b00      	cmp	r3, #0
 804137c:	d101      	bne.n	8041382 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 804137e:	2301      	movs	r3, #1
 8041380:	e054      	b.n	804142c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8041382:	687b      	ldr	r3, [r7, #4]
 8041384:	7f5b      	ldrb	r3, [r3, #29]
 8041386:	b2db      	uxtb	r3, r3
 8041388:	2b00      	cmp	r3, #0
 804138a:	d105      	bne.n	8041398 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 804138c:	687b      	ldr	r3, [r7, #4]
 804138e:	2200      	movs	r2, #0
 8041390:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8041392:	6878      	ldr	r0, [r7, #4]
 8041394:	f7ff fc5c 	bl	8040c50 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8041398:	687b      	ldr	r3, [r7, #4]
 804139a:	2202      	movs	r2, #2
 804139c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 804139e:	687b      	ldr	r3, [r7, #4]
 80413a0:	791b      	ldrb	r3, [r3, #4]
 80413a2:	2b00      	cmp	r3, #0
 80413a4:	d10c      	bne.n	80413c0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80413a6:	687b      	ldr	r3, [r7, #4]
 80413a8:	681b      	ldr	r3, [r3, #0]
 80413aa:	4a22      	ldr	r2, [pc, #136]	@ (8041434 <HAL_CRC_Init+0xc4>)
 80413ac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80413ae:	687b      	ldr	r3, [r7, #4]
 80413b0:	681b      	ldr	r3, [r3, #0]
 80413b2:	689a      	ldr	r2, [r3, #8]
 80413b4:	687b      	ldr	r3, [r7, #4]
 80413b6:	681b      	ldr	r3, [r3, #0]
 80413b8:	f022 0218 	bic.w	r2, r2, #24
 80413bc:	609a      	str	r2, [r3, #8]
 80413be:	e00c      	b.n	80413da <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80413c0:	687b      	ldr	r3, [r7, #4]
 80413c2:	6899      	ldr	r1, [r3, #8]
 80413c4:	687b      	ldr	r3, [r7, #4]
 80413c6:	68db      	ldr	r3, [r3, #12]
 80413c8:	461a      	mov	r2, r3
 80413ca:	6878      	ldr	r0, [r7, #4]
 80413cc:	f000 f834 	bl	8041438 <HAL_CRCEx_Polynomial_Set>
 80413d0:	4603      	mov	r3, r0
 80413d2:	2b00      	cmp	r3, #0
 80413d4:	d001      	beq.n	80413da <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80413d6:	2301      	movs	r3, #1
 80413d8:	e028      	b.n	804142c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80413da:	687b      	ldr	r3, [r7, #4]
 80413dc:	795b      	ldrb	r3, [r3, #5]
 80413de:	2b00      	cmp	r3, #0
 80413e0:	d105      	bne.n	80413ee <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80413e2:	687b      	ldr	r3, [r7, #4]
 80413e4:	681b      	ldr	r3, [r3, #0]
 80413e6:	f04f 32ff 	mov.w	r2, #4294967295
 80413ea:	611a      	str	r2, [r3, #16]
 80413ec:	e004      	b.n	80413f8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80413ee:	687b      	ldr	r3, [r7, #4]
 80413f0:	681b      	ldr	r3, [r3, #0]
 80413f2:	687a      	ldr	r2, [r7, #4]
 80413f4:	6912      	ldr	r2, [r2, #16]
 80413f6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80413f8:	687b      	ldr	r3, [r7, #4]
 80413fa:	681b      	ldr	r3, [r3, #0]
 80413fc:	689b      	ldr	r3, [r3, #8]
 80413fe:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8041402:	687b      	ldr	r3, [r7, #4]
 8041404:	695a      	ldr	r2, [r3, #20]
 8041406:	687b      	ldr	r3, [r7, #4]
 8041408:	681b      	ldr	r3, [r3, #0]
 804140a:	430a      	orrs	r2, r1
 804140c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 804140e:	687b      	ldr	r3, [r7, #4]
 8041410:	681b      	ldr	r3, [r3, #0]
 8041412:	689b      	ldr	r3, [r3, #8]
 8041414:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8041418:	687b      	ldr	r3, [r7, #4]
 804141a:	699a      	ldr	r2, [r3, #24]
 804141c:	687b      	ldr	r3, [r7, #4]
 804141e:	681b      	ldr	r3, [r3, #0]
 8041420:	430a      	orrs	r2, r1
 8041422:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8041424:	687b      	ldr	r3, [r7, #4]
 8041426:	2201      	movs	r2, #1
 8041428:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 804142a:	2300      	movs	r3, #0
}
 804142c:	4618      	mov	r0, r3
 804142e:	3708      	adds	r7, #8
 8041430:	46bd      	mov	sp, r7
 8041432:	bd80      	pop	{r7, pc}
 8041434:	04c11db7 	.word	0x04c11db7

08041438 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8041438:	b480      	push	{r7}
 804143a:	b087      	sub	sp, #28
 804143c:	af00      	add	r7, sp, #0
 804143e:	60f8      	str	r0, [r7, #12]
 8041440:	60b9      	str	r1, [r7, #8]
 8041442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8041444:	2300      	movs	r3, #0
 8041446:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8041448:	231f      	movs	r3, #31
 804144a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 804144c:	68bb      	ldr	r3, [r7, #8]
 804144e:	f003 0301 	and.w	r3, r3, #1
 8041452:	2b00      	cmp	r3, #0
 8041454:	d102      	bne.n	804145c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8041456:	2301      	movs	r3, #1
 8041458:	75fb      	strb	r3, [r7, #23]
 804145a:	e063      	b.n	8041524 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 804145c:	bf00      	nop
 804145e:	693b      	ldr	r3, [r7, #16]
 8041460:	1e5a      	subs	r2, r3, #1
 8041462:	613a      	str	r2, [r7, #16]
 8041464:	2b00      	cmp	r3, #0
 8041466:	d009      	beq.n	804147c <HAL_CRCEx_Polynomial_Set+0x44>
 8041468:	693b      	ldr	r3, [r7, #16]
 804146a:	f003 031f 	and.w	r3, r3, #31
 804146e:	68ba      	ldr	r2, [r7, #8]
 8041470:	fa22 f303 	lsr.w	r3, r2, r3
 8041474:	f003 0301 	and.w	r3, r3, #1
 8041478:	2b00      	cmp	r3, #0
 804147a:	d0f0      	beq.n	804145e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 804147c:	687b      	ldr	r3, [r7, #4]
 804147e:	2b18      	cmp	r3, #24
 8041480:	d846      	bhi.n	8041510 <HAL_CRCEx_Polynomial_Set+0xd8>
 8041482:	a201      	add	r2, pc, #4	@ (adr r2, 8041488 <HAL_CRCEx_Polynomial_Set+0x50>)
 8041484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8041488:	08041517 	.word	0x08041517
 804148c:	08041511 	.word	0x08041511
 8041490:	08041511 	.word	0x08041511
 8041494:	08041511 	.word	0x08041511
 8041498:	08041511 	.word	0x08041511
 804149c:	08041511 	.word	0x08041511
 80414a0:	08041511 	.word	0x08041511
 80414a4:	08041511 	.word	0x08041511
 80414a8:	08041505 	.word	0x08041505
 80414ac:	08041511 	.word	0x08041511
 80414b0:	08041511 	.word	0x08041511
 80414b4:	08041511 	.word	0x08041511
 80414b8:	08041511 	.word	0x08041511
 80414bc:	08041511 	.word	0x08041511
 80414c0:	08041511 	.word	0x08041511
 80414c4:	08041511 	.word	0x08041511
 80414c8:	080414f9 	.word	0x080414f9
 80414cc:	08041511 	.word	0x08041511
 80414d0:	08041511 	.word	0x08041511
 80414d4:	08041511 	.word	0x08041511
 80414d8:	08041511 	.word	0x08041511
 80414dc:	08041511 	.word	0x08041511
 80414e0:	08041511 	.word	0x08041511
 80414e4:	08041511 	.word	0x08041511
 80414e8:	080414ed 	.word	0x080414ed
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80414ec:	693b      	ldr	r3, [r7, #16]
 80414ee:	2b06      	cmp	r3, #6
 80414f0:	d913      	bls.n	804151a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80414f2:	2301      	movs	r3, #1
 80414f4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80414f6:	e010      	b.n	804151a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80414f8:	693b      	ldr	r3, [r7, #16]
 80414fa:	2b07      	cmp	r3, #7
 80414fc:	d90f      	bls.n	804151e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80414fe:	2301      	movs	r3, #1
 8041500:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8041502:	e00c      	b.n	804151e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8041504:	693b      	ldr	r3, [r7, #16]
 8041506:	2b0f      	cmp	r3, #15
 8041508:	d90b      	bls.n	8041522 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 804150a:	2301      	movs	r3, #1
 804150c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 804150e:	e008      	b.n	8041522 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8041510:	2301      	movs	r3, #1
 8041512:	75fb      	strb	r3, [r7, #23]
        break;
 8041514:	e006      	b.n	8041524 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8041516:	bf00      	nop
 8041518:	e004      	b.n	8041524 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 804151a:	bf00      	nop
 804151c:	e002      	b.n	8041524 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 804151e:	bf00      	nop
 8041520:	e000      	b.n	8041524 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8041522:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8041524:	7dfb      	ldrb	r3, [r7, #23]
 8041526:	2b00      	cmp	r3, #0
 8041528:	d10d      	bne.n	8041546 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 804152a:	68fb      	ldr	r3, [r7, #12]
 804152c:	681b      	ldr	r3, [r3, #0]
 804152e:	68ba      	ldr	r2, [r7, #8]
 8041530:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8041532:	68fb      	ldr	r3, [r7, #12]
 8041534:	681b      	ldr	r3, [r3, #0]
 8041536:	689b      	ldr	r3, [r3, #8]
 8041538:	f023 0118 	bic.w	r1, r3, #24
 804153c:	68fb      	ldr	r3, [r7, #12]
 804153e:	681b      	ldr	r3, [r3, #0]
 8041540:	687a      	ldr	r2, [r7, #4]
 8041542:	430a      	orrs	r2, r1
 8041544:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8041546:	7dfb      	ldrb	r3, [r7, #23]
}
 8041548:	4618      	mov	r0, r3
 804154a:	371c      	adds	r7, #28
 804154c:	46bd      	mov	sp, r7
 804154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041552:	4770      	bx	lr

08041554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8041554:	b480      	push	{r7}
 8041556:	b089      	sub	sp, #36	@ 0x24
 8041558:	af00      	add	r7, sp, #0
 804155a:	6078      	str	r0, [r7, #4]
 804155c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 804155e:	2300      	movs	r3, #0
 8041560:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8041562:	4b89      	ldr	r3, [pc, #548]	@ (8041788 <HAL_GPIO_Init+0x234>)
 8041564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8041566:	e194      	b.n	8041892 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8041568:	683b      	ldr	r3, [r7, #0]
 804156a:	681a      	ldr	r2, [r3, #0]
 804156c:	2101      	movs	r1, #1
 804156e:	69fb      	ldr	r3, [r7, #28]
 8041570:	fa01 f303 	lsl.w	r3, r1, r3
 8041574:	4013      	ands	r3, r2
 8041576:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8041578:	693b      	ldr	r3, [r7, #16]
 804157a:	2b00      	cmp	r3, #0
 804157c:	f000 8186 	beq.w	804188c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8041580:	683b      	ldr	r3, [r7, #0]
 8041582:	685b      	ldr	r3, [r3, #4]
 8041584:	f003 0303 	and.w	r3, r3, #3
 8041588:	2b01      	cmp	r3, #1
 804158a:	d005      	beq.n	8041598 <HAL_GPIO_Init+0x44>
 804158c:	683b      	ldr	r3, [r7, #0]
 804158e:	685b      	ldr	r3, [r3, #4]
 8041590:	f003 0303 	and.w	r3, r3, #3
 8041594:	2b02      	cmp	r3, #2
 8041596:	d130      	bne.n	80415fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8041598:	687b      	ldr	r3, [r7, #4]
 804159a:	689b      	ldr	r3, [r3, #8]
 804159c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 804159e:	69fb      	ldr	r3, [r7, #28]
 80415a0:	005b      	lsls	r3, r3, #1
 80415a2:	2203      	movs	r2, #3
 80415a4:	fa02 f303 	lsl.w	r3, r2, r3
 80415a8:	43db      	mvns	r3, r3
 80415aa:	69ba      	ldr	r2, [r7, #24]
 80415ac:	4013      	ands	r3, r2
 80415ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80415b0:	683b      	ldr	r3, [r7, #0]
 80415b2:	68da      	ldr	r2, [r3, #12]
 80415b4:	69fb      	ldr	r3, [r7, #28]
 80415b6:	005b      	lsls	r3, r3, #1
 80415b8:	fa02 f303 	lsl.w	r3, r2, r3
 80415bc:	69ba      	ldr	r2, [r7, #24]
 80415be:	4313      	orrs	r3, r2
 80415c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80415c2:	687b      	ldr	r3, [r7, #4]
 80415c4:	69ba      	ldr	r2, [r7, #24]
 80415c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80415c8:	687b      	ldr	r3, [r7, #4]
 80415ca:	685b      	ldr	r3, [r3, #4]
 80415cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80415ce:	2201      	movs	r2, #1
 80415d0:	69fb      	ldr	r3, [r7, #28]
 80415d2:	fa02 f303 	lsl.w	r3, r2, r3
 80415d6:	43db      	mvns	r3, r3
 80415d8:	69ba      	ldr	r2, [r7, #24]
 80415da:	4013      	ands	r3, r2
 80415dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80415de:	683b      	ldr	r3, [r7, #0]
 80415e0:	685b      	ldr	r3, [r3, #4]
 80415e2:	091b      	lsrs	r3, r3, #4
 80415e4:	f003 0201 	and.w	r2, r3, #1
 80415e8:	69fb      	ldr	r3, [r7, #28]
 80415ea:	fa02 f303 	lsl.w	r3, r2, r3
 80415ee:	69ba      	ldr	r2, [r7, #24]
 80415f0:	4313      	orrs	r3, r2
 80415f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80415f4:	687b      	ldr	r3, [r7, #4]
 80415f6:	69ba      	ldr	r2, [r7, #24]
 80415f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80415fa:	683b      	ldr	r3, [r7, #0]
 80415fc:	685b      	ldr	r3, [r3, #4]
 80415fe:	f003 0303 	and.w	r3, r3, #3
 8041602:	2b03      	cmp	r3, #3
 8041604:	d017      	beq.n	8041636 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8041606:	687b      	ldr	r3, [r7, #4]
 8041608:	68db      	ldr	r3, [r3, #12]
 804160a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 804160c:	69fb      	ldr	r3, [r7, #28]
 804160e:	005b      	lsls	r3, r3, #1
 8041610:	2203      	movs	r2, #3
 8041612:	fa02 f303 	lsl.w	r3, r2, r3
 8041616:	43db      	mvns	r3, r3
 8041618:	69ba      	ldr	r2, [r7, #24]
 804161a:	4013      	ands	r3, r2
 804161c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 804161e:	683b      	ldr	r3, [r7, #0]
 8041620:	689a      	ldr	r2, [r3, #8]
 8041622:	69fb      	ldr	r3, [r7, #28]
 8041624:	005b      	lsls	r3, r3, #1
 8041626:	fa02 f303 	lsl.w	r3, r2, r3
 804162a:	69ba      	ldr	r2, [r7, #24]
 804162c:	4313      	orrs	r3, r2
 804162e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8041630:	687b      	ldr	r3, [r7, #4]
 8041632:	69ba      	ldr	r2, [r7, #24]
 8041634:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8041636:	683b      	ldr	r3, [r7, #0]
 8041638:	685b      	ldr	r3, [r3, #4]
 804163a:	f003 0303 	and.w	r3, r3, #3
 804163e:	2b02      	cmp	r3, #2
 8041640:	d123      	bne.n	804168a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8041642:	69fb      	ldr	r3, [r7, #28]
 8041644:	08da      	lsrs	r2, r3, #3
 8041646:	687b      	ldr	r3, [r7, #4]
 8041648:	3208      	adds	r2, #8
 804164a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8041650:	69fb      	ldr	r3, [r7, #28]
 8041652:	f003 0307 	and.w	r3, r3, #7
 8041656:	009b      	lsls	r3, r3, #2
 8041658:	220f      	movs	r2, #15
 804165a:	fa02 f303 	lsl.w	r3, r2, r3
 804165e:	43db      	mvns	r3, r3
 8041660:	69ba      	ldr	r2, [r7, #24]
 8041662:	4013      	ands	r3, r2
 8041664:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8041666:	683b      	ldr	r3, [r7, #0]
 8041668:	691a      	ldr	r2, [r3, #16]
 804166a:	69fb      	ldr	r3, [r7, #28]
 804166c:	f003 0307 	and.w	r3, r3, #7
 8041670:	009b      	lsls	r3, r3, #2
 8041672:	fa02 f303 	lsl.w	r3, r2, r3
 8041676:	69ba      	ldr	r2, [r7, #24]
 8041678:	4313      	orrs	r3, r2
 804167a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 804167c:	69fb      	ldr	r3, [r7, #28]
 804167e:	08da      	lsrs	r2, r3, #3
 8041680:	687b      	ldr	r3, [r7, #4]
 8041682:	3208      	adds	r2, #8
 8041684:	69b9      	ldr	r1, [r7, #24]
 8041686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 804168a:	687b      	ldr	r3, [r7, #4]
 804168c:	681b      	ldr	r3, [r3, #0]
 804168e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8041690:	69fb      	ldr	r3, [r7, #28]
 8041692:	005b      	lsls	r3, r3, #1
 8041694:	2203      	movs	r2, #3
 8041696:	fa02 f303 	lsl.w	r3, r2, r3
 804169a:	43db      	mvns	r3, r3
 804169c:	69ba      	ldr	r2, [r7, #24]
 804169e:	4013      	ands	r3, r2
 80416a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80416a2:	683b      	ldr	r3, [r7, #0]
 80416a4:	685b      	ldr	r3, [r3, #4]
 80416a6:	f003 0203 	and.w	r2, r3, #3
 80416aa:	69fb      	ldr	r3, [r7, #28]
 80416ac:	005b      	lsls	r3, r3, #1
 80416ae:	fa02 f303 	lsl.w	r3, r2, r3
 80416b2:	69ba      	ldr	r2, [r7, #24]
 80416b4:	4313      	orrs	r3, r2
 80416b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80416b8:	687b      	ldr	r3, [r7, #4]
 80416ba:	69ba      	ldr	r2, [r7, #24]
 80416bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80416be:	683b      	ldr	r3, [r7, #0]
 80416c0:	685b      	ldr	r3, [r3, #4]
 80416c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80416c6:	2b00      	cmp	r3, #0
 80416c8:	f000 80e0 	beq.w	804188c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80416cc:	4b2f      	ldr	r3, [pc, #188]	@ (804178c <HAL_GPIO_Init+0x238>)
 80416ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80416d2:	4a2e      	ldr	r2, [pc, #184]	@ (804178c <HAL_GPIO_Init+0x238>)
 80416d4:	f043 0302 	orr.w	r3, r3, #2
 80416d8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80416dc:	4b2b      	ldr	r3, [pc, #172]	@ (804178c <HAL_GPIO_Init+0x238>)
 80416de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80416e2:	f003 0302 	and.w	r3, r3, #2
 80416e6:	60fb      	str	r3, [r7, #12]
 80416e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80416ea:	4a29      	ldr	r2, [pc, #164]	@ (8041790 <HAL_GPIO_Init+0x23c>)
 80416ec:	69fb      	ldr	r3, [r7, #28]
 80416ee:	089b      	lsrs	r3, r3, #2
 80416f0:	3302      	adds	r3, #2
 80416f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80416f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80416f8:	69fb      	ldr	r3, [r7, #28]
 80416fa:	f003 0303 	and.w	r3, r3, #3
 80416fe:	009b      	lsls	r3, r3, #2
 8041700:	220f      	movs	r2, #15
 8041702:	fa02 f303 	lsl.w	r3, r2, r3
 8041706:	43db      	mvns	r3, r3
 8041708:	69ba      	ldr	r2, [r7, #24]
 804170a:	4013      	ands	r3, r2
 804170c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 804170e:	687b      	ldr	r3, [r7, #4]
 8041710:	4a20      	ldr	r2, [pc, #128]	@ (8041794 <HAL_GPIO_Init+0x240>)
 8041712:	4293      	cmp	r3, r2
 8041714:	d052      	beq.n	80417bc <HAL_GPIO_Init+0x268>
 8041716:	687b      	ldr	r3, [r7, #4]
 8041718:	4a1f      	ldr	r2, [pc, #124]	@ (8041798 <HAL_GPIO_Init+0x244>)
 804171a:	4293      	cmp	r3, r2
 804171c:	d031      	beq.n	8041782 <HAL_GPIO_Init+0x22e>
 804171e:	687b      	ldr	r3, [r7, #4]
 8041720:	4a1e      	ldr	r2, [pc, #120]	@ (804179c <HAL_GPIO_Init+0x248>)
 8041722:	4293      	cmp	r3, r2
 8041724:	d02b      	beq.n	804177e <HAL_GPIO_Init+0x22a>
 8041726:	687b      	ldr	r3, [r7, #4]
 8041728:	4a1d      	ldr	r2, [pc, #116]	@ (80417a0 <HAL_GPIO_Init+0x24c>)
 804172a:	4293      	cmp	r3, r2
 804172c:	d025      	beq.n	804177a <HAL_GPIO_Init+0x226>
 804172e:	687b      	ldr	r3, [r7, #4]
 8041730:	4a1c      	ldr	r2, [pc, #112]	@ (80417a4 <HAL_GPIO_Init+0x250>)
 8041732:	4293      	cmp	r3, r2
 8041734:	d01f      	beq.n	8041776 <HAL_GPIO_Init+0x222>
 8041736:	687b      	ldr	r3, [r7, #4]
 8041738:	4a1b      	ldr	r2, [pc, #108]	@ (80417a8 <HAL_GPIO_Init+0x254>)
 804173a:	4293      	cmp	r3, r2
 804173c:	d019      	beq.n	8041772 <HAL_GPIO_Init+0x21e>
 804173e:	687b      	ldr	r3, [r7, #4]
 8041740:	4a1a      	ldr	r2, [pc, #104]	@ (80417ac <HAL_GPIO_Init+0x258>)
 8041742:	4293      	cmp	r3, r2
 8041744:	d013      	beq.n	804176e <HAL_GPIO_Init+0x21a>
 8041746:	687b      	ldr	r3, [r7, #4]
 8041748:	4a19      	ldr	r2, [pc, #100]	@ (80417b0 <HAL_GPIO_Init+0x25c>)
 804174a:	4293      	cmp	r3, r2
 804174c:	d00d      	beq.n	804176a <HAL_GPIO_Init+0x216>
 804174e:	687b      	ldr	r3, [r7, #4]
 8041750:	4a18      	ldr	r2, [pc, #96]	@ (80417b4 <HAL_GPIO_Init+0x260>)
 8041752:	4293      	cmp	r3, r2
 8041754:	d007      	beq.n	8041766 <HAL_GPIO_Init+0x212>
 8041756:	687b      	ldr	r3, [r7, #4]
 8041758:	4a17      	ldr	r2, [pc, #92]	@ (80417b8 <HAL_GPIO_Init+0x264>)
 804175a:	4293      	cmp	r3, r2
 804175c:	d101      	bne.n	8041762 <HAL_GPIO_Init+0x20e>
 804175e:	2309      	movs	r3, #9
 8041760:	e02d      	b.n	80417be <HAL_GPIO_Init+0x26a>
 8041762:	230a      	movs	r3, #10
 8041764:	e02b      	b.n	80417be <HAL_GPIO_Init+0x26a>
 8041766:	2308      	movs	r3, #8
 8041768:	e029      	b.n	80417be <HAL_GPIO_Init+0x26a>
 804176a:	2307      	movs	r3, #7
 804176c:	e027      	b.n	80417be <HAL_GPIO_Init+0x26a>
 804176e:	2306      	movs	r3, #6
 8041770:	e025      	b.n	80417be <HAL_GPIO_Init+0x26a>
 8041772:	2305      	movs	r3, #5
 8041774:	e023      	b.n	80417be <HAL_GPIO_Init+0x26a>
 8041776:	2304      	movs	r3, #4
 8041778:	e021      	b.n	80417be <HAL_GPIO_Init+0x26a>
 804177a:	2303      	movs	r3, #3
 804177c:	e01f      	b.n	80417be <HAL_GPIO_Init+0x26a>
 804177e:	2302      	movs	r3, #2
 8041780:	e01d      	b.n	80417be <HAL_GPIO_Init+0x26a>
 8041782:	2301      	movs	r3, #1
 8041784:	e01b      	b.n	80417be <HAL_GPIO_Init+0x26a>
 8041786:	bf00      	nop
 8041788:	58000080 	.word	0x58000080
 804178c:	58024400 	.word	0x58024400
 8041790:	58000400 	.word	0x58000400
 8041794:	58020000 	.word	0x58020000
 8041798:	58020400 	.word	0x58020400
 804179c:	58020800 	.word	0x58020800
 80417a0:	58020c00 	.word	0x58020c00
 80417a4:	58021000 	.word	0x58021000
 80417a8:	58021400 	.word	0x58021400
 80417ac:	58021800 	.word	0x58021800
 80417b0:	58021c00 	.word	0x58021c00
 80417b4:	58022000 	.word	0x58022000
 80417b8:	58022400 	.word	0x58022400
 80417bc:	2300      	movs	r3, #0
 80417be:	69fa      	ldr	r2, [r7, #28]
 80417c0:	f002 0203 	and.w	r2, r2, #3
 80417c4:	0092      	lsls	r2, r2, #2
 80417c6:	4093      	lsls	r3, r2
 80417c8:	69ba      	ldr	r2, [r7, #24]
 80417ca:	4313      	orrs	r3, r2
 80417cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80417ce:	4938      	ldr	r1, [pc, #224]	@ (80418b0 <HAL_GPIO_Init+0x35c>)
 80417d0:	69fb      	ldr	r3, [r7, #28]
 80417d2:	089b      	lsrs	r3, r3, #2
 80417d4:	3302      	adds	r3, #2
 80417d6:	69ba      	ldr	r2, [r7, #24]
 80417d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80417dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80417e0:	681b      	ldr	r3, [r3, #0]
 80417e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80417e4:	693b      	ldr	r3, [r7, #16]
 80417e6:	43db      	mvns	r3, r3
 80417e8:	69ba      	ldr	r2, [r7, #24]
 80417ea:	4013      	ands	r3, r2
 80417ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80417ee:	683b      	ldr	r3, [r7, #0]
 80417f0:	685b      	ldr	r3, [r3, #4]
 80417f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80417f6:	2b00      	cmp	r3, #0
 80417f8:	d003      	beq.n	8041802 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80417fa:	69ba      	ldr	r2, [r7, #24]
 80417fc:	693b      	ldr	r3, [r7, #16]
 80417fe:	4313      	orrs	r3, r2
 8041800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8041802:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8041806:	69bb      	ldr	r3, [r7, #24]
 8041808:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 804180a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 804180e:	685b      	ldr	r3, [r3, #4]
 8041810:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041812:	693b      	ldr	r3, [r7, #16]
 8041814:	43db      	mvns	r3, r3
 8041816:	69ba      	ldr	r2, [r7, #24]
 8041818:	4013      	ands	r3, r2
 804181a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 804181c:	683b      	ldr	r3, [r7, #0]
 804181e:	685b      	ldr	r3, [r3, #4]
 8041820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8041824:	2b00      	cmp	r3, #0
 8041826:	d003      	beq.n	8041830 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8041828:	69ba      	ldr	r2, [r7, #24]
 804182a:	693b      	ldr	r3, [r7, #16]
 804182c:	4313      	orrs	r3, r2
 804182e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8041830:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8041834:	69bb      	ldr	r3, [r7, #24]
 8041836:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8041838:	697b      	ldr	r3, [r7, #20]
 804183a:	685b      	ldr	r3, [r3, #4]
 804183c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 804183e:	693b      	ldr	r3, [r7, #16]
 8041840:	43db      	mvns	r3, r3
 8041842:	69ba      	ldr	r2, [r7, #24]
 8041844:	4013      	ands	r3, r2
 8041846:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8041848:	683b      	ldr	r3, [r7, #0]
 804184a:	685b      	ldr	r3, [r3, #4]
 804184c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041850:	2b00      	cmp	r3, #0
 8041852:	d003      	beq.n	804185c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8041854:	69ba      	ldr	r2, [r7, #24]
 8041856:	693b      	ldr	r3, [r7, #16]
 8041858:	4313      	orrs	r3, r2
 804185a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 804185c:	697b      	ldr	r3, [r7, #20]
 804185e:	69ba      	ldr	r2, [r7, #24]
 8041860:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8041862:	697b      	ldr	r3, [r7, #20]
 8041864:	681b      	ldr	r3, [r3, #0]
 8041866:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041868:	693b      	ldr	r3, [r7, #16]
 804186a:	43db      	mvns	r3, r3
 804186c:	69ba      	ldr	r2, [r7, #24]
 804186e:	4013      	ands	r3, r2
 8041870:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8041872:	683b      	ldr	r3, [r7, #0]
 8041874:	685b      	ldr	r3, [r3, #4]
 8041876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 804187a:	2b00      	cmp	r3, #0
 804187c:	d003      	beq.n	8041886 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 804187e:	69ba      	ldr	r2, [r7, #24]
 8041880:	693b      	ldr	r3, [r7, #16]
 8041882:	4313      	orrs	r3, r2
 8041884:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8041886:	697b      	ldr	r3, [r7, #20]
 8041888:	69ba      	ldr	r2, [r7, #24]
 804188a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 804188c:	69fb      	ldr	r3, [r7, #28]
 804188e:	3301      	adds	r3, #1
 8041890:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8041892:	683b      	ldr	r3, [r7, #0]
 8041894:	681a      	ldr	r2, [r3, #0]
 8041896:	69fb      	ldr	r3, [r7, #28]
 8041898:	fa22 f303 	lsr.w	r3, r2, r3
 804189c:	2b00      	cmp	r3, #0
 804189e:	f47f ae63 	bne.w	8041568 <HAL_GPIO_Init+0x14>
  }
}
 80418a2:	bf00      	nop
 80418a4:	bf00      	nop
 80418a6:	3724      	adds	r7, #36	@ 0x24
 80418a8:	46bd      	mov	sp, r7
 80418aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80418ae:	4770      	bx	lr
 80418b0:	58000400 	.word	0x58000400

080418b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80418b4:	b480      	push	{r7}
 80418b6:	b083      	sub	sp, #12
 80418b8:	af00      	add	r7, sp, #0
 80418ba:	6078      	str	r0, [r7, #4]
 80418bc:	460b      	mov	r3, r1
 80418be:	807b      	strh	r3, [r7, #2]
 80418c0:	4613      	mov	r3, r2
 80418c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80418c4:	787b      	ldrb	r3, [r7, #1]
 80418c6:	2b00      	cmp	r3, #0
 80418c8:	d003      	beq.n	80418d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80418ca:	887a      	ldrh	r2, [r7, #2]
 80418cc:	687b      	ldr	r3, [r7, #4]
 80418ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80418d0:	e003      	b.n	80418da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80418d2:	887b      	ldrh	r3, [r7, #2]
 80418d4:	041a      	lsls	r2, r3, #16
 80418d6:	687b      	ldr	r3, [r7, #4]
 80418d8:	619a      	str	r2, [r3, #24]
}
 80418da:	bf00      	nop
 80418dc:	370c      	adds	r7, #12
 80418de:	46bd      	mov	sp, r7
 80418e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80418e4:	4770      	bx	lr

080418e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80418e6:	b480      	push	{r7}
 80418e8:	b085      	sub	sp, #20
 80418ea:	af00      	add	r7, sp, #0
 80418ec:	6078      	str	r0, [r7, #4]
 80418ee:	460b      	mov	r3, r1
 80418f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80418f2:	687b      	ldr	r3, [r7, #4]
 80418f4:	695b      	ldr	r3, [r3, #20]
 80418f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80418f8:	887a      	ldrh	r2, [r7, #2]
 80418fa:	68fb      	ldr	r3, [r7, #12]
 80418fc:	4013      	ands	r3, r2
 80418fe:	041a      	lsls	r2, r3, #16
 8041900:	68fb      	ldr	r3, [r7, #12]
 8041902:	43d9      	mvns	r1, r3
 8041904:	887b      	ldrh	r3, [r7, #2]
 8041906:	400b      	ands	r3, r1
 8041908:	431a      	orrs	r2, r3
 804190a:	687b      	ldr	r3, [r7, #4]
 804190c:	619a      	str	r2, [r3, #24]
}
 804190e:	bf00      	nop
 8041910:	3714      	adds	r7, #20
 8041912:	46bd      	mov	sp, r7
 8041914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041918:	4770      	bx	lr
	...

0804191c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 804191c:	b480      	push	{r7}
 804191e:	b083      	sub	sp, #12
 8041920:	af00      	add	r7, sp, #0
 8041922:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8041924:	4a08      	ldr	r2, [pc, #32]	@ (8041948 <HAL_HSEM_FastTake+0x2c>)
 8041926:	687b      	ldr	r3, [r7, #4]
 8041928:	3320      	adds	r3, #32
 804192a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804192e:	4a07      	ldr	r2, [pc, #28]	@ (804194c <HAL_HSEM_FastTake+0x30>)
 8041930:	4293      	cmp	r3, r2
 8041932:	d101      	bne.n	8041938 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8041934:	2300      	movs	r3, #0
 8041936:	e000      	b.n	804193a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8041938:	2301      	movs	r3, #1
}
 804193a:	4618      	mov	r0, r3
 804193c:	370c      	adds	r7, #12
 804193e:	46bd      	mov	sp, r7
 8041940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041944:	4770      	bx	lr
 8041946:	bf00      	nop
 8041948:	58026400 	.word	0x58026400
 804194c:	80000300 	.word	0x80000300

08041950 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8041950:	b480      	push	{r7}
 8041952:	b083      	sub	sp, #12
 8041954:	af00      	add	r7, sp, #0
 8041956:	6078      	str	r0, [r7, #4]
 8041958:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 804195a:	4906      	ldr	r1, [pc, #24]	@ (8041974 <HAL_HSEM_Release+0x24>)
 804195c:	683b      	ldr	r3, [r7, #0]
 804195e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8041962:	687b      	ldr	r3, [r7, #4]
 8041964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8041968:	bf00      	nop
 804196a:	370c      	adds	r7, #12
 804196c:	46bd      	mov	sp, r7
 804196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041972:	4770      	bx	lr
 8041974:	58026400 	.word	0x58026400

08041978 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8041978:	b580      	push	{r7, lr}
 804197a:	b086      	sub	sp, #24
 804197c:	af02      	add	r7, sp, #8
 804197e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8041980:	687b      	ldr	r3, [r7, #4]
 8041982:	2b00      	cmp	r3, #0
 8041984:	d101      	bne.n	804198a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8041986:	2301      	movs	r3, #1
 8041988:	e0fe      	b.n	8041b88 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 804198a:	687b      	ldr	r3, [r7, #4]
 804198c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8041990:	b2db      	uxtb	r3, r3
 8041992:	2b00      	cmp	r3, #0
 8041994:	d106      	bne.n	80419a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8041996:	687b      	ldr	r3, [r7, #4]
 8041998:	2200      	movs	r2, #0
 804199a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 804199e:	6878      	ldr	r0, [r7, #4]
 80419a0:	f009 f916 	bl	804abd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80419a4:	687b      	ldr	r3, [r7, #4]
 80419a6:	2203      	movs	r2, #3
 80419a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80419ac:	687b      	ldr	r3, [r7, #4]
 80419ae:	681b      	ldr	r3, [r3, #0]
 80419b0:	4618      	mov	r0, r3
 80419b2:	f005 fb82 	bl	80470ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80419b6:	687b      	ldr	r3, [r7, #4]
 80419b8:	6818      	ldr	r0, [r3, #0]
 80419ba:	687b      	ldr	r3, [r7, #4]
 80419bc:	7c1a      	ldrb	r2, [r3, #16]
 80419be:	f88d 2000 	strb.w	r2, [sp]
 80419c2:	3304      	adds	r3, #4
 80419c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80419c6:	f005 fa53 	bl	8046e70 <USB_CoreInit>
 80419ca:	4603      	mov	r3, r0
 80419cc:	2b00      	cmp	r3, #0
 80419ce:	d005      	beq.n	80419dc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80419d0:	687b      	ldr	r3, [r7, #4]
 80419d2:	2202      	movs	r2, #2
 80419d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80419d8:	2301      	movs	r3, #1
 80419da:	e0d5      	b.n	8041b88 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80419dc:	687b      	ldr	r3, [r7, #4]
 80419de:	681b      	ldr	r3, [r3, #0]
 80419e0:	2100      	movs	r1, #0
 80419e2:	4618      	mov	r0, r3
 80419e4:	f005 fb7a 	bl	80470dc <USB_SetCurrentMode>
 80419e8:	4603      	mov	r3, r0
 80419ea:	2b00      	cmp	r3, #0
 80419ec:	d005      	beq.n	80419fa <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80419ee:	687b      	ldr	r3, [r7, #4]
 80419f0:	2202      	movs	r2, #2
 80419f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80419f6:	2301      	movs	r3, #1
 80419f8:	e0c6      	b.n	8041b88 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80419fa:	2300      	movs	r3, #0
 80419fc:	73fb      	strb	r3, [r7, #15]
 80419fe:	e04a      	b.n	8041a96 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8041a00:	7bfa      	ldrb	r2, [r7, #15]
 8041a02:	6879      	ldr	r1, [r7, #4]
 8041a04:	4613      	mov	r3, r2
 8041a06:	00db      	lsls	r3, r3, #3
 8041a08:	4413      	add	r3, r2
 8041a0a:	009b      	lsls	r3, r3, #2
 8041a0c:	440b      	add	r3, r1
 8041a0e:	3315      	adds	r3, #21
 8041a10:	2201      	movs	r2, #1
 8041a12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8041a14:	7bfa      	ldrb	r2, [r7, #15]
 8041a16:	6879      	ldr	r1, [r7, #4]
 8041a18:	4613      	mov	r3, r2
 8041a1a:	00db      	lsls	r3, r3, #3
 8041a1c:	4413      	add	r3, r2
 8041a1e:	009b      	lsls	r3, r3, #2
 8041a20:	440b      	add	r3, r1
 8041a22:	3314      	adds	r3, #20
 8041a24:	7bfa      	ldrb	r2, [r7, #15]
 8041a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8041a28:	7bfa      	ldrb	r2, [r7, #15]
 8041a2a:	7bfb      	ldrb	r3, [r7, #15]
 8041a2c:	b298      	uxth	r0, r3
 8041a2e:	6879      	ldr	r1, [r7, #4]
 8041a30:	4613      	mov	r3, r2
 8041a32:	00db      	lsls	r3, r3, #3
 8041a34:	4413      	add	r3, r2
 8041a36:	009b      	lsls	r3, r3, #2
 8041a38:	440b      	add	r3, r1
 8041a3a:	332e      	adds	r3, #46	@ 0x2e
 8041a3c:	4602      	mov	r2, r0
 8041a3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8041a40:	7bfa      	ldrb	r2, [r7, #15]
 8041a42:	6879      	ldr	r1, [r7, #4]
 8041a44:	4613      	mov	r3, r2
 8041a46:	00db      	lsls	r3, r3, #3
 8041a48:	4413      	add	r3, r2
 8041a4a:	009b      	lsls	r3, r3, #2
 8041a4c:	440b      	add	r3, r1
 8041a4e:	3318      	adds	r3, #24
 8041a50:	2200      	movs	r2, #0
 8041a52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8041a54:	7bfa      	ldrb	r2, [r7, #15]
 8041a56:	6879      	ldr	r1, [r7, #4]
 8041a58:	4613      	mov	r3, r2
 8041a5a:	00db      	lsls	r3, r3, #3
 8041a5c:	4413      	add	r3, r2
 8041a5e:	009b      	lsls	r3, r3, #2
 8041a60:	440b      	add	r3, r1
 8041a62:	331c      	adds	r3, #28
 8041a64:	2200      	movs	r2, #0
 8041a66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8041a68:	7bfa      	ldrb	r2, [r7, #15]
 8041a6a:	6879      	ldr	r1, [r7, #4]
 8041a6c:	4613      	mov	r3, r2
 8041a6e:	00db      	lsls	r3, r3, #3
 8041a70:	4413      	add	r3, r2
 8041a72:	009b      	lsls	r3, r3, #2
 8041a74:	440b      	add	r3, r1
 8041a76:	3320      	adds	r3, #32
 8041a78:	2200      	movs	r2, #0
 8041a7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8041a7c:	7bfa      	ldrb	r2, [r7, #15]
 8041a7e:	6879      	ldr	r1, [r7, #4]
 8041a80:	4613      	mov	r3, r2
 8041a82:	00db      	lsls	r3, r3, #3
 8041a84:	4413      	add	r3, r2
 8041a86:	009b      	lsls	r3, r3, #2
 8041a88:	440b      	add	r3, r1
 8041a8a:	3324      	adds	r3, #36	@ 0x24
 8041a8c:	2200      	movs	r2, #0
 8041a8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041a90:	7bfb      	ldrb	r3, [r7, #15]
 8041a92:	3301      	adds	r3, #1
 8041a94:	73fb      	strb	r3, [r7, #15]
 8041a96:	687b      	ldr	r3, [r7, #4]
 8041a98:	791b      	ldrb	r3, [r3, #4]
 8041a9a:	7bfa      	ldrb	r2, [r7, #15]
 8041a9c:	429a      	cmp	r2, r3
 8041a9e:	d3af      	bcc.n	8041a00 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041aa0:	2300      	movs	r3, #0
 8041aa2:	73fb      	strb	r3, [r7, #15]
 8041aa4:	e044      	b.n	8041b30 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8041aa6:	7bfa      	ldrb	r2, [r7, #15]
 8041aa8:	6879      	ldr	r1, [r7, #4]
 8041aaa:	4613      	mov	r3, r2
 8041aac:	00db      	lsls	r3, r3, #3
 8041aae:	4413      	add	r3, r2
 8041ab0:	009b      	lsls	r3, r3, #2
 8041ab2:	440b      	add	r3, r1
 8041ab4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8041ab8:	2200      	movs	r2, #0
 8041aba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8041abc:	7bfa      	ldrb	r2, [r7, #15]
 8041abe:	6879      	ldr	r1, [r7, #4]
 8041ac0:	4613      	mov	r3, r2
 8041ac2:	00db      	lsls	r3, r3, #3
 8041ac4:	4413      	add	r3, r2
 8041ac6:	009b      	lsls	r3, r3, #2
 8041ac8:	440b      	add	r3, r1
 8041aca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8041ace:	7bfa      	ldrb	r2, [r7, #15]
 8041ad0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8041ad2:	7bfa      	ldrb	r2, [r7, #15]
 8041ad4:	6879      	ldr	r1, [r7, #4]
 8041ad6:	4613      	mov	r3, r2
 8041ad8:	00db      	lsls	r3, r3, #3
 8041ada:	4413      	add	r3, r2
 8041adc:	009b      	lsls	r3, r3, #2
 8041ade:	440b      	add	r3, r1
 8041ae0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8041ae4:	2200      	movs	r2, #0
 8041ae6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8041ae8:	7bfa      	ldrb	r2, [r7, #15]
 8041aea:	6879      	ldr	r1, [r7, #4]
 8041aec:	4613      	mov	r3, r2
 8041aee:	00db      	lsls	r3, r3, #3
 8041af0:	4413      	add	r3, r2
 8041af2:	009b      	lsls	r3, r3, #2
 8041af4:	440b      	add	r3, r1
 8041af6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8041afa:	2200      	movs	r2, #0
 8041afc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8041afe:	7bfa      	ldrb	r2, [r7, #15]
 8041b00:	6879      	ldr	r1, [r7, #4]
 8041b02:	4613      	mov	r3, r2
 8041b04:	00db      	lsls	r3, r3, #3
 8041b06:	4413      	add	r3, r2
 8041b08:	009b      	lsls	r3, r3, #2
 8041b0a:	440b      	add	r3, r1
 8041b0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8041b10:	2200      	movs	r2, #0
 8041b12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8041b14:	7bfa      	ldrb	r2, [r7, #15]
 8041b16:	6879      	ldr	r1, [r7, #4]
 8041b18:	4613      	mov	r3, r2
 8041b1a:	00db      	lsls	r3, r3, #3
 8041b1c:	4413      	add	r3, r2
 8041b1e:	009b      	lsls	r3, r3, #2
 8041b20:	440b      	add	r3, r1
 8041b22:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8041b26:	2200      	movs	r2, #0
 8041b28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041b2a:	7bfb      	ldrb	r3, [r7, #15]
 8041b2c:	3301      	adds	r3, #1
 8041b2e:	73fb      	strb	r3, [r7, #15]
 8041b30:	687b      	ldr	r3, [r7, #4]
 8041b32:	791b      	ldrb	r3, [r3, #4]
 8041b34:	7bfa      	ldrb	r2, [r7, #15]
 8041b36:	429a      	cmp	r2, r3
 8041b38:	d3b5      	bcc.n	8041aa6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8041b3a:	687b      	ldr	r3, [r7, #4]
 8041b3c:	6818      	ldr	r0, [r3, #0]
 8041b3e:	687b      	ldr	r3, [r7, #4]
 8041b40:	7c1a      	ldrb	r2, [r3, #16]
 8041b42:	f88d 2000 	strb.w	r2, [sp]
 8041b46:	3304      	adds	r3, #4
 8041b48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8041b4a:	f005 fb13 	bl	8047174 <USB_DevInit>
 8041b4e:	4603      	mov	r3, r0
 8041b50:	2b00      	cmp	r3, #0
 8041b52:	d005      	beq.n	8041b60 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8041b54:	687b      	ldr	r3, [r7, #4]
 8041b56:	2202      	movs	r2, #2
 8041b58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8041b5c:	2301      	movs	r3, #1
 8041b5e:	e013      	b.n	8041b88 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8041b60:	687b      	ldr	r3, [r7, #4]
 8041b62:	2200      	movs	r2, #0
 8041b64:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8041b66:	687b      	ldr	r3, [r7, #4]
 8041b68:	2201      	movs	r2, #1
 8041b6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8041b6e:	687b      	ldr	r3, [r7, #4]
 8041b70:	7b1b      	ldrb	r3, [r3, #12]
 8041b72:	2b01      	cmp	r3, #1
 8041b74:	d102      	bne.n	8041b7c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8041b76:	6878      	ldr	r0, [r7, #4]
 8041b78:	f001 f948 	bl	8042e0c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8041b7c:	687b      	ldr	r3, [r7, #4]
 8041b7e:	681b      	ldr	r3, [r3, #0]
 8041b80:	4618      	mov	r0, r3
 8041b82:	f006 fa7a 	bl	804807a <USB_DevDisconnect>

  return HAL_OK;
 8041b86:	2300      	movs	r3, #0
}
 8041b88:	4618      	mov	r0, r3
 8041b8a:	3710      	adds	r7, #16
 8041b8c:	46bd      	mov	sp, r7
 8041b8e:	bd80      	pop	{r7, pc}

08041b90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8041b90:	b580      	push	{r7, lr}
 8041b92:	b084      	sub	sp, #16
 8041b94:	af00      	add	r7, sp, #0
 8041b96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8041b98:	687b      	ldr	r3, [r7, #4]
 8041b9a:	681b      	ldr	r3, [r3, #0]
 8041b9c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8041b9e:	687b      	ldr	r3, [r7, #4]
 8041ba0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8041ba4:	2b01      	cmp	r3, #1
 8041ba6:	d101      	bne.n	8041bac <HAL_PCD_Start+0x1c>
 8041ba8:	2302      	movs	r3, #2
 8041baa:	e022      	b.n	8041bf2 <HAL_PCD_Start+0x62>
 8041bac:	687b      	ldr	r3, [r7, #4]
 8041bae:	2201      	movs	r2, #1
 8041bb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8041bb4:	68fb      	ldr	r3, [r7, #12]
 8041bb6:	68db      	ldr	r3, [r3, #12]
 8041bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8041bbc:	2b00      	cmp	r3, #0
 8041bbe:	d009      	beq.n	8041bd4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8041bc0:	687b      	ldr	r3, [r7, #4]
 8041bc2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8041bc4:	2b01      	cmp	r3, #1
 8041bc6:	d105      	bne.n	8041bd4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8041bc8:	68fb      	ldr	r3, [r7, #12]
 8041bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8041bcc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8041bd0:	68fb      	ldr	r3, [r7, #12]
 8041bd2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8041bd4:	687b      	ldr	r3, [r7, #4]
 8041bd6:	681b      	ldr	r3, [r3, #0]
 8041bd8:	4618      	mov	r0, r3
 8041bda:	f005 fa5d 	bl	8047098 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8041bde:	687b      	ldr	r3, [r7, #4]
 8041be0:	681b      	ldr	r3, [r3, #0]
 8041be2:	4618      	mov	r0, r3
 8041be4:	f006 fa28 	bl	8048038 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8041be8:	687b      	ldr	r3, [r7, #4]
 8041bea:	2200      	movs	r2, #0
 8041bec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8041bf0:	2300      	movs	r3, #0
}
 8041bf2:	4618      	mov	r0, r3
 8041bf4:	3710      	adds	r7, #16
 8041bf6:	46bd      	mov	sp, r7
 8041bf8:	bd80      	pop	{r7, pc}

08041bfa <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8041bfa:	b580      	push	{r7, lr}
 8041bfc:	b084      	sub	sp, #16
 8041bfe:	af00      	add	r7, sp, #0
 8041c00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8041c02:	687b      	ldr	r3, [r7, #4]
 8041c04:	681b      	ldr	r3, [r3, #0]
 8041c06:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8041c08:	687b      	ldr	r3, [r7, #4]
 8041c0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8041c0e:	2b01      	cmp	r3, #1
 8041c10:	d101      	bne.n	8041c16 <HAL_PCD_Stop+0x1c>
 8041c12:	2302      	movs	r3, #2
 8041c14:	e028      	b.n	8041c68 <HAL_PCD_Stop+0x6e>
 8041c16:	687b      	ldr	r3, [r7, #4]
 8041c18:	2201      	movs	r2, #1
 8041c1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 8041c1e:	687b      	ldr	r3, [r7, #4]
 8041c20:	681b      	ldr	r3, [r3, #0]
 8041c22:	4618      	mov	r0, r3
 8041c24:	f005 fa49 	bl	80470ba <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8041c28:	687b      	ldr	r3, [r7, #4]
 8041c2a:	681b      	ldr	r3, [r3, #0]
 8041c2c:	4618      	mov	r0, r3
 8041c2e:	f006 fa24 	bl	804807a <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8041c32:	687b      	ldr	r3, [r7, #4]
 8041c34:	681b      	ldr	r3, [r3, #0]
 8041c36:	2110      	movs	r1, #16
 8041c38:	4618      	mov	r0, r3
 8041c3a:	f005 fbf9 	bl	8047430 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8041c3e:	68fb      	ldr	r3, [r7, #12]
 8041c40:	68db      	ldr	r3, [r3, #12]
 8041c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8041c46:	2b00      	cmp	r3, #0
 8041c48:	d009      	beq.n	8041c5e <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 8041c4a:	687b      	ldr	r3, [r7, #4]
 8041c4c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8041c4e:	2b01      	cmp	r3, #1
 8041c50:	d105      	bne.n	8041c5e <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8041c52:	68fb      	ldr	r3, [r7, #12]
 8041c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8041c56:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8041c5a:	68fb      	ldr	r3, [r7, #12]
 8041c5c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 8041c5e:	687b      	ldr	r3, [r7, #4]
 8041c60:	2200      	movs	r2, #0
 8041c62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8041c66:	2300      	movs	r3, #0
}
 8041c68:	4618      	mov	r0, r3
 8041c6a:	3710      	adds	r7, #16
 8041c6c:	46bd      	mov	sp, r7
 8041c6e:	bd80      	pop	{r7, pc}

08041c70 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8041c70:	b590      	push	{r4, r7, lr}
 8041c72:	b08d      	sub	sp, #52	@ 0x34
 8041c74:	af00      	add	r7, sp, #0
 8041c76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8041c78:	687b      	ldr	r3, [r7, #4]
 8041c7a:	681b      	ldr	r3, [r3, #0]
 8041c7c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8041c7e:	6a3b      	ldr	r3, [r7, #32]
 8041c80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8041c82:	687b      	ldr	r3, [r7, #4]
 8041c84:	681b      	ldr	r3, [r3, #0]
 8041c86:	4618      	mov	r0, r3
 8041c88:	f006 faab 	bl	80481e2 <USB_GetMode>
 8041c8c:	4603      	mov	r3, r0
 8041c8e:	2b00      	cmp	r3, #0
 8041c90:	f040 84b9 	bne.w	8042606 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8041c94:	687b      	ldr	r3, [r7, #4]
 8041c96:	681b      	ldr	r3, [r3, #0]
 8041c98:	4618      	mov	r0, r3
 8041c9a:	f006 fa0f 	bl	80480bc <USB_ReadInterrupts>
 8041c9e:	4603      	mov	r3, r0
 8041ca0:	2b00      	cmp	r3, #0
 8041ca2:	f000 84af 	beq.w	8042604 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8041ca6:	69fb      	ldr	r3, [r7, #28]
 8041ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041cac:	689b      	ldr	r3, [r3, #8]
 8041cae:	0a1b      	lsrs	r3, r3, #8
 8041cb0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8041cb4:	687b      	ldr	r3, [r7, #4]
 8041cb6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8041cba:	687b      	ldr	r3, [r7, #4]
 8041cbc:	681b      	ldr	r3, [r3, #0]
 8041cbe:	4618      	mov	r0, r3
 8041cc0:	f006 f9fc 	bl	80480bc <USB_ReadInterrupts>
 8041cc4:	4603      	mov	r3, r0
 8041cc6:	f003 0302 	and.w	r3, r3, #2
 8041cca:	2b02      	cmp	r3, #2
 8041ccc:	d107      	bne.n	8041cde <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8041cce:	687b      	ldr	r3, [r7, #4]
 8041cd0:	681b      	ldr	r3, [r3, #0]
 8041cd2:	695a      	ldr	r2, [r3, #20]
 8041cd4:	687b      	ldr	r3, [r7, #4]
 8041cd6:	681b      	ldr	r3, [r3, #0]
 8041cd8:	f002 0202 	and.w	r2, r2, #2
 8041cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8041cde:	687b      	ldr	r3, [r7, #4]
 8041ce0:	681b      	ldr	r3, [r3, #0]
 8041ce2:	4618      	mov	r0, r3
 8041ce4:	f006 f9ea 	bl	80480bc <USB_ReadInterrupts>
 8041ce8:	4603      	mov	r3, r0
 8041cea:	f003 0310 	and.w	r3, r3, #16
 8041cee:	2b10      	cmp	r3, #16
 8041cf0:	d161      	bne.n	8041db6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8041cf2:	687b      	ldr	r3, [r7, #4]
 8041cf4:	681b      	ldr	r3, [r3, #0]
 8041cf6:	699a      	ldr	r2, [r3, #24]
 8041cf8:	687b      	ldr	r3, [r7, #4]
 8041cfa:	681b      	ldr	r3, [r3, #0]
 8041cfc:	f022 0210 	bic.w	r2, r2, #16
 8041d00:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8041d02:	6a3b      	ldr	r3, [r7, #32]
 8041d04:	6a1b      	ldr	r3, [r3, #32]
 8041d06:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8041d08:	69bb      	ldr	r3, [r7, #24]
 8041d0a:	f003 020f 	and.w	r2, r3, #15
 8041d0e:	4613      	mov	r3, r2
 8041d10:	00db      	lsls	r3, r3, #3
 8041d12:	4413      	add	r3, r2
 8041d14:	009b      	lsls	r3, r3, #2
 8041d16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8041d1a:	687a      	ldr	r2, [r7, #4]
 8041d1c:	4413      	add	r3, r2
 8041d1e:	3304      	adds	r3, #4
 8041d20:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8041d22:	69bb      	ldr	r3, [r7, #24]
 8041d24:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8041d28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8041d2c:	d124      	bne.n	8041d78 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8041d2e:	69ba      	ldr	r2, [r7, #24]
 8041d30:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8041d34:	4013      	ands	r3, r2
 8041d36:	2b00      	cmp	r3, #0
 8041d38:	d035      	beq.n	8041da6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8041d3a:	697b      	ldr	r3, [r7, #20]
 8041d3c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8041d3e:	69bb      	ldr	r3, [r7, #24]
 8041d40:	091b      	lsrs	r3, r3, #4
 8041d42:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8041d44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041d48:	b29b      	uxth	r3, r3
 8041d4a:	461a      	mov	r2, r3
 8041d4c:	6a38      	ldr	r0, [r7, #32]
 8041d4e:	f006 f821 	bl	8047d94 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8041d52:	697b      	ldr	r3, [r7, #20]
 8041d54:	68da      	ldr	r2, [r3, #12]
 8041d56:	69bb      	ldr	r3, [r7, #24]
 8041d58:	091b      	lsrs	r3, r3, #4
 8041d5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041d5e:	441a      	add	r2, r3
 8041d60:	697b      	ldr	r3, [r7, #20]
 8041d62:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8041d64:	697b      	ldr	r3, [r7, #20]
 8041d66:	695a      	ldr	r2, [r3, #20]
 8041d68:	69bb      	ldr	r3, [r7, #24]
 8041d6a:	091b      	lsrs	r3, r3, #4
 8041d6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041d70:	441a      	add	r2, r3
 8041d72:	697b      	ldr	r3, [r7, #20]
 8041d74:	615a      	str	r2, [r3, #20]
 8041d76:	e016      	b.n	8041da6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8041d78:	69bb      	ldr	r3, [r7, #24]
 8041d7a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8041d7e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8041d82:	d110      	bne.n	8041da6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8041d84:	687b      	ldr	r3, [r7, #4]
 8041d86:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8041d8a:	2208      	movs	r2, #8
 8041d8c:	4619      	mov	r1, r3
 8041d8e:	6a38      	ldr	r0, [r7, #32]
 8041d90:	f006 f800 	bl	8047d94 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8041d94:	697b      	ldr	r3, [r7, #20]
 8041d96:	695a      	ldr	r2, [r3, #20]
 8041d98:	69bb      	ldr	r3, [r7, #24]
 8041d9a:	091b      	lsrs	r3, r3, #4
 8041d9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041da0:	441a      	add	r2, r3
 8041da2:	697b      	ldr	r3, [r7, #20]
 8041da4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8041da6:	687b      	ldr	r3, [r7, #4]
 8041da8:	681b      	ldr	r3, [r3, #0]
 8041daa:	699a      	ldr	r2, [r3, #24]
 8041dac:	687b      	ldr	r3, [r7, #4]
 8041dae:	681b      	ldr	r3, [r3, #0]
 8041db0:	f042 0210 	orr.w	r2, r2, #16
 8041db4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8041db6:	687b      	ldr	r3, [r7, #4]
 8041db8:	681b      	ldr	r3, [r3, #0]
 8041dba:	4618      	mov	r0, r3
 8041dbc:	f006 f97e 	bl	80480bc <USB_ReadInterrupts>
 8041dc0:	4603      	mov	r3, r0
 8041dc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8041dc6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8041dca:	f040 80a7 	bne.w	8041f1c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8041dce:	2300      	movs	r3, #0
 8041dd0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8041dd2:	687b      	ldr	r3, [r7, #4]
 8041dd4:	681b      	ldr	r3, [r3, #0]
 8041dd6:	4618      	mov	r0, r3
 8041dd8:	f006 f983 	bl	80480e2 <USB_ReadDevAllOutEpInterrupt>
 8041ddc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8041dde:	e099      	b.n	8041f14 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8041de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041de2:	f003 0301 	and.w	r3, r3, #1
 8041de6:	2b00      	cmp	r3, #0
 8041de8:	f000 808e 	beq.w	8041f08 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8041dec:	687b      	ldr	r3, [r7, #4]
 8041dee:	681b      	ldr	r3, [r3, #0]
 8041df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041df2:	b2d2      	uxtb	r2, r2
 8041df4:	4611      	mov	r1, r2
 8041df6:	4618      	mov	r0, r3
 8041df8:	f006 f9a7 	bl	804814a <USB_ReadDevOutEPInterrupt>
 8041dfc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8041dfe:	693b      	ldr	r3, [r7, #16]
 8041e00:	f003 0301 	and.w	r3, r3, #1
 8041e04:	2b00      	cmp	r3, #0
 8041e06:	d00c      	beq.n	8041e22 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8041e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041e0a:	015a      	lsls	r2, r3, #5
 8041e0c:	69fb      	ldr	r3, [r7, #28]
 8041e0e:	4413      	add	r3, r2
 8041e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041e14:	461a      	mov	r2, r3
 8041e16:	2301      	movs	r3, #1
 8041e18:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8041e1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8041e1c:	6878      	ldr	r0, [r7, #4]
 8041e1e:	f000 fe6f 	bl	8042b00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8041e22:	693b      	ldr	r3, [r7, #16]
 8041e24:	f003 0308 	and.w	r3, r3, #8
 8041e28:	2b00      	cmp	r3, #0
 8041e2a:	d00c      	beq.n	8041e46 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8041e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041e2e:	015a      	lsls	r2, r3, #5
 8041e30:	69fb      	ldr	r3, [r7, #28]
 8041e32:	4413      	add	r3, r2
 8041e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041e38:	461a      	mov	r2, r3
 8041e3a:	2308      	movs	r3, #8
 8041e3c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8041e3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8041e40:	6878      	ldr	r0, [r7, #4]
 8041e42:	f000 ff45 	bl	8042cd0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8041e46:	693b      	ldr	r3, [r7, #16]
 8041e48:	f003 0310 	and.w	r3, r3, #16
 8041e4c:	2b00      	cmp	r3, #0
 8041e4e:	d008      	beq.n	8041e62 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8041e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041e52:	015a      	lsls	r2, r3, #5
 8041e54:	69fb      	ldr	r3, [r7, #28]
 8041e56:	4413      	add	r3, r2
 8041e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041e5c:	461a      	mov	r2, r3
 8041e5e:	2310      	movs	r3, #16
 8041e60:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8041e62:	693b      	ldr	r3, [r7, #16]
 8041e64:	f003 0302 	and.w	r3, r3, #2
 8041e68:	2b00      	cmp	r3, #0
 8041e6a:	d030      	beq.n	8041ece <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8041e6c:	6a3b      	ldr	r3, [r7, #32]
 8041e6e:	695b      	ldr	r3, [r3, #20]
 8041e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8041e74:	2b80      	cmp	r3, #128	@ 0x80
 8041e76:	d109      	bne.n	8041e8c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8041e78:	69fb      	ldr	r3, [r7, #28]
 8041e7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041e7e:	685b      	ldr	r3, [r3, #4]
 8041e80:	69fa      	ldr	r2, [r7, #28]
 8041e82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8041e86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8041e8a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8041e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041e8e:	4613      	mov	r3, r2
 8041e90:	00db      	lsls	r3, r3, #3
 8041e92:	4413      	add	r3, r2
 8041e94:	009b      	lsls	r3, r3, #2
 8041e96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8041e9a:	687a      	ldr	r2, [r7, #4]
 8041e9c:	4413      	add	r3, r2
 8041e9e:	3304      	adds	r3, #4
 8041ea0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8041ea2:	697b      	ldr	r3, [r7, #20]
 8041ea4:	78db      	ldrb	r3, [r3, #3]
 8041ea6:	2b01      	cmp	r3, #1
 8041ea8:	d108      	bne.n	8041ebc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8041eaa:	697b      	ldr	r3, [r7, #20]
 8041eac:	2200      	movs	r2, #0
 8041eae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8041eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041eb2:	b2db      	uxtb	r3, r3
 8041eb4:	4619      	mov	r1, r3
 8041eb6:	6878      	ldr	r0, [r7, #4]
 8041eb8:	f009 f862 	bl	804af80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8041ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041ebe:	015a      	lsls	r2, r3, #5
 8041ec0:	69fb      	ldr	r3, [r7, #28]
 8041ec2:	4413      	add	r3, r2
 8041ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041ec8:	461a      	mov	r2, r3
 8041eca:	2302      	movs	r3, #2
 8041ecc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8041ece:	693b      	ldr	r3, [r7, #16]
 8041ed0:	f003 0320 	and.w	r3, r3, #32
 8041ed4:	2b00      	cmp	r3, #0
 8041ed6:	d008      	beq.n	8041eea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8041ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041eda:	015a      	lsls	r2, r3, #5
 8041edc:	69fb      	ldr	r3, [r7, #28]
 8041ede:	4413      	add	r3, r2
 8041ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041ee4:	461a      	mov	r2, r3
 8041ee6:	2320      	movs	r3, #32
 8041ee8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8041eea:	693b      	ldr	r3, [r7, #16]
 8041eec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8041ef0:	2b00      	cmp	r3, #0
 8041ef2:	d009      	beq.n	8041f08 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8041ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041ef6:	015a      	lsls	r2, r3, #5
 8041ef8:	69fb      	ldr	r3, [r7, #28]
 8041efa:	4413      	add	r3, r2
 8041efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041f00:	461a      	mov	r2, r3
 8041f02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8041f06:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8041f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041f0a:	3301      	adds	r3, #1
 8041f0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8041f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041f10:	085b      	lsrs	r3, r3, #1
 8041f12:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8041f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041f16:	2b00      	cmp	r3, #0
 8041f18:	f47f af62 	bne.w	8041de0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8041f1c:	687b      	ldr	r3, [r7, #4]
 8041f1e:	681b      	ldr	r3, [r3, #0]
 8041f20:	4618      	mov	r0, r3
 8041f22:	f006 f8cb 	bl	80480bc <USB_ReadInterrupts>
 8041f26:	4603      	mov	r3, r0
 8041f28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8041f2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8041f30:	f040 80db 	bne.w	80420ea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8041f34:	687b      	ldr	r3, [r7, #4]
 8041f36:	681b      	ldr	r3, [r3, #0]
 8041f38:	4618      	mov	r0, r3
 8041f3a:	f006 f8ec 	bl	8048116 <USB_ReadDevAllInEpInterrupt>
 8041f3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8041f40:	2300      	movs	r3, #0
 8041f42:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8041f44:	e0cd      	b.n	80420e2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8041f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041f48:	f003 0301 	and.w	r3, r3, #1
 8041f4c:	2b00      	cmp	r3, #0
 8041f4e:	f000 80c2 	beq.w	80420d6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8041f52:	687b      	ldr	r3, [r7, #4]
 8041f54:	681b      	ldr	r3, [r3, #0]
 8041f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041f58:	b2d2      	uxtb	r2, r2
 8041f5a:	4611      	mov	r1, r2
 8041f5c:	4618      	mov	r0, r3
 8041f5e:	f006 f912 	bl	8048186 <USB_ReadDevInEPInterrupt>
 8041f62:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8041f64:	693b      	ldr	r3, [r7, #16]
 8041f66:	f003 0301 	and.w	r3, r3, #1
 8041f6a:	2b00      	cmp	r3, #0
 8041f6c:	d057      	beq.n	804201e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8041f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041f70:	f003 030f 	and.w	r3, r3, #15
 8041f74:	2201      	movs	r2, #1
 8041f76:	fa02 f303 	lsl.w	r3, r2, r3
 8041f7a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8041f7c:	69fb      	ldr	r3, [r7, #28]
 8041f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041f82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8041f84:	68fb      	ldr	r3, [r7, #12]
 8041f86:	43db      	mvns	r3, r3
 8041f88:	69f9      	ldr	r1, [r7, #28]
 8041f8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8041f8e:	4013      	ands	r3, r2
 8041f90:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8041f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041f94:	015a      	lsls	r2, r3, #5
 8041f96:	69fb      	ldr	r3, [r7, #28]
 8041f98:	4413      	add	r3, r2
 8041f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8041f9e:	461a      	mov	r2, r3
 8041fa0:	2301      	movs	r3, #1
 8041fa2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8041fa4:	687b      	ldr	r3, [r7, #4]
 8041fa6:	799b      	ldrb	r3, [r3, #6]
 8041fa8:	2b01      	cmp	r3, #1
 8041faa:	d132      	bne.n	8042012 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8041fac:	6879      	ldr	r1, [r7, #4]
 8041fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041fb0:	4613      	mov	r3, r2
 8041fb2:	00db      	lsls	r3, r3, #3
 8041fb4:	4413      	add	r3, r2
 8041fb6:	009b      	lsls	r3, r3, #2
 8041fb8:	440b      	add	r3, r1
 8041fba:	3320      	adds	r3, #32
 8041fbc:	6819      	ldr	r1, [r3, #0]
 8041fbe:	6878      	ldr	r0, [r7, #4]
 8041fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041fc2:	4613      	mov	r3, r2
 8041fc4:	00db      	lsls	r3, r3, #3
 8041fc6:	4413      	add	r3, r2
 8041fc8:	009b      	lsls	r3, r3, #2
 8041fca:	4403      	add	r3, r0
 8041fcc:	331c      	adds	r3, #28
 8041fce:	681b      	ldr	r3, [r3, #0]
 8041fd0:	4419      	add	r1, r3
 8041fd2:	6878      	ldr	r0, [r7, #4]
 8041fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041fd6:	4613      	mov	r3, r2
 8041fd8:	00db      	lsls	r3, r3, #3
 8041fda:	4413      	add	r3, r2
 8041fdc:	009b      	lsls	r3, r3, #2
 8041fde:	4403      	add	r3, r0
 8041fe0:	3320      	adds	r3, #32
 8041fe2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8041fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041fe6:	2b00      	cmp	r3, #0
 8041fe8:	d113      	bne.n	8042012 <HAL_PCD_IRQHandler+0x3a2>
 8041fea:	6879      	ldr	r1, [r7, #4]
 8041fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041fee:	4613      	mov	r3, r2
 8041ff0:	00db      	lsls	r3, r3, #3
 8041ff2:	4413      	add	r3, r2
 8041ff4:	009b      	lsls	r3, r3, #2
 8041ff6:	440b      	add	r3, r1
 8041ff8:	3324      	adds	r3, #36	@ 0x24
 8041ffa:	681b      	ldr	r3, [r3, #0]
 8041ffc:	2b00      	cmp	r3, #0
 8041ffe:	d108      	bne.n	8042012 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8042000:	687b      	ldr	r3, [r7, #4]
 8042002:	6818      	ldr	r0, [r3, #0]
 8042004:	687b      	ldr	r3, [r7, #4]
 8042006:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 804200a:	461a      	mov	r2, r3
 804200c:	2101      	movs	r1, #1
 804200e:	f006 f91b 	bl	8048248 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8042012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042014:	b2db      	uxtb	r3, r3
 8042016:	4619      	mov	r1, r3
 8042018:	6878      	ldr	r0, [r7, #4]
 804201a:	f008 ff2c 	bl	804ae76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 804201e:	693b      	ldr	r3, [r7, #16]
 8042020:	f003 0308 	and.w	r3, r3, #8
 8042024:	2b00      	cmp	r3, #0
 8042026:	d008      	beq.n	804203a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8042028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804202a:	015a      	lsls	r2, r3, #5
 804202c:	69fb      	ldr	r3, [r7, #28]
 804202e:	4413      	add	r3, r2
 8042030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8042034:	461a      	mov	r2, r3
 8042036:	2308      	movs	r3, #8
 8042038:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 804203a:	693b      	ldr	r3, [r7, #16]
 804203c:	f003 0310 	and.w	r3, r3, #16
 8042040:	2b00      	cmp	r3, #0
 8042042:	d008      	beq.n	8042056 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8042044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042046:	015a      	lsls	r2, r3, #5
 8042048:	69fb      	ldr	r3, [r7, #28]
 804204a:	4413      	add	r3, r2
 804204c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8042050:	461a      	mov	r2, r3
 8042052:	2310      	movs	r3, #16
 8042054:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8042056:	693b      	ldr	r3, [r7, #16]
 8042058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 804205c:	2b00      	cmp	r3, #0
 804205e:	d008      	beq.n	8042072 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8042060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042062:	015a      	lsls	r2, r3, #5
 8042064:	69fb      	ldr	r3, [r7, #28]
 8042066:	4413      	add	r3, r2
 8042068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804206c:	461a      	mov	r2, r3
 804206e:	2340      	movs	r3, #64	@ 0x40
 8042070:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8042072:	693b      	ldr	r3, [r7, #16]
 8042074:	f003 0302 	and.w	r3, r3, #2
 8042078:	2b00      	cmp	r3, #0
 804207a:	d023      	beq.n	80420c4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 804207c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 804207e:	6a38      	ldr	r0, [r7, #32]
 8042080:	f005 f9d6 	bl	8047430 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8042084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042086:	4613      	mov	r3, r2
 8042088:	00db      	lsls	r3, r3, #3
 804208a:	4413      	add	r3, r2
 804208c:	009b      	lsls	r3, r3, #2
 804208e:	3310      	adds	r3, #16
 8042090:	687a      	ldr	r2, [r7, #4]
 8042092:	4413      	add	r3, r2
 8042094:	3304      	adds	r3, #4
 8042096:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8042098:	697b      	ldr	r3, [r7, #20]
 804209a:	78db      	ldrb	r3, [r3, #3]
 804209c:	2b01      	cmp	r3, #1
 804209e:	d108      	bne.n	80420b2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80420a0:	697b      	ldr	r3, [r7, #20]
 80420a2:	2200      	movs	r2, #0
 80420a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80420a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80420a8:	b2db      	uxtb	r3, r3
 80420aa:	4619      	mov	r1, r3
 80420ac:	6878      	ldr	r0, [r7, #4]
 80420ae:	f008 ff79 	bl	804afa4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80420b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80420b4:	015a      	lsls	r2, r3, #5
 80420b6:	69fb      	ldr	r3, [r7, #28]
 80420b8:	4413      	add	r3, r2
 80420ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80420be:	461a      	mov	r2, r3
 80420c0:	2302      	movs	r3, #2
 80420c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80420c4:	693b      	ldr	r3, [r7, #16]
 80420c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80420ca:	2b00      	cmp	r3, #0
 80420cc:	d003      	beq.n	80420d6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80420ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80420d0:	6878      	ldr	r0, [r7, #4]
 80420d2:	f000 fc88 	bl	80429e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80420d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80420d8:	3301      	adds	r3, #1
 80420da:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80420dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80420de:	085b      	lsrs	r3, r3, #1
 80420e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80420e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80420e4:	2b00      	cmp	r3, #0
 80420e6:	f47f af2e 	bne.w	8041f46 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80420ea:	687b      	ldr	r3, [r7, #4]
 80420ec:	681b      	ldr	r3, [r3, #0]
 80420ee:	4618      	mov	r0, r3
 80420f0:	f005 ffe4 	bl	80480bc <USB_ReadInterrupts>
 80420f4:	4603      	mov	r3, r0
 80420f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80420fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80420fe:	d122      	bne.n	8042146 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8042100:	69fb      	ldr	r3, [r7, #28]
 8042102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042106:	685b      	ldr	r3, [r3, #4]
 8042108:	69fa      	ldr	r2, [r7, #28]
 804210a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804210e:	f023 0301 	bic.w	r3, r3, #1
 8042112:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8042114:	687b      	ldr	r3, [r7, #4]
 8042116:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 804211a:	2b01      	cmp	r3, #1
 804211c:	d108      	bne.n	8042130 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 804211e:	687b      	ldr	r3, [r7, #4]
 8042120:	2200      	movs	r2, #0
 8042122:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8042126:	2100      	movs	r1, #0
 8042128:	6878      	ldr	r0, [r7, #4]
 804212a:	f000 fe93 	bl	8042e54 <HAL_PCDEx_LPM_Callback>
 804212e:	e002      	b.n	8042136 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8042130:	6878      	ldr	r0, [r7, #4]
 8042132:	f008 ff17 	bl	804af64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8042136:	687b      	ldr	r3, [r7, #4]
 8042138:	681b      	ldr	r3, [r3, #0]
 804213a:	695a      	ldr	r2, [r3, #20]
 804213c:	687b      	ldr	r3, [r7, #4]
 804213e:	681b      	ldr	r3, [r3, #0]
 8042140:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8042144:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8042146:	687b      	ldr	r3, [r7, #4]
 8042148:	681b      	ldr	r3, [r3, #0]
 804214a:	4618      	mov	r0, r3
 804214c:	f005 ffb6 	bl	80480bc <USB_ReadInterrupts>
 8042150:	4603      	mov	r3, r0
 8042152:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8042156:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 804215a:	d112      	bne.n	8042182 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 804215c:	69fb      	ldr	r3, [r7, #28]
 804215e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042162:	689b      	ldr	r3, [r3, #8]
 8042164:	f003 0301 	and.w	r3, r3, #1
 8042168:	2b01      	cmp	r3, #1
 804216a:	d102      	bne.n	8042172 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 804216c:	6878      	ldr	r0, [r7, #4]
 804216e:	f008 fed3 	bl	804af18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8042172:	687b      	ldr	r3, [r7, #4]
 8042174:	681b      	ldr	r3, [r3, #0]
 8042176:	695a      	ldr	r2, [r3, #20]
 8042178:	687b      	ldr	r3, [r7, #4]
 804217a:	681b      	ldr	r3, [r3, #0]
 804217c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8042180:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8042182:	687b      	ldr	r3, [r7, #4]
 8042184:	681b      	ldr	r3, [r3, #0]
 8042186:	4618      	mov	r0, r3
 8042188:	f005 ff98 	bl	80480bc <USB_ReadInterrupts>
 804218c:	4603      	mov	r3, r0
 804218e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8042192:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8042196:	d121      	bne.n	80421dc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8042198:	687b      	ldr	r3, [r7, #4]
 804219a:	681b      	ldr	r3, [r3, #0]
 804219c:	695a      	ldr	r2, [r3, #20]
 804219e:	687b      	ldr	r3, [r7, #4]
 80421a0:	681b      	ldr	r3, [r3, #0]
 80421a2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80421a6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80421a8:	687b      	ldr	r3, [r7, #4]
 80421aa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80421ae:	2b00      	cmp	r3, #0
 80421b0:	d111      	bne.n	80421d6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80421b2:	687b      	ldr	r3, [r7, #4]
 80421b4:	2201      	movs	r2, #1
 80421b6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80421ba:	687b      	ldr	r3, [r7, #4]
 80421bc:	681b      	ldr	r3, [r3, #0]
 80421be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80421c0:	089b      	lsrs	r3, r3, #2
 80421c2:	f003 020f 	and.w	r2, r3, #15
 80421c6:	687b      	ldr	r3, [r7, #4]
 80421c8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80421cc:	2101      	movs	r1, #1
 80421ce:	6878      	ldr	r0, [r7, #4]
 80421d0:	f000 fe40 	bl	8042e54 <HAL_PCDEx_LPM_Callback>
 80421d4:	e002      	b.n	80421dc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80421d6:	6878      	ldr	r0, [r7, #4]
 80421d8:	f008 fe9e 	bl	804af18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80421dc:	687b      	ldr	r3, [r7, #4]
 80421de:	681b      	ldr	r3, [r3, #0]
 80421e0:	4618      	mov	r0, r3
 80421e2:	f005 ff6b 	bl	80480bc <USB_ReadInterrupts>
 80421e6:	4603      	mov	r3, r0
 80421e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80421ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80421f0:	f040 80b7 	bne.w	8042362 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80421f4:	69fb      	ldr	r3, [r7, #28]
 80421f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80421fa:	685b      	ldr	r3, [r3, #4]
 80421fc:	69fa      	ldr	r2, [r7, #28]
 80421fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8042202:	f023 0301 	bic.w	r3, r3, #1
 8042206:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8042208:	687b      	ldr	r3, [r7, #4]
 804220a:	681b      	ldr	r3, [r3, #0]
 804220c:	2110      	movs	r1, #16
 804220e:	4618      	mov	r0, r3
 8042210:	f005 f90e 	bl	8047430 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8042214:	2300      	movs	r3, #0
 8042216:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8042218:	e046      	b.n	80422a8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 804221a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804221c:	015a      	lsls	r2, r3, #5
 804221e:	69fb      	ldr	r3, [r7, #28]
 8042220:	4413      	add	r3, r2
 8042222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8042226:	461a      	mov	r2, r3
 8042228:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 804222c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 804222e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8042230:	015a      	lsls	r2, r3, #5
 8042232:	69fb      	ldr	r3, [r7, #28]
 8042234:	4413      	add	r3, r2
 8042236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804223a:	681b      	ldr	r3, [r3, #0]
 804223c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 804223e:	0151      	lsls	r1, r2, #5
 8042240:	69fa      	ldr	r2, [r7, #28]
 8042242:	440a      	add	r2, r1
 8042244:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8042248:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 804224c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 804224e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8042250:	015a      	lsls	r2, r3, #5
 8042252:	69fb      	ldr	r3, [r7, #28]
 8042254:	4413      	add	r3, r2
 8042256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804225a:	461a      	mov	r2, r3
 804225c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8042260:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8042262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8042264:	015a      	lsls	r2, r3, #5
 8042266:	69fb      	ldr	r3, [r7, #28]
 8042268:	4413      	add	r3, r2
 804226a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804226e:	681b      	ldr	r3, [r3, #0]
 8042270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8042272:	0151      	lsls	r1, r2, #5
 8042274:	69fa      	ldr	r2, [r7, #28]
 8042276:	440a      	add	r2, r1
 8042278:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 804227c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8042280:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8042282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8042284:	015a      	lsls	r2, r3, #5
 8042286:	69fb      	ldr	r3, [r7, #28]
 8042288:	4413      	add	r3, r2
 804228a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804228e:	681b      	ldr	r3, [r3, #0]
 8042290:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8042292:	0151      	lsls	r1, r2, #5
 8042294:	69fa      	ldr	r2, [r7, #28]
 8042296:	440a      	add	r2, r1
 8042298:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 804229c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80422a0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80422a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80422a4:	3301      	adds	r3, #1
 80422a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80422a8:	687b      	ldr	r3, [r7, #4]
 80422aa:	791b      	ldrb	r3, [r3, #4]
 80422ac:	461a      	mov	r2, r3
 80422ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80422b0:	4293      	cmp	r3, r2
 80422b2:	d3b2      	bcc.n	804221a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80422b4:	69fb      	ldr	r3, [r7, #28]
 80422b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80422ba:	69db      	ldr	r3, [r3, #28]
 80422bc:	69fa      	ldr	r2, [r7, #28]
 80422be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80422c2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80422c6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80422c8:	687b      	ldr	r3, [r7, #4]
 80422ca:	7bdb      	ldrb	r3, [r3, #15]
 80422cc:	2b00      	cmp	r3, #0
 80422ce:	d016      	beq.n	80422fe <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80422d0:	69fb      	ldr	r3, [r7, #28]
 80422d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80422d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80422da:	69fa      	ldr	r2, [r7, #28]
 80422dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80422e0:	f043 030b 	orr.w	r3, r3, #11
 80422e4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80422e8:	69fb      	ldr	r3, [r7, #28]
 80422ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80422ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80422f0:	69fa      	ldr	r2, [r7, #28]
 80422f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80422f6:	f043 030b 	orr.w	r3, r3, #11
 80422fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80422fc:	e015      	b.n	804232a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80422fe:	69fb      	ldr	r3, [r7, #28]
 8042300:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042304:	695a      	ldr	r2, [r3, #20]
 8042306:	69fb      	ldr	r3, [r7, #28]
 8042308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804230c:	4619      	mov	r1, r3
 804230e:	f242 032b 	movw	r3, #8235	@ 0x202b
 8042312:	4313      	orrs	r3, r2
 8042314:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8042316:	69fb      	ldr	r3, [r7, #28]
 8042318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804231c:	691b      	ldr	r3, [r3, #16]
 804231e:	69fa      	ldr	r2, [r7, #28]
 8042320:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8042324:	f043 030b 	orr.w	r3, r3, #11
 8042328:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 804232a:	69fb      	ldr	r3, [r7, #28]
 804232c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042330:	681b      	ldr	r3, [r3, #0]
 8042332:	69fa      	ldr	r2, [r7, #28]
 8042334:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8042338:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 804233c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 804233e:	687b      	ldr	r3, [r7, #4]
 8042340:	6818      	ldr	r0, [r3, #0]
 8042342:	687b      	ldr	r3, [r7, #4]
 8042344:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8042346:	687b      	ldr	r3, [r7, #4]
 8042348:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 804234c:	461a      	mov	r2, r3
 804234e:	f005 ff7b 	bl	8048248 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8042352:	687b      	ldr	r3, [r7, #4]
 8042354:	681b      	ldr	r3, [r3, #0]
 8042356:	695a      	ldr	r2, [r3, #20]
 8042358:	687b      	ldr	r3, [r7, #4]
 804235a:	681b      	ldr	r3, [r3, #0]
 804235c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8042360:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8042362:	687b      	ldr	r3, [r7, #4]
 8042364:	681b      	ldr	r3, [r3, #0]
 8042366:	4618      	mov	r0, r3
 8042368:	f005 fea8 	bl	80480bc <USB_ReadInterrupts>
 804236c:	4603      	mov	r3, r0
 804236e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8042372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8042376:	d123      	bne.n	80423c0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8042378:	687b      	ldr	r3, [r7, #4]
 804237a:	681b      	ldr	r3, [r3, #0]
 804237c:	4618      	mov	r0, r3
 804237e:	f005 ff3f 	bl	8048200 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8042382:	687b      	ldr	r3, [r7, #4]
 8042384:	681b      	ldr	r3, [r3, #0]
 8042386:	4618      	mov	r0, r3
 8042388:	f005 f8cb 	bl	8047522 <USB_GetDevSpeed>
 804238c:	4603      	mov	r3, r0
 804238e:	461a      	mov	r2, r3
 8042390:	687b      	ldr	r3, [r7, #4]
 8042392:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8042394:	687b      	ldr	r3, [r7, #4]
 8042396:	681c      	ldr	r4, [r3, #0]
 8042398:	f001 fdc6 	bl	8043f28 <HAL_RCC_GetHCLKFreq>
 804239c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 804239e:	687b      	ldr	r3, [r7, #4]
 80423a0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80423a2:	461a      	mov	r2, r3
 80423a4:	4620      	mov	r0, r4
 80423a6:	f004 fdd5 	bl	8046f54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80423aa:	6878      	ldr	r0, [r7, #4]
 80423ac:	f008 fd8b 	bl	804aec6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80423b0:	687b      	ldr	r3, [r7, #4]
 80423b2:	681b      	ldr	r3, [r3, #0]
 80423b4:	695a      	ldr	r2, [r3, #20]
 80423b6:	687b      	ldr	r3, [r7, #4]
 80423b8:	681b      	ldr	r3, [r3, #0]
 80423ba:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80423be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80423c0:	687b      	ldr	r3, [r7, #4]
 80423c2:	681b      	ldr	r3, [r3, #0]
 80423c4:	4618      	mov	r0, r3
 80423c6:	f005 fe79 	bl	80480bc <USB_ReadInterrupts>
 80423ca:	4603      	mov	r3, r0
 80423cc:	f003 0308 	and.w	r3, r3, #8
 80423d0:	2b08      	cmp	r3, #8
 80423d2:	d10a      	bne.n	80423ea <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80423d4:	6878      	ldr	r0, [r7, #4]
 80423d6:	f008 fd68 	bl	804aeaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80423da:	687b      	ldr	r3, [r7, #4]
 80423dc:	681b      	ldr	r3, [r3, #0]
 80423de:	695a      	ldr	r2, [r3, #20]
 80423e0:	687b      	ldr	r3, [r7, #4]
 80423e2:	681b      	ldr	r3, [r3, #0]
 80423e4:	f002 0208 	and.w	r2, r2, #8
 80423e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80423ea:	687b      	ldr	r3, [r7, #4]
 80423ec:	681b      	ldr	r3, [r3, #0]
 80423ee:	4618      	mov	r0, r3
 80423f0:	f005 fe64 	bl	80480bc <USB_ReadInterrupts>
 80423f4:	4603      	mov	r3, r0
 80423f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80423fa:	2b80      	cmp	r3, #128	@ 0x80
 80423fc:	d123      	bne.n	8042446 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80423fe:	6a3b      	ldr	r3, [r7, #32]
 8042400:	699b      	ldr	r3, [r3, #24]
 8042402:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8042406:	6a3b      	ldr	r3, [r7, #32]
 8042408:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 804240a:	2301      	movs	r3, #1
 804240c:	627b      	str	r3, [r7, #36]	@ 0x24
 804240e:	e014      	b.n	804243a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8042410:	6879      	ldr	r1, [r7, #4]
 8042412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042414:	4613      	mov	r3, r2
 8042416:	00db      	lsls	r3, r3, #3
 8042418:	4413      	add	r3, r2
 804241a:	009b      	lsls	r3, r3, #2
 804241c:	440b      	add	r3, r1
 804241e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8042422:	781b      	ldrb	r3, [r3, #0]
 8042424:	2b01      	cmp	r3, #1
 8042426:	d105      	bne.n	8042434 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8042428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804242a:	b2db      	uxtb	r3, r3
 804242c:	4619      	mov	r1, r3
 804242e:	6878      	ldr	r0, [r7, #4]
 8042430:	f000 faa8 	bl	8042984 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8042434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042436:	3301      	adds	r3, #1
 8042438:	627b      	str	r3, [r7, #36]	@ 0x24
 804243a:	687b      	ldr	r3, [r7, #4]
 804243c:	791b      	ldrb	r3, [r3, #4]
 804243e:	461a      	mov	r2, r3
 8042440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042442:	4293      	cmp	r3, r2
 8042444:	d3e4      	bcc.n	8042410 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8042446:	687b      	ldr	r3, [r7, #4]
 8042448:	681b      	ldr	r3, [r3, #0]
 804244a:	4618      	mov	r0, r3
 804244c:	f005 fe36 	bl	80480bc <USB_ReadInterrupts>
 8042450:	4603      	mov	r3, r0
 8042452:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8042456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 804245a:	d13c      	bne.n	80424d6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 804245c:	2301      	movs	r3, #1
 804245e:	627b      	str	r3, [r7, #36]	@ 0x24
 8042460:	e02b      	b.n	80424ba <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8042462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042464:	015a      	lsls	r2, r3, #5
 8042466:	69fb      	ldr	r3, [r7, #28]
 8042468:	4413      	add	r3, r2
 804246a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804246e:	681b      	ldr	r3, [r3, #0]
 8042470:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8042472:	6879      	ldr	r1, [r7, #4]
 8042474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042476:	4613      	mov	r3, r2
 8042478:	00db      	lsls	r3, r3, #3
 804247a:	4413      	add	r3, r2
 804247c:	009b      	lsls	r3, r3, #2
 804247e:	440b      	add	r3, r1
 8042480:	3318      	adds	r3, #24
 8042482:	781b      	ldrb	r3, [r3, #0]
 8042484:	2b01      	cmp	r3, #1
 8042486:	d115      	bne.n	80424b4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8042488:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 804248a:	2b00      	cmp	r3, #0
 804248c:	da12      	bge.n	80424b4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 804248e:	6879      	ldr	r1, [r7, #4]
 8042490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042492:	4613      	mov	r3, r2
 8042494:	00db      	lsls	r3, r3, #3
 8042496:	4413      	add	r3, r2
 8042498:	009b      	lsls	r3, r3, #2
 804249a:	440b      	add	r3, r1
 804249c:	3317      	adds	r3, #23
 804249e:	2201      	movs	r2, #1
 80424a0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80424a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80424a4:	b2db      	uxtb	r3, r3
 80424a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80424aa:	b2db      	uxtb	r3, r3
 80424ac:	4619      	mov	r1, r3
 80424ae:	6878      	ldr	r0, [r7, #4]
 80424b0:	f000 fa68 	bl	8042984 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80424b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80424b6:	3301      	adds	r3, #1
 80424b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80424ba:	687b      	ldr	r3, [r7, #4]
 80424bc:	791b      	ldrb	r3, [r3, #4]
 80424be:	461a      	mov	r2, r3
 80424c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80424c2:	4293      	cmp	r3, r2
 80424c4:	d3cd      	bcc.n	8042462 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80424c6:	687b      	ldr	r3, [r7, #4]
 80424c8:	681b      	ldr	r3, [r3, #0]
 80424ca:	695a      	ldr	r2, [r3, #20]
 80424cc:	687b      	ldr	r3, [r7, #4]
 80424ce:	681b      	ldr	r3, [r3, #0]
 80424d0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80424d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80424d6:	687b      	ldr	r3, [r7, #4]
 80424d8:	681b      	ldr	r3, [r3, #0]
 80424da:	4618      	mov	r0, r3
 80424dc:	f005 fdee 	bl	80480bc <USB_ReadInterrupts>
 80424e0:	4603      	mov	r3, r0
 80424e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80424e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80424ea:	d156      	bne.n	804259a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80424ec:	2301      	movs	r3, #1
 80424ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80424f0:	e045      	b.n	804257e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80424f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80424f4:	015a      	lsls	r2, r3, #5
 80424f6:	69fb      	ldr	r3, [r7, #28]
 80424f8:	4413      	add	r3, r2
 80424fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80424fe:	681b      	ldr	r3, [r3, #0]
 8042500:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8042502:	6879      	ldr	r1, [r7, #4]
 8042504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042506:	4613      	mov	r3, r2
 8042508:	00db      	lsls	r3, r3, #3
 804250a:	4413      	add	r3, r2
 804250c:	009b      	lsls	r3, r3, #2
 804250e:	440b      	add	r3, r1
 8042510:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8042514:	781b      	ldrb	r3, [r3, #0]
 8042516:	2b01      	cmp	r3, #1
 8042518:	d12e      	bne.n	8042578 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 804251a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 804251c:	2b00      	cmp	r3, #0
 804251e:	da2b      	bge.n	8042578 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8042520:	69bb      	ldr	r3, [r7, #24]
 8042522:	0c1a      	lsrs	r2, r3, #16
 8042524:	687b      	ldr	r3, [r7, #4]
 8042526:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 804252a:	4053      	eors	r3, r2
 804252c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8042530:	2b00      	cmp	r3, #0
 8042532:	d121      	bne.n	8042578 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8042534:	6879      	ldr	r1, [r7, #4]
 8042536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042538:	4613      	mov	r3, r2
 804253a:	00db      	lsls	r3, r3, #3
 804253c:	4413      	add	r3, r2
 804253e:	009b      	lsls	r3, r3, #2
 8042540:	440b      	add	r3, r1
 8042542:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8042546:	2201      	movs	r2, #1
 8042548:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 804254a:	6a3b      	ldr	r3, [r7, #32]
 804254c:	699b      	ldr	r3, [r3, #24]
 804254e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8042552:	6a3b      	ldr	r3, [r7, #32]
 8042554:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8042556:	6a3b      	ldr	r3, [r7, #32]
 8042558:	695b      	ldr	r3, [r3, #20]
 804255a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 804255e:	2b00      	cmp	r3, #0
 8042560:	d10a      	bne.n	8042578 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8042562:	69fb      	ldr	r3, [r7, #28]
 8042564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042568:	685b      	ldr	r3, [r3, #4]
 804256a:	69fa      	ldr	r2, [r7, #28]
 804256c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8042570:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8042574:	6053      	str	r3, [r2, #4]
            break;
 8042576:	e008      	b.n	804258a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8042578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804257a:	3301      	adds	r3, #1
 804257c:	627b      	str	r3, [r7, #36]	@ 0x24
 804257e:	687b      	ldr	r3, [r7, #4]
 8042580:	791b      	ldrb	r3, [r3, #4]
 8042582:	461a      	mov	r2, r3
 8042584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042586:	4293      	cmp	r3, r2
 8042588:	d3b3      	bcc.n	80424f2 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 804258a:	687b      	ldr	r3, [r7, #4]
 804258c:	681b      	ldr	r3, [r3, #0]
 804258e:	695a      	ldr	r2, [r3, #20]
 8042590:	687b      	ldr	r3, [r7, #4]
 8042592:	681b      	ldr	r3, [r3, #0]
 8042594:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8042598:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 804259a:	687b      	ldr	r3, [r7, #4]
 804259c:	681b      	ldr	r3, [r3, #0]
 804259e:	4618      	mov	r0, r3
 80425a0:	f005 fd8c 	bl	80480bc <USB_ReadInterrupts>
 80425a4:	4603      	mov	r3, r0
 80425a6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80425aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80425ae:	d10a      	bne.n	80425c6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80425b0:	6878      	ldr	r0, [r7, #4]
 80425b2:	f008 fd09 	bl	804afc8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80425b6:	687b      	ldr	r3, [r7, #4]
 80425b8:	681b      	ldr	r3, [r3, #0]
 80425ba:	695a      	ldr	r2, [r3, #20]
 80425bc:	687b      	ldr	r3, [r7, #4]
 80425be:	681b      	ldr	r3, [r3, #0]
 80425c0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80425c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80425c6:	687b      	ldr	r3, [r7, #4]
 80425c8:	681b      	ldr	r3, [r3, #0]
 80425ca:	4618      	mov	r0, r3
 80425cc:	f005 fd76 	bl	80480bc <USB_ReadInterrupts>
 80425d0:	4603      	mov	r3, r0
 80425d2:	f003 0304 	and.w	r3, r3, #4
 80425d6:	2b04      	cmp	r3, #4
 80425d8:	d115      	bne.n	8042606 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80425da:	687b      	ldr	r3, [r7, #4]
 80425dc:	681b      	ldr	r3, [r3, #0]
 80425de:	685b      	ldr	r3, [r3, #4]
 80425e0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80425e2:	69bb      	ldr	r3, [r7, #24]
 80425e4:	f003 0304 	and.w	r3, r3, #4
 80425e8:	2b00      	cmp	r3, #0
 80425ea:	d002      	beq.n	80425f2 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80425ec:	6878      	ldr	r0, [r7, #4]
 80425ee:	f008 fcf9 	bl	804afe4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80425f2:	687b      	ldr	r3, [r7, #4]
 80425f4:	681b      	ldr	r3, [r3, #0]
 80425f6:	6859      	ldr	r1, [r3, #4]
 80425f8:	687b      	ldr	r3, [r7, #4]
 80425fa:	681b      	ldr	r3, [r3, #0]
 80425fc:	69ba      	ldr	r2, [r7, #24]
 80425fe:	430a      	orrs	r2, r1
 8042600:	605a      	str	r2, [r3, #4]
 8042602:	e000      	b.n	8042606 <HAL_PCD_IRQHandler+0x996>
      return;
 8042604:	bf00      	nop
    }
  }
}
 8042606:	3734      	adds	r7, #52	@ 0x34
 8042608:	46bd      	mov	sp, r7
 804260a:	bd90      	pop	{r4, r7, pc}

0804260c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 804260c:	b580      	push	{r7, lr}
 804260e:	b082      	sub	sp, #8
 8042610:	af00      	add	r7, sp, #0
 8042612:	6078      	str	r0, [r7, #4]
 8042614:	460b      	mov	r3, r1
 8042616:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8042618:	687b      	ldr	r3, [r7, #4]
 804261a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 804261e:	2b01      	cmp	r3, #1
 8042620:	d101      	bne.n	8042626 <HAL_PCD_SetAddress+0x1a>
 8042622:	2302      	movs	r3, #2
 8042624:	e012      	b.n	804264c <HAL_PCD_SetAddress+0x40>
 8042626:	687b      	ldr	r3, [r7, #4]
 8042628:	2201      	movs	r2, #1
 804262a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 804262e:	687b      	ldr	r3, [r7, #4]
 8042630:	78fa      	ldrb	r2, [r7, #3]
 8042632:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8042634:	687b      	ldr	r3, [r7, #4]
 8042636:	681b      	ldr	r3, [r3, #0]
 8042638:	78fa      	ldrb	r2, [r7, #3]
 804263a:	4611      	mov	r1, r2
 804263c:	4618      	mov	r0, r3
 804263e:	f005 fcd5 	bl	8047fec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8042642:	687b      	ldr	r3, [r7, #4]
 8042644:	2200      	movs	r2, #0
 8042646:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 804264a:	2300      	movs	r3, #0
}
 804264c:	4618      	mov	r0, r3
 804264e:	3708      	adds	r7, #8
 8042650:	46bd      	mov	sp, r7
 8042652:	bd80      	pop	{r7, pc}

08042654 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8042654:	b580      	push	{r7, lr}
 8042656:	b084      	sub	sp, #16
 8042658:	af00      	add	r7, sp, #0
 804265a:	6078      	str	r0, [r7, #4]
 804265c:	4608      	mov	r0, r1
 804265e:	4611      	mov	r1, r2
 8042660:	461a      	mov	r2, r3
 8042662:	4603      	mov	r3, r0
 8042664:	70fb      	strb	r3, [r7, #3]
 8042666:	460b      	mov	r3, r1
 8042668:	803b      	strh	r3, [r7, #0]
 804266a:	4613      	mov	r3, r2
 804266c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 804266e:	2300      	movs	r3, #0
 8042670:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8042672:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8042676:	2b00      	cmp	r3, #0
 8042678:	da0f      	bge.n	804269a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 804267a:	78fb      	ldrb	r3, [r7, #3]
 804267c:	f003 020f 	and.w	r2, r3, #15
 8042680:	4613      	mov	r3, r2
 8042682:	00db      	lsls	r3, r3, #3
 8042684:	4413      	add	r3, r2
 8042686:	009b      	lsls	r3, r3, #2
 8042688:	3310      	adds	r3, #16
 804268a:	687a      	ldr	r2, [r7, #4]
 804268c:	4413      	add	r3, r2
 804268e:	3304      	adds	r3, #4
 8042690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8042692:	68fb      	ldr	r3, [r7, #12]
 8042694:	2201      	movs	r2, #1
 8042696:	705a      	strb	r2, [r3, #1]
 8042698:	e00f      	b.n	80426ba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 804269a:	78fb      	ldrb	r3, [r7, #3]
 804269c:	f003 020f 	and.w	r2, r3, #15
 80426a0:	4613      	mov	r3, r2
 80426a2:	00db      	lsls	r3, r3, #3
 80426a4:	4413      	add	r3, r2
 80426a6:	009b      	lsls	r3, r3, #2
 80426a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80426ac:	687a      	ldr	r2, [r7, #4]
 80426ae:	4413      	add	r3, r2
 80426b0:	3304      	adds	r3, #4
 80426b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80426b4:	68fb      	ldr	r3, [r7, #12]
 80426b6:	2200      	movs	r2, #0
 80426b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80426ba:	78fb      	ldrb	r3, [r7, #3]
 80426bc:	f003 030f 	and.w	r3, r3, #15
 80426c0:	b2da      	uxtb	r2, r3
 80426c2:	68fb      	ldr	r3, [r7, #12]
 80426c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80426c6:	883b      	ldrh	r3, [r7, #0]
 80426c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80426cc:	68fb      	ldr	r3, [r7, #12]
 80426ce:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80426d0:	68fb      	ldr	r3, [r7, #12]
 80426d2:	78ba      	ldrb	r2, [r7, #2]
 80426d4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80426d6:	68fb      	ldr	r3, [r7, #12]
 80426d8:	785b      	ldrb	r3, [r3, #1]
 80426da:	2b00      	cmp	r3, #0
 80426dc:	d004      	beq.n	80426e8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80426de:	68fb      	ldr	r3, [r7, #12]
 80426e0:	781b      	ldrb	r3, [r3, #0]
 80426e2:	461a      	mov	r2, r3
 80426e4:	68fb      	ldr	r3, [r7, #12]
 80426e6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80426e8:	78bb      	ldrb	r3, [r7, #2]
 80426ea:	2b02      	cmp	r3, #2
 80426ec:	d102      	bne.n	80426f4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80426ee:	68fb      	ldr	r3, [r7, #12]
 80426f0:	2200      	movs	r2, #0
 80426f2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80426f4:	687b      	ldr	r3, [r7, #4]
 80426f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80426fa:	2b01      	cmp	r3, #1
 80426fc:	d101      	bne.n	8042702 <HAL_PCD_EP_Open+0xae>
 80426fe:	2302      	movs	r3, #2
 8042700:	e00e      	b.n	8042720 <HAL_PCD_EP_Open+0xcc>
 8042702:	687b      	ldr	r3, [r7, #4]
 8042704:	2201      	movs	r2, #1
 8042706:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 804270a:	687b      	ldr	r3, [r7, #4]
 804270c:	681b      	ldr	r3, [r3, #0]
 804270e:	68f9      	ldr	r1, [r7, #12]
 8042710:	4618      	mov	r0, r3
 8042712:	f004 ff2b 	bl	804756c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8042716:	687b      	ldr	r3, [r7, #4]
 8042718:	2200      	movs	r2, #0
 804271a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 804271e:	7afb      	ldrb	r3, [r7, #11]
}
 8042720:	4618      	mov	r0, r3
 8042722:	3710      	adds	r7, #16
 8042724:	46bd      	mov	sp, r7
 8042726:	bd80      	pop	{r7, pc}

08042728 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8042728:	b580      	push	{r7, lr}
 804272a:	b086      	sub	sp, #24
 804272c:	af00      	add	r7, sp, #0
 804272e:	60f8      	str	r0, [r7, #12]
 8042730:	607a      	str	r2, [r7, #4]
 8042732:	603b      	str	r3, [r7, #0]
 8042734:	460b      	mov	r3, r1
 8042736:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8042738:	7afb      	ldrb	r3, [r7, #11]
 804273a:	f003 020f 	and.w	r2, r3, #15
 804273e:	4613      	mov	r3, r2
 8042740:	00db      	lsls	r3, r3, #3
 8042742:	4413      	add	r3, r2
 8042744:	009b      	lsls	r3, r3, #2
 8042746:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 804274a:	68fa      	ldr	r2, [r7, #12]
 804274c:	4413      	add	r3, r2
 804274e:	3304      	adds	r3, #4
 8042750:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8042752:	697b      	ldr	r3, [r7, #20]
 8042754:	687a      	ldr	r2, [r7, #4]
 8042756:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8042758:	697b      	ldr	r3, [r7, #20]
 804275a:	683a      	ldr	r2, [r7, #0]
 804275c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 804275e:	697b      	ldr	r3, [r7, #20]
 8042760:	2200      	movs	r2, #0
 8042762:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8042764:	697b      	ldr	r3, [r7, #20]
 8042766:	2200      	movs	r2, #0
 8042768:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 804276a:	7afb      	ldrb	r3, [r7, #11]
 804276c:	f003 030f 	and.w	r3, r3, #15
 8042770:	b2da      	uxtb	r2, r3
 8042772:	697b      	ldr	r3, [r7, #20]
 8042774:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8042776:	68fb      	ldr	r3, [r7, #12]
 8042778:	799b      	ldrb	r3, [r3, #6]
 804277a:	2b01      	cmp	r3, #1
 804277c:	d102      	bne.n	8042784 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 804277e:	687a      	ldr	r2, [r7, #4]
 8042780:	697b      	ldr	r3, [r7, #20]
 8042782:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8042784:	68fb      	ldr	r3, [r7, #12]
 8042786:	6818      	ldr	r0, [r3, #0]
 8042788:	68fb      	ldr	r3, [r7, #12]
 804278a:	799b      	ldrb	r3, [r3, #6]
 804278c:	461a      	mov	r2, r3
 804278e:	6979      	ldr	r1, [r7, #20]
 8042790:	f004 ff74 	bl	804767c <USB_EPStartXfer>

  return HAL_OK;
 8042794:	2300      	movs	r3, #0
}
 8042796:	4618      	mov	r0, r3
 8042798:	3718      	adds	r7, #24
 804279a:	46bd      	mov	sp, r7
 804279c:	bd80      	pop	{r7, pc}

0804279e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 804279e:	b580      	push	{r7, lr}
 80427a0:	b086      	sub	sp, #24
 80427a2:	af00      	add	r7, sp, #0
 80427a4:	60f8      	str	r0, [r7, #12]
 80427a6:	607a      	str	r2, [r7, #4]
 80427a8:	603b      	str	r3, [r7, #0]
 80427aa:	460b      	mov	r3, r1
 80427ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80427ae:	7afb      	ldrb	r3, [r7, #11]
 80427b0:	f003 020f 	and.w	r2, r3, #15
 80427b4:	4613      	mov	r3, r2
 80427b6:	00db      	lsls	r3, r3, #3
 80427b8:	4413      	add	r3, r2
 80427ba:	009b      	lsls	r3, r3, #2
 80427bc:	3310      	adds	r3, #16
 80427be:	68fa      	ldr	r2, [r7, #12]
 80427c0:	4413      	add	r3, r2
 80427c2:	3304      	adds	r3, #4
 80427c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80427c6:	697b      	ldr	r3, [r7, #20]
 80427c8:	687a      	ldr	r2, [r7, #4]
 80427ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80427cc:	697b      	ldr	r3, [r7, #20]
 80427ce:	683a      	ldr	r2, [r7, #0]
 80427d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80427d2:	697b      	ldr	r3, [r7, #20]
 80427d4:	2200      	movs	r2, #0
 80427d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80427d8:	697b      	ldr	r3, [r7, #20]
 80427da:	2201      	movs	r2, #1
 80427dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80427de:	7afb      	ldrb	r3, [r7, #11]
 80427e0:	f003 030f 	and.w	r3, r3, #15
 80427e4:	b2da      	uxtb	r2, r3
 80427e6:	697b      	ldr	r3, [r7, #20]
 80427e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80427ea:	68fb      	ldr	r3, [r7, #12]
 80427ec:	799b      	ldrb	r3, [r3, #6]
 80427ee:	2b01      	cmp	r3, #1
 80427f0:	d102      	bne.n	80427f8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80427f2:	687a      	ldr	r2, [r7, #4]
 80427f4:	697b      	ldr	r3, [r7, #20]
 80427f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80427f8:	68fb      	ldr	r3, [r7, #12]
 80427fa:	6818      	ldr	r0, [r3, #0]
 80427fc:	68fb      	ldr	r3, [r7, #12]
 80427fe:	799b      	ldrb	r3, [r3, #6]
 8042800:	461a      	mov	r2, r3
 8042802:	6979      	ldr	r1, [r7, #20]
 8042804:	f004 ff3a 	bl	804767c <USB_EPStartXfer>

  return HAL_OK;
 8042808:	2300      	movs	r3, #0
}
 804280a:	4618      	mov	r0, r3
 804280c:	3718      	adds	r7, #24
 804280e:	46bd      	mov	sp, r7
 8042810:	bd80      	pop	{r7, pc}

08042812 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8042812:	b580      	push	{r7, lr}
 8042814:	b084      	sub	sp, #16
 8042816:	af00      	add	r7, sp, #0
 8042818:	6078      	str	r0, [r7, #4]
 804281a:	460b      	mov	r3, r1
 804281c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 804281e:	78fb      	ldrb	r3, [r7, #3]
 8042820:	f003 030f 	and.w	r3, r3, #15
 8042824:	687a      	ldr	r2, [r7, #4]
 8042826:	7912      	ldrb	r2, [r2, #4]
 8042828:	4293      	cmp	r3, r2
 804282a:	d901      	bls.n	8042830 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 804282c:	2301      	movs	r3, #1
 804282e:	e04f      	b.n	80428d0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8042830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8042834:	2b00      	cmp	r3, #0
 8042836:	da0f      	bge.n	8042858 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8042838:	78fb      	ldrb	r3, [r7, #3]
 804283a:	f003 020f 	and.w	r2, r3, #15
 804283e:	4613      	mov	r3, r2
 8042840:	00db      	lsls	r3, r3, #3
 8042842:	4413      	add	r3, r2
 8042844:	009b      	lsls	r3, r3, #2
 8042846:	3310      	adds	r3, #16
 8042848:	687a      	ldr	r2, [r7, #4]
 804284a:	4413      	add	r3, r2
 804284c:	3304      	adds	r3, #4
 804284e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8042850:	68fb      	ldr	r3, [r7, #12]
 8042852:	2201      	movs	r2, #1
 8042854:	705a      	strb	r2, [r3, #1]
 8042856:	e00d      	b.n	8042874 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8042858:	78fa      	ldrb	r2, [r7, #3]
 804285a:	4613      	mov	r3, r2
 804285c:	00db      	lsls	r3, r3, #3
 804285e:	4413      	add	r3, r2
 8042860:	009b      	lsls	r3, r3, #2
 8042862:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8042866:	687a      	ldr	r2, [r7, #4]
 8042868:	4413      	add	r3, r2
 804286a:	3304      	adds	r3, #4
 804286c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 804286e:	68fb      	ldr	r3, [r7, #12]
 8042870:	2200      	movs	r2, #0
 8042872:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8042874:	68fb      	ldr	r3, [r7, #12]
 8042876:	2201      	movs	r2, #1
 8042878:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 804287a:	78fb      	ldrb	r3, [r7, #3]
 804287c:	f003 030f 	and.w	r3, r3, #15
 8042880:	b2da      	uxtb	r2, r3
 8042882:	68fb      	ldr	r3, [r7, #12]
 8042884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8042886:	687b      	ldr	r3, [r7, #4]
 8042888:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 804288c:	2b01      	cmp	r3, #1
 804288e:	d101      	bne.n	8042894 <HAL_PCD_EP_SetStall+0x82>
 8042890:	2302      	movs	r3, #2
 8042892:	e01d      	b.n	80428d0 <HAL_PCD_EP_SetStall+0xbe>
 8042894:	687b      	ldr	r3, [r7, #4]
 8042896:	2201      	movs	r2, #1
 8042898:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 804289c:	687b      	ldr	r3, [r7, #4]
 804289e:	681b      	ldr	r3, [r3, #0]
 80428a0:	68f9      	ldr	r1, [r7, #12]
 80428a2:	4618      	mov	r0, r3
 80428a4:	f005 face 	bl	8047e44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80428a8:	78fb      	ldrb	r3, [r7, #3]
 80428aa:	f003 030f 	and.w	r3, r3, #15
 80428ae:	2b00      	cmp	r3, #0
 80428b0:	d109      	bne.n	80428c6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80428b2:	687b      	ldr	r3, [r7, #4]
 80428b4:	6818      	ldr	r0, [r3, #0]
 80428b6:	687b      	ldr	r3, [r7, #4]
 80428b8:	7999      	ldrb	r1, [r3, #6]
 80428ba:	687b      	ldr	r3, [r7, #4]
 80428bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80428c0:	461a      	mov	r2, r3
 80428c2:	f005 fcc1 	bl	8048248 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80428c6:	687b      	ldr	r3, [r7, #4]
 80428c8:	2200      	movs	r2, #0
 80428ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80428ce:	2300      	movs	r3, #0
}
 80428d0:	4618      	mov	r0, r3
 80428d2:	3710      	adds	r7, #16
 80428d4:	46bd      	mov	sp, r7
 80428d6:	bd80      	pop	{r7, pc}

080428d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80428d8:	b580      	push	{r7, lr}
 80428da:	b084      	sub	sp, #16
 80428dc:	af00      	add	r7, sp, #0
 80428de:	6078      	str	r0, [r7, #4]
 80428e0:	460b      	mov	r3, r1
 80428e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80428e4:	78fb      	ldrb	r3, [r7, #3]
 80428e6:	f003 030f 	and.w	r3, r3, #15
 80428ea:	687a      	ldr	r2, [r7, #4]
 80428ec:	7912      	ldrb	r2, [r2, #4]
 80428ee:	4293      	cmp	r3, r2
 80428f0:	d901      	bls.n	80428f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80428f2:	2301      	movs	r3, #1
 80428f4:	e042      	b.n	804297c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80428f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80428fa:	2b00      	cmp	r3, #0
 80428fc:	da0f      	bge.n	804291e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80428fe:	78fb      	ldrb	r3, [r7, #3]
 8042900:	f003 020f 	and.w	r2, r3, #15
 8042904:	4613      	mov	r3, r2
 8042906:	00db      	lsls	r3, r3, #3
 8042908:	4413      	add	r3, r2
 804290a:	009b      	lsls	r3, r3, #2
 804290c:	3310      	adds	r3, #16
 804290e:	687a      	ldr	r2, [r7, #4]
 8042910:	4413      	add	r3, r2
 8042912:	3304      	adds	r3, #4
 8042914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8042916:	68fb      	ldr	r3, [r7, #12]
 8042918:	2201      	movs	r2, #1
 804291a:	705a      	strb	r2, [r3, #1]
 804291c:	e00f      	b.n	804293e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 804291e:	78fb      	ldrb	r3, [r7, #3]
 8042920:	f003 020f 	and.w	r2, r3, #15
 8042924:	4613      	mov	r3, r2
 8042926:	00db      	lsls	r3, r3, #3
 8042928:	4413      	add	r3, r2
 804292a:	009b      	lsls	r3, r3, #2
 804292c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8042930:	687a      	ldr	r2, [r7, #4]
 8042932:	4413      	add	r3, r2
 8042934:	3304      	adds	r3, #4
 8042936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8042938:	68fb      	ldr	r3, [r7, #12]
 804293a:	2200      	movs	r2, #0
 804293c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 804293e:	68fb      	ldr	r3, [r7, #12]
 8042940:	2200      	movs	r2, #0
 8042942:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8042944:	78fb      	ldrb	r3, [r7, #3]
 8042946:	f003 030f 	and.w	r3, r3, #15
 804294a:	b2da      	uxtb	r2, r3
 804294c:	68fb      	ldr	r3, [r7, #12]
 804294e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8042950:	687b      	ldr	r3, [r7, #4]
 8042952:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8042956:	2b01      	cmp	r3, #1
 8042958:	d101      	bne.n	804295e <HAL_PCD_EP_ClrStall+0x86>
 804295a:	2302      	movs	r3, #2
 804295c:	e00e      	b.n	804297c <HAL_PCD_EP_ClrStall+0xa4>
 804295e:	687b      	ldr	r3, [r7, #4]
 8042960:	2201      	movs	r2, #1
 8042962:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8042966:	687b      	ldr	r3, [r7, #4]
 8042968:	681b      	ldr	r3, [r3, #0]
 804296a:	68f9      	ldr	r1, [r7, #12]
 804296c:	4618      	mov	r0, r3
 804296e:	f005 fad7 	bl	8047f20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8042972:	687b      	ldr	r3, [r7, #4]
 8042974:	2200      	movs	r2, #0
 8042976:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 804297a:	2300      	movs	r3, #0
}
 804297c:	4618      	mov	r0, r3
 804297e:	3710      	adds	r7, #16
 8042980:	46bd      	mov	sp, r7
 8042982:	bd80      	pop	{r7, pc}

08042984 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8042984:	b580      	push	{r7, lr}
 8042986:	b084      	sub	sp, #16
 8042988:	af00      	add	r7, sp, #0
 804298a:	6078      	str	r0, [r7, #4]
 804298c:	460b      	mov	r3, r1
 804298e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8042990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8042994:	2b00      	cmp	r3, #0
 8042996:	da0c      	bge.n	80429b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8042998:	78fb      	ldrb	r3, [r7, #3]
 804299a:	f003 020f 	and.w	r2, r3, #15
 804299e:	4613      	mov	r3, r2
 80429a0:	00db      	lsls	r3, r3, #3
 80429a2:	4413      	add	r3, r2
 80429a4:	009b      	lsls	r3, r3, #2
 80429a6:	3310      	adds	r3, #16
 80429a8:	687a      	ldr	r2, [r7, #4]
 80429aa:	4413      	add	r3, r2
 80429ac:	3304      	adds	r3, #4
 80429ae:	60fb      	str	r3, [r7, #12]
 80429b0:	e00c      	b.n	80429cc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80429b2:	78fb      	ldrb	r3, [r7, #3]
 80429b4:	f003 020f 	and.w	r2, r3, #15
 80429b8:	4613      	mov	r3, r2
 80429ba:	00db      	lsls	r3, r3, #3
 80429bc:	4413      	add	r3, r2
 80429be:	009b      	lsls	r3, r3, #2
 80429c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80429c4:	687a      	ldr	r2, [r7, #4]
 80429c6:	4413      	add	r3, r2
 80429c8:	3304      	adds	r3, #4
 80429ca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80429cc:	687b      	ldr	r3, [r7, #4]
 80429ce:	681b      	ldr	r3, [r3, #0]
 80429d0:	68f9      	ldr	r1, [r7, #12]
 80429d2:	4618      	mov	r0, r3
 80429d4:	f005 f8f6 	bl	8047bc4 <USB_EPStopXfer>
 80429d8:	4603      	mov	r3, r0
 80429da:	72fb      	strb	r3, [r7, #11]

  return ret;
 80429dc:	7afb      	ldrb	r3, [r7, #11]
}
 80429de:	4618      	mov	r0, r3
 80429e0:	3710      	adds	r7, #16
 80429e2:	46bd      	mov	sp, r7
 80429e4:	bd80      	pop	{r7, pc}

080429e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80429e6:	b580      	push	{r7, lr}
 80429e8:	b08a      	sub	sp, #40	@ 0x28
 80429ea:	af02      	add	r7, sp, #8
 80429ec:	6078      	str	r0, [r7, #4]
 80429ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80429f0:	687b      	ldr	r3, [r7, #4]
 80429f2:	681b      	ldr	r3, [r3, #0]
 80429f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80429f6:	697b      	ldr	r3, [r7, #20]
 80429f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80429fa:	683a      	ldr	r2, [r7, #0]
 80429fc:	4613      	mov	r3, r2
 80429fe:	00db      	lsls	r3, r3, #3
 8042a00:	4413      	add	r3, r2
 8042a02:	009b      	lsls	r3, r3, #2
 8042a04:	3310      	adds	r3, #16
 8042a06:	687a      	ldr	r2, [r7, #4]
 8042a08:	4413      	add	r3, r2
 8042a0a:	3304      	adds	r3, #4
 8042a0c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8042a0e:	68fb      	ldr	r3, [r7, #12]
 8042a10:	695a      	ldr	r2, [r3, #20]
 8042a12:	68fb      	ldr	r3, [r7, #12]
 8042a14:	691b      	ldr	r3, [r3, #16]
 8042a16:	429a      	cmp	r2, r3
 8042a18:	d901      	bls.n	8042a1e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8042a1a:	2301      	movs	r3, #1
 8042a1c:	e06b      	b.n	8042af6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8042a1e:	68fb      	ldr	r3, [r7, #12]
 8042a20:	691a      	ldr	r2, [r3, #16]
 8042a22:	68fb      	ldr	r3, [r7, #12]
 8042a24:	695b      	ldr	r3, [r3, #20]
 8042a26:	1ad3      	subs	r3, r2, r3
 8042a28:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8042a2a:	68fb      	ldr	r3, [r7, #12]
 8042a2c:	689b      	ldr	r3, [r3, #8]
 8042a2e:	69fa      	ldr	r2, [r7, #28]
 8042a30:	429a      	cmp	r2, r3
 8042a32:	d902      	bls.n	8042a3a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8042a34:	68fb      	ldr	r3, [r7, #12]
 8042a36:	689b      	ldr	r3, [r3, #8]
 8042a38:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8042a3a:	69fb      	ldr	r3, [r7, #28]
 8042a3c:	3303      	adds	r3, #3
 8042a3e:	089b      	lsrs	r3, r3, #2
 8042a40:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8042a42:	e02a      	b.n	8042a9a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8042a44:	68fb      	ldr	r3, [r7, #12]
 8042a46:	691a      	ldr	r2, [r3, #16]
 8042a48:	68fb      	ldr	r3, [r7, #12]
 8042a4a:	695b      	ldr	r3, [r3, #20]
 8042a4c:	1ad3      	subs	r3, r2, r3
 8042a4e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8042a50:	68fb      	ldr	r3, [r7, #12]
 8042a52:	689b      	ldr	r3, [r3, #8]
 8042a54:	69fa      	ldr	r2, [r7, #28]
 8042a56:	429a      	cmp	r2, r3
 8042a58:	d902      	bls.n	8042a60 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8042a5a:	68fb      	ldr	r3, [r7, #12]
 8042a5c:	689b      	ldr	r3, [r3, #8]
 8042a5e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8042a60:	69fb      	ldr	r3, [r7, #28]
 8042a62:	3303      	adds	r3, #3
 8042a64:	089b      	lsrs	r3, r3, #2
 8042a66:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8042a68:	68fb      	ldr	r3, [r7, #12]
 8042a6a:	68d9      	ldr	r1, [r3, #12]
 8042a6c:	683b      	ldr	r3, [r7, #0]
 8042a6e:	b2da      	uxtb	r2, r3
 8042a70:	69fb      	ldr	r3, [r7, #28]
 8042a72:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8042a74:	687b      	ldr	r3, [r7, #4]
 8042a76:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8042a78:	9300      	str	r3, [sp, #0]
 8042a7a:	4603      	mov	r3, r0
 8042a7c:	6978      	ldr	r0, [r7, #20]
 8042a7e:	f005 f94b 	bl	8047d18 <USB_WritePacket>

    ep->xfer_buff  += len;
 8042a82:	68fb      	ldr	r3, [r7, #12]
 8042a84:	68da      	ldr	r2, [r3, #12]
 8042a86:	69fb      	ldr	r3, [r7, #28]
 8042a88:	441a      	add	r2, r3
 8042a8a:	68fb      	ldr	r3, [r7, #12]
 8042a8c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8042a8e:	68fb      	ldr	r3, [r7, #12]
 8042a90:	695a      	ldr	r2, [r3, #20]
 8042a92:	69fb      	ldr	r3, [r7, #28]
 8042a94:	441a      	add	r2, r3
 8042a96:	68fb      	ldr	r3, [r7, #12]
 8042a98:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8042a9a:	683b      	ldr	r3, [r7, #0]
 8042a9c:	015a      	lsls	r2, r3, #5
 8042a9e:	693b      	ldr	r3, [r7, #16]
 8042aa0:	4413      	add	r3, r2
 8042aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8042aa6:	699b      	ldr	r3, [r3, #24]
 8042aa8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8042aaa:	69ba      	ldr	r2, [r7, #24]
 8042aac:	429a      	cmp	r2, r3
 8042aae:	d809      	bhi.n	8042ac4 <PCD_WriteEmptyTxFifo+0xde>
 8042ab0:	68fb      	ldr	r3, [r7, #12]
 8042ab2:	695a      	ldr	r2, [r3, #20]
 8042ab4:	68fb      	ldr	r3, [r7, #12]
 8042ab6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8042ab8:	429a      	cmp	r2, r3
 8042aba:	d203      	bcs.n	8042ac4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8042abc:	68fb      	ldr	r3, [r7, #12]
 8042abe:	691b      	ldr	r3, [r3, #16]
 8042ac0:	2b00      	cmp	r3, #0
 8042ac2:	d1bf      	bne.n	8042a44 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8042ac4:	68fb      	ldr	r3, [r7, #12]
 8042ac6:	691a      	ldr	r2, [r3, #16]
 8042ac8:	68fb      	ldr	r3, [r7, #12]
 8042aca:	695b      	ldr	r3, [r3, #20]
 8042acc:	429a      	cmp	r2, r3
 8042ace:	d811      	bhi.n	8042af4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8042ad0:	683b      	ldr	r3, [r7, #0]
 8042ad2:	f003 030f 	and.w	r3, r3, #15
 8042ad6:	2201      	movs	r2, #1
 8042ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8042adc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8042ade:	693b      	ldr	r3, [r7, #16]
 8042ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8042ae6:	68bb      	ldr	r3, [r7, #8]
 8042ae8:	43db      	mvns	r3, r3
 8042aea:	6939      	ldr	r1, [r7, #16]
 8042aec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8042af0:	4013      	ands	r3, r2
 8042af2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8042af4:	2300      	movs	r3, #0
}
 8042af6:	4618      	mov	r0, r3
 8042af8:	3720      	adds	r7, #32
 8042afa:	46bd      	mov	sp, r7
 8042afc:	bd80      	pop	{r7, pc}
	...

08042b00 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8042b00:	b580      	push	{r7, lr}
 8042b02:	b088      	sub	sp, #32
 8042b04:	af00      	add	r7, sp, #0
 8042b06:	6078      	str	r0, [r7, #4]
 8042b08:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8042b0a:	687b      	ldr	r3, [r7, #4]
 8042b0c:	681b      	ldr	r3, [r3, #0]
 8042b0e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042b10:	69fb      	ldr	r3, [r7, #28]
 8042b12:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8042b14:	69fb      	ldr	r3, [r7, #28]
 8042b16:	333c      	adds	r3, #60	@ 0x3c
 8042b18:	3304      	adds	r3, #4
 8042b1a:	681b      	ldr	r3, [r3, #0]
 8042b1c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8042b1e:	683b      	ldr	r3, [r7, #0]
 8042b20:	015a      	lsls	r2, r3, #5
 8042b22:	69bb      	ldr	r3, [r7, #24]
 8042b24:	4413      	add	r3, r2
 8042b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042b2a:	689b      	ldr	r3, [r3, #8]
 8042b2c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8042b2e:	687b      	ldr	r3, [r7, #4]
 8042b30:	799b      	ldrb	r3, [r3, #6]
 8042b32:	2b01      	cmp	r3, #1
 8042b34:	d17b      	bne.n	8042c2e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8042b36:	693b      	ldr	r3, [r7, #16]
 8042b38:	f003 0308 	and.w	r3, r3, #8
 8042b3c:	2b00      	cmp	r3, #0
 8042b3e:	d015      	beq.n	8042b6c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042b40:	697b      	ldr	r3, [r7, #20]
 8042b42:	4a61      	ldr	r2, [pc, #388]	@ (8042cc8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8042b44:	4293      	cmp	r3, r2
 8042b46:	f240 80b9 	bls.w	8042cbc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8042b4a:	693b      	ldr	r3, [r7, #16]
 8042b4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042b50:	2b00      	cmp	r3, #0
 8042b52:	f000 80b3 	beq.w	8042cbc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042b56:	683b      	ldr	r3, [r7, #0]
 8042b58:	015a      	lsls	r2, r3, #5
 8042b5a:	69bb      	ldr	r3, [r7, #24]
 8042b5c:	4413      	add	r3, r2
 8042b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042b62:	461a      	mov	r2, r3
 8042b64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042b68:	6093      	str	r3, [r2, #8]
 8042b6a:	e0a7      	b.n	8042cbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8042b6c:	693b      	ldr	r3, [r7, #16]
 8042b6e:	f003 0320 	and.w	r3, r3, #32
 8042b72:	2b00      	cmp	r3, #0
 8042b74:	d009      	beq.n	8042b8a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8042b76:	683b      	ldr	r3, [r7, #0]
 8042b78:	015a      	lsls	r2, r3, #5
 8042b7a:	69bb      	ldr	r3, [r7, #24]
 8042b7c:	4413      	add	r3, r2
 8042b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042b82:	461a      	mov	r2, r3
 8042b84:	2320      	movs	r3, #32
 8042b86:	6093      	str	r3, [r2, #8]
 8042b88:	e098      	b.n	8042cbc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8042b8a:	693b      	ldr	r3, [r7, #16]
 8042b8c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8042b90:	2b00      	cmp	r3, #0
 8042b92:	f040 8093 	bne.w	8042cbc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042b96:	697b      	ldr	r3, [r7, #20]
 8042b98:	4a4b      	ldr	r2, [pc, #300]	@ (8042cc8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8042b9a:	4293      	cmp	r3, r2
 8042b9c:	d90f      	bls.n	8042bbe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8042b9e:	693b      	ldr	r3, [r7, #16]
 8042ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042ba4:	2b00      	cmp	r3, #0
 8042ba6:	d00a      	beq.n	8042bbe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042ba8:	683b      	ldr	r3, [r7, #0]
 8042baa:	015a      	lsls	r2, r3, #5
 8042bac:	69bb      	ldr	r3, [r7, #24]
 8042bae:	4413      	add	r3, r2
 8042bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042bb4:	461a      	mov	r2, r3
 8042bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042bba:	6093      	str	r3, [r2, #8]
 8042bbc:	e07e      	b.n	8042cbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8042bbe:	683a      	ldr	r2, [r7, #0]
 8042bc0:	4613      	mov	r3, r2
 8042bc2:	00db      	lsls	r3, r3, #3
 8042bc4:	4413      	add	r3, r2
 8042bc6:	009b      	lsls	r3, r3, #2
 8042bc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8042bcc:	687a      	ldr	r2, [r7, #4]
 8042bce:	4413      	add	r3, r2
 8042bd0:	3304      	adds	r3, #4
 8042bd2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8042bd4:	68fb      	ldr	r3, [r7, #12]
 8042bd6:	6a1a      	ldr	r2, [r3, #32]
 8042bd8:	683b      	ldr	r3, [r7, #0]
 8042bda:	0159      	lsls	r1, r3, #5
 8042bdc:	69bb      	ldr	r3, [r7, #24]
 8042bde:	440b      	add	r3, r1
 8042be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042be4:	691b      	ldr	r3, [r3, #16]
 8042be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8042bea:	1ad2      	subs	r2, r2, r3
 8042bec:	68fb      	ldr	r3, [r7, #12]
 8042bee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8042bf0:	683b      	ldr	r3, [r7, #0]
 8042bf2:	2b00      	cmp	r3, #0
 8042bf4:	d114      	bne.n	8042c20 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8042bf6:	68fb      	ldr	r3, [r7, #12]
 8042bf8:	691b      	ldr	r3, [r3, #16]
 8042bfa:	2b00      	cmp	r3, #0
 8042bfc:	d109      	bne.n	8042c12 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8042bfe:	687b      	ldr	r3, [r7, #4]
 8042c00:	6818      	ldr	r0, [r3, #0]
 8042c02:	687b      	ldr	r3, [r7, #4]
 8042c04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8042c08:	461a      	mov	r2, r3
 8042c0a:	2101      	movs	r1, #1
 8042c0c:	f005 fb1c 	bl	8048248 <USB_EP0_OutStart>
 8042c10:	e006      	b.n	8042c20 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8042c12:	68fb      	ldr	r3, [r7, #12]
 8042c14:	68da      	ldr	r2, [r3, #12]
 8042c16:	68fb      	ldr	r3, [r7, #12]
 8042c18:	695b      	ldr	r3, [r3, #20]
 8042c1a:	441a      	add	r2, r3
 8042c1c:	68fb      	ldr	r3, [r7, #12]
 8042c1e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8042c20:	683b      	ldr	r3, [r7, #0]
 8042c22:	b2db      	uxtb	r3, r3
 8042c24:	4619      	mov	r1, r3
 8042c26:	6878      	ldr	r0, [r7, #4]
 8042c28:	f008 f90a 	bl	804ae40 <HAL_PCD_DataOutStageCallback>
 8042c2c:	e046      	b.n	8042cbc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8042c2e:	697b      	ldr	r3, [r7, #20]
 8042c30:	4a26      	ldr	r2, [pc, #152]	@ (8042ccc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8042c32:	4293      	cmp	r3, r2
 8042c34:	d124      	bne.n	8042c80 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8042c36:	693b      	ldr	r3, [r7, #16]
 8042c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8042c3c:	2b00      	cmp	r3, #0
 8042c3e:	d00a      	beq.n	8042c56 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042c40:	683b      	ldr	r3, [r7, #0]
 8042c42:	015a      	lsls	r2, r3, #5
 8042c44:	69bb      	ldr	r3, [r7, #24]
 8042c46:	4413      	add	r3, r2
 8042c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042c4c:	461a      	mov	r2, r3
 8042c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042c52:	6093      	str	r3, [r2, #8]
 8042c54:	e032      	b.n	8042cbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8042c56:	693b      	ldr	r3, [r7, #16]
 8042c58:	f003 0320 	and.w	r3, r3, #32
 8042c5c:	2b00      	cmp	r3, #0
 8042c5e:	d008      	beq.n	8042c72 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8042c60:	683b      	ldr	r3, [r7, #0]
 8042c62:	015a      	lsls	r2, r3, #5
 8042c64:	69bb      	ldr	r3, [r7, #24]
 8042c66:	4413      	add	r3, r2
 8042c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042c6c:	461a      	mov	r2, r3
 8042c6e:	2320      	movs	r3, #32
 8042c70:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8042c72:	683b      	ldr	r3, [r7, #0]
 8042c74:	b2db      	uxtb	r3, r3
 8042c76:	4619      	mov	r1, r3
 8042c78:	6878      	ldr	r0, [r7, #4]
 8042c7a:	f008 f8e1 	bl	804ae40 <HAL_PCD_DataOutStageCallback>
 8042c7e:	e01d      	b.n	8042cbc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8042c80:	683b      	ldr	r3, [r7, #0]
 8042c82:	2b00      	cmp	r3, #0
 8042c84:	d114      	bne.n	8042cb0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8042c86:	6879      	ldr	r1, [r7, #4]
 8042c88:	683a      	ldr	r2, [r7, #0]
 8042c8a:	4613      	mov	r3, r2
 8042c8c:	00db      	lsls	r3, r3, #3
 8042c8e:	4413      	add	r3, r2
 8042c90:	009b      	lsls	r3, r3, #2
 8042c92:	440b      	add	r3, r1
 8042c94:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8042c98:	681b      	ldr	r3, [r3, #0]
 8042c9a:	2b00      	cmp	r3, #0
 8042c9c:	d108      	bne.n	8042cb0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8042c9e:	687b      	ldr	r3, [r7, #4]
 8042ca0:	6818      	ldr	r0, [r3, #0]
 8042ca2:	687b      	ldr	r3, [r7, #4]
 8042ca4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8042ca8:	461a      	mov	r2, r3
 8042caa:	2100      	movs	r1, #0
 8042cac:	f005 facc 	bl	8048248 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8042cb0:	683b      	ldr	r3, [r7, #0]
 8042cb2:	b2db      	uxtb	r3, r3
 8042cb4:	4619      	mov	r1, r3
 8042cb6:	6878      	ldr	r0, [r7, #4]
 8042cb8:	f008 f8c2 	bl	804ae40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8042cbc:	2300      	movs	r3, #0
}
 8042cbe:	4618      	mov	r0, r3
 8042cc0:	3720      	adds	r7, #32
 8042cc2:	46bd      	mov	sp, r7
 8042cc4:	bd80      	pop	{r7, pc}
 8042cc6:	bf00      	nop
 8042cc8:	4f54300a 	.word	0x4f54300a
 8042ccc:	4f54310a 	.word	0x4f54310a

08042cd0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8042cd0:	b580      	push	{r7, lr}
 8042cd2:	b086      	sub	sp, #24
 8042cd4:	af00      	add	r7, sp, #0
 8042cd6:	6078      	str	r0, [r7, #4]
 8042cd8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8042cda:	687b      	ldr	r3, [r7, #4]
 8042cdc:	681b      	ldr	r3, [r3, #0]
 8042cde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042ce0:	697b      	ldr	r3, [r7, #20]
 8042ce2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8042ce4:	697b      	ldr	r3, [r7, #20]
 8042ce6:	333c      	adds	r3, #60	@ 0x3c
 8042ce8:	3304      	adds	r3, #4
 8042cea:	681b      	ldr	r3, [r3, #0]
 8042cec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8042cee:	683b      	ldr	r3, [r7, #0]
 8042cf0:	015a      	lsls	r2, r3, #5
 8042cf2:	693b      	ldr	r3, [r7, #16]
 8042cf4:	4413      	add	r3, r2
 8042cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042cfa:	689b      	ldr	r3, [r3, #8]
 8042cfc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042cfe:	68fb      	ldr	r3, [r7, #12]
 8042d00:	4a15      	ldr	r2, [pc, #84]	@ (8042d58 <PCD_EP_OutSetupPacket_int+0x88>)
 8042d02:	4293      	cmp	r3, r2
 8042d04:	d90e      	bls.n	8042d24 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8042d06:	68bb      	ldr	r3, [r7, #8]
 8042d08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042d0c:	2b00      	cmp	r3, #0
 8042d0e:	d009      	beq.n	8042d24 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042d10:	683b      	ldr	r3, [r7, #0]
 8042d12:	015a      	lsls	r2, r3, #5
 8042d14:	693b      	ldr	r3, [r7, #16]
 8042d16:	4413      	add	r3, r2
 8042d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042d1c:	461a      	mov	r2, r3
 8042d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042d22:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8042d24:	6878      	ldr	r0, [r7, #4]
 8042d26:	f008 f879 	bl	804ae1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8042d2a:	68fb      	ldr	r3, [r7, #12]
 8042d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8042d58 <PCD_EP_OutSetupPacket_int+0x88>)
 8042d2e:	4293      	cmp	r3, r2
 8042d30:	d90c      	bls.n	8042d4c <PCD_EP_OutSetupPacket_int+0x7c>
 8042d32:	687b      	ldr	r3, [r7, #4]
 8042d34:	799b      	ldrb	r3, [r3, #6]
 8042d36:	2b01      	cmp	r3, #1
 8042d38:	d108      	bne.n	8042d4c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8042d3a:	687b      	ldr	r3, [r7, #4]
 8042d3c:	6818      	ldr	r0, [r3, #0]
 8042d3e:	687b      	ldr	r3, [r7, #4]
 8042d40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8042d44:	461a      	mov	r2, r3
 8042d46:	2101      	movs	r1, #1
 8042d48:	f005 fa7e 	bl	8048248 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8042d4c:	2300      	movs	r3, #0
}
 8042d4e:	4618      	mov	r0, r3
 8042d50:	3718      	adds	r7, #24
 8042d52:	46bd      	mov	sp, r7
 8042d54:	bd80      	pop	{r7, pc}
 8042d56:	bf00      	nop
 8042d58:	4f54300a 	.word	0x4f54300a

08042d5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8042d5c:	b480      	push	{r7}
 8042d5e:	b085      	sub	sp, #20
 8042d60:	af00      	add	r7, sp, #0
 8042d62:	6078      	str	r0, [r7, #4]
 8042d64:	460b      	mov	r3, r1
 8042d66:	70fb      	strb	r3, [r7, #3]
 8042d68:	4613      	mov	r3, r2
 8042d6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8042d6c:	687b      	ldr	r3, [r7, #4]
 8042d6e:	681b      	ldr	r3, [r3, #0]
 8042d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042d72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8042d74:	78fb      	ldrb	r3, [r7, #3]
 8042d76:	2b00      	cmp	r3, #0
 8042d78:	d107      	bne.n	8042d8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8042d7a:	883b      	ldrh	r3, [r7, #0]
 8042d7c:	0419      	lsls	r1, r3, #16
 8042d7e:	687b      	ldr	r3, [r7, #4]
 8042d80:	681b      	ldr	r3, [r3, #0]
 8042d82:	68ba      	ldr	r2, [r7, #8]
 8042d84:	430a      	orrs	r2, r1
 8042d86:	629a      	str	r2, [r3, #40]	@ 0x28
 8042d88:	e028      	b.n	8042ddc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8042d8a:	687b      	ldr	r3, [r7, #4]
 8042d8c:	681b      	ldr	r3, [r3, #0]
 8042d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8042d90:	0c1b      	lsrs	r3, r3, #16
 8042d92:	68ba      	ldr	r2, [r7, #8]
 8042d94:	4413      	add	r3, r2
 8042d96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8042d98:	2300      	movs	r3, #0
 8042d9a:	73fb      	strb	r3, [r7, #15]
 8042d9c:	e00d      	b.n	8042dba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8042d9e:	687b      	ldr	r3, [r7, #4]
 8042da0:	681a      	ldr	r2, [r3, #0]
 8042da2:	7bfb      	ldrb	r3, [r7, #15]
 8042da4:	3340      	adds	r3, #64	@ 0x40
 8042da6:	009b      	lsls	r3, r3, #2
 8042da8:	4413      	add	r3, r2
 8042daa:	685b      	ldr	r3, [r3, #4]
 8042dac:	0c1b      	lsrs	r3, r3, #16
 8042dae:	68ba      	ldr	r2, [r7, #8]
 8042db0:	4413      	add	r3, r2
 8042db2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8042db4:	7bfb      	ldrb	r3, [r7, #15]
 8042db6:	3301      	adds	r3, #1
 8042db8:	73fb      	strb	r3, [r7, #15]
 8042dba:	7bfa      	ldrb	r2, [r7, #15]
 8042dbc:	78fb      	ldrb	r3, [r7, #3]
 8042dbe:	3b01      	subs	r3, #1
 8042dc0:	429a      	cmp	r2, r3
 8042dc2:	d3ec      	bcc.n	8042d9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8042dc4:	883b      	ldrh	r3, [r7, #0]
 8042dc6:	0418      	lsls	r0, r3, #16
 8042dc8:	687b      	ldr	r3, [r7, #4]
 8042dca:	6819      	ldr	r1, [r3, #0]
 8042dcc:	78fb      	ldrb	r3, [r7, #3]
 8042dce:	3b01      	subs	r3, #1
 8042dd0:	68ba      	ldr	r2, [r7, #8]
 8042dd2:	4302      	orrs	r2, r0
 8042dd4:	3340      	adds	r3, #64	@ 0x40
 8042dd6:	009b      	lsls	r3, r3, #2
 8042dd8:	440b      	add	r3, r1
 8042dda:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8042ddc:	2300      	movs	r3, #0
}
 8042dde:	4618      	mov	r0, r3
 8042de0:	3714      	adds	r7, #20
 8042de2:	46bd      	mov	sp, r7
 8042de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042de8:	4770      	bx	lr

08042dea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8042dea:	b480      	push	{r7}
 8042dec:	b083      	sub	sp, #12
 8042dee:	af00      	add	r7, sp, #0
 8042df0:	6078      	str	r0, [r7, #4]
 8042df2:	460b      	mov	r3, r1
 8042df4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8042df6:	687b      	ldr	r3, [r7, #4]
 8042df8:	681b      	ldr	r3, [r3, #0]
 8042dfa:	887a      	ldrh	r2, [r7, #2]
 8042dfc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8042dfe:	2300      	movs	r3, #0
}
 8042e00:	4618      	mov	r0, r3
 8042e02:	370c      	adds	r7, #12
 8042e04:	46bd      	mov	sp, r7
 8042e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e0a:	4770      	bx	lr

08042e0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8042e0c:	b480      	push	{r7}
 8042e0e:	b085      	sub	sp, #20
 8042e10:	af00      	add	r7, sp, #0
 8042e12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8042e14:	687b      	ldr	r3, [r7, #4]
 8042e16:	681b      	ldr	r3, [r3, #0]
 8042e18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8042e1a:	687b      	ldr	r3, [r7, #4]
 8042e1c:	2201      	movs	r2, #1
 8042e1e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8042e22:	687b      	ldr	r3, [r7, #4]
 8042e24:	2200      	movs	r2, #0
 8042e26:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8042e2a:	68fb      	ldr	r3, [r7, #12]
 8042e2c:	699b      	ldr	r3, [r3, #24]
 8042e2e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8042e32:	68fb      	ldr	r3, [r7, #12]
 8042e34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8042e36:	68fb      	ldr	r3, [r7, #12]
 8042e38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8042e3a:	4b05      	ldr	r3, [pc, #20]	@ (8042e50 <HAL_PCDEx_ActivateLPM+0x44>)
 8042e3c:	4313      	orrs	r3, r2
 8042e3e:	68fa      	ldr	r2, [r7, #12]
 8042e40:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8042e42:	2300      	movs	r3, #0
}
 8042e44:	4618      	mov	r0, r3
 8042e46:	3714      	adds	r7, #20
 8042e48:	46bd      	mov	sp, r7
 8042e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e4e:	4770      	bx	lr
 8042e50:	10000003 	.word	0x10000003

08042e54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8042e54:	b480      	push	{r7}
 8042e56:	b083      	sub	sp, #12
 8042e58:	af00      	add	r7, sp, #0
 8042e5a:	6078      	str	r0, [r7, #4]
 8042e5c:	460b      	mov	r3, r1
 8042e5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8042e60:	bf00      	nop
 8042e62:	370c      	adds	r7, #12
 8042e64:	46bd      	mov	sp, r7
 8042e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e6a:	4770      	bx	lr

08042e6c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8042e6c:	b580      	push	{r7, lr}
 8042e6e:	b084      	sub	sp, #16
 8042e70:	af00      	add	r7, sp, #0
 8042e72:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8042e74:	4b29      	ldr	r3, [pc, #164]	@ (8042f1c <HAL_PWREx_ConfigSupply+0xb0>)
 8042e76:	68db      	ldr	r3, [r3, #12]
 8042e78:	f003 0307 	and.w	r3, r3, #7
 8042e7c:	2b06      	cmp	r3, #6
 8042e7e:	d00a      	beq.n	8042e96 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8042e80:	4b26      	ldr	r3, [pc, #152]	@ (8042f1c <HAL_PWREx_ConfigSupply+0xb0>)
 8042e82:	68db      	ldr	r3, [r3, #12]
 8042e84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8042e88:	687a      	ldr	r2, [r7, #4]
 8042e8a:	429a      	cmp	r2, r3
 8042e8c:	d001      	beq.n	8042e92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8042e8e:	2301      	movs	r3, #1
 8042e90:	e040      	b.n	8042f14 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8042e92:	2300      	movs	r3, #0
 8042e94:	e03e      	b.n	8042f14 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8042e96:	4b21      	ldr	r3, [pc, #132]	@ (8042f1c <HAL_PWREx_ConfigSupply+0xb0>)
 8042e98:	68db      	ldr	r3, [r3, #12]
 8042e9a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8042e9e:	491f      	ldr	r1, [pc, #124]	@ (8042f1c <HAL_PWREx_ConfigSupply+0xb0>)
 8042ea0:	687b      	ldr	r3, [r7, #4]
 8042ea2:	4313      	orrs	r3, r2
 8042ea4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8042ea6:	f7fe f917 	bl	80410d8 <HAL_GetTick>
 8042eaa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8042eac:	e009      	b.n	8042ec2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8042eae:	f7fe f913 	bl	80410d8 <HAL_GetTick>
 8042eb2:	4602      	mov	r2, r0
 8042eb4:	68fb      	ldr	r3, [r7, #12]
 8042eb6:	1ad3      	subs	r3, r2, r3
 8042eb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8042ebc:	d901      	bls.n	8042ec2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8042ebe:	2301      	movs	r3, #1
 8042ec0:	e028      	b.n	8042f14 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8042ec2:	4b16      	ldr	r3, [pc, #88]	@ (8042f1c <HAL_PWREx_ConfigSupply+0xb0>)
 8042ec4:	685b      	ldr	r3, [r3, #4]
 8042ec6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8042eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8042ece:	d1ee      	bne.n	8042eae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8042ed0:	687b      	ldr	r3, [r7, #4]
 8042ed2:	2b1e      	cmp	r3, #30
 8042ed4:	d008      	beq.n	8042ee8 <HAL_PWREx_ConfigSupply+0x7c>
 8042ed6:	687b      	ldr	r3, [r7, #4]
 8042ed8:	2b2e      	cmp	r3, #46	@ 0x2e
 8042eda:	d005      	beq.n	8042ee8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8042edc:	687b      	ldr	r3, [r7, #4]
 8042ede:	2b1d      	cmp	r3, #29
 8042ee0:	d002      	beq.n	8042ee8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8042ee2:	687b      	ldr	r3, [r7, #4]
 8042ee4:	2b2d      	cmp	r3, #45	@ 0x2d
 8042ee6:	d114      	bne.n	8042f12 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8042ee8:	f7fe f8f6 	bl	80410d8 <HAL_GetTick>
 8042eec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8042eee:	e009      	b.n	8042f04 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8042ef0:	f7fe f8f2 	bl	80410d8 <HAL_GetTick>
 8042ef4:	4602      	mov	r2, r0
 8042ef6:	68fb      	ldr	r3, [r7, #12]
 8042ef8:	1ad3      	subs	r3, r2, r3
 8042efa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8042efe:	d901      	bls.n	8042f04 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8042f00:	2301      	movs	r3, #1
 8042f02:	e007      	b.n	8042f14 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8042f04:	4b05      	ldr	r3, [pc, #20]	@ (8042f1c <HAL_PWREx_ConfigSupply+0xb0>)
 8042f06:	68db      	ldr	r3, [r3, #12]
 8042f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8042f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8042f10:	d1ee      	bne.n	8042ef0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8042f12:	2300      	movs	r3, #0
}
 8042f14:	4618      	mov	r0, r3
 8042f16:	3710      	adds	r7, #16
 8042f18:	46bd      	mov	sp, r7
 8042f1a:	bd80      	pop	{r7, pc}
 8042f1c:	58024800 	.word	0x58024800

08042f20 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8042f20:	b480      	push	{r7}
 8042f22:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8042f24:	4b05      	ldr	r3, [pc, #20]	@ (8042f3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8042f26:	68db      	ldr	r3, [r3, #12]
 8042f28:	4a04      	ldr	r2, [pc, #16]	@ (8042f3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8042f2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8042f2e:	60d3      	str	r3, [r2, #12]
}
 8042f30:	bf00      	nop
 8042f32:	46bd      	mov	sp, r7
 8042f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f38:	4770      	bx	lr
 8042f3a:	bf00      	nop
 8042f3c:	58024800 	.word	0x58024800

08042f40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8042f40:	b580      	push	{r7, lr}
 8042f42:	b08c      	sub	sp, #48	@ 0x30
 8042f44:	af00      	add	r7, sp, #0
 8042f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8042f48:	687b      	ldr	r3, [r7, #4]
 8042f4a:	2b00      	cmp	r3, #0
 8042f4c:	d102      	bne.n	8042f54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8042f4e:	2301      	movs	r3, #1
 8042f50:	f000 bc48 	b.w	80437e4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8042f54:	687b      	ldr	r3, [r7, #4]
 8042f56:	681b      	ldr	r3, [r3, #0]
 8042f58:	f003 0301 	and.w	r3, r3, #1
 8042f5c:	2b00      	cmp	r3, #0
 8042f5e:	f000 8088 	beq.w	8043072 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8042f62:	4b99      	ldr	r3, [pc, #612]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8042f64:	691b      	ldr	r3, [r3, #16]
 8042f66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8042f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8042f6c:	4b96      	ldr	r3, [pc, #600]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8042f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8042f70:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8042f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8042f74:	2b10      	cmp	r3, #16
 8042f76:	d007      	beq.n	8042f88 <HAL_RCC_OscConfig+0x48>
 8042f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8042f7a:	2b18      	cmp	r3, #24
 8042f7c:	d111      	bne.n	8042fa2 <HAL_RCC_OscConfig+0x62>
 8042f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8042f80:	f003 0303 	and.w	r3, r3, #3
 8042f84:	2b02      	cmp	r3, #2
 8042f86:	d10c      	bne.n	8042fa2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8042f88:	4b8f      	ldr	r3, [pc, #572]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8042f8a:	681b      	ldr	r3, [r3, #0]
 8042f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8042f90:	2b00      	cmp	r3, #0
 8042f92:	d06d      	beq.n	8043070 <HAL_RCC_OscConfig+0x130>
 8042f94:	687b      	ldr	r3, [r7, #4]
 8042f96:	685b      	ldr	r3, [r3, #4]
 8042f98:	2b00      	cmp	r3, #0
 8042f9a:	d169      	bne.n	8043070 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8042f9c:	2301      	movs	r3, #1
 8042f9e:	f000 bc21 	b.w	80437e4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8042fa2:	687b      	ldr	r3, [r7, #4]
 8042fa4:	685b      	ldr	r3, [r3, #4]
 8042fa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8042faa:	d106      	bne.n	8042fba <HAL_RCC_OscConfig+0x7a>
 8042fac:	4b86      	ldr	r3, [pc, #536]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8042fae:	681b      	ldr	r3, [r3, #0]
 8042fb0:	4a85      	ldr	r2, [pc, #532]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8042fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8042fb6:	6013      	str	r3, [r2, #0]
 8042fb8:	e02e      	b.n	8043018 <HAL_RCC_OscConfig+0xd8>
 8042fba:	687b      	ldr	r3, [r7, #4]
 8042fbc:	685b      	ldr	r3, [r3, #4]
 8042fbe:	2b00      	cmp	r3, #0
 8042fc0:	d10c      	bne.n	8042fdc <HAL_RCC_OscConfig+0x9c>
 8042fc2:	4b81      	ldr	r3, [pc, #516]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8042fc4:	681b      	ldr	r3, [r3, #0]
 8042fc6:	4a80      	ldr	r2, [pc, #512]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8042fc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8042fcc:	6013      	str	r3, [r2, #0]
 8042fce:	4b7e      	ldr	r3, [pc, #504]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8042fd0:	681b      	ldr	r3, [r3, #0]
 8042fd2:	4a7d      	ldr	r2, [pc, #500]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8042fd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8042fd8:	6013      	str	r3, [r2, #0]
 8042fda:	e01d      	b.n	8043018 <HAL_RCC_OscConfig+0xd8>
 8042fdc:	687b      	ldr	r3, [r7, #4]
 8042fde:	685b      	ldr	r3, [r3, #4]
 8042fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8042fe4:	d10c      	bne.n	8043000 <HAL_RCC_OscConfig+0xc0>
 8042fe6:	4b78      	ldr	r3, [pc, #480]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8042fe8:	681b      	ldr	r3, [r3, #0]
 8042fea:	4a77      	ldr	r2, [pc, #476]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8042fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8042ff0:	6013      	str	r3, [r2, #0]
 8042ff2:	4b75      	ldr	r3, [pc, #468]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8042ff4:	681b      	ldr	r3, [r3, #0]
 8042ff6:	4a74      	ldr	r2, [pc, #464]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8042ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8042ffc:	6013      	str	r3, [r2, #0]
 8042ffe:	e00b      	b.n	8043018 <HAL_RCC_OscConfig+0xd8>
 8043000:	4b71      	ldr	r3, [pc, #452]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8043002:	681b      	ldr	r3, [r3, #0]
 8043004:	4a70      	ldr	r2, [pc, #448]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8043006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 804300a:	6013      	str	r3, [r2, #0]
 804300c:	4b6e      	ldr	r3, [pc, #440]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 804300e:	681b      	ldr	r3, [r3, #0]
 8043010:	4a6d      	ldr	r2, [pc, #436]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8043012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8043016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8043018:	687b      	ldr	r3, [r7, #4]
 804301a:	685b      	ldr	r3, [r3, #4]
 804301c:	2b00      	cmp	r3, #0
 804301e:	d013      	beq.n	8043048 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043020:	f7fe f85a 	bl	80410d8 <HAL_GetTick>
 8043024:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8043026:	e008      	b.n	804303a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8043028:	f7fe f856 	bl	80410d8 <HAL_GetTick>
 804302c:	4602      	mov	r2, r0
 804302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043030:	1ad3      	subs	r3, r2, r3
 8043032:	2b64      	cmp	r3, #100	@ 0x64
 8043034:	d901      	bls.n	804303a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8043036:	2303      	movs	r3, #3
 8043038:	e3d4      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 804303a:	4b63      	ldr	r3, [pc, #396]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 804303c:	681b      	ldr	r3, [r3, #0]
 804303e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8043042:	2b00      	cmp	r3, #0
 8043044:	d0f0      	beq.n	8043028 <HAL_RCC_OscConfig+0xe8>
 8043046:	e014      	b.n	8043072 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043048:	f7fe f846 	bl	80410d8 <HAL_GetTick>
 804304c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 804304e:	e008      	b.n	8043062 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8043050:	f7fe f842 	bl	80410d8 <HAL_GetTick>
 8043054:	4602      	mov	r2, r0
 8043056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043058:	1ad3      	subs	r3, r2, r3
 804305a:	2b64      	cmp	r3, #100	@ 0x64
 804305c:	d901      	bls.n	8043062 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 804305e:	2303      	movs	r3, #3
 8043060:	e3c0      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8043062:	4b59      	ldr	r3, [pc, #356]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8043064:	681b      	ldr	r3, [r3, #0]
 8043066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804306a:	2b00      	cmp	r3, #0
 804306c:	d1f0      	bne.n	8043050 <HAL_RCC_OscConfig+0x110>
 804306e:	e000      	b.n	8043072 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8043070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8043072:	687b      	ldr	r3, [r7, #4]
 8043074:	681b      	ldr	r3, [r3, #0]
 8043076:	f003 0302 	and.w	r3, r3, #2
 804307a:	2b00      	cmp	r3, #0
 804307c:	f000 80ca 	beq.w	8043214 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8043080:	4b51      	ldr	r3, [pc, #324]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8043082:	691b      	ldr	r3, [r3, #16]
 8043084:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8043088:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 804308a:	4b4f      	ldr	r3, [pc, #316]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 804308c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804308e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8043090:	6a3b      	ldr	r3, [r7, #32]
 8043092:	2b00      	cmp	r3, #0
 8043094:	d007      	beq.n	80430a6 <HAL_RCC_OscConfig+0x166>
 8043096:	6a3b      	ldr	r3, [r7, #32]
 8043098:	2b18      	cmp	r3, #24
 804309a:	d156      	bne.n	804314a <HAL_RCC_OscConfig+0x20a>
 804309c:	69fb      	ldr	r3, [r7, #28]
 804309e:	f003 0303 	and.w	r3, r3, #3
 80430a2:	2b00      	cmp	r3, #0
 80430a4:	d151      	bne.n	804314a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80430a6:	4b48      	ldr	r3, [pc, #288]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 80430a8:	681b      	ldr	r3, [r3, #0]
 80430aa:	f003 0304 	and.w	r3, r3, #4
 80430ae:	2b00      	cmp	r3, #0
 80430b0:	d005      	beq.n	80430be <HAL_RCC_OscConfig+0x17e>
 80430b2:	687b      	ldr	r3, [r7, #4]
 80430b4:	68db      	ldr	r3, [r3, #12]
 80430b6:	2b00      	cmp	r3, #0
 80430b8:	d101      	bne.n	80430be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80430ba:	2301      	movs	r3, #1
 80430bc:	e392      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80430be:	4b42      	ldr	r3, [pc, #264]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 80430c0:	681b      	ldr	r3, [r3, #0]
 80430c2:	f023 0219 	bic.w	r2, r3, #25
 80430c6:	687b      	ldr	r3, [r7, #4]
 80430c8:	68db      	ldr	r3, [r3, #12]
 80430ca:	493f      	ldr	r1, [pc, #252]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 80430cc:	4313      	orrs	r3, r2
 80430ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80430d0:	f7fe f802 	bl	80410d8 <HAL_GetTick>
 80430d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80430d6:	e008      	b.n	80430ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80430d8:	f7fd fffe 	bl	80410d8 <HAL_GetTick>
 80430dc:	4602      	mov	r2, r0
 80430de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80430e0:	1ad3      	subs	r3, r2, r3
 80430e2:	2b02      	cmp	r3, #2
 80430e4:	d901      	bls.n	80430ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80430e6:	2303      	movs	r3, #3
 80430e8:	e37c      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80430ea:	4b37      	ldr	r3, [pc, #220]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 80430ec:	681b      	ldr	r3, [r3, #0]
 80430ee:	f003 0304 	and.w	r3, r3, #4
 80430f2:	2b00      	cmp	r3, #0
 80430f4:	d0f0      	beq.n	80430d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80430f6:	f7fe f81f 	bl	8041138 <HAL_GetREVID>
 80430fa:	4603      	mov	r3, r0
 80430fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8043100:	4293      	cmp	r3, r2
 8043102:	d817      	bhi.n	8043134 <HAL_RCC_OscConfig+0x1f4>
 8043104:	687b      	ldr	r3, [r7, #4]
 8043106:	691b      	ldr	r3, [r3, #16]
 8043108:	2b40      	cmp	r3, #64	@ 0x40
 804310a:	d108      	bne.n	804311e <HAL_RCC_OscConfig+0x1de>
 804310c:	4b2e      	ldr	r3, [pc, #184]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 804310e:	685b      	ldr	r3, [r3, #4]
 8043110:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8043114:	4a2c      	ldr	r2, [pc, #176]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8043116:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 804311a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 804311c:	e07a      	b.n	8043214 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804311e:	4b2a      	ldr	r3, [pc, #168]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8043120:	685b      	ldr	r3, [r3, #4]
 8043122:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8043126:	687b      	ldr	r3, [r7, #4]
 8043128:	691b      	ldr	r3, [r3, #16]
 804312a:	031b      	lsls	r3, r3, #12
 804312c:	4926      	ldr	r1, [pc, #152]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 804312e:	4313      	orrs	r3, r2
 8043130:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8043132:	e06f      	b.n	8043214 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043134:	4b24      	ldr	r3, [pc, #144]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8043136:	685b      	ldr	r3, [r3, #4]
 8043138:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 804313c:	687b      	ldr	r3, [r7, #4]
 804313e:	691b      	ldr	r3, [r3, #16]
 8043140:	061b      	lsls	r3, r3, #24
 8043142:	4921      	ldr	r1, [pc, #132]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8043144:	4313      	orrs	r3, r2
 8043146:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8043148:	e064      	b.n	8043214 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 804314a:	687b      	ldr	r3, [r7, #4]
 804314c:	68db      	ldr	r3, [r3, #12]
 804314e:	2b00      	cmp	r3, #0
 8043150:	d047      	beq.n	80431e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8043152:	4b1d      	ldr	r3, [pc, #116]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8043154:	681b      	ldr	r3, [r3, #0]
 8043156:	f023 0219 	bic.w	r2, r3, #25
 804315a:	687b      	ldr	r3, [r7, #4]
 804315c:	68db      	ldr	r3, [r3, #12]
 804315e:	491a      	ldr	r1, [pc, #104]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8043160:	4313      	orrs	r3, r2
 8043162:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043164:	f7fd ffb8 	bl	80410d8 <HAL_GetTick>
 8043168:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 804316a:	e008      	b.n	804317e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 804316c:	f7fd ffb4 	bl	80410d8 <HAL_GetTick>
 8043170:	4602      	mov	r2, r0
 8043172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043174:	1ad3      	subs	r3, r2, r3
 8043176:	2b02      	cmp	r3, #2
 8043178:	d901      	bls.n	804317e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 804317a:	2303      	movs	r3, #3
 804317c:	e332      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 804317e:	4b12      	ldr	r3, [pc, #72]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 8043180:	681b      	ldr	r3, [r3, #0]
 8043182:	f003 0304 	and.w	r3, r3, #4
 8043186:	2b00      	cmp	r3, #0
 8043188:	d0f0      	beq.n	804316c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804318a:	f7fd ffd5 	bl	8041138 <HAL_GetREVID>
 804318e:	4603      	mov	r3, r0
 8043190:	f241 0203 	movw	r2, #4099	@ 0x1003
 8043194:	4293      	cmp	r3, r2
 8043196:	d819      	bhi.n	80431cc <HAL_RCC_OscConfig+0x28c>
 8043198:	687b      	ldr	r3, [r7, #4]
 804319a:	691b      	ldr	r3, [r3, #16]
 804319c:	2b40      	cmp	r3, #64	@ 0x40
 804319e:	d108      	bne.n	80431b2 <HAL_RCC_OscConfig+0x272>
 80431a0:	4b09      	ldr	r3, [pc, #36]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 80431a2:	685b      	ldr	r3, [r3, #4]
 80431a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80431a8:	4a07      	ldr	r2, [pc, #28]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 80431aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80431ae:	6053      	str	r3, [r2, #4]
 80431b0:	e030      	b.n	8043214 <HAL_RCC_OscConfig+0x2d4>
 80431b2:	4b05      	ldr	r3, [pc, #20]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 80431b4:	685b      	ldr	r3, [r3, #4]
 80431b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80431ba:	687b      	ldr	r3, [r7, #4]
 80431bc:	691b      	ldr	r3, [r3, #16]
 80431be:	031b      	lsls	r3, r3, #12
 80431c0:	4901      	ldr	r1, [pc, #4]	@ (80431c8 <HAL_RCC_OscConfig+0x288>)
 80431c2:	4313      	orrs	r3, r2
 80431c4:	604b      	str	r3, [r1, #4]
 80431c6:	e025      	b.n	8043214 <HAL_RCC_OscConfig+0x2d4>
 80431c8:	58024400 	.word	0x58024400
 80431cc:	4b9a      	ldr	r3, [pc, #616]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 80431ce:	685b      	ldr	r3, [r3, #4]
 80431d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80431d4:	687b      	ldr	r3, [r7, #4]
 80431d6:	691b      	ldr	r3, [r3, #16]
 80431d8:	061b      	lsls	r3, r3, #24
 80431da:	4997      	ldr	r1, [pc, #604]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 80431dc:	4313      	orrs	r3, r2
 80431de:	604b      	str	r3, [r1, #4]
 80431e0:	e018      	b.n	8043214 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80431e2:	4b95      	ldr	r3, [pc, #596]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 80431e4:	681b      	ldr	r3, [r3, #0]
 80431e6:	4a94      	ldr	r2, [pc, #592]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 80431e8:	f023 0301 	bic.w	r3, r3, #1
 80431ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80431ee:	f7fd ff73 	bl	80410d8 <HAL_GetTick>
 80431f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80431f4:	e008      	b.n	8043208 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80431f6:	f7fd ff6f 	bl	80410d8 <HAL_GetTick>
 80431fa:	4602      	mov	r2, r0
 80431fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80431fe:	1ad3      	subs	r3, r2, r3
 8043200:	2b02      	cmp	r3, #2
 8043202:	d901      	bls.n	8043208 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8043204:	2303      	movs	r3, #3
 8043206:	e2ed      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8043208:	4b8b      	ldr	r3, [pc, #556]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 804320a:	681b      	ldr	r3, [r3, #0]
 804320c:	f003 0304 	and.w	r3, r3, #4
 8043210:	2b00      	cmp	r3, #0
 8043212:	d1f0      	bne.n	80431f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8043214:	687b      	ldr	r3, [r7, #4]
 8043216:	681b      	ldr	r3, [r3, #0]
 8043218:	f003 0310 	and.w	r3, r3, #16
 804321c:	2b00      	cmp	r3, #0
 804321e:	f000 80a9 	beq.w	8043374 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8043222:	4b85      	ldr	r3, [pc, #532]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 8043224:	691b      	ldr	r3, [r3, #16]
 8043226:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 804322a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 804322c:	4b82      	ldr	r3, [pc, #520]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 804322e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043230:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8043232:	69bb      	ldr	r3, [r7, #24]
 8043234:	2b08      	cmp	r3, #8
 8043236:	d007      	beq.n	8043248 <HAL_RCC_OscConfig+0x308>
 8043238:	69bb      	ldr	r3, [r7, #24]
 804323a:	2b18      	cmp	r3, #24
 804323c:	d13a      	bne.n	80432b4 <HAL_RCC_OscConfig+0x374>
 804323e:	697b      	ldr	r3, [r7, #20]
 8043240:	f003 0303 	and.w	r3, r3, #3
 8043244:	2b01      	cmp	r3, #1
 8043246:	d135      	bne.n	80432b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8043248:	4b7b      	ldr	r3, [pc, #492]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 804324a:	681b      	ldr	r3, [r3, #0]
 804324c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8043250:	2b00      	cmp	r3, #0
 8043252:	d005      	beq.n	8043260 <HAL_RCC_OscConfig+0x320>
 8043254:	687b      	ldr	r3, [r7, #4]
 8043256:	69db      	ldr	r3, [r3, #28]
 8043258:	2b80      	cmp	r3, #128	@ 0x80
 804325a:	d001      	beq.n	8043260 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 804325c:	2301      	movs	r3, #1
 804325e:	e2c1      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8043260:	f7fd ff6a 	bl	8041138 <HAL_GetREVID>
 8043264:	4603      	mov	r3, r0
 8043266:	f241 0203 	movw	r2, #4099	@ 0x1003
 804326a:	4293      	cmp	r3, r2
 804326c:	d817      	bhi.n	804329e <HAL_RCC_OscConfig+0x35e>
 804326e:	687b      	ldr	r3, [r7, #4]
 8043270:	6a1b      	ldr	r3, [r3, #32]
 8043272:	2b20      	cmp	r3, #32
 8043274:	d108      	bne.n	8043288 <HAL_RCC_OscConfig+0x348>
 8043276:	4b70      	ldr	r3, [pc, #448]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 8043278:	685b      	ldr	r3, [r3, #4]
 804327a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 804327e:	4a6e      	ldr	r2, [pc, #440]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 8043280:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8043284:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8043286:	e075      	b.n	8043374 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8043288:	4b6b      	ldr	r3, [pc, #428]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 804328a:	685b      	ldr	r3, [r3, #4]
 804328c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8043290:	687b      	ldr	r3, [r7, #4]
 8043292:	6a1b      	ldr	r3, [r3, #32]
 8043294:	069b      	lsls	r3, r3, #26
 8043296:	4968      	ldr	r1, [pc, #416]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 8043298:	4313      	orrs	r3, r2
 804329a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 804329c:	e06a      	b.n	8043374 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 804329e:	4b66      	ldr	r3, [pc, #408]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 80432a0:	68db      	ldr	r3, [r3, #12]
 80432a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80432a6:	687b      	ldr	r3, [r7, #4]
 80432a8:	6a1b      	ldr	r3, [r3, #32]
 80432aa:	061b      	lsls	r3, r3, #24
 80432ac:	4962      	ldr	r1, [pc, #392]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 80432ae:	4313      	orrs	r3, r2
 80432b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80432b2:	e05f      	b.n	8043374 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80432b4:	687b      	ldr	r3, [r7, #4]
 80432b6:	69db      	ldr	r3, [r3, #28]
 80432b8:	2b00      	cmp	r3, #0
 80432ba:	d042      	beq.n	8043342 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80432bc:	4b5e      	ldr	r3, [pc, #376]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 80432be:	681b      	ldr	r3, [r3, #0]
 80432c0:	4a5d      	ldr	r2, [pc, #372]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 80432c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80432c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80432c8:	f7fd ff06 	bl	80410d8 <HAL_GetTick>
 80432cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80432ce:	e008      	b.n	80432e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80432d0:	f7fd ff02 	bl	80410d8 <HAL_GetTick>
 80432d4:	4602      	mov	r2, r0
 80432d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80432d8:	1ad3      	subs	r3, r2, r3
 80432da:	2b02      	cmp	r3, #2
 80432dc:	d901      	bls.n	80432e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80432de:	2303      	movs	r3, #3
 80432e0:	e280      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80432e2:	4b55      	ldr	r3, [pc, #340]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 80432e4:	681b      	ldr	r3, [r3, #0]
 80432e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80432ea:	2b00      	cmp	r3, #0
 80432ec:	d0f0      	beq.n	80432d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80432ee:	f7fd ff23 	bl	8041138 <HAL_GetREVID>
 80432f2:	4603      	mov	r3, r0
 80432f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80432f8:	4293      	cmp	r3, r2
 80432fa:	d817      	bhi.n	804332c <HAL_RCC_OscConfig+0x3ec>
 80432fc:	687b      	ldr	r3, [r7, #4]
 80432fe:	6a1b      	ldr	r3, [r3, #32]
 8043300:	2b20      	cmp	r3, #32
 8043302:	d108      	bne.n	8043316 <HAL_RCC_OscConfig+0x3d6>
 8043304:	4b4c      	ldr	r3, [pc, #304]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 8043306:	685b      	ldr	r3, [r3, #4]
 8043308:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 804330c:	4a4a      	ldr	r2, [pc, #296]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 804330e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8043312:	6053      	str	r3, [r2, #4]
 8043314:	e02e      	b.n	8043374 <HAL_RCC_OscConfig+0x434>
 8043316:	4b48      	ldr	r3, [pc, #288]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 8043318:	685b      	ldr	r3, [r3, #4]
 804331a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 804331e:	687b      	ldr	r3, [r7, #4]
 8043320:	6a1b      	ldr	r3, [r3, #32]
 8043322:	069b      	lsls	r3, r3, #26
 8043324:	4944      	ldr	r1, [pc, #272]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 8043326:	4313      	orrs	r3, r2
 8043328:	604b      	str	r3, [r1, #4]
 804332a:	e023      	b.n	8043374 <HAL_RCC_OscConfig+0x434>
 804332c:	4b42      	ldr	r3, [pc, #264]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 804332e:	68db      	ldr	r3, [r3, #12]
 8043330:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8043334:	687b      	ldr	r3, [r7, #4]
 8043336:	6a1b      	ldr	r3, [r3, #32]
 8043338:	061b      	lsls	r3, r3, #24
 804333a:	493f      	ldr	r1, [pc, #252]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 804333c:	4313      	orrs	r3, r2
 804333e:	60cb      	str	r3, [r1, #12]
 8043340:	e018      	b.n	8043374 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8043342:	4b3d      	ldr	r3, [pc, #244]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 8043344:	681b      	ldr	r3, [r3, #0]
 8043346:	4a3c      	ldr	r2, [pc, #240]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 8043348:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 804334c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804334e:	f7fd fec3 	bl	80410d8 <HAL_GetTick>
 8043352:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8043354:	e008      	b.n	8043368 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8043356:	f7fd febf 	bl	80410d8 <HAL_GetTick>
 804335a:	4602      	mov	r2, r0
 804335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804335e:	1ad3      	subs	r3, r2, r3
 8043360:	2b02      	cmp	r3, #2
 8043362:	d901      	bls.n	8043368 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8043364:	2303      	movs	r3, #3
 8043366:	e23d      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8043368:	4b33      	ldr	r3, [pc, #204]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 804336a:	681b      	ldr	r3, [r3, #0]
 804336c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8043370:	2b00      	cmp	r3, #0
 8043372:	d1f0      	bne.n	8043356 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8043374:	687b      	ldr	r3, [r7, #4]
 8043376:	681b      	ldr	r3, [r3, #0]
 8043378:	f003 0308 	and.w	r3, r3, #8
 804337c:	2b00      	cmp	r3, #0
 804337e:	d036      	beq.n	80433ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8043380:	687b      	ldr	r3, [r7, #4]
 8043382:	695b      	ldr	r3, [r3, #20]
 8043384:	2b00      	cmp	r3, #0
 8043386:	d019      	beq.n	80433bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8043388:	4b2b      	ldr	r3, [pc, #172]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 804338a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 804338c:	4a2a      	ldr	r2, [pc, #168]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 804338e:	f043 0301 	orr.w	r3, r3, #1
 8043392:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043394:	f7fd fea0 	bl	80410d8 <HAL_GetTick>
 8043398:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 804339a:	e008      	b.n	80433ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 804339c:	f7fd fe9c 	bl	80410d8 <HAL_GetTick>
 80433a0:	4602      	mov	r2, r0
 80433a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80433a4:	1ad3      	subs	r3, r2, r3
 80433a6:	2b02      	cmp	r3, #2
 80433a8:	d901      	bls.n	80433ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80433aa:	2303      	movs	r3, #3
 80433ac:	e21a      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80433ae:	4b22      	ldr	r3, [pc, #136]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 80433b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80433b2:	f003 0302 	and.w	r3, r3, #2
 80433b6:	2b00      	cmp	r3, #0
 80433b8:	d0f0      	beq.n	804339c <HAL_RCC_OscConfig+0x45c>
 80433ba:	e018      	b.n	80433ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80433bc:	4b1e      	ldr	r3, [pc, #120]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 80433be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80433c0:	4a1d      	ldr	r2, [pc, #116]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 80433c2:	f023 0301 	bic.w	r3, r3, #1
 80433c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80433c8:	f7fd fe86 	bl	80410d8 <HAL_GetTick>
 80433cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80433ce:	e008      	b.n	80433e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80433d0:	f7fd fe82 	bl	80410d8 <HAL_GetTick>
 80433d4:	4602      	mov	r2, r0
 80433d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80433d8:	1ad3      	subs	r3, r2, r3
 80433da:	2b02      	cmp	r3, #2
 80433dc:	d901      	bls.n	80433e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80433de:	2303      	movs	r3, #3
 80433e0:	e200      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80433e2:	4b15      	ldr	r3, [pc, #84]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 80433e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80433e6:	f003 0302 	and.w	r3, r3, #2
 80433ea:	2b00      	cmp	r3, #0
 80433ec:	d1f0      	bne.n	80433d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80433ee:	687b      	ldr	r3, [r7, #4]
 80433f0:	681b      	ldr	r3, [r3, #0]
 80433f2:	f003 0320 	and.w	r3, r3, #32
 80433f6:	2b00      	cmp	r3, #0
 80433f8:	d039      	beq.n	804346e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80433fa:	687b      	ldr	r3, [r7, #4]
 80433fc:	699b      	ldr	r3, [r3, #24]
 80433fe:	2b00      	cmp	r3, #0
 8043400:	d01c      	beq.n	804343c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8043402:	4b0d      	ldr	r3, [pc, #52]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 8043404:	681b      	ldr	r3, [r3, #0]
 8043406:	4a0c      	ldr	r2, [pc, #48]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 8043408:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 804340c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 804340e:	f7fd fe63 	bl	80410d8 <HAL_GetTick>
 8043412:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8043414:	e008      	b.n	8043428 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8043416:	f7fd fe5f 	bl	80410d8 <HAL_GetTick>
 804341a:	4602      	mov	r2, r0
 804341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804341e:	1ad3      	subs	r3, r2, r3
 8043420:	2b02      	cmp	r3, #2
 8043422:	d901      	bls.n	8043428 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8043424:	2303      	movs	r3, #3
 8043426:	e1dd      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8043428:	4b03      	ldr	r3, [pc, #12]	@ (8043438 <HAL_RCC_OscConfig+0x4f8>)
 804342a:	681b      	ldr	r3, [r3, #0]
 804342c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8043430:	2b00      	cmp	r3, #0
 8043432:	d0f0      	beq.n	8043416 <HAL_RCC_OscConfig+0x4d6>
 8043434:	e01b      	b.n	804346e <HAL_RCC_OscConfig+0x52e>
 8043436:	bf00      	nop
 8043438:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 804343c:	4b9b      	ldr	r3, [pc, #620]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 804343e:	681b      	ldr	r3, [r3, #0]
 8043440:	4a9a      	ldr	r2, [pc, #616]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043442:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8043446:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8043448:	f7fd fe46 	bl	80410d8 <HAL_GetTick>
 804344c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 804344e:	e008      	b.n	8043462 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8043450:	f7fd fe42 	bl	80410d8 <HAL_GetTick>
 8043454:	4602      	mov	r2, r0
 8043456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043458:	1ad3      	subs	r3, r2, r3
 804345a:	2b02      	cmp	r3, #2
 804345c:	d901      	bls.n	8043462 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 804345e:	2303      	movs	r3, #3
 8043460:	e1c0      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8043462:	4b92      	ldr	r3, [pc, #584]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043464:	681b      	ldr	r3, [r3, #0]
 8043466:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 804346a:	2b00      	cmp	r3, #0
 804346c:	d1f0      	bne.n	8043450 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 804346e:	687b      	ldr	r3, [r7, #4]
 8043470:	681b      	ldr	r3, [r3, #0]
 8043472:	f003 0304 	and.w	r3, r3, #4
 8043476:	2b00      	cmp	r3, #0
 8043478:	f000 8081 	beq.w	804357e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 804347c:	4b8c      	ldr	r3, [pc, #560]	@ (80436b0 <HAL_RCC_OscConfig+0x770>)
 804347e:	681b      	ldr	r3, [r3, #0]
 8043480:	4a8b      	ldr	r2, [pc, #556]	@ (80436b0 <HAL_RCC_OscConfig+0x770>)
 8043482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8043486:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8043488:	f7fd fe26 	bl	80410d8 <HAL_GetTick>
 804348c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 804348e:	e008      	b.n	80434a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8043490:	f7fd fe22 	bl	80410d8 <HAL_GetTick>
 8043494:	4602      	mov	r2, r0
 8043496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043498:	1ad3      	subs	r3, r2, r3
 804349a:	2b64      	cmp	r3, #100	@ 0x64
 804349c:	d901      	bls.n	80434a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 804349e:	2303      	movs	r3, #3
 80434a0:	e1a0      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80434a2:	4b83      	ldr	r3, [pc, #524]	@ (80436b0 <HAL_RCC_OscConfig+0x770>)
 80434a4:	681b      	ldr	r3, [r3, #0]
 80434a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80434aa:	2b00      	cmp	r3, #0
 80434ac:	d0f0      	beq.n	8043490 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80434ae:	687b      	ldr	r3, [r7, #4]
 80434b0:	689b      	ldr	r3, [r3, #8]
 80434b2:	2b01      	cmp	r3, #1
 80434b4:	d106      	bne.n	80434c4 <HAL_RCC_OscConfig+0x584>
 80434b6:	4b7d      	ldr	r3, [pc, #500]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 80434b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80434ba:	4a7c      	ldr	r2, [pc, #496]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 80434bc:	f043 0301 	orr.w	r3, r3, #1
 80434c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80434c2:	e02d      	b.n	8043520 <HAL_RCC_OscConfig+0x5e0>
 80434c4:	687b      	ldr	r3, [r7, #4]
 80434c6:	689b      	ldr	r3, [r3, #8]
 80434c8:	2b00      	cmp	r3, #0
 80434ca:	d10c      	bne.n	80434e6 <HAL_RCC_OscConfig+0x5a6>
 80434cc:	4b77      	ldr	r3, [pc, #476]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 80434ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80434d0:	4a76      	ldr	r2, [pc, #472]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 80434d2:	f023 0301 	bic.w	r3, r3, #1
 80434d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80434d8:	4b74      	ldr	r3, [pc, #464]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 80434da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80434dc:	4a73      	ldr	r2, [pc, #460]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 80434de:	f023 0304 	bic.w	r3, r3, #4
 80434e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80434e4:	e01c      	b.n	8043520 <HAL_RCC_OscConfig+0x5e0>
 80434e6:	687b      	ldr	r3, [r7, #4]
 80434e8:	689b      	ldr	r3, [r3, #8]
 80434ea:	2b05      	cmp	r3, #5
 80434ec:	d10c      	bne.n	8043508 <HAL_RCC_OscConfig+0x5c8>
 80434ee:	4b6f      	ldr	r3, [pc, #444]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 80434f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80434f2:	4a6e      	ldr	r2, [pc, #440]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 80434f4:	f043 0304 	orr.w	r3, r3, #4
 80434f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80434fa:	4b6c      	ldr	r3, [pc, #432]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 80434fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80434fe:	4a6b      	ldr	r2, [pc, #428]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043500:	f043 0301 	orr.w	r3, r3, #1
 8043504:	6713      	str	r3, [r2, #112]	@ 0x70
 8043506:	e00b      	b.n	8043520 <HAL_RCC_OscConfig+0x5e0>
 8043508:	4b68      	ldr	r3, [pc, #416]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 804350a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804350c:	4a67      	ldr	r2, [pc, #412]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 804350e:	f023 0301 	bic.w	r3, r3, #1
 8043512:	6713      	str	r3, [r2, #112]	@ 0x70
 8043514:	4b65      	ldr	r3, [pc, #404]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043518:	4a64      	ldr	r2, [pc, #400]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 804351a:	f023 0304 	bic.w	r3, r3, #4
 804351e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8043520:	687b      	ldr	r3, [r7, #4]
 8043522:	689b      	ldr	r3, [r3, #8]
 8043524:	2b00      	cmp	r3, #0
 8043526:	d015      	beq.n	8043554 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043528:	f7fd fdd6 	bl	80410d8 <HAL_GetTick>
 804352c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 804352e:	e00a      	b.n	8043546 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8043530:	f7fd fdd2 	bl	80410d8 <HAL_GetTick>
 8043534:	4602      	mov	r2, r0
 8043536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043538:	1ad3      	subs	r3, r2, r3
 804353a:	f241 3288 	movw	r2, #5000	@ 0x1388
 804353e:	4293      	cmp	r3, r2
 8043540:	d901      	bls.n	8043546 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8043542:	2303      	movs	r3, #3
 8043544:	e14e      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8043546:	4b59      	ldr	r3, [pc, #356]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804354a:	f003 0302 	and.w	r3, r3, #2
 804354e:	2b00      	cmp	r3, #0
 8043550:	d0ee      	beq.n	8043530 <HAL_RCC_OscConfig+0x5f0>
 8043552:	e014      	b.n	804357e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043554:	f7fd fdc0 	bl	80410d8 <HAL_GetTick>
 8043558:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 804355a:	e00a      	b.n	8043572 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804355c:	f7fd fdbc 	bl	80410d8 <HAL_GetTick>
 8043560:	4602      	mov	r2, r0
 8043562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043564:	1ad3      	subs	r3, r2, r3
 8043566:	f241 3288 	movw	r2, #5000	@ 0x1388
 804356a:	4293      	cmp	r3, r2
 804356c:	d901      	bls.n	8043572 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 804356e:	2303      	movs	r3, #3
 8043570:	e138      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8043572:	4b4e      	ldr	r3, [pc, #312]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043576:	f003 0302 	and.w	r3, r3, #2
 804357a:	2b00      	cmp	r3, #0
 804357c:	d1ee      	bne.n	804355c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 804357e:	687b      	ldr	r3, [r7, #4]
 8043580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8043582:	2b00      	cmp	r3, #0
 8043584:	f000 812d 	beq.w	80437e2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8043588:	4b48      	ldr	r3, [pc, #288]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 804358a:	691b      	ldr	r3, [r3, #16]
 804358c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8043590:	2b18      	cmp	r3, #24
 8043592:	f000 80bd 	beq.w	8043710 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8043596:	687b      	ldr	r3, [r7, #4]
 8043598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804359a:	2b02      	cmp	r3, #2
 804359c:	f040 809e 	bne.w	80436dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80435a0:	4b42      	ldr	r3, [pc, #264]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 80435a2:	681b      	ldr	r3, [r3, #0]
 80435a4:	4a41      	ldr	r2, [pc, #260]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 80435a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80435aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80435ac:	f7fd fd94 	bl	80410d8 <HAL_GetTick>
 80435b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80435b2:	e008      	b.n	80435c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80435b4:	f7fd fd90 	bl	80410d8 <HAL_GetTick>
 80435b8:	4602      	mov	r2, r0
 80435ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80435bc:	1ad3      	subs	r3, r2, r3
 80435be:	2b02      	cmp	r3, #2
 80435c0:	d901      	bls.n	80435c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80435c2:	2303      	movs	r3, #3
 80435c4:	e10e      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80435c6:	4b39      	ldr	r3, [pc, #228]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 80435c8:	681b      	ldr	r3, [r3, #0]
 80435ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80435ce:	2b00      	cmp	r3, #0
 80435d0:	d1f0      	bne.n	80435b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80435d2:	4b36      	ldr	r3, [pc, #216]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 80435d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80435d6:	4b37      	ldr	r3, [pc, #220]	@ (80436b4 <HAL_RCC_OscConfig+0x774>)
 80435d8:	4013      	ands	r3, r2
 80435da:	687a      	ldr	r2, [r7, #4]
 80435dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80435de:	687a      	ldr	r2, [r7, #4]
 80435e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80435e2:	0112      	lsls	r2, r2, #4
 80435e4:	430a      	orrs	r2, r1
 80435e6:	4931      	ldr	r1, [pc, #196]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 80435e8:	4313      	orrs	r3, r2
 80435ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80435ec:	687b      	ldr	r3, [r7, #4]
 80435ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80435f0:	3b01      	subs	r3, #1
 80435f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80435f6:	687b      	ldr	r3, [r7, #4]
 80435f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80435fa:	3b01      	subs	r3, #1
 80435fc:	025b      	lsls	r3, r3, #9
 80435fe:	b29b      	uxth	r3, r3
 8043600:	431a      	orrs	r2, r3
 8043602:	687b      	ldr	r3, [r7, #4]
 8043604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8043606:	3b01      	subs	r3, #1
 8043608:	041b      	lsls	r3, r3, #16
 804360a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 804360e:	431a      	orrs	r2, r3
 8043610:	687b      	ldr	r3, [r7, #4]
 8043612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8043614:	3b01      	subs	r3, #1
 8043616:	061b      	lsls	r3, r3, #24
 8043618:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 804361c:	4923      	ldr	r1, [pc, #140]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 804361e:	4313      	orrs	r3, r2
 8043620:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8043622:	4b22      	ldr	r3, [pc, #136]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043626:	4a21      	ldr	r2, [pc, #132]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043628:	f023 0301 	bic.w	r3, r3, #1
 804362c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 804362e:	4b1f      	ldr	r3, [pc, #124]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043630:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8043632:	4b21      	ldr	r3, [pc, #132]	@ (80436b8 <HAL_RCC_OscConfig+0x778>)
 8043634:	4013      	ands	r3, r2
 8043636:	687a      	ldr	r2, [r7, #4]
 8043638:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 804363a:	00d2      	lsls	r2, r2, #3
 804363c:	491b      	ldr	r1, [pc, #108]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 804363e:	4313      	orrs	r3, r2
 8043640:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8043642:	4b1a      	ldr	r3, [pc, #104]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043646:	f023 020c 	bic.w	r2, r3, #12
 804364a:	687b      	ldr	r3, [r7, #4]
 804364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804364e:	4917      	ldr	r1, [pc, #92]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043650:	4313      	orrs	r3, r2
 8043652:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8043654:	4b15      	ldr	r3, [pc, #84]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043658:	f023 0202 	bic.w	r2, r3, #2
 804365c:	687b      	ldr	r3, [r7, #4]
 804365e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8043660:	4912      	ldr	r1, [pc, #72]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043662:	4313      	orrs	r3, r2
 8043664:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8043666:	4b11      	ldr	r3, [pc, #68]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804366a:	4a10      	ldr	r2, [pc, #64]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 804366c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8043670:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8043672:	4b0e      	ldr	r3, [pc, #56]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043676:	4a0d      	ldr	r2, [pc, #52]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 804367c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 804367e:	4b0b      	ldr	r3, [pc, #44]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043682:	4a0a      	ldr	r2, [pc, #40]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8043688:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 804368a:	4b08      	ldr	r3, [pc, #32]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 804368c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804368e:	4a07      	ldr	r2, [pc, #28]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043690:	f043 0301 	orr.w	r3, r3, #1
 8043694:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8043696:	4b05      	ldr	r3, [pc, #20]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 8043698:	681b      	ldr	r3, [r3, #0]
 804369a:	4a04      	ldr	r2, [pc, #16]	@ (80436ac <HAL_RCC_OscConfig+0x76c>)
 804369c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80436a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80436a2:	f7fd fd19 	bl	80410d8 <HAL_GetTick>
 80436a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80436a8:	e011      	b.n	80436ce <HAL_RCC_OscConfig+0x78e>
 80436aa:	bf00      	nop
 80436ac:	58024400 	.word	0x58024400
 80436b0:	58024800 	.word	0x58024800
 80436b4:	fffffc0c 	.word	0xfffffc0c
 80436b8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80436bc:	f7fd fd0c 	bl	80410d8 <HAL_GetTick>
 80436c0:	4602      	mov	r2, r0
 80436c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80436c4:	1ad3      	subs	r3, r2, r3
 80436c6:	2b02      	cmp	r3, #2
 80436c8:	d901      	bls.n	80436ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80436ca:	2303      	movs	r3, #3
 80436cc:	e08a      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80436ce:	4b47      	ldr	r3, [pc, #284]	@ (80437ec <HAL_RCC_OscConfig+0x8ac>)
 80436d0:	681b      	ldr	r3, [r3, #0]
 80436d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80436d6:	2b00      	cmp	r3, #0
 80436d8:	d0f0      	beq.n	80436bc <HAL_RCC_OscConfig+0x77c>
 80436da:	e082      	b.n	80437e2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80436dc:	4b43      	ldr	r3, [pc, #268]	@ (80437ec <HAL_RCC_OscConfig+0x8ac>)
 80436de:	681b      	ldr	r3, [r3, #0]
 80436e0:	4a42      	ldr	r2, [pc, #264]	@ (80437ec <HAL_RCC_OscConfig+0x8ac>)
 80436e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80436e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80436e8:	f7fd fcf6 	bl	80410d8 <HAL_GetTick>
 80436ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80436ee:	e008      	b.n	8043702 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80436f0:	f7fd fcf2 	bl	80410d8 <HAL_GetTick>
 80436f4:	4602      	mov	r2, r0
 80436f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80436f8:	1ad3      	subs	r3, r2, r3
 80436fa:	2b02      	cmp	r3, #2
 80436fc:	d901      	bls.n	8043702 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80436fe:	2303      	movs	r3, #3
 8043700:	e070      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8043702:	4b3a      	ldr	r3, [pc, #232]	@ (80437ec <HAL_RCC_OscConfig+0x8ac>)
 8043704:	681b      	ldr	r3, [r3, #0]
 8043706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804370a:	2b00      	cmp	r3, #0
 804370c:	d1f0      	bne.n	80436f0 <HAL_RCC_OscConfig+0x7b0>
 804370e:	e068      	b.n	80437e2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8043710:	4b36      	ldr	r3, [pc, #216]	@ (80437ec <HAL_RCC_OscConfig+0x8ac>)
 8043712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043714:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8043716:	4b35      	ldr	r3, [pc, #212]	@ (80437ec <HAL_RCC_OscConfig+0x8ac>)
 8043718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804371a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804371c:	687b      	ldr	r3, [r7, #4]
 804371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8043720:	2b01      	cmp	r3, #1
 8043722:	d031      	beq.n	8043788 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8043724:	693b      	ldr	r3, [r7, #16]
 8043726:	f003 0203 	and.w	r2, r3, #3
 804372a:	687b      	ldr	r3, [r7, #4]
 804372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804372e:	429a      	cmp	r2, r3
 8043730:	d12a      	bne.n	8043788 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8043732:	693b      	ldr	r3, [r7, #16]
 8043734:	091b      	lsrs	r3, r3, #4
 8043736:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 804373a:	687b      	ldr	r3, [r7, #4]
 804373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804373e:	429a      	cmp	r2, r3
 8043740:	d122      	bne.n	8043788 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8043742:	68fb      	ldr	r3, [r7, #12]
 8043744:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8043748:	687b      	ldr	r3, [r7, #4]
 804374a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804374c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 804374e:	429a      	cmp	r2, r3
 8043750:	d11a      	bne.n	8043788 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8043752:	68fb      	ldr	r3, [r7, #12]
 8043754:	0a5b      	lsrs	r3, r3, #9
 8043756:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804375a:	687b      	ldr	r3, [r7, #4]
 804375c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 804375e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8043760:	429a      	cmp	r2, r3
 8043762:	d111      	bne.n	8043788 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8043764:	68fb      	ldr	r3, [r7, #12]
 8043766:	0c1b      	lsrs	r3, r3, #16
 8043768:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804376c:	687b      	ldr	r3, [r7, #4]
 804376e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8043770:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8043772:	429a      	cmp	r2, r3
 8043774:	d108      	bne.n	8043788 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8043776:	68fb      	ldr	r3, [r7, #12]
 8043778:	0e1b      	lsrs	r3, r3, #24
 804377a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804377e:	687b      	ldr	r3, [r7, #4]
 8043780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8043782:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8043784:	429a      	cmp	r2, r3
 8043786:	d001      	beq.n	804378c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8043788:	2301      	movs	r3, #1
 804378a:	e02b      	b.n	80437e4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 804378c:	4b17      	ldr	r3, [pc, #92]	@ (80437ec <HAL_RCC_OscConfig+0x8ac>)
 804378e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8043790:	08db      	lsrs	r3, r3, #3
 8043792:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8043796:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8043798:	687b      	ldr	r3, [r7, #4]
 804379a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 804379c:	693a      	ldr	r2, [r7, #16]
 804379e:	429a      	cmp	r2, r3
 80437a0:	d01f      	beq.n	80437e2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80437a2:	4b12      	ldr	r3, [pc, #72]	@ (80437ec <HAL_RCC_OscConfig+0x8ac>)
 80437a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80437a6:	4a11      	ldr	r2, [pc, #68]	@ (80437ec <HAL_RCC_OscConfig+0x8ac>)
 80437a8:	f023 0301 	bic.w	r3, r3, #1
 80437ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80437ae:	f7fd fc93 	bl	80410d8 <HAL_GetTick>
 80437b2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80437b4:	bf00      	nop
 80437b6:	f7fd fc8f 	bl	80410d8 <HAL_GetTick>
 80437ba:	4602      	mov	r2, r0
 80437bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80437be:	4293      	cmp	r3, r2
 80437c0:	d0f9      	beq.n	80437b6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80437c2:	4b0a      	ldr	r3, [pc, #40]	@ (80437ec <HAL_RCC_OscConfig+0x8ac>)
 80437c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80437c6:	4b0a      	ldr	r3, [pc, #40]	@ (80437f0 <HAL_RCC_OscConfig+0x8b0>)
 80437c8:	4013      	ands	r3, r2
 80437ca:	687a      	ldr	r2, [r7, #4]
 80437cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80437ce:	00d2      	lsls	r2, r2, #3
 80437d0:	4906      	ldr	r1, [pc, #24]	@ (80437ec <HAL_RCC_OscConfig+0x8ac>)
 80437d2:	4313      	orrs	r3, r2
 80437d4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80437d6:	4b05      	ldr	r3, [pc, #20]	@ (80437ec <HAL_RCC_OscConfig+0x8ac>)
 80437d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80437da:	4a04      	ldr	r2, [pc, #16]	@ (80437ec <HAL_RCC_OscConfig+0x8ac>)
 80437dc:	f043 0301 	orr.w	r3, r3, #1
 80437e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80437e2:	2300      	movs	r3, #0
}
 80437e4:	4618      	mov	r0, r3
 80437e6:	3730      	adds	r7, #48	@ 0x30
 80437e8:	46bd      	mov	sp, r7
 80437ea:	bd80      	pop	{r7, pc}
 80437ec:	58024400 	.word	0x58024400
 80437f0:	ffff0007 	.word	0xffff0007

080437f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80437f4:	b580      	push	{r7, lr}
 80437f6:	b086      	sub	sp, #24
 80437f8:	af00      	add	r7, sp, #0
 80437fa:	6078      	str	r0, [r7, #4]
 80437fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80437fe:	687b      	ldr	r3, [r7, #4]
 8043800:	2b00      	cmp	r3, #0
 8043802:	d101      	bne.n	8043808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8043804:	2301      	movs	r3, #1
 8043806:	e19c      	b.n	8043b42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8043808:	4b8a      	ldr	r3, [pc, #552]	@ (8043a34 <HAL_RCC_ClockConfig+0x240>)
 804380a:	681b      	ldr	r3, [r3, #0]
 804380c:	f003 030f 	and.w	r3, r3, #15
 8043810:	683a      	ldr	r2, [r7, #0]
 8043812:	429a      	cmp	r2, r3
 8043814:	d910      	bls.n	8043838 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8043816:	4b87      	ldr	r3, [pc, #540]	@ (8043a34 <HAL_RCC_ClockConfig+0x240>)
 8043818:	681b      	ldr	r3, [r3, #0]
 804381a:	f023 020f 	bic.w	r2, r3, #15
 804381e:	4985      	ldr	r1, [pc, #532]	@ (8043a34 <HAL_RCC_ClockConfig+0x240>)
 8043820:	683b      	ldr	r3, [r7, #0]
 8043822:	4313      	orrs	r3, r2
 8043824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8043826:	4b83      	ldr	r3, [pc, #524]	@ (8043a34 <HAL_RCC_ClockConfig+0x240>)
 8043828:	681b      	ldr	r3, [r3, #0]
 804382a:	f003 030f 	and.w	r3, r3, #15
 804382e:	683a      	ldr	r2, [r7, #0]
 8043830:	429a      	cmp	r2, r3
 8043832:	d001      	beq.n	8043838 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8043834:	2301      	movs	r3, #1
 8043836:	e184      	b.n	8043b42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8043838:	687b      	ldr	r3, [r7, #4]
 804383a:	681b      	ldr	r3, [r3, #0]
 804383c:	f003 0304 	and.w	r3, r3, #4
 8043840:	2b00      	cmp	r3, #0
 8043842:	d010      	beq.n	8043866 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8043844:	687b      	ldr	r3, [r7, #4]
 8043846:	691a      	ldr	r2, [r3, #16]
 8043848:	4b7b      	ldr	r3, [pc, #492]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 804384a:	699b      	ldr	r3, [r3, #24]
 804384c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8043850:	429a      	cmp	r2, r3
 8043852:	d908      	bls.n	8043866 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8043854:	4b78      	ldr	r3, [pc, #480]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 8043856:	699b      	ldr	r3, [r3, #24]
 8043858:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 804385c:	687b      	ldr	r3, [r7, #4]
 804385e:	691b      	ldr	r3, [r3, #16]
 8043860:	4975      	ldr	r1, [pc, #468]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 8043862:	4313      	orrs	r3, r2
 8043864:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8043866:	687b      	ldr	r3, [r7, #4]
 8043868:	681b      	ldr	r3, [r3, #0]
 804386a:	f003 0308 	and.w	r3, r3, #8
 804386e:	2b00      	cmp	r3, #0
 8043870:	d010      	beq.n	8043894 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8043872:	687b      	ldr	r3, [r7, #4]
 8043874:	695a      	ldr	r2, [r3, #20]
 8043876:	4b70      	ldr	r3, [pc, #448]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 8043878:	69db      	ldr	r3, [r3, #28]
 804387a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 804387e:	429a      	cmp	r2, r3
 8043880:	d908      	bls.n	8043894 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8043882:	4b6d      	ldr	r3, [pc, #436]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 8043884:	69db      	ldr	r3, [r3, #28]
 8043886:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 804388a:	687b      	ldr	r3, [r7, #4]
 804388c:	695b      	ldr	r3, [r3, #20]
 804388e:	496a      	ldr	r1, [pc, #424]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 8043890:	4313      	orrs	r3, r2
 8043892:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8043894:	687b      	ldr	r3, [r7, #4]
 8043896:	681b      	ldr	r3, [r3, #0]
 8043898:	f003 0310 	and.w	r3, r3, #16
 804389c:	2b00      	cmp	r3, #0
 804389e:	d010      	beq.n	80438c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80438a0:	687b      	ldr	r3, [r7, #4]
 80438a2:	699a      	ldr	r2, [r3, #24]
 80438a4:	4b64      	ldr	r3, [pc, #400]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 80438a6:	69db      	ldr	r3, [r3, #28]
 80438a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80438ac:	429a      	cmp	r2, r3
 80438ae:	d908      	bls.n	80438c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80438b0:	4b61      	ldr	r3, [pc, #388]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 80438b2:	69db      	ldr	r3, [r3, #28]
 80438b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80438b8:	687b      	ldr	r3, [r7, #4]
 80438ba:	699b      	ldr	r3, [r3, #24]
 80438bc:	495e      	ldr	r1, [pc, #376]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 80438be:	4313      	orrs	r3, r2
 80438c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80438c2:	687b      	ldr	r3, [r7, #4]
 80438c4:	681b      	ldr	r3, [r3, #0]
 80438c6:	f003 0320 	and.w	r3, r3, #32
 80438ca:	2b00      	cmp	r3, #0
 80438cc:	d010      	beq.n	80438f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80438ce:	687b      	ldr	r3, [r7, #4]
 80438d0:	69da      	ldr	r2, [r3, #28]
 80438d2:	4b59      	ldr	r3, [pc, #356]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 80438d4:	6a1b      	ldr	r3, [r3, #32]
 80438d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80438da:	429a      	cmp	r2, r3
 80438dc:	d908      	bls.n	80438f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80438de:	4b56      	ldr	r3, [pc, #344]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 80438e0:	6a1b      	ldr	r3, [r3, #32]
 80438e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80438e6:	687b      	ldr	r3, [r7, #4]
 80438e8:	69db      	ldr	r3, [r3, #28]
 80438ea:	4953      	ldr	r1, [pc, #332]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 80438ec:	4313      	orrs	r3, r2
 80438ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80438f0:	687b      	ldr	r3, [r7, #4]
 80438f2:	681b      	ldr	r3, [r3, #0]
 80438f4:	f003 0302 	and.w	r3, r3, #2
 80438f8:	2b00      	cmp	r3, #0
 80438fa:	d010      	beq.n	804391e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80438fc:	687b      	ldr	r3, [r7, #4]
 80438fe:	68da      	ldr	r2, [r3, #12]
 8043900:	4b4d      	ldr	r3, [pc, #308]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 8043902:	699b      	ldr	r3, [r3, #24]
 8043904:	f003 030f 	and.w	r3, r3, #15
 8043908:	429a      	cmp	r2, r3
 804390a:	d908      	bls.n	804391e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804390c:	4b4a      	ldr	r3, [pc, #296]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 804390e:	699b      	ldr	r3, [r3, #24]
 8043910:	f023 020f 	bic.w	r2, r3, #15
 8043914:	687b      	ldr	r3, [r7, #4]
 8043916:	68db      	ldr	r3, [r3, #12]
 8043918:	4947      	ldr	r1, [pc, #284]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 804391a:	4313      	orrs	r3, r2
 804391c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 804391e:	687b      	ldr	r3, [r7, #4]
 8043920:	681b      	ldr	r3, [r3, #0]
 8043922:	f003 0301 	and.w	r3, r3, #1
 8043926:	2b00      	cmp	r3, #0
 8043928:	d055      	beq.n	80439d6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 804392a:	4b43      	ldr	r3, [pc, #268]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 804392c:	699b      	ldr	r3, [r3, #24]
 804392e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8043932:	687b      	ldr	r3, [r7, #4]
 8043934:	689b      	ldr	r3, [r3, #8]
 8043936:	4940      	ldr	r1, [pc, #256]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 8043938:	4313      	orrs	r3, r2
 804393a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804393c:	687b      	ldr	r3, [r7, #4]
 804393e:	685b      	ldr	r3, [r3, #4]
 8043940:	2b02      	cmp	r3, #2
 8043942:	d107      	bne.n	8043954 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8043944:	4b3c      	ldr	r3, [pc, #240]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 8043946:	681b      	ldr	r3, [r3, #0]
 8043948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804394c:	2b00      	cmp	r3, #0
 804394e:	d121      	bne.n	8043994 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8043950:	2301      	movs	r3, #1
 8043952:	e0f6      	b.n	8043b42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8043954:	687b      	ldr	r3, [r7, #4]
 8043956:	685b      	ldr	r3, [r3, #4]
 8043958:	2b03      	cmp	r3, #3
 804395a:	d107      	bne.n	804396c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 804395c:	4b36      	ldr	r3, [pc, #216]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 804395e:	681b      	ldr	r3, [r3, #0]
 8043960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8043964:	2b00      	cmp	r3, #0
 8043966:	d115      	bne.n	8043994 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8043968:	2301      	movs	r3, #1
 804396a:	e0ea      	b.n	8043b42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 804396c:	687b      	ldr	r3, [r7, #4]
 804396e:	685b      	ldr	r3, [r3, #4]
 8043970:	2b01      	cmp	r3, #1
 8043972:	d107      	bne.n	8043984 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8043974:	4b30      	ldr	r3, [pc, #192]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 8043976:	681b      	ldr	r3, [r3, #0]
 8043978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804397c:	2b00      	cmp	r3, #0
 804397e:	d109      	bne.n	8043994 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8043980:	2301      	movs	r3, #1
 8043982:	e0de      	b.n	8043b42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8043984:	4b2c      	ldr	r3, [pc, #176]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 8043986:	681b      	ldr	r3, [r3, #0]
 8043988:	f003 0304 	and.w	r3, r3, #4
 804398c:	2b00      	cmp	r3, #0
 804398e:	d101      	bne.n	8043994 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8043990:	2301      	movs	r3, #1
 8043992:	e0d6      	b.n	8043b42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8043994:	4b28      	ldr	r3, [pc, #160]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 8043996:	691b      	ldr	r3, [r3, #16]
 8043998:	f023 0207 	bic.w	r2, r3, #7
 804399c:	687b      	ldr	r3, [r7, #4]
 804399e:	685b      	ldr	r3, [r3, #4]
 80439a0:	4925      	ldr	r1, [pc, #148]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 80439a2:	4313      	orrs	r3, r2
 80439a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80439a6:	f7fd fb97 	bl	80410d8 <HAL_GetTick>
 80439aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80439ac:	e00a      	b.n	80439c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80439ae:	f7fd fb93 	bl	80410d8 <HAL_GetTick>
 80439b2:	4602      	mov	r2, r0
 80439b4:	697b      	ldr	r3, [r7, #20]
 80439b6:	1ad3      	subs	r3, r2, r3
 80439b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80439bc:	4293      	cmp	r3, r2
 80439be:	d901      	bls.n	80439c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80439c0:	2303      	movs	r3, #3
 80439c2:	e0be      	b.n	8043b42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80439c4:	4b1c      	ldr	r3, [pc, #112]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 80439c6:	691b      	ldr	r3, [r3, #16]
 80439c8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80439cc:	687b      	ldr	r3, [r7, #4]
 80439ce:	685b      	ldr	r3, [r3, #4]
 80439d0:	00db      	lsls	r3, r3, #3
 80439d2:	429a      	cmp	r2, r3
 80439d4:	d1eb      	bne.n	80439ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80439d6:	687b      	ldr	r3, [r7, #4]
 80439d8:	681b      	ldr	r3, [r3, #0]
 80439da:	f003 0302 	and.w	r3, r3, #2
 80439de:	2b00      	cmp	r3, #0
 80439e0:	d010      	beq.n	8043a04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80439e2:	687b      	ldr	r3, [r7, #4]
 80439e4:	68da      	ldr	r2, [r3, #12]
 80439e6:	4b14      	ldr	r3, [pc, #80]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 80439e8:	699b      	ldr	r3, [r3, #24]
 80439ea:	f003 030f 	and.w	r3, r3, #15
 80439ee:	429a      	cmp	r2, r3
 80439f0:	d208      	bcs.n	8043a04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80439f2:	4b11      	ldr	r3, [pc, #68]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 80439f4:	699b      	ldr	r3, [r3, #24]
 80439f6:	f023 020f 	bic.w	r2, r3, #15
 80439fa:	687b      	ldr	r3, [r7, #4]
 80439fc:	68db      	ldr	r3, [r3, #12]
 80439fe:	490e      	ldr	r1, [pc, #56]	@ (8043a38 <HAL_RCC_ClockConfig+0x244>)
 8043a00:	4313      	orrs	r3, r2
 8043a02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8043a04:	4b0b      	ldr	r3, [pc, #44]	@ (8043a34 <HAL_RCC_ClockConfig+0x240>)
 8043a06:	681b      	ldr	r3, [r3, #0]
 8043a08:	f003 030f 	and.w	r3, r3, #15
 8043a0c:	683a      	ldr	r2, [r7, #0]
 8043a0e:	429a      	cmp	r2, r3
 8043a10:	d214      	bcs.n	8043a3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8043a12:	4b08      	ldr	r3, [pc, #32]	@ (8043a34 <HAL_RCC_ClockConfig+0x240>)
 8043a14:	681b      	ldr	r3, [r3, #0]
 8043a16:	f023 020f 	bic.w	r2, r3, #15
 8043a1a:	4906      	ldr	r1, [pc, #24]	@ (8043a34 <HAL_RCC_ClockConfig+0x240>)
 8043a1c:	683b      	ldr	r3, [r7, #0]
 8043a1e:	4313      	orrs	r3, r2
 8043a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8043a22:	4b04      	ldr	r3, [pc, #16]	@ (8043a34 <HAL_RCC_ClockConfig+0x240>)
 8043a24:	681b      	ldr	r3, [r3, #0]
 8043a26:	f003 030f 	and.w	r3, r3, #15
 8043a2a:	683a      	ldr	r2, [r7, #0]
 8043a2c:	429a      	cmp	r2, r3
 8043a2e:	d005      	beq.n	8043a3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8043a30:	2301      	movs	r3, #1
 8043a32:	e086      	b.n	8043b42 <HAL_RCC_ClockConfig+0x34e>
 8043a34:	52002000 	.word	0x52002000
 8043a38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8043a3c:	687b      	ldr	r3, [r7, #4]
 8043a3e:	681b      	ldr	r3, [r3, #0]
 8043a40:	f003 0304 	and.w	r3, r3, #4
 8043a44:	2b00      	cmp	r3, #0
 8043a46:	d010      	beq.n	8043a6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8043a48:	687b      	ldr	r3, [r7, #4]
 8043a4a:	691a      	ldr	r2, [r3, #16]
 8043a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8043b4c <HAL_RCC_ClockConfig+0x358>)
 8043a4e:	699b      	ldr	r3, [r3, #24]
 8043a50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8043a54:	429a      	cmp	r2, r3
 8043a56:	d208      	bcs.n	8043a6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8043a58:	4b3c      	ldr	r3, [pc, #240]	@ (8043b4c <HAL_RCC_ClockConfig+0x358>)
 8043a5a:	699b      	ldr	r3, [r3, #24]
 8043a5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8043a60:	687b      	ldr	r3, [r7, #4]
 8043a62:	691b      	ldr	r3, [r3, #16]
 8043a64:	4939      	ldr	r1, [pc, #228]	@ (8043b4c <HAL_RCC_ClockConfig+0x358>)
 8043a66:	4313      	orrs	r3, r2
 8043a68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8043a6a:	687b      	ldr	r3, [r7, #4]
 8043a6c:	681b      	ldr	r3, [r3, #0]
 8043a6e:	f003 0308 	and.w	r3, r3, #8
 8043a72:	2b00      	cmp	r3, #0
 8043a74:	d010      	beq.n	8043a98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8043a76:	687b      	ldr	r3, [r7, #4]
 8043a78:	695a      	ldr	r2, [r3, #20]
 8043a7a:	4b34      	ldr	r3, [pc, #208]	@ (8043b4c <HAL_RCC_ClockConfig+0x358>)
 8043a7c:	69db      	ldr	r3, [r3, #28]
 8043a7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8043a82:	429a      	cmp	r2, r3
 8043a84:	d208      	bcs.n	8043a98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8043a86:	4b31      	ldr	r3, [pc, #196]	@ (8043b4c <HAL_RCC_ClockConfig+0x358>)
 8043a88:	69db      	ldr	r3, [r3, #28]
 8043a8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8043a8e:	687b      	ldr	r3, [r7, #4]
 8043a90:	695b      	ldr	r3, [r3, #20]
 8043a92:	492e      	ldr	r1, [pc, #184]	@ (8043b4c <HAL_RCC_ClockConfig+0x358>)
 8043a94:	4313      	orrs	r3, r2
 8043a96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8043a98:	687b      	ldr	r3, [r7, #4]
 8043a9a:	681b      	ldr	r3, [r3, #0]
 8043a9c:	f003 0310 	and.w	r3, r3, #16
 8043aa0:	2b00      	cmp	r3, #0
 8043aa2:	d010      	beq.n	8043ac6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8043aa4:	687b      	ldr	r3, [r7, #4]
 8043aa6:	699a      	ldr	r2, [r3, #24]
 8043aa8:	4b28      	ldr	r3, [pc, #160]	@ (8043b4c <HAL_RCC_ClockConfig+0x358>)
 8043aaa:	69db      	ldr	r3, [r3, #28]
 8043aac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8043ab0:	429a      	cmp	r2, r3
 8043ab2:	d208      	bcs.n	8043ac6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8043ab4:	4b25      	ldr	r3, [pc, #148]	@ (8043b4c <HAL_RCC_ClockConfig+0x358>)
 8043ab6:	69db      	ldr	r3, [r3, #28]
 8043ab8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8043abc:	687b      	ldr	r3, [r7, #4]
 8043abe:	699b      	ldr	r3, [r3, #24]
 8043ac0:	4922      	ldr	r1, [pc, #136]	@ (8043b4c <HAL_RCC_ClockConfig+0x358>)
 8043ac2:	4313      	orrs	r3, r2
 8043ac4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8043ac6:	687b      	ldr	r3, [r7, #4]
 8043ac8:	681b      	ldr	r3, [r3, #0]
 8043aca:	f003 0320 	and.w	r3, r3, #32
 8043ace:	2b00      	cmp	r3, #0
 8043ad0:	d010      	beq.n	8043af4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8043ad2:	687b      	ldr	r3, [r7, #4]
 8043ad4:	69da      	ldr	r2, [r3, #28]
 8043ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8043b4c <HAL_RCC_ClockConfig+0x358>)
 8043ad8:	6a1b      	ldr	r3, [r3, #32]
 8043ada:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8043ade:	429a      	cmp	r2, r3
 8043ae0:	d208      	bcs.n	8043af4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8043ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8043b4c <HAL_RCC_ClockConfig+0x358>)
 8043ae4:	6a1b      	ldr	r3, [r3, #32]
 8043ae6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8043aea:	687b      	ldr	r3, [r7, #4]
 8043aec:	69db      	ldr	r3, [r3, #28]
 8043aee:	4917      	ldr	r1, [pc, #92]	@ (8043b4c <HAL_RCC_ClockConfig+0x358>)
 8043af0:	4313      	orrs	r3, r2
 8043af2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8043af4:	f000 f89e 	bl	8043c34 <HAL_RCC_GetSysClockFreq>
 8043af8:	4602      	mov	r2, r0
 8043afa:	4b14      	ldr	r3, [pc, #80]	@ (8043b4c <HAL_RCC_ClockConfig+0x358>)
 8043afc:	699b      	ldr	r3, [r3, #24]
 8043afe:	0a1b      	lsrs	r3, r3, #8
 8043b00:	f003 030f 	and.w	r3, r3, #15
 8043b04:	4912      	ldr	r1, [pc, #72]	@ (8043b50 <HAL_RCC_ClockConfig+0x35c>)
 8043b06:	5ccb      	ldrb	r3, [r1, r3]
 8043b08:	f003 031f 	and.w	r3, r3, #31
 8043b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8043b10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8043b12:	4b0e      	ldr	r3, [pc, #56]	@ (8043b4c <HAL_RCC_ClockConfig+0x358>)
 8043b14:	699b      	ldr	r3, [r3, #24]
 8043b16:	f003 030f 	and.w	r3, r3, #15
 8043b1a:	4a0d      	ldr	r2, [pc, #52]	@ (8043b50 <HAL_RCC_ClockConfig+0x35c>)
 8043b1c:	5cd3      	ldrb	r3, [r2, r3]
 8043b1e:	f003 031f 	and.w	r3, r3, #31
 8043b22:	693a      	ldr	r2, [r7, #16]
 8043b24:	fa22 f303 	lsr.w	r3, r2, r3
 8043b28:	4a0a      	ldr	r2, [pc, #40]	@ (8043b54 <HAL_RCC_ClockConfig+0x360>)
 8043b2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8043b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8043b58 <HAL_RCC_ClockConfig+0x364>)
 8043b2e:	693b      	ldr	r3, [r7, #16]
 8043b30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8043b32:	4b0a      	ldr	r3, [pc, #40]	@ (8043b5c <HAL_RCC_ClockConfig+0x368>)
 8043b34:	681b      	ldr	r3, [r3, #0]
 8043b36:	4618      	mov	r0, r3
 8043b38:	f7fd fa84 	bl	8041044 <HAL_InitTick>
 8043b3c:	4603      	mov	r3, r0
 8043b3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8043b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8043b42:	4618      	mov	r0, r3
 8043b44:	3718      	adds	r7, #24
 8043b46:	46bd      	mov	sp, r7
 8043b48:	bd80      	pop	{r7, pc}
 8043b4a:	bf00      	nop
 8043b4c:	58024400 	.word	0x58024400
 8043b50:	0804c2d8 	.word	0x0804c2d8
 8043b54:	24000004 	.word	0x24000004
 8043b58:	24000000 	.word	0x24000000
 8043b5c:	24000008 	.word	0x24000008

08043b60 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8043b60:	b580      	push	{r7, lr}
 8043b62:	b08c      	sub	sp, #48	@ 0x30
 8043b64:	af00      	add	r7, sp, #0
 8043b66:	60f8      	str	r0, [r7, #12]
 8043b68:	60b9      	str	r1, [r7, #8]
 8043b6a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8043b6c:	68fb      	ldr	r3, [r7, #12]
 8043b6e:	2b00      	cmp	r3, #0
 8043b70:	d12a      	bne.n	8043bc8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8043b72:	4b2d      	ldr	r3, [pc, #180]	@ (8043c28 <HAL_RCC_MCOConfig+0xc8>)
 8043b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8043b78:	4a2b      	ldr	r2, [pc, #172]	@ (8043c28 <HAL_RCC_MCOConfig+0xc8>)
 8043b7a:	f043 0301 	orr.w	r3, r3, #1
 8043b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8043b82:	4b29      	ldr	r3, [pc, #164]	@ (8043c28 <HAL_RCC_MCOConfig+0xc8>)
 8043b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8043b88:	f003 0301 	and.w	r3, r3, #1
 8043b8c:	61bb      	str	r3, [r7, #24]
 8043b8e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8043b90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8043b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8043b96:	2302      	movs	r3, #2
 8043b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8043b9a:	2303      	movs	r3, #3
 8043b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043b9e:	2300      	movs	r3, #0
 8043ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8043ba2:	2300      	movs	r3, #0
 8043ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8043ba6:	f107 031c 	add.w	r3, r7, #28
 8043baa:	4619      	mov	r1, r3
 8043bac:	481f      	ldr	r0, [pc, #124]	@ (8043c2c <HAL_RCC_MCOConfig+0xcc>)
 8043bae:	f7fd fcd1 	bl	8041554 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8043bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8043c28 <HAL_RCC_MCOConfig+0xc8>)
 8043bb4:	691b      	ldr	r3, [r3, #16]
 8043bb6:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8043bba:	68b9      	ldr	r1, [r7, #8]
 8043bbc:	687b      	ldr	r3, [r7, #4]
 8043bbe:	430b      	orrs	r3, r1
 8043bc0:	4919      	ldr	r1, [pc, #100]	@ (8043c28 <HAL_RCC_MCOConfig+0xc8>)
 8043bc2:	4313      	orrs	r3, r2
 8043bc4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8043bc6:	e02a      	b.n	8043c1e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8043bc8:	4b17      	ldr	r3, [pc, #92]	@ (8043c28 <HAL_RCC_MCOConfig+0xc8>)
 8043bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8043bce:	4a16      	ldr	r2, [pc, #88]	@ (8043c28 <HAL_RCC_MCOConfig+0xc8>)
 8043bd0:	f043 0304 	orr.w	r3, r3, #4
 8043bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8043bd8:	4b13      	ldr	r3, [pc, #76]	@ (8043c28 <HAL_RCC_MCOConfig+0xc8>)
 8043bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8043bde:	f003 0304 	and.w	r3, r3, #4
 8043be2:	617b      	str	r3, [r7, #20]
 8043be4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8043be6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8043bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8043bec:	2302      	movs	r3, #2
 8043bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8043bf0:	2303      	movs	r3, #3
 8043bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043bf4:	2300      	movs	r3, #0
 8043bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8043bf8:	2300      	movs	r3, #0
 8043bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8043bfc:	f107 031c 	add.w	r3, r7, #28
 8043c00:	4619      	mov	r1, r3
 8043c02:	480b      	ldr	r0, [pc, #44]	@ (8043c30 <HAL_RCC_MCOConfig+0xd0>)
 8043c04:	f7fd fca6 	bl	8041554 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8043c08:	4b07      	ldr	r3, [pc, #28]	@ (8043c28 <HAL_RCC_MCOConfig+0xc8>)
 8043c0a:	691b      	ldr	r3, [r3, #16]
 8043c0c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8043c10:	687b      	ldr	r3, [r7, #4]
 8043c12:	01d9      	lsls	r1, r3, #7
 8043c14:	68bb      	ldr	r3, [r7, #8]
 8043c16:	430b      	orrs	r3, r1
 8043c18:	4903      	ldr	r1, [pc, #12]	@ (8043c28 <HAL_RCC_MCOConfig+0xc8>)
 8043c1a:	4313      	orrs	r3, r2
 8043c1c:	610b      	str	r3, [r1, #16]
}
 8043c1e:	bf00      	nop
 8043c20:	3730      	adds	r7, #48	@ 0x30
 8043c22:	46bd      	mov	sp, r7
 8043c24:	bd80      	pop	{r7, pc}
 8043c26:	bf00      	nop
 8043c28:	58024400 	.word	0x58024400
 8043c2c:	58020000 	.word	0x58020000
 8043c30:	58020800 	.word	0x58020800

08043c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8043c34:	b480      	push	{r7}
 8043c36:	b089      	sub	sp, #36	@ 0x24
 8043c38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8043c3a:	4bb3      	ldr	r3, [pc, #716]	@ (8043f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043c3c:	691b      	ldr	r3, [r3, #16]
 8043c3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8043c42:	2b18      	cmp	r3, #24
 8043c44:	f200 8155 	bhi.w	8043ef2 <HAL_RCC_GetSysClockFreq+0x2be>
 8043c48:	a201      	add	r2, pc, #4	@ (adr r2, 8043c50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8043c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043c4e:	bf00      	nop
 8043c50:	08043cb5 	.word	0x08043cb5
 8043c54:	08043ef3 	.word	0x08043ef3
 8043c58:	08043ef3 	.word	0x08043ef3
 8043c5c:	08043ef3 	.word	0x08043ef3
 8043c60:	08043ef3 	.word	0x08043ef3
 8043c64:	08043ef3 	.word	0x08043ef3
 8043c68:	08043ef3 	.word	0x08043ef3
 8043c6c:	08043ef3 	.word	0x08043ef3
 8043c70:	08043cdb 	.word	0x08043cdb
 8043c74:	08043ef3 	.word	0x08043ef3
 8043c78:	08043ef3 	.word	0x08043ef3
 8043c7c:	08043ef3 	.word	0x08043ef3
 8043c80:	08043ef3 	.word	0x08043ef3
 8043c84:	08043ef3 	.word	0x08043ef3
 8043c88:	08043ef3 	.word	0x08043ef3
 8043c8c:	08043ef3 	.word	0x08043ef3
 8043c90:	08043ce1 	.word	0x08043ce1
 8043c94:	08043ef3 	.word	0x08043ef3
 8043c98:	08043ef3 	.word	0x08043ef3
 8043c9c:	08043ef3 	.word	0x08043ef3
 8043ca0:	08043ef3 	.word	0x08043ef3
 8043ca4:	08043ef3 	.word	0x08043ef3
 8043ca8:	08043ef3 	.word	0x08043ef3
 8043cac:	08043ef3 	.word	0x08043ef3
 8043cb0:	08043ce7 	.word	0x08043ce7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8043cb4:	4b94      	ldr	r3, [pc, #592]	@ (8043f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043cb6:	681b      	ldr	r3, [r3, #0]
 8043cb8:	f003 0320 	and.w	r3, r3, #32
 8043cbc:	2b00      	cmp	r3, #0
 8043cbe:	d009      	beq.n	8043cd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8043cc0:	4b91      	ldr	r3, [pc, #580]	@ (8043f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043cc2:	681b      	ldr	r3, [r3, #0]
 8043cc4:	08db      	lsrs	r3, r3, #3
 8043cc6:	f003 0303 	and.w	r3, r3, #3
 8043cca:	4a90      	ldr	r2, [pc, #576]	@ (8043f0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8043ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8043cd0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8043cd2:	e111      	b.n	8043ef8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8043cd4:	4b8d      	ldr	r3, [pc, #564]	@ (8043f0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8043cd6:	61bb      	str	r3, [r7, #24]
      break;
 8043cd8:	e10e      	b.n	8043ef8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8043cda:	4b8d      	ldr	r3, [pc, #564]	@ (8043f10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8043cdc:	61bb      	str	r3, [r7, #24]
      break;
 8043cde:	e10b      	b.n	8043ef8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8043ce0:	4b8c      	ldr	r3, [pc, #560]	@ (8043f14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8043ce2:	61bb      	str	r3, [r7, #24]
      break;
 8043ce4:	e108      	b.n	8043ef8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8043ce6:	4b88      	ldr	r3, [pc, #544]	@ (8043f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043cea:	f003 0303 	and.w	r3, r3, #3
 8043cee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8043cf0:	4b85      	ldr	r3, [pc, #532]	@ (8043f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043cf4:	091b      	lsrs	r3, r3, #4
 8043cf6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8043cfa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8043cfc:	4b82      	ldr	r3, [pc, #520]	@ (8043f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043d00:	f003 0301 	and.w	r3, r3, #1
 8043d04:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8043d06:	4b80      	ldr	r3, [pc, #512]	@ (8043f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8043d0a:	08db      	lsrs	r3, r3, #3
 8043d0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8043d10:	68fa      	ldr	r2, [r7, #12]
 8043d12:	fb02 f303 	mul.w	r3, r2, r3
 8043d16:	ee07 3a90 	vmov	s15, r3
 8043d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043d1e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8043d22:	693b      	ldr	r3, [r7, #16]
 8043d24:	2b00      	cmp	r3, #0
 8043d26:	f000 80e1 	beq.w	8043eec <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8043d2a:	697b      	ldr	r3, [r7, #20]
 8043d2c:	2b02      	cmp	r3, #2
 8043d2e:	f000 8083 	beq.w	8043e38 <HAL_RCC_GetSysClockFreq+0x204>
 8043d32:	697b      	ldr	r3, [r7, #20]
 8043d34:	2b02      	cmp	r3, #2
 8043d36:	f200 80a1 	bhi.w	8043e7c <HAL_RCC_GetSysClockFreq+0x248>
 8043d3a:	697b      	ldr	r3, [r7, #20]
 8043d3c:	2b00      	cmp	r3, #0
 8043d3e:	d003      	beq.n	8043d48 <HAL_RCC_GetSysClockFreq+0x114>
 8043d40:	697b      	ldr	r3, [r7, #20]
 8043d42:	2b01      	cmp	r3, #1
 8043d44:	d056      	beq.n	8043df4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8043d46:	e099      	b.n	8043e7c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8043d48:	4b6f      	ldr	r3, [pc, #444]	@ (8043f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d4a:	681b      	ldr	r3, [r3, #0]
 8043d4c:	f003 0320 	and.w	r3, r3, #32
 8043d50:	2b00      	cmp	r3, #0
 8043d52:	d02d      	beq.n	8043db0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8043d54:	4b6c      	ldr	r3, [pc, #432]	@ (8043f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d56:	681b      	ldr	r3, [r3, #0]
 8043d58:	08db      	lsrs	r3, r3, #3
 8043d5a:	f003 0303 	and.w	r3, r3, #3
 8043d5e:	4a6b      	ldr	r2, [pc, #428]	@ (8043f0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8043d60:	fa22 f303 	lsr.w	r3, r2, r3
 8043d64:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043d66:	687b      	ldr	r3, [r7, #4]
 8043d68:	ee07 3a90 	vmov	s15, r3
 8043d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043d70:	693b      	ldr	r3, [r7, #16]
 8043d72:	ee07 3a90 	vmov	s15, r3
 8043d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043d7e:	4b62      	ldr	r3, [pc, #392]	@ (8043f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043d86:	ee07 3a90 	vmov	s15, r3
 8043d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043d8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8043d92:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8043f18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043daa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8043dae:	e087      	b.n	8043ec0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043db0:	693b      	ldr	r3, [r7, #16]
 8043db2:	ee07 3a90 	vmov	s15, r3
 8043db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043dba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8043f1c <HAL_RCC_GetSysClockFreq+0x2e8>
 8043dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043dc2:	4b51      	ldr	r3, [pc, #324]	@ (8043f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043dca:	ee07 3a90 	vmov	s15, r3
 8043dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043dd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8043dd6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8043f18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043dee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8043df2:	e065      	b.n	8043ec0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043df4:	693b      	ldr	r3, [r7, #16]
 8043df6:	ee07 3a90 	vmov	s15, r3
 8043dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043dfe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8043f20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8043e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043e06:	4b40      	ldr	r3, [pc, #256]	@ (8043f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043e0e:	ee07 3a90 	vmov	s15, r3
 8043e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043e16:	ed97 6a02 	vldr	s12, [r7, #8]
 8043e1a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8043f18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043e32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8043e36:	e043      	b.n	8043ec0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043e38:	693b      	ldr	r3, [r7, #16]
 8043e3a:	ee07 3a90 	vmov	s15, r3
 8043e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043e42:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8043f24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8043e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8043f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043e52:	ee07 3a90 	vmov	s15, r3
 8043e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043e5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8043e5e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8043f18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043e76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8043e7a:	e021      	b.n	8043ec0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043e7c:	693b      	ldr	r3, [r7, #16]
 8043e7e:	ee07 3a90 	vmov	s15, r3
 8043e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043e86:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8043f20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8043e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8043f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043e96:	ee07 3a90 	vmov	s15, r3
 8043e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8043ea2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8043f18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043eba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8043ebe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8043ec0:	4b11      	ldr	r3, [pc, #68]	@ (8043f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043ec4:	0a5b      	lsrs	r3, r3, #9
 8043ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8043eca:	3301      	adds	r3, #1
 8043ecc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8043ece:	683b      	ldr	r3, [r7, #0]
 8043ed0:	ee07 3a90 	vmov	s15, r3
 8043ed4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8043ed8:	edd7 6a07 	vldr	s13, [r7, #28]
 8043edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8043ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8043ee4:	ee17 3a90 	vmov	r3, s15
 8043ee8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8043eea:	e005      	b.n	8043ef8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8043eec:	2300      	movs	r3, #0
 8043eee:	61bb      	str	r3, [r7, #24]
      break;
 8043ef0:	e002      	b.n	8043ef8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8043ef2:	4b07      	ldr	r3, [pc, #28]	@ (8043f10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8043ef4:	61bb      	str	r3, [r7, #24]
      break;
 8043ef6:	bf00      	nop
  }

  return sysclockfreq;
 8043ef8:	69bb      	ldr	r3, [r7, #24]
}
 8043efa:	4618      	mov	r0, r3
 8043efc:	3724      	adds	r7, #36	@ 0x24
 8043efe:	46bd      	mov	sp, r7
 8043f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f04:	4770      	bx	lr
 8043f06:	bf00      	nop
 8043f08:	58024400 	.word	0x58024400
 8043f0c:	03d09000 	.word	0x03d09000
 8043f10:	003d0900 	.word	0x003d0900
 8043f14:	017d7840 	.word	0x017d7840
 8043f18:	46000000 	.word	0x46000000
 8043f1c:	4c742400 	.word	0x4c742400
 8043f20:	4a742400 	.word	0x4a742400
 8043f24:	4bbebc20 	.word	0x4bbebc20

08043f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8043f28:	b580      	push	{r7, lr}
 8043f2a:	b082      	sub	sp, #8
 8043f2c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8043f2e:	f7ff fe81 	bl	8043c34 <HAL_RCC_GetSysClockFreq>
 8043f32:	4602      	mov	r2, r0
 8043f34:	4b10      	ldr	r3, [pc, #64]	@ (8043f78 <HAL_RCC_GetHCLKFreq+0x50>)
 8043f36:	699b      	ldr	r3, [r3, #24]
 8043f38:	0a1b      	lsrs	r3, r3, #8
 8043f3a:	f003 030f 	and.w	r3, r3, #15
 8043f3e:	490f      	ldr	r1, [pc, #60]	@ (8043f7c <HAL_RCC_GetHCLKFreq+0x54>)
 8043f40:	5ccb      	ldrb	r3, [r1, r3]
 8043f42:	f003 031f 	and.w	r3, r3, #31
 8043f46:	fa22 f303 	lsr.w	r3, r2, r3
 8043f4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8043f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8043f78 <HAL_RCC_GetHCLKFreq+0x50>)
 8043f4e:	699b      	ldr	r3, [r3, #24]
 8043f50:	f003 030f 	and.w	r3, r3, #15
 8043f54:	4a09      	ldr	r2, [pc, #36]	@ (8043f7c <HAL_RCC_GetHCLKFreq+0x54>)
 8043f56:	5cd3      	ldrb	r3, [r2, r3]
 8043f58:	f003 031f 	and.w	r3, r3, #31
 8043f5c:	687a      	ldr	r2, [r7, #4]
 8043f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8043f62:	4a07      	ldr	r2, [pc, #28]	@ (8043f80 <HAL_RCC_GetHCLKFreq+0x58>)
 8043f64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8043f66:	4a07      	ldr	r2, [pc, #28]	@ (8043f84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8043f68:	687b      	ldr	r3, [r7, #4]
 8043f6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8043f6c:	4b04      	ldr	r3, [pc, #16]	@ (8043f80 <HAL_RCC_GetHCLKFreq+0x58>)
 8043f6e:	681b      	ldr	r3, [r3, #0]
}
 8043f70:	4618      	mov	r0, r3
 8043f72:	3708      	adds	r7, #8
 8043f74:	46bd      	mov	sp, r7
 8043f76:	bd80      	pop	{r7, pc}
 8043f78:	58024400 	.word	0x58024400
 8043f7c:	0804c2d8 	.word	0x0804c2d8
 8043f80:	24000004 	.word	0x24000004
 8043f84:	24000000 	.word	0x24000000

08043f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8043f88:	b580      	push	{r7, lr}
 8043f8a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8043f8c:	f7ff ffcc 	bl	8043f28 <HAL_RCC_GetHCLKFreq>
 8043f90:	4602      	mov	r2, r0
 8043f92:	4b06      	ldr	r3, [pc, #24]	@ (8043fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8043f94:	69db      	ldr	r3, [r3, #28]
 8043f96:	091b      	lsrs	r3, r3, #4
 8043f98:	f003 0307 	and.w	r3, r3, #7
 8043f9c:	4904      	ldr	r1, [pc, #16]	@ (8043fb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8043f9e:	5ccb      	ldrb	r3, [r1, r3]
 8043fa0:	f003 031f 	and.w	r3, r3, #31
 8043fa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8043fa8:	4618      	mov	r0, r3
 8043faa:	bd80      	pop	{r7, pc}
 8043fac:	58024400 	.word	0x58024400
 8043fb0:	0804c2d8 	.word	0x0804c2d8

08043fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8043fb4:	b580      	push	{r7, lr}
 8043fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8043fb8:	f7ff ffb6 	bl	8043f28 <HAL_RCC_GetHCLKFreq>
 8043fbc:	4602      	mov	r2, r0
 8043fbe:	4b06      	ldr	r3, [pc, #24]	@ (8043fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8043fc0:	69db      	ldr	r3, [r3, #28]
 8043fc2:	0a1b      	lsrs	r3, r3, #8
 8043fc4:	f003 0307 	and.w	r3, r3, #7
 8043fc8:	4904      	ldr	r1, [pc, #16]	@ (8043fdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8043fca:	5ccb      	ldrb	r3, [r1, r3]
 8043fcc:	f003 031f 	and.w	r3, r3, #31
 8043fd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8043fd4:	4618      	mov	r0, r3
 8043fd6:	bd80      	pop	{r7, pc}
 8043fd8:	58024400 	.word	0x58024400
 8043fdc:	0804c2d8 	.word	0x0804c2d8

08043fe0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8043fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8043fe4:	b0cc      	sub	sp, #304	@ 0x130
 8043fe6:	af00      	add	r7, sp, #0
 8043fe8:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8043fec:	2300      	movs	r3, #0
 8043fee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8043ff2:	2300      	movs	r3, #0
 8043ff4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8043ff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8043ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044000:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8044004:	2500      	movs	r5, #0
 8044006:	ea54 0305 	orrs.w	r3, r4, r5
 804400a:	d049      	beq.n	80440a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 804400c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044010:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8044012:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8044016:	d02f      	beq.n	8044078 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8044018:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 804401c:	d828      	bhi.n	8044070 <HAL_RCCEx_PeriphCLKConfig+0x90>
 804401e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8044022:	d01a      	beq.n	804405a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8044024:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8044028:	d822      	bhi.n	8044070 <HAL_RCCEx_PeriphCLKConfig+0x90>
 804402a:	2b00      	cmp	r3, #0
 804402c:	d003      	beq.n	8044036 <HAL_RCCEx_PeriphCLKConfig+0x56>
 804402e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8044032:	d007      	beq.n	8044044 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8044034:	e01c      	b.n	8044070 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8044036:	4bb8      	ldr	r3, [pc, #736]	@ (8044318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804403a:	4ab7      	ldr	r2, [pc, #732]	@ (8044318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804403c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044040:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8044042:	e01a      	b.n	804407a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8044044:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044048:	3308      	adds	r3, #8
 804404a:	2102      	movs	r1, #2
 804404c:	4618      	mov	r0, r3
 804404e:	f001 fccf 	bl	80459f0 <RCCEx_PLL2_Config>
 8044052:	4603      	mov	r3, r0
 8044054:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8044058:	e00f      	b.n	804407a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 804405a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804405e:	3328      	adds	r3, #40	@ 0x28
 8044060:	2102      	movs	r1, #2
 8044062:	4618      	mov	r0, r3
 8044064:	f001 fd76 	bl	8045b54 <RCCEx_PLL3_Config>
 8044068:	4603      	mov	r3, r0
 804406a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 804406e:	e004      	b.n	804407a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044070:	2301      	movs	r3, #1
 8044072:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044076:	e000      	b.n	804407a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8044078:	bf00      	nop
    }

    if (ret == HAL_OK)
 804407a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804407e:	2b00      	cmp	r3, #0
 8044080:	d10a      	bne.n	8044098 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8044082:	4ba5      	ldr	r3, [pc, #660]	@ (8044318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8044086:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 804408a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804408e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8044090:	4aa1      	ldr	r2, [pc, #644]	@ (8044318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044092:	430b      	orrs	r3, r1
 8044094:	6513      	str	r3, [r2, #80]	@ 0x50
 8044096:	e003      	b.n	80440a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044098:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804409c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80440a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80440a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80440a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80440ac:	f04f 0900 	mov.w	r9, #0
 80440b0:	ea58 0309 	orrs.w	r3, r8, r9
 80440b4:	d047      	beq.n	8044146 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80440b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80440ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80440bc:	2b04      	cmp	r3, #4
 80440be:	d82a      	bhi.n	8044116 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80440c0:	a201      	add	r2, pc, #4	@ (adr r2, 80440c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80440c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80440c6:	bf00      	nop
 80440c8:	080440dd 	.word	0x080440dd
 80440cc:	080440eb 	.word	0x080440eb
 80440d0:	08044101 	.word	0x08044101
 80440d4:	0804411f 	.word	0x0804411f
 80440d8:	0804411f 	.word	0x0804411f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80440dc:	4b8e      	ldr	r3, [pc, #568]	@ (8044318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80440de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80440e0:	4a8d      	ldr	r2, [pc, #564]	@ (8044318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80440e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80440e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80440e8:	e01a      	b.n	8044120 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80440ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80440ee:	3308      	adds	r3, #8
 80440f0:	2100      	movs	r1, #0
 80440f2:	4618      	mov	r0, r3
 80440f4:	f001 fc7c 	bl	80459f0 <RCCEx_PLL2_Config>
 80440f8:	4603      	mov	r3, r0
 80440fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80440fe:	e00f      	b.n	8044120 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8044100:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044104:	3328      	adds	r3, #40	@ 0x28
 8044106:	2100      	movs	r1, #0
 8044108:	4618      	mov	r0, r3
 804410a:	f001 fd23 	bl	8045b54 <RCCEx_PLL3_Config>
 804410e:	4603      	mov	r3, r0
 8044110:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8044114:	e004      	b.n	8044120 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044116:	2301      	movs	r3, #1
 8044118:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 804411c:	e000      	b.n	8044120 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 804411e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044120:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044124:	2b00      	cmp	r3, #0
 8044126:	d10a      	bne.n	804413e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8044128:	4b7b      	ldr	r3, [pc, #492]	@ (8044318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804412a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804412c:	f023 0107 	bic.w	r1, r3, #7
 8044130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8044136:	4a78      	ldr	r2, [pc, #480]	@ (8044318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044138:	430b      	orrs	r3, r1
 804413a:	6513      	str	r3, [r2, #80]	@ 0x50
 804413c:	e003      	b.n	8044146 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804413e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044142:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8044146:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804414e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8044152:	f04f 0b00 	mov.w	fp, #0
 8044156:	ea5a 030b 	orrs.w	r3, sl, fp
 804415a:	d04c      	beq.n	80441f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 804415c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8044162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8044166:	d030      	beq.n	80441ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8044168:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 804416c:	d829      	bhi.n	80441c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 804416e:	2bc0      	cmp	r3, #192	@ 0xc0
 8044170:	d02d      	beq.n	80441ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8044172:	2bc0      	cmp	r3, #192	@ 0xc0
 8044174:	d825      	bhi.n	80441c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8044176:	2b80      	cmp	r3, #128	@ 0x80
 8044178:	d018      	beq.n	80441ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 804417a:	2b80      	cmp	r3, #128	@ 0x80
 804417c:	d821      	bhi.n	80441c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 804417e:	2b00      	cmp	r3, #0
 8044180:	d002      	beq.n	8044188 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8044182:	2b40      	cmp	r3, #64	@ 0x40
 8044184:	d007      	beq.n	8044196 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8044186:	e01c      	b.n	80441c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8044188:	4b63      	ldr	r3, [pc, #396]	@ (8044318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804418c:	4a62      	ldr	r2, [pc, #392]	@ (8044318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804418e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8044194:	e01c      	b.n	80441d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044196:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804419a:	3308      	adds	r3, #8
 804419c:	2100      	movs	r1, #0
 804419e:	4618      	mov	r0, r3
 80441a0:	f001 fc26 	bl	80459f0 <RCCEx_PLL2_Config>
 80441a4:	4603      	mov	r3, r0
 80441a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80441aa:	e011      	b.n	80441d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80441ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80441b0:	3328      	adds	r3, #40	@ 0x28
 80441b2:	2100      	movs	r1, #0
 80441b4:	4618      	mov	r0, r3
 80441b6:	f001 fccd 	bl	8045b54 <RCCEx_PLL3_Config>
 80441ba:	4603      	mov	r3, r0
 80441bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80441c0:	e006      	b.n	80441d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80441c2:	2301      	movs	r3, #1
 80441c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80441c8:	e002      	b.n	80441d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80441ca:	bf00      	nop
 80441cc:	e000      	b.n	80441d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80441ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80441d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80441d4:	2b00      	cmp	r3, #0
 80441d6:	d10a      	bne.n	80441ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80441d8:	4b4f      	ldr	r3, [pc, #316]	@ (8044318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80441da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80441dc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80441e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80441e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80441e6:	4a4c      	ldr	r2, [pc, #304]	@ (8044318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80441e8:	430b      	orrs	r3, r1
 80441ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80441ec:	e003      	b.n	80441f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80441ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80441f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80441f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80441fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80441fe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8044202:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8044206:	2300      	movs	r3, #0
 8044208:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 804420c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8044210:	460b      	mov	r3, r1
 8044212:	4313      	orrs	r3, r2
 8044214:	d053      	beq.n	80442be <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8044216:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804421a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 804421e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8044222:	d035      	beq.n	8044290 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8044224:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8044228:	d82e      	bhi.n	8044288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 804422a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 804422e:	d031      	beq.n	8044294 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8044230:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8044234:	d828      	bhi.n	8044288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8044236:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 804423a:	d01a      	beq.n	8044272 <HAL_RCCEx_PeriphCLKConfig+0x292>
 804423c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8044240:	d822      	bhi.n	8044288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8044242:	2b00      	cmp	r3, #0
 8044244:	d003      	beq.n	804424e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8044246:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 804424a:	d007      	beq.n	804425c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 804424c:	e01c      	b.n	8044288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804424e:	4b32      	ldr	r3, [pc, #200]	@ (8044318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044252:	4a31      	ldr	r2, [pc, #196]	@ (8044318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044258:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 804425a:	e01c      	b.n	8044296 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804425c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044260:	3308      	adds	r3, #8
 8044262:	2100      	movs	r1, #0
 8044264:	4618      	mov	r0, r3
 8044266:	f001 fbc3 	bl	80459f0 <RCCEx_PLL2_Config>
 804426a:	4603      	mov	r3, r0
 804426c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8044270:	e011      	b.n	8044296 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8044272:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044276:	3328      	adds	r3, #40	@ 0x28
 8044278:	2100      	movs	r1, #0
 804427a:	4618      	mov	r0, r3
 804427c:	f001 fc6a 	bl	8045b54 <RCCEx_PLL3_Config>
 8044280:	4603      	mov	r3, r0
 8044282:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8044286:	e006      	b.n	8044296 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8044288:	2301      	movs	r3, #1
 804428a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 804428e:	e002      	b.n	8044296 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8044290:	bf00      	nop
 8044292:	e000      	b.n	8044296 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8044294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044296:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804429a:	2b00      	cmp	r3, #0
 804429c:	d10b      	bne.n	80442b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 804429e:	4b1e      	ldr	r3, [pc, #120]	@ (8044318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80442a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80442a2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80442a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80442aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80442ae:	4a1a      	ldr	r2, [pc, #104]	@ (8044318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80442b0:	430b      	orrs	r3, r1
 80442b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80442b4:	e003      	b.n	80442be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80442b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80442ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80442be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80442c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80442c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80442ca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80442ce:	2300      	movs	r3, #0
 80442d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80442d4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80442d8:	460b      	mov	r3, r1
 80442da:	4313      	orrs	r3, r2
 80442dc:	d056      	beq.n	804438c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80442de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80442e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80442e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80442ea:	d038      	beq.n	804435e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80442ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80442f0:	d831      	bhi.n	8044356 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80442f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80442f6:	d034      	beq.n	8044362 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80442f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80442fc:	d82b      	bhi.n	8044356 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80442fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8044302:	d01d      	beq.n	8044340 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8044304:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8044308:	d825      	bhi.n	8044356 <HAL_RCCEx_PeriphCLKConfig+0x376>
 804430a:	2b00      	cmp	r3, #0
 804430c:	d006      	beq.n	804431c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 804430e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8044312:	d00a      	beq.n	804432a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8044314:	e01f      	b.n	8044356 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8044316:	bf00      	nop
 8044318:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804431c:	4ba2      	ldr	r3, [pc, #648]	@ (80445a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044320:	4aa1      	ldr	r2, [pc, #644]	@ (80445a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044322:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044326:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8044328:	e01c      	b.n	8044364 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804432a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804432e:	3308      	adds	r3, #8
 8044330:	2100      	movs	r1, #0
 8044332:	4618      	mov	r0, r3
 8044334:	f001 fb5c 	bl	80459f0 <RCCEx_PLL2_Config>
 8044338:	4603      	mov	r3, r0
 804433a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 804433e:	e011      	b.n	8044364 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8044340:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044344:	3328      	adds	r3, #40	@ 0x28
 8044346:	2100      	movs	r1, #0
 8044348:	4618      	mov	r0, r3
 804434a:	f001 fc03 	bl	8045b54 <RCCEx_PLL3_Config>
 804434e:	4603      	mov	r3, r0
 8044350:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8044354:	e006      	b.n	8044364 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8044356:	2301      	movs	r3, #1
 8044358:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 804435c:	e002      	b.n	8044364 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 804435e:	bf00      	nop
 8044360:	e000      	b.n	8044364 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8044362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044364:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044368:	2b00      	cmp	r3, #0
 804436a:	d10b      	bne.n	8044384 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 804436c:	4b8e      	ldr	r3, [pc, #568]	@ (80445a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804436e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044370:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8044374:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044378:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 804437c:	4a8a      	ldr	r2, [pc, #552]	@ (80445a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804437e:	430b      	orrs	r3, r1
 8044380:	6593      	str	r3, [r2, #88]	@ 0x58
 8044382:	e003      	b.n	804438c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044384:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044388:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 804438c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044394:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8044398:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 804439c:	2300      	movs	r3, #0
 804439e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80443a2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80443a6:	460b      	mov	r3, r1
 80443a8:	4313      	orrs	r3, r2
 80443aa:	d03a      	beq.n	8044422 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80443ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80443b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80443b2:	2b30      	cmp	r3, #48	@ 0x30
 80443b4:	d01f      	beq.n	80443f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80443b6:	2b30      	cmp	r3, #48	@ 0x30
 80443b8:	d819      	bhi.n	80443ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80443ba:	2b20      	cmp	r3, #32
 80443bc:	d00c      	beq.n	80443d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80443be:	2b20      	cmp	r3, #32
 80443c0:	d815      	bhi.n	80443ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80443c2:	2b00      	cmp	r3, #0
 80443c4:	d019      	beq.n	80443fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80443c6:	2b10      	cmp	r3, #16
 80443c8:	d111      	bne.n	80443ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80443ca:	4b77      	ldr	r3, [pc, #476]	@ (80445a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80443cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80443ce:	4a76      	ldr	r2, [pc, #472]	@ (80445a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80443d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80443d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80443d6:	e011      	b.n	80443fc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80443d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80443dc:	3308      	adds	r3, #8
 80443de:	2102      	movs	r1, #2
 80443e0:	4618      	mov	r0, r3
 80443e2:	f001 fb05 	bl	80459f0 <RCCEx_PLL2_Config>
 80443e6:	4603      	mov	r3, r0
 80443e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80443ec:	e006      	b.n	80443fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80443ee:	2301      	movs	r3, #1
 80443f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80443f4:	e002      	b.n	80443fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80443f6:	bf00      	nop
 80443f8:	e000      	b.n	80443fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80443fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80443fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044400:	2b00      	cmp	r3, #0
 8044402:	d10a      	bne.n	804441a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8044404:	4b68      	ldr	r3, [pc, #416]	@ (80445a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8044408:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 804440c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8044412:	4a65      	ldr	r2, [pc, #404]	@ (80445a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044414:	430b      	orrs	r3, r1
 8044416:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8044418:	e003      	b.n	8044422 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804441a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804441e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8044422:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044426:	e9d3 2300 	ldrd	r2, r3, [r3]
 804442a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 804442e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8044432:	2300      	movs	r3, #0
 8044434:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8044438:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 804443c:	460b      	mov	r3, r1
 804443e:	4313      	orrs	r3, r2
 8044440:	d051      	beq.n	80444e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8044442:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8044448:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 804444c:	d035      	beq.n	80444ba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 804444e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8044452:	d82e      	bhi.n	80444b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8044454:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8044458:	d031      	beq.n	80444be <HAL_RCCEx_PeriphCLKConfig+0x4de>
 804445a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 804445e:	d828      	bhi.n	80444b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8044460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8044464:	d01a      	beq.n	804449c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8044466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 804446a:	d822      	bhi.n	80444b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 804446c:	2b00      	cmp	r3, #0
 804446e:	d003      	beq.n	8044478 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8044470:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8044474:	d007      	beq.n	8044486 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8044476:	e01c      	b.n	80444b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8044478:	4b4b      	ldr	r3, [pc, #300]	@ (80445a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804447a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804447c:	4a4a      	ldr	r2, [pc, #296]	@ (80445a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804447e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8044484:	e01c      	b.n	80444c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044486:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804448a:	3308      	adds	r3, #8
 804448c:	2100      	movs	r1, #0
 804448e:	4618      	mov	r0, r3
 8044490:	f001 faae 	bl	80459f0 <RCCEx_PLL2_Config>
 8044494:	4603      	mov	r3, r0
 8044496:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 804449a:	e011      	b.n	80444c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 804449c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80444a0:	3328      	adds	r3, #40	@ 0x28
 80444a2:	2100      	movs	r1, #0
 80444a4:	4618      	mov	r0, r3
 80444a6:	f001 fb55 	bl	8045b54 <RCCEx_PLL3_Config>
 80444aa:	4603      	mov	r3, r0
 80444ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80444b0:	e006      	b.n	80444c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80444b2:	2301      	movs	r3, #1
 80444b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80444b8:	e002      	b.n	80444c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80444ba:	bf00      	nop
 80444bc:	e000      	b.n	80444c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80444be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80444c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80444c4:	2b00      	cmp	r3, #0
 80444c6:	d10a      	bne.n	80444de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80444c8:	4b37      	ldr	r3, [pc, #220]	@ (80445a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80444ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80444cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80444d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80444d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80444d6:	4a34      	ldr	r2, [pc, #208]	@ (80445a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80444d8:	430b      	orrs	r3, r1
 80444da:	6513      	str	r3, [r2, #80]	@ 0x50
 80444dc:	e003      	b.n	80444e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80444de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80444e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80444e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80444ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80444ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80444f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80444f6:	2300      	movs	r3, #0
 80444f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80444fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8044500:	460b      	mov	r3, r1
 8044502:	4313      	orrs	r3, r2
 8044504:	d056      	beq.n	80445b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8044506:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804450a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 804450c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8044510:	d033      	beq.n	804457a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8044512:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8044516:	d82c      	bhi.n	8044572 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8044518:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 804451c:	d02f      	beq.n	804457e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 804451e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8044522:	d826      	bhi.n	8044572 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8044524:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8044528:	d02b      	beq.n	8044582 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 804452a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 804452e:	d820      	bhi.n	8044572 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8044530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8044534:	d012      	beq.n	804455c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8044536:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 804453a:	d81a      	bhi.n	8044572 <HAL_RCCEx_PeriphCLKConfig+0x592>
 804453c:	2b00      	cmp	r3, #0
 804453e:	d022      	beq.n	8044586 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8044540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8044544:	d115      	bne.n	8044572 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044546:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804454a:	3308      	adds	r3, #8
 804454c:	2101      	movs	r1, #1
 804454e:	4618      	mov	r0, r3
 8044550:	f001 fa4e 	bl	80459f0 <RCCEx_PLL2_Config>
 8044554:	4603      	mov	r3, r0
 8044556:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 804455a:	e015      	b.n	8044588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 804455c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044560:	3328      	adds	r3, #40	@ 0x28
 8044562:	2101      	movs	r1, #1
 8044564:	4618      	mov	r0, r3
 8044566:	f001 faf5 	bl	8045b54 <RCCEx_PLL3_Config>
 804456a:	4603      	mov	r3, r0
 804456c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8044570:	e00a      	b.n	8044588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044572:	2301      	movs	r3, #1
 8044574:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044578:	e006      	b.n	8044588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 804457a:	bf00      	nop
 804457c:	e004      	b.n	8044588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 804457e:	bf00      	nop
 8044580:	e002      	b.n	8044588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8044582:	bf00      	nop
 8044584:	e000      	b.n	8044588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8044586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044588:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804458c:	2b00      	cmp	r3, #0
 804458e:	d10d      	bne.n	80445ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8044590:	4b05      	ldr	r3, [pc, #20]	@ (80445a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8044594:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8044598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804459c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 804459e:	4a02      	ldr	r2, [pc, #8]	@ (80445a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80445a0:	430b      	orrs	r3, r1
 80445a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80445a4:	e006      	b.n	80445b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80445a6:	bf00      	nop
 80445a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80445ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80445b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80445b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80445b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80445bc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80445c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80445c4:	2300      	movs	r3, #0
 80445c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80445ca:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80445ce:	460b      	mov	r3, r1
 80445d0:	4313      	orrs	r3, r2
 80445d2:	d055      	beq.n	8044680 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80445d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80445d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80445dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80445e0:	d033      	beq.n	804464a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80445e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80445e6:	d82c      	bhi.n	8044642 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80445e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80445ec:	d02f      	beq.n	804464e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80445ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80445f2:	d826      	bhi.n	8044642 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80445f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80445f8:	d02b      	beq.n	8044652 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80445fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80445fe:	d820      	bhi.n	8044642 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8044600:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044604:	d012      	beq.n	804462c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8044606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 804460a:	d81a      	bhi.n	8044642 <HAL_RCCEx_PeriphCLKConfig+0x662>
 804460c:	2b00      	cmp	r3, #0
 804460e:	d022      	beq.n	8044656 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8044610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8044614:	d115      	bne.n	8044642 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044616:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804461a:	3308      	adds	r3, #8
 804461c:	2101      	movs	r1, #1
 804461e:	4618      	mov	r0, r3
 8044620:	f001 f9e6 	bl	80459f0 <RCCEx_PLL2_Config>
 8044624:	4603      	mov	r3, r0
 8044626:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 804462a:	e015      	b.n	8044658 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 804462c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044630:	3328      	adds	r3, #40	@ 0x28
 8044632:	2101      	movs	r1, #1
 8044634:	4618      	mov	r0, r3
 8044636:	f001 fa8d 	bl	8045b54 <RCCEx_PLL3_Config>
 804463a:	4603      	mov	r3, r0
 804463c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8044640:	e00a      	b.n	8044658 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8044642:	2301      	movs	r3, #1
 8044644:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044648:	e006      	b.n	8044658 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 804464a:	bf00      	nop
 804464c:	e004      	b.n	8044658 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 804464e:	bf00      	nop
 8044650:	e002      	b.n	8044658 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8044652:	bf00      	nop
 8044654:	e000      	b.n	8044658 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8044656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044658:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804465c:	2b00      	cmp	r3, #0
 804465e:	d10b      	bne.n	8044678 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8044660:	4bb6      	ldr	r3, [pc, #728]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044664:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8044668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804466c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8044670:	4ab2      	ldr	r2, [pc, #712]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044672:	430b      	orrs	r3, r1
 8044674:	6593      	str	r3, [r2, #88]	@ 0x58
 8044676:	e003      	b.n	8044680 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044678:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804467c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8044680:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044688:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 804468c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8044690:	2300      	movs	r3, #0
 8044692:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8044696:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 804469a:	460b      	mov	r3, r1
 804469c:	4313      	orrs	r3, r2
 804469e:	d02a      	beq.n	80446f6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80446a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80446a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80446a6:	2b00      	cmp	r3, #0
 80446a8:	d011      	beq.n	80446ce <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80446aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80446ae:	d10a      	bne.n	80446c6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80446b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80446b4:	3308      	adds	r3, #8
 80446b6:	2101      	movs	r1, #1
 80446b8:	4618      	mov	r0, r3
 80446ba:	f001 f999 	bl	80459f0 <RCCEx_PLL2_Config>
 80446be:	4603      	mov	r3, r0
 80446c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80446c4:	e004      	b.n	80446d0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80446c6:	2301      	movs	r3, #1
 80446c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80446cc:	e000      	b.n	80446d0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80446ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80446d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80446d4:	2b00      	cmp	r3, #0
 80446d6:	d10a      	bne.n	80446ee <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80446d8:	4b98      	ldr	r3, [pc, #608]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80446da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80446dc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80446e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80446e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80446e6:	4a95      	ldr	r2, [pc, #596]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80446e8:	430b      	orrs	r3, r1
 80446ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80446ec:	e003      	b.n	80446f6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80446ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80446f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80446f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80446fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80446fe:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8044702:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8044706:	2300      	movs	r3, #0
 8044708:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 804470c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8044710:	460b      	mov	r3, r1
 8044712:	4313      	orrs	r3, r2
 8044714:	d037      	beq.n	8044786 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8044716:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804471a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 804471c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044720:	d00e      	beq.n	8044740 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8044722:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044726:	d816      	bhi.n	8044756 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8044728:	2b00      	cmp	r3, #0
 804472a:	d018      	beq.n	804475e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 804472c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8044730:	d111      	bne.n	8044756 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8044732:	4b82      	ldr	r3, [pc, #520]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044736:	4a81      	ldr	r2, [pc, #516]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 804473c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 804473e:	e00f      	b.n	8044760 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044740:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044744:	3308      	adds	r3, #8
 8044746:	2101      	movs	r1, #1
 8044748:	4618      	mov	r0, r3
 804474a:	f001 f951 	bl	80459f0 <RCCEx_PLL2_Config>
 804474e:	4603      	mov	r3, r0
 8044750:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8044754:	e004      	b.n	8044760 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044756:	2301      	movs	r3, #1
 8044758:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 804475c:	e000      	b.n	8044760 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 804475e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044760:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044764:	2b00      	cmp	r3, #0
 8044766:	d10a      	bne.n	804477e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8044768:	4b74      	ldr	r3, [pc, #464]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804476a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804476c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8044770:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8044776:	4a71      	ldr	r2, [pc, #452]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044778:	430b      	orrs	r3, r1
 804477a:	6513      	str	r3, [r2, #80]	@ 0x50
 804477c:	e003      	b.n	8044786 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804477e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044782:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8044786:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804478e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8044792:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8044796:	2300      	movs	r3, #0
 8044798:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 804479c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80447a0:	460b      	mov	r3, r1
 80447a2:	4313      	orrs	r3, r2
 80447a4:	d03a      	beq.n	804481c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80447a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80447aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80447ac:	2b03      	cmp	r3, #3
 80447ae:	d81d      	bhi.n	80447ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80447b0:	a201      	add	r2, pc, #4	@ (adr r2, 80447b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80447b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80447b6:	bf00      	nop
 80447b8:	080447f5 	.word	0x080447f5
 80447bc:	080447c9 	.word	0x080447c9
 80447c0:	080447d7 	.word	0x080447d7
 80447c4:	080447f5 	.word	0x080447f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80447c8:	4b5c      	ldr	r3, [pc, #368]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80447ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80447cc:	4a5b      	ldr	r2, [pc, #364]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80447ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80447d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80447d4:	e00f      	b.n	80447f6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80447d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80447da:	3308      	adds	r3, #8
 80447dc:	2102      	movs	r1, #2
 80447de:	4618      	mov	r0, r3
 80447e0:	f001 f906 	bl	80459f0 <RCCEx_PLL2_Config>
 80447e4:	4603      	mov	r3, r0
 80447e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80447ea:	e004      	b.n	80447f6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80447ec:	2301      	movs	r3, #1
 80447ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80447f2:	e000      	b.n	80447f6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80447f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80447f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80447fa:	2b00      	cmp	r3, #0
 80447fc:	d10a      	bne.n	8044814 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80447fe:	4b4f      	ldr	r3, [pc, #316]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8044802:	f023 0103 	bic.w	r1, r3, #3
 8044806:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804480a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 804480c:	4a4b      	ldr	r2, [pc, #300]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804480e:	430b      	orrs	r3, r1
 8044810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8044812:	e003      	b.n	804481c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044814:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044818:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 804481c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044824:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8044828:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 804482c:	2300      	movs	r3, #0
 804482e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8044832:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8044836:	460b      	mov	r3, r1
 8044838:	4313      	orrs	r3, r2
 804483a:	f000 80a0 	beq.w	804497e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 804483e:	4b40      	ldr	r3, [pc, #256]	@ (8044940 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8044840:	681b      	ldr	r3, [r3, #0]
 8044842:	4a3f      	ldr	r2, [pc, #252]	@ (8044940 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8044844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8044848:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 804484a:	f7fc fc45 	bl	80410d8 <HAL_GetTick>
 804484e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8044852:	e00b      	b.n	804486c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8044854:	f7fc fc40 	bl	80410d8 <HAL_GetTick>
 8044858:	4602      	mov	r2, r0
 804485a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 804485e:	1ad3      	subs	r3, r2, r3
 8044860:	2b64      	cmp	r3, #100	@ 0x64
 8044862:	d903      	bls.n	804486c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8044864:	2303      	movs	r3, #3
 8044866:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 804486a:	e005      	b.n	8044878 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 804486c:	4b34      	ldr	r3, [pc, #208]	@ (8044940 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 804486e:	681b      	ldr	r3, [r3, #0]
 8044870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8044874:	2b00      	cmp	r3, #0
 8044876:	d0ed      	beq.n	8044854 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8044878:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804487c:	2b00      	cmp	r3, #0
 804487e:	d17a      	bne.n	8044976 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8044880:	4b2e      	ldr	r3, [pc, #184]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044882:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8044884:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044888:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 804488c:	4053      	eors	r3, r2
 804488e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8044892:	2b00      	cmp	r3, #0
 8044894:	d015      	beq.n	80448c2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8044896:	4b29      	ldr	r3, [pc, #164]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804489a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 804489e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80448a2:	4b26      	ldr	r3, [pc, #152]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80448a6:	4a25      	ldr	r2, [pc, #148]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80448ac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80448ae:	4b23      	ldr	r3, [pc, #140]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80448b2:	4a22      	ldr	r2, [pc, #136]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80448b8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80448ba:	4a20      	ldr	r2, [pc, #128]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80448c0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80448c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80448c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80448ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80448ce:	d118      	bne.n	8044902 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80448d0:	f7fc fc02 	bl	80410d8 <HAL_GetTick>
 80448d4:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80448d8:	e00d      	b.n	80448f6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80448da:	f7fc fbfd 	bl	80410d8 <HAL_GetTick>
 80448de:	4602      	mov	r2, r0
 80448e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80448e4:	1ad2      	subs	r2, r2, r3
 80448e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80448ea:	429a      	cmp	r2, r3
 80448ec:	d903      	bls.n	80448f6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80448ee:	2303      	movs	r3, #3
 80448f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 80448f4:	e005      	b.n	8044902 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80448f6:	4b11      	ldr	r3, [pc, #68]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80448fa:	f003 0302 	and.w	r3, r3, #2
 80448fe:	2b00      	cmp	r3, #0
 8044900:	d0eb      	beq.n	80448da <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8044902:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044906:	2b00      	cmp	r3, #0
 8044908:	d130      	bne.n	804496c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 804490a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804490e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8044912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8044916:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 804491a:	d115      	bne.n	8044948 <HAL_RCCEx_PeriphCLKConfig+0x968>
 804491c:	4b07      	ldr	r3, [pc, #28]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804491e:	691b      	ldr	r3, [r3, #16]
 8044920:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8044924:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044928:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 804492c:	091a      	lsrs	r2, r3, #4
 804492e:	4b05      	ldr	r3, [pc, #20]	@ (8044944 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8044930:	4013      	ands	r3, r2
 8044932:	4a02      	ldr	r2, [pc, #8]	@ (804493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044934:	430b      	orrs	r3, r1
 8044936:	6113      	str	r3, [r2, #16]
 8044938:	e00c      	b.n	8044954 <HAL_RCCEx_PeriphCLKConfig+0x974>
 804493a:	bf00      	nop
 804493c:	58024400 	.word	0x58024400
 8044940:	58024800 	.word	0x58024800
 8044944:	00ffffcf 	.word	0x00ffffcf
 8044948:	4bd4      	ldr	r3, [pc, #848]	@ (8044c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 804494a:	691b      	ldr	r3, [r3, #16]
 804494c:	4ad3      	ldr	r2, [pc, #844]	@ (8044c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 804494e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8044952:	6113      	str	r3, [r2, #16]
 8044954:	4bd1      	ldr	r3, [pc, #836]	@ (8044c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044956:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8044958:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804495c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8044960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044964:	4acd      	ldr	r2, [pc, #820]	@ (8044c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044966:	430b      	orrs	r3, r1
 8044968:	6713      	str	r3, [r2, #112]	@ 0x70
 804496a:	e008      	b.n	804497e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 804496c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044970:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8044974:	e003      	b.n	804497e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044976:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804497a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 804497e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044986:	f002 0301 	and.w	r3, r2, #1
 804498a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 804498e:	2300      	movs	r3, #0
 8044990:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8044994:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8044998:	460b      	mov	r3, r1
 804499a:	4313      	orrs	r3, r2
 804499c:	f000 808b 	beq.w	8044ab6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80449a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80449a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80449a8:	2b28      	cmp	r3, #40	@ 0x28
 80449aa:	d86b      	bhi.n	8044a84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80449ac:	a201      	add	r2, pc, #4	@ (adr r2, 80449b4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80449ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80449b2:	bf00      	nop
 80449b4:	08044a8d 	.word	0x08044a8d
 80449b8:	08044a85 	.word	0x08044a85
 80449bc:	08044a85 	.word	0x08044a85
 80449c0:	08044a85 	.word	0x08044a85
 80449c4:	08044a85 	.word	0x08044a85
 80449c8:	08044a85 	.word	0x08044a85
 80449cc:	08044a85 	.word	0x08044a85
 80449d0:	08044a85 	.word	0x08044a85
 80449d4:	08044a59 	.word	0x08044a59
 80449d8:	08044a85 	.word	0x08044a85
 80449dc:	08044a85 	.word	0x08044a85
 80449e0:	08044a85 	.word	0x08044a85
 80449e4:	08044a85 	.word	0x08044a85
 80449e8:	08044a85 	.word	0x08044a85
 80449ec:	08044a85 	.word	0x08044a85
 80449f0:	08044a85 	.word	0x08044a85
 80449f4:	08044a6f 	.word	0x08044a6f
 80449f8:	08044a85 	.word	0x08044a85
 80449fc:	08044a85 	.word	0x08044a85
 8044a00:	08044a85 	.word	0x08044a85
 8044a04:	08044a85 	.word	0x08044a85
 8044a08:	08044a85 	.word	0x08044a85
 8044a0c:	08044a85 	.word	0x08044a85
 8044a10:	08044a85 	.word	0x08044a85
 8044a14:	08044a8d 	.word	0x08044a8d
 8044a18:	08044a85 	.word	0x08044a85
 8044a1c:	08044a85 	.word	0x08044a85
 8044a20:	08044a85 	.word	0x08044a85
 8044a24:	08044a85 	.word	0x08044a85
 8044a28:	08044a85 	.word	0x08044a85
 8044a2c:	08044a85 	.word	0x08044a85
 8044a30:	08044a85 	.word	0x08044a85
 8044a34:	08044a8d 	.word	0x08044a8d
 8044a38:	08044a85 	.word	0x08044a85
 8044a3c:	08044a85 	.word	0x08044a85
 8044a40:	08044a85 	.word	0x08044a85
 8044a44:	08044a85 	.word	0x08044a85
 8044a48:	08044a85 	.word	0x08044a85
 8044a4c:	08044a85 	.word	0x08044a85
 8044a50:	08044a85 	.word	0x08044a85
 8044a54:	08044a8d 	.word	0x08044a8d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044a5c:	3308      	adds	r3, #8
 8044a5e:	2101      	movs	r1, #1
 8044a60:	4618      	mov	r0, r3
 8044a62:	f000 ffc5 	bl	80459f0 <RCCEx_PLL2_Config>
 8044a66:	4603      	mov	r3, r0
 8044a68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8044a6c:	e00f      	b.n	8044a8e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8044a6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044a72:	3328      	adds	r3, #40	@ 0x28
 8044a74:	2101      	movs	r1, #1
 8044a76:	4618      	mov	r0, r3
 8044a78:	f001 f86c 	bl	8045b54 <RCCEx_PLL3_Config>
 8044a7c:	4603      	mov	r3, r0
 8044a7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8044a82:	e004      	b.n	8044a8e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044a84:	2301      	movs	r3, #1
 8044a86:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044a8a:	e000      	b.n	8044a8e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8044a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044a8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044a92:	2b00      	cmp	r3, #0
 8044a94:	d10b      	bne.n	8044aae <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8044a96:	4b81      	ldr	r3, [pc, #516]	@ (8044c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8044a9a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8044a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8044aa6:	4a7d      	ldr	r2, [pc, #500]	@ (8044c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044aa8:	430b      	orrs	r3, r1
 8044aaa:	6553      	str	r3, [r2, #84]	@ 0x54
 8044aac:	e003      	b.n	8044ab6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044aae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044ab2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8044ab6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044abe:	f002 0302 	and.w	r3, r2, #2
 8044ac2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8044ac6:	2300      	movs	r3, #0
 8044ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8044acc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8044ad0:	460b      	mov	r3, r1
 8044ad2:	4313      	orrs	r3, r2
 8044ad4:	d042      	beq.n	8044b5c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8044ad6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ada:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8044adc:	2b05      	cmp	r3, #5
 8044ade:	d825      	bhi.n	8044b2c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8044ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8044ae8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8044ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044ae6:	bf00      	nop
 8044ae8:	08044b35 	.word	0x08044b35
 8044aec:	08044b01 	.word	0x08044b01
 8044af0:	08044b17 	.word	0x08044b17
 8044af4:	08044b35 	.word	0x08044b35
 8044af8:	08044b35 	.word	0x08044b35
 8044afc:	08044b35 	.word	0x08044b35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044b00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044b04:	3308      	adds	r3, #8
 8044b06:	2101      	movs	r1, #1
 8044b08:	4618      	mov	r0, r3
 8044b0a:	f000 ff71 	bl	80459f0 <RCCEx_PLL2_Config>
 8044b0e:	4603      	mov	r3, r0
 8044b10:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8044b14:	e00f      	b.n	8044b36 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8044b16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044b1a:	3328      	adds	r3, #40	@ 0x28
 8044b1c:	2101      	movs	r1, #1
 8044b1e:	4618      	mov	r0, r3
 8044b20:	f001 f818 	bl	8045b54 <RCCEx_PLL3_Config>
 8044b24:	4603      	mov	r3, r0
 8044b26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8044b2a:	e004      	b.n	8044b36 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044b2c:	2301      	movs	r3, #1
 8044b2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044b32:	e000      	b.n	8044b36 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8044b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044b36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044b3a:	2b00      	cmp	r3, #0
 8044b3c:	d10a      	bne.n	8044b54 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8044b3e:	4b57      	ldr	r3, [pc, #348]	@ (8044c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8044b42:	f023 0107 	bic.w	r1, r3, #7
 8044b46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044b4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8044b4c:	4a53      	ldr	r2, [pc, #332]	@ (8044c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044b4e:	430b      	orrs	r3, r1
 8044b50:	6553      	str	r3, [r2, #84]	@ 0x54
 8044b52:	e003      	b.n	8044b5c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044b54:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044b58:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8044b5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044b64:	f002 0304 	and.w	r3, r2, #4
 8044b68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8044b6c:	2300      	movs	r3, #0
 8044b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8044b72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8044b76:	460b      	mov	r3, r1
 8044b78:	4313      	orrs	r3, r2
 8044b7a:	d044      	beq.n	8044c06 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8044b7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8044b84:	2b05      	cmp	r3, #5
 8044b86:	d825      	bhi.n	8044bd4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8044b88:	a201      	add	r2, pc, #4	@ (adr r2, 8044b90 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8044b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044b8e:	bf00      	nop
 8044b90:	08044bdd 	.word	0x08044bdd
 8044b94:	08044ba9 	.word	0x08044ba9
 8044b98:	08044bbf 	.word	0x08044bbf
 8044b9c:	08044bdd 	.word	0x08044bdd
 8044ba0:	08044bdd 	.word	0x08044bdd
 8044ba4:	08044bdd 	.word	0x08044bdd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044ba8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044bac:	3308      	adds	r3, #8
 8044bae:	2101      	movs	r1, #1
 8044bb0:	4618      	mov	r0, r3
 8044bb2:	f000 ff1d 	bl	80459f0 <RCCEx_PLL2_Config>
 8044bb6:	4603      	mov	r3, r0
 8044bb8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8044bbc:	e00f      	b.n	8044bde <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8044bbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044bc2:	3328      	adds	r3, #40	@ 0x28
 8044bc4:	2101      	movs	r1, #1
 8044bc6:	4618      	mov	r0, r3
 8044bc8:	f000 ffc4 	bl	8045b54 <RCCEx_PLL3_Config>
 8044bcc:	4603      	mov	r3, r0
 8044bce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8044bd2:	e004      	b.n	8044bde <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044bd4:	2301      	movs	r3, #1
 8044bd6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044bda:	e000      	b.n	8044bde <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8044bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044bde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044be2:	2b00      	cmp	r3, #0
 8044be4:	d10b      	bne.n	8044bfe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8044be6:	4b2d      	ldr	r3, [pc, #180]	@ (8044c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044bea:	f023 0107 	bic.w	r1, r3, #7
 8044bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044bf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8044bf6:	4a29      	ldr	r2, [pc, #164]	@ (8044c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044bf8:	430b      	orrs	r3, r1
 8044bfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8044bfc:	e003      	b.n	8044c06 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044bfe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044c02:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8044c06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044c0e:	f002 0320 	and.w	r3, r2, #32
 8044c12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8044c16:	2300      	movs	r3, #0
 8044c18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8044c1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8044c20:	460b      	mov	r3, r1
 8044c22:	4313      	orrs	r3, r2
 8044c24:	d057      	beq.n	8044cd6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8044c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8044c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8044c32:	d035      	beq.n	8044ca0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8044c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8044c38:	d82c      	bhi.n	8044c94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8044c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8044c3e:	d031      	beq.n	8044ca4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8044c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8044c44:	d826      	bhi.n	8044c94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8044c46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8044c4a:	d02d      	beq.n	8044ca8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8044c4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8044c50:	d820      	bhi.n	8044c94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8044c52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044c56:	d012      	beq.n	8044c7e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8044c58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044c5c:	d81a      	bhi.n	8044c94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8044c5e:	2b00      	cmp	r3, #0
 8044c60:	d024      	beq.n	8044cac <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8044c62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8044c66:	d115      	bne.n	8044c94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c6c:	3308      	adds	r3, #8
 8044c6e:	2100      	movs	r1, #0
 8044c70:	4618      	mov	r0, r3
 8044c72:	f000 febd 	bl	80459f0 <RCCEx_PLL2_Config>
 8044c76:	4603      	mov	r3, r0
 8044c78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8044c7c:	e017      	b.n	8044cae <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c82:	3328      	adds	r3, #40	@ 0x28
 8044c84:	2102      	movs	r1, #2
 8044c86:	4618      	mov	r0, r3
 8044c88:	f000 ff64 	bl	8045b54 <RCCEx_PLL3_Config>
 8044c8c:	4603      	mov	r3, r0
 8044c8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8044c92:	e00c      	b.n	8044cae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044c94:	2301      	movs	r3, #1
 8044c96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044c9a:	e008      	b.n	8044cae <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8044c9c:	58024400 	.word	0x58024400
        break;
 8044ca0:	bf00      	nop
 8044ca2:	e004      	b.n	8044cae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8044ca4:	bf00      	nop
 8044ca6:	e002      	b.n	8044cae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8044ca8:	bf00      	nop
 8044caa:	e000      	b.n	8044cae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8044cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044cae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044cb2:	2b00      	cmp	r3, #0
 8044cb4:	d10b      	bne.n	8044cce <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8044cb6:	4bc2      	ldr	r3, [pc, #776]	@ (8044fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8044cba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8044cbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8044cc6:	4abe      	ldr	r2, [pc, #760]	@ (8044fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044cc8:	430b      	orrs	r3, r1
 8044cca:	6553      	str	r3, [r2, #84]	@ 0x54
 8044ccc:	e003      	b.n	8044cd6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044cce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044cd2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8044cd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044cde:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8044ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8044ce6:	2300      	movs	r3, #0
 8044ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8044cec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8044cf0:	460b      	mov	r3, r1
 8044cf2:	4313      	orrs	r3, r2
 8044cf4:	d055      	beq.n	8044da2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8044cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044cfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8044cfe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8044d02:	d033      	beq.n	8044d6c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8044d04:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8044d08:	d82c      	bhi.n	8044d64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8044d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8044d0e:	d02f      	beq.n	8044d70 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8044d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8044d14:	d826      	bhi.n	8044d64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8044d16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8044d1a:	d02b      	beq.n	8044d74 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8044d1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8044d20:	d820      	bhi.n	8044d64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8044d22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8044d26:	d012      	beq.n	8044d4e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8044d28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8044d2c:	d81a      	bhi.n	8044d64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8044d2e:	2b00      	cmp	r3, #0
 8044d30:	d022      	beq.n	8044d78 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8044d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8044d36:	d115      	bne.n	8044d64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044d38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044d3c:	3308      	adds	r3, #8
 8044d3e:	2100      	movs	r1, #0
 8044d40:	4618      	mov	r0, r3
 8044d42:	f000 fe55 	bl	80459f0 <RCCEx_PLL2_Config>
 8044d46:	4603      	mov	r3, r0
 8044d48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8044d4c:	e015      	b.n	8044d7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044d4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044d52:	3328      	adds	r3, #40	@ 0x28
 8044d54:	2102      	movs	r1, #2
 8044d56:	4618      	mov	r0, r3
 8044d58:	f000 fefc 	bl	8045b54 <RCCEx_PLL3_Config>
 8044d5c:	4603      	mov	r3, r0
 8044d5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8044d62:	e00a      	b.n	8044d7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044d64:	2301      	movs	r3, #1
 8044d66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044d6a:	e006      	b.n	8044d7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8044d6c:	bf00      	nop
 8044d6e:	e004      	b.n	8044d7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8044d70:	bf00      	nop
 8044d72:	e002      	b.n	8044d7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8044d74:	bf00      	nop
 8044d76:	e000      	b.n	8044d7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8044d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044d7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044d7e:	2b00      	cmp	r3, #0
 8044d80:	d10b      	bne.n	8044d9a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8044d82:	4b8f      	ldr	r3, [pc, #572]	@ (8044fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044d86:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8044d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044d8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8044d92:	4a8b      	ldr	r2, [pc, #556]	@ (8044fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044d94:	430b      	orrs	r3, r1
 8044d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8044d98:	e003      	b.n	8044da2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044d9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044d9e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8044da2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044daa:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8044dae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8044db2:	2300      	movs	r3, #0
 8044db4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8044db8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8044dbc:	460b      	mov	r3, r1
 8044dbe:	4313      	orrs	r3, r2
 8044dc0:	d055      	beq.n	8044e6e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8044dc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044dc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8044dca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8044dce:	d033      	beq.n	8044e38 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8044dd0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8044dd4:	d82c      	bhi.n	8044e30 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8044dd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8044dda:	d02f      	beq.n	8044e3c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8044ddc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8044de0:	d826      	bhi.n	8044e30 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8044de2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8044de6:	d02b      	beq.n	8044e40 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8044de8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8044dec:	d820      	bhi.n	8044e30 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8044dee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8044df2:	d012      	beq.n	8044e1a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8044df4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8044df8:	d81a      	bhi.n	8044e30 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8044dfa:	2b00      	cmp	r3, #0
 8044dfc:	d022      	beq.n	8044e44 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8044dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8044e02:	d115      	bne.n	8044e30 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044e08:	3308      	adds	r3, #8
 8044e0a:	2100      	movs	r1, #0
 8044e0c:	4618      	mov	r0, r3
 8044e0e:	f000 fdef 	bl	80459f0 <RCCEx_PLL2_Config>
 8044e12:	4603      	mov	r3, r0
 8044e14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8044e18:	e015      	b.n	8044e46 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044e1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044e1e:	3328      	adds	r3, #40	@ 0x28
 8044e20:	2102      	movs	r1, #2
 8044e22:	4618      	mov	r0, r3
 8044e24:	f000 fe96 	bl	8045b54 <RCCEx_PLL3_Config>
 8044e28:	4603      	mov	r3, r0
 8044e2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8044e2e:	e00a      	b.n	8044e46 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044e30:	2301      	movs	r3, #1
 8044e32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044e36:	e006      	b.n	8044e46 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8044e38:	bf00      	nop
 8044e3a:	e004      	b.n	8044e46 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8044e3c:	bf00      	nop
 8044e3e:	e002      	b.n	8044e46 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8044e40:	bf00      	nop
 8044e42:	e000      	b.n	8044e46 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8044e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044e46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044e4a:	2b00      	cmp	r3, #0
 8044e4c:	d10b      	bne.n	8044e66 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8044e4e:	4b5c      	ldr	r3, [pc, #368]	@ (8044fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044e52:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8044e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044e5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8044e5e:	4a58      	ldr	r2, [pc, #352]	@ (8044fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044e60:	430b      	orrs	r3, r1
 8044e62:	6593      	str	r3, [r2, #88]	@ 0x58
 8044e64:	e003      	b.n	8044e6e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044e66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044e6a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8044e6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044e76:	f002 0308 	and.w	r3, r2, #8
 8044e7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8044e7e:	2300      	movs	r3, #0
 8044e80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8044e84:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8044e88:	460b      	mov	r3, r1
 8044e8a:	4313      	orrs	r3, r2
 8044e8c:	d01e      	beq.n	8044ecc <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8044e8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8044e96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8044e9a:	d10c      	bne.n	8044eb6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8044e9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ea0:	3328      	adds	r3, #40	@ 0x28
 8044ea2:	2102      	movs	r1, #2
 8044ea4:	4618      	mov	r0, r3
 8044ea6:	f000 fe55 	bl	8045b54 <RCCEx_PLL3_Config>
 8044eaa:	4603      	mov	r3, r0
 8044eac:	2b00      	cmp	r3, #0
 8044eae:	d002      	beq.n	8044eb6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8044eb0:	2301      	movs	r3, #1
 8044eb2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8044eb6:	4b42      	ldr	r3, [pc, #264]	@ (8044fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8044eba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8044ebe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8044ec6:	4a3e      	ldr	r2, [pc, #248]	@ (8044fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044ec8:	430b      	orrs	r3, r1
 8044eca:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8044ecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044ed4:	f002 0310 	and.w	r3, r2, #16
 8044ed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8044edc:	2300      	movs	r3, #0
 8044ede:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8044ee2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8044ee6:	460b      	mov	r3, r1
 8044ee8:	4313      	orrs	r3, r2
 8044eea:	d01e      	beq.n	8044f2a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8044eec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ef0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8044ef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8044ef8:	d10c      	bne.n	8044f14 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8044efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044efe:	3328      	adds	r3, #40	@ 0x28
 8044f00:	2102      	movs	r1, #2
 8044f02:	4618      	mov	r0, r3
 8044f04:	f000 fe26 	bl	8045b54 <RCCEx_PLL3_Config>
 8044f08:	4603      	mov	r3, r0
 8044f0a:	2b00      	cmp	r3, #0
 8044f0c:	d002      	beq.n	8044f14 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8044f0e:	2301      	movs	r3, #1
 8044f10:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8044f14:	4b2a      	ldr	r3, [pc, #168]	@ (8044fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044f18:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8044f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8044f24:	4a26      	ldr	r2, [pc, #152]	@ (8044fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044f26:	430b      	orrs	r3, r1
 8044f28:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8044f2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044f32:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8044f36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8044f3a:	2300      	movs	r3, #0
 8044f3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8044f40:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8044f44:	460b      	mov	r3, r1
 8044f46:	4313      	orrs	r3, r2
 8044f48:	d040      	beq.n	8044fcc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8044f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8044f52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8044f56:	d022      	beq.n	8044f9e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8044f58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8044f5c:	d81b      	bhi.n	8044f96 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8044f5e:	2b00      	cmp	r3, #0
 8044f60:	d003      	beq.n	8044f6a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8044f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8044f66:	d00b      	beq.n	8044f80 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8044f68:	e015      	b.n	8044f96 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044f6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f6e:	3308      	adds	r3, #8
 8044f70:	2100      	movs	r1, #0
 8044f72:	4618      	mov	r0, r3
 8044f74:	f000 fd3c 	bl	80459f0 <RCCEx_PLL2_Config>
 8044f78:	4603      	mov	r3, r0
 8044f7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8044f7e:	e00f      	b.n	8044fa0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f84:	3328      	adds	r3, #40	@ 0x28
 8044f86:	2102      	movs	r1, #2
 8044f88:	4618      	mov	r0, r3
 8044f8a:	f000 fde3 	bl	8045b54 <RCCEx_PLL3_Config>
 8044f8e:	4603      	mov	r3, r0
 8044f90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8044f94:	e004      	b.n	8044fa0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044f96:	2301      	movs	r3, #1
 8044f98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044f9c:	e000      	b.n	8044fa0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8044f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044fa0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044fa4:	2b00      	cmp	r3, #0
 8044fa6:	d10d      	bne.n	8044fc4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8044fa8:	4b05      	ldr	r3, [pc, #20]	@ (8044fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044fac:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8044fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044fb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8044fb8:	4a01      	ldr	r2, [pc, #4]	@ (8044fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044fba:	430b      	orrs	r3, r1
 8044fbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8044fbe:	e005      	b.n	8044fcc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8044fc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044fc4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044fc8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8044fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044fd4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8044fd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8044fda:	2300      	movs	r3, #0
 8044fdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8044fde:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8044fe2:	460b      	mov	r3, r1
 8044fe4:	4313      	orrs	r3, r2
 8044fe6:	d03b      	beq.n	8045060 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8044fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8044ff0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8044ff4:	d01f      	beq.n	8045036 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8044ff6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8044ffa:	d818      	bhi.n	804502e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8044ffc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8045000:	d003      	beq.n	804500a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8045002:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8045006:	d007      	beq.n	8045018 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8045008:	e011      	b.n	804502e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804500a:	4b64      	ldr	r3, [pc, #400]	@ (804519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 804500c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804500e:	4a63      	ldr	r2, [pc, #396]	@ (804519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8045014:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8045016:	e00f      	b.n	8045038 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8045018:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804501c:	3328      	adds	r3, #40	@ 0x28
 804501e:	2101      	movs	r1, #1
 8045020:	4618      	mov	r0, r3
 8045022:	f000 fd97 	bl	8045b54 <RCCEx_PLL3_Config>
 8045026:	4603      	mov	r3, r0
 8045028:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 804502c:	e004      	b.n	8045038 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804502e:	2301      	movs	r3, #1
 8045030:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8045034:	e000      	b.n	8045038 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8045036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8045038:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804503c:	2b00      	cmp	r3, #0
 804503e:	d10b      	bne.n	8045058 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8045040:	4b56      	ldr	r3, [pc, #344]	@ (804519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045044:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8045048:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804504c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8045050:	4a52      	ldr	r2, [pc, #328]	@ (804519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045052:	430b      	orrs	r3, r1
 8045054:	6553      	str	r3, [r2, #84]	@ 0x54
 8045056:	e003      	b.n	8045060 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8045058:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804505c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8045060:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045068:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 804506c:	673b      	str	r3, [r7, #112]	@ 0x70
 804506e:	2300      	movs	r3, #0
 8045070:	677b      	str	r3, [r7, #116]	@ 0x74
 8045072:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8045076:	460b      	mov	r3, r1
 8045078:	4313      	orrs	r3, r2
 804507a:	d031      	beq.n	80450e0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 804507c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045082:	2b00      	cmp	r3, #0
 8045084:	d003      	beq.n	804508e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8045086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 804508a:	d007      	beq.n	804509c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 804508c:	e011      	b.n	80450b2 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804508e:	4b43      	ldr	r3, [pc, #268]	@ (804519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045092:	4a42      	ldr	r2, [pc, #264]	@ (804519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8045098:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 804509a:	e00e      	b.n	80450ba <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 804509c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80450a0:	3308      	adds	r3, #8
 80450a2:	2102      	movs	r1, #2
 80450a4:	4618      	mov	r0, r3
 80450a6:	f000 fca3 	bl	80459f0 <RCCEx_PLL2_Config>
 80450aa:	4603      	mov	r3, r0
 80450ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80450b0:	e003      	b.n	80450ba <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80450b2:	2301      	movs	r3, #1
 80450b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80450b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80450ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80450be:	2b00      	cmp	r3, #0
 80450c0:	d10a      	bne.n	80450d8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80450c2:	4b36      	ldr	r3, [pc, #216]	@ (804519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80450c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80450c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80450ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80450ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80450d0:	4a32      	ldr	r2, [pc, #200]	@ (804519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80450d2:	430b      	orrs	r3, r1
 80450d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80450d6:	e003      	b.n	80450e0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80450d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80450dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80450e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80450e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80450e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80450ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80450ee:	2300      	movs	r3, #0
 80450f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80450f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80450f6:	460b      	mov	r3, r1
 80450f8:	4313      	orrs	r3, r2
 80450fa:	d00c      	beq.n	8045116 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80450fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045100:	3328      	adds	r3, #40	@ 0x28
 8045102:	2102      	movs	r1, #2
 8045104:	4618      	mov	r0, r3
 8045106:	f000 fd25 	bl	8045b54 <RCCEx_PLL3_Config>
 804510a:	4603      	mov	r3, r0
 804510c:	2b00      	cmp	r3, #0
 804510e:	d002      	beq.n	8045116 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8045110:	2301      	movs	r3, #1
 8045112:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8045116:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804511e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8045122:	663b      	str	r3, [r7, #96]	@ 0x60
 8045124:	2300      	movs	r3, #0
 8045126:	667b      	str	r3, [r7, #100]	@ 0x64
 8045128:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 804512c:	460b      	mov	r3, r1
 804512e:	4313      	orrs	r3, r2
 8045130:	d03a      	beq.n	80451a8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8045132:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045136:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 804513a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 804513e:	d018      	beq.n	8045172 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8045140:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8045144:	d811      	bhi.n	804516a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8045146:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 804514a:	d014      	beq.n	8045176 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 804514c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8045150:	d80b      	bhi.n	804516a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8045152:	2b00      	cmp	r3, #0
 8045154:	d011      	beq.n	804517a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8045156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 804515a:	d106      	bne.n	804516a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804515c:	4b0f      	ldr	r3, [pc, #60]	@ (804519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 804515e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045160:	4a0e      	ldr	r2, [pc, #56]	@ (804519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8045166:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8045168:	e008      	b.n	804517c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804516a:	2301      	movs	r3, #1
 804516c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8045170:	e004      	b.n	804517c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8045172:	bf00      	nop
 8045174:	e002      	b.n	804517c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8045176:	bf00      	nop
 8045178:	e000      	b.n	804517c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 804517a:	bf00      	nop
    }

    if (ret == HAL_OK)
 804517c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045180:	2b00      	cmp	r3, #0
 8045182:	d10d      	bne.n	80451a0 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8045184:	4b05      	ldr	r3, [pc, #20]	@ (804519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045188:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 804518c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045190:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8045194:	4a01      	ldr	r2, [pc, #4]	@ (804519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045196:	430b      	orrs	r3, r1
 8045198:	6553      	str	r3, [r2, #84]	@ 0x54
 804519a:	e005      	b.n	80451a8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 804519c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80451a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80451a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80451a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80451ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80451b0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80451b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80451b6:	2300      	movs	r3, #0
 80451b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80451ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80451be:	460b      	mov	r3, r1
 80451c0:	4313      	orrs	r3, r2
 80451c2:	d009      	beq.n	80451d8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80451c4:	4baa      	ldr	r3, [pc, #680]	@ (8045470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80451c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80451c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80451cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80451d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80451d2:	4aa7      	ldr	r2, [pc, #668]	@ (8045470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80451d4:	430b      	orrs	r3, r1
 80451d6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80451d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80451dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80451e0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80451e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80451e6:	2300      	movs	r3, #0
 80451e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80451ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80451ee:	460b      	mov	r3, r1
 80451f0:	4313      	orrs	r3, r2
 80451f2:	d00a      	beq.n	804520a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80451f4:	4b9e      	ldr	r3, [pc, #632]	@ (8045470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80451f6:	691b      	ldr	r3, [r3, #16]
 80451f8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80451fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045200:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8045204:	4a9a      	ldr	r2, [pc, #616]	@ (8045470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045206:	430b      	orrs	r3, r1
 8045208:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 804520a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045212:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8045216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8045218:	2300      	movs	r3, #0
 804521a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 804521c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8045220:	460b      	mov	r3, r1
 8045222:	4313      	orrs	r3, r2
 8045224:	d009      	beq.n	804523a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8045226:	4b92      	ldr	r3, [pc, #584]	@ (8045470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804522a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 804522e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8045234:	4a8e      	ldr	r2, [pc, #568]	@ (8045470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045236:	430b      	orrs	r3, r1
 8045238:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 804523a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045242:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8045246:	643b      	str	r3, [r7, #64]	@ 0x40
 8045248:	2300      	movs	r3, #0
 804524a:	647b      	str	r3, [r7, #68]	@ 0x44
 804524c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8045250:	460b      	mov	r3, r1
 8045252:	4313      	orrs	r3, r2
 8045254:	d00e      	beq.n	8045274 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8045256:	4b86      	ldr	r3, [pc, #536]	@ (8045470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045258:	691b      	ldr	r3, [r3, #16]
 804525a:	4a85      	ldr	r2, [pc, #532]	@ (8045470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 804525c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8045260:	6113      	str	r3, [r2, #16]
 8045262:	4b83      	ldr	r3, [pc, #524]	@ (8045470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045264:	6919      	ldr	r1, [r3, #16]
 8045266:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804526a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 804526e:	4a80      	ldr	r2, [pc, #512]	@ (8045470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045270:	430b      	orrs	r3, r1
 8045272:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8045274:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045278:	e9d3 2300 	ldrd	r2, r3, [r3]
 804527c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8045280:	63bb      	str	r3, [r7, #56]	@ 0x38
 8045282:	2300      	movs	r3, #0
 8045284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8045286:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 804528a:	460b      	mov	r3, r1
 804528c:	4313      	orrs	r3, r2
 804528e:	d009      	beq.n	80452a4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8045290:	4b77      	ldr	r3, [pc, #476]	@ (8045470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8045294:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8045298:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804529c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 804529e:	4a74      	ldr	r2, [pc, #464]	@ (8045470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80452a0:	430b      	orrs	r3, r1
 80452a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80452a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80452a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80452ac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80452b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80452b2:	2300      	movs	r3, #0
 80452b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80452b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80452ba:	460b      	mov	r3, r1
 80452bc:	4313      	orrs	r3, r2
 80452be:	d00a      	beq.n	80452d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80452c0:	4b6b      	ldr	r3, [pc, #428]	@ (8045470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80452c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80452c4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80452c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80452cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80452d0:	4a67      	ldr	r2, [pc, #412]	@ (8045470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80452d2:	430b      	orrs	r3, r1
 80452d4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80452d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80452da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80452de:	2100      	movs	r1, #0
 80452e0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80452e2:	f003 0301 	and.w	r3, r3, #1
 80452e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80452e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80452ec:	460b      	mov	r3, r1
 80452ee:	4313      	orrs	r3, r2
 80452f0:	d011      	beq.n	8045316 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80452f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80452f6:	3308      	adds	r3, #8
 80452f8:	2100      	movs	r1, #0
 80452fa:	4618      	mov	r0, r3
 80452fc:	f000 fb78 	bl	80459f0 <RCCEx_PLL2_Config>
 8045300:	4603      	mov	r3, r0
 8045302:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045306:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804530a:	2b00      	cmp	r3, #0
 804530c:	d003      	beq.n	8045316 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804530e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045312:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8045316:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804531e:	2100      	movs	r1, #0
 8045320:	6239      	str	r1, [r7, #32]
 8045322:	f003 0302 	and.w	r3, r3, #2
 8045326:	627b      	str	r3, [r7, #36]	@ 0x24
 8045328:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 804532c:	460b      	mov	r3, r1
 804532e:	4313      	orrs	r3, r2
 8045330:	d011      	beq.n	8045356 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8045332:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045336:	3308      	adds	r3, #8
 8045338:	2101      	movs	r1, #1
 804533a:	4618      	mov	r0, r3
 804533c:	f000 fb58 	bl	80459f0 <RCCEx_PLL2_Config>
 8045340:	4603      	mov	r3, r0
 8045342:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045346:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804534a:	2b00      	cmp	r3, #0
 804534c:	d003      	beq.n	8045356 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804534e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045352:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8045356:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804535e:	2100      	movs	r1, #0
 8045360:	61b9      	str	r1, [r7, #24]
 8045362:	f003 0304 	and.w	r3, r3, #4
 8045366:	61fb      	str	r3, [r7, #28]
 8045368:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 804536c:	460b      	mov	r3, r1
 804536e:	4313      	orrs	r3, r2
 8045370:	d011      	beq.n	8045396 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8045372:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045376:	3308      	adds	r3, #8
 8045378:	2102      	movs	r1, #2
 804537a:	4618      	mov	r0, r3
 804537c:	f000 fb38 	bl	80459f0 <RCCEx_PLL2_Config>
 8045380:	4603      	mov	r3, r0
 8045382:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045386:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804538a:	2b00      	cmp	r3, #0
 804538c:	d003      	beq.n	8045396 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804538e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045392:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8045396:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804539e:	2100      	movs	r1, #0
 80453a0:	6139      	str	r1, [r7, #16]
 80453a2:	f003 0308 	and.w	r3, r3, #8
 80453a6:	617b      	str	r3, [r7, #20]
 80453a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80453ac:	460b      	mov	r3, r1
 80453ae:	4313      	orrs	r3, r2
 80453b0:	d011      	beq.n	80453d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80453b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80453b6:	3328      	adds	r3, #40	@ 0x28
 80453b8:	2100      	movs	r1, #0
 80453ba:	4618      	mov	r0, r3
 80453bc:	f000 fbca 	bl	8045b54 <RCCEx_PLL3_Config>
 80453c0:	4603      	mov	r3, r0
 80453c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80453c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80453ca:	2b00      	cmp	r3, #0
 80453cc:	d003      	beq.n	80453d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80453ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80453d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80453d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80453da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80453de:	2100      	movs	r1, #0
 80453e0:	60b9      	str	r1, [r7, #8]
 80453e2:	f003 0310 	and.w	r3, r3, #16
 80453e6:	60fb      	str	r3, [r7, #12]
 80453e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80453ec:	460b      	mov	r3, r1
 80453ee:	4313      	orrs	r3, r2
 80453f0:	d011      	beq.n	8045416 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80453f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80453f6:	3328      	adds	r3, #40	@ 0x28
 80453f8:	2101      	movs	r1, #1
 80453fa:	4618      	mov	r0, r3
 80453fc:	f000 fbaa 	bl	8045b54 <RCCEx_PLL3_Config>
 8045400:	4603      	mov	r3, r0
 8045402:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045406:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804540a:	2b00      	cmp	r3, #0
 804540c:	d003      	beq.n	8045416 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804540e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045412:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8045416:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804541e:	2100      	movs	r1, #0
 8045420:	6039      	str	r1, [r7, #0]
 8045422:	f003 0320 	and.w	r3, r3, #32
 8045426:	607b      	str	r3, [r7, #4]
 8045428:	e9d7 1200 	ldrd	r1, r2, [r7]
 804542c:	460b      	mov	r3, r1
 804542e:	4313      	orrs	r3, r2
 8045430:	d011      	beq.n	8045456 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8045432:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045436:	3328      	adds	r3, #40	@ 0x28
 8045438:	2102      	movs	r1, #2
 804543a:	4618      	mov	r0, r3
 804543c:	f000 fb8a 	bl	8045b54 <RCCEx_PLL3_Config>
 8045440:	4603      	mov	r3, r0
 8045442:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045446:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804544a:	2b00      	cmp	r3, #0
 804544c:	d003      	beq.n	8045456 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804544e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045452:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8045456:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 804545a:	2b00      	cmp	r3, #0
 804545c:	d101      	bne.n	8045462 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 804545e:	2300      	movs	r3, #0
 8045460:	e000      	b.n	8045464 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8045462:	2301      	movs	r3, #1
}
 8045464:	4618      	mov	r0, r3
 8045466:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 804546a:	46bd      	mov	sp, r7
 804546c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8045470:	58024400 	.word	0x58024400

08045474 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8045474:	b580      	push	{r7, lr}
 8045476:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8045478:	f7fe fd56 	bl	8043f28 <HAL_RCC_GetHCLKFreq>
 804547c:	4602      	mov	r2, r0
 804547e:	4b06      	ldr	r3, [pc, #24]	@ (8045498 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8045480:	6a1b      	ldr	r3, [r3, #32]
 8045482:	091b      	lsrs	r3, r3, #4
 8045484:	f003 0307 	and.w	r3, r3, #7
 8045488:	4904      	ldr	r1, [pc, #16]	@ (804549c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 804548a:	5ccb      	ldrb	r3, [r1, r3]
 804548c:	f003 031f 	and.w	r3, r3, #31
 8045490:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8045494:	4618      	mov	r0, r3
 8045496:	bd80      	pop	{r7, pc}
 8045498:	58024400 	.word	0x58024400
 804549c:	0804c2d8 	.word	0x0804c2d8

080454a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80454a0:	b480      	push	{r7}
 80454a2:	b089      	sub	sp, #36	@ 0x24
 80454a4:	af00      	add	r7, sp, #0
 80454a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80454a8:	4ba1      	ldr	r3, [pc, #644]	@ (8045730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80454aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80454ac:	f003 0303 	and.w	r3, r3, #3
 80454b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80454b2:	4b9f      	ldr	r3, [pc, #636]	@ (8045730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80454b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80454b6:	0b1b      	lsrs	r3, r3, #12
 80454b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80454bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80454be:	4b9c      	ldr	r3, [pc, #624]	@ (8045730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80454c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80454c2:	091b      	lsrs	r3, r3, #4
 80454c4:	f003 0301 	and.w	r3, r3, #1
 80454c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80454ca:	4b99      	ldr	r3, [pc, #612]	@ (8045730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80454cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80454ce:	08db      	lsrs	r3, r3, #3
 80454d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80454d4:	693a      	ldr	r2, [r7, #16]
 80454d6:	fb02 f303 	mul.w	r3, r2, r3
 80454da:	ee07 3a90 	vmov	s15, r3
 80454de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80454e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80454e6:	697b      	ldr	r3, [r7, #20]
 80454e8:	2b00      	cmp	r3, #0
 80454ea:	f000 8111 	beq.w	8045710 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80454ee:	69bb      	ldr	r3, [r7, #24]
 80454f0:	2b02      	cmp	r3, #2
 80454f2:	f000 8083 	beq.w	80455fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80454f6:	69bb      	ldr	r3, [r7, #24]
 80454f8:	2b02      	cmp	r3, #2
 80454fa:	f200 80a1 	bhi.w	8045640 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80454fe:	69bb      	ldr	r3, [r7, #24]
 8045500:	2b00      	cmp	r3, #0
 8045502:	d003      	beq.n	804550c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8045504:	69bb      	ldr	r3, [r7, #24]
 8045506:	2b01      	cmp	r3, #1
 8045508:	d056      	beq.n	80455b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 804550a:	e099      	b.n	8045640 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 804550c:	4b88      	ldr	r3, [pc, #544]	@ (8045730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 804550e:	681b      	ldr	r3, [r3, #0]
 8045510:	f003 0320 	and.w	r3, r3, #32
 8045514:	2b00      	cmp	r3, #0
 8045516:	d02d      	beq.n	8045574 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8045518:	4b85      	ldr	r3, [pc, #532]	@ (8045730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 804551a:	681b      	ldr	r3, [r3, #0]
 804551c:	08db      	lsrs	r3, r3, #3
 804551e:	f003 0303 	and.w	r3, r3, #3
 8045522:	4a84      	ldr	r2, [pc, #528]	@ (8045734 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8045524:	fa22 f303 	lsr.w	r3, r2, r3
 8045528:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 804552a:	68bb      	ldr	r3, [r7, #8]
 804552c:	ee07 3a90 	vmov	s15, r3
 8045530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8045534:	697b      	ldr	r3, [r7, #20]
 8045536:	ee07 3a90 	vmov	s15, r3
 804553a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804553e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8045542:	4b7b      	ldr	r3, [pc, #492]	@ (8045730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804554a:	ee07 3a90 	vmov	s15, r3
 804554e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8045552:	ed97 6a03 	vldr	s12, [r7, #12]
 8045556:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8045738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 804555a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804555e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8045562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8045566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804556a:	ee67 7a27 	vmul.f32	s15, s14, s15
 804556e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8045572:	e087      	b.n	8045684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8045574:	697b      	ldr	r3, [r7, #20]
 8045576:	ee07 3a90 	vmov	s15, r3
 804557a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804557e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 804573c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8045582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8045586:	4b6a      	ldr	r3, [pc, #424]	@ (8045730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804558a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804558e:	ee07 3a90 	vmov	s15, r3
 8045592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8045596:	ed97 6a03 	vldr	s12, [r7, #12]
 804559a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8045738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 804559e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80455a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80455a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80455aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80455ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80455b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80455b6:	e065      	b.n	8045684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80455b8:	697b      	ldr	r3, [r7, #20]
 80455ba:	ee07 3a90 	vmov	s15, r3
 80455be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80455c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8045740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80455c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80455ca:	4b59      	ldr	r3, [pc, #356]	@ (8045730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80455cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80455ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80455d2:	ee07 3a90 	vmov	s15, r3
 80455d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80455da:	ed97 6a03 	vldr	s12, [r7, #12]
 80455de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8045738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80455e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80455e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80455ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80455ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80455f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80455f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80455fa:	e043      	b.n	8045684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80455fc:	697b      	ldr	r3, [r7, #20]
 80455fe:	ee07 3a90 	vmov	s15, r3
 8045602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045606:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8045744 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 804560a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804560e:	4b48      	ldr	r3, [pc, #288]	@ (8045730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045616:	ee07 3a90 	vmov	s15, r3
 804561a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804561e:	ed97 6a03 	vldr	s12, [r7, #12]
 8045622:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8045738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8045626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804562a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804562e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8045632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045636:	ee67 7a27 	vmul.f32	s15, s14, s15
 804563a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 804563e:	e021      	b.n	8045684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8045640:	697b      	ldr	r3, [r7, #20]
 8045642:	ee07 3a90 	vmov	s15, r3
 8045646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804564a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8045740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 804564e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8045652:	4b37      	ldr	r3, [pc, #220]	@ (8045730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804565a:	ee07 3a90 	vmov	s15, r3
 804565e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8045662:	ed97 6a03 	vldr	s12, [r7, #12]
 8045666:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8045738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 804566a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804566e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8045672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8045676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804567a:	ee67 7a27 	vmul.f32	s15, s14, s15
 804567e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8045682:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8045684:	4b2a      	ldr	r3, [pc, #168]	@ (8045730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045688:	0a5b      	lsrs	r3, r3, #9
 804568a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 804568e:	ee07 3a90 	vmov	s15, r3
 8045692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045696:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 804569a:	ee37 7a87 	vadd.f32	s14, s15, s14
 804569e:	edd7 6a07 	vldr	s13, [r7, #28]
 80456a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80456a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80456aa:	ee17 2a90 	vmov	r2, s15
 80456ae:	687b      	ldr	r3, [r7, #4]
 80456b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80456b2:	4b1f      	ldr	r3, [pc, #124]	@ (8045730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80456b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80456b6:	0c1b      	lsrs	r3, r3, #16
 80456b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80456bc:	ee07 3a90 	vmov	s15, r3
 80456c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80456c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80456c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80456cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80456d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80456d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80456d8:	ee17 2a90 	vmov	r2, s15
 80456dc:	687b      	ldr	r3, [r7, #4]
 80456de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80456e0:	4b13      	ldr	r3, [pc, #76]	@ (8045730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80456e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80456e4:	0e1b      	lsrs	r3, r3, #24
 80456e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80456ea:	ee07 3a90 	vmov	s15, r3
 80456ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80456f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80456f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80456fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80456fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8045702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8045706:	ee17 2a90 	vmov	r2, s15
 804570a:	687b      	ldr	r3, [r7, #4]
 804570c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 804570e:	e008      	b.n	8045722 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8045710:	687b      	ldr	r3, [r7, #4]
 8045712:	2200      	movs	r2, #0
 8045714:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8045716:	687b      	ldr	r3, [r7, #4]
 8045718:	2200      	movs	r2, #0
 804571a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 804571c:	687b      	ldr	r3, [r7, #4]
 804571e:	2200      	movs	r2, #0
 8045720:	609a      	str	r2, [r3, #8]
}
 8045722:	bf00      	nop
 8045724:	3724      	adds	r7, #36	@ 0x24
 8045726:	46bd      	mov	sp, r7
 8045728:	f85d 7b04 	ldr.w	r7, [sp], #4
 804572c:	4770      	bx	lr
 804572e:	bf00      	nop
 8045730:	58024400 	.word	0x58024400
 8045734:	03d09000 	.word	0x03d09000
 8045738:	46000000 	.word	0x46000000
 804573c:	4c742400 	.word	0x4c742400
 8045740:	4a742400 	.word	0x4a742400
 8045744:	4bbebc20 	.word	0x4bbebc20

08045748 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8045748:	b480      	push	{r7}
 804574a:	b089      	sub	sp, #36	@ 0x24
 804574c:	af00      	add	r7, sp, #0
 804574e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8045750:	4ba1      	ldr	r3, [pc, #644]	@ (80459d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045754:	f003 0303 	and.w	r3, r3, #3
 8045758:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 804575a:	4b9f      	ldr	r3, [pc, #636]	@ (80459d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 804575c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804575e:	0d1b      	lsrs	r3, r3, #20
 8045760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8045764:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8045766:	4b9c      	ldr	r3, [pc, #624]	@ (80459d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804576a:	0a1b      	lsrs	r3, r3, #8
 804576c:	f003 0301 	and.w	r3, r3, #1
 8045770:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8045772:	4b99      	ldr	r3, [pc, #612]	@ (80459d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8045776:	08db      	lsrs	r3, r3, #3
 8045778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 804577c:	693a      	ldr	r2, [r7, #16]
 804577e:	fb02 f303 	mul.w	r3, r2, r3
 8045782:	ee07 3a90 	vmov	s15, r3
 8045786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804578a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 804578e:	697b      	ldr	r3, [r7, #20]
 8045790:	2b00      	cmp	r3, #0
 8045792:	f000 8111 	beq.w	80459b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8045796:	69bb      	ldr	r3, [r7, #24]
 8045798:	2b02      	cmp	r3, #2
 804579a:	f000 8083 	beq.w	80458a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 804579e:	69bb      	ldr	r3, [r7, #24]
 80457a0:	2b02      	cmp	r3, #2
 80457a2:	f200 80a1 	bhi.w	80458e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80457a6:	69bb      	ldr	r3, [r7, #24]
 80457a8:	2b00      	cmp	r3, #0
 80457aa:	d003      	beq.n	80457b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80457ac:	69bb      	ldr	r3, [r7, #24]
 80457ae:	2b01      	cmp	r3, #1
 80457b0:	d056      	beq.n	8045860 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80457b2:	e099      	b.n	80458e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80457b4:	4b88      	ldr	r3, [pc, #544]	@ (80459d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80457b6:	681b      	ldr	r3, [r3, #0]
 80457b8:	f003 0320 	and.w	r3, r3, #32
 80457bc:	2b00      	cmp	r3, #0
 80457be:	d02d      	beq.n	804581c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80457c0:	4b85      	ldr	r3, [pc, #532]	@ (80459d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80457c2:	681b      	ldr	r3, [r3, #0]
 80457c4:	08db      	lsrs	r3, r3, #3
 80457c6:	f003 0303 	and.w	r3, r3, #3
 80457ca:	4a84      	ldr	r2, [pc, #528]	@ (80459dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80457cc:	fa22 f303 	lsr.w	r3, r2, r3
 80457d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80457d2:	68bb      	ldr	r3, [r7, #8]
 80457d4:	ee07 3a90 	vmov	s15, r3
 80457d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80457dc:	697b      	ldr	r3, [r7, #20]
 80457de:	ee07 3a90 	vmov	s15, r3
 80457e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80457e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80457ea:	4b7b      	ldr	r3, [pc, #492]	@ (80459d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80457ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80457ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80457f2:	ee07 3a90 	vmov	s15, r3
 80457f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80457fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80457fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80459e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8045802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8045806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804580a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 804580e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045816:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 804581a:	e087      	b.n	804592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 804581c:	697b      	ldr	r3, [r7, #20]
 804581e:	ee07 3a90 	vmov	s15, r3
 8045822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045826:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80459e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 804582a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804582e:	4b6a      	ldr	r3, [pc, #424]	@ (80459d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8045832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045836:	ee07 3a90 	vmov	s15, r3
 804583a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804583e:	ed97 6a03 	vldr	s12, [r7, #12]
 8045842:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80459e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8045846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804584a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804584e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8045852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045856:	ee67 7a27 	vmul.f32	s15, s14, s15
 804585a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 804585e:	e065      	b.n	804592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8045860:	697b      	ldr	r3, [r7, #20]
 8045862:	ee07 3a90 	vmov	s15, r3
 8045866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804586a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80459e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 804586e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8045872:	4b59      	ldr	r3, [pc, #356]	@ (80459d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8045876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804587a:	ee07 3a90 	vmov	s15, r3
 804587e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8045882:	ed97 6a03 	vldr	s12, [r7, #12]
 8045886:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80459e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 804588a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804588e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8045892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8045896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804589a:	ee67 7a27 	vmul.f32	s15, s14, s15
 804589e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80458a2:	e043      	b.n	804592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80458a4:	697b      	ldr	r3, [r7, #20]
 80458a6:	ee07 3a90 	vmov	s15, r3
 80458aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80458ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80459ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80458b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80458b6:	4b48      	ldr	r3, [pc, #288]	@ (80459d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80458b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80458ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80458be:	ee07 3a90 	vmov	s15, r3
 80458c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80458c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80458ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80459e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80458ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80458d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80458d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80458da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80458de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80458e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80458e6:	e021      	b.n	804592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80458e8:	697b      	ldr	r3, [r7, #20]
 80458ea:	ee07 3a90 	vmov	s15, r3
 80458ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80458f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80459e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80458f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80458fa:	4b37      	ldr	r3, [pc, #220]	@ (80459d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80458fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80458fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045902:	ee07 3a90 	vmov	s15, r3
 8045906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804590a:	ed97 6a03 	vldr	s12, [r7, #12]
 804590e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80459e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8045912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8045916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804591a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 804591e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 804592a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 804592c:	4b2a      	ldr	r3, [pc, #168]	@ (80459d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 804592e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8045930:	0a5b      	lsrs	r3, r3, #9
 8045932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8045936:	ee07 3a90 	vmov	s15, r3
 804593a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804593e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8045942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8045946:	edd7 6a07 	vldr	s13, [r7, #28]
 804594a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 804594e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8045952:	ee17 2a90 	vmov	r2, s15
 8045956:	687b      	ldr	r3, [r7, #4]
 8045958:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 804595a:	4b1f      	ldr	r3, [pc, #124]	@ (80459d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 804595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804595e:	0c1b      	lsrs	r3, r3, #16
 8045960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8045964:	ee07 3a90 	vmov	s15, r3
 8045968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804596c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8045970:	ee37 7a87 	vadd.f32	s14, s15, s14
 8045974:	edd7 6a07 	vldr	s13, [r7, #28]
 8045978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 804597c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8045980:	ee17 2a90 	vmov	r2, s15
 8045984:	687b      	ldr	r3, [r7, #4]
 8045986:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8045988:	4b13      	ldr	r3, [pc, #76]	@ (80459d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 804598a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804598c:	0e1b      	lsrs	r3, r3, #24
 804598e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8045992:	ee07 3a90 	vmov	s15, r3
 8045996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804599a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 804599e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80459a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80459a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80459aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80459ae:	ee17 2a90 	vmov	r2, s15
 80459b2:	687b      	ldr	r3, [r7, #4]
 80459b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80459b6:	e008      	b.n	80459ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80459b8:	687b      	ldr	r3, [r7, #4]
 80459ba:	2200      	movs	r2, #0
 80459bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80459be:	687b      	ldr	r3, [r7, #4]
 80459c0:	2200      	movs	r2, #0
 80459c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80459c4:	687b      	ldr	r3, [r7, #4]
 80459c6:	2200      	movs	r2, #0
 80459c8:	609a      	str	r2, [r3, #8]
}
 80459ca:	bf00      	nop
 80459cc:	3724      	adds	r7, #36	@ 0x24
 80459ce:	46bd      	mov	sp, r7
 80459d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80459d4:	4770      	bx	lr
 80459d6:	bf00      	nop
 80459d8:	58024400 	.word	0x58024400
 80459dc:	03d09000 	.word	0x03d09000
 80459e0:	46000000 	.word	0x46000000
 80459e4:	4c742400 	.word	0x4c742400
 80459e8:	4a742400 	.word	0x4a742400
 80459ec:	4bbebc20 	.word	0x4bbebc20

080459f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80459f0:	b580      	push	{r7, lr}
 80459f2:	b084      	sub	sp, #16
 80459f4:	af00      	add	r7, sp, #0
 80459f6:	6078      	str	r0, [r7, #4]
 80459f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80459fa:	2300      	movs	r3, #0
 80459fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80459fe:	4b53      	ldr	r3, [pc, #332]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045a02:	f003 0303 	and.w	r3, r3, #3
 8045a06:	2b03      	cmp	r3, #3
 8045a08:	d101      	bne.n	8045a0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8045a0a:	2301      	movs	r3, #1
 8045a0c:	e099      	b.n	8045b42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8045a0e:	4b4f      	ldr	r3, [pc, #316]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045a10:	681b      	ldr	r3, [r3, #0]
 8045a12:	4a4e      	ldr	r2, [pc, #312]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045a14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8045a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045a1a:	f7fb fb5d 	bl	80410d8 <HAL_GetTick>
 8045a1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8045a20:	e008      	b.n	8045a34 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8045a22:	f7fb fb59 	bl	80410d8 <HAL_GetTick>
 8045a26:	4602      	mov	r2, r0
 8045a28:	68bb      	ldr	r3, [r7, #8]
 8045a2a:	1ad3      	subs	r3, r2, r3
 8045a2c:	2b02      	cmp	r3, #2
 8045a2e:	d901      	bls.n	8045a34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8045a30:	2303      	movs	r3, #3
 8045a32:	e086      	b.n	8045b42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8045a34:	4b45      	ldr	r3, [pc, #276]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045a36:	681b      	ldr	r3, [r3, #0]
 8045a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8045a3c:	2b00      	cmp	r3, #0
 8045a3e:	d1f0      	bne.n	8045a22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8045a40:	4b42      	ldr	r3, [pc, #264]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045a44:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8045a48:	687b      	ldr	r3, [r7, #4]
 8045a4a:	681b      	ldr	r3, [r3, #0]
 8045a4c:	031b      	lsls	r3, r3, #12
 8045a4e:	493f      	ldr	r1, [pc, #252]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045a50:	4313      	orrs	r3, r2
 8045a52:	628b      	str	r3, [r1, #40]	@ 0x28
 8045a54:	687b      	ldr	r3, [r7, #4]
 8045a56:	685b      	ldr	r3, [r3, #4]
 8045a58:	3b01      	subs	r3, #1
 8045a5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8045a5e:	687b      	ldr	r3, [r7, #4]
 8045a60:	689b      	ldr	r3, [r3, #8]
 8045a62:	3b01      	subs	r3, #1
 8045a64:	025b      	lsls	r3, r3, #9
 8045a66:	b29b      	uxth	r3, r3
 8045a68:	431a      	orrs	r2, r3
 8045a6a:	687b      	ldr	r3, [r7, #4]
 8045a6c:	68db      	ldr	r3, [r3, #12]
 8045a6e:	3b01      	subs	r3, #1
 8045a70:	041b      	lsls	r3, r3, #16
 8045a72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8045a76:	431a      	orrs	r2, r3
 8045a78:	687b      	ldr	r3, [r7, #4]
 8045a7a:	691b      	ldr	r3, [r3, #16]
 8045a7c:	3b01      	subs	r3, #1
 8045a7e:	061b      	lsls	r3, r3, #24
 8045a80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8045a84:	4931      	ldr	r1, [pc, #196]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045a86:	4313      	orrs	r3, r2
 8045a88:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8045a8a:	4b30      	ldr	r3, [pc, #192]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045a8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8045a92:	687b      	ldr	r3, [r7, #4]
 8045a94:	695b      	ldr	r3, [r3, #20]
 8045a96:	492d      	ldr	r1, [pc, #180]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045a98:	4313      	orrs	r3, r2
 8045a9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8045a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045aa0:	f023 0220 	bic.w	r2, r3, #32
 8045aa4:	687b      	ldr	r3, [r7, #4]
 8045aa6:	699b      	ldr	r3, [r3, #24]
 8045aa8:	4928      	ldr	r1, [pc, #160]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045aaa:	4313      	orrs	r3, r2
 8045aac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8045aae:	4b27      	ldr	r3, [pc, #156]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045ab2:	4a26      	ldr	r2, [pc, #152]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045ab4:	f023 0310 	bic.w	r3, r3, #16
 8045ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8045aba:	4b24      	ldr	r3, [pc, #144]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045abc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8045abe:	4b24      	ldr	r3, [pc, #144]	@ (8045b50 <RCCEx_PLL2_Config+0x160>)
 8045ac0:	4013      	ands	r3, r2
 8045ac2:	687a      	ldr	r2, [r7, #4]
 8045ac4:	69d2      	ldr	r2, [r2, #28]
 8045ac6:	00d2      	lsls	r2, r2, #3
 8045ac8:	4920      	ldr	r1, [pc, #128]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045aca:	4313      	orrs	r3, r2
 8045acc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8045ace:	4b1f      	ldr	r3, [pc, #124]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045ad4:	f043 0310 	orr.w	r3, r3, #16
 8045ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8045ada:	683b      	ldr	r3, [r7, #0]
 8045adc:	2b00      	cmp	r3, #0
 8045ade:	d106      	bne.n	8045aee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8045ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045ae4:	4a19      	ldr	r2, [pc, #100]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045ae6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8045aea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8045aec:	e00f      	b.n	8045b0e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8045aee:	683b      	ldr	r3, [r7, #0]
 8045af0:	2b01      	cmp	r3, #1
 8045af2:	d106      	bne.n	8045b02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8045af4:	4b15      	ldr	r3, [pc, #84]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045af8:	4a14      	ldr	r2, [pc, #80]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045afa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8045afe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8045b00:	e005      	b.n	8045b0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8045b02:	4b12      	ldr	r3, [pc, #72]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045b06:	4a11      	ldr	r2, [pc, #68]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045b08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8045b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8045b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045b10:	681b      	ldr	r3, [r3, #0]
 8045b12:	4a0e      	ldr	r2, [pc, #56]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045b14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8045b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045b1a:	f7fb fadd 	bl	80410d8 <HAL_GetTick>
 8045b1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8045b20:	e008      	b.n	8045b34 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8045b22:	f7fb fad9 	bl	80410d8 <HAL_GetTick>
 8045b26:	4602      	mov	r2, r0
 8045b28:	68bb      	ldr	r3, [r7, #8]
 8045b2a:	1ad3      	subs	r3, r2, r3
 8045b2c:	2b02      	cmp	r3, #2
 8045b2e:	d901      	bls.n	8045b34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8045b30:	2303      	movs	r3, #3
 8045b32:	e006      	b.n	8045b42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8045b34:	4b05      	ldr	r3, [pc, #20]	@ (8045b4c <RCCEx_PLL2_Config+0x15c>)
 8045b36:	681b      	ldr	r3, [r3, #0]
 8045b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8045b3c:	2b00      	cmp	r3, #0
 8045b3e:	d0f0      	beq.n	8045b22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8045b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8045b42:	4618      	mov	r0, r3
 8045b44:	3710      	adds	r7, #16
 8045b46:	46bd      	mov	sp, r7
 8045b48:	bd80      	pop	{r7, pc}
 8045b4a:	bf00      	nop
 8045b4c:	58024400 	.word	0x58024400
 8045b50:	ffff0007 	.word	0xffff0007

08045b54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8045b54:	b580      	push	{r7, lr}
 8045b56:	b084      	sub	sp, #16
 8045b58:	af00      	add	r7, sp, #0
 8045b5a:	6078      	str	r0, [r7, #4]
 8045b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8045b5e:	2300      	movs	r3, #0
 8045b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8045b62:	4b53      	ldr	r3, [pc, #332]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045b66:	f003 0303 	and.w	r3, r3, #3
 8045b6a:	2b03      	cmp	r3, #3
 8045b6c:	d101      	bne.n	8045b72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8045b6e:	2301      	movs	r3, #1
 8045b70:	e099      	b.n	8045ca6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8045b72:	4b4f      	ldr	r3, [pc, #316]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045b74:	681b      	ldr	r3, [r3, #0]
 8045b76:	4a4e      	ldr	r2, [pc, #312]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8045b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045b7e:	f7fb faab 	bl	80410d8 <HAL_GetTick>
 8045b82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8045b84:	e008      	b.n	8045b98 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8045b86:	f7fb faa7 	bl	80410d8 <HAL_GetTick>
 8045b8a:	4602      	mov	r2, r0
 8045b8c:	68bb      	ldr	r3, [r7, #8]
 8045b8e:	1ad3      	subs	r3, r2, r3
 8045b90:	2b02      	cmp	r3, #2
 8045b92:	d901      	bls.n	8045b98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8045b94:	2303      	movs	r3, #3
 8045b96:	e086      	b.n	8045ca6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8045b98:	4b45      	ldr	r3, [pc, #276]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045b9a:	681b      	ldr	r3, [r3, #0]
 8045b9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8045ba0:	2b00      	cmp	r3, #0
 8045ba2:	d1f0      	bne.n	8045b86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8045ba4:	4b42      	ldr	r3, [pc, #264]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045ba8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8045bac:	687b      	ldr	r3, [r7, #4]
 8045bae:	681b      	ldr	r3, [r3, #0]
 8045bb0:	051b      	lsls	r3, r3, #20
 8045bb2:	493f      	ldr	r1, [pc, #252]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045bb4:	4313      	orrs	r3, r2
 8045bb6:	628b      	str	r3, [r1, #40]	@ 0x28
 8045bb8:	687b      	ldr	r3, [r7, #4]
 8045bba:	685b      	ldr	r3, [r3, #4]
 8045bbc:	3b01      	subs	r3, #1
 8045bbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8045bc2:	687b      	ldr	r3, [r7, #4]
 8045bc4:	689b      	ldr	r3, [r3, #8]
 8045bc6:	3b01      	subs	r3, #1
 8045bc8:	025b      	lsls	r3, r3, #9
 8045bca:	b29b      	uxth	r3, r3
 8045bcc:	431a      	orrs	r2, r3
 8045bce:	687b      	ldr	r3, [r7, #4]
 8045bd0:	68db      	ldr	r3, [r3, #12]
 8045bd2:	3b01      	subs	r3, #1
 8045bd4:	041b      	lsls	r3, r3, #16
 8045bd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8045bda:	431a      	orrs	r2, r3
 8045bdc:	687b      	ldr	r3, [r7, #4]
 8045bde:	691b      	ldr	r3, [r3, #16]
 8045be0:	3b01      	subs	r3, #1
 8045be2:	061b      	lsls	r3, r3, #24
 8045be4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8045be8:	4931      	ldr	r1, [pc, #196]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045bea:	4313      	orrs	r3, r2
 8045bec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8045bee:	4b30      	ldr	r3, [pc, #192]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045bf2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8045bf6:	687b      	ldr	r3, [r7, #4]
 8045bf8:	695b      	ldr	r3, [r3, #20]
 8045bfa:	492d      	ldr	r1, [pc, #180]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045bfc:	4313      	orrs	r3, r2
 8045bfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8045c00:	4b2b      	ldr	r3, [pc, #172]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c04:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8045c08:	687b      	ldr	r3, [r7, #4]
 8045c0a:	699b      	ldr	r3, [r3, #24]
 8045c0c:	4928      	ldr	r1, [pc, #160]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c0e:	4313      	orrs	r3, r2
 8045c10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8045c12:	4b27      	ldr	r3, [pc, #156]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c16:	4a26      	ldr	r2, [pc, #152]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8045c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8045c1e:	4b24      	ldr	r3, [pc, #144]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8045c22:	4b24      	ldr	r3, [pc, #144]	@ (8045cb4 <RCCEx_PLL3_Config+0x160>)
 8045c24:	4013      	ands	r3, r2
 8045c26:	687a      	ldr	r2, [r7, #4]
 8045c28:	69d2      	ldr	r2, [r2, #28]
 8045c2a:	00d2      	lsls	r2, r2, #3
 8045c2c:	4920      	ldr	r1, [pc, #128]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c2e:	4313      	orrs	r3, r2
 8045c30:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8045c32:	4b1f      	ldr	r3, [pc, #124]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c36:	4a1e      	ldr	r2, [pc, #120]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8045c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8045c3e:	683b      	ldr	r3, [r7, #0]
 8045c40:	2b00      	cmp	r3, #0
 8045c42:	d106      	bne.n	8045c52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8045c44:	4b1a      	ldr	r3, [pc, #104]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c48:	4a19      	ldr	r2, [pc, #100]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8045c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8045c50:	e00f      	b.n	8045c72 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8045c52:	683b      	ldr	r3, [r7, #0]
 8045c54:	2b01      	cmp	r3, #1
 8045c56:	d106      	bne.n	8045c66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8045c58:	4b15      	ldr	r3, [pc, #84]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c5c:	4a14      	ldr	r2, [pc, #80]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8045c62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8045c64:	e005      	b.n	8045c72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8045c66:	4b12      	ldr	r3, [pc, #72]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c6a:	4a11      	ldr	r2, [pc, #68]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8045c70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8045c72:	4b0f      	ldr	r3, [pc, #60]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c74:	681b      	ldr	r3, [r3, #0]
 8045c76:	4a0e      	ldr	r2, [pc, #56]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8045c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045c7e:	f7fb fa2b 	bl	80410d8 <HAL_GetTick>
 8045c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8045c84:	e008      	b.n	8045c98 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8045c86:	f7fb fa27 	bl	80410d8 <HAL_GetTick>
 8045c8a:	4602      	mov	r2, r0
 8045c8c:	68bb      	ldr	r3, [r7, #8]
 8045c8e:	1ad3      	subs	r3, r2, r3
 8045c90:	2b02      	cmp	r3, #2
 8045c92:	d901      	bls.n	8045c98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8045c94:	2303      	movs	r3, #3
 8045c96:	e006      	b.n	8045ca6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8045c98:	4b05      	ldr	r3, [pc, #20]	@ (8045cb0 <RCCEx_PLL3_Config+0x15c>)
 8045c9a:	681b      	ldr	r3, [r3, #0]
 8045c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8045ca0:	2b00      	cmp	r3, #0
 8045ca2:	d0f0      	beq.n	8045c86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8045ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8045ca6:	4618      	mov	r0, r3
 8045ca8:	3710      	adds	r7, #16
 8045caa:	46bd      	mov	sp, r7
 8045cac:	bd80      	pop	{r7, pc}
 8045cae:	bf00      	nop
 8045cb0:	58024400 	.word	0x58024400
 8045cb4:	ffff0007 	.word	0xffff0007

08045cb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8045cb8:	b580      	push	{r7, lr}
 8045cba:	b082      	sub	sp, #8
 8045cbc:	af00      	add	r7, sp, #0
 8045cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8045cc0:	687b      	ldr	r3, [r7, #4]
 8045cc2:	2b00      	cmp	r3, #0
 8045cc4:	d101      	bne.n	8045cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8045cc6:	2301      	movs	r3, #1
 8045cc8:	e042      	b.n	8045d50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8045cca:	687b      	ldr	r3, [r7, #4]
 8045ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8045cd0:	2b00      	cmp	r3, #0
 8045cd2:	d106      	bne.n	8045ce2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8045cd4:	687b      	ldr	r3, [r7, #4]
 8045cd6:	2200      	movs	r2, #0
 8045cd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8045cdc:	6878      	ldr	r0, [r7, #4]
 8045cde:	f7fa ffd9 	bl	8040c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8045ce2:	687b      	ldr	r3, [r7, #4]
 8045ce4:	2224      	movs	r2, #36	@ 0x24
 8045ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8045cea:	687b      	ldr	r3, [r7, #4]
 8045cec:	681b      	ldr	r3, [r3, #0]
 8045cee:	681a      	ldr	r2, [r3, #0]
 8045cf0:	687b      	ldr	r3, [r7, #4]
 8045cf2:	681b      	ldr	r3, [r3, #0]
 8045cf4:	f022 0201 	bic.w	r2, r2, #1
 8045cf8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8045cfa:	687b      	ldr	r3, [r7, #4]
 8045cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045cfe:	2b00      	cmp	r3, #0
 8045d00:	d002      	beq.n	8045d08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8045d02:	6878      	ldr	r0, [r7, #4]
 8045d04:	f000 fd90 	bl	8046828 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8045d08:	6878      	ldr	r0, [r7, #4]
 8045d0a:	f000 f825 	bl	8045d58 <UART_SetConfig>
 8045d0e:	4603      	mov	r3, r0
 8045d10:	2b01      	cmp	r3, #1
 8045d12:	d101      	bne.n	8045d18 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8045d14:	2301      	movs	r3, #1
 8045d16:	e01b      	b.n	8045d50 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8045d18:	687b      	ldr	r3, [r7, #4]
 8045d1a:	681b      	ldr	r3, [r3, #0]
 8045d1c:	685a      	ldr	r2, [r3, #4]
 8045d1e:	687b      	ldr	r3, [r7, #4]
 8045d20:	681b      	ldr	r3, [r3, #0]
 8045d22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8045d26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8045d28:	687b      	ldr	r3, [r7, #4]
 8045d2a:	681b      	ldr	r3, [r3, #0]
 8045d2c:	689a      	ldr	r2, [r3, #8]
 8045d2e:	687b      	ldr	r3, [r7, #4]
 8045d30:	681b      	ldr	r3, [r3, #0]
 8045d32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8045d36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8045d38:	687b      	ldr	r3, [r7, #4]
 8045d3a:	681b      	ldr	r3, [r3, #0]
 8045d3c:	681a      	ldr	r2, [r3, #0]
 8045d3e:	687b      	ldr	r3, [r7, #4]
 8045d40:	681b      	ldr	r3, [r3, #0]
 8045d42:	f042 0201 	orr.w	r2, r2, #1
 8045d46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8045d48:	6878      	ldr	r0, [r7, #4]
 8045d4a:	f000 fe0f 	bl	804696c <UART_CheckIdleState>
 8045d4e:	4603      	mov	r3, r0
}
 8045d50:	4618      	mov	r0, r3
 8045d52:	3708      	adds	r7, #8
 8045d54:	46bd      	mov	sp, r7
 8045d56:	bd80      	pop	{r7, pc}

08045d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8045d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8045d5c:	b092      	sub	sp, #72	@ 0x48
 8045d5e:	af00      	add	r7, sp, #0
 8045d60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8045d62:	2300      	movs	r3, #0
 8045d64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8045d68:	697b      	ldr	r3, [r7, #20]
 8045d6a:	689a      	ldr	r2, [r3, #8]
 8045d6c:	697b      	ldr	r3, [r7, #20]
 8045d6e:	691b      	ldr	r3, [r3, #16]
 8045d70:	431a      	orrs	r2, r3
 8045d72:	697b      	ldr	r3, [r7, #20]
 8045d74:	695b      	ldr	r3, [r3, #20]
 8045d76:	431a      	orrs	r2, r3
 8045d78:	697b      	ldr	r3, [r7, #20]
 8045d7a:	69db      	ldr	r3, [r3, #28]
 8045d7c:	4313      	orrs	r3, r2
 8045d7e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8045d80:	697b      	ldr	r3, [r7, #20]
 8045d82:	681b      	ldr	r3, [r3, #0]
 8045d84:	681a      	ldr	r2, [r3, #0]
 8045d86:	4bbe      	ldr	r3, [pc, #760]	@ (8046080 <UART_SetConfig+0x328>)
 8045d88:	4013      	ands	r3, r2
 8045d8a:	697a      	ldr	r2, [r7, #20]
 8045d8c:	6812      	ldr	r2, [r2, #0]
 8045d8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8045d90:	430b      	orrs	r3, r1
 8045d92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8045d94:	697b      	ldr	r3, [r7, #20]
 8045d96:	681b      	ldr	r3, [r3, #0]
 8045d98:	685b      	ldr	r3, [r3, #4]
 8045d9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8045d9e:	697b      	ldr	r3, [r7, #20]
 8045da0:	68da      	ldr	r2, [r3, #12]
 8045da2:	697b      	ldr	r3, [r7, #20]
 8045da4:	681b      	ldr	r3, [r3, #0]
 8045da6:	430a      	orrs	r2, r1
 8045da8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8045daa:	697b      	ldr	r3, [r7, #20]
 8045dac:	699b      	ldr	r3, [r3, #24]
 8045dae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8045db0:	697b      	ldr	r3, [r7, #20]
 8045db2:	681b      	ldr	r3, [r3, #0]
 8045db4:	4ab3      	ldr	r2, [pc, #716]	@ (8046084 <UART_SetConfig+0x32c>)
 8045db6:	4293      	cmp	r3, r2
 8045db8:	d004      	beq.n	8045dc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8045dba:	697b      	ldr	r3, [r7, #20]
 8045dbc:	6a1b      	ldr	r3, [r3, #32]
 8045dbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8045dc0:	4313      	orrs	r3, r2
 8045dc2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8045dc4:	697b      	ldr	r3, [r7, #20]
 8045dc6:	681b      	ldr	r3, [r3, #0]
 8045dc8:	689a      	ldr	r2, [r3, #8]
 8045dca:	4baf      	ldr	r3, [pc, #700]	@ (8046088 <UART_SetConfig+0x330>)
 8045dcc:	4013      	ands	r3, r2
 8045dce:	697a      	ldr	r2, [r7, #20]
 8045dd0:	6812      	ldr	r2, [r2, #0]
 8045dd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8045dd4:	430b      	orrs	r3, r1
 8045dd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8045dd8:	697b      	ldr	r3, [r7, #20]
 8045dda:	681b      	ldr	r3, [r3, #0]
 8045ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045dde:	f023 010f 	bic.w	r1, r3, #15
 8045de2:	697b      	ldr	r3, [r7, #20]
 8045de4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8045de6:	697b      	ldr	r3, [r7, #20]
 8045de8:	681b      	ldr	r3, [r3, #0]
 8045dea:	430a      	orrs	r2, r1
 8045dec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8045dee:	697b      	ldr	r3, [r7, #20]
 8045df0:	681b      	ldr	r3, [r3, #0]
 8045df2:	4aa6      	ldr	r2, [pc, #664]	@ (804608c <UART_SetConfig+0x334>)
 8045df4:	4293      	cmp	r3, r2
 8045df6:	d177      	bne.n	8045ee8 <UART_SetConfig+0x190>
 8045df8:	4ba5      	ldr	r3, [pc, #660]	@ (8046090 <UART_SetConfig+0x338>)
 8045dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045dfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8045e00:	2b28      	cmp	r3, #40	@ 0x28
 8045e02:	d86d      	bhi.n	8045ee0 <UART_SetConfig+0x188>
 8045e04:	a201      	add	r2, pc, #4	@ (adr r2, 8045e0c <UART_SetConfig+0xb4>)
 8045e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045e0a:	bf00      	nop
 8045e0c:	08045eb1 	.word	0x08045eb1
 8045e10:	08045ee1 	.word	0x08045ee1
 8045e14:	08045ee1 	.word	0x08045ee1
 8045e18:	08045ee1 	.word	0x08045ee1
 8045e1c:	08045ee1 	.word	0x08045ee1
 8045e20:	08045ee1 	.word	0x08045ee1
 8045e24:	08045ee1 	.word	0x08045ee1
 8045e28:	08045ee1 	.word	0x08045ee1
 8045e2c:	08045eb9 	.word	0x08045eb9
 8045e30:	08045ee1 	.word	0x08045ee1
 8045e34:	08045ee1 	.word	0x08045ee1
 8045e38:	08045ee1 	.word	0x08045ee1
 8045e3c:	08045ee1 	.word	0x08045ee1
 8045e40:	08045ee1 	.word	0x08045ee1
 8045e44:	08045ee1 	.word	0x08045ee1
 8045e48:	08045ee1 	.word	0x08045ee1
 8045e4c:	08045ec1 	.word	0x08045ec1
 8045e50:	08045ee1 	.word	0x08045ee1
 8045e54:	08045ee1 	.word	0x08045ee1
 8045e58:	08045ee1 	.word	0x08045ee1
 8045e5c:	08045ee1 	.word	0x08045ee1
 8045e60:	08045ee1 	.word	0x08045ee1
 8045e64:	08045ee1 	.word	0x08045ee1
 8045e68:	08045ee1 	.word	0x08045ee1
 8045e6c:	08045ec9 	.word	0x08045ec9
 8045e70:	08045ee1 	.word	0x08045ee1
 8045e74:	08045ee1 	.word	0x08045ee1
 8045e78:	08045ee1 	.word	0x08045ee1
 8045e7c:	08045ee1 	.word	0x08045ee1
 8045e80:	08045ee1 	.word	0x08045ee1
 8045e84:	08045ee1 	.word	0x08045ee1
 8045e88:	08045ee1 	.word	0x08045ee1
 8045e8c:	08045ed1 	.word	0x08045ed1
 8045e90:	08045ee1 	.word	0x08045ee1
 8045e94:	08045ee1 	.word	0x08045ee1
 8045e98:	08045ee1 	.word	0x08045ee1
 8045e9c:	08045ee1 	.word	0x08045ee1
 8045ea0:	08045ee1 	.word	0x08045ee1
 8045ea4:	08045ee1 	.word	0x08045ee1
 8045ea8:	08045ee1 	.word	0x08045ee1
 8045eac:	08045ed9 	.word	0x08045ed9
 8045eb0:	2301      	movs	r3, #1
 8045eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045eb6:	e222      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045eb8:	2304      	movs	r3, #4
 8045eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045ebe:	e21e      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045ec0:	2308      	movs	r3, #8
 8045ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045ec6:	e21a      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045ec8:	2310      	movs	r3, #16
 8045eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045ece:	e216      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045ed0:	2320      	movs	r3, #32
 8045ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045ed6:	e212      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045ed8:	2340      	movs	r3, #64	@ 0x40
 8045eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045ede:	e20e      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045ee0:	2380      	movs	r3, #128	@ 0x80
 8045ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045ee6:	e20a      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045ee8:	697b      	ldr	r3, [r7, #20]
 8045eea:	681b      	ldr	r3, [r3, #0]
 8045eec:	4a69      	ldr	r2, [pc, #420]	@ (8046094 <UART_SetConfig+0x33c>)
 8045eee:	4293      	cmp	r3, r2
 8045ef0:	d130      	bne.n	8045f54 <UART_SetConfig+0x1fc>
 8045ef2:	4b67      	ldr	r3, [pc, #412]	@ (8046090 <UART_SetConfig+0x338>)
 8045ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045ef6:	f003 0307 	and.w	r3, r3, #7
 8045efa:	2b05      	cmp	r3, #5
 8045efc:	d826      	bhi.n	8045f4c <UART_SetConfig+0x1f4>
 8045efe:	a201      	add	r2, pc, #4	@ (adr r2, 8045f04 <UART_SetConfig+0x1ac>)
 8045f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045f04:	08045f1d 	.word	0x08045f1d
 8045f08:	08045f25 	.word	0x08045f25
 8045f0c:	08045f2d 	.word	0x08045f2d
 8045f10:	08045f35 	.word	0x08045f35
 8045f14:	08045f3d 	.word	0x08045f3d
 8045f18:	08045f45 	.word	0x08045f45
 8045f1c:	2300      	movs	r3, #0
 8045f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f22:	e1ec      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045f24:	2304      	movs	r3, #4
 8045f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f2a:	e1e8      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045f2c:	2308      	movs	r3, #8
 8045f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f32:	e1e4      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045f34:	2310      	movs	r3, #16
 8045f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f3a:	e1e0      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045f3c:	2320      	movs	r3, #32
 8045f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f42:	e1dc      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045f44:	2340      	movs	r3, #64	@ 0x40
 8045f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f4a:	e1d8      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045f4c:	2380      	movs	r3, #128	@ 0x80
 8045f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f52:	e1d4      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045f54:	697b      	ldr	r3, [r7, #20]
 8045f56:	681b      	ldr	r3, [r3, #0]
 8045f58:	4a4f      	ldr	r2, [pc, #316]	@ (8046098 <UART_SetConfig+0x340>)
 8045f5a:	4293      	cmp	r3, r2
 8045f5c:	d130      	bne.n	8045fc0 <UART_SetConfig+0x268>
 8045f5e:	4b4c      	ldr	r3, [pc, #304]	@ (8046090 <UART_SetConfig+0x338>)
 8045f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045f62:	f003 0307 	and.w	r3, r3, #7
 8045f66:	2b05      	cmp	r3, #5
 8045f68:	d826      	bhi.n	8045fb8 <UART_SetConfig+0x260>
 8045f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8045f70 <UART_SetConfig+0x218>)
 8045f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045f70:	08045f89 	.word	0x08045f89
 8045f74:	08045f91 	.word	0x08045f91
 8045f78:	08045f99 	.word	0x08045f99
 8045f7c:	08045fa1 	.word	0x08045fa1
 8045f80:	08045fa9 	.word	0x08045fa9
 8045f84:	08045fb1 	.word	0x08045fb1
 8045f88:	2300      	movs	r3, #0
 8045f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f8e:	e1b6      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045f90:	2304      	movs	r3, #4
 8045f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f96:	e1b2      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045f98:	2308      	movs	r3, #8
 8045f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f9e:	e1ae      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045fa0:	2310      	movs	r3, #16
 8045fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045fa6:	e1aa      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045fa8:	2320      	movs	r3, #32
 8045faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045fae:	e1a6      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045fb0:	2340      	movs	r3, #64	@ 0x40
 8045fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045fb6:	e1a2      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045fb8:	2380      	movs	r3, #128	@ 0x80
 8045fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045fbe:	e19e      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045fc0:	697b      	ldr	r3, [r7, #20]
 8045fc2:	681b      	ldr	r3, [r3, #0]
 8045fc4:	4a35      	ldr	r2, [pc, #212]	@ (804609c <UART_SetConfig+0x344>)
 8045fc6:	4293      	cmp	r3, r2
 8045fc8:	d130      	bne.n	804602c <UART_SetConfig+0x2d4>
 8045fca:	4b31      	ldr	r3, [pc, #196]	@ (8046090 <UART_SetConfig+0x338>)
 8045fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045fce:	f003 0307 	and.w	r3, r3, #7
 8045fd2:	2b05      	cmp	r3, #5
 8045fd4:	d826      	bhi.n	8046024 <UART_SetConfig+0x2cc>
 8045fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8045fdc <UART_SetConfig+0x284>)
 8045fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045fdc:	08045ff5 	.word	0x08045ff5
 8045fe0:	08045ffd 	.word	0x08045ffd
 8045fe4:	08046005 	.word	0x08046005
 8045fe8:	0804600d 	.word	0x0804600d
 8045fec:	08046015 	.word	0x08046015
 8045ff0:	0804601d 	.word	0x0804601d
 8045ff4:	2300      	movs	r3, #0
 8045ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045ffa:	e180      	b.n	80462fe <UART_SetConfig+0x5a6>
 8045ffc:	2304      	movs	r3, #4
 8045ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046002:	e17c      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046004:	2308      	movs	r3, #8
 8046006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804600a:	e178      	b.n	80462fe <UART_SetConfig+0x5a6>
 804600c:	2310      	movs	r3, #16
 804600e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046012:	e174      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046014:	2320      	movs	r3, #32
 8046016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804601a:	e170      	b.n	80462fe <UART_SetConfig+0x5a6>
 804601c:	2340      	movs	r3, #64	@ 0x40
 804601e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046022:	e16c      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046024:	2380      	movs	r3, #128	@ 0x80
 8046026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804602a:	e168      	b.n	80462fe <UART_SetConfig+0x5a6>
 804602c:	697b      	ldr	r3, [r7, #20]
 804602e:	681b      	ldr	r3, [r3, #0]
 8046030:	4a1b      	ldr	r2, [pc, #108]	@ (80460a0 <UART_SetConfig+0x348>)
 8046032:	4293      	cmp	r3, r2
 8046034:	d142      	bne.n	80460bc <UART_SetConfig+0x364>
 8046036:	4b16      	ldr	r3, [pc, #88]	@ (8046090 <UART_SetConfig+0x338>)
 8046038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804603a:	f003 0307 	and.w	r3, r3, #7
 804603e:	2b05      	cmp	r3, #5
 8046040:	d838      	bhi.n	80460b4 <UART_SetConfig+0x35c>
 8046042:	a201      	add	r2, pc, #4	@ (adr r2, 8046048 <UART_SetConfig+0x2f0>)
 8046044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046048:	08046061 	.word	0x08046061
 804604c:	08046069 	.word	0x08046069
 8046050:	08046071 	.word	0x08046071
 8046054:	08046079 	.word	0x08046079
 8046058:	080460a5 	.word	0x080460a5
 804605c:	080460ad 	.word	0x080460ad
 8046060:	2300      	movs	r3, #0
 8046062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046066:	e14a      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046068:	2304      	movs	r3, #4
 804606a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804606e:	e146      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046070:	2308      	movs	r3, #8
 8046072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046076:	e142      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046078:	2310      	movs	r3, #16
 804607a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804607e:	e13e      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046080:	cfff69f3 	.word	0xcfff69f3
 8046084:	58000c00 	.word	0x58000c00
 8046088:	11fff4ff 	.word	0x11fff4ff
 804608c:	40011000 	.word	0x40011000
 8046090:	58024400 	.word	0x58024400
 8046094:	40004400 	.word	0x40004400
 8046098:	40004800 	.word	0x40004800
 804609c:	40004c00 	.word	0x40004c00
 80460a0:	40005000 	.word	0x40005000
 80460a4:	2320      	movs	r3, #32
 80460a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460aa:	e128      	b.n	80462fe <UART_SetConfig+0x5a6>
 80460ac:	2340      	movs	r3, #64	@ 0x40
 80460ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460b2:	e124      	b.n	80462fe <UART_SetConfig+0x5a6>
 80460b4:	2380      	movs	r3, #128	@ 0x80
 80460b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460ba:	e120      	b.n	80462fe <UART_SetConfig+0x5a6>
 80460bc:	697b      	ldr	r3, [r7, #20]
 80460be:	681b      	ldr	r3, [r3, #0]
 80460c0:	4acb      	ldr	r2, [pc, #812]	@ (80463f0 <UART_SetConfig+0x698>)
 80460c2:	4293      	cmp	r3, r2
 80460c4:	d176      	bne.n	80461b4 <UART_SetConfig+0x45c>
 80460c6:	4bcb      	ldr	r3, [pc, #812]	@ (80463f4 <UART_SetConfig+0x69c>)
 80460c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80460ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80460ce:	2b28      	cmp	r3, #40	@ 0x28
 80460d0:	d86c      	bhi.n	80461ac <UART_SetConfig+0x454>
 80460d2:	a201      	add	r2, pc, #4	@ (adr r2, 80460d8 <UART_SetConfig+0x380>)
 80460d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80460d8:	0804617d 	.word	0x0804617d
 80460dc:	080461ad 	.word	0x080461ad
 80460e0:	080461ad 	.word	0x080461ad
 80460e4:	080461ad 	.word	0x080461ad
 80460e8:	080461ad 	.word	0x080461ad
 80460ec:	080461ad 	.word	0x080461ad
 80460f0:	080461ad 	.word	0x080461ad
 80460f4:	080461ad 	.word	0x080461ad
 80460f8:	08046185 	.word	0x08046185
 80460fc:	080461ad 	.word	0x080461ad
 8046100:	080461ad 	.word	0x080461ad
 8046104:	080461ad 	.word	0x080461ad
 8046108:	080461ad 	.word	0x080461ad
 804610c:	080461ad 	.word	0x080461ad
 8046110:	080461ad 	.word	0x080461ad
 8046114:	080461ad 	.word	0x080461ad
 8046118:	0804618d 	.word	0x0804618d
 804611c:	080461ad 	.word	0x080461ad
 8046120:	080461ad 	.word	0x080461ad
 8046124:	080461ad 	.word	0x080461ad
 8046128:	080461ad 	.word	0x080461ad
 804612c:	080461ad 	.word	0x080461ad
 8046130:	080461ad 	.word	0x080461ad
 8046134:	080461ad 	.word	0x080461ad
 8046138:	08046195 	.word	0x08046195
 804613c:	080461ad 	.word	0x080461ad
 8046140:	080461ad 	.word	0x080461ad
 8046144:	080461ad 	.word	0x080461ad
 8046148:	080461ad 	.word	0x080461ad
 804614c:	080461ad 	.word	0x080461ad
 8046150:	080461ad 	.word	0x080461ad
 8046154:	080461ad 	.word	0x080461ad
 8046158:	0804619d 	.word	0x0804619d
 804615c:	080461ad 	.word	0x080461ad
 8046160:	080461ad 	.word	0x080461ad
 8046164:	080461ad 	.word	0x080461ad
 8046168:	080461ad 	.word	0x080461ad
 804616c:	080461ad 	.word	0x080461ad
 8046170:	080461ad 	.word	0x080461ad
 8046174:	080461ad 	.word	0x080461ad
 8046178:	080461a5 	.word	0x080461a5
 804617c:	2301      	movs	r3, #1
 804617e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046182:	e0bc      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046184:	2304      	movs	r3, #4
 8046186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804618a:	e0b8      	b.n	80462fe <UART_SetConfig+0x5a6>
 804618c:	2308      	movs	r3, #8
 804618e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046192:	e0b4      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046194:	2310      	movs	r3, #16
 8046196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804619a:	e0b0      	b.n	80462fe <UART_SetConfig+0x5a6>
 804619c:	2320      	movs	r3, #32
 804619e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461a2:	e0ac      	b.n	80462fe <UART_SetConfig+0x5a6>
 80461a4:	2340      	movs	r3, #64	@ 0x40
 80461a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461aa:	e0a8      	b.n	80462fe <UART_SetConfig+0x5a6>
 80461ac:	2380      	movs	r3, #128	@ 0x80
 80461ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461b2:	e0a4      	b.n	80462fe <UART_SetConfig+0x5a6>
 80461b4:	697b      	ldr	r3, [r7, #20]
 80461b6:	681b      	ldr	r3, [r3, #0]
 80461b8:	4a8f      	ldr	r2, [pc, #572]	@ (80463f8 <UART_SetConfig+0x6a0>)
 80461ba:	4293      	cmp	r3, r2
 80461bc:	d130      	bne.n	8046220 <UART_SetConfig+0x4c8>
 80461be:	4b8d      	ldr	r3, [pc, #564]	@ (80463f4 <UART_SetConfig+0x69c>)
 80461c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80461c2:	f003 0307 	and.w	r3, r3, #7
 80461c6:	2b05      	cmp	r3, #5
 80461c8:	d826      	bhi.n	8046218 <UART_SetConfig+0x4c0>
 80461ca:	a201      	add	r2, pc, #4	@ (adr r2, 80461d0 <UART_SetConfig+0x478>)
 80461cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80461d0:	080461e9 	.word	0x080461e9
 80461d4:	080461f1 	.word	0x080461f1
 80461d8:	080461f9 	.word	0x080461f9
 80461dc:	08046201 	.word	0x08046201
 80461e0:	08046209 	.word	0x08046209
 80461e4:	08046211 	.word	0x08046211
 80461e8:	2300      	movs	r3, #0
 80461ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461ee:	e086      	b.n	80462fe <UART_SetConfig+0x5a6>
 80461f0:	2304      	movs	r3, #4
 80461f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461f6:	e082      	b.n	80462fe <UART_SetConfig+0x5a6>
 80461f8:	2308      	movs	r3, #8
 80461fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461fe:	e07e      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046200:	2310      	movs	r3, #16
 8046202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046206:	e07a      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046208:	2320      	movs	r3, #32
 804620a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804620e:	e076      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046210:	2340      	movs	r3, #64	@ 0x40
 8046212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046216:	e072      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046218:	2380      	movs	r3, #128	@ 0x80
 804621a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804621e:	e06e      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046220:	697b      	ldr	r3, [r7, #20]
 8046222:	681b      	ldr	r3, [r3, #0]
 8046224:	4a75      	ldr	r2, [pc, #468]	@ (80463fc <UART_SetConfig+0x6a4>)
 8046226:	4293      	cmp	r3, r2
 8046228:	d130      	bne.n	804628c <UART_SetConfig+0x534>
 804622a:	4b72      	ldr	r3, [pc, #456]	@ (80463f4 <UART_SetConfig+0x69c>)
 804622c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804622e:	f003 0307 	and.w	r3, r3, #7
 8046232:	2b05      	cmp	r3, #5
 8046234:	d826      	bhi.n	8046284 <UART_SetConfig+0x52c>
 8046236:	a201      	add	r2, pc, #4	@ (adr r2, 804623c <UART_SetConfig+0x4e4>)
 8046238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804623c:	08046255 	.word	0x08046255
 8046240:	0804625d 	.word	0x0804625d
 8046244:	08046265 	.word	0x08046265
 8046248:	0804626d 	.word	0x0804626d
 804624c:	08046275 	.word	0x08046275
 8046250:	0804627d 	.word	0x0804627d
 8046254:	2300      	movs	r3, #0
 8046256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804625a:	e050      	b.n	80462fe <UART_SetConfig+0x5a6>
 804625c:	2304      	movs	r3, #4
 804625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046262:	e04c      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046264:	2308      	movs	r3, #8
 8046266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804626a:	e048      	b.n	80462fe <UART_SetConfig+0x5a6>
 804626c:	2310      	movs	r3, #16
 804626e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046272:	e044      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046274:	2320      	movs	r3, #32
 8046276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804627a:	e040      	b.n	80462fe <UART_SetConfig+0x5a6>
 804627c:	2340      	movs	r3, #64	@ 0x40
 804627e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046282:	e03c      	b.n	80462fe <UART_SetConfig+0x5a6>
 8046284:	2380      	movs	r3, #128	@ 0x80
 8046286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804628a:	e038      	b.n	80462fe <UART_SetConfig+0x5a6>
 804628c:	697b      	ldr	r3, [r7, #20]
 804628e:	681b      	ldr	r3, [r3, #0]
 8046290:	4a5b      	ldr	r2, [pc, #364]	@ (8046400 <UART_SetConfig+0x6a8>)
 8046292:	4293      	cmp	r3, r2
 8046294:	d130      	bne.n	80462f8 <UART_SetConfig+0x5a0>
 8046296:	4b57      	ldr	r3, [pc, #348]	@ (80463f4 <UART_SetConfig+0x69c>)
 8046298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 804629a:	f003 0307 	and.w	r3, r3, #7
 804629e:	2b05      	cmp	r3, #5
 80462a0:	d826      	bhi.n	80462f0 <UART_SetConfig+0x598>
 80462a2:	a201      	add	r2, pc, #4	@ (adr r2, 80462a8 <UART_SetConfig+0x550>)
 80462a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80462a8:	080462c1 	.word	0x080462c1
 80462ac:	080462c9 	.word	0x080462c9
 80462b0:	080462d1 	.word	0x080462d1
 80462b4:	080462d9 	.word	0x080462d9
 80462b8:	080462e1 	.word	0x080462e1
 80462bc:	080462e9 	.word	0x080462e9
 80462c0:	2302      	movs	r3, #2
 80462c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462c6:	e01a      	b.n	80462fe <UART_SetConfig+0x5a6>
 80462c8:	2304      	movs	r3, #4
 80462ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462ce:	e016      	b.n	80462fe <UART_SetConfig+0x5a6>
 80462d0:	2308      	movs	r3, #8
 80462d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462d6:	e012      	b.n	80462fe <UART_SetConfig+0x5a6>
 80462d8:	2310      	movs	r3, #16
 80462da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462de:	e00e      	b.n	80462fe <UART_SetConfig+0x5a6>
 80462e0:	2320      	movs	r3, #32
 80462e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462e6:	e00a      	b.n	80462fe <UART_SetConfig+0x5a6>
 80462e8:	2340      	movs	r3, #64	@ 0x40
 80462ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462ee:	e006      	b.n	80462fe <UART_SetConfig+0x5a6>
 80462f0:	2380      	movs	r3, #128	@ 0x80
 80462f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462f6:	e002      	b.n	80462fe <UART_SetConfig+0x5a6>
 80462f8:	2380      	movs	r3, #128	@ 0x80
 80462fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80462fe:	697b      	ldr	r3, [r7, #20]
 8046300:	681b      	ldr	r3, [r3, #0]
 8046302:	4a3f      	ldr	r2, [pc, #252]	@ (8046400 <UART_SetConfig+0x6a8>)
 8046304:	4293      	cmp	r3, r2
 8046306:	f040 80f8 	bne.w	80464fa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 804630a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 804630e:	2b20      	cmp	r3, #32
 8046310:	dc46      	bgt.n	80463a0 <UART_SetConfig+0x648>
 8046312:	2b02      	cmp	r3, #2
 8046314:	f2c0 8082 	blt.w	804641c <UART_SetConfig+0x6c4>
 8046318:	3b02      	subs	r3, #2
 804631a:	2b1e      	cmp	r3, #30
 804631c:	d87e      	bhi.n	804641c <UART_SetConfig+0x6c4>
 804631e:	a201      	add	r2, pc, #4	@ (adr r2, 8046324 <UART_SetConfig+0x5cc>)
 8046320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046324:	080463a7 	.word	0x080463a7
 8046328:	0804641d 	.word	0x0804641d
 804632c:	080463af 	.word	0x080463af
 8046330:	0804641d 	.word	0x0804641d
 8046334:	0804641d 	.word	0x0804641d
 8046338:	0804641d 	.word	0x0804641d
 804633c:	080463bf 	.word	0x080463bf
 8046340:	0804641d 	.word	0x0804641d
 8046344:	0804641d 	.word	0x0804641d
 8046348:	0804641d 	.word	0x0804641d
 804634c:	0804641d 	.word	0x0804641d
 8046350:	0804641d 	.word	0x0804641d
 8046354:	0804641d 	.word	0x0804641d
 8046358:	0804641d 	.word	0x0804641d
 804635c:	080463cf 	.word	0x080463cf
 8046360:	0804641d 	.word	0x0804641d
 8046364:	0804641d 	.word	0x0804641d
 8046368:	0804641d 	.word	0x0804641d
 804636c:	0804641d 	.word	0x0804641d
 8046370:	0804641d 	.word	0x0804641d
 8046374:	0804641d 	.word	0x0804641d
 8046378:	0804641d 	.word	0x0804641d
 804637c:	0804641d 	.word	0x0804641d
 8046380:	0804641d 	.word	0x0804641d
 8046384:	0804641d 	.word	0x0804641d
 8046388:	0804641d 	.word	0x0804641d
 804638c:	0804641d 	.word	0x0804641d
 8046390:	0804641d 	.word	0x0804641d
 8046394:	0804641d 	.word	0x0804641d
 8046398:	0804641d 	.word	0x0804641d
 804639c:	0804640f 	.word	0x0804640f
 80463a0:	2b40      	cmp	r3, #64	@ 0x40
 80463a2:	d037      	beq.n	8046414 <UART_SetConfig+0x6bc>
 80463a4:	e03a      	b.n	804641c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80463a6:	f7ff f865 	bl	8045474 <HAL_RCCEx_GetD3PCLK1Freq>
 80463aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80463ac:	e03c      	b.n	8046428 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80463ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80463b2:	4618      	mov	r0, r3
 80463b4:	f7ff f874 	bl	80454a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80463b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80463ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80463bc:	e034      	b.n	8046428 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80463be:	f107 0318 	add.w	r3, r7, #24
 80463c2:	4618      	mov	r0, r3
 80463c4:	f7ff f9c0 	bl	8045748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80463c8:	69fb      	ldr	r3, [r7, #28]
 80463ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80463cc:	e02c      	b.n	8046428 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80463ce:	4b09      	ldr	r3, [pc, #36]	@ (80463f4 <UART_SetConfig+0x69c>)
 80463d0:	681b      	ldr	r3, [r3, #0]
 80463d2:	f003 0320 	and.w	r3, r3, #32
 80463d6:	2b00      	cmp	r3, #0
 80463d8:	d016      	beq.n	8046408 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80463da:	4b06      	ldr	r3, [pc, #24]	@ (80463f4 <UART_SetConfig+0x69c>)
 80463dc:	681b      	ldr	r3, [r3, #0]
 80463de:	08db      	lsrs	r3, r3, #3
 80463e0:	f003 0303 	and.w	r3, r3, #3
 80463e4:	4a07      	ldr	r2, [pc, #28]	@ (8046404 <UART_SetConfig+0x6ac>)
 80463e6:	fa22 f303 	lsr.w	r3, r2, r3
 80463ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80463ec:	e01c      	b.n	8046428 <UART_SetConfig+0x6d0>
 80463ee:	bf00      	nop
 80463f0:	40011400 	.word	0x40011400
 80463f4:	58024400 	.word	0x58024400
 80463f8:	40007800 	.word	0x40007800
 80463fc:	40007c00 	.word	0x40007c00
 8046400:	58000c00 	.word	0x58000c00
 8046404:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8046408:	4b9d      	ldr	r3, [pc, #628]	@ (8046680 <UART_SetConfig+0x928>)
 804640a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804640c:	e00c      	b.n	8046428 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 804640e:	4b9d      	ldr	r3, [pc, #628]	@ (8046684 <UART_SetConfig+0x92c>)
 8046410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046412:	e009      	b.n	8046428 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8046414:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8046418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804641a:	e005      	b.n	8046428 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 804641c:	2300      	movs	r3, #0
 804641e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8046420:	2301      	movs	r3, #1
 8046422:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8046426:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8046428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804642a:	2b00      	cmp	r3, #0
 804642c:	f000 81de 	beq.w	80467ec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8046430:	697b      	ldr	r3, [r7, #20]
 8046432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8046434:	4a94      	ldr	r2, [pc, #592]	@ (8046688 <UART_SetConfig+0x930>)
 8046436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804643a:	461a      	mov	r2, r3
 804643c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804643e:	fbb3 f3f2 	udiv	r3, r3, r2
 8046442:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8046444:	697b      	ldr	r3, [r7, #20]
 8046446:	685a      	ldr	r2, [r3, #4]
 8046448:	4613      	mov	r3, r2
 804644a:	005b      	lsls	r3, r3, #1
 804644c:	4413      	add	r3, r2
 804644e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8046450:	429a      	cmp	r2, r3
 8046452:	d305      	bcc.n	8046460 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8046454:	697b      	ldr	r3, [r7, #20]
 8046456:	685b      	ldr	r3, [r3, #4]
 8046458:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 804645a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 804645c:	429a      	cmp	r2, r3
 804645e:	d903      	bls.n	8046468 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8046460:	2301      	movs	r3, #1
 8046462:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8046466:	e1c1      	b.n	80467ec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8046468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804646a:	2200      	movs	r2, #0
 804646c:	60bb      	str	r3, [r7, #8]
 804646e:	60fa      	str	r2, [r7, #12]
 8046470:	697b      	ldr	r3, [r7, #20]
 8046472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8046474:	4a84      	ldr	r2, [pc, #528]	@ (8046688 <UART_SetConfig+0x930>)
 8046476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804647a:	b29b      	uxth	r3, r3
 804647c:	2200      	movs	r2, #0
 804647e:	603b      	str	r3, [r7, #0]
 8046480:	607a      	str	r2, [r7, #4]
 8046482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8046486:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 804648a:	f7f9 ff79 	bl	8040380 <__aeabi_uldivmod>
 804648e:	4602      	mov	r2, r0
 8046490:	460b      	mov	r3, r1
 8046492:	4610      	mov	r0, r2
 8046494:	4619      	mov	r1, r3
 8046496:	f04f 0200 	mov.w	r2, #0
 804649a:	f04f 0300 	mov.w	r3, #0
 804649e:	020b      	lsls	r3, r1, #8
 80464a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80464a4:	0202      	lsls	r2, r0, #8
 80464a6:	6979      	ldr	r1, [r7, #20]
 80464a8:	6849      	ldr	r1, [r1, #4]
 80464aa:	0849      	lsrs	r1, r1, #1
 80464ac:	2000      	movs	r0, #0
 80464ae:	460c      	mov	r4, r1
 80464b0:	4605      	mov	r5, r0
 80464b2:	eb12 0804 	adds.w	r8, r2, r4
 80464b6:	eb43 0905 	adc.w	r9, r3, r5
 80464ba:	697b      	ldr	r3, [r7, #20]
 80464bc:	685b      	ldr	r3, [r3, #4]
 80464be:	2200      	movs	r2, #0
 80464c0:	469a      	mov	sl, r3
 80464c2:	4693      	mov	fp, r2
 80464c4:	4652      	mov	r2, sl
 80464c6:	465b      	mov	r3, fp
 80464c8:	4640      	mov	r0, r8
 80464ca:	4649      	mov	r1, r9
 80464cc:	f7f9 ff58 	bl	8040380 <__aeabi_uldivmod>
 80464d0:	4602      	mov	r2, r0
 80464d2:	460b      	mov	r3, r1
 80464d4:	4613      	mov	r3, r2
 80464d6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80464d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80464da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80464de:	d308      	bcc.n	80464f2 <UART_SetConfig+0x79a>
 80464e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80464e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80464e6:	d204      	bcs.n	80464f2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80464e8:	697b      	ldr	r3, [r7, #20]
 80464ea:	681b      	ldr	r3, [r3, #0]
 80464ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80464ee:	60da      	str	r2, [r3, #12]
 80464f0:	e17c      	b.n	80467ec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80464f2:	2301      	movs	r3, #1
 80464f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80464f8:	e178      	b.n	80467ec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80464fa:	697b      	ldr	r3, [r7, #20]
 80464fc:	69db      	ldr	r3, [r3, #28]
 80464fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8046502:	f040 80c5 	bne.w	8046690 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8046506:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 804650a:	2b20      	cmp	r3, #32
 804650c:	dc48      	bgt.n	80465a0 <UART_SetConfig+0x848>
 804650e:	2b00      	cmp	r3, #0
 8046510:	db7b      	blt.n	804660a <UART_SetConfig+0x8b2>
 8046512:	2b20      	cmp	r3, #32
 8046514:	d879      	bhi.n	804660a <UART_SetConfig+0x8b2>
 8046516:	a201      	add	r2, pc, #4	@ (adr r2, 804651c <UART_SetConfig+0x7c4>)
 8046518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804651c:	080465a7 	.word	0x080465a7
 8046520:	080465af 	.word	0x080465af
 8046524:	0804660b 	.word	0x0804660b
 8046528:	0804660b 	.word	0x0804660b
 804652c:	080465b7 	.word	0x080465b7
 8046530:	0804660b 	.word	0x0804660b
 8046534:	0804660b 	.word	0x0804660b
 8046538:	0804660b 	.word	0x0804660b
 804653c:	080465c7 	.word	0x080465c7
 8046540:	0804660b 	.word	0x0804660b
 8046544:	0804660b 	.word	0x0804660b
 8046548:	0804660b 	.word	0x0804660b
 804654c:	0804660b 	.word	0x0804660b
 8046550:	0804660b 	.word	0x0804660b
 8046554:	0804660b 	.word	0x0804660b
 8046558:	0804660b 	.word	0x0804660b
 804655c:	080465d7 	.word	0x080465d7
 8046560:	0804660b 	.word	0x0804660b
 8046564:	0804660b 	.word	0x0804660b
 8046568:	0804660b 	.word	0x0804660b
 804656c:	0804660b 	.word	0x0804660b
 8046570:	0804660b 	.word	0x0804660b
 8046574:	0804660b 	.word	0x0804660b
 8046578:	0804660b 	.word	0x0804660b
 804657c:	0804660b 	.word	0x0804660b
 8046580:	0804660b 	.word	0x0804660b
 8046584:	0804660b 	.word	0x0804660b
 8046588:	0804660b 	.word	0x0804660b
 804658c:	0804660b 	.word	0x0804660b
 8046590:	0804660b 	.word	0x0804660b
 8046594:	0804660b 	.word	0x0804660b
 8046598:	0804660b 	.word	0x0804660b
 804659c:	080465fd 	.word	0x080465fd
 80465a0:	2b40      	cmp	r3, #64	@ 0x40
 80465a2:	d02e      	beq.n	8046602 <UART_SetConfig+0x8aa>
 80465a4:	e031      	b.n	804660a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80465a6:	f7fd fcef 	bl	8043f88 <HAL_RCC_GetPCLK1Freq>
 80465aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80465ac:	e033      	b.n	8046616 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80465ae:	f7fd fd01 	bl	8043fb4 <HAL_RCC_GetPCLK2Freq>
 80465b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80465b4:	e02f      	b.n	8046616 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80465b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80465ba:	4618      	mov	r0, r3
 80465bc:	f7fe ff70 	bl	80454a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80465c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80465c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80465c4:	e027      	b.n	8046616 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80465c6:	f107 0318 	add.w	r3, r7, #24
 80465ca:	4618      	mov	r0, r3
 80465cc:	f7ff f8bc 	bl	8045748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80465d0:	69fb      	ldr	r3, [r7, #28]
 80465d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80465d4:	e01f      	b.n	8046616 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80465d6:	4b2d      	ldr	r3, [pc, #180]	@ (804668c <UART_SetConfig+0x934>)
 80465d8:	681b      	ldr	r3, [r3, #0]
 80465da:	f003 0320 	and.w	r3, r3, #32
 80465de:	2b00      	cmp	r3, #0
 80465e0:	d009      	beq.n	80465f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80465e2:	4b2a      	ldr	r3, [pc, #168]	@ (804668c <UART_SetConfig+0x934>)
 80465e4:	681b      	ldr	r3, [r3, #0]
 80465e6:	08db      	lsrs	r3, r3, #3
 80465e8:	f003 0303 	and.w	r3, r3, #3
 80465ec:	4a24      	ldr	r2, [pc, #144]	@ (8046680 <UART_SetConfig+0x928>)
 80465ee:	fa22 f303 	lsr.w	r3, r2, r3
 80465f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80465f4:	e00f      	b.n	8046616 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80465f6:	4b22      	ldr	r3, [pc, #136]	@ (8046680 <UART_SetConfig+0x928>)
 80465f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80465fa:	e00c      	b.n	8046616 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80465fc:	4b21      	ldr	r3, [pc, #132]	@ (8046684 <UART_SetConfig+0x92c>)
 80465fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046600:	e009      	b.n	8046616 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8046602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8046606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046608:	e005      	b.n	8046616 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 804660a:	2300      	movs	r3, #0
 804660c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 804660e:	2301      	movs	r3, #1
 8046610:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8046614:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8046616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8046618:	2b00      	cmp	r3, #0
 804661a:	f000 80e7 	beq.w	80467ec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804661e:	697b      	ldr	r3, [r7, #20]
 8046620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8046622:	4a19      	ldr	r2, [pc, #100]	@ (8046688 <UART_SetConfig+0x930>)
 8046624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8046628:	461a      	mov	r2, r3
 804662a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804662c:	fbb3 f3f2 	udiv	r3, r3, r2
 8046630:	005a      	lsls	r2, r3, #1
 8046632:	697b      	ldr	r3, [r7, #20]
 8046634:	685b      	ldr	r3, [r3, #4]
 8046636:	085b      	lsrs	r3, r3, #1
 8046638:	441a      	add	r2, r3
 804663a:	697b      	ldr	r3, [r7, #20]
 804663c:	685b      	ldr	r3, [r3, #4]
 804663e:	fbb2 f3f3 	udiv	r3, r2, r3
 8046642:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8046644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046646:	2b0f      	cmp	r3, #15
 8046648:	d916      	bls.n	8046678 <UART_SetConfig+0x920>
 804664a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804664c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8046650:	d212      	bcs.n	8046678 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8046652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046654:	b29b      	uxth	r3, r3
 8046656:	f023 030f 	bic.w	r3, r3, #15
 804665a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 804665c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804665e:	085b      	lsrs	r3, r3, #1
 8046660:	b29b      	uxth	r3, r3
 8046662:	f003 0307 	and.w	r3, r3, #7
 8046666:	b29a      	uxth	r2, r3
 8046668:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 804666a:	4313      	orrs	r3, r2
 804666c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 804666e:	697b      	ldr	r3, [r7, #20]
 8046670:	681b      	ldr	r3, [r3, #0]
 8046672:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8046674:	60da      	str	r2, [r3, #12]
 8046676:	e0b9      	b.n	80467ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8046678:	2301      	movs	r3, #1
 804667a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 804667e:	e0b5      	b.n	80467ec <UART_SetConfig+0xa94>
 8046680:	03d09000 	.word	0x03d09000
 8046684:	003d0900 	.word	0x003d0900
 8046688:	0804c2e8 	.word	0x0804c2e8
 804668c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8046690:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8046694:	2b20      	cmp	r3, #32
 8046696:	dc49      	bgt.n	804672c <UART_SetConfig+0x9d4>
 8046698:	2b00      	cmp	r3, #0
 804669a:	db7c      	blt.n	8046796 <UART_SetConfig+0xa3e>
 804669c:	2b20      	cmp	r3, #32
 804669e:	d87a      	bhi.n	8046796 <UART_SetConfig+0xa3e>
 80466a0:	a201      	add	r2, pc, #4	@ (adr r2, 80466a8 <UART_SetConfig+0x950>)
 80466a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80466a6:	bf00      	nop
 80466a8:	08046733 	.word	0x08046733
 80466ac:	0804673b 	.word	0x0804673b
 80466b0:	08046797 	.word	0x08046797
 80466b4:	08046797 	.word	0x08046797
 80466b8:	08046743 	.word	0x08046743
 80466bc:	08046797 	.word	0x08046797
 80466c0:	08046797 	.word	0x08046797
 80466c4:	08046797 	.word	0x08046797
 80466c8:	08046753 	.word	0x08046753
 80466cc:	08046797 	.word	0x08046797
 80466d0:	08046797 	.word	0x08046797
 80466d4:	08046797 	.word	0x08046797
 80466d8:	08046797 	.word	0x08046797
 80466dc:	08046797 	.word	0x08046797
 80466e0:	08046797 	.word	0x08046797
 80466e4:	08046797 	.word	0x08046797
 80466e8:	08046763 	.word	0x08046763
 80466ec:	08046797 	.word	0x08046797
 80466f0:	08046797 	.word	0x08046797
 80466f4:	08046797 	.word	0x08046797
 80466f8:	08046797 	.word	0x08046797
 80466fc:	08046797 	.word	0x08046797
 8046700:	08046797 	.word	0x08046797
 8046704:	08046797 	.word	0x08046797
 8046708:	08046797 	.word	0x08046797
 804670c:	08046797 	.word	0x08046797
 8046710:	08046797 	.word	0x08046797
 8046714:	08046797 	.word	0x08046797
 8046718:	08046797 	.word	0x08046797
 804671c:	08046797 	.word	0x08046797
 8046720:	08046797 	.word	0x08046797
 8046724:	08046797 	.word	0x08046797
 8046728:	08046789 	.word	0x08046789
 804672c:	2b40      	cmp	r3, #64	@ 0x40
 804672e:	d02e      	beq.n	804678e <UART_SetConfig+0xa36>
 8046730:	e031      	b.n	8046796 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8046732:	f7fd fc29 	bl	8043f88 <HAL_RCC_GetPCLK1Freq>
 8046736:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8046738:	e033      	b.n	80467a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804673a:	f7fd fc3b 	bl	8043fb4 <HAL_RCC_GetPCLK2Freq>
 804673e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8046740:	e02f      	b.n	80467a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8046742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8046746:	4618      	mov	r0, r3
 8046748:	f7fe feaa 	bl	80454a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 804674c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804674e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046750:	e027      	b.n	80467a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8046752:	f107 0318 	add.w	r3, r7, #24
 8046756:	4618      	mov	r0, r3
 8046758:	f7fe fff6 	bl	8045748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 804675c:	69fb      	ldr	r3, [r7, #28]
 804675e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046760:	e01f      	b.n	80467a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8046762:	4b2d      	ldr	r3, [pc, #180]	@ (8046818 <UART_SetConfig+0xac0>)
 8046764:	681b      	ldr	r3, [r3, #0]
 8046766:	f003 0320 	and.w	r3, r3, #32
 804676a:	2b00      	cmp	r3, #0
 804676c:	d009      	beq.n	8046782 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 804676e:	4b2a      	ldr	r3, [pc, #168]	@ (8046818 <UART_SetConfig+0xac0>)
 8046770:	681b      	ldr	r3, [r3, #0]
 8046772:	08db      	lsrs	r3, r3, #3
 8046774:	f003 0303 	and.w	r3, r3, #3
 8046778:	4a28      	ldr	r2, [pc, #160]	@ (804681c <UART_SetConfig+0xac4>)
 804677a:	fa22 f303 	lsr.w	r3, r2, r3
 804677e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8046780:	e00f      	b.n	80467a2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8046782:	4b26      	ldr	r3, [pc, #152]	@ (804681c <UART_SetConfig+0xac4>)
 8046784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046786:	e00c      	b.n	80467a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8046788:	4b25      	ldr	r3, [pc, #148]	@ (8046820 <UART_SetConfig+0xac8>)
 804678a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804678c:	e009      	b.n	80467a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804678e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8046792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046794:	e005      	b.n	80467a2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8046796:	2300      	movs	r3, #0
 8046798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 804679a:	2301      	movs	r3, #1
 804679c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80467a0:	bf00      	nop
    }

    if (pclk != 0U)
 80467a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80467a4:	2b00      	cmp	r3, #0
 80467a6:	d021      	beq.n	80467ec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80467a8:	697b      	ldr	r3, [r7, #20]
 80467aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80467ac:	4a1d      	ldr	r2, [pc, #116]	@ (8046824 <UART_SetConfig+0xacc>)
 80467ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80467b2:	461a      	mov	r2, r3
 80467b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80467b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80467ba:	697b      	ldr	r3, [r7, #20]
 80467bc:	685b      	ldr	r3, [r3, #4]
 80467be:	085b      	lsrs	r3, r3, #1
 80467c0:	441a      	add	r2, r3
 80467c2:	697b      	ldr	r3, [r7, #20]
 80467c4:	685b      	ldr	r3, [r3, #4]
 80467c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80467ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80467cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80467ce:	2b0f      	cmp	r3, #15
 80467d0:	d909      	bls.n	80467e6 <UART_SetConfig+0xa8e>
 80467d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80467d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80467d8:	d205      	bcs.n	80467e6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80467da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80467dc:	b29a      	uxth	r2, r3
 80467de:	697b      	ldr	r3, [r7, #20]
 80467e0:	681b      	ldr	r3, [r3, #0]
 80467e2:	60da      	str	r2, [r3, #12]
 80467e4:	e002      	b.n	80467ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80467e6:	2301      	movs	r3, #1
 80467e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80467ec:	697b      	ldr	r3, [r7, #20]
 80467ee:	2201      	movs	r2, #1
 80467f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80467f4:	697b      	ldr	r3, [r7, #20]
 80467f6:	2201      	movs	r2, #1
 80467f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80467fc:	697b      	ldr	r3, [r7, #20]
 80467fe:	2200      	movs	r2, #0
 8046800:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8046802:	697b      	ldr	r3, [r7, #20]
 8046804:	2200      	movs	r2, #0
 8046806:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8046808:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 804680c:	4618      	mov	r0, r3
 804680e:	3748      	adds	r7, #72	@ 0x48
 8046810:	46bd      	mov	sp, r7
 8046812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8046816:	bf00      	nop
 8046818:	58024400 	.word	0x58024400
 804681c:	03d09000 	.word	0x03d09000
 8046820:	003d0900 	.word	0x003d0900
 8046824:	0804c2e8 	.word	0x0804c2e8

08046828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8046828:	b480      	push	{r7}
 804682a:	b083      	sub	sp, #12
 804682c:	af00      	add	r7, sp, #0
 804682e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8046830:	687b      	ldr	r3, [r7, #4]
 8046832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046834:	f003 0308 	and.w	r3, r3, #8
 8046838:	2b00      	cmp	r3, #0
 804683a:	d00a      	beq.n	8046852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 804683c:	687b      	ldr	r3, [r7, #4]
 804683e:	681b      	ldr	r3, [r3, #0]
 8046840:	685b      	ldr	r3, [r3, #4]
 8046842:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8046846:	687b      	ldr	r3, [r7, #4]
 8046848:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 804684a:	687b      	ldr	r3, [r7, #4]
 804684c:	681b      	ldr	r3, [r3, #0]
 804684e:	430a      	orrs	r2, r1
 8046850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8046852:	687b      	ldr	r3, [r7, #4]
 8046854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046856:	f003 0301 	and.w	r3, r3, #1
 804685a:	2b00      	cmp	r3, #0
 804685c:	d00a      	beq.n	8046874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 804685e:	687b      	ldr	r3, [r7, #4]
 8046860:	681b      	ldr	r3, [r3, #0]
 8046862:	685b      	ldr	r3, [r3, #4]
 8046864:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8046868:	687b      	ldr	r3, [r7, #4]
 804686a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 804686c:	687b      	ldr	r3, [r7, #4]
 804686e:	681b      	ldr	r3, [r3, #0]
 8046870:	430a      	orrs	r2, r1
 8046872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8046874:	687b      	ldr	r3, [r7, #4]
 8046876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046878:	f003 0302 	and.w	r3, r3, #2
 804687c:	2b00      	cmp	r3, #0
 804687e:	d00a      	beq.n	8046896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8046880:	687b      	ldr	r3, [r7, #4]
 8046882:	681b      	ldr	r3, [r3, #0]
 8046884:	685b      	ldr	r3, [r3, #4]
 8046886:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 804688a:	687b      	ldr	r3, [r7, #4]
 804688c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 804688e:	687b      	ldr	r3, [r7, #4]
 8046890:	681b      	ldr	r3, [r3, #0]
 8046892:	430a      	orrs	r2, r1
 8046894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8046896:	687b      	ldr	r3, [r7, #4]
 8046898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804689a:	f003 0304 	and.w	r3, r3, #4
 804689e:	2b00      	cmp	r3, #0
 80468a0:	d00a      	beq.n	80468b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80468a2:	687b      	ldr	r3, [r7, #4]
 80468a4:	681b      	ldr	r3, [r3, #0]
 80468a6:	685b      	ldr	r3, [r3, #4]
 80468a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80468ac:	687b      	ldr	r3, [r7, #4]
 80468ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80468b0:	687b      	ldr	r3, [r7, #4]
 80468b2:	681b      	ldr	r3, [r3, #0]
 80468b4:	430a      	orrs	r2, r1
 80468b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80468b8:	687b      	ldr	r3, [r7, #4]
 80468ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80468bc:	f003 0310 	and.w	r3, r3, #16
 80468c0:	2b00      	cmp	r3, #0
 80468c2:	d00a      	beq.n	80468da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80468c4:	687b      	ldr	r3, [r7, #4]
 80468c6:	681b      	ldr	r3, [r3, #0]
 80468c8:	689b      	ldr	r3, [r3, #8]
 80468ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80468ce:	687b      	ldr	r3, [r7, #4]
 80468d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80468d2:	687b      	ldr	r3, [r7, #4]
 80468d4:	681b      	ldr	r3, [r3, #0]
 80468d6:	430a      	orrs	r2, r1
 80468d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80468da:	687b      	ldr	r3, [r7, #4]
 80468dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80468de:	f003 0320 	and.w	r3, r3, #32
 80468e2:	2b00      	cmp	r3, #0
 80468e4:	d00a      	beq.n	80468fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80468e6:	687b      	ldr	r3, [r7, #4]
 80468e8:	681b      	ldr	r3, [r3, #0]
 80468ea:	689b      	ldr	r3, [r3, #8]
 80468ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80468f0:	687b      	ldr	r3, [r7, #4]
 80468f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80468f4:	687b      	ldr	r3, [r7, #4]
 80468f6:	681b      	ldr	r3, [r3, #0]
 80468f8:	430a      	orrs	r2, r1
 80468fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80468fc:	687b      	ldr	r3, [r7, #4]
 80468fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8046904:	2b00      	cmp	r3, #0
 8046906:	d01a      	beq.n	804693e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8046908:	687b      	ldr	r3, [r7, #4]
 804690a:	681b      	ldr	r3, [r3, #0]
 804690c:	685b      	ldr	r3, [r3, #4]
 804690e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8046912:	687b      	ldr	r3, [r7, #4]
 8046914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8046916:	687b      	ldr	r3, [r7, #4]
 8046918:	681b      	ldr	r3, [r3, #0]
 804691a:	430a      	orrs	r2, r1
 804691c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 804691e:	687b      	ldr	r3, [r7, #4]
 8046920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8046922:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8046926:	d10a      	bne.n	804693e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8046928:	687b      	ldr	r3, [r7, #4]
 804692a:	681b      	ldr	r3, [r3, #0]
 804692c:	685b      	ldr	r3, [r3, #4]
 804692e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8046932:	687b      	ldr	r3, [r7, #4]
 8046934:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8046936:	687b      	ldr	r3, [r7, #4]
 8046938:	681b      	ldr	r3, [r3, #0]
 804693a:	430a      	orrs	r2, r1
 804693c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 804693e:	687b      	ldr	r3, [r7, #4]
 8046940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8046946:	2b00      	cmp	r3, #0
 8046948:	d00a      	beq.n	8046960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 804694a:	687b      	ldr	r3, [r7, #4]
 804694c:	681b      	ldr	r3, [r3, #0]
 804694e:	685b      	ldr	r3, [r3, #4]
 8046950:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8046954:	687b      	ldr	r3, [r7, #4]
 8046956:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8046958:	687b      	ldr	r3, [r7, #4]
 804695a:	681b      	ldr	r3, [r3, #0]
 804695c:	430a      	orrs	r2, r1
 804695e:	605a      	str	r2, [r3, #4]
  }
}
 8046960:	bf00      	nop
 8046962:	370c      	adds	r7, #12
 8046964:	46bd      	mov	sp, r7
 8046966:	f85d 7b04 	ldr.w	r7, [sp], #4
 804696a:	4770      	bx	lr

0804696c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 804696c:	b580      	push	{r7, lr}
 804696e:	b098      	sub	sp, #96	@ 0x60
 8046970:	af02      	add	r7, sp, #8
 8046972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8046974:	687b      	ldr	r3, [r7, #4]
 8046976:	2200      	movs	r2, #0
 8046978:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 804697c:	f7fa fbac 	bl	80410d8 <HAL_GetTick>
 8046980:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8046982:	687b      	ldr	r3, [r7, #4]
 8046984:	681b      	ldr	r3, [r3, #0]
 8046986:	681b      	ldr	r3, [r3, #0]
 8046988:	f003 0308 	and.w	r3, r3, #8
 804698c:	2b08      	cmp	r3, #8
 804698e:	d12f      	bne.n	80469f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8046990:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8046994:	9300      	str	r3, [sp, #0]
 8046996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8046998:	2200      	movs	r2, #0
 804699a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 804699e:	6878      	ldr	r0, [r7, #4]
 80469a0:	f000 f88e 	bl	8046ac0 <UART_WaitOnFlagUntilTimeout>
 80469a4:	4603      	mov	r3, r0
 80469a6:	2b00      	cmp	r3, #0
 80469a8:	d022      	beq.n	80469f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80469aa:	687b      	ldr	r3, [r7, #4]
 80469ac:	681b      	ldr	r3, [r3, #0]
 80469ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80469b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80469b2:	e853 3f00 	ldrex	r3, [r3]
 80469b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80469b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80469ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80469be:	653b      	str	r3, [r7, #80]	@ 0x50
 80469c0:	687b      	ldr	r3, [r7, #4]
 80469c2:	681b      	ldr	r3, [r3, #0]
 80469c4:	461a      	mov	r2, r3
 80469c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80469c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80469ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80469cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80469ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80469d0:	e841 2300 	strex	r3, r2, [r1]
 80469d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80469d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80469d8:	2b00      	cmp	r3, #0
 80469da:	d1e6      	bne.n	80469aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80469dc:	687b      	ldr	r3, [r7, #4]
 80469de:	2220      	movs	r2, #32
 80469e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80469e4:	687b      	ldr	r3, [r7, #4]
 80469e6:	2200      	movs	r2, #0
 80469e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80469ec:	2303      	movs	r3, #3
 80469ee:	e063      	b.n	8046ab8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80469f0:	687b      	ldr	r3, [r7, #4]
 80469f2:	681b      	ldr	r3, [r3, #0]
 80469f4:	681b      	ldr	r3, [r3, #0]
 80469f6:	f003 0304 	and.w	r3, r3, #4
 80469fa:	2b04      	cmp	r3, #4
 80469fc:	d149      	bne.n	8046a92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80469fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8046a02:	9300      	str	r3, [sp, #0]
 8046a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8046a06:	2200      	movs	r2, #0
 8046a08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8046a0c:	6878      	ldr	r0, [r7, #4]
 8046a0e:	f000 f857 	bl	8046ac0 <UART_WaitOnFlagUntilTimeout>
 8046a12:	4603      	mov	r3, r0
 8046a14:	2b00      	cmp	r3, #0
 8046a16:	d03c      	beq.n	8046a92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8046a18:	687b      	ldr	r3, [r7, #4]
 8046a1a:	681b      	ldr	r3, [r3, #0]
 8046a1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8046a20:	e853 3f00 	ldrex	r3, [r3]
 8046a24:	623b      	str	r3, [r7, #32]
   return(result);
 8046a26:	6a3b      	ldr	r3, [r7, #32]
 8046a28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8046a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8046a2e:	687b      	ldr	r3, [r7, #4]
 8046a30:	681b      	ldr	r3, [r3, #0]
 8046a32:	461a      	mov	r2, r3
 8046a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8046a36:	633b      	str	r3, [r7, #48]	@ 0x30
 8046a38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046a3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8046a3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8046a3e:	e841 2300 	strex	r3, r2, [r1]
 8046a42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8046a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046a46:	2b00      	cmp	r3, #0
 8046a48:	d1e6      	bne.n	8046a18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8046a4a:	687b      	ldr	r3, [r7, #4]
 8046a4c:	681b      	ldr	r3, [r3, #0]
 8046a4e:	3308      	adds	r3, #8
 8046a50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046a52:	693b      	ldr	r3, [r7, #16]
 8046a54:	e853 3f00 	ldrex	r3, [r3]
 8046a58:	60fb      	str	r3, [r7, #12]
   return(result);
 8046a5a:	68fb      	ldr	r3, [r7, #12]
 8046a5c:	f023 0301 	bic.w	r3, r3, #1
 8046a60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8046a62:	687b      	ldr	r3, [r7, #4]
 8046a64:	681b      	ldr	r3, [r3, #0]
 8046a66:	3308      	adds	r3, #8
 8046a68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8046a6a:	61fa      	str	r2, [r7, #28]
 8046a6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046a6e:	69b9      	ldr	r1, [r7, #24]
 8046a70:	69fa      	ldr	r2, [r7, #28]
 8046a72:	e841 2300 	strex	r3, r2, [r1]
 8046a76:	617b      	str	r3, [r7, #20]
   return(result);
 8046a78:	697b      	ldr	r3, [r7, #20]
 8046a7a:	2b00      	cmp	r3, #0
 8046a7c:	d1e5      	bne.n	8046a4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8046a7e:	687b      	ldr	r3, [r7, #4]
 8046a80:	2220      	movs	r2, #32
 8046a82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8046a86:	687b      	ldr	r3, [r7, #4]
 8046a88:	2200      	movs	r2, #0
 8046a8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8046a8e:	2303      	movs	r3, #3
 8046a90:	e012      	b.n	8046ab8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8046a92:	687b      	ldr	r3, [r7, #4]
 8046a94:	2220      	movs	r2, #32
 8046a96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8046a9a:	687b      	ldr	r3, [r7, #4]
 8046a9c:	2220      	movs	r2, #32
 8046a9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8046aa2:	687b      	ldr	r3, [r7, #4]
 8046aa4:	2200      	movs	r2, #0
 8046aa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8046aa8:	687b      	ldr	r3, [r7, #4]
 8046aaa:	2200      	movs	r2, #0
 8046aac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8046aae:	687b      	ldr	r3, [r7, #4]
 8046ab0:	2200      	movs	r2, #0
 8046ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8046ab6:	2300      	movs	r3, #0
}
 8046ab8:	4618      	mov	r0, r3
 8046aba:	3758      	adds	r7, #88	@ 0x58
 8046abc:	46bd      	mov	sp, r7
 8046abe:	bd80      	pop	{r7, pc}

08046ac0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8046ac0:	b580      	push	{r7, lr}
 8046ac2:	b084      	sub	sp, #16
 8046ac4:	af00      	add	r7, sp, #0
 8046ac6:	60f8      	str	r0, [r7, #12]
 8046ac8:	60b9      	str	r1, [r7, #8]
 8046aca:	603b      	str	r3, [r7, #0]
 8046acc:	4613      	mov	r3, r2
 8046ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8046ad0:	e04f      	b.n	8046b72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8046ad2:	69bb      	ldr	r3, [r7, #24]
 8046ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046ad8:	d04b      	beq.n	8046b72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8046ada:	f7fa fafd 	bl	80410d8 <HAL_GetTick>
 8046ade:	4602      	mov	r2, r0
 8046ae0:	683b      	ldr	r3, [r7, #0]
 8046ae2:	1ad3      	subs	r3, r2, r3
 8046ae4:	69ba      	ldr	r2, [r7, #24]
 8046ae6:	429a      	cmp	r2, r3
 8046ae8:	d302      	bcc.n	8046af0 <UART_WaitOnFlagUntilTimeout+0x30>
 8046aea:	69bb      	ldr	r3, [r7, #24]
 8046aec:	2b00      	cmp	r3, #0
 8046aee:	d101      	bne.n	8046af4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8046af0:	2303      	movs	r3, #3
 8046af2:	e04e      	b.n	8046b92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8046af4:	68fb      	ldr	r3, [r7, #12]
 8046af6:	681b      	ldr	r3, [r3, #0]
 8046af8:	681b      	ldr	r3, [r3, #0]
 8046afa:	f003 0304 	and.w	r3, r3, #4
 8046afe:	2b00      	cmp	r3, #0
 8046b00:	d037      	beq.n	8046b72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8046b02:	68bb      	ldr	r3, [r7, #8]
 8046b04:	2b80      	cmp	r3, #128	@ 0x80
 8046b06:	d034      	beq.n	8046b72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8046b08:	68bb      	ldr	r3, [r7, #8]
 8046b0a:	2b40      	cmp	r3, #64	@ 0x40
 8046b0c:	d031      	beq.n	8046b72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8046b0e:	68fb      	ldr	r3, [r7, #12]
 8046b10:	681b      	ldr	r3, [r3, #0]
 8046b12:	69db      	ldr	r3, [r3, #28]
 8046b14:	f003 0308 	and.w	r3, r3, #8
 8046b18:	2b08      	cmp	r3, #8
 8046b1a:	d110      	bne.n	8046b3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8046b1c:	68fb      	ldr	r3, [r7, #12]
 8046b1e:	681b      	ldr	r3, [r3, #0]
 8046b20:	2208      	movs	r2, #8
 8046b22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8046b24:	68f8      	ldr	r0, [r7, #12]
 8046b26:	f000 f839 	bl	8046b9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8046b2a:	68fb      	ldr	r3, [r7, #12]
 8046b2c:	2208      	movs	r2, #8
 8046b2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8046b32:	68fb      	ldr	r3, [r7, #12]
 8046b34:	2200      	movs	r2, #0
 8046b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8046b3a:	2301      	movs	r3, #1
 8046b3c:	e029      	b.n	8046b92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8046b3e:	68fb      	ldr	r3, [r7, #12]
 8046b40:	681b      	ldr	r3, [r3, #0]
 8046b42:	69db      	ldr	r3, [r3, #28]
 8046b44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8046b48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8046b4c:	d111      	bne.n	8046b72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8046b4e:	68fb      	ldr	r3, [r7, #12]
 8046b50:	681b      	ldr	r3, [r3, #0]
 8046b52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8046b56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8046b58:	68f8      	ldr	r0, [r7, #12]
 8046b5a:	f000 f81f 	bl	8046b9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8046b5e:	68fb      	ldr	r3, [r7, #12]
 8046b60:	2220      	movs	r2, #32
 8046b62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8046b66:	68fb      	ldr	r3, [r7, #12]
 8046b68:	2200      	movs	r2, #0
 8046b6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8046b6e:	2303      	movs	r3, #3
 8046b70:	e00f      	b.n	8046b92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8046b72:	68fb      	ldr	r3, [r7, #12]
 8046b74:	681b      	ldr	r3, [r3, #0]
 8046b76:	69da      	ldr	r2, [r3, #28]
 8046b78:	68bb      	ldr	r3, [r7, #8]
 8046b7a:	4013      	ands	r3, r2
 8046b7c:	68ba      	ldr	r2, [r7, #8]
 8046b7e:	429a      	cmp	r2, r3
 8046b80:	bf0c      	ite	eq
 8046b82:	2301      	moveq	r3, #1
 8046b84:	2300      	movne	r3, #0
 8046b86:	b2db      	uxtb	r3, r3
 8046b88:	461a      	mov	r2, r3
 8046b8a:	79fb      	ldrb	r3, [r7, #7]
 8046b8c:	429a      	cmp	r2, r3
 8046b8e:	d0a0      	beq.n	8046ad2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8046b90:	2300      	movs	r3, #0
}
 8046b92:	4618      	mov	r0, r3
 8046b94:	3710      	adds	r7, #16
 8046b96:	46bd      	mov	sp, r7
 8046b98:	bd80      	pop	{r7, pc}
	...

08046b9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8046b9c:	b480      	push	{r7}
 8046b9e:	b095      	sub	sp, #84	@ 0x54
 8046ba0:	af00      	add	r7, sp, #0
 8046ba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8046ba4:	687b      	ldr	r3, [r7, #4]
 8046ba6:	681b      	ldr	r3, [r3, #0]
 8046ba8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8046bac:	e853 3f00 	ldrex	r3, [r3]
 8046bb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8046bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8046bb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8046bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8046bba:	687b      	ldr	r3, [r7, #4]
 8046bbc:	681b      	ldr	r3, [r3, #0]
 8046bbe:	461a      	mov	r2, r3
 8046bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8046bc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8046bc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046bc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8046bc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8046bca:	e841 2300 	strex	r3, r2, [r1]
 8046bce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8046bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046bd2:	2b00      	cmp	r3, #0
 8046bd4:	d1e6      	bne.n	8046ba4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8046bd6:	687b      	ldr	r3, [r7, #4]
 8046bd8:	681b      	ldr	r3, [r3, #0]
 8046bda:	3308      	adds	r3, #8
 8046bdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046bde:	6a3b      	ldr	r3, [r7, #32]
 8046be0:	e853 3f00 	ldrex	r3, [r3]
 8046be4:	61fb      	str	r3, [r7, #28]
   return(result);
 8046be6:	69fa      	ldr	r2, [r7, #28]
 8046be8:	4b1e      	ldr	r3, [pc, #120]	@ (8046c64 <UART_EndRxTransfer+0xc8>)
 8046bea:	4013      	ands	r3, r2
 8046bec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8046bee:	687b      	ldr	r3, [r7, #4]
 8046bf0:	681b      	ldr	r3, [r3, #0]
 8046bf2:	3308      	adds	r3, #8
 8046bf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8046bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8046bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046bfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8046bfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8046bfe:	e841 2300 	strex	r3, r2, [r1]
 8046c02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8046c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8046c06:	2b00      	cmp	r3, #0
 8046c08:	d1e5      	bne.n	8046bd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8046c0a:	687b      	ldr	r3, [r7, #4]
 8046c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8046c0e:	2b01      	cmp	r3, #1
 8046c10:	d118      	bne.n	8046c44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8046c12:	687b      	ldr	r3, [r7, #4]
 8046c14:	681b      	ldr	r3, [r3, #0]
 8046c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046c18:	68fb      	ldr	r3, [r7, #12]
 8046c1a:	e853 3f00 	ldrex	r3, [r3]
 8046c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8046c20:	68bb      	ldr	r3, [r7, #8]
 8046c22:	f023 0310 	bic.w	r3, r3, #16
 8046c26:	647b      	str	r3, [r7, #68]	@ 0x44
 8046c28:	687b      	ldr	r3, [r7, #4]
 8046c2a:	681b      	ldr	r3, [r3, #0]
 8046c2c:	461a      	mov	r2, r3
 8046c2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8046c30:	61bb      	str	r3, [r7, #24]
 8046c32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046c34:	6979      	ldr	r1, [r7, #20]
 8046c36:	69ba      	ldr	r2, [r7, #24]
 8046c38:	e841 2300 	strex	r3, r2, [r1]
 8046c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8046c3e:	693b      	ldr	r3, [r7, #16]
 8046c40:	2b00      	cmp	r3, #0
 8046c42:	d1e6      	bne.n	8046c12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8046c44:	687b      	ldr	r3, [r7, #4]
 8046c46:	2220      	movs	r2, #32
 8046c48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8046c4c:	687b      	ldr	r3, [r7, #4]
 8046c4e:	2200      	movs	r2, #0
 8046c50:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8046c52:	687b      	ldr	r3, [r7, #4]
 8046c54:	2200      	movs	r2, #0
 8046c56:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8046c58:	bf00      	nop
 8046c5a:	3754      	adds	r7, #84	@ 0x54
 8046c5c:	46bd      	mov	sp, r7
 8046c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046c62:	4770      	bx	lr
 8046c64:	effffffe 	.word	0xeffffffe

08046c68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8046c68:	b480      	push	{r7}
 8046c6a:	b085      	sub	sp, #20
 8046c6c:	af00      	add	r7, sp, #0
 8046c6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8046c70:	687b      	ldr	r3, [r7, #4]
 8046c72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8046c76:	2b01      	cmp	r3, #1
 8046c78:	d101      	bne.n	8046c7e <HAL_UARTEx_DisableFifoMode+0x16>
 8046c7a:	2302      	movs	r3, #2
 8046c7c:	e027      	b.n	8046cce <HAL_UARTEx_DisableFifoMode+0x66>
 8046c7e:	687b      	ldr	r3, [r7, #4]
 8046c80:	2201      	movs	r2, #1
 8046c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8046c86:	687b      	ldr	r3, [r7, #4]
 8046c88:	2224      	movs	r2, #36	@ 0x24
 8046c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8046c8e:	687b      	ldr	r3, [r7, #4]
 8046c90:	681b      	ldr	r3, [r3, #0]
 8046c92:	681b      	ldr	r3, [r3, #0]
 8046c94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8046c96:	687b      	ldr	r3, [r7, #4]
 8046c98:	681b      	ldr	r3, [r3, #0]
 8046c9a:	681a      	ldr	r2, [r3, #0]
 8046c9c:	687b      	ldr	r3, [r7, #4]
 8046c9e:	681b      	ldr	r3, [r3, #0]
 8046ca0:	f022 0201 	bic.w	r2, r2, #1
 8046ca4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8046ca6:	68fb      	ldr	r3, [r7, #12]
 8046ca8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8046cac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8046cae:	687b      	ldr	r3, [r7, #4]
 8046cb0:	2200      	movs	r2, #0
 8046cb2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8046cb4:	687b      	ldr	r3, [r7, #4]
 8046cb6:	681b      	ldr	r3, [r3, #0]
 8046cb8:	68fa      	ldr	r2, [r7, #12]
 8046cba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8046cbc:	687b      	ldr	r3, [r7, #4]
 8046cbe:	2220      	movs	r2, #32
 8046cc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8046cc4:	687b      	ldr	r3, [r7, #4]
 8046cc6:	2200      	movs	r2, #0
 8046cc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8046ccc:	2300      	movs	r3, #0
}
 8046cce:	4618      	mov	r0, r3
 8046cd0:	3714      	adds	r7, #20
 8046cd2:	46bd      	mov	sp, r7
 8046cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046cd8:	4770      	bx	lr

08046cda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8046cda:	b580      	push	{r7, lr}
 8046cdc:	b084      	sub	sp, #16
 8046cde:	af00      	add	r7, sp, #0
 8046ce0:	6078      	str	r0, [r7, #4]
 8046ce2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8046ce4:	687b      	ldr	r3, [r7, #4]
 8046ce6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8046cea:	2b01      	cmp	r3, #1
 8046cec:	d101      	bne.n	8046cf2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8046cee:	2302      	movs	r3, #2
 8046cf0:	e02d      	b.n	8046d4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8046cf2:	687b      	ldr	r3, [r7, #4]
 8046cf4:	2201      	movs	r2, #1
 8046cf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8046cfa:	687b      	ldr	r3, [r7, #4]
 8046cfc:	2224      	movs	r2, #36	@ 0x24
 8046cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8046d02:	687b      	ldr	r3, [r7, #4]
 8046d04:	681b      	ldr	r3, [r3, #0]
 8046d06:	681b      	ldr	r3, [r3, #0]
 8046d08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8046d0a:	687b      	ldr	r3, [r7, #4]
 8046d0c:	681b      	ldr	r3, [r3, #0]
 8046d0e:	681a      	ldr	r2, [r3, #0]
 8046d10:	687b      	ldr	r3, [r7, #4]
 8046d12:	681b      	ldr	r3, [r3, #0]
 8046d14:	f022 0201 	bic.w	r2, r2, #1
 8046d18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8046d1a:	687b      	ldr	r3, [r7, #4]
 8046d1c:	681b      	ldr	r3, [r3, #0]
 8046d1e:	689b      	ldr	r3, [r3, #8]
 8046d20:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8046d24:	687b      	ldr	r3, [r7, #4]
 8046d26:	681b      	ldr	r3, [r3, #0]
 8046d28:	683a      	ldr	r2, [r7, #0]
 8046d2a:	430a      	orrs	r2, r1
 8046d2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8046d2e:	6878      	ldr	r0, [r7, #4]
 8046d30:	f000 f850 	bl	8046dd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8046d34:	687b      	ldr	r3, [r7, #4]
 8046d36:	681b      	ldr	r3, [r3, #0]
 8046d38:	68fa      	ldr	r2, [r7, #12]
 8046d3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8046d3c:	687b      	ldr	r3, [r7, #4]
 8046d3e:	2220      	movs	r2, #32
 8046d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8046d44:	687b      	ldr	r3, [r7, #4]
 8046d46:	2200      	movs	r2, #0
 8046d48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8046d4c:	2300      	movs	r3, #0
}
 8046d4e:	4618      	mov	r0, r3
 8046d50:	3710      	adds	r7, #16
 8046d52:	46bd      	mov	sp, r7
 8046d54:	bd80      	pop	{r7, pc}

08046d56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8046d56:	b580      	push	{r7, lr}
 8046d58:	b084      	sub	sp, #16
 8046d5a:	af00      	add	r7, sp, #0
 8046d5c:	6078      	str	r0, [r7, #4]
 8046d5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8046d60:	687b      	ldr	r3, [r7, #4]
 8046d62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8046d66:	2b01      	cmp	r3, #1
 8046d68:	d101      	bne.n	8046d6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8046d6a:	2302      	movs	r3, #2
 8046d6c:	e02d      	b.n	8046dca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8046d6e:	687b      	ldr	r3, [r7, #4]
 8046d70:	2201      	movs	r2, #1
 8046d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8046d76:	687b      	ldr	r3, [r7, #4]
 8046d78:	2224      	movs	r2, #36	@ 0x24
 8046d7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8046d7e:	687b      	ldr	r3, [r7, #4]
 8046d80:	681b      	ldr	r3, [r3, #0]
 8046d82:	681b      	ldr	r3, [r3, #0]
 8046d84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8046d86:	687b      	ldr	r3, [r7, #4]
 8046d88:	681b      	ldr	r3, [r3, #0]
 8046d8a:	681a      	ldr	r2, [r3, #0]
 8046d8c:	687b      	ldr	r3, [r7, #4]
 8046d8e:	681b      	ldr	r3, [r3, #0]
 8046d90:	f022 0201 	bic.w	r2, r2, #1
 8046d94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8046d96:	687b      	ldr	r3, [r7, #4]
 8046d98:	681b      	ldr	r3, [r3, #0]
 8046d9a:	689b      	ldr	r3, [r3, #8]
 8046d9c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8046da0:	687b      	ldr	r3, [r7, #4]
 8046da2:	681b      	ldr	r3, [r3, #0]
 8046da4:	683a      	ldr	r2, [r7, #0]
 8046da6:	430a      	orrs	r2, r1
 8046da8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8046daa:	6878      	ldr	r0, [r7, #4]
 8046dac:	f000 f812 	bl	8046dd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8046db0:	687b      	ldr	r3, [r7, #4]
 8046db2:	681b      	ldr	r3, [r3, #0]
 8046db4:	68fa      	ldr	r2, [r7, #12]
 8046db6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8046db8:	687b      	ldr	r3, [r7, #4]
 8046dba:	2220      	movs	r2, #32
 8046dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8046dc0:	687b      	ldr	r3, [r7, #4]
 8046dc2:	2200      	movs	r2, #0
 8046dc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8046dc8:	2300      	movs	r3, #0
}
 8046dca:	4618      	mov	r0, r3
 8046dcc:	3710      	adds	r7, #16
 8046dce:	46bd      	mov	sp, r7
 8046dd0:	bd80      	pop	{r7, pc}
	...

08046dd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8046dd4:	b480      	push	{r7}
 8046dd6:	b085      	sub	sp, #20
 8046dd8:	af00      	add	r7, sp, #0
 8046dda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8046ddc:	687b      	ldr	r3, [r7, #4]
 8046dde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8046de0:	2b00      	cmp	r3, #0
 8046de2:	d108      	bne.n	8046df6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8046de4:	687b      	ldr	r3, [r7, #4]
 8046de6:	2201      	movs	r2, #1
 8046de8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8046dec:	687b      	ldr	r3, [r7, #4]
 8046dee:	2201      	movs	r2, #1
 8046df0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8046df4:	e031      	b.n	8046e5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8046df6:	2310      	movs	r3, #16
 8046df8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8046dfa:	2310      	movs	r3, #16
 8046dfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8046dfe:	687b      	ldr	r3, [r7, #4]
 8046e00:	681b      	ldr	r3, [r3, #0]
 8046e02:	689b      	ldr	r3, [r3, #8]
 8046e04:	0e5b      	lsrs	r3, r3, #25
 8046e06:	b2db      	uxtb	r3, r3
 8046e08:	f003 0307 	and.w	r3, r3, #7
 8046e0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8046e0e:	687b      	ldr	r3, [r7, #4]
 8046e10:	681b      	ldr	r3, [r3, #0]
 8046e12:	689b      	ldr	r3, [r3, #8]
 8046e14:	0f5b      	lsrs	r3, r3, #29
 8046e16:	b2db      	uxtb	r3, r3
 8046e18:	f003 0307 	and.w	r3, r3, #7
 8046e1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8046e1e:	7bbb      	ldrb	r3, [r7, #14]
 8046e20:	7b3a      	ldrb	r2, [r7, #12]
 8046e22:	4911      	ldr	r1, [pc, #68]	@ (8046e68 <UARTEx_SetNbDataToProcess+0x94>)
 8046e24:	5c8a      	ldrb	r2, [r1, r2]
 8046e26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8046e2a:	7b3a      	ldrb	r2, [r7, #12]
 8046e2c:	490f      	ldr	r1, [pc, #60]	@ (8046e6c <UARTEx_SetNbDataToProcess+0x98>)
 8046e2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8046e30:	fb93 f3f2 	sdiv	r3, r3, r2
 8046e34:	b29a      	uxth	r2, r3
 8046e36:	687b      	ldr	r3, [r7, #4]
 8046e38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8046e3c:	7bfb      	ldrb	r3, [r7, #15]
 8046e3e:	7b7a      	ldrb	r2, [r7, #13]
 8046e40:	4909      	ldr	r1, [pc, #36]	@ (8046e68 <UARTEx_SetNbDataToProcess+0x94>)
 8046e42:	5c8a      	ldrb	r2, [r1, r2]
 8046e44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8046e48:	7b7a      	ldrb	r2, [r7, #13]
 8046e4a:	4908      	ldr	r1, [pc, #32]	@ (8046e6c <UARTEx_SetNbDataToProcess+0x98>)
 8046e4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8046e4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8046e52:	b29a      	uxth	r2, r3
 8046e54:	687b      	ldr	r3, [r7, #4]
 8046e56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8046e5a:	bf00      	nop
 8046e5c:	3714      	adds	r7, #20
 8046e5e:	46bd      	mov	sp, r7
 8046e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046e64:	4770      	bx	lr
 8046e66:	bf00      	nop
 8046e68:	0804c300 	.word	0x0804c300
 8046e6c:	0804c308 	.word	0x0804c308

08046e70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8046e70:	b084      	sub	sp, #16
 8046e72:	b580      	push	{r7, lr}
 8046e74:	b084      	sub	sp, #16
 8046e76:	af00      	add	r7, sp, #0
 8046e78:	6078      	str	r0, [r7, #4]
 8046e7a:	f107 001c 	add.w	r0, r7, #28
 8046e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8046e82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8046e86:	2b01      	cmp	r3, #1
 8046e88:	d121      	bne.n	8046ece <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8046e8a:	687b      	ldr	r3, [r7, #4]
 8046e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8046e8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8046e92:	687b      	ldr	r3, [r7, #4]
 8046e94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8046e96:	687b      	ldr	r3, [r7, #4]
 8046e98:	68da      	ldr	r2, [r3, #12]
 8046e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8046f4c <USB_CoreInit+0xdc>)
 8046e9c:	4013      	ands	r3, r2
 8046e9e:	687a      	ldr	r2, [r7, #4]
 8046ea0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8046ea2:	687b      	ldr	r3, [r7, #4]
 8046ea4:	68db      	ldr	r3, [r3, #12]
 8046ea6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8046eaa:	687b      	ldr	r3, [r7, #4]
 8046eac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8046eae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8046eb2:	2b01      	cmp	r3, #1
 8046eb4:	d105      	bne.n	8046ec2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8046eb6:	687b      	ldr	r3, [r7, #4]
 8046eb8:	68db      	ldr	r3, [r3, #12]
 8046eba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8046ebe:	687b      	ldr	r3, [r7, #4]
 8046ec0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8046ec2:	6878      	ldr	r0, [r7, #4]
 8046ec4:	f001 fa1e 	bl	8048304 <USB_CoreReset>
 8046ec8:	4603      	mov	r3, r0
 8046eca:	73fb      	strb	r3, [r7, #15]
 8046ecc:	e01b      	b.n	8046f06 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8046ece:	687b      	ldr	r3, [r7, #4]
 8046ed0:	68db      	ldr	r3, [r3, #12]
 8046ed2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8046ed6:	687b      	ldr	r3, [r7, #4]
 8046ed8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8046eda:	6878      	ldr	r0, [r7, #4]
 8046edc:	f001 fa12 	bl	8048304 <USB_CoreReset>
 8046ee0:	4603      	mov	r3, r0
 8046ee2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8046ee4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8046ee8:	2b00      	cmp	r3, #0
 8046eea:	d106      	bne.n	8046efa <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8046eec:	687b      	ldr	r3, [r7, #4]
 8046eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8046ef0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8046ef4:	687b      	ldr	r3, [r7, #4]
 8046ef6:	639a      	str	r2, [r3, #56]	@ 0x38
 8046ef8:	e005      	b.n	8046f06 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8046efa:	687b      	ldr	r3, [r7, #4]
 8046efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8046efe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8046f02:	687b      	ldr	r3, [r7, #4]
 8046f04:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8046f06:	7fbb      	ldrb	r3, [r7, #30]
 8046f08:	2b01      	cmp	r3, #1
 8046f0a:	d116      	bne.n	8046f3a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8046f0c:	687b      	ldr	r3, [r7, #4]
 8046f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8046f10:	b29a      	uxth	r2, r3
 8046f12:	687b      	ldr	r3, [r7, #4]
 8046f14:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8046f16:	687b      	ldr	r3, [r7, #4]
 8046f18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8046f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8046f50 <USB_CoreInit+0xe0>)
 8046f1c:	4313      	orrs	r3, r2
 8046f1e:	687a      	ldr	r2, [r7, #4]
 8046f20:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8046f22:	687b      	ldr	r3, [r7, #4]
 8046f24:	689b      	ldr	r3, [r3, #8]
 8046f26:	f043 0206 	orr.w	r2, r3, #6
 8046f2a:	687b      	ldr	r3, [r7, #4]
 8046f2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8046f2e:	687b      	ldr	r3, [r7, #4]
 8046f30:	689b      	ldr	r3, [r3, #8]
 8046f32:	f043 0220 	orr.w	r2, r3, #32
 8046f36:	687b      	ldr	r3, [r7, #4]
 8046f38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8046f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8046f3c:	4618      	mov	r0, r3
 8046f3e:	3710      	adds	r7, #16
 8046f40:	46bd      	mov	sp, r7
 8046f42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8046f46:	b004      	add	sp, #16
 8046f48:	4770      	bx	lr
 8046f4a:	bf00      	nop
 8046f4c:	ffbdffbf 	.word	0xffbdffbf
 8046f50:	03ee0000 	.word	0x03ee0000

08046f54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8046f54:	b480      	push	{r7}
 8046f56:	b087      	sub	sp, #28
 8046f58:	af00      	add	r7, sp, #0
 8046f5a:	60f8      	str	r0, [r7, #12]
 8046f5c:	60b9      	str	r1, [r7, #8]
 8046f5e:	4613      	mov	r3, r2
 8046f60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8046f62:	79fb      	ldrb	r3, [r7, #7]
 8046f64:	2b02      	cmp	r3, #2
 8046f66:	d165      	bne.n	8047034 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8046f68:	68bb      	ldr	r3, [r7, #8]
 8046f6a:	4a41      	ldr	r2, [pc, #260]	@ (8047070 <USB_SetTurnaroundTime+0x11c>)
 8046f6c:	4293      	cmp	r3, r2
 8046f6e:	d906      	bls.n	8046f7e <USB_SetTurnaroundTime+0x2a>
 8046f70:	68bb      	ldr	r3, [r7, #8]
 8046f72:	4a40      	ldr	r2, [pc, #256]	@ (8047074 <USB_SetTurnaroundTime+0x120>)
 8046f74:	4293      	cmp	r3, r2
 8046f76:	d202      	bcs.n	8046f7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8046f78:	230f      	movs	r3, #15
 8046f7a:	617b      	str	r3, [r7, #20]
 8046f7c:	e062      	b.n	8047044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8046f7e:	68bb      	ldr	r3, [r7, #8]
 8046f80:	4a3c      	ldr	r2, [pc, #240]	@ (8047074 <USB_SetTurnaroundTime+0x120>)
 8046f82:	4293      	cmp	r3, r2
 8046f84:	d306      	bcc.n	8046f94 <USB_SetTurnaroundTime+0x40>
 8046f86:	68bb      	ldr	r3, [r7, #8]
 8046f88:	4a3b      	ldr	r2, [pc, #236]	@ (8047078 <USB_SetTurnaroundTime+0x124>)
 8046f8a:	4293      	cmp	r3, r2
 8046f8c:	d202      	bcs.n	8046f94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8046f8e:	230e      	movs	r3, #14
 8046f90:	617b      	str	r3, [r7, #20]
 8046f92:	e057      	b.n	8047044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8046f94:	68bb      	ldr	r3, [r7, #8]
 8046f96:	4a38      	ldr	r2, [pc, #224]	@ (8047078 <USB_SetTurnaroundTime+0x124>)
 8046f98:	4293      	cmp	r3, r2
 8046f9a:	d306      	bcc.n	8046faa <USB_SetTurnaroundTime+0x56>
 8046f9c:	68bb      	ldr	r3, [r7, #8]
 8046f9e:	4a37      	ldr	r2, [pc, #220]	@ (804707c <USB_SetTurnaroundTime+0x128>)
 8046fa0:	4293      	cmp	r3, r2
 8046fa2:	d202      	bcs.n	8046faa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8046fa4:	230d      	movs	r3, #13
 8046fa6:	617b      	str	r3, [r7, #20]
 8046fa8:	e04c      	b.n	8047044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8046faa:	68bb      	ldr	r3, [r7, #8]
 8046fac:	4a33      	ldr	r2, [pc, #204]	@ (804707c <USB_SetTurnaroundTime+0x128>)
 8046fae:	4293      	cmp	r3, r2
 8046fb0:	d306      	bcc.n	8046fc0 <USB_SetTurnaroundTime+0x6c>
 8046fb2:	68bb      	ldr	r3, [r7, #8]
 8046fb4:	4a32      	ldr	r2, [pc, #200]	@ (8047080 <USB_SetTurnaroundTime+0x12c>)
 8046fb6:	4293      	cmp	r3, r2
 8046fb8:	d802      	bhi.n	8046fc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8046fba:	230c      	movs	r3, #12
 8046fbc:	617b      	str	r3, [r7, #20]
 8046fbe:	e041      	b.n	8047044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8046fc0:	68bb      	ldr	r3, [r7, #8]
 8046fc2:	4a2f      	ldr	r2, [pc, #188]	@ (8047080 <USB_SetTurnaroundTime+0x12c>)
 8046fc4:	4293      	cmp	r3, r2
 8046fc6:	d906      	bls.n	8046fd6 <USB_SetTurnaroundTime+0x82>
 8046fc8:	68bb      	ldr	r3, [r7, #8]
 8046fca:	4a2e      	ldr	r2, [pc, #184]	@ (8047084 <USB_SetTurnaroundTime+0x130>)
 8046fcc:	4293      	cmp	r3, r2
 8046fce:	d802      	bhi.n	8046fd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8046fd0:	230b      	movs	r3, #11
 8046fd2:	617b      	str	r3, [r7, #20]
 8046fd4:	e036      	b.n	8047044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8046fd6:	68bb      	ldr	r3, [r7, #8]
 8046fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8047084 <USB_SetTurnaroundTime+0x130>)
 8046fda:	4293      	cmp	r3, r2
 8046fdc:	d906      	bls.n	8046fec <USB_SetTurnaroundTime+0x98>
 8046fde:	68bb      	ldr	r3, [r7, #8]
 8046fe0:	4a29      	ldr	r2, [pc, #164]	@ (8047088 <USB_SetTurnaroundTime+0x134>)
 8046fe2:	4293      	cmp	r3, r2
 8046fe4:	d802      	bhi.n	8046fec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8046fe6:	230a      	movs	r3, #10
 8046fe8:	617b      	str	r3, [r7, #20]
 8046fea:	e02b      	b.n	8047044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8046fec:	68bb      	ldr	r3, [r7, #8]
 8046fee:	4a26      	ldr	r2, [pc, #152]	@ (8047088 <USB_SetTurnaroundTime+0x134>)
 8046ff0:	4293      	cmp	r3, r2
 8046ff2:	d906      	bls.n	8047002 <USB_SetTurnaroundTime+0xae>
 8046ff4:	68bb      	ldr	r3, [r7, #8]
 8046ff6:	4a25      	ldr	r2, [pc, #148]	@ (804708c <USB_SetTurnaroundTime+0x138>)
 8046ff8:	4293      	cmp	r3, r2
 8046ffa:	d202      	bcs.n	8047002 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8046ffc:	2309      	movs	r3, #9
 8046ffe:	617b      	str	r3, [r7, #20]
 8047000:	e020      	b.n	8047044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8047002:	68bb      	ldr	r3, [r7, #8]
 8047004:	4a21      	ldr	r2, [pc, #132]	@ (804708c <USB_SetTurnaroundTime+0x138>)
 8047006:	4293      	cmp	r3, r2
 8047008:	d306      	bcc.n	8047018 <USB_SetTurnaroundTime+0xc4>
 804700a:	68bb      	ldr	r3, [r7, #8]
 804700c:	4a20      	ldr	r2, [pc, #128]	@ (8047090 <USB_SetTurnaroundTime+0x13c>)
 804700e:	4293      	cmp	r3, r2
 8047010:	d802      	bhi.n	8047018 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8047012:	2308      	movs	r3, #8
 8047014:	617b      	str	r3, [r7, #20]
 8047016:	e015      	b.n	8047044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8047018:	68bb      	ldr	r3, [r7, #8]
 804701a:	4a1d      	ldr	r2, [pc, #116]	@ (8047090 <USB_SetTurnaroundTime+0x13c>)
 804701c:	4293      	cmp	r3, r2
 804701e:	d906      	bls.n	804702e <USB_SetTurnaroundTime+0xda>
 8047020:	68bb      	ldr	r3, [r7, #8]
 8047022:	4a1c      	ldr	r2, [pc, #112]	@ (8047094 <USB_SetTurnaroundTime+0x140>)
 8047024:	4293      	cmp	r3, r2
 8047026:	d202      	bcs.n	804702e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8047028:	2307      	movs	r3, #7
 804702a:	617b      	str	r3, [r7, #20]
 804702c:	e00a      	b.n	8047044 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 804702e:	2306      	movs	r3, #6
 8047030:	617b      	str	r3, [r7, #20]
 8047032:	e007      	b.n	8047044 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8047034:	79fb      	ldrb	r3, [r7, #7]
 8047036:	2b00      	cmp	r3, #0
 8047038:	d102      	bne.n	8047040 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 804703a:	2309      	movs	r3, #9
 804703c:	617b      	str	r3, [r7, #20]
 804703e:	e001      	b.n	8047044 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8047040:	2309      	movs	r3, #9
 8047042:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8047044:	68fb      	ldr	r3, [r7, #12]
 8047046:	68db      	ldr	r3, [r3, #12]
 8047048:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 804704c:	68fb      	ldr	r3, [r7, #12]
 804704e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8047050:	68fb      	ldr	r3, [r7, #12]
 8047052:	68da      	ldr	r2, [r3, #12]
 8047054:	697b      	ldr	r3, [r7, #20]
 8047056:	029b      	lsls	r3, r3, #10
 8047058:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 804705c:	431a      	orrs	r2, r3
 804705e:	68fb      	ldr	r3, [r7, #12]
 8047060:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8047062:	2300      	movs	r3, #0
}
 8047064:	4618      	mov	r0, r3
 8047066:	371c      	adds	r7, #28
 8047068:	46bd      	mov	sp, r7
 804706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804706e:	4770      	bx	lr
 8047070:	00d8acbf 	.word	0x00d8acbf
 8047074:	00e4e1c0 	.word	0x00e4e1c0
 8047078:	00f42400 	.word	0x00f42400
 804707c:	01067380 	.word	0x01067380
 8047080:	011a499f 	.word	0x011a499f
 8047084:	01312cff 	.word	0x01312cff
 8047088:	014ca43f 	.word	0x014ca43f
 804708c:	016e3600 	.word	0x016e3600
 8047090:	01a6ab1f 	.word	0x01a6ab1f
 8047094:	01e84800 	.word	0x01e84800

08047098 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8047098:	b480      	push	{r7}
 804709a:	b083      	sub	sp, #12
 804709c:	af00      	add	r7, sp, #0
 804709e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80470a0:	687b      	ldr	r3, [r7, #4]
 80470a2:	689b      	ldr	r3, [r3, #8]
 80470a4:	f043 0201 	orr.w	r2, r3, #1
 80470a8:	687b      	ldr	r3, [r7, #4]
 80470aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80470ac:	2300      	movs	r3, #0
}
 80470ae:	4618      	mov	r0, r3
 80470b0:	370c      	adds	r7, #12
 80470b2:	46bd      	mov	sp, r7
 80470b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80470b8:	4770      	bx	lr

080470ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80470ba:	b480      	push	{r7}
 80470bc:	b083      	sub	sp, #12
 80470be:	af00      	add	r7, sp, #0
 80470c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80470c2:	687b      	ldr	r3, [r7, #4]
 80470c4:	689b      	ldr	r3, [r3, #8]
 80470c6:	f023 0201 	bic.w	r2, r3, #1
 80470ca:	687b      	ldr	r3, [r7, #4]
 80470cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80470ce:	2300      	movs	r3, #0
}
 80470d0:	4618      	mov	r0, r3
 80470d2:	370c      	adds	r7, #12
 80470d4:	46bd      	mov	sp, r7
 80470d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80470da:	4770      	bx	lr

080470dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80470dc:	b580      	push	{r7, lr}
 80470de:	b084      	sub	sp, #16
 80470e0:	af00      	add	r7, sp, #0
 80470e2:	6078      	str	r0, [r7, #4]
 80470e4:	460b      	mov	r3, r1
 80470e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80470e8:	2300      	movs	r3, #0
 80470ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80470ec:	687b      	ldr	r3, [r7, #4]
 80470ee:	68db      	ldr	r3, [r3, #12]
 80470f0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80470f4:	687b      	ldr	r3, [r7, #4]
 80470f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80470f8:	78fb      	ldrb	r3, [r7, #3]
 80470fa:	2b01      	cmp	r3, #1
 80470fc:	d115      	bne.n	804712a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80470fe:	687b      	ldr	r3, [r7, #4]
 8047100:	68db      	ldr	r3, [r3, #12]
 8047102:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8047106:	687b      	ldr	r3, [r7, #4]
 8047108:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 804710a:	200a      	movs	r0, #10
 804710c:	f7f9 fff0 	bl	80410f0 <HAL_Delay>
      ms += 10U;
 8047110:	68fb      	ldr	r3, [r7, #12]
 8047112:	330a      	adds	r3, #10
 8047114:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8047116:	6878      	ldr	r0, [r7, #4]
 8047118:	f001 f863 	bl	80481e2 <USB_GetMode>
 804711c:	4603      	mov	r3, r0
 804711e:	2b01      	cmp	r3, #1
 8047120:	d01e      	beq.n	8047160 <USB_SetCurrentMode+0x84>
 8047122:	68fb      	ldr	r3, [r7, #12]
 8047124:	2bc7      	cmp	r3, #199	@ 0xc7
 8047126:	d9f0      	bls.n	804710a <USB_SetCurrentMode+0x2e>
 8047128:	e01a      	b.n	8047160 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 804712a:	78fb      	ldrb	r3, [r7, #3]
 804712c:	2b00      	cmp	r3, #0
 804712e:	d115      	bne.n	804715c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8047130:	687b      	ldr	r3, [r7, #4]
 8047132:	68db      	ldr	r3, [r3, #12]
 8047134:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8047138:	687b      	ldr	r3, [r7, #4]
 804713a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 804713c:	200a      	movs	r0, #10
 804713e:	f7f9 ffd7 	bl	80410f0 <HAL_Delay>
      ms += 10U;
 8047142:	68fb      	ldr	r3, [r7, #12]
 8047144:	330a      	adds	r3, #10
 8047146:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8047148:	6878      	ldr	r0, [r7, #4]
 804714a:	f001 f84a 	bl	80481e2 <USB_GetMode>
 804714e:	4603      	mov	r3, r0
 8047150:	2b00      	cmp	r3, #0
 8047152:	d005      	beq.n	8047160 <USB_SetCurrentMode+0x84>
 8047154:	68fb      	ldr	r3, [r7, #12]
 8047156:	2bc7      	cmp	r3, #199	@ 0xc7
 8047158:	d9f0      	bls.n	804713c <USB_SetCurrentMode+0x60>
 804715a:	e001      	b.n	8047160 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 804715c:	2301      	movs	r3, #1
 804715e:	e005      	b.n	804716c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8047160:	68fb      	ldr	r3, [r7, #12]
 8047162:	2bc8      	cmp	r3, #200	@ 0xc8
 8047164:	d101      	bne.n	804716a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8047166:	2301      	movs	r3, #1
 8047168:	e000      	b.n	804716c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 804716a:	2300      	movs	r3, #0
}
 804716c:	4618      	mov	r0, r3
 804716e:	3710      	adds	r7, #16
 8047170:	46bd      	mov	sp, r7
 8047172:	bd80      	pop	{r7, pc}

08047174 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8047174:	b084      	sub	sp, #16
 8047176:	b580      	push	{r7, lr}
 8047178:	b086      	sub	sp, #24
 804717a:	af00      	add	r7, sp, #0
 804717c:	6078      	str	r0, [r7, #4]
 804717e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8047182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8047186:	2300      	movs	r3, #0
 8047188:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804718a:	687b      	ldr	r3, [r7, #4]
 804718c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 804718e:	2300      	movs	r3, #0
 8047190:	613b      	str	r3, [r7, #16]
 8047192:	e009      	b.n	80471a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8047194:	687a      	ldr	r2, [r7, #4]
 8047196:	693b      	ldr	r3, [r7, #16]
 8047198:	3340      	adds	r3, #64	@ 0x40
 804719a:	009b      	lsls	r3, r3, #2
 804719c:	4413      	add	r3, r2
 804719e:	2200      	movs	r2, #0
 80471a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80471a2:	693b      	ldr	r3, [r7, #16]
 80471a4:	3301      	adds	r3, #1
 80471a6:	613b      	str	r3, [r7, #16]
 80471a8:	693b      	ldr	r3, [r7, #16]
 80471aa:	2b0e      	cmp	r3, #14
 80471ac:	d9f2      	bls.n	8047194 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80471ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80471b2:	2b00      	cmp	r3, #0
 80471b4:	d11c      	bne.n	80471f0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80471b6:	68fb      	ldr	r3, [r7, #12]
 80471b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80471bc:	685b      	ldr	r3, [r3, #4]
 80471be:	68fa      	ldr	r2, [r7, #12]
 80471c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80471c4:	f043 0302 	orr.w	r3, r3, #2
 80471c8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80471ca:	687b      	ldr	r3, [r7, #4]
 80471cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80471ce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80471d2:	687b      	ldr	r3, [r7, #4]
 80471d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80471d6:	687b      	ldr	r3, [r7, #4]
 80471d8:	681b      	ldr	r3, [r3, #0]
 80471da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80471de:	687b      	ldr	r3, [r7, #4]
 80471e0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80471e2:	687b      	ldr	r3, [r7, #4]
 80471e4:	681b      	ldr	r3, [r3, #0]
 80471e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80471ea:	687b      	ldr	r3, [r7, #4]
 80471ec:	601a      	str	r2, [r3, #0]
 80471ee:	e005      	b.n	80471fc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80471f0:	687b      	ldr	r3, [r7, #4]
 80471f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80471f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80471f8:	687b      	ldr	r3, [r7, #4]
 80471fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80471fc:	68fb      	ldr	r3, [r7, #12]
 80471fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8047202:	461a      	mov	r2, r3
 8047204:	2300      	movs	r3, #0
 8047206:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8047208:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 804720c:	2b01      	cmp	r3, #1
 804720e:	d10d      	bne.n	804722c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8047210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8047214:	2b00      	cmp	r3, #0
 8047216:	d104      	bne.n	8047222 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8047218:	2100      	movs	r1, #0
 804721a:	6878      	ldr	r0, [r7, #4]
 804721c:	f000 f968 	bl	80474f0 <USB_SetDevSpeed>
 8047220:	e008      	b.n	8047234 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8047222:	2101      	movs	r1, #1
 8047224:	6878      	ldr	r0, [r7, #4]
 8047226:	f000 f963 	bl	80474f0 <USB_SetDevSpeed>
 804722a:	e003      	b.n	8047234 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 804722c:	2103      	movs	r1, #3
 804722e:	6878      	ldr	r0, [r7, #4]
 8047230:	f000 f95e 	bl	80474f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8047234:	2110      	movs	r1, #16
 8047236:	6878      	ldr	r0, [r7, #4]
 8047238:	f000 f8fa 	bl	8047430 <USB_FlushTxFifo>
 804723c:	4603      	mov	r3, r0
 804723e:	2b00      	cmp	r3, #0
 8047240:	d001      	beq.n	8047246 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8047242:	2301      	movs	r3, #1
 8047244:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8047246:	6878      	ldr	r0, [r7, #4]
 8047248:	f000 f924 	bl	8047494 <USB_FlushRxFifo>
 804724c:	4603      	mov	r3, r0
 804724e:	2b00      	cmp	r3, #0
 8047250:	d001      	beq.n	8047256 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8047252:	2301      	movs	r3, #1
 8047254:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8047256:	68fb      	ldr	r3, [r7, #12]
 8047258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804725c:	461a      	mov	r2, r3
 804725e:	2300      	movs	r3, #0
 8047260:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8047262:	68fb      	ldr	r3, [r7, #12]
 8047264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047268:	461a      	mov	r2, r3
 804726a:	2300      	movs	r3, #0
 804726c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 804726e:	68fb      	ldr	r3, [r7, #12]
 8047270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047274:	461a      	mov	r2, r3
 8047276:	2300      	movs	r3, #0
 8047278:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 804727a:	2300      	movs	r3, #0
 804727c:	613b      	str	r3, [r7, #16]
 804727e:	e043      	b.n	8047308 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8047280:	693b      	ldr	r3, [r7, #16]
 8047282:	015a      	lsls	r2, r3, #5
 8047284:	68fb      	ldr	r3, [r7, #12]
 8047286:	4413      	add	r3, r2
 8047288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804728c:	681b      	ldr	r3, [r3, #0]
 804728e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047292:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047296:	d118      	bne.n	80472ca <USB_DevInit+0x156>
    {
      if (i == 0U)
 8047298:	693b      	ldr	r3, [r7, #16]
 804729a:	2b00      	cmp	r3, #0
 804729c:	d10a      	bne.n	80472b4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 804729e:	693b      	ldr	r3, [r7, #16]
 80472a0:	015a      	lsls	r2, r3, #5
 80472a2:	68fb      	ldr	r3, [r7, #12]
 80472a4:	4413      	add	r3, r2
 80472a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80472aa:	461a      	mov	r2, r3
 80472ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80472b0:	6013      	str	r3, [r2, #0]
 80472b2:	e013      	b.n	80472dc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80472b4:	693b      	ldr	r3, [r7, #16]
 80472b6:	015a      	lsls	r2, r3, #5
 80472b8:	68fb      	ldr	r3, [r7, #12]
 80472ba:	4413      	add	r3, r2
 80472bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80472c0:	461a      	mov	r2, r3
 80472c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80472c6:	6013      	str	r3, [r2, #0]
 80472c8:	e008      	b.n	80472dc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80472ca:	693b      	ldr	r3, [r7, #16]
 80472cc:	015a      	lsls	r2, r3, #5
 80472ce:	68fb      	ldr	r3, [r7, #12]
 80472d0:	4413      	add	r3, r2
 80472d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80472d6:	461a      	mov	r2, r3
 80472d8:	2300      	movs	r3, #0
 80472da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80472dc:	693b      	ldr	r3, [r7, #16]
 80472de:	015a      	lsls	r2, r3, #5
 80472e0:	68fb      	ldr	r3, [r7, #12]
 80472e2:	4413      	add	r3, r2
 80472e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80472e8:	461a      	mov	r2, r3
 80472ea:	2300      	movs	r3, #0
 80472ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80472ee:	693b      	ldr	r3, [r7, #16]
 80472f0:	015a      	lsls	r2, r3, #5
 80472f2:	68fb      	ldr	r3, [r7, #12]
 80472f4:	4413      	add	r3, r2
 80472f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80472fa:	461a      	mov	r2, r3
 80472fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8047300:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8047302:	693b      	ldr	r3, [r7, #16]
 8047304:	3301      	adds	r3, #1
 8047306:	613b      	str	r3, [r7, #16]
 8047308:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 804730c:	461a      	mov	r2, r3
 804730e:	693b      	ldr	r3, [r7, #16]
 8047310:	4293      	cmp	r3, r2
 8047312:	d3b5      	bcc.n	8047280 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8047314:	2300      	movs	r3, #0
 8047316:	613b      	str	r3, [r7, #16]
 8047318:	e043      	b.n	80473a2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 804731a:	693b      	ldr	r3, [r7, #16]
 804731c:	015a      	lsls	r2, r3, #5
 804731e:	68fb      	ldr	r3, [r7, #12]
 8047320:	4413      	add	r3, r2
 8047322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047326:	681b      	ldr	r3, [r3, #0]
 8047328:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 804732c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047330:	d118      	bne.n	8047364 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8047332:	693b      	ldr	r3, [r7, #16]
 8047334:	2b00      	cmp	r3, #0
 8047336:	d10a      	bne.n	804734e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8047338:	693b      	ldr	r3, [r7, #16]
 804733a:	015a      	lsls	r2, r3, #5
 804733c:	68fb      	ldr	r3, [r7, #12]
 804733e:	4413      	add	r3, r2
 8047340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047344:	461a      	mov	r2, r3
 8047346:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 804734a:	6013      	str	r3, [r2, #0]
 804734c:	e013      	b.n	8047376 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 804734e:	693b      	ldr	r3, [r7, #16]
 8047350:	015a      	lsls	r2, r3, #5
 8047352:	68fb      	ldr	r3, [r7, #12]
 8047354:	4413      	add	r3, r2
 8047356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804735a:	461a      	mov	r2, r3
 804735c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8047360:	6013      	str	r3, [r2, #0]
 8047362:	e008      	b.n	8047376 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8047364:	693b      	ldr	r3, [r7, #16]
 8047366:	015a      	lsls	r2, r3, #5
 8047368:	68fb      	ldr	r3, [r7, #12]
 804736a:	4413      	add	r3, r2
 804736c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047370:	461a      	mov	r2, r3
 8047372:	2300      	movs	r3, #0
 8047374:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8047376:	693b      	ldr	r3, [r7, #16]
 8047378:	015a      	lsls	r2, r3, #5
 804737a:	68fb      	ldr	r3, [r7, #12]
 804737c:	4413      	add	r3, r2
 804737e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047382:	461a      	mov	r2, r3
 8047384:	2300      	movs	r3, #0
 8047386:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8047388:	693b      	ldr	r3, [r7, #16]
 804738a:	015a      	lsls	r2, r3, #5
 804738c:	68fb      	ldr	r3, [r7, #12]
 804738e:	4413      	add	r3, r2
 8047390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047394:	461a      	mov	r2, r3
 8047396:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 804739a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 804739c:	693b      	ldr	r3, [r7, #16]
 804739e:	3301      	adds	r3, #1
 80473a0:	613b      	str	r3, [r7, #16]
 80473a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80473a6:	461a      	mov	r2, r3
 80473a8:	693b      	ldr	r3, [r7, #16]
 80473aa:	4293      	cmp	r3, r2
 80473ac:	d3b5      	bcc.n	804731a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80473ae:	68fb      	ldr	r3, [r7, #12]
 80473b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80473b4:	691b      	ldr	r3, [r3, #16]
 80473b6:	68fa      	ldr	r2, [r7, #12]
 80473b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80473bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80473c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80473c2:	687b      	ldr	r3, [r7, #4]
 80473c4:	2200      	movs	r2, #0
 80473c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80473c8:	687b      	ldr	r3, [r7, #4]
 80473ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80473ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80473d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80473d4:	2b00      	cmp	r3, #0
 80473d6:	d105      	bne.n	80473e4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80473d8:	687b      	ldr	r3, [r7, #4]
 80473da:	699b      	ldr	r3, [r3, #24]
 80473dc:	f043 0210 	orr.w	r2, r3, #16
 80473e0:	687b      	ldr	r3, [r7, #4]
 80473e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80473e4:	687b      	ldr	r3, [r7, #4]
 80473e6:	699a      	ldr	r2, [r3, #24]
 80473e8:	4b0f      	ldr	r3, [pc, #60]	@ (8047428 <USB_DevInit+0x2b4>)
 80473ea:	4313      	orrs	r3, r2
 80473ec:	687a      	ldr	r2, [r7, #4]
 80473ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80473f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80473f4:	2b00      	cmp	r3, #0
 80473f6:	d005      	beq.n	8047404 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80473f8:	687b      	ldr	r3, [r7, #4]
 80473fa:	699b      	ldr	r3, [r3, #24]
 80473fc:	f043 0208 	orr.w	r2, r3, #8
 8047400:	687b      	ldr	r3, [r7, #4]
 8047402:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8047404:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8047408:	2b01      	cmp	r3, #1
 804740a:	d105      	bne.n	8047418 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 804740c:	687b      	ldr	r3, [r7, #4]
 804740e:	699a      	ldr	r2, [r3, #24]
 8047410:	4b06      	ldr	r3, [pc, #24]	@ (804742c <USB_DevInit+0x2b8>)
 8047412:	4313      	orrs	r3, r2
 8047414:	687a      	ldr	r2, [r7, #4]
 8047416:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8047418:	7dfb      	ldrb	r3, [r7, #23]
}
 804741a:	4618      	mov	r0, r3
 804741c:	3718      	adds	r7, #24
 804741e:	46bd      	mov	sp, r7
 8047420:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8047424:	b004      	add	sp, #16
 8047426:	4770      	bx	lr
 8047428:	803c3800 	.word	0x803c3800
 804742c:	40000004 	.word	0x40000004

08047430 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8047430:	b480      	push	{r7}
 8047432:	b085      	sub	sp, #20
 8047434:	af00      	add	r7, sp, #0
 8047436:	6078      	str	r0, [r7, #4]
 8047438:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 804743a:	2300      	movs	r3, #0
 804743c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 804743e:	68fb      	ldr	r3, [r7, #12]
 8047440:	3301      	adds	r3, #1
 8047442:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8047444:	68fb      	ldr	r3, [r7, #12]
 8047446:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 804744a:	d901      	bls.n	8047450 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 804744c:	2303      	movs	r3, #3
 804744e:	e01b      	b.n	8047488 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8047450:	687b      	ldr	r3, [r7, #4]
 8047452:	691b      	ldr	r3, [r3, #16]
 8047454:	2b00      	cmp	r3, #0
 8047456:	daf2      	bge.n	804743e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8047458:	2300      	movs	r3, #0
 804745a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 804745c:	683b      	ldr	r3, [r7, #0]
 804745e:	019b      	lsls	r3, r3, #6
 8047460:	f043 0220 	orr.w	r2, r3, #32
 8047464:	687b      	ldr	r3, [r7, #4]
 8047466:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8047468:	68fb      	ldr	r3, [r7, #12]
 804746a:	3301      	adds	r3, #1
 804746c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 804746e:	68fb      	ldr	r3, [r7, #12]
 8047470:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8047474:	d901      	bls.n	804747a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8047476:	2303      	movs	r3, #3
 8047478:	e006      	b.n	8047488 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 804747a:	687b      	ldr	r3, [r7, #4]
 804747c:	691b      	ldr	r3, [r3, #16]
 804747e:	f003 0320 	and.w	r3, r3, #32
 8047482:	2b20      	cmp	r3, #32
 8047484:	d0f0      	beq.n	8047468 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8047486:	2300      	movs	r3, #0
}
 8047488:	4618      	mov	r0, r3
 804748a:	3714      	adds	r7, #20
 804748c:	46bd      	mov	sp, r7
 804748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047492:	4770      	bx	lr

08047494 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8047494:	b480      	push	{r7}
 8047496:	b085      	sub	sp, #20
 8047498:	af00      	add	r7, sp, #0
 804749a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 804749c:	2300      	movs	r3, #0
 804749e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80474a0:	68fb      	ldr	r3, [r7, #12]
 80474a2:	3301      	adds	r3, #1
 80474a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80474a6:	68fb      	ldr	r3, [r7, #12]
 80474a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80474ac:	d901      	bls.n	80474b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80474ae:	2303      	movs	r3, #3
 80474b0:	e018      	b.n	80474e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80474b2:	687b      	ldr	r3, [r7, #4]
 80474b4:	691b      	ldr	r3, [r3, #16]
 80474b6:	2b00      	cmp	r3, #0
 80474b8:	daf2      	bge.n	80474a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80474ba:	2300      	movs	r3, #0
 80474bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80474be:	687b      	ldr	r3, [r7, #4]
 80474c0:	2210      	movs	r2, #16
 80474c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80474c4:	68fb      	ldr	r3, [r7, #12]
 80474c6:	3301      	adds	r3, #1
 80474c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80474ca:	68fb      	ldr	r3, [r7, #12]
 80474cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80474d0:	d901      	bls.n	80474d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80474d2:	2303      	movs	r3, #3
 80474d4:	e006      	b.n	80474e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80474d6:	687b      	ldr	r3, [r7, #4]
 80474d8:	691b      	ldr	r3, [r3, #16]
 80474da:	f003 0310 	and.w	r3, r3, #16
 80474de:	2b10      	cmp	r3, #16
 80474e0:	d0f0      	beq.n	80474c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80474e2:	2300      	movs	r3, #0
}
 80474e4:	4618      	mov	r0, r3
 80474e6:	3714      	adds	r7, #20
 80474e8:	46bd      	mov	sp, r7
 80474ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80474ee:	4770      	bx	lr

080474f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80474f0:	b480      	push	{r7}
 80474f2:	b085      	sub	sp, #20
 80474f4:	af00      	add	r7, sp, #0
 80474f6:	6078      	str	r0, [r7, #4]
 80474f8:	460b      	mov	r3, r1
 80474fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80474fc:	687b      	ldr	r3, [r7, #4]
 80474fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8047500:	68fb      	ldr	r3, [r7, #12]
 8047502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047506:	681a      	ldr	r2, [r3, #0]
 8047508:	78fb      	ldrb	r3, [r7, #3]
 804750a:	68f9      	ldr	r1, [r7, #12]
 804750c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8047510:	4313      	orrs	r3, r2
 8047512:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8047514:	2300      	movs	r3, #0
}
 8047516:	4618      	mov	r0, r3
 8047518:	3714      	adds	r7, #20
 804751a:	46bd      	mov	sp, r7
 804751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047520:	4770      	bx	lr

08047522 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8047522:	b480      	push	{r7}
 8047524:	b087      	sub	sp, #28
 8047526:	af00      	add	r7, sp, #0
 8047528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804752a:	687b      	ldr	r3, [r7, #4]
 804752c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 804752e:	693b      	ldr	r3, [r7, #16]
 8047530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047534:	689b      	ldr	r3, [r3, #8]
 8047536:	f003 0306 	and.w	r3, r3, #6
 804753a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 804753c:	68fb      	ldr	r3, [r7, #12]
 804753e:	2b00      	cmp	r3, #0
 8047540:	d102      	bne.n	8047548 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8047542:	2300      	movs	r3, #0
 8047544:	75fb      	strb	r3, [r7, #23]
 8047546:	e00a      	b.n	804755e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8047548:	68fb      	ldr	r3, [r7, #12]
 804754a:	2b02      	cmp	r3, #2
 804754c:	d002      	beq.n	8047554 <USB_GetDevSpeed+0x32>
 804754e:	68fb      	ldr	r3, [r7, #12]
 8047550:	2b06      	cmp	r3, #6
 8047552:	d102      	bne.n	804755a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8047554:	2302      	movs	r3, #2
 8047556:	75fb      	strb	r3, [r7, #23]
 8047558:	e001      	b.n	804755e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 804755a:	230f      	movs	r3, #15
 804755c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 804755e:	7dfb      	ldrb	r3, [r7, #23]
}
 8047560:	4618      	mov	r0, r3
 8047562:	371c      	adds	r7, #28
 8047564:	46bd      	mov	sp, r7
 8047566:	f85d 7b04 	ldr.w	r7, [sp], #4
 804756a:	4770      	bx	lr

0804756c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 804756c:	b480      	push	{r7}
 804756e:	b085      	sub	sp, #20
 8047570:	af00      	add	r7, sp, #0
 8047572:	6078      	str	r0, [r7, #4]
 8047574:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047576:	687b      	ldr	r3, [r7, #4]
 8047578:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 804757a:	683b      	ldr	r3, [r7, #0]
 804757c:	781b      	ldrb	r3, [r3, #0]
 804757e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8047580:	683b      	ldr	r3, [r7, #0]
 8047582:	785b      	ldrb	r3, [r3, #1]
 8047584:	2b01      	cmp	r3, #1
 8047586:	d139      	bne.n	80475fc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8047588:	68fb      	ldr	r3, [r7, #12]
 804758a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804758e:	69da      	ldr	r2, [r3, #28]
 8047590:	683b      	ldr	r3, [r7, #0]
 8047592:	781b      	ldrb	r3, [r3, #0]
 8047594:	f003 030f 	and.w	r3, r3, #15
 8047598:	2101      	movs	r1, #1
 804759a:	fa01 f303 	lsl.w	r3, r1, r3
 804759e:	b29b      	uxth	r3, r3
 80475a0:	68f9      	ldr	r1, [r7, #12]
 80475a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80475a6:	4313      	orrs	r3, r2
 80475a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80475aa:	68bb      	ldr	r3, [r7, #8]
 80475ac:	015a      	lsls	r2, r3, #5
 80475ae:	68fb      	ldr	r3, [r7, #12]
 80475b0:	4413      	add	r3, r2
 80475b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80475b6:	681b      	ldr	r3, [r3, #0]
 80475b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80475bc:	2b00      	cmp	r3, #0
 80475be:	d153      	bne.n	8047668 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80475c0:	68bb      	ldr	r3, [r7, #8]
 80475c2:	015a      	lsls	r2, r3, #5
 80475c4:	68fb      	ldr	r3, [r7, #12]
 80475c6:	4413      	add	r3, r2
 80475c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80475cc:	681a      	ldr	r2, [r3, #0]
 80475ce:	683b      	ldr	r3, [r7, #0]
 80475d0:	689b      	ldr	r3, [r3, #8]
 80475d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80475d6:	683b      	ldr	r3, [r7, #0]
 80475d8:	791b      	ldrb	r3, [r3, #4]
 80475da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80475dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80475de:	68bb      	ldr	r3, [r7, #8]
 80475e0:	059b      	lsls	r3, r3, #22
 80475e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80475e4:	431a      	orrs	r2, r3
 80475e6:	68bb      	ldr	r3, [r7, #8]
 80475e8:	0159      	lsls	r1, r3, #5
 80475ea:	68fb      	ldr	r3, [r7, #12]
 80475ec:	440b      	add	r3, r1
 80475ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80475f2:	4619      	mov	r1, r3
 80475f4:	4b20      	ldr	r3, [pc, #128]	@ (8047678 <USB_ActivateEndpoint+0x10c>)
 80475f6:	4313      	orrs	r3, r2
 80475f8:	600b      	str	r3, [r1, #0]
 80475fa:	e035      	b.n	8047668 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80475fc:	68fb      	ldr	r3, [r7, #12]
 80475fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047602:	69da      	ldr	r2, [r3, #28]
 8047604:	683b      	ldr	r3, [r7, #0]
 8047606:	781b      	ldrb	r3, [r3, #0]
 8047608:	f003 030f 	and.w	r3, r3, #15
 804760c:	2101      	movs	r1, #1
 804760e:	fa01 f303 	lsl.w	r3, r1, r3
 8047612:	041b      	lsls	r3, r3, #16
 8047614:	68f9      	ldr	r1, [r7, #12]
 8047616:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 804761a:	4313      	orrs	r3, r2
 804761c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 804761e:	68bb      	ldr	r3, [r7, #8]
 8047620:	015a      	lsls	r2, r3, #5
 8047622:	68fb      	ldr	r3, [r7, #12]
 8047624:	4413      	add	r3, r2
 8047626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804762a:	681b      	ldr	r3, [r3, #0]
 804762c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8047630:	2b00      	cmp	r3, #0
 8047632:	d119      	bne.n	8047668 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8047634:	68bb      	ldr	r3, [r7, #8]
 8047636:	015a      	lsls	r2, r3, #5
 8047638:	68fb      	ldr	r3, [r7, #12]
 804763a:	4413      	add	r3, r2
 804763c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047640:	681a      	ldr	r2, [r3, #0]
 8047642:	683b      	ldr	r3, [r7, #0]
 8047644:	689b      	ldr	r3, [r3, #8]
 8047646:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 804764a:	683b      	ldr	r3, [r7, #0]
 804764c:	791b      	ldrb	r3, [r3, #4]
 804764e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8047650:	430b      	orrs	r3, r1
 8047652:	431a      	orrs	r2, r3
 8047654:	68bb      	ldr	r3, [r7, #8]
 8047656:	0159      	lsls	r1, r3, #5
 8047658:	68fb      	ldr	r3, [r7, #12]
 804765a:	440b      	add	r3, r1
 804765c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047660:	4619      	mov	r1, r3
 8047662:	4b05      	ldr	r3, [pc, #20]	@ (8047678 <USB_ActivateEndpoint+0x10c>)
 8047664:	4313      	orrs	r3, r2
 8047666:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8047668:	2300      	movs	r3, #0
}
 804766a:	4618      	mov	r0, r3
 804766c:	3714      	adds	r7, #20
 804766e:	46bd      	mov	sp, r7
 8047670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047674:	4770      	bx	lr
 8047676:	bf00      	nop
 8047678:	10008000 	.word	0x10008000

0804767c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 804767c:	b580      	push	{r7, lr}
 804767e:	b08a      	sub	sp, #40	@ 0x28
 8047680:	af02      	add	r7, sp, #8
 8047682:	60f8      	str	r0, [r7, #12]
 8047684:	60b9      	str	r1, [r7, #8]
 8047686:	4613      	mov	r3, r2
 8047688:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804768a:	68fb      	ldr	r3, [r7, #12]
 804768c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 804768e:	68bb      	ldr	r3, [r7, #8]
 8047690:	781b      	ldrb	r3, [r3, #0]
 8047692:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8047694:	68bb      	ldr	r3, [r7, #8]
 8047696:	785b      	ldrb	r3, [r3, #1]
 8047698:	2b01      	cmp	r3, #1
 804769a:	f040 8185 	bne.w	80479a8 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 804769e:	68bb      	ldr	r3, [r7, #8]
 80476a0:	691b      	ldr	r3, [r3, #16]
 80476a2:	2b00      	cmp	r3, #0
 80476a4:	d132      	bne.n	804770c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80476a6:	69bb      	ldr	r3, [r7, #24]
 80476a8:	015a      	lsls	r2, r3, #5
 80476aa:	69fb      	ldr	r3, [r7, #28]
 80476ac:	4413      	add	r3, r2
 80476ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80476b2:	691a      	ldr	r2, [r3, #16]
 80476b4:	69bb      	ldr	r3, [r7, #24]
 80476b6:	0159      	lsls	r1, r3, #5
 80476b8:	69fb      	ldr	r3, [r7, #28]
 80476ba:	440b      	add	r3, r1
 80476bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80476c0:	4619      	mov	r1, r3
 80476c2:	4ba7      	ldr	r3, [pc, #668]	@ (8047960 <USB_EPStartXfer+0x2e4>)
 80476c4:	4013      	ands	r3, r2
 80476c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80476c8:	69bb      	ldr	r3, [r7, #24]
 80476ca:	015a      	lsls	r2, r3, #5
 80476cc:	69fb      	ldr	r3, [r7, #28]
 80476ce:	4413      	add	r3, r2
 80476d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80476d4:	691b      	ldr	r3, [r3, #16]
 80476d6:	69ba      	ldr	r2, [r7, #24]
 80476d8:	0151      	lsls	r1, r2, #5
 80476da:	69fa      	ldr	r2, [r7, #28]
 80476dc:	440a      	add	r2, r1
 80476de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80476e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80476e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80476e8:	69bb      	ldr	r3, [r7, #24]
 80476ea:	015a      	lsls	r2, r3, #5
 80476ec:	69fb      	ldr	r3, [r7, #28]
 80476ee:	4413      	add	r3, r2
 80476f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80476f4:	691a      	ldr	r2, [r3, #16]
 80476f6:	69bb      	ldr	r3, [r7, #24]
 80476f8:	0159      	lsls	r1, r3, #5
 80476fa:	69fb      	ldr	r3, [r7, #28]
 80476fc:	440b      	add	r3, r1
 80476fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047702:	4619      	mov	r1, r3
 8047704:	4b97      	ldr	r3, [pc, #604]	@ (8047964 <USB_EPStartXfer+0x2e8>)
 8047706:	4013      	ands	r3, r2
 8047708:	610b      	str	r3, [r1, #16]
 804770a:	e097      	b.n	804783c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 804770c:	69bb      	ldr	r3, [r7, #24]
 804770e:	015a      	lsls	r2, r3, #5
 8047710:	69fb      	ldr	r3, [r7, #28]
 8047712:	4413      	add	r3, r2
 8047714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047718:	691a      	ldr	r2, [r3, #16]
 804771a:	69bb      	ldr	r3, [r7, #24]
 804771c:	0159      	lsls	r1, r3, #5
 804771e:	69fb      	ldr	r3, [r7, #28]
 8047720:	440b      	add	r3, r1
 8047722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047726:	4619      	mov	r1, r3
 8047728:	4b8e      	ldr	r3, [pc, #568]	@ (8047964 <USB_EPStartXfer+0x2e8>)
 804772a:	4013      	ands	r3, r2
 804772c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 804772e:	69bb      	ldr	r3, [r7, #24]
 8047730:	015a      	lsls	r2, r3, #5
 8047732:	69fb      	ldr	r3, [r7, #28]
 8047734:	4413      	add	r3, r2
 8047736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804773a:	691a      	ldr	r2, [r3, #16]
 804773c:	69bb      	ldr	r3, [r7, #24]
 804773e:	0159      	lsls	r1, r3, #5
 8047740:	69fb      	ldr	r3, [r7, #28]
 8047742:	440b      	add	r3, r1
 8047744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047748:	4619      	mov	r1, r3
 804774a:	4b85      	ldr	r3, [pc, #532]	@ (8047960 <USB_EPStartXfer+0x2e4>)
 804774c:	4013      	ands	r3, r2
 804774e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8047750:	69bb      	ldr	r3, [r7, #24]
 8047752:	2b00      	cmp	r3, #0
 8047754:	d11a      	bne.n	804778c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8047756:	68bb      	ldr	r3, [r7, #8]
 8047758:	691a      	ldr	r2, [r3, #16]
 804775a:	68bb      	ldr	r3, [r7, #8]
 804775c:	689b      	ldr	r3, [r3, #8]
 804775e:	429a      	cmp	r2, r3
 8047760:	d903      	bls.n	804776a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8047762:	68bb      	ldr	r3, [r7, #8]
 8047764:	689a      	ldr	r2, [r3, #8]
 8047766:	68bb      	ldr	r3, [r7, #8]
 8047768:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 804776a:	69bb      	ldr	r3, [r7, #24]
 804776c:	015a      	lsls	r2, r3, #5
 804776e:	69fb      	ldr	r3, [r7, #28]
 8047770:	4413      	add	r3, r2
 8047772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047776:	691b      	ldr	r3, [r3, #16]
 8047778:	69ba      	ldr	r2, [r7, #24]
 804777a:	0151      	lsls	r1, r2, #5
 804777c:	69fa      	ldr	r2, [r7, #28]
 804777e:	440a      	add	r2, r1
 8047780:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047784:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8047788:	6113      	str	r3, [r2, #16]
 804778a:	e044      	b.n	8047816 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 804778c:	68bb      	ldr	r3, [r7, #8]
 804778e:	691a      	ldr	r2, [r3, #16]
 8047790:	68bb      	ldr	r3, [r7, #8]
 8047792:	689b      	ldr	r3, [r3, #8]
 8047794:	4413      	add	r3, r2
 8047796:	1e5a      	subs	r2, r3, #1
 8047798:	68bb      	ldr	r3, [r7, #8]
 804779a:	689b      	ldr	r3, [r3, #8]
 804779c:	fbb2 f3f3 	udiv	r3, r2, r3
 80477a0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80477a2:	69bb      	ldr	r3, [r7, #24]
 80477a4:	015a      	lsls	r2, r3, #5
 80477a6:	69fb      	ldr	r3, [r7, #28]
 80477a8:	4413      	add	r3, r2
 80477aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80477ae:	691a      	ldr	r2, [r3, #16]
 80477b0:	8afb      	ldrh	r3, [r7, #22]
 80477b2:	04d9      	lsls	r1, r3, #19
 80477b4:	4b6c      	ldr	r3, [pc, #432]	@ (8047968 <USB_EPStartXfer+0x2ec>)
 80477b6:	400b      	ands	r3, r1
 80477b8:	69b9      	ldr	r1, [r7, #24]
 80477ba:	0148      	lsls	r0, r1, #5
 80477bc:	69f9      	ldr	r1, [r7, #28]
 80477be:	4401      	add	r1, r0
 80477c0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80477c4:	4313      	orrs	r3, r2
 80477c6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80477c8:	68bb      	ldr	r3, [r7, #8]
 80477ca:	791b      	ldrb	r3, [r3, #4]
 80477cc:	2b01      	cmp	r3, #1
 80477ce:	d122      	bne.n	8047816 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80477d0:	69bb      	ldr	r3, [r7, #24]
 80477d2:	015a      	lsls	r2, r3, #5
 80477d4:	69fb      	ldr	r3, [r7, #28]
 80477d6:	4413      	add	r3, r2
 80477d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80477dc:	691b      	ldr	r3, [r3, #16]
 80477de:	69ba      	ldr	r2, [r7, #24]
 80477e0:	0151      	lsls	r1, r2, #5
 80477e2:	69fa      	ldr	r2, [r7, #28]
 80477e4:	440a      	add	r2, r1
 80477e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80477ea:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80477ee:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80477f0:	69bb      	ldr	r3, [r7, #24]
 80477f2:	015a      	lsls	r2, r3, #5
 80477f4:	69fb      	ldr	r3, [r7, #28]
 80477f6:	4413      	add	r3, r2
 80477f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80477fc:	691a      	ldr	r2, [r3, #16]
 80477fe:	8afb      	ldrh	r3, [r7, #22]
 8047800:	075b      	lsls	r3, r3, #29
 8047802:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8047806:	69b9      	ldr	r1, [r7, #24]
 8047808:	0148      	lsls	r0, r1, #5
 804780a:	69f9      	ldr	r1, [r7, #28]
 804780c:	4401      	add	r1, r0
 804780e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8047812:	4313      	orrs	r3, r2
 8047814:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8047816:	69bb      	ldr	r3, [r7, #24]
 8047818:	015a      	lsls	r2, r3, #5
 804781a:	69fb      	ldr	r3, [r7, #28]
 804781c:	4413      	add	r3, r2
 804781e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047822:	691a      	ldr	r2, [r3, #16]
 8047824:	68bb      	ldr	r3, [r7, #8]
 8047826:	691b      	ldr	r3, [r3, #16]
 8047828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 804782c:	69b9      	ldr	r1, [r7, #24]
 804782e:	0148      	lsls	r0, r1, #5
 8047830:	69f9      	ldr	r1, [r7, #28]
 8047832:	4401      	add	r1, r0
 8047834:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8047838:	4313      	orrs	r3, r2
 804783a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 804783c:	79fb      	ldrb	r3, [r7, #7]
 804783e:	2b01      	cmp	r3, #1
 8047840:	d14b      	bne.n	80478da <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8047842:	68bb      	ldr	r3, [r7, #8]
 8047844:	69db      	ldr	r3, [r3, #28]
 8047846:	2b00      	cmp	r3, #0
 8047848:	d009      	beq.n	804785e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 804784a:	69bb      	ldr	r3, [r7, #24]
 804784c:	015a      	lsls	r2, r3, #5
 804784e:	69fb      	ldr	r3, [r7, #28]
 8047850:	4413      	add	r3, r2
 8047852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047856:	461a      	mov	r2, r3
 8047858:	68bb      	ldr	r3, [r7, #8]
 804785a:	69db      	ldr	r3, [r3, #28]
 804785c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 804785e:	68bb      	ldr	r3, [r7, #8]
 8047860:	791b      	ldrb	r3, [r3, #4]
 8047862:	2b01      	cmp	r3, #1
 8047864:	d128      	bne.n	80478b8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8047866:	69fb      	ldr	r3, [r7, #28]
 8047868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804786c:	689b      	ldr	r3, [r3, #8]
 804786e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8047872:	2b00      	cmp	r3, #0
 8047874:	d110      	bne.n	8047898 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8047876:	69bb      	ldr	r3, [r7, #24]
 8047878:	015a      	lsls	r2, r3, #5
 804787a:	69fb      	ldr	r3, [r7, #28]
 804787c:	4413      	add	r3, r2
 804787e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047882:	681b      	ldr	r3, [r3, #0]
 8047884:	69ba      	ldr	r2, [r7, #24]
 8047886:	0151      	lsls	r1, r2, #5
 8047888:	69fa      	ldr	r2, [r7, #28]
 804788a:	440a      	add	r2, r1
 804788c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047890:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8047894:	6013      	str	r3, [r2, #0]
 8047896:	e00f      	b.n	80478b8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8047898:	69bb      	ldr	r3, [r7, #24]
 804789a:	015a      	lsls	r2, r3, #5
 804789c:	69fb      	ldr	r3, [r7, #28]
 804789e:	4413      	add	r3, r2
 80478a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80478a4:	681b      	ldr	r3, [r3, #0]
 80478a6:	69ba      	ldr	r2, [r7, #24]
 80478a8:	0151      	lsls	r1, r2, #5
 80478aa:	69fa      	ldr	r2, [r7, #28]
 80478ac:	440a      	add	r2, r1
 80478ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80478b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80478b6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80478b8:	69bb      	ldr	r3, [r7, #24]
 80478ba:	015a      	lsls	r2, r3, #5
 80478bc:	69fb      	ldr	r3, [r7, #28]
 80478be:	4413      	add	r3, r2
 80478c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80478c4:	681b      	ldr	r3, [r3, #0]
 80478c6:	69ba      	ldr	r2, [r7, #24]
 80478c8:	0151      	lsls	r1, r2, #5
 80478ca:	69fa      	ldr	r2, [r7, #28]
 80478cc:	440a      	add	r2, r1
 80478ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80478d2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80478d6:	6013      	str	r3, [r2, #0]
 80478d8:	e169      	b.n	8047bae <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80478da:	69bb      	ldr	r3, [r7, #24]
 80478dc:	015a      	lsls	r2, r3, #5
 80478de:	69fb      	ldr	r3, [r7, #28]
 80478e0:	4413      	add	r3, r2
 80478e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80478e6:	681b      	ldr	r3, [r3, #0]
 80478e8:	69ba      	ldr	r2, [r7, #24]
 80478ea:	0151      	lsls	r1, r2, #5
 80478ec:	69fa      	ldr	r2, [r7, #28]
 80478ee:	440a      	add	r2, r1
 80478f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80478f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80478f8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80478fa:	68bb      	ldr	r3, [r7, #8]
 80478fc:	791b      	ldrb	r3, [r3, #4]
 80478fe:	2b01      	cmp	r3, #1
 8047900:	d015      	beq.n	804792e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8047902:	68bb      	ldr	r3, [r7, #8]
 8047904:	691b      	ldr	r3, [r3, #16]
 8047906:	2b00      	cmp	r3, #0
 8047908:	f000 8151 	beq.w	8047bae <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 804790c:	69fb      	ldr	r3, [r7, #28]
 804790e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047912:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8047914:	68bb      	ldr	r3, [r7, #8]
 8047916:	781b      	ldrb	r3, [r3, #0]
 8047918:	f003 030f 	and.w	r3, r3, #15
 804791c:	2101      	movs	r1, #1
 804791e:	fa01 f303 	lsl.w	r3, r1, r3
 8047922:	69f9      	ldr	r1, [r7, #28]
 8047924:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8047928:	4313      	orrs	r3, r2
 804792a:	634b      	str	r3, [r1, #52]	@ 0x34
 804792c:	e13f      	b.n	8047bae <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 804792e:	69fb      	ldr	r3, [r7, #28]
 8047930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047934:	689b      	ldr	r3, [r3, #8]
 8047936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804793a:	2b00      	cmp	r3, #0
 804793c:	d116      	bne.n	804796c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 804793e:	69bb      	ldr	r3, [r7, #24]
 8047940:	015a      	lsls	r2, r3, #5
 8047942:	69fb      	ldr	r3, [r7, #28]
 8047944:	4413      	add	r3, r2
 8047946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804794a:	681b      	ldr	r3, [r3, #0]
 804794c:	69ba      	ldr	r2, [r7, #24]
 804794e:	0151      	lsls	r1, r2, #5
 8047950:	69fa      	ldr	r2, [r7, #28]
 8047952:	440a      	add	r2, r1
 8047954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047958:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 804795c:	6013      	str	r3, [r2, #0]
 804795e:	e015      	b.n	804798c <USB_EPStartXfer+0x310>
 8047960:	e007ffff 	.word	0xe007ffff
 8047964:	fff80000 	.word	0xfff80000
 8047968:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 804796c:	69bb      	ldr	r3, [r7, #24]
 804796e:	015a      	lsls	r2, r3, #5
 8047970:	69fb      	ldr	r3, [r7, #28]
 8047972:	4413      	add	r3, r2
 8047974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047978:	681b      	ldr	r3, [r3, #0]
 804797a:	69ba      	ldr	r2, [r7, #24]
 804797c:	0151      	lsls	r1, r2, #5
 804797e:	69fa      	ldr	r2, [r7, #28]
 8047980:	440a      	add	r2, r1
 8047982:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 804798a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 804798c:	68bb      	ldr	r3, [r7, #8]
 804798e:	68d9      	ldr	r1, [r3, #12]
 8047990:	68bb      	ldr	r3, [r7, #8]
 8047992:	781a      	ldrb	r2, [r3, #0]
 8047994:	68bb      	ldr	r3, [r7, #8]
 8047996:	691b      	ldr	r3, [r3, #16]
 8047998:	b298      	uxth	r0, r3
 804799a:	79fb      	ldrb	r3, [r7, #7]
 804799c:	9300      	str	r3, [sp, #0]
 804799e:	4603      	mov	r3, r0
 80479a0:	68f8      	ldr	r0, [r7, #12]
 80479a2:	f000 f9b9 	bl	8047d18 <USB_WritePacket>
 80479a6:	e102      	b.n	8047bae <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80479a8:	69bb      	ldr	r3, [r7, #24]
 80479aa:	015a      	lsls	r2, r3, #5
 80479ac:	69fb      	ldr	r3, [r7, #28]
 80479ae:	4413      	add	r3, r2
 80479b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80479b4:	691a      	ldr	r2, [r3, #16]
 80479b6:	69bb      	ldr	r3, [r7, #24]
 80479b8:	0159      	lsls	r1, r3, #5
 80479ba:	69fb      	ldr	r3, [r7, #28]
 80479bc:	440b      	add	r3, r1
 80479be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80479c2:	4619      	mov	r1, r3
 80479c4:	4b7c      	ldr	r3, [pc, #496]	@ (8047bb8 <USB_EPStartXfer+0x53c>)
 80479c6:	4013      	ands	r3, r2
 80479c8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80479ca:	69bb      	ldr	r3, [r7, #24]
 80479cc:	015a      	lsls	r2, r3, #5
 80479ce:	69fb      	ldr	r3, [r7, #28]
 80479d0:	4413      	add	r3, r2
 80479d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80479d6:	691a      	ldr	r2, [r3, #16]
 80479d8:	69bb      	ldr	r3, [r7, #24]
 80479da:	0159      	lsls	r1, r3, #5
 80479dc:	69fb      	ldr	r3, [r7, #28]
 80479de:	440b      	add	r3, r1
 80479e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80479e4:	4619      	mov	r1, r3
 80479e6:	4b75      	ldr	r3, [pc, #468]	@ (8047bbc <USB_EPStartXfer+0x540>)
 80479e8:	4013      	ands	r3, r2
 80479ea:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80479ec:	69bb      	ldr	r3, [r7, #24]
 80479ee:	2b00      	cmp	r3, #0
 80479f0:	d12f      	bne.n	8047a52 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80479f2:	68bb      	ldr	r3, [r7, #8]
 80479f4:	691b      	ldr	r3, [r3, #16]
 80479f6:	2b00      	cmp	r3, #0
 80479f8:	d003      	beq.n	8047a02 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80479fa:	68bb      	ldr	r3, [r7, #8]
 80479fc:	689a      	ldr	r2, [r3, #8]
 80479fe:	68bb      	ldr	r3, [r7, #8]
 8047a00:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8047a02:	68bb      	ldr	r3, [r7, #8]
 8047a04:	689a      	ldr	r2, [r3, #8]
 8047a06:	68bb      	ldr	r3, [r7, #8]
 8047a08:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8047a0a:	69bb      	ldr	r3, [r7, #24]
 8047a0c:	015a      	lsls	r2, r3, #5
 8047a0e:	69fb      	ldr	r3, [r7, #28]
 8047a10:	4413      	add	r3, r2
 8047a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047a16:	691a      	ldr	r2, [r3, #16]
 8047a18:	68bb      	ldr	r3, [r7, #8]
 8047a1a:	6a1b      	ldr	r3, [r3, #32]
 8047a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047a20:	69b9      	ldr	r1, [r7, #24]
 8047a22:	0148      	lsls	r0, r1, #5
 8047a24:	69f9      	ldr	r1, [r7, #28]
 8047a26:	4401      	add	r1, r0
 8047a28:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8047a2c:	4313      	orrs	r3, r2
 8047a2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8047a30:	69bb      	ldr	r3, [r7, #24]
 8047a32:	015a      	lsls	r2, r3, #5
 8047a34:	69fb      	ldr	r3, [r7, #28]
 8047a36:	4413      	add	r3, r2
 8047a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047a3c:	691b      	ldr	r3, [r3, #16]
 8047a3e:	69ba      	ldr	r2, [r7, #24]
 8047a40:	0151      	lsls	r1, r2, #5
 8047a42:	69fa      	ldr	r2, [r7, #28]
 8047a44:	440a      	add	r2, r1
 8047a46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047a4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8047a4e:	6113      	str	r3, [r2, #16]
 8047a50:	e05f      	b.n	8047b12 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8047a52:	68bb      	ldr	r3, [r7, #8]
 8047a54:	691b      	ldr	r3, [r3, #16]
 8047a56:	2b00      	cmp	r3, #0
 8047a58:	d123      	bne.n	8047aa2 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8047a5a:	69bb      	ldr	r3, [r7, #24]
 8047a5c:	015a      	lsls	r2, r3, #5
 8047a5e:	69fb      	ldr	r3, [r7, #28]
 8047a60:	4413      	add	r3, r2
 8047a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047a66:	691a      	ldr	r2, [r3, #16]
 8047a68:	68bb      	ldr	r3, [r7, #8]
 8047a6a:	689b      	ldr	r3, [r3, #8]
 8047a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047a70:	69b9      	ldr	r1, [r7, #24]
 8047a72:	0148      	lsls	r0, r1, #5
 8047a74:	69f9      	ldr	r1, [r7, #28]
 8047a76:	4401      	add	r1, r0
 8047a78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8047a7c:	4313      	orrs	r3, r2
 8047a7e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8047a80:	69bb      	ldr	r3, [r7, #24]
 8047a82:	015a      	lsls	r2, r3, #5
 8047a84:	69fb      	ldr	r3, [r7, #28]
 8047a86:	4413      	add	r3, r2
 8047a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047a8c:	691b      	ldr	r3, [r3, #16]
 8047a8e:	69ba      	ldr	r2, [r7, #24]
 8047a90:	0151      	lsls	r1, r2, #5
 8047a92:	69fa      	ldr	r2, [r7, #28]
 8047a94:	440a      	add	r2, r1
 8047a96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047a9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8047a9e:	6113      	str	r3, [r2, #16]
 8047aa0:	e037      	b.n	8047b12 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8047aa2:	68bb      	ldr	r3, [r7, #8]
 8047aa4:	691a      	ldr	r2, [r3, #16]
 8047aa6:	68bb      	ldr	r3, [r7, #8]
 8047aa8:	689b      	ldr	r3, [r3, #8]
 8047aaa:	4413      	add	r3, r2
 8047aac:	1e5a      	subs	r2, r3, #1
 8047aae:	68bb      	ldr	r3, [r7, #8]
 8047ab0:	689b      	ldr	r3, [r3, #8]
 8047ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8047ab6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8047ab8:	68bb      	ldr	r3, [r7, #8]
 8047aba:	689b      	ldr	r3, [r3, #8]
 8047abc:	8afa      	ldrh	r2, [r7, #22]
 8047abe:	fb03 f202 	mul.w	r2, r3, r2
 8047ac2:	68bb      	ldr	r3, [r7, #8]
 8047ac4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8047ac6:	69bb      	ldr	r3, [r7, #24]
 8047ac8:	015a      	lsls	r2, r3, #5
 8047aca:	69fb      	ldr	r3, [r7, #28]
 8047acc:	4413      	add	r3, r2
 8047ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047ad2:	691a      	ldr	r2, [r3, #16]
 8047ad4:	8afb      	ldrh	r3, [r7, #22]
 8047ad6:	04d9      	lsls	r1, r3, #19
 8047ad8:	4b39      	ldr	r3, [pc, #228]	@ (8047bc0 <USB_EPStartXfer+0x544>)
 8047ada:	400b      	ands	r3, r1
 8047adc:	69b9      	ldr	r1, [r7, #24]
 8047ade:	0148      	lsls	r0, r1, #5
 8047ae0:	69f9      	ldr	r1, [r7, #28]
 8047ae2:	4401      	add	r1, r0
 8047ae4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8047ae8:	4313      	orrs	r3, r2
 8047aea:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8047aec:	69bb      	ldr	r3, [r7, #24]
 8047aee:	015a      	lsls	r2, r3, #5
 8047af0:	69fb      	ldr	r3, [r7, #28]
 8047af2:	4413      	add	r3, r2
 8047af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047af8:	691a      	ldr	r2, [r3, #16]
 8047afa:	68bb      	ldr	r3, [r7, #8]
 8047afc:	6a1b      	ldr	r3, [r3, #32]
 8047afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047b02:	69b9      	ldr	r1, [r7, #24]
 8047b04:	0148      	lsls	r0, r1, #5
 8047b06:	69f9      	ldr	r1, [r7, #28]
 8047b08:	4401      	add	r1, r0
 8047b0a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8047b0e:	4313      	orrs	r3, r2
 8047b10:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8047b12:	79fb      	ldrb	r3, [r7, #7]
 8047b14:	2b01      	cmp	r3, #1
 8047b16:	d10d      	bne.n	8047b34 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8047b18:	68bb      	ldr	r3, [r7, #8]
 8047b1a:	68db      	ldr	r3, [r3, #12]
 8047b1c:	2b00      	cmp	r3, #0
 8047b1e:	d009      	beq.n	8047b34 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8047b20:	68bb      	ldr	r3, [r7, #8]
 8047b22:	68d9      	ldr	r1, [r3, #12]
 8047b24:	69bb      	ldr	r3, [r7, #24]
 8047b26:	015a      	lsls	r2, r3, #5
 8047b28:	69fb      	ldr	r3, [r7, #28]
 8047b2a:	4413      	add	r3, r2
 8047b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047b30:	460a      	mov	r2, r1
 8047b32:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8047b34:	68bb      	ldr	r3, [r7, #8]
 8047b36:	791b      	ldrb	r3, [r3, #4]
 8047b38:	2b01      	cmp	r3, #1
 8047b3a:	d128      	bne.n	8047b8e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8047b3c:	69fb      	ldr	r3, [r7, #28]
 8047b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047b42:	689b      	ldr	r3, [r3, #8]
 8047b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8047b48:	2b00      	cmp	r3, #0
 8047b4a:	d110      	bne.n	8047b6e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8047b4c:	69bb      	ldr	r3, [r7, #24]
 8047b4e:	015a      	lsls	r2, r3, #5
 8047b50:	69fb      	ldr	r3, [r7, #28]
 8047b52:	4413      	add	r3, r2
 8047b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047b58:	681b      	ldr	r3, [r3, #0]
 8047b5a:	69ba      	ldr	r2, [r7, #24]
 8047b5c:	0151      	lsls	r1, r2, #5
 8047b5e:	69fa      	ldr	r2, [r7, #28]
 8047b60:	440a      	add	r2, r1
 8047b62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047b66:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8047b6a:	6013      	str	r3, [r2, #0]
 8047b6c:	e00f      	b.n	8047b8e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8047b6e:	69bb      	ldr	r3, [r7, #24]
 8047b70:	015a      	lsls	r2, r3, #5
 8047b72:	69fb      	ldr	r3, [r7, #28]
 8047b74:	4413      	add	r3, r2
 8047b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047b7a:	681b      	ldr	r3, [r3, #0]
 8047b7c:	69ba      	ldr	r2, [r7, #24]
 8047b7e:	0151      	lsls	r1, r2, #5
 8047b80:	69fa      	ldr	r2, [r7, #28]
 8047b82:	440a      	add	r2, r1
 8047b84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8047b8c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8047b8e:	69bb      	ldr	r3, [r7, #24]
 8047b90:	015a      	lsls	r2, r3, #5
 8047b92:	69fb      	ldr	r3, [r7, #28]
 8047b94:	4413      	add	r3, r2
 8047b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047b9a:	681b      	ldr	r3, [r3, #0]
 8047b9c:	69ba      	ldr	r2, [r7, #24]
 8047b9e:	0151      	lsls	r1, r2, #5
 8047ba0:	69fa      	ldr	r2, [r7, #28]
 8047ba2:	440a      	add	r2, r1
 8047ba4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047ba8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8047bac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8047bae:	2300      	movs	r3, #0
}
 8047bb0:	4618      	mov	r0, r3
 8047bb2:	3720      	adds	r7, #32
 8047bb4:	46bd      	mov	sp, r7
 8047bb6:	bd80      	pop	{r7, pc}
 8047bb8:	fff80000 	.word	0xfff80000
 8047bbc:	e007ffff 	.word	0xe007ffff
 8047bc0:	1ff80000 	.word	0x1ff80000

08047bc4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8047bc4:	b480      	push	{r7}
 8047bc6:	b087      	sub	sp, #28
 8047bc8:	af00      	add	r7, sp, #0
 8047bca:	6078      	str	r0, [r7, #4]
 8047bcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8047bce:	2300      	movs	r3, #0
 8047bd0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8047bd2:	2300      	movs	r3, #0
 8047bd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047bd6:	687b      	ldr	r3, [r7, #4]
 8047bd8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8047bda:	683b      	ldr	r3, [r7, #0]
 8047bdc:	785b      	ldrb	r3, [r3, #1]
 8047bde:	2b01      	cmp	r3, #1
 8047be0:	d14a      	bne.n	8047c78 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8047be2:	683b      	ldr	r3, [r7, #0]
 8047be4:	781b      	ldrb	r3, [r3, #0]
 8047be6:	015a      	lsls	r2, r3, #5
 8047be8:	693b      	ldr	r3, [r7, #16]
 8047bea:	4413      	add	r3, r2
 8047bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047bf0:	681b      	ldr	r3, [r3, #0]
 8047bf2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047bfa:	f040 8086 	bne.w	8047d0a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8047bfe:	683b      	ldr	r3, [r7, #0]
 8047c00:	781b      	ldrb	r3, [r3, #0]
 8047c02:	015a      	lsls	r2, r3, #5
 8047c04:	693b      	ldr	r3, [r7, #16]
 8047c06:	4413      	add	r3, r2
 8047c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047c0c:	681b      	ldr	r3, [r3, #0]
 8047c0e:	683a      	ldr	r2, [r7, #0]
 8047c10:	7812      	ldrb	r2, [r2, #0]
 8047c12:	0151      	lsls	r1, r2, #5
 8047c14:	693a      	ldr	r2, [r7, #16]
 8047c16:	440a      	add	r2, r1
 8047c18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047c1c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8047c20:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8047c22:	683b      	ldr	r3, [r7, #0]
 8047c24:	781b      	ldrb	r3, [r3, #0]
 8047c26:	015a      	lsls	r2, r3, #5
 8047c28:	693b      	ldr	r3, [r7, #16]
 8047c2a:	4413      	add	r3, r2
 8047c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047c30:	681b      	ldr	r3, [r3, #0]
 8047c32:	683a      	ldr	r2, [r7, #0]
 8047c34:	7812      	ldrb	r2, [r2, #0]
 8047c36:	0151      	lsls	r1, r2, #5
 8047c38:	693a      	ldr	r2, [r7, #16]
 8047c3a:	440a      	add	r2, r1
 8047c3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047c40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8047c44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8047c46:	68fb      	ldr	r3, [r7, #12]
 8047c48:	3301      	adds	r3, #1
 8047c4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8047c4c:	68fb      	ldr	r3, [r7, #12]
 8047c4e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8047c52:	4293      	cmp	r3, r2
 8047c54:	d902      	bls.n	8047c5c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8047c56:	2301      	movs	r3, #1
 8047c58:	75fb      	strb	r3, [r7, #23]
          break;
 8047c5a:	e056      	b.n	8047d0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8047c5c:	683b      	ldr	r3, [r7, #0]
 8047c5e:	781b      	ldrb	r3, [r3, #0]
 8047c60:	015a      	lsls	r2, r3, #5
 8047c62:	693b      	ldr	r3, [r7, #16]
 8047c64:	4413      	add	r3, r2
 8047c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047c6a:	681b      	ldr	r3, [r3, #0]
 8047c6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047c70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047c74:	d0e7      	beq.n	8047c46 <USB_EPStopXfer+0x82>
 8047c76:	e048      	b.n	8047d0a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8047c78:	683b      	ldr	r3, [r7, #0]
 8047c7a:	781b      	ldrb	r3, [r3, #0]
 8047c7c:	015a      	lsls	r2, r3, #5
 8047c7e:	693b      	ldr	r3, [r7, #16]
 8047c80:	4413      	add	r3, r2
 8047c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047c86:	681b      	ldr	r3, [r3, #0]
 8047c88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047c90:	d13b      	bne.n	8047d0a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8047c92:	683b      	ldr	r3, [r7, #0]
 8047c94:	781b      	ldrb	r3, [r3, #0]
 8047c96:	015a      	lsls	r2, r3, #5
 8047c98:	693b      	ldr	r3, [r7, #16]
 8047c9a:	4413      	add	r3, r2
 8047c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047ca0:	681b      	ldr	r3, [r3, #0]
 8047ca2:	683a      	ldr	r2, [r7, #0]
 8047ca4:	7812      	ldrb	r2, [r2, #0]
 8047ca6:	0151      	lsls	r1, r2, #5
 8047ca8:	693a      	ldr	r2, [r7, #16]
 8047caa:	440a      	add	r2, r1
 8047cac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047cb0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8047cb4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8047cb6:	683b      	ldr	r3, [r7, #0]
 8047cb8:	781b      	ldrb	r3, [r3, #0]
 8047cba:	015a      	lsls	r2, r3, #5
 8047cbc:	693b      	ldr	r3, [r7, #16]
 8047cbe:	4413      	add	r3, r2
 8047cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047cc4:	681b      	ldr	r3, [r3, #0]
 8047cc6:	683a      	ldr	r2, [r7, #0]
 8047cc8:	7812      	ldrb	r2, [r2, #0]
 8047cca:	0151      	lsls	r1, r2, #5
 8047ccc:	693a      	ldr	r2, [r7, #16]
 8047cce:	440a      	add	r2, r1
 8047cd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047cd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8047cd8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8047cda:	68fb      	ldr	r3, [r7, #12]
 8047cdc:	3301      	adds	r3, #1
 8047cde:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8047ce0:	68fb      	ldr	r3, [r7, #12]
 8047ce2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8047ce6:	4293      	cmp	r3, r2
 8047ce8:	d902      	bls.n	8047cf0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8047cea:	2301      	movs	r3, #1
 8047cec:	75fb      	strb	r3, [r7, #23]
          break;
 8047cee:	e00c      	b.n	8047d0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8047cf0:	683b      	ldr	r3, [r7, #0]
 8047cf2:	781b      	ldrb	r3, [r3, #0]
 8047cf4:	015a      	lsls	r2, r3, #5
 8047cf6:	693b      	ldr	r3, [r7, #16]
 8047cf8:	4413      	add	r3, r2
 8047cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047cfe:	681b      	ldr	r3, [r3, #0]
 8047d00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047d04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047d08:	d0e7      	beq.n	8047cda <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8047d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8047d0c:	4618      	mov	r0, r3
 8047d0e:	371c      	adds	r7, #28
 8047d10:	46bd      	mov	sp, r7
 8047d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047d16:	4770      	bx	lr

08047d18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8047d18:	b480      	push	{r7}
 8047d1a:	b089      	sub	sp, #36	@ 0x24
 8047d1c:	af00      	add	r7, sp, #0
 8047d1e:	60f8      	str	r0, [r7, #12]
 8047d20:	60b9      	str	r1, [r7, #8]
 8047d22:	4611      	mov	r1, r2
 8047d24:	461a      	mov	r2, r3
 8047d26:	460b      	mov	r3, r1
 8047d28:	71fb      	strb	r3, [r7, #7]
 8047d2a:	4613      	mov	r3, r2
 8047d2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047d2e:	68fb      	ldr	r3, [r7, #12]
 8047d30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8047d32:	68bb      	ldr	r3, [r7, #8]
 8047d34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8047d36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8047d3a:	2b00      	cmp	r3, #0
 8047d3c:	d123      	bne.n	8047d86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8047d3e:	88bb      	ldrh	r3, [r7, #4]
 8047d40:	3303      	adds	r3, #3
 8047d42:	089b      	lsrs	r3, r3, #2
 8047d44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8047d46:	2300      	movs	r3, #0
 8047d48:	61bb      	str	r3, [r7, #24]
 8047d4a:	e018      	b.n	8047d7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8047d4c:	79fb      	ldrb	r3, [r7, #7]
 8047d4e:	031a      	lsls	r2, r3, #12
 8047d50:	697b      	ldr	r3, [r7, #20]
 8047d52:	4413      	add	r3, r2
 8047d54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8047d58:	461a      	mov	r2, r3
 8047d5a:	69fb      	ldr	r3, [r7, #28]
 8047d5c:	681b      	ldr	r3, [r3, #0]
 8047d5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8047d60:	69fb      	ldr	r3, [r7, #28]
 8047d62:	3301      	adds	r3, #1
 8047d64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8047d66:	69fb      	ldr	r3, [r7, #28]
 8047d68:	3301      	adds	r3, #1
 8047d6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8047d6c:	69fb      	ldr	r3, [r7, #28]
 8047d6e:	3301      	adds	r3, #1
 8047d70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8047d72:	69fb      	ldr	r3, [r7, #28]
 8047d74:	3301      	adds	r3, #1
 8047d76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8047d78:	69bb      	ldr	r3, [r7, #24]
 8047d7a:	3301      	adds	r3, #1
 8047d7c:	61bb      	str	r3, [r7, #24]
 8047d7e:	69ba      	ldr	r2, [r7, #24]
 8047d80:	693b      	ldr	r3, [r7, #16]
 8047d82:	429a      	cmp	r2, r3
 8047d84:	d3e2      	bcc.n	8047d4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8047d86:	2300      	movs	r3, #0
}
 8047d88:	4618      	mov	r0, r3
 8047d8a:	3724      	adds	r7, #36	@ 0x24
 8047d8c:	46bd      	mov	sp, r7
 8047d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047d92:	4770      	bx	lr

08047d94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8047d94:	b480      	push	{r7}
 8047d96:	b08b      	sub	sp, #44	@ 0x2c
 8047d98:	af00      	add	r7, sp, #0
 8047d9a:	60f8      	str	r0, [r7, #12]
 8047d9c:	60b9      	str	r1, [r7, #8]
 8047d9e:	4613      	mov	r3, r2
 8047da0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047da2:	68fb      	ldr	r3, [r7, #12]
 8047da4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8047da6:	68bb      	ldr	r3, [r7, #8]
 8047da8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8047daa:	88fb      	ldrh	r3, [r7, #6]
 8047dac:	089b      	lsrs	r3, r3, #2
 8047dae:	b29b      	uxth	r3, r3
 8047db0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8047db2:	88fb      	ldrh	r3, [r7, #6]
 8047db4:	f003 0303 	and.w	r3, r3, #3
 8047db8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8047dba:	2300      	movs	r3, #0
 8047dbc:	623b      	str	r3, [r7, #32]
 8047dbe:	e014      	b.n	8047dea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8047dc0:	69bb      	ldr	r3, [r7, #24]
 8047dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8047dc6:	681a      	ldr	r2, [r3, #0]
 8047dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047dca:	601a      	str	r2, [r3, #0]
    pDest++;
 8047dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047dce:	3301      	adds	r3, #1
 8047dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8047dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047dd4:	3301      	adds	r3, #1
 8047dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8047dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047dda:	3301      	adds	r3, #1
 8047ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8047dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047de0:	3301      	adds	r3, #1
 8047de2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8047de4:	6a3b      	ldr	r3, [r7, #32]
 8047de6:	3301      	adds	r3, #1
 8047de8:	623b      	str	r3, [r7, #32]
 8047dea:	6a3a      	ldr	r2, [r7, #32]
 8047dec:	697b      	ldr	r3, [r7, #20]
 8047dee:	429a      	cmp	r2, r3
 8047df0:	d3e6      	bcc.n	8047dc0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8047df2:	8bfb      	ldrh	r3, [r7, #30]
 8047df4:	2b00      	cmp	r3, #0
 8047df6:	d01e      	beq.n	8047e36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8047df8:	2300      	movs	r3, #0
 8047dfa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8047dfc:	69bb      	ldr	r3, [r7, #24]
 8047dfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8047e02:	461a      	mov	r2, r3
 8047e04:	f107 0310 	add.w	r3, r7, #16
 8047e08:	6812      	ldr	r2, [r2, #0]
 8047e0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8047e0c:	693a      	ldr	r2, [r7, #16]
 8047e0e:	6a3b      	ldr	r3, [r7, #32]
 8047e10:	b2db      	uxtb	r3, r3
 8047e12:	00db      	lsls	r3, r3, #3
 8047e14:	fa22 f303 	lsr.w	r3, r2, r3
 8047e18:	b2da      	uxtb	r2, r3
 8047e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047e1c:	701a      	strb	r2, [r3, #0]
      i++;
 8047e1e:	6a3b      	ldr	r3, [r7, #32]
 8047e20:	3301      	adds	r3, #1
 8047e22:	623b      	str	r3, [r7, #32]
      pDest++;
 8047e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047e26:	3301      	adds	r3, #1
 8047e28:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8047e2a:	8bfb      	ldrh	r3, [r7, #30]
 8047e2c:	3b01      	subs	r3, #1
 8047e2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8047e30:	8bfb      	ldrh	r3, [r7, #30]
 8047e32:	2b00      	cmp	r3, #0
 8047e34:	d1ea      	bne.n	8047e0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8047e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8047e38:	4618      	mov	r0, r3
 8047e3a:	372c      	adds	r7, #44	@ 0x2c
 8047e3c:	46bd      	mov	sp, r7
 8047e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047e42:	4770      	bx	lr

08047e44 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8047e44:	b480      	push	{r7}
 8047e46:	b085      	sub	sp, #20
 8047e48:	af00      	add	r7, sp, #0
 8047e4a:	6078      	str	r0, [r7, #4]
 8047e4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047e4e:	687b      	ldr	r3, [r7, #4]
 8047e50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8047e52:	683b      	ldr	r3, [r7, #0]
 8047e54:	781b      	ldrb	r3, [r3, #0]
 8047e56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8047e58:	683b      	ldr	r3, [r7, #0]
 8047e5a:	785b      	ldrb	r3, [r3, #1]
 8047e5c:	2b01      	cmp	r3, #1
 8047e5e:	d12c      	bne.n	8047eba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8047e60:	68bb      	ldr	r3, [r7, #8]
 8047e62:	015a      	lsls	r2, r3, #5
 8047e64:	68fb      	ldr	r3, [r7, #12]
 8047e66:	4413      	add	r3, r2
 8047e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047e6c:	681b      	ldr	r3, [r3, #0]
 8047e6e:	2b00      	cmp	r3, #0
 8047e70:	db12      	blt.n	8047e98 <USB_EPSetStall+0x54>
 8047e72:	68bb      	ldr	r3, [r7, #8]
 8047e74:	2b00      	cmp	r3, #0
 8047e76:	d00f      	beq.n	8047e98 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8047e78:	68bb      	ldr	r3, [r7, #8]
 8047e7a:	015a      	lsls	r2, r3, #5
 8047e7c:	68fb      	ldr	r3, [r7, #12]
 8047e7e:	4413      	add	r3, r2
 8047e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047e84:	681b      	ldr	r3, [r3, #0]
 8047e86:	68ba      	ldr	r2, [r7, #8]
 8047e88:	0151      	lsls	r1, r2, #5
 8047e8a:	68fa      	ldr	r2, [r7, #12]
 8047e8c:	440a      	add	r2, r1
 8047e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047e92:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8047e96:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8047e98:	68bb      	ldr	r3, [r7, #8]
 8047e9a:	015a      	lsls	r2, r3, #5
 8047e9c:	68fb      	ldr	r3, [r7, #12]
 8047e9e:	4413      	add	r3, r2
 8047ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047ea4:	681b      	ldr	r3, [r3, #0]
 8047ea6:	68ba      	ldr	r2, [r7, #8]
 8047ea8:	0151      	lsls	r1, r2, #5
 8047eaa:	68fa      	ldr	r2, [r7, #12]
 8047eac:	440a      	add	r2, r1
 8047eae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047eb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8047eb6:	6013      	str	r3, [r2, #0]
 8047eb8:	e02b      	b.n	8047f12 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8047eba:	68bb      	ldr	r3, [r7, #8]
 8047ebc:	015a      	lsls	r2, r3, #5
 8047ebe:	68fb      	ldr	r3, [r7, #12]
 8047ec0:	4413      	add	r3, r2
 8047ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047ec6:	681b      	ldr	r3, [r3, #0]
 8047ec8:	2b00      	cmp	r3, #0
 8047eca:	db12      	blt.n	8047ef2 <USB_EPSetStall+0xae>
 8047ecc:	68bb      	ldr	r3, [r7, #8]
 8047ece:	2b00      	cmp	r3, #0
 8047ed0:	d00f      	beq.n	8047ef2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8047ed2:	68bb      	ldr	r3, [r7, #8]
 8047ed4:	015a      	lsls	r2, r3, #5
 8047ed6:	68fb      	ldr	r3, [r7, #12]
 8047ed8:	4413      	add	r3, r2
 8047eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047ede:	681b      	ldr	r3, [r3, #0]
 8047ee0:	68ba      	ldr	r2, [r7, #8]
 8047ee2:	0151      	lsls	r1, r2, #5
 8047ee4:	68fa      	ldr	r2, [r7, #12]
 8047ee6:	440a      	add	r2, r1
 8047ee8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047eec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8047ef0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8047ef2:	68bb      	ldr	r3, [r7, #8]
 8047ef4:	015a      	lsls	r2, r3, #5
 8047ef6:	68fb      	ldr	r3, [r7, #12]
 8047ef8:	4413      	add	r3, r2
 8047efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047efe:	681b      	ldr	r3, [r3, #0]
 8047f00:	68ba      	ldr	r2, [r7, #8]
 8047f02:	0151      	lsls	r1, r2, #5
 8047f04:	68fa      	ldr	r2, [r7, #12]
 8047f06:	440a      	add	r2, r1
 8047f08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047f0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8047f10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8047f12:	2300      	movs	r3, #0
}
 8047f14:	4618      	mov	r0, r3
 8047f16:	3714      	adds	r7, #20
 8047f18:	46bd      	mov	sp, r7
 8047f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047f1e:	4770      	bx	lr

08047f20 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8047f20:	b480      	push	{r7}
 8047f22:	b085      	sub	sp, #20
 8047f24:	af00      	add	r7, sp, #0
 8047f26:	6078      	str	r0, [r7, #4]
 8047f28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047f2a:	687b      	ldr	r3, [r7, #4]
 8047f2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8047f2e:	683b      	ldr	r3, [r7, #0]
 8047f30:	781b      	ldrb	r3, [r3, #0]
 8047f32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8047f34:	683b      	ldr	r3, [r7, #0]
 8047f36:	785b      	ldrb	r3, [r3, #1]
 8047f38:	2b01      	cmp	r3, #1
 8047f3a:	d128      	bne.n	8047f8e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8047f3c:	68bb      	ldr	r3, [r7, #8]
 8047f3e:	015a      	lsls	r2, r3, #5
 8047f40:	68fb      	ldr	r3, [r7, #12]
 8047f42:	4413      	add	r3, r2
 8047f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047f48:	681b      	ldr	r3, [r3, #0]
 8047f4a:	68ba      	ldr	r2, [r7, #8]
 8047f4c:	0151      	lsls	r1, r2, #5
 8047f4e:	68fa      	ldr	r2, [r7, #12]
 8047f50:	440a      	add	r2, r1
 8047f52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047f56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8047f5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8047f5c:	683b      	ldr	r3, [r7, #0]
 8047f5e:	791b      	ldrb	r3, [r3, #4]
 8047f60:	2b03      	cmp	r3, #3
 8047f62:	d003      	beq.n	8047f6c <USB_EPClearStall+0x4c>
 8047f64:	683b      	ldr	r3, [r7, #0]
 8047f66:	791b      	ldrb	r3, [r3, #4]
 8047f68:	2b02      	cmp	r3, #2
 8047f6a:	d138      	bne.n	8047fde <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8047f6c:	68bb      	ldr	r3, [r7, #8]
 8047f6e:	015a      	lsls	r2, r3, #5
 8047f70:	68fb      	ldr	r3, [r7, #12]
 8047f72:	4413      	add	r3, r2
 8047f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047f78:	681b      	ldr	r3, [r3, #0]
 8047f7a:	68ba      	ldr	r2, [r7, #8]
 8047f7c:	0151      	lsls	r1, r2, #5
 8047f7e:	68fa      	ldr	r2, [r7, #12]
 8047f80:	440a      	add	r2, r1
 8047f82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8047f8a:	6013      	str	r3, [r2, #0]
 8047f8c:	e027      	b.n	8047fde <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8047f8e:	68bb      	ldr	r3, [r7, #8]
 8047f90:	015a      	lsls	r2, r3, #5
 8047f92:	68fb      	ldr	r3, [r7, #12]
 8047f94:	4413      	add	r3, r2
 8047f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047f9a:	681b      	ldr	r3, [r3, #0]
 8047f9c:	68ba      	ldr	r2, [r7, #8]
 8047f9e:	0151      	lsls	r1, r2, #5
 8047fa0:	68fa      	ldr	r2, [r7, #12]
 8047fa2:	440a      	add	r2, r1
 8047fa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047fa8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8047fac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8047fae:	683b      	ldr	r3, [r7, #0]
 8047fb0:	791b      	ldrb	r3, [r3, #4]
 8047fb2:	2b03      	cmp	r3, #3
 8047fb4:	d003      	beq.n	8047fbe <USB_EPClearStall+0x9e>
 8047fb6:	683b      	ldr	r3, [r7, #0]
 8047fb8:	791b      	ldrb	r3, [r3, #4]
 8047fba:	2b02      	cmp	r3, #2
 8047fbc:	d10f      	bne.n	8047fde <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8047fbe:	68bb      	ldr	r3, [r7, #8]
 8047fc0:	015a      	lsls	r2, r3, #5
 8047fc2:	68fb      	ldr	r3, [r7, #12]
 8047fc4:	4413      	add	r3, r2
 8047fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047fca:	681b      	ldr	r3, [r3, #0]
 8047fcc:	68ba      	ldr	r2, [r7, #8]
 8047fce:	0151      	lsls	r1, r2, #5
 8047fd0:	68fa      	ldr	r2, [r7, #12]
 8047fd2:	440a      	add	r2, r1
 8047fd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8047fdc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8047fde:	2300      	movs	r3, #0
}
 8047fe0:	4618      	mov	r0, r3
 8047fe2:	3714      	adds	r7, #20
 8047fe4:	46bd      	mov	sp, r7
 8047fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047fea:	4770      	bx	lr

08047fec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8047fec:	b480      	push	{r7}
 8047fee:	b085      	sub	sp, #20
 8047ff0:	af00      	add	r7, sp, #0
 8047ff2:	6078      	str	r0, [r7, #4]
 8047ff4:	460b      	mov	r3, r1
 8047ff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047ff8:	687b      	ldr	r3, [r7, #4]
 8047ffa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8047ffc:	68fb      	ldr	r3, [r7, #12]
 8047ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048002:	681b      	ldr	r3, [r3, #0]
 8048004:	68fa      	ldr	r2, [r7, #12]
 8048006:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804800a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 804800e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8048010:	68fb      	ldr	r3, [r7, #12]
 8048012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048016:	681a      	ldr	r2, [r3, #0]
 8048018:	78fb      	ldrb	r3, [r7, #3]
 804801a:	011b      	lsls	r3, r3, #4
 804801c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8048020:	68f9      	ldr	r1, [r7, #12]
 8048022:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8048026:	4313      	orrs	r3, r2
 8048028:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 804802a:	2300      	movs	r3, #0
}
 804802c:	4618      	mov	r0, r3
 804802e:	3714      	adds	r7, #20
 8048030:	46bd      	mov	sp, r7
 8048032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048036:	4770      	bx	lr

08048038 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8048038:	b480      	push	{r7}
 804803a:	b085      	sub	sp, #20
 804803c:	af00      	add	r7, sp, #0
 804803e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048040:	687b      	ldr	r3, [r7, #4]
 8048042:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8048044:	68fb      	ldr	r3, [r7, #12]
 8048046:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 804804a:	681b      	ldr	r3, [r3, #0]
 804804c:	68fa      	ldr	r2, [r7, #12]
 804804e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8048052:	f023 0303 	bic.w	r3, r3, #3
 8048056:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8048058:	68fb      	ldr	r3, [r7, #12]
 804805a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804805e:	685b      	ldr	r3, [r3, #4]
 8048060:	68fa      	ldr	r2, [r7, #12]
 8048062:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8048066:	f023 0302 	bic.w	r3, r3, #2
 804806a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 804806c:	2300      	movs	r3, #0
}
 804806e:	4618      	mov	r0, r3
 8048070:	3714      	adds	r7, #20
 8048072:	46bd      	mov	sp, r7
 8048074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048078:	4770      	bx	lr

0804807a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 804807a:	b480      	push	{r7}
 804807c:	b085      	sub	sp, #20
 804807e:	af00      	add	r7, sp, #0
 8048080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048082:	687b      	ldr	r3, [r7, #4]
 8048084:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8048086:	68fb      	ldr	r3, [r7, #12]
 8048088:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 804808c:	681b      	ldr	r3, [r3, #0]
 804808e:	68fa      	ldr	r2, [r7, #12]
 8048090:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8048094:	f023 0303 	bic.w	r3, r3, #3
 8048098:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 804809a:	68fb      	ldr	r3, [r7, #12]
 804809c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80480a0:	685b      	ldr	r3, [r3, #4]
 80480a2:	68fa      	ldr	r2, [r7, #12]
 80480a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80480a8:	f043 0302 	orr.w	r3, r3, #2
 80480ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80480ae:	2300      	movs	r3, #0
}
 80480b0:	4618      	mov	r0, r3
 80480b2:	3714      	adds	r7, #20
 80480b4:	46bd      	mov	sp, r7
 80480b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80480ba:	4770      	bx	lr

080480bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80480bc:	b480      	push	{r7}
 80480be:	b085      	sub	sp, #20
 80480c0:	af00      	add	r7, sp, #0
 80480c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80480c4:	687b      	ldr	r3, [r7, #4]
 80480c6:	695b      	ldr	r3, [r3, #20]
 80480c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80480ca:	687b      	ldr	r3, [r7, #4]
 80480cc:	699b      	ldr	r3, [r3, #24]
 80480ce:	68fa      	ldr	r2, [r7, #12]
 80480d0:	4013      	ands	r3, r2
 80480d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80480d4:	68fb      	ldr	r3, [r7, #12]
}
 80480d6:	4618      	mov	r0, r3
 80480d8:	3714      	adds	r7, #20
 80480da:	46bd      	mov	sp, r7
 80480dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80480e0:	4770      	bx	lr

080480e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80480e2:	b480      	push	{r7}
 80480e4:	b085      	sub	sp, #20
 80480e6:	af00      	add	r7, sp, #0
 80480e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80480ea:	687b      	ldr	r3, [r7, #4]
 80480ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80480ee:	68fb      	ldr	r3, [r7, #12]
 80480f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80480f4:	699b      	ldr	r3, [r3, #24]
 80480f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80480f8:	68fb      	ldr	r3, [r7, #12]
 80480fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80480fe:	69db      	ldr	r3, [r3, #28]
 8048100:	68ba      	ldr	r2, [r7, #8]
 8048102:	4013      	ands	r3, r2
 8048104:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8048106:	68bb      	ldr	r3, [r7, #8]
 8048108:	0c1b      	lsrs	r3, r3, #16
}
 804810a:	4618      	mov	r0, r3
 804810c:	3714      	adds	r7, #20
 804810e:	46bd      	mov	sp, r7
 8048110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048114:	4770      	bx	lr

08048116 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8048116:	b480      	push	{r7}
 8048118:	b085      	sub	sp, #20
 804811a:	af00      	add	r7, sp, #0
 804811c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804811e:	687b      	ldr	r3, [r7, #4]
 8048120:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8048122:	68fb      	ldr	r3, [r7, #12]
 8048124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048128:	699b      	ldr	r3, [r3, #24]
 804812a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 804812c:	68fb      	ldr	r3, [r7, #12]
 804812e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048132:	69db      	ldr	r3, [r3, #28]
 8048134:	68ba      	ldr	r2, [r7, #8]
 8048136:	4013      	ands	r3, r2
 8048138:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 804813a:	68bb      	ldr	r3, [r7, #8]
 804813c:	b29b      	uxth	r3, r3
}
 804813e:	4618      	mov	r0, r3
 8048140:	3714      	adds	r7, #20
 8048142:	46bd      	mov	sp, r7
 8048144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048148:	4770      	bx	lr

0804814a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 804814a:	b480      	push	{r7}
 804814c:	b085      	sub	sp, #20
 804814e:	af00      	add	r7, sp, #0
 8048150:	6078      	str	r0, [r7, #4]
 8048152:	460b      	mov	r3, r1
 8048154:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048156:	687b      	ldr	r3, [r7, #4]
 8048158:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 804815a:	78fb      	ldrb	r3, [r7, #3]
 804815c:	015a      	lsls	r2, r3, #5
 804815e:	68fb      	ldr	r3, [r7, #12]
 8048160:	4413      	add	r3, r2
 8048162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8048166:	689b      	ldr	r3, [r3, #8]
 8048168:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 804816a:	68fb      	ldr	r3, [r7, #12]
 804816c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048170:	695b      	ldr	r3, [r3, #20]
 8048172:	68ba      	ldr	r2, [r7, #8]
 8048174:	4013      	ands	r3, r2
 8048176:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8048178:	68bb      	ldr	r3, [r7, #8]
}
 804817a:	4618      	mov	r0, r3
 804817c:	3714      	adds	r7, #20
 804817e:	46bd      	mov	sp, r7
 8048180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048184:	4770      	bx	lr

08048186 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8048186:	b480      	push	{r7}
 8048188:	b087      	sub	sp, #28
 804818a:	af00      	add	r7, sp, #0
 804818c:	6078      	str	r0, [r7, #4]
 804818e:	460b      	mov	r3, r1
 8048190:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048192:	687b      	ldr	r3, [r7, #4]
 8048194:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8048196:	697b      	ldr	r3, [r7, #20]
 8048198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804819c:	691b      	ldr	r3, [r3, #16]
 804819e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80481a0:	697b      	ldr	r3, [r7, #20]
 80481a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80481a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80481a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80481aa:	78fb      	ldrb	r3, [r7, #3]
 80481ac:	f003 030f 	and.w	r3, r3, #15
 80481b0:	68fa      	ldr	r2, [r7, #12]
 80481b2:	fa22 f303 	lsr.w	r3, r2, r3
 80481b6:	01db      	lsls	r3, r3, #7
 80481b8:	b2db      	uxtb	r3, r3
 80481ba:	693a      	ldr	r2, [r7, #16]
 80481bc:	4313      	orrs	r3, r2
 80481be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80481c0:	78fb      	ldrb	r3, [r7, #3]
 80481c2:	015a      	lsls	r2, r3, #5
 80481c4:	697b      	ldr	r3, [r7, #20]
 80481c6:	4413      	add	r3, r2
 80481c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80481cc:	689b      	ldr	r3, [r3, #8]
 80481ce:	693a      	ldr	r2, [r7, #16]
 80481d0:	4013      	ands	r3, r2
 80481d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80481d4:	68bb      	ldr	r3, [r7, #8]
}
 80481d6:	4618      	mov	r0, r3
 80481d8:	371c      	adds	r7, #28
 80481da:	46bd      	mov	sp, r7
 80481dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80481e0:	4770      	bx	lr

080481e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80481e2:	b480      	push	{r7}
 80481e4:	b083      	sub	sp, #12
 80481e6:	af00      	add	r7, sp, #0
 80481e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80481ea:	687b      	ldr	r3, [r7, #4]
 80481ec:	695b      	ldr	r3, [r3, #20]
 80481ee:	f003 0301 	and.w	r3, r3, #1
}
 80481f2:	4618      	mov	r0, r3
 80481f4:	370c      	adds	r7, #12
 80481f6:	46bd      	mov	sp, r7
 80481f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80481fc:	4770      	bx	lr
	...

08048200 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8048200:	b480      	push	{r7}
 8048202:	b085      	sub	sp, #20
 8048204:	af00      	add	r7, sp, #0
 8048206:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048208:	687b      	ldr	r3, [r7, #4]
 804820a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 804820c:	68fb      	ldr	r3, [r7, #12]
 804820e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8048212:	681a      	ldr	r2, [r3, #0]
 8048214:	68fb      	ldr	r3, [r7, #12]
 8048216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804821a:	4619      	mov	r1, r3
 804821c:	4b09      	ldr	r3, [pc, #36]	@ (8048244 <USB_ActivateSetup+0x44>)
 804821e:	4013      	ands	r3, r2
 8048220:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8048222:	68fb      	ldr	r3, [r7, #12]
 8048224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048228:	685b      	ldr	r3, [r3, #4]
 804822a:	68fa      	ldr	r2, [r7, #12]
 804822c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8048230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8048234:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8048236:	2300      	movs	r3, #0
}
 8048238:	4618      	mov	r0, r3
 804823a:	3714      	adds	r7, #20
 804823c:	46bd      	mov	sp, r7
 804823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048242:	4770      	bx	lr
 8048244:	fffff800 	.word	0xfffff800

08048248 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8048248:	b480      	push	{r7}
 804824a:	b087      	sub	sp, #28
 804824c:	af00      	add	r7, sp, #0
 804824e:	60f8      	str	r0, [r7, #12]
 8048250:	460b      	mov	r3, r1
 8048252:	607a      	str	r2, [r7, #4]
 8048254:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048256:	68fb      	ldr	r3, [r7, #12]
 8048258:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 804825a:	68fb      	ldr	r3, [r7, #12]
 804825c:	333c      	adds	r3, #60	@ 0x3c
 804825e:	3304      	adds	r3, #4
 8048260:	681b      	ldr	r3, [r3, #0]
 8048262:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8048264:	693b      	ldr	r3, [r7, #16]
 8048266:	4a26      	ldr	r2, [pc, #152]	@ (8048300 <USB_EP0_OutStart+0xb8>)
 8048268:	4293      	cmp	r3, r2
 804826a:	d90a      	bls.n	8048282 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 804826c:	697b      	ldr	r3, [r7, #20]
 804826e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8048272:	681b      	ldr	r3, [r3, #0]
 8048274:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8048278:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 804827c:	d101      	bne.n	8048282 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 804827e:	2300      	movs	r3, #0
 8048280:	e037      	b.n	80482f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8048282:	697b      	ldr	r3, [r7, #20]
 8048284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8048288:	461a      	mov	r2, r3
 804828a:	2300      	movs	r3, #0
 804828c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 804828e:	697b      	ldr	r3, [r7, #20]
 8048290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8048294:	691b      	ldr	r3, [r3, #16]
 8048296:	697a      	ldr	r2, [r7, #20]
 8048298:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 804829c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80482a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80482a2:	697b      	ldr	r3, [r7, #20]
 80482a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80482a8:	691b      	ldr	r3, [r3, #16]
 80482aa:	697a      	ldr	r2, [r7, #20]
 80482ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80482b0:	f043 0318 	orr.w	r3, r3, #24
 80482b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80482b6:	697b      	ldr	r3, [r7, #20]
 80482b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80482bc:	691b      	ldr	r3, [r3, #16]
 80482be:	697a      	ldr	r2, [r7, #20]
 80482c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80482c4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80482c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80482ca:	7afb      	ldrb	r3, [r7, #11]
 80482cc:	2b01      	cmp	r3, #1
 80482ce:	d10f      	bne.n	80482f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80482d0:	697b      	ldr	r3, [r7, #20]
 80482d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80482d6:	461a      	mov	r2, r3
 80482d8:	687b      	ldr	r3, [r7, #4]
 80482da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80482dc:	697b      	ldr	r3, [r7, #20]
 80482de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80482e2:	681b      	ldr	r3, [r3, #0]
 80482e4:	697a      	ldr	r2, [r7, #20]
 80482e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80482ea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80482ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80482f0:	2300      	movs	r3, #0
}
 80482f2:	4618      	mov	r0, r3
 80482f4:	371c      	adds	r7, #28
 80482f6:	46bd      	mov	sp, r7
 80482f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80482fc:	4770      	bx	lr
 80482fe:	bf00      	nop
 8048300:	4f54300a 	.word	0x4f54300a

08048304 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8048304:	b480      	push	{r7}
 8048306:	b085      	sub	sp, #20
 8048308:	af00      	add	r7, sp, #0
 804830a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 804830c:	2300      	movs	r3, #0
 804830e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8048310:	68fb      	ldr	r3, [r7, #12]
 8048312:	3301      	adds	r3, #1
 8048314:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8048316:	68fb      	ldr	r3, [r7, #12]
 8048318:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 804831c:	d901      	bls.n	8048322 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 804831e:	2303      	movs	r3, #3
 8048320:	e01b      	b.n	804835a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8048322:	687b      	ldr	r3, [r7, #4]
 8048324:	691b      	ldr	r3, [r3, #16]
 8048326:	2b00      	cmp	r3, #0
 8048328:	daf2      	bge.n	8048310 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 804832a:	2300      	movs	r3, #0
 804832c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 804832e:	687b      	ldr	r3, [r7, #4]
 8048330:	691b      	ldr	r3, [r3, #16]
 8048332:	f043 0201 	orr.w	r2, r3, #1
 8048336:	687b      	ldr	r3, [r7, #4]
 8048338:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 804833a:	68fb      	ldr	r3, [r7, #12]
 804833c:	3301      	adds	r3, #1
 804833e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8048340:	68fb      	ldr	r3, [r7, #12]
 8048342:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8048346:	d901      	bls.n	804834c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8048348:	2303      	movs	r3, #3
 804834a:	e006      	b.n	804835a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 804834c:	687b      	ldr	r3, [r7, #4]
 804834e:	691b      	ldr	r3, [r3, #16]
 8048350:	f003 0301 	and.w	r3, r3, #1
 8048354:	2b01      	cmp	r3, #1
 8048356:	d0f0      	beq.n	804833a <USB_CoreReset+0x36>

  return HAL_OK;
 8048358:	2300      	movs	r3, #0
}
 804835a:	4618      	mov	r0, r3
 804835c:	3714      	adds	r7, #20
 804835e:	46bd      	mov	sp, r7
 8048360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048364:	4770      	bx	lr

08048366 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8048366:	b580      	push	{r7, lr}
 8048368:	b086      	sub	sp, #24
 804836a:	af00      	add	r7, sp, #0
 804836c:	60f8      	str	r0, [r7, #12]
 804836e:	60b9      	str	r1, [r7, #8]
 8048370:	4613      	mov	r3, r2
 8048372:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8048374:	68fb      	ldr	r3, [r7, #12]
 8048376:	2b00      	cmp	r3, #0
 8048378:	d101      	bne.n	804837e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 804837a:	2303      	movs	r3, #3
 804837c:	e01f      	b.n	80483be <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 804837e:	68fb      	ldr	r3, [r7, #12]
 8048380:	2200      	movs	r2, #0
 8048382:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8048386:	68fb      	ldr	r3, [r7, #12]
 8048388:	2200      	movs	r2, #0
 804838a:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 804838e:	68fb      	ldr	r3, [r7, #12]
 8048390:	2200      	movs	r2, #0
 8048392:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8048396:	68bb      	ldr	r3, [r7, #8]
 8048398:	2b00      	cmp	r3, #0
 804839a:	d003      	beq.n	80483a4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 804839c:	68fb      	ldr	r3, [r7, #12]
 804839e:	68ba      	ldr	r2, [r7, #8]
 80483a0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80483a4:	68fb      	ldr	r3, [r7, #12]
 80483a6:	2201      	movs	r2, #1
 80483a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80483ac:	68fb      	ldr	r3, [r7, #12]
 80483ae:	79fa      	ldrb	r2, [r7, #7]
 80483b0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80483b2:	68f8      	ldr	r0, [r7, #12]
 80483b4:	f002 fe24 	bl	804b000 <USBD_LL_Init>
 80483b8:	4603      	mov	r3, r0
 80483ba:	75fb      	strb	r3, [r7, #23]

  return ret;
 80483bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80483be:	4618      	mov	r0, r3
 80483c0:	3718      	adds	r7, #24
 80483c2:	46bd      	mov	sp, r7
 80483c4:	bd80      	pop	{r7, pc}

080483c6 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80483c6:	b580      	push	{r7, lr}
 80483c8:	b084      	sub	sp, #16
 80483ca:	af00      	add	r7, sp, #0
 80483cc:	6078      	str	r0, [r7, #4]
 80483ce:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80483d0:	2300      	movs	r3, #0
 80483d2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80483d4:	683b      	ldr	r3, [r7, #0]
 80483d6:	2b00      	cmp	r3, #0
 80483d8:	d101      	bne.n	80483de <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80483da:	2303      	movs	r3, #3
 80483dc:	e025      	b.n	804842a <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80483de:	687b      	ldr	r3, [r7, #4]
 80483e0:	683a      	ldr	r2, [r7, #0]
 80483e2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80483e6:	687b      	ldr	r3, [r7, #4]
 80483e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80483ec:	687b      	ldr	r3, [r7, #4]
 80483ee:	32ae      	adds	r2, #174	@ 0xae
 80483f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80483f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80483f6:	2b00      	cmp	r3, #0
 80483f8:	d00f      	beq.n	804841a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80483fa:	687b      	ldr	r3, [r7, #4]
 80483fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048400:	687b      	ldr	r3, [r7, #4]
 8048402:	32ae      	adds	r2, #174	@ 0xae
 8048404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804840a:	f107 020e 	add.w	r2, r7, #14
 804840e:	4610      	mov	r0, r2
 8048410:	4798      	blx	r3
 8048412:	4602      	mov	r2, r0
 8048414:	687b      	ldr	r3, [r7, #4]
 8048416:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 804841a:	687b      	ldr	r3, [r7, #4]
 804841c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8048420:	1c5a      	adds	r2, r3, #1
 8048422:	687b      	ldr	r3, [r7, #4]
 8048424:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8048428:	2300      	movs	r3, #0
}
 804842a:	4618      	mov	r0, r3
 804842c:	3710      	adds	r7, #16
 804842e:	46bd      	mov	sp, r7
 8048430:	bd80      	pop	{r7, pc}

08048432 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8048432:	b580      	push	{r7, lr}
 8048434:	b082      	sub	sp, #8
 8048436:	af00      	add	r7, sp, #0
 8048438:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 804843a:	6878      	ldr	r0, [r7, #4]
 804843c:	f002 fe32 	bl	804b0a4 <USBD_LL_Start>
 8048440:	4603      	mov	r3, r0
}
 8048442:	4618      	mov	r0, r3
 8048444:	3708      	adds	r7, #8
 8048446:	46bd      	mov	sp, r7
 8048448:	bd80      	pop	{r7, pc}

0804844a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 804844a:	b580      	push	{r7, lr}
 804844c:	b082      	sub	sp, #8
 804844e:	af00      	add	r7, sp, #0
 8048450:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8048452:	6878      	ldr	r0, [r7, #4]
 8048454:	f002 fe41 	bl	804b0da <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8048458:	687b      	ldr	r3, [r7, #4]
 804845a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 804845e:	2b00      	cmp	r3, #0
 8048460:	d009      	beq.n	8048476 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8048462:	687b      	ldr	r3, [r7, #4]
 8048464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048468:	685b      	ldr	r3, [r3, #4]
 804846a:	687a      	ldr	r2, [r7, #4]
 804846c:	6852      	ldr	r2, [r2, #4]
 804846e:	b2d2      	uxtb	r2, r2
 8048470:	4611      	mov	r1, r2
 8048472:	6878      	ldr	r0, [r7, #4]
 8048474:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 8048476:	2300      	movs	r3, #0
}
 8048478:	4618      	mov	r0, r3
 804847a:	3708      	adds	r7, #8
 804847c:	46bd      	mov	sp, r7
 804847e:	bd80      	pop	{r7, pc}

08048480 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8048480:	b480      	push	{r7}
 8048482:	b083      	sub	sp, #12
 8048484:	af00      	add	r7, sp, #0
 8048486:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8048488:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 804848a:	4618      	mov	r0, r3
 804848c:	370c      	adds	r7, #12
 804848e:	46bd      	mov	sp, r7
 8048490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048494:	4770      	bx	lr

08048496 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8048496:	b580      	push	{r7, lr}
 8048498:	b084      	sub	sp, #16
 804849a:	af00      	add	r7, sp, #0
 804849c:	6078      	str	r0, [r7, #4]
 804849e:	460b      	mov	r3, r1
 80484a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80484a2:	2300      	movs	r3, #0
 80484a4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80484a6:	687b      	ldr	r3, [r7, #4]
 80484a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80484ac:	2b00      	cmp	r3, #0
 80484ae:	d009      	beq.n	80484c4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80484b0:	687b      	ldr	r3, [r7, #4]
 80484b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80484b6:	681b      	ldr	r3, [r3, #0]
 80484b8:	78fa      	ldrb	r2, [r7, #3]
 80484ba:	4611      	mov	r1, r2
 80484bc:	6878      	ldr	r0, [r7, #4]
 80484be:	4798      	blx	r3
 80484c0:	4603      	mov	r3, r0
 80484c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80484c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80484c6:	4618      	mov	r0, r3
 80484c8:	3710      	adds	r7, #16
 80484ca:	46bd      	mov	sp, r7
 80484cc:	bd80      	pop	{r7, pc}

080484ce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80484ce:	b580      	push	{r7, lr}
 80484d0:	b084      	sub	sp, #16
 80484d2:	af00      	add	r7, sp, #0
 80484d4:	6078      	str	r0, [r7, #4]
 80484d6:	460b      	mov	r3, r1
 80484d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80484da:	2300      	movs	r3, #0
 80484dc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80484de:	687b      	ldr	r3, [r7, #4]
 80484e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80484e4:	685b      	ldr	r3, [r3, #4]
 80484e6:	78fa      	ldrb	r2, [r7, #3]
 80484e8:	4611      	mov	r1, r2
 80484ea:	6878      	ldr	r0, [r7, #4]
 80484ec:	4798      	blx	r3
 80484ee:	4603      	mov	r3, r0
 80484f0:	2b00      	cmp	r3, #0
 80484f2:	d001      	beq.n	80484f8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80484f4:	2303      	movs	r3, #3
 80484f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80484f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80484fa:	4618      	mov	r0, r3
 80484fc:	3710      	adds	r7, #16
 80484fe:	46bd      	mov	sp, r7
 8048500:	bd80      	pop	{r7, pc}

08048502 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8048502:	b580      	push	{r7, lr}
 8048504:	b084      	sub	sp, #16
 8048506:	af00      	add	r7, sp, #0
 8048508:	6078      	str	r0, [r7, #4]
 804850a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 804850c:	687b      	ldr	r3, [r7, #4]
 804850e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8048512:	6839      	ldr	r1, [r7, #0]
 8048514:	4618      	mov	r0, r3
 8048516:	f001 f924 	bl	8049762 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 804851a:	687b      	ldr	r3, [r7, #4]
 804851c:	2201      	movs	r2, #1
 804851e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8048522:	687b      	ldr	r3, [r7, #4]
 8048524:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8048528:	461a      	mov	r2, r3
 804852a:	687b      	ldr	r3, [r7, #4]
 804852c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8048530:	687b      	ldr	r3, [r7, #4]
 8048532:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8048536:	f003 031f 	and.w	r3, r3, #31
 804853a:	2b02      	cmp	r3, #2
 804853c:	d01a      	beq.n	8048574 <USBD_LL_SetupStage+0x72>
 804853e:	2b02      	cmp	r3, #2
 8048540:	d822      	bhi.n	8048588 <USBD_LL_SetupStage+0x86>
 8048542:	2b00      	cmp	r3, #0
 8048544:	d002      	beq.n	804854c <USBD_LL_SetupStage+0x4a>
 8048546:	2b01      	cmp	r3, #1
 8048548:	d00a      	beq.n	8048560 <USBD_LL_SetupStage+0x5e>
 804854a:	e01d      	b.n	8048588 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 804854c:	687b      	ldr	r3, [r7, #4]
 804854e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8048552:	4619      	mov	r1, r3
 8048554:	6878      	ldr	r0, [r7, #4]
 8048556:	f000 fb2b 	bl	8048bb0 <USBD_StdDevReq>
 804855a:	4603      	mov	r3, r0
 804855c:	73fb      	strb	r3, [r7, #15]
      break;
 804855e:	e020      	b.n	80485a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8048560:	687b      	ldr	r3, [r7, #4]
 8048562:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8048566:	4619      	mov	r1, r3
 8048568:	6878      	ldr	r0, [r7, #4]
 804856a:	f000 fb93 	bl	8048c94 <USBD_StdItfReq>
 804856e:	4603      	mov	r3, r0
 8048570:	73fb      	strb	r3, [r7, #15]
      break;
 8048572:	e016      	b.n	80485a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8048574:	687b      	ldr	r3, [r7, #4]
 8048576:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 804857a:	4619      	mov	r1, r3
 804857c:	6878      	ldr	r0, [r7, #4]
 804857e:	f000 fbf5 	bl	8048d6c <USBD_StdEPReq>
 8048582:	4603      	mov	r3, r0
 8048584:	73fb      	strb	r3, [r7, #15]
      break;
 8048586:	e00c      	b.n	80485a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8048588:	687b      	ldr	r3, [r7, #4]
 804858a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 804858e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8048592:	b2db      	uxtb	r3, r3
 8048594:	4619      	mov	r1, r3
 8048596:	6878      	ldr	r0, [r7, #4]
 8048598:	f002 fde0 	bl	804b15c <USBD_LL_StallEP>
 804859c:	4603      	mov	r3, r0
 804859e:	73fb      	strb	r3, [r7, #15]
      break;
 80485a0:	bf00      	nop
  }

  return ret;
 80485a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80485a4:	4618      	mov	r0, r3
 80485a6:	3710      	adds	r7, #16
 80485a8:	46bd      	mov	sp, r7
 80485aa:	bd80      	pop	{r7, pc}

080485ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80485ac:	b580      	push	{r7, lr}
 80485ae:	b086      	sub	sp, #24
 80485b0:	af00      	add	r7, sp, #0
 80485b2:	60f8      	str	r0, [r7, #12]
 80485b4:	460b      	mov	r3, r1
 80485b6:	607a      	str	r2, [r7, #4]
 80485b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80485ba:	2300      	movs	r3, #0
 80485bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80485be:	7afb      	ldrb	r3, [r7, #11]
 80485c0:	2b00      	cmp	r3, #0
 80485c2:	d16e      	bne.n	80486a2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80485c4:	68fb      	ldr	r3, [r7, #12]
 80485c6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80485ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80485cc:	68fb      	ldr	r3, [r7, #12]
 80485ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80485d2:	2b03      	cmp	r3, #3
 80485d4:	f040 8098 	bne.w	8048708 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80485d8:	693b      	ldr	r3, [r7, #16]
 80485da:	689a      	ldr	r2, [r3, #8]
 80485dc:	693b      	ldr	r3, [r7, #16]
 80485de:	68db      	ldr	r3, [r3, #12]
 80485e0:	429a      	cmp	r2, r3
 80485e2:	d913      	bls.n	804860c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80485e4:	693b      	ldr	r3, [r7, #16]
 80485e6:	689a      	ldr	r2, [r3, #8]
 80485e8:	693b      	ldr	r3, [r7, #16]
 80485ea:	68db      	ldr	r3, [r3, #12]
 80485ec:	1ad2      	subs	r2, r2, r3
 80485ee:	693b      	ldr	r3, [r7, #16]
 80485f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80485f2:	693b      	ldr	r3, [r7, #16]
 80485f4:	68da      	ldr	r2, [r3, #12]
 80485f6:	693b      	ldr	r3, [r7, #16]
 80485f8:	689b      	ldr	r3, [r3, #8]
 80485fa:	4293      	cmp	r3, r2
 80485fc:	bf28      	it	cs
 80485fe:	4613      	movcs	r3, r2
 8048600:	461a      	mov	r2, r3
 8048602:	6879      	ldr	r1, [r7, #4]
 8048604:	68f8      	ldr	r0, [r7, #12]
 8048606:	f002 f924 	bl	804a852 <USBD_CtlContinueRx>
 804860a:	e07d      	b.n	8048708 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 804860c:	68fb      	ldr	r3, [r7, #12]
 804860e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8048612:	f003 031f 	and.w	r3, r3, #31
 8048616:	2b02      	cmp	r3, #2
 8048618:	d014      	beq.n	8048644 <USBD_LL_DataOutStage+0x98>
 804861a:	2b02      	cmp	r3, #2
 804861c:	d81d      	bhi.n	804865a <USBD_LL_DataOutStage+0xae>
 804861e:	2b00      	cmp	r3, #0
 8048620:	d002      	beq.n	8048628 <USBD_LL_DataOutStage+0x7c>
 8048622:	2b01      	cmp	r3, #1
 8048624:	d003      	beq.n	804862e <USBD_LL_DataOutStage+0x82>
 8048626:	e018      	b.n	804865a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8048628:	2300      	movs	r3, #0
 804862a:	75bb      	strb	r3, [r7, #22]
            break;
 804862c:	e018      	b.n	8048660 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 804862e:	68fb      	ldr	r3, [r7, #12]
 8048630:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8048634:	b2db      	uxtb	r3, r3
 8048636:	4619      	mov	r1, r3
 8048638:	68f8      	ldr	r0, [r7, #12]
 804863a:	f000 fa64 	bl	8048b06 <USBD_CoreFindIF>
 804863e:	4603      	mov	r3, r0
 8048640:	75bb      	strb	r3, [r7, #22]
            break;
 8048642:	e00d      	b.n	8048660 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8048644:	68fb      	ldr	r3, [r7, #12]
 8048646:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 804864a:	b2db      	uxtb	r3, r3
 804864c:	4619      	mov	r1, r3
 804864e:	68f8      	ldr	r0, [r7, #12]
 8048650:	f000 fa66 	bl	8048b20 <USBD_CoreFindEP>
 8048654:	4603      	mov	r3, r0
 8048656:	75bb      	strb	r3, [r7, #22]
            break;
 8048658:	e002      	b.n	8048660 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 804865a:	2300      	movs	r3, #0
 804865c:	75bb      	strb	r3, [r7, #22]
            break;
 804865e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8048660:	7dbb      	ldrb	r3, [r7, #22]
 8048662:	2b00      	cmp	r3, #0
 8048664:	d119      	bne.n	804869a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048666:	68fb      	ldr	r3, [r7, #12]
 8048668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 804866c:	b2db      	uxtb	r3, r3
 804866e:	2b03      	cmp	r3, #3
 8048670:	d113      	bne.n	804869a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8048672:	7dba      	ldrb	r2, [r7, #22]
 8048674:	68fb      	ldr	r3, [r7, #12]
 8048676:	32ae      	adds	r2, #174	@ 0xae
 8048678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804867c:	691b      	ldr	r3, [r3, #16]
 804867e:	2b00      	cmp	r3, #0
 8048680:	d00b      	beq.n	804869a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8048682:	7dba      	ldrb	r2, [r7, #22]
 8048684:	68fb      	ldr	r3, [r7, #12]
 8048686:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 804868a:	7dba      	ldrb	r2, [r7, #22]
 804868c:	68fb      	ldr	r3, [r7, #12]
 804868e:	32ae      	adds	r2, #174	@ 0xae
 8048690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048694:	691b      	ldr	r3, [r3, #16]
 8048696:	68f8      	ldr	r0, [r7, #12]
 8048698:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 804869a:	68f8      	ldr	r0, [r7, #12]
 804869c:	f002 f8ea 	bl	804a874 <USBD_CtlSendStatus>
 80486a0:	e032      	b.n	8048708 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80486a2:	7afb      	ldrb	r3, [r7, #11]
 80486a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80486a8:	b2db      	uxtb	r3, r3
 80486aa:	4619      	mov	r1, r3
 80486ac:	68f8      	ldr	r0, [r7, #12]
 80486ae:	f000 fa37 	bl	8048b20 <USBD_CoreFindEP>
 80486b2:	4603      	mov	r3, r0
 80486b4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80486b6:	7dbb      	ldrb	r3, [r7, #22]
 80486b8:	2bff      	cmp	r3, #255	@ 0xff
 80486ba:	d025      	beq.n	8048708 <USBD_LL_DataOutStage+0x15c>
 80486bc:	7dbb      	ldrb	r3, [r7, #22]
 80486be:	2b00      	cmp	r3, #0
 80486c0:	d122      	bne.n	8048708 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80486c2:	68fb      	ldr	r3, [r7, #12]
 80486c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80486c8:	b2db      	uxtb	r3, r3
 80486ca:	2b03      	cmp	r3, #3
 80486cc:	d117      	bne.n	80486fe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80486ce:	7dba      	ldrb	r2, [r7, #22]
 80486d0:	68fb      	ldr	r3, [r7, #12]
 80486d2:	32ae      	adds	r2, #174	@ 0xae
 80486d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80486d8:	699b      	ldr	r3, [r3, #24]
 80486da:	2b00      	cmp	r3, #0
 80486dc:	d00f      	beq.n	80486fe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80486de:	7dba      	ldrb	r2, [r7, #22]
 80486e0:	68fb      	ldr	r3, [r7, #12]
 80486e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80486e6:	7dba      	ldrb	r2, [r7, #22]
 80486e8:	68fb      	ldr	r3, [r7, #12]
 80486ea:	32ae      	adds	r2, #174	@ 0xae
 80486ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80486f0:	699b      	ldr	r3, [r3, #24]
 80486f2:	7afa      	ldrb	r2, [r7, #11]
 80486f4:	4611      	mov	r1, r2
 80486f6:	68f8      	ldr	r0, [r7, #12]
 80486f8:	4798      	blx	r3
 80486fa:	4603      	mov	r3, r0
 80486fc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80486fe:	7dfb      	ldrb	r3, [r7, #23]
 8048700:	2b00      	cmp	r3, #0
 8048702:	d001      	beq.n	8048708 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8048704:	7dfb      	ldrb	r3, [r7, #23]
 8048706:	e000      	b.n	804870a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8048708:	2300      	movs	r3, #0
}
 804870a:	4618      	mov	r0, r3
 804870c:	3718      	adds	r7, #24
 804870e:	46bd      	mov	sp, r7
 8048710:	bd80      	pop	{r7, pc}

08048712 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8048712:	b580      	push	{r7, lr}
 8048714:	b086      	sub	sp, #24
 8048716:	af00      	add	r7, sp, #0
 8048718:	60f8      	str	r0, [r7, #12]
 804871a:	460b      	mov	r3, r1
 804871c:	607a      	str	r2, [r7, #4]
 804871e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8048720:	7afb      	ldrb	r3, [r7, #11]
 8048722:	2b00      	cmp	r3, #0
 8048724:	d16f      	bne.n	8048806 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8048726:	68fb      	ldr	r3, [r7, #12]
 8048728:	3314      	adds	r3, #20
 804872a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 804872c:	68fb      	ldr	r3, [r7, #12]
 804872e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8048732:	2b02      	cmp	r3, #2
 8048734:	d15a      	bne.n	80487ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8048736:	693b      	ldr	r3, [r7, #16]
 8048738:	689a      	ldr	r2, [r3, #8]
 804873a:	693b      	ldr	r3, [r7, #16]
 804873c:	68db      	ldr	r3, [r3, #12]
 804873e:	429a      	cmp	r2, r3
 8048740:	d914      	bls.n	804876c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8048742:	693b      	ldr	r3, [r7, #16]
 8048744:	689a      	ldr	r2, [r3, #8]
 8048746:	693b      	ldr	r3, [r7, #16]
 8048748:	68db      	ldr	r3, [r3, #12]
 804874a:	1ad2      	subs	r2, r2, r3
 804874c:	693b      	ldr	r3, [r7, #16]
 804874e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8048750:	693b      	ldr	r3, [r7, #16]
 8048752:	689b      	ldr	r3, [r3, #8]
 8048754:	461a      	mov	r2, r3
 8048756:	6879      	ldr	r1, [r7, #4]
 8048758:	68f8      	ldr	r0, [r7, #12]
 804875a:	f002 f84c 	bl	804a7f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 804875e:	2300      	movs	r3, #0
 8048760:	2200      	movs	r2, #0
 8048762:	2100      	movs	r1, #0
 8048764:	68f8      	ldr	r0, [r7, #12]
 8048766:	f002 fda3 	bl	804b2b0 <USBD_LL_PrepareReceive>
 804876a:	e03f      	b.n	80487ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 804876c:	693b      	ldr	r3, [r7, #16]
 804876e:	68da      	ldr	r2, [r3, #12]
 8048770:	693b      	ldr	r3, [r7, #16]
 8048772:	689b      	ldr	r3, [r3, #8]
 8048774:	429a      	cmp	r2, r3
 8048776:	d11c      	bne.n	80487b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8048778:	693b      	ldr	r3, [r7, #16]
 804877a:	685a      	ldr	r2, [r3, #4]
 804877c:	693b      	ldr	r3, [r7, #16]
 804877e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8048780:	429a      	cmp	r2, r3
 8048782:	d316      	bcc.n	80487b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8048784:	693b      	ldr	r3, [r7, #16]
 8048786:	685a      	ldr	r2, [r3, #4]
 8048788:	68fb      	ldr	r3, [r7, #12]
 804878a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 804878e:	429a      	cmp	r2, r3
 8048790:	d20f      	bcs.n	80487b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8048792:	2200      	movs	r2, #0
 8048794:	2100      	movs	r1, #0
 8048796:	68f8      	ldr	r0, [r7, #12]
 8048798:	f002 f82d 	bl	804a7f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 804879c:	68fb      	ldr	r3, [r7, #12]
 804879e:	2200      	movs	r2, #0
 80487a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80487a4:	2300      	movs	r3, #0
 80487a6:	2200      	movs	r2, #0
 80487a8:	2100      	movs	r1, #0
 80487aa:	68f8      	ldr	r0, [r7, #12]
 80487ac:	f002 fd80 	bl	804b2b0 <USBD_LL_PrepareReceive>
 80487b0:	e01c      	b.n	80487ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80487b2:	68fb      	ldr	r3, [r7, #12]
 80487b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80487b8:	b2db      	uxtb	r3, r3
 80487ba:	2b03      	cmp	r3, #3
 80487bc:	d10f      	bne.n	80487de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80487be:	68fb      	ldr	r3, [r7, #12]
 80487c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80487c4:	68db      	ldr	r3, [r3, #12]
 80487c6:	2b00      	cmp	r3, #0
 80487c8:	d009      	beq.n	80487de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80487ca:	68fb      	ldr	r3, [r7, #12]
 80487cc:	2200      	movs	r2, #0
 80487ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80487d2:	68fb      	ldr	r3, [r7, #12]
 80487d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80487d8:	68db      	ldr	r3, [r3, #12]
 80487da:	68f8      	ldr	r0, [r7, #12]
 80487dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80487de:	2180      	movs	r1, #128	@ 0x80
 80487e0:	68f8      	ldr	r0, [r7, #12]
 80487e2:	f002 fcbb 	bl	804b15c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80487e6:	68f8      	ldr	r0, [r7, #12]
 80487e8:	f002 f857 	bl	804a89a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80487ec:	68fb      	ldr	r3, [r7, #12]
 80487ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80487f2:	2b00      	cmp	r3, #0
 80487f4:	d03a      	beq.n	804886c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80487f6:	68f8      	ldr	r0, [r7, #12]
 80487f8:	f7ff fe42 	bl	8048480 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80487fc:	68fb      	ldr	r3, [r7, #12]
 80487fe:	2200      	movs	r2, #0
 8048800:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8048804:	e032      	b.n	804886c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8048806:	7afb      	ldrb	r3, [r7, #11]
 8048808:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 804880c:	b2db      	uxtb	r3, r3
 804880e:	4619      	mov	r1, r3
 8048810:	68f8      	ldr	r0, [r7, #12]
 8048812:	f000 f985 	bl	8048b20 <USBD_CoreFindEP>
 8048816:	4603      	mov	r3, r0
 8048818:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 804881a:	7dfb      	ldrb	r3, [r7, #23]
 804881c:	2bff      	cmp	r3, #255	@ 0xff
 804881e:	d025      	beq.n	804886c <USBD_LL_DataInStage+0x15a>
 8048820:	7dfb      	ldrb	r3, [r7, #23]
 8048822:	2b00      	cmp	r3, #0
 8048824:	d122      	bne.n	804886c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048826:	68fb      	ldr	r3, [r7, #12]
 8048828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 804882c:	b2db      	uxtb	r3, r3
 804882e:	2b03      	cmp	r3, #3
 8048830:	d11c      	bne.n	804886c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8048832:	7dfa      	ldrb	r2, [r7, #23]
 8048834:	68fb      	ldr	r3, [r7, #12]
 8048836:	32ae      	adds	r2, #174	@ 0xae
 8048838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804883c:	695b      	ldr	r3, [r3, #20]
 804883e:	2b00      	cmp	r3, #0
 8048840:	d014      	beq.n	804886c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8048842:	7dfa      	ldrb	r2, [r7, #23]
 8048844:	68fb      	ldr	r3, [r7, #12]
 8048846:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 804884a:	7dfa      	ldrb	r2, [r7, #23]
 804884c:	68fb      	ldr	r3, [r7, #12]
 804884e:	32ae      	adds	r2, #174	@ 0xae
 8048850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048854:	695b      	ldr	r3, [r3, #20]
 8048856:	7afa      	ldrb	r2, [r7, #11]
 8048858:	4611      	mov	r1, r2
 804885a:	68f8      	ldr	r0, [r7, #12]
 804885c:	4798      	blx	r3
 804885e:	4603      	mov	r3, r0
 8048860:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8048862:	7dbb      	ldrb	r3, [r7, #22]
 8048864:	2b00      	cmp	r3, #0
 8048866:	d001      	beq.n	804886c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8048868:	7dbb      	ldrb	r3, [r7, #22]
 804886a:	e000      	b.n	804886e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 804886c:	2300      	movs	r3, #0
}
 804886e:	4618      	mov	r0, r3
 8048870:	3718      	adds	r7, #24
 8048872:	46bd      	mov	sp, r7
 8048874:	bd80      	pop	{r7, pc}

08048876 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8048876:	b580      	push	{r7, lr}
 8048878:	b084      	sub	sp, #16
 804887a:	af00      	add	r7, sp, #0
 804887c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 804887e:	2300      	movs	r3, #0
 8048880:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8048882:	687b      	ldr	r3, [r7, #4]
 8048884:	2201      	movs	r2, #1
 8048886:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 804888a:	687b      	ldr	r3, [r7, #4]
 804888c:	2200      	movs	r2, #0
 804888e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8048892:	687b      	ldr	r3, [r7, #4]
 8048894:	2200      	movs	r2, #0
 8048896:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8048898:	687b      	ldr	r3, [r7, #4]
 804889a:	2200      	movs	r2, #0
 804889c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80488a0:	687b      	ldr	r3, [r7, #4]
 80488a2:	2200      	movs	r2, #0
 80488a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80488a8:	687b      	ldr	r3, [r7, #4]
 80488aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80488ae:	2b00      	cmp	r3, #0
 80488b0:	d014      	beq.n	80488dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80488b2:	687b      	ldr	r3, [r7, #4]
 80488b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80488b8:	685b      	ldr	r3, [r3, #4]
 80488ba:	2b00      	cmp	r3, #0
 80488bc:	d00e      	beq.n	80488dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80488be:	687b      	ldr	r3, [r7, #4]
 80488c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80488c4:	685b      	ldr	r3, [r3, #4]
 80488c6:	687a      	ldr	r2, [r7, #4]
 80488c8:	6852      	ldr	r2, [r2, #4]
 80488ca:	b2d2      	uxtb	r2, r2
 80488cc:	4611      	mov	r1, r2
 80488ce:	6878      	ldr	r0, [r7, #4]
 80488d0:	4798      	blx	r3
 80488d2:	4603      	mov	r3, r0
 80488d4:	2b00      	cmp	r3, #0
 80488d6:	d001      	beq.n	80488dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80488d8:	2303      	movs	r3, #3
 80488da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80488dc:	2340      	movs	r3, #64	@ 0x40
 80488de:	2200      	movs	r2, #0
 80488e0:	2100      	movs	r1, #0
 80488e2:	6878      	ldr	r0, [r7, #4]
 80488e4:	f002 fc14 	bl	804b110 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80488e8:	687b      	ldr	r3, [r7, #4]
 80488ea:	2201      	movs	r2, #1
 80488ec:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80488f0:	687b      	ldr	r3, [r7, #4]
 80488f2:	2240      	movs	r2, #64	@ 0x40
 80488f4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80488f8:	2340      	movs	r3, #64	@ 0x40
 80488fa:	2200      	movs	r2, #0
 80488fc:	2180      	movs	r1, #128	@ 0x80
 80488fe:	6878      	ldr	r0, [r7, #4]
 8048900:	f002 fc06 	bl	804b110 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8048904:	687b      	ldr	r3, [r7, #4]
 8048906:	2201      	movs	r2, #1
 8048908:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 804890a:	687b      	ldr	r3, [r7, #4]
 804890c:	2240      	movs	r2, #64	@ 0x40
 804890e:	621a      	str	r2, [r3, #32]

  return ret;
 8048910:	7bfb      	ldrb	r3, [r7, #15]
}
 8048912:	4618      	mov	r0, r3
 8048914:	3710      	adds	r7, #16
 8048916:	46bd      	mov	sp, r7
 8048918:	bd80      	pop	{r7, pc}

0804891a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 804891a:	b480      	push	{r7}
 804891c:	b083      	sub	sp, #12
 804891e:	af00      	add	r7, sp, #0
 8048920:	6078      	str	r0, [r7, #4]
 8048922:	460b      	mov	r3, r1
 8048924:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8048926:	687b      	ldr	r3, [r7, #4]
 8048928:	78fa      	ldrb	r2, [r7, #3]
 804892a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 804892c:	2300      	movs	r3, #0
}
 804892e:	4618      	mov	r0, r3
 8048930:	370c      	adds	r7, #12
 8048932:	46bd      	mov	sp, r7
 8048934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048938:	4770      	bx	lr

0804893a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 804893a:	b480      	push	{r7}
 804893c:	b083      	sub	sp, #12
 804893e:	af00      	add	r7, sp, #0
 8048940:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8048942:	687b      	ldr	r3, [r7, #4]
 8048944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048948:	b2db      	uxtb	r3, r3
 804894a:	2b04      	cmp	r3, #4
 804894c:	d006      	beq.n	804895c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 804894e:	687b      	ldr	r3, [r7, #4]
 8048950:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048954:	b2da      	uxtb	r2, r3
 8048956:	687b      	ldr	r3, [r7, #4]
 8048958:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 804895c:	687b      	ldr	r3, [r7, #4]
 804895e:	2204      	movs	r2, #4
 8048960:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8048964:	2300      	movs	r3, #0
}
 8048966:	4618      	mov	r0, r3
 8048968:	370c      	adds	r7, #12
 804896a:	46bd      	mov	sp, r7
 804896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048970:	4770      	bx	lr

08048972 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8048972:	b480      	push	{r7}
 8048974:	b083      	sub	sp, #12
 8048976:	af00      	add	r7, sp, #0
 8048978:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 804897a:	687b      	ldr	r3, [r7, #4]
 804897c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048980:	b2db      	uxtb	r3, r3
 8048982:	2b04      	cmp	r3, #4
 8048984:	d106      	bne.n	8048994 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8048986:	687b      	ldr	r3, [r7, #4]
 8048988:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 804898c:	b2da      	uxtb	r2, r3
 804898e:	687b      	ldr	r3, [r7, #4]
 8048990:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8048994:	2300      	movs	r3, #0
}
 8048996:	4618      	mov	r0, r3
 8048998:	370c      	adds	r7, #12
 804899a:	46bd      	mov	sp, r7
 804899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80489a0:	4770      	bx	lr

080489a2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80489a2:	b580      	push	{r7, lr}
 80489a4:	b082      	sub	sp, #8
 80489a6:	af00      	add	r7, sp, #0
 80489a8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80489aa:	687b      	ldr	r3, [r7, #4]
 80489ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80489b0:	b2db      	uxtb	r3, r3
 80489b2:	2b03      	cmp	r3, #3
 80489b4:	d110      	bne.n	80489d8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80489b6:	687b      	ldr	r3, [r7, #4]
 80489b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80489bc:	2b00      	cmp	r3, #0
 80489be:	d00b      	beq.n	80489d8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80489c0:	687b      	ldr	r3, [r7, #4]
 80489c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80489c6:	69db      	ldr	r3, [r3, #28]
 80489c8:	2b00      	cmp	r3, #0
 80489ca:	d005      	beq.n	80489d8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80489cc:	687b      	ldr	r3, [r7, #4]
 80489ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80489d2:	69db      	ldr	r3, [r3, #28]
 80489d4:	6878      	ldr	r0, [r7, #4]
 80489d6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80489d8:	2300      	movs	r3, #0
}
 80489da:	4618      	mov	r0, r3
 80489dc:	3708      	adds	r7, #8
 80489de:	46bd      	mov	sp, r7
 80489e0:	bd80      	pop	{r7, pc}

080489e2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80489e2:	b580      	push	{r7, lr}
 80489e4:	b082      	sub	sp, #8
 80489e6:	af00      	add	r7, sp, #0
 80489e8:	6078      	str	r0, [r7, #4]
 80489ea:	460b      	mov	r3, r1
 80489ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80489ee:	687b      	ldr	r3, [r7, #4]
 80489f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80489f4:	687b      	ldr	r3, [r7, #4]
 80489f6:	32ae      	adds	r2, #174	@ 0xae
 80489f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80489fc:	2b00      	cmp	r3, #0
 80489fe:	d101      	bne.n	8048a04 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8048a00:	2303      	movs	r3, #3
 8048a02:	e01c      	b.n	8048a3e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048a04:	687b      	ldr	r3, [r7, #4]
 8048a06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048a0a:	b2db      	uxtb	r3, r3
 8048a0c:	2b03      	cmp	r3, #3
 8048a0e:	d115      	bne.n	8048a3c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8048a10:	687b      	ldr	r3, [r7, #4]
 8048a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048a16:	687b      	ldr	r3, [r7, #4]
 8048a18:	32ae      	adds	r2, #174	@ 0xae
 8048a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048a1e:	6a1b      	ldr	r3, [r3, #32]
 8048a20:	2b00      	cmp	r3, #0
 8048a22:	d00b      	beq.n	8048a3c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8048a24:	687b      	ldr	r3, [r7, #4]
 8048a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048a2a:	687b      	ldr	r3, [r7, #4]
 8048a2c:	32ae      	adds	r2, #174	@ 0xae
 8048a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048a32:	6a1b      	ldr	r3, [r3, #32]
 8048a34:	78fa      	ldrb	r2, [r7, #3]
 8048a36:	4611      	mov	r1, r2
 8048a38:	6878      	ldr	r0, [r7, #4]
 8048a3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8048a3c:	2300      	movs	r3, #0
}
 8048a3e:	4618      	mov	r0, r3
 8048a40:	3708      	adds	r7, #8
 8048a42:	46bd      	mov	sp, r7
 8048a44:	bd80      	pop	{r7, pc}

08048a46 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8048a46:	b580      	push	{r7, lr}
 8048a48:	b082      	sub	sp, #8
 8048a4a:	af00      	add	r7, sp, #0
 8048a4c:	6078      	str	r0, [r7, #4]
 8048a4e:	460b      	mov	r3, r1
 8048a50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8048a52:	687b      	ldr	r3, [r7, #4]
 8048a54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048a58:	687b      	ldr	r3, [r7, #4]
 8048a5a:	32ae      	adds	r2, #174	@ 0xae
 8048a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048a60:	2b00      	cmp	r3, #0
 8048a62:	d101      	bne.n	8048a68 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8048a64:	2303      	movs	r3, #3
 8048a66:	e01c      	b.n	8048aa2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048a68:	687b      	ldr	r3, [r7, #4]
 8048a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048a6e:	b2db      	uxtb	r3, r3
 8048a70:	2b03      	cmp	r3, #3
 8048a72:	d115      	bne.n	8048aa0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8048a74:	687b      	ldr	r3, [r7, #4]
 8048a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048a7a:	687b      	ldr	r3, [r7, #4]
 8048a7c:	32ae      	adds	r2, #174	@ 0xae
 8048a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8048a84:	2b00      	cmp	r3, #0
 8048a86:	d00b      	beq.n	8048aa0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8048a88:	687b      	ldr	r3, [r7, #4]
 8048a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048a8e:	687b      	ldr	r3, [r7, #4]
 8048a90:	32ae      	adds	r2, #174	@ 0xae
 8048a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8048a98:	78fa      	ldrb	r2, [r7, #3]
 8048a9a:	4611      	mov	r1, r2
 8048a9c:	6878      	ldr	r0, [r7, #4]
 8048a9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8048aa0:	2300      	movs	r3, #0
}
 8048aa2:	4618      	mov	r0, r3
 8048aa4:	3708      	adds	r7, #8
 8048aa6:	46bd      	mov	sp, r7
 8048aa8:	bd80      	pop	{r7, pc}

08048aaa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8048aaa:	b480      	push	{r7}
 8048aac:	b083      	sub	sp, #12
 8048aae:	af00      	add	r7, sp, #0
 8048ab0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8048ab2:	2300      	movs	r3, #0
}
 8048ab4:	4618      	mov	r0, r3
 8048ab6:	370c      	adds	r7, #12
 8048ab8:	46bd      	mov	sp, r7
 8048aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048abe:	4770      	bx	lr

08048ac0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8048ac0:	b580      	push	{r7, lr}
 8048ac2:	b084      	sub	sp, #16
 8048ac4:	af00      	add	r7, sp, #0
 8048ac6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8048ac8:	2300      	movs	r3, #0
 8048aca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8048acc:	687b      	ldr	r3, [r7, #4]
 8048ace:	2201      	movs	r2, #1
 8048ad0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8048ad4:	687b      	ldr	r3, [r7, #4]
 8048ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048ada:	2b00      	cmp	r3, #0
 8048adc:	d00e      	beq.n	8048afc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8048ade:	687b      	ldr	r3, [r7, #4]
 8048ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048ae4:	685b      	ldr	r3, [r3, #4]
 8048ae6:	687a      	ldr	r2, [r7, #4]
 8048ae8:	6852      	ldr	r2, [r2, #4]
 8048aea:	b2d2      	uxtb	r2, r2
 8048aec:	4611      	mov	r1, r2
 8048aee:	6878      	ldr	r0, [r7, #4]
 8048af0:	4798      	blx	r3
 8048af2:	4603      	mov	r3, r0
 8048af4:	2b00      	cmp	r3, #0
 8048af6:	d001      	beq.n	8048afc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8048af8:	2303      	movs	r3, #3
 8048afa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8048afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8048afe:	4618      	mov	r0, r3
 8048b00:	3710      	adds	r7, #16
 8048b02:	46bd      	mov	sp, r7
 8048b04:	bd80      	pop	{r7, pc}

08048b06 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8048b06:	b480      	push	{r7}
 8048b08:	b083      	sub	sp, #12
 8048b0a:	af00      	add	r7, sp, #0
 8048b0c:	6078      	str	r0, [r7, #4]
 8048b0e:	460b      	mov	r3, r1
 8048b10:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8048b12:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8048b14:	4618      	mov	r0, r3
 8048b16:	370c      	adds	r7, #12
 8048b18:	46bd      	mov	sp, r7
 8048b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b1e:	4770      	bx	lr

08048b20 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8048b20:	b480      	push	{r7}
 8048b22:	b083      	sub	sp, #12
 8048b24:	af00      	add	r7, sp, #0
 8048b26:	6078      	str	r0, [r7, #4]
 8048b28:	460b      	mov	r3, r1
 8048b2a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8048b2c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8048b2e:	4618      	mov	r0, r3
 8048b30:	370c      	adds	r7, #12
 8048b32:	46bd      	mov	sp, r7
 8048b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b38:	4770      	bx	lr

08048b3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8048b3a:	b480      	push	{r7}
 8048b3c:	b085      	sub	sp, #20
 8048b3e:	af00      	add	r7, sp, #0
 8048b40:	6078      	str	r0, [r7, #4]
 8048b42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8048b44:	687b      	ldr	r3, [r7, #4]
 8048b46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8048b48:	683b      	ldr	r3, [r7, #0]
 8048b4a:	881b      	ldrh	r3, [r3, #0]
 8048b4c:	68fa      	ldr	r2, [r7, #12]
 8048b4e:	7812      	ldrb	r2, [r2, #0]
 8048b50:	4413      	add	r3, r2
 8048b52:	b29a      	uxth	r2, r3
 8048b54:	683b      	ldr	r3, [r7, #0]
 8048b56:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8048b58:	68fb      	ldr	r3, [r7, #12]
 8048b5a:	781b      	ldrb	r3, [r3, #0]
 8048b5c:	461a      	mov	r2, r3
 8048b5e:	687b      	ldr	r3, [r7, #4]
 8048b60:	4413      	add	r3, r2
 8048b62:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8048b64:	68fb      	ldr	r3, [r7, #12]
}
 8048b66:	4618      	mov	r0, r3
 8048b68:	3714      	adds	r7, #20
 8048b6a:	46bd      	mov	sp, r7
 8048b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b70:	4770      	bx	lr

08048b72 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8048b72:	b480      	push	{r7}
 8048b74:	b087      	sub	sp, #28
 8048b76:	af00      	add	r7, sp, #0
 8048b78:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8048b7a:	687b      	ldr	r3, [r7, #4]
 8048b7c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8048b7e:	697b      	ldr	r3, [r7, #20]
 8048b80:	781b      	ldrb	r3, [r3, #0]
 8048b82:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8048b84:	697b      	ldr	r3, [r7, #20]
 8048b86:	3301      	adds	r3, #1
 8048b88:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8048b8a:	697b      	ldr	r3, [r7, #20]
 8048b8c:	781b      	ldrb	r3, [r3, #0]
 8048b8e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8048b90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8048b94:	021b      	lsls	r3, r3, #8
 8048b96:	b21a      	sxth	r2, r3
 8048b98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8048b9c:	4313      	orrs	r3, r2
 8048b9e:	b21b      	sxth	r3, r3
 8048ba0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8048ba2:	89fb      	ldrh	r3, [r7, #14]
}
 8048ba4:	4618      	mov	r0, r3
 8048ba6:	371c      	adds	r7, #28
 8048ba8:	46bd      	mov	sp, r7
 8048baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048bae:	4770      	bx	lr

08048bb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8048bb0:	b580      	push	{r7, lr}
 8048bb2:	b084      	sub	sp, #16
 8048bb4:	af00      	add	r7, sp, #0
 8048bb6:	6078      	str	r0, [r7, #4]
 8048bb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8048bba:	2300      	movs	r3, #0
 8048bbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8048bbe:	683b      	ldr	r3, [r7, #0]
 8048bc0:	781b      	ldrb	r3, [r3, #0]
 8048bc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8048bc6:	2b40      	cmp	r3, #64	@ 0x40
 8048bc8:	d005      	beq.n	8048bd6 <USBD_StdDevReq+0x26>
 8048bca:	2b40      	cmp	r3, #64	@ 0x40
 8048bcc:	d857      	bhi.n	8048c7e <USBD_StdDevReq+0xce>
 8048bce:	2b00      	cmp	r3, #0
 8048bd0:	d00f      	beq.n	8048bf2 <USBD_StdDevReq+0x42>
 8048bd2:	2b20      	cmp	r3, #32
 8048bd4:	d153      	bne.n	8048c7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8048bd6:	687b      	ldr	r3, [r7, #4]
 8048bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048bdc:	687b      	ldr	r3, [r7, #4]
 8048bde:	32ae      	adds	r2, #174	@ 0xae
 8048be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048be4:	689b      	ldr	r3, [r3, #8]
 8048be6:	6839      	ldr	r1, [r7, #0]
 8048be8:	6878      	ldr	r0, [r7, #4]
 8048bea:	4798      	blx	r3
 8048bec:	4603      	mov	r3, r0
 8048bee:	73fb      	strb	r3, [r7, #15]
      break;
 8048bf0:	e04a      	b.n	8048c88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8048bf2:	683b      	ldr	r3, [r7, #0]
 8048bf4:	785b      	ldrb	r3, [r3, #1]
 8048bf6:	2b09      	cmp	r3, #9
 8048bf8:	d83b      	bhi.n	8048c72 <USBD_StdDevReq+0xc2>
 8048bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8048c00 <USBD_StdDevReq+0x50>)
 8048bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8048c00:	08048c55 	.word	0x08048c55
 8048c04:	08048c69 	.word	0x08048c69
 8048c08:	08048c73 	.word	0x08048c73
 8048c0c:	08048c5f 	.word	0x08048c5f
 8048c10:	08048c73 	.word	0x08048c73
 8048c14:	08048c33 	.word	0x08048c33
 8048c18:	08048c29 	.word	0x08048c29
 8048c1c:	08048c73 	.word	0x08048c73
 8048c20:	08048c4b 	.word	0x08048c4b
 8048c24:	08048c3d 	.word	0x08048c3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8048c28:	6839      	ldr	r1, [r7, #0]
 8048c2a:	6878      	ldr	r0, [r7, #4]
 8048c2c:	f000 fa3c 	bl	80490a8 <USBD_GetDescriptor>
          break;
 8048c30:	e024      	b.n	8048c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8048c32:	6839      	ldr	r1, [r7, #0]
 8048c34:	6878      	ldr	r0, [r7, #4]
 8048c36:	f000 fbf1 	bl	804941c <USBD_SetAddress>
          break;
 8048c3a:	e01f      	b.n	8048c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8048c3c:	6839      	ldr	r1, [r7, #0]
 8048c3e:	6878      	ldr	r0, [r7, #4]
 8048c40:	f000 fc30 	bl	80494a4 <USBD_SetConfig>
 8048c44:	4603      	mov	r3, r0
 8048c46:	73fb      	strb	r3, [r7, #15]
          break;
 8048c48:	e018      	b.n	8048c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8048c4a:	6839      	ldr	r1, [r7, #0]
 8048c4c:	6878      	ldr	r0, [r7, #4]
 8048c4e:	f000 fcd3 	bl	80495f8 <USBD_GetConfig>
          break;
 8048c52:	e013      	b.n	8048c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8048c54:	6839      	ldr	r1, [r7, #0]
 8048c56:	6878      	ldr	r0, [r7, #4]
 8048c58:	f000 fd04 	bl	8049664 <USBD_GetStatus>
          break;
 8048c5c:	e00e      	b.n	8048c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8048c5e:	6839      	ldr	r1, [r7, #0]
 8048c60:	6878      	ldr	r0, [r7, #4]
 8048c62:	f000 fd33 	bl	80496cc <USBD_SetFeature>
          break;
 8048c66:	e009      	b.n	8048c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8048c68:	6839      	ldr	r1, [r7, #0]
 8048c6a:	6878      	ldr	r0, [r7, #4]
 8048c6c:	f000 fd57 	bl	804971e <USBD_ClrFeature>
          break;
 8048c70:	e004      	b.n	8048c7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8048c72:	6839      	ldr	r1, [r7, #0]
 8048c74:	6878      	ldr	r0, [r7, #4]
 8048c76:	f000 fdae 	bl	80497d6 <USBD_CtlError>
          break;
 8048c7a:	bf00      	nop
      }
      break;
 8048c7c:	e004      	b.n	8048c88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8048c7e:	6839      	ldr	r1, [r7, #0]
 8048c80:	6878      	ldr	r0, [r7, #4]
 8048c82:	f000 fda8 	bl	80497d6 <USBD_CtlError>
      break;
 8048c86:	bf00      	nop
  }

  return ret;
 8048c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8048c8a:	4618      	mov	r0, r3
 8048c8c:	3710      	adds	r7, #16
 8048c8e:	46bd      	mov	sp, r7
 8048c90:	bd80      	pop	{r7, pc}
 8048c92:	bf00      	nop

08048c94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8048c94:	b580      	push	{r7, lr}
 8048c96:	b084      	sub	sp, #16
 8048c98:	af00      	add	r7, sp, #0
 8048c9a:	6078      	str	r0, [r7, #4]
 8048c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8048c9e:	2300      	movs	r3, #0
 8048ca0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8048ca2:	683b      	ldr	r3, [r7, #0]
 8048ca4:	781b      	ldrb	r3, [r3, #0]
 8048ca6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8048caa:	2b40      	cmp	r3, #64	@ 0x40
 8048cac:	d005      	beq.n	8048cba <USBD_StdItfReq+0x26>
 8048cae:	2b40      	cmp	r3, #64	@ 0x40
 8048cb0:	d852      	bhi.n	8048d58 <USBD_StdItfReq+0xc4>
 8048cb2:	2b00      	cmp	r3, #0
 8048cb4:	d001      	beq.n	8048cba <USBD_StdItfReq+0x26>
 8048cb6:	2b20      	cmp	r3, #32
 8048cb8:	d14e      	bne.n	8048d58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8048cba:	687b      	ldr	r3, [r7, #4]
 8048cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048cc0:	b2db      	uxtb	r3, r3
 8048cc2:	3b01      	subs	r3, #1
 8048cc4:	2b02      	cmp	r3, #2
 8048cc6:	d840      	bhi.n	8048d4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8048cc8:	683b      	ldr	r3, [r7, #0]
 8048cca:	889b      	ldrh	r3, [r3, #4]
 8048ccc:	b2db      	uxtb	r3, r3
 8048cce:	2b01      	cmp	r3, #1
 8048cd0:	d836      	bhi.n	8048d40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8048cd2:	683b      	ldr	r3, [r7, #0]
 8048cd4:	889b      	ldrh	r3, [r3, #4]
 8048cd6:	b2db      	uxtb	r3, r3
 8048cd8:	4619      	mov	r1, r3
 8048cda:	6878      	ldr	r0, [r7, #4]
 8048cdc:	f7ff ff13 	bl	8048b06 <USBD_CoreFindIF>
 8048ce0:	4603      	mov	r3, r0
 8048ce2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8048ce4:	7bbb      	ldrb	r3, [r7, #14]
 8048ce6:	2bff      	cmp	r3, #255	@ 0xff
 8048ce8:	d01d      	beq.n	8048d26 <USBD_StdItfReq+0x92>
 8048cea:	7bbb      	ldrb	r3, [r7, #14]
 8048cec:	2b00      	cmp	r3, #0
 8048cee:	d11a      	bne.n	8048d26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8048cf0:	7bba      	ldrb	r2, [r7, #14]
 8048cf2:	687b      	ldr	r3, [r7, #4]
 8048cf4:	32ae      	adds	r2, #174	@ 0xae
 8048cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048cfa:	689b      	ldr	r3, [r3, #8]
 8048cfc:	2b00      	cmp	r3, #0
 8048cfe:	d00f      	beq.n	8048d20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8048d00:	7bba      	ldrb	r2, [r7, #14]
 8048d02:	687b      	ldr	r3, [r7, #4]
 8048d04:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8048d08:	7bba      	ldrb	r2, [r7, #14]
 8048d0a:	687b      	ldr	r3, [r7, #4]
 8048d0c:	32ae      	adds	r2, #174	@ 0xae
 8048d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048d12:	689b      	ldr	r3, [r3, #8]
 8048d14:	6839      	ldr	r1, [r7, #0]
 8048d16:	6878      	ldr	r0, [r7, #4]
 8048d18:	4798      	blx	r3
 8048d1a:	4603      	mov	r3, r0
 8048d1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8048d1e:	e004      	b.n	8048d2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8048d20:	2303      	movs	r3, #3
 8048d22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8048d24:	e001      	b.n	8048d2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8048d26:	2303      	movs	r3, #3
 8048d28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8048d2a:	683b      	ldr	r3, [r7, #0]
 8048d2c:	88db      	ldrh	r3, [r3, #6]
 8048d2e:	2b00      	cmp	r3, #0
 8048d30:	d110      	bne.n	8048d54 <USBD_StdItfReq+0xc0>
 8048d32:	7bfb      	ldrb	r3, [r7, #15]
 8048d34:	2b00      	cmp	r3, #0
 8048d36:	d10d      	bne.n	8048d54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8048d38:	6878      	ldr	r0, [r7, #4]
 8048d3a:	f001 fd9b 	bl	804a874 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8048d3e:	e009      	b.n	8048d54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8048d40:	6839      	ldr	r1, [r7, #0]
 8048d42:	6878      	ldr	r0, [r7, #4]
 8048d44:	f000 fd47 	bl	80497d6 <USBD_CtlError>
          break;
 8048d48:	e004      	b.n	8048d54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8048d4a:	6839      	ldr	r1, [r7, #0]
 8048d4c:	6878      	ldr	r0, [r7, #4]
 8048d4e:	f000 fd42 	bl	80497d6 <USBD_CtlError>
          break;
 8048d52:	e000      	b.n	8048d56 <USBD_StdItfReq+0xc2>
          break;
 8048d54:	bf00      	nop
      }
      break;
 8048d56:	e004      	b.n	8048d62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8048d58:	6839      	ldr	r1, [r7, #0]
 8048d5a:	6878      	ldr	r0, [r7, #4]
 8048d5c:	f000 fd3b 	bl	80497d6 <USBD_CtlError>
      break;
 8048d60:	bf00      	nop
  }

  return ret;
 8048d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8048d64:	4618      	mov	r0, r3
 8048d66:	3710      	adds	r7, #16
 8048d68:	46bd      	mov	sp, r7
 8048d6a:	bd80      	pop	{r7, pc}

08048d6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8048d6c:	b580      	push	{r7, lr}
 8048d6e:	b084      	sub	sp, #16
 8048d70:	af00      	add	r7, sp, #0
 8048d72:	6078      	str	r0, [r7, #4]
 8048d74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8048d76:	2300      	movs	r3, #0
 8048d78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8048d7a:	683b      	ldr	r3, [r7, #0]
 8048d7c:	889b      	ldrh	r3, [r3, #4]
 8048d7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8048d80:	683b      	ldr	r3, [r7, #0]
 8048d82:	781b      	ldrb	r3, [r3, #0]
 8048d84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8048d88:	2b40      	cmp	r3, #64	@ 0x40
 8048d8a:	d007      	beq.n	8048d9c <USBD_StdEPReq+0x30>
 8048d8c:	2b40      	cmp	r3, #64	@ 0x40
 8048d8e:	f200 817f 	bhi.w	8049090 <USBD_StdEPReq+0x324>
 8048d92:	2b00      	cmp	r3, #0
 8048d94:	d02a      	beq.n	8048dec <USBD_StdEPReq+0x80>
 8048d96:	2b20      	cmp	r3, #32
 8048d98:	f040 817a 	bne.w	8049090 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8048d9c:	7bbb      	ldrb	r3, [r7, #14]
 8048d9e:	4619      	mov	r1, r3
 8048da0:	6878      	ldr	r0, [r7, #4]
 8048da2:	f7ff febd 	bl	8048b20 <USBD_CoreFindEP>
 8048da6:	4603      	mov	r3, r0
 8048da8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8048daa:	7b7b      	ldrb	r3, [r7, #13]
 8048dac:	2bff      	cmp	r3, #255	@ 0xff
 8048dae:	f000 8174 	beq.w	804909a <USBD_StdEPReq+0x32e>
 8048db2:	7b7b      	ldrb	r3, [r7, #13]
 8048db4:	2b00      	cmp	r3, #0
 8048db6:	f040 8170 	bne.w	804909a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8048dba:	7b7a      	ldrb	r2, [r7, #13]
 8048dbc:	687b      	ldr	r3, [r7, #4]
 8048dbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8048dc2:	7b7a      	ldrb	r2, [r7, #13]
 8048dc4:	687b      	ldr	r3, [r7, #4]
 8048dc6:	32ae      	adds	r2, #174	@ 0xae
 8048dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048dcc:	689b      	ldr	r3, [r3, #8]
 8048dce:	2b00      	cmp	r3, #0
 8048dd0:	f000 8163 	beq.w	804909a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8048dd4:	7b7a      	ldrb	r2, [r7, #13]
 8048dd6:	687b      	ldr	r3, [r7, #4]
 8048dd8:	32ae      	adds	r2, #174	@ 0xae
 8048dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048dde:	689b      	ldr	r3, [r3, #8]
 8048de0:	6839      	ldr	r1, [r7, #0]
 8048de2:	6878      	ldr	r0, [r7, #4]
 8048de4:	4798      	blx	r3
 8048de6:	4603      	mov	r3, r0
 8048de8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8048dea:	e156      	b.n	804909a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8048dec:	683b      	ldr	r3, [r7, #0]
 8048dee:	785b      	ldrb	r3, [r3, #1]
 8048df0:	2b03      	cmp	r3, #3
 8048df2:	d008      	beq.n	8048e06 <USBD_StdEPReq+0x9a>
 8048df4:	2b03      	cmp	r3, #3
 8048df6:	f300 8145 	bgt.w	8049084 <USBD_StdEPReq+0x318>
 8048dfa:	2b00      	cmp	r3, #0
 8048dfc:	f000 809b 	beq.w	8048f36 <USBD_StdEPReq+0x1ca>
 8048e00:	2b01      	cmp	r3, #1
 8048e02:	d03c      	beq.n	8048e7e <USBD_StdEPReq+0x112>
 8048e04:	e13e      	b.n	8049084 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8048e06:	687b      	ldr	r3, [r7, #4]
 8048e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048e0c:	b2db      	uxtb	r3, r3
 8048e0e:	2b02      	cmp	r3, #2
 8048e10:	d002      	beq.n	8048e18 <USBD_StdEPReq+0xac>
 8048e12:	2b03      	cmp	r3, #3
 8048e14:	d016      	beq.n	8048e44 <USBD_StdEPReq+0xd8>
 8048e16:	e02c      	b.n	8048e72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8048e18:	7bbb      	ldrb	r3, [r7, #14]
 8048e1a:	2b00      	cmp	r3, #0
 8048e1c:	d00d      	beq.n	8048e3a <USBD_StdEPReq+0xce>
 8048e1e:	7bbb      	ldrb	r3, [r7, #14]
 8048e20:	2b80      	cmp	r3, #128	@ 0x80
 8048e22:	d00a      	beq.n	8048e3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8048e24:	7bbb      	ldrb	r3, [r7, #14]
 8048e26:	4619      	mov	r1, r3
 8048e28:	6878      	ldr	r0, [r7, #4]
 8048e2a:	f002 f997 	bl	804b15c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8048e2e:	2180      	movs	r1, #128	@ 0x80
 8048e30:	6878      	ldr	r0, [r7, #4]
 8048e32:	f002 f993 	bl	804b15c <USBD_LL_StallEP>
 8048e36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8048e38:	e020      	b.n	8048e7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8048e3a:	6839      	ldr	r1, [r7, #0]
 8048e3c:	6878      	ldr	r0, [r7, #4]
 8048e3e:	f000 fcca 	bl	80497d6 <USBD_CtlError>
              break;
 8048e42:	e01b      	b.n	8048e7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8048e44:	683b      	ldr	r3, [r7, #0]
 8048e46:	885b      	ldrh	r3, [r3, #2]
 8048e48:	2b00      	cmp	r3, #0
 8048e4a:	d10e      	bne.n	8048e6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8048e4c:	7bbb      	ldrb	r3, [r7, #14]
 8048e4e:	2b00      	cmp	r3, #0
 8048e50:	d00b      	beq.n	8048e6a <USBD_StdEPReq+0xfe>
 8048e52:	7bbb      	ldrb	r3, [r7, #14]
 8048e54:	2b80      	cmp	r3, #128	@ 0x80
 8048e56:	d008      	beq.n	8048e6a <USBD_StdEPReq+0xfe>
 8048e58:	683b      	ldr	r3, [r7, #0]
 8048e5a:	88db      	ldrh	r3, [r3, #6]
 8048e5c:	2b00      	cmp	r3, #0
 8048e5e:	d104      	bne.n	8048e6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8048e60:	7bbb      	ldrb	r3, [r7, #14]
 8048e62:	4619      	mov	r1, r3
 8048e64:	6878      	ldr	r0, [r7, #4]
 8048e66:	f002 f979 	bl	804b15c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8048e6a:	6878      	ldr	r0, [r7, #4]
 8048e6c:	f001 fd02 	bl	804a874 <USBD_CtlSendStatus>

              break;
 8048e70:	e004      	b.n	8048e7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8048e72:	6839      	ldr	r1, [r7, #0]
 8048e74:	6878      	ldr	r0, [r7, #4]
 8048e76:	f000 fcae 	bl	80497d6 <USBD_CtlError>
              break;
 8048e7a:	bf00      	nop
          }
          break;
 8048e7c:	e107      	b.n	804908e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8048e7e:	687b      	ldr	r3, [r7, #4]
 8048e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048e84:	b2db      	uxtb	r3, r3
 8048e86:	2b02      	cmp	r3, #2
 8048e88:	d002      	beq.n	8048e90 <USBD_StdEPReq+0x124>
 8048e8a:	2b03      	cmp	r3, #3
 8048e8c:	d016      	beq.n	8048ebc <USBD_StdEPReq+0x150>
 8048e8e:	e04b      	b.n	8048f28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8048e90:	7bbb      	ldrb	r3, [r7, #14]
 8048e92:	2b00      	cmp	r3, #0
 8048e94:	d00d      	beq.n	8048eb2 <USBD_StdEPReq+0x146>
 8048e96:	7bbb      	ldrb	r3, [r7, #14]
 8048e98:	2b80      	cmp	r3, #128	@ 0x80
 8048e9a:	d00a      	beq.n	8048eb2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8048e9c:	7bbb      	ldrb	r3, [r7, #14]
 8048e9e:	4619      	mov	r1, r3
 8048ea0:	6878      	ldr	r0, [r7, #4]
 8048ea2:	f002 f95b 	bl	804b15c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8048ea6:	2180      	movs	r1, #128	@ 0x80
 8048ea8:	6878      	ldr	r0, [r7, #4]
 8048eaa:	f002 f957 	bl	804b15c <USBD_LL_StallEP>
 8048eae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8048eb0:	e040      	b.n	8048f34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8048eb2:	6839      	ldr	r1, [r7, #0]
 8048eb4:	6878      	ldr	r0, [r7, #4]
 8048eb6:	f000 fc8e 	bl	80497d6 <USBD_CtlError>
              break;
 8048eba:	e03b      	b.n	8048f34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8048ebc:	683b      	ldr	r3, [r7, #0]
 8048ebe:	885b      	ldrh	r3, [r3, #2]
 8048ec0:	2b00      	cmp	r3, #0
 8048ec2:	d136      	bne.n	8048f32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8048ec4:	7bbb      	ldrb	r3, [r7, #14]
 8048ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8048eca:	2b00      	cmp	r3, #0
 8048ecc:	d004      	beq.n	8048ed8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8048ece:	7bbb      	ldrb	r3, [r7, #14]
 8048ed0:	4619      	mov	r1, r3
 8048ed2:	6878      	ldr	r0, [r7, #4]
 8048ed4:	f002 f961 	bl	804b19a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8048ed8:	6878      	ldr	r0, [r7, #4]
 8048eda:	f001 fccb 	bl	804a874 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8048ede:	7bbb      	ldrb	r3, [r7, #14]
 8048ee0:	4619      	mov	r1, r3
 8048ee2:	6878      	ldr	r0, [r7, #4]
 8048ee4:	f7ff fe1c 	bl	8048b20 <USBD_CoreFindEP>
 8048ee8:	4603      	mov	r3, r0
 8048eea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8048eec:	7b7b      	ldrb	r3, [r7, #13]
 8048eee:	2bff      	cmp	r3, #255	@ 0xff
 8048ef0:	d01f      	beq.n	8048f32 <USBD_StdEPReq+0x1c6>
 8048ef2:	7b7b      	ldrb	r3, [r7, #13]
 8048ef4:	2b00      	cmp	r3, #0
 8048ef6:	d11c      	bne.n	8048f32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8048ef8:	7b7a      	ldrb	r2, [r7, #13]
 8048efa:	687b      	ldr	r3, [r7, #4]
 8048efc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8048f00:	7b7a      	ldrb	r2, [r7, #13]
 8048f02:	687b      	ldr	r3, [r7, #4]
 8048f04:	32ae      	adds	r2, #174	@ 0xae
 8048f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048f0a:	689b      	ldr	r3, [r3, #8]
 8048f0c:	2b00      	cmp	r3, #0
 8048f0e:	d010      	beq.n	8048f32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8048f10:	7b7a      	ldrb	r2, [r7, #13]
 8048f12:	687b      	ldr	r3, [r7, #4]
 8048f14:	32ae      	adds	r2, #174	@ 0xae
 8048f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048f1a:	689b      	ldr	r3, [r3, #8]
 8048f1c:	6839      	ldr	r1, [r7, #0]
 8048f1e:	6878      	ldr	r0, [r7, #4]
 8048f20:	4798      	blx	r3
 8048f22:	4603      	mov	r3, r0
 8048f24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8048f26:	e004      	b.n	8048f32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8048f28:	6839      	ldr	r1, [r7, #0]
 8048f2a:	6878      	ldr	r0, [r7, #4]
 8048f2c:	f000 fc53 	bl	80497d6 <USBD_CtlError>
              break;
 8048f30:	e000      	b.n	8048f34 <USBD_StdEPReq+0x1c8>
              break;
 8048f32:	bf00      	nop
          }
          break;
 8048f34:	e0ab      	b.n	804908e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8048f36:	687b      	ldr	r3, [r7, #4]
 8048f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048f3c:	b2db      	uxtb	r3, r3
 8048f3e:	2b02      	cmp	r3, #2
 8048f40:	d002      	beq.n	8048f48 <USBD_StdEPReq+0x1dc>
 8048f42:	2b03      	cmp	r3, #3
 8048f44:	d032      	beq.n	8048fac <USBD_StdEPReq+0x240>
 8048f46:	e097      	b.n	8049078 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8048f48:	7bbb      	ldrb	r3, [r7, #14]
 8048f4a:	2b00      	cmp	r3, #0
 8048f4c:	d007      	beq.n	8048f5e <USBD_StdEPReq+0x1f2>
 8048f4e:	7bbb      	ldrb	r3, [r7, #14]
 8048f50:	2b80      	cmp	r3, #128	@ 0x80
 8048f52:	d004      	beq.n	8048f5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8048f54:	6839      	ldr	r1, [r7, #0]
 8048f56:	6878      	ldr	r0, [r7, #4]
 8048f58:	f000 fc3d 	bl	80497d6 <USBD_CtlError>
                break;
 8048f5c:	e091      	b.n	8049082 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8048f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8048f62:	2b00      	cmp	r3, #0
 8048f64:	da0b      	bge.n	8048f7e <USBD_StdEPReq+0x212>
 8048f66:	7bbb      	ldrb	r3, [r7, #14]
 8048f68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8048f6c:	4613      	mov	r3, r2
 8048f6e:	009b      	lsls	r3, r3, #2
 8048f70:	4413      	add	r3, r2
 8048f72:	009b      	lsls	r3, r3, #2
 8048f74:	3310      	adds	r3, #16
 8048f76:	687a      	ldr	r2, [r7, #4]
 8048f78:	4413      	add	r3, r2
 8048f7a:	3304      	adds	r3, #4
 8048f7c:	e00b      	b.n	8048f96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8048f7e:	7bbb      	ldrb	r3, [r7, #14]
 8048f80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8048f84:	4613      	mov	r3, r2
 8048f86:	009b      	lsls	r3, r3, #2
 8048f88:	4413      	add	r3, r2
 8048f8a:	009b      	lsls	r3, r3, #2
 8048f8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8048f90:	687a      	ldr	r2, [r7, #4]
 8048f92:	4413      	add	r3, r2
 8048f94:	3304      	adds	r3, #4
 8048f96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8048f98:	68bb      	ldr	r3, [r7, #8]
 8048f9a:	2200      	movs	r2, #0
 8048f9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8048f9e:	68bb      	ldr	r3, [r7, #8]
 8048fa0:	2202      	movs	r2, #2
 8048fa2:	4619      	mov	r1, r3
 8048fa4:	6878      	ldr	r0, [r7, #4]
 8048fa6:	f001 fc0b 	bl	804a7c0 <USBD_CtlSendData>
              break;
 8048faa:	e06a      	b.n	8049082 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8048fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8048fb0:	2b00      	cmp	r3, #0
 8048fb2:	da11      	bge.n	8048fd8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8048fb4:	7bbb      	ldrb	r3, [r7, #14]
 8048fb6:	f003 020f 	and.w	r2, r3, #15
 8048fba:	6879      	ldr	r1, [r7, #4]
 8048fbc:	4613      	mov	r3, r2
 8048fbe:	009b      	lsls	r3, r3, #2
 8048fc0:	4413      	add	r3, r2
 8048fc2:	009b      	lsls	r3, r3, #2
 8048fc4:	440b      	add	r3, r1
 8048fc6:	3324      	adds	r3, #36	@ 0x24
 8048fc8:	881b      	ldrh	r3, [r3, #0]
 8048fca:	2b00      	cmp	r3, #0
 8048fcc:	d117      	bne.n	8048ffe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8048fce:	6839      	ldr	r1, [r7, #0]
 8048fd0:	6878      	ldr	r0, [r7, #4]
 8048fd2:	f000 fc00 	bl	80497d6 <USBD_CtlError>
                  break;
 8048fd6:	e054      	b.n	8049082 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8048fd8:	7bbb      	ldrb	r3, [r7, #14]
 8048fda:	f003 020f 	and.w	r2, r3, #15
 8048fde:	6879      	ldr	r1, [r7, #4]
 8048fe0:	4613      	mov	r3, r2
 8048fe2:	009b      	lsls	r3, r3, #2
 8048fe4:	4413      	add	r3, r2
 8048fe6:	009b      	lsls	r3, r3, #2
 8048fe8:	440b      	add	r3, r1
 8048fea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8048fee:	881b      	ldrh	r3, [r3, #0]
 8048ff0:	2b00      	cmp	r3, #0
 8048ff2:	d104      	bne.n	8048ffe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8048ff4:	6839      	ldr	r1, [r7, #0]
 8048ff6:	6878      	ldr	r0, [r7, #4]
 8048ff8:	f000 fbed 	bl	80497d6 <USBD_CtlError>
                  break;
 8048ffc:	e041      	b.n	8049082 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8048ffe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8049002:	2b00      	cmp	r3, #0
 8049004:	da0b      	bge.n	804901e <USBD_StdEPReq+0x2b2>
 8049006:	7bbb      	ldrb	r3, [r7, #14]
 8049008:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804900c:	4613      	mov	r3, r2
 804900e:	009b      	lsls	r3, r3, #2
 8049010:	4413      	add	r3, r2
 8049012:	009b      	lsls	r3, r3, #2
 8049014:	3310      	adds	r3, #16
 8049016:	687a      	ldr	r2, [r7, #4]
 8049018:	4413      	add	r3, r2
 804901a:	3304      	adds	r3, #4
 804901c:	e00b      	b.n	8049036 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 804901e:	7bbb      	ldrb	r3, [r7, #14]
 8049020:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8049024:	4613      	mov	r3, r2
 8049026:	009b      	lsls	r3, r3, #2
 8049028:	4413      	add	r3, r2
 804902a:	009b      	lsls	r3, r3, #2
 804902c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8049030:	687a      	ldr	r2, [r7, #4]
 8049032:	4413      	add	r3, r2
 8049034:	3304      	adds	r3, #4
 8049036:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8049038:	7bbb      	ldrb	r3, [r7, #14]
 804903a:	2b00      	cmp	r3, #0
 804903c:	d002      	beq.n	8049044 <USBD_StdEPReq+0x2d8>
 804903e:	7bbb      	ldrb	r3, [r7, #14]
 8049040:	2b80      	cmp	r3, #128	@ 0x80
 8049042:	d103      	bne.n	804904c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8049044:	68bb      	ldr	r3, [r7, #8]
 8049046:	2200      	movs	r2, #0
 8049048:	601a      	str	r2, [r3, #0]
 804904a:	e00e      	b.n	804906a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 804904c:	7bbb      	ldrb	r3, [r7, #14]
 804904e:	4619      	mov	r1, r3
 8049050:	6878      	ldr	r0, [r7, #4]
 8049052:	f002 f8c1 	bl	804b1d8 <USBD_LL_IsStallEP>
 8049056:	4603      	mov	r3, r0
 8049058:	2b00      	cmp	r3, #0
 804905a:	d003      	beq.n	8049064 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 804905c:	68bb      	ldr	r3, [r7, #8]
 804905e:	2201      	movs	r2, #1
 8049060:	601a      	str	r2, [r3, #0]
 8049062:	e002      	b.n	804906a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8049064:	68bb      	ldr	r3, [r7, #8]
 8049066:	2200      	movs	r2, #0
 8049068:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 804906a:	68bb      	ldr	r3, [r7, #8]
 804906c:	2202      	movs	r2, #2
 804906e:	4619      	mov	r1, r3
 8049070:	6878      	ldr	r0, [r7, #4]
 8049072:	f001 fba5 	bl	804a7c0 <USBD_CtlSendData>
              break;
 8049076:	e004      	b.n	8049082 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8049078:	6839      	ldr	r1, [r7, #0]
 804907a:	6878      	ldr	r0, [r7, #4]
 804907c:	f000 fbab 	bl	80497d6 <USBD_CtlError>
              break;
 8049080:	bf00      	nop
          }
          break;
 8049082:	e004      	b.n	804908e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8049084:	6839      	ldr	r1, [r7, #0]
 8049086:	6878      	ldr	r0, [r7, #4]
 8049088:	f000 fba5 	bl	80497d6 <USBD_CtlError>
          break;
 804908c:	bf00      	nop
      }
      break;
 804908e:	e005      	b.n	804909c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8049090:	6839      	ldr	r1, [r7, #0]
 8049092:	6878      	ldr	r0, [r7, #4]
 8049094:	f000 fb9f 	bl	80497d6 <USBD_CtlError>
      break;
 8049098:	e000      	b.n	804909c <USBD_StdEPReq+0x330>
      break;
 804909a:	bf00      	nop
  }

  return ret;
 804909c:	7bfb      	ldrb	r3, [r7, #15]
}
 804909e:	4618      	mov	r0, r3
 80490a0:	3710      	adds	r7, #16
 80490a2:	46bd      	mov	sp, r7
 80490a4:	bd80      	pop	{r7, pc}
	...

080490a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80490a8:	b580      	push	{r7, lr}
 80490aa:	b086      	sub	sp, #24
 80490ac:	af00      	add	r7, sp, #0
 80490ae:	6078      	str	r0, [r7, #4]
 80490b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80490b2:	2300      	movs	r3, #0
 80490b4:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 80490b6:	2300      	movs	r3, #0
 80490b8:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 80490ba:	2300      	movs	r3, #0
 80490bc:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 80490be:	683b      	ldr	r3, [r7, #0]
 80490c0:	885b      	ldrh	r3, [r3, #2]
 80490c2:	0a1b      	lsrs	r3, r3, #8
 80490c4:	b29b      	uxth	r3, r3
 80490c6:	3b01      	subs	r3, #1
 80490c8:	2b0e      	cmp	r3, #14
 80490ca:	f200 8179 	bhi.w	80493c0 <USBD_GetDescriptor+0x318>
 80490ce:	a201      	add	r2, pc, #4	@ (adr r2, 80490d4 <USBD_GetDescriptor+0x2c>)
 80490d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80490d4:	08049145 	.word	0x08049145
 80490d8:	0804915d 	.word	0x0804915d
 80490dc:	0804919d 	.word	0x0804919d
 80490e0:	080493c1 	.word	0x080493c1
 80490e4:	080493c1 	.word	0x080493c1
 80490e8:	08049361 	.word	0x08049361
 80490ec:	0804938d 	.word	0x0804938d
 80490f0:	080493c1 	.word	0x080493c1
 80490f4:	080493c1 	.word	0x080493c1
 80490f8:	080493c1 	.word	0x080493c1
 80490fc:	080493c1 	.word	0x080493c1
 8049100:	080493c1 	.word	0x080493c1
 8049104:	080493c1 	.word	0x080493c1
 8049108:	080493c1 	.word	0x080493c1
 804910c:	08049111 	.word	0x08049111
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8049110:	687b      	ldr	r3, [r7, #4]
 8049112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049116:	69db      	ldr	r3, [r3, #28]
 8049118:	2b00      	cmp	r3, #0
 804911a:	d00b      	beq.n	8049134 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 804911c:	687b      	ldr	r3, [r7, #4]
 804911e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049122:	69db      	ldr	r3, [r3, #28]
 8049124:	687a      	ldr	r2, [r7, #4]
 8049126:	7c12      	ldrb	r2, [r2, #16]
 8049128:	f107 010a 	add.w	r1, r7, #10
 804912c:	4610      	mov	r0, r2
 804912e:	4798      	blx	r3
 8049130:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8049132:	e14d      	b.n	80493d0 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 8049134:	6839      	ldr	r1, [r7, #0]
 8049136:	6878      	ldr	r0, [r7, #4]
 8049138:	f000 fb4d 	bl	80497d6 <USBD_CtlError>
        err++;
 804913c:	7cfb      	ldrb	r3, [r7, #19]
 804913e:	3301      	adds	r3, #1
 8049140:	74fb      	strb	r3, [r7, #19]
      break;
 8049142:	e145      	b.n	80493d0 <USBD_GetDescriptor+0x328>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8049144:	687b      	ldr	r3, [r7, #4]
 8049146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804914a:	681b      	ldr	r3, [r3, #0]
 804914c:	687a      	ldr	r2, [r7, #4]
 804914e:	7c12      	ldrb	r2, [r2, #16]
 8049150:	f107 010a 	add.w	r1, r7, #10
 8049154:	4610      	mov	r0, r2
 8049156:	4798      	blx	r3
 8049158:	6178      	str	r0, [r7, #20]
      break;
 804915a:	e139      	b.n	80493d0 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 804915c:	687b      	ldr	r3, [r7, #4]
 804915e:	7c1b      	ldrb	r3, [r3, #16]
 8049160:	2b00      	cmp	r3, #0
 8049162:	d10d      	bne.n	8049180 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8049164:	687b      	ldr	r3, [r7, #4]
 8049166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 804916a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804916c:	f107 020a 	add.w	r2, r7, #10
 8049170:	4610      	mov	r0, r2
 8049172:	4798      	blx	r3
 8049174:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8049176:	697b      	ldr	r3, [r7, #20]
 8049178:	3301      	adds	r3, #1
 804917a:	2202      	movs	r2, #2
 804917c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 804917e:	e127      	b.n	80493d0 <USBD_GetDescriptor+0x328>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8049180:	687b      	ldr	r3, [r7, #4]
 8049182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8049186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8049188:	f107 020a 	add.w	r2, r7, #10
 804918c:	4610      	mov	r0, r2
 804918e:	4798      	blx	r3
 8049190:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8049192:	697b      	ldr	r3, [r7, #20]
 8049194:	3301      	adds	r3, #1
 8049196:	2202      	movs	r2, #2
 8049198:	701a      	strb	r2, [r3, #0]
      break;
 804919a:	e119      	b.n	80493d0 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 804919c:	683b      	ldr	r3, [r7, #0]
 804919e:	885b      	ldrh	r3, [r3, #2]
 80491a0:	b2db      	uxtb	r3, r3
 80491a2:	2b05      	cmp	r3, #5
 80491a4:	f200 80ac 	bhi.w	8049300 <USBD_GetDescriptor+0x258>
 80491a8:	a201      	add	r2, pc, #4	@ (adr r2, 80491b0 <USBD_GetDescriptor+0x108>)
 80491aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80491ae:	bf00      	nop
 80491b0:	080491c9 	.word	0x080491c9
 80491b4:	080491fd 	.word	0x080491fd
 80491b8:	08049231 	.word	0x08049231
 80491bc:	08049265 	.word	0x08049265
 80491c0:	08049299 	.word	0x08049299
 80491c4:	080492cd 	.word	0x080492cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80491c8:	687b      	ldr	r3, [r7, #4]
 80491ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80491ce:	685b      	ldr	r3, [r3, #4]
 80491d0:	2b00      	cmp	r3, #0
 80491d2:	d00b      	beq.n	80491ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80491d4:	687b      	ldr	r3, [r7, #4]
 80491d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80491da:	685b      	ldr	r3, [r3, #4]
 80491dc:	687a      	ldr	r2, [r7, #4]
 80491de:	7c12      	ldrb	r2, [r2, #16]
 80491e0:	f107 010a 	add.w	r1, r7, #10
 80491e4:	4610      	mov	r0, r2
 80491e6:	4798      	blx	r3
 80491e8:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80491ea:	e0b8      	b.n	804935e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 80491ec:	6839      	ldr	r1, [r7, #0]
 80491ee:	6878      	ldr	r0, [r7, #4]
 80491f0:	f000 faf1 	bl	80497d6 <USBD_CtlError>
            err++;
 80491f4:	7cfb      	ldrb	r3, [r7, #19]
 80491f6:	3301      	adds	r3, #1
 80491f8:	74fb      	strb	r3, [r7, #19]
          break;
 80491fa:	e0b0      	b.n	804935e <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80491fc:	687b      	ldr	r3, [r7, #4]
 80491fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049202:	689b      	ldr	r3, [r3, #8]
 8049204:	2b00      	cmp	r3, #0
 8049206:	d00b      	beq.n	8049220 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8049208:	687b      	ldr	r3, [r7, #4]
 804920a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804920e:	689b      	ldr	r3, [r3, #8]
 8049210:	687a      	ldr	r2, [r7, #4]
 8049212:	7c12      	ldrb	r2, [r2, #16]
 8049214:	f107 010a 	add.w	r1, r7, #10
 8049218:	4610      	mov	r0, r2
 804921a:	4798      	blx	r3
 804921c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 804921e:	e09e      	b.n	804935e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8049220:	6839      	ldr	r1, [r7, #0]
 8049222:	6878      	ldr	r0, [r7, #4]
 8049224:	f000 fad7 	bl	80497d6 <USBD_CtlError>
            err++;
 8049228:	7cfb      	ldrb	r3, [r7, #19]
 804922a:	3301      	adds	r3, #1
 804922c:	74fb      	strb	r3, [r7, #19]
          break;
 804922e:	e096      	b.n	804935e <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8049230:	687b      	ldr	r3, [r7, #4]
 8049232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049236:	68db      	ldr	r3, [r3, #12]
 8049238:	2b00      	cmp	r3, #0
 804923a:	d00b      	beq.n	8049254 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 804923c:	687b      	ldr	r3, [r7, #4]
 804923e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049242:	68db      	ldr	r3, [r3, #12]
 8049244:	687a      	ldr	r2, [r7, #4]
 8049246:	7c12      	ldrb	r2, [r2, #16]
 8049248:	f107 010a 	add.w	r1, r7, #10
 804924c:	4610      	mov	r0, r2
 804924e:	4798      	blx	r3
 8049250:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8049252:	e084      	b.n	804935e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8049254:	6839      	ldr	r1, [r7, #0]
 8049256:	6878      	ldr	r0, [r7, #4]
 8049258:	f000 fabd 	bl	80497d6 <USBD_CtlError>
            err++;
 804925c:	7cfb      	ldrb	r3, [r7, #19]
 804925e:	3301      	adds	r3, #1
 8049260:	74fb      	strb	r3, [r7, #19]
          break;
 8049262:	e07c      	b.n	804935e <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8049264:	687b      	ldr	r3, [r7, #4]
 8049266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804926a:	691b      	ldr	r3, [r3, #16]
 804926c:	2b00      	cmp	r3, #0
 804926e:	d00b      	beq.n	8049288 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8049270:	687b      	ldr	r3, [r7, #4]
 8049272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049276:	691b      	ldr	r3, [r3, #16]
 8049278:	687a      	ldr	r2, [r7, #4]
 804927a:	7c12      	ldrb	r2, [r2, #16]
 804927c:	f107 010a 	add.w	r1, r7, #10
 8049280:	4610      	mov	r0, r2
 8049282:	4798      	blx	r3
 8049284:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8049286:	e06a      	b.n	804935e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8049288:	6839      	ldr	r1, [r7, #0]
 804928a:	6878      	ldr	r0, [r7, #4]
 804928c:	f000 faa3 	bl	80497d6 <USBD_CtlError>
            err++;
 8049290:	7cfb      	ldrb	r3, [r7, #19]
 8049292:	3301      	adds	r3, #1
 8049294:	74fb      	strb	r3, [r7, #19]
          break;
 8049296:	e062      	b.n	804935e <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8049298:	687b      	ldr	r3, [r7, #4]
 804929a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804929e:	695b      	ldr	r3, [r3, #20]
 80492a0:	2b00      	cmp	r3, #0
 80492a2:	d00b      	beq.n	80492bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80492a4:	687b      	ldr	r3, [r7, #4]
 80492a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80492aa:	695b      	ldr	r3, [r3, #20]
 80492ac:	687a      	ldr	r2, [r7, #4]
 80492ae:	7c12      	ldrb	r2, [r2, #16]
 80492b0:	f107 010a 	add.w	r1, r7, #10
 80492b4:	4610      	mov	r0, r2
 80492b6:	4798      	blx	r3
 80492b8:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80492ba:	e050      	b.n	804935e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 80492bc:	6839      	ldr	r1, [r7, #0]
 80492be:	6878      	ldr	r0, [r7, #4]
 80492c0:	f000 fa89 	bl	80497d6 <USBD_CtlError>
            err++;
 80492c4:	7cfb      	ldrb	r3, [r7, #19]
 80492c6:	3301      	adds	r3, #1
 80492c8:	74fb      	strb	r3, [r7, #19]
          break;
 80492ca:	e048      	b.n	804935e <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80492cc:	687b      	ldr	r3, [r7, #4]
 80492ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80492d2:	699b      	ldr	r3, [r3, #24]
 80492d4:	2b00      	cmp	r3, #0
 80492d6:	d00b      	beq.n	80492f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80492d8:	687b      	ldr	r3, [r7, #4]
 80492da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80492de:	699b      	ldr	r3, [r3, #24]
 80492e0:	687a      	ldr	r2, [r7, #4]
 80492e2:	7c12      	ldrb	r2, [r2, #16]
 80492e4:	f107 010a 	add.w	r1, r7, #10
 80492e8:	4610      	mov	r0, r2
 80492ea:	4798      	blx	r3
 80492ec:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80492ee:	e036      	b.n	804935e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 80492f0:	6839      	ldr	r1, [r7, #0]
 80492f2:	6878      	ldr	r0, [r7, #4]
 80492f4:	f000 fa6f 	bl	80497d6 <USBD_CtlError>
            err++;
 80492f8:	7cfb      	ldrb	r3, [r7, #19]
 80492fa:	3301      	adds	r3, #1
 80492fc:	74fb      	strb	r3, [r7, #19]
          break;
 80492fe:	e02e      	b.n	804935e <USBD_GetDescriptor+0x2b6>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 8049300:	2300      	movs	r3, #0
 8049302:	617b      	str	r3, [r7, #20]

          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8049304:	2300      	movs	r3, #0
 8049306:	60fb      	str	r3, [r7, #12]
 8049308:	e020      	b.n	804934c <USBD_GetDescriptor+0x2a4>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 804930a:	687b      	ldr	r3, [r7, #4]
 804930c:	68fa      	ldr	r2, [r7, #12]
 804930e:	32ae      	adds	r2, #174	@ 0xae
 8049310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8049316:	2b00      	cmp	r3, #0
 8049318:	d015      	beq.n	8049346 <USBD_GetDescriptor+0x29e>
            {
              pdev->classId = idx;
 804931a:	687b      	ldr	r3, [r7, #4]
 804931c:	68fa      	ldr	r2, [r7, #12]
 804931e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 8049322:	687b      	ldr	r3, [r7, #4]
 8049324:	68fa      	ldr	r2, [r7, #12]
 8049326:	32ae      	adds	r2, #174	@ 0xae
 8049328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804932c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804932e:	683a      	ldr	r2, [r7, #0]
 8049330:	8852      	ldrh	r2, [r2, #2]
 8049332:	b2d1      	uxtb	r1, r2
 8049334:	f107 020a 	add.w	r2, r7, #10
 8049338:	6878      	ldr	r0, [r7, #4]
 804933a:	4798      	blx	r3
 804933c:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 804933e:	697b      	ldr	r3, [r7, #20]
 8049340:	2b00      	cmp	r3, #0
 8049342:	d10a      	bne.n	804935a <USBD_GetDescriptor+0x2b2>
              {
                continue;
 8049344:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8049346:	68fb      	ldr	r3, [r7, #12]
 8049348:	3301      	adds	r3, #1
 804934a:	60fb      	str	r3, [r7, #12]
 804934c:	687b      	ldr	r3, [r7, #4]
 804934e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8049352:	68fa      	ldr	r2, [r7, #12]
 8049354:	429a      	cmp	r2, r3
 8049356:	d3d8      	bcc.n	804930a <USBD_GetDescriptor+0x262>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8049358:	e000      	b.n	804935c <USBD_GetDescriptor+0x2b4>
                break;
 804935a:	bf00      	nop
          break;
 804935c:	bf00      	nop
      }
      break;
 804935e:	e037      	b.n	80493d0 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8049360:	687b      	ldr	r3, [r7, #4]
 8049362:	7c1b      	ldrb	r3, [r3, #16]
 8049364:	2b00      	cmp	r3, #0
 8049366:	d109      	bne.n	804937c <USBD_GetDescriptor+0x2d4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8049368:	687b      	ldr	r3, [r7, #4]
 804936a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 804936e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8049370:	f107 020a 	add.w	r2, r7, #10
 8049374:	4610      	mov	r0, r2
 8049376:	4798      	blx	r3
 8049378:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 804937a:	e029      	b.n	80493d0 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 804937c:	6839      	ldr	r1, [r7, #0]
 804937e:	6878      	ldr	r0, [r7, #4]
 8049380:	f000 fa29 	bl	80497d6 <USBD_CtlError>
        err++;
 8049384:	7cfb      	ldrb	r3, [r7, #19]
 8049386:	3301      	adds	r3, #1
 8049388:	74fb      	strb	r3, [r7, #19]
      break;
 804938a:	e021      	b.n	80493d0 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 804938c:	687b      	ldr	r3, [r7, #4]
 804938e:	7c1b      	ldrb	r3, [r3, #16]
 8049390:	2b00      	cmp	r3, #0
 8049392:	d10d      	bne.n	80493b0 <USBD_GetDescriptor+0x308>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8049394:	687b      	ldr	r3, [r7, #4]
 8049396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 804939a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804939c:	f107 020a 	add.w	r2, r7, #10
 80493a0:	4610      	mov	r0, r2
 80493a2:	4798      	blx	r3
 80493a4:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80493a6:	697b      	ldr	r3, [r7, #20]
 80493a8:	3301      	adds	r3, #1
 80493aa:	2207      	movs	r2, #7
 80493ac:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80493ae:	e00f      	b.n	80493d0 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 80493b0:	6839      	ldr	r1, [r7, #0]
 80493b2:	6878      	ldr	r0, [r7, #4]
 80493b4:	f000 fa0f 	bl	80497d6 <USBD_CtlError>
        err++;
 80493b8:	7cfb      	ldrb	r3, [r7, #19]
 80493ba:	3301      	adds	r3, #1
 80493bc:	74fb      	strb	r3, [r7, #19]
      break;
 80493be:	e007      	b.n	80493d0 <USBD_GetDescriptor+0x328>

    default:
      USBD_CtlError(pdev, req);
 80493c0:	6839      	ldr	r1, [r7, #0]
 80493c2:	6878      	ldr	r0, [r7, #4]
 80493c4:	f000 fa07 	bl	80497d6 <USBD_CtlError>
      err++;
 80493c8:	7cfb      	ldrb	r3, [r7, #19]
 80493ca:	3301      	adds	r3, #1
 80493cc:	74fb      	strb	r3, [r7, #19]
      break;
 80493ce:	bf00      	nop
  }

  if (err != 0U)
 80493d0:	7cfb      	ldrb	r3, [r7, #19]
 80493d2:	2b00      	cmp	r3, #0
 80493d4:	d11e      	bne.n	8049414 <USBD_GetDescriptor+0x36c>
  {
    return;
  }

  if (req->wLength != 0U)
 80493d6:	683b      	ldr	r3, [r7, #0]
 80493d8:	88db      	ldrh	r3, [r3, #6]
 80493da:	2b00      	cmp	r3, #0
 80493dc:	d016      	beq.n	804940c <USBD_GetDescriptor+0x364>
  {
    if (len != 0U)
 80493de:	897b      	ldrh	r3, [r7, #10]
 80493e0:	2b00      	cmp	r3, #0
 80493e2:	d00e      	beq.n	8049402 <USBD_GetDescriptor+0x35a>
    {
      len = MIN(len, req->wLength);
 80493e4:	683b      	ldr	r3, [r7, #0]
 80493e6:	88da      	ldrh	r2, [r3, #6]
 80493e8:	897b      	ldrh	r3, [r7, #10]
 80493ea:	4293      	cmp	r3, r2
 80493ec:	bf28      	it	cs
 80493ee:	4613      	movcs	r3, r2
 80493f0:	b29b      	uxth	r3, r3
 80493f2:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80493f4:	897b      	ldrh	r3, [r7, #10]
 80493f6:	461a      	mov	r2, r3
 80493f8:	6979      	ldr	r1, [r7, #20]
 80493fa:	6878      	ldr	r0, [r7, #4]
 80493fc:	f001 f9e0 	bl	804a7c0 <USBD_CtlSendData>
 8049400:	e009      	b.n	8049416 <USBD_GetDescriptor+0x36e>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8049402:	6839      	ldr	r1, [r7, #0]
 8049404:	6878      	ldr	r0, [r7, #4]
 8049406:	f000 f9e6 	bl	80497d6 <USBD_CtlError>
 804940a:	e004      	b.n	8049416 <USBD_GetDescriptor+0x36e>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 804940c:	6878      	ldr	r0, [r7, #4]
 804940e:	f001 fa31 	bl	804a874 <USBD_CtlSendStatus>
 8049412:	e000      	b.n	8049416 <USBD_GetDescriptor+0x36e>
    return;
 8049414:	bf00      	nop
  }
}
 8049416:	3718      	adds	r7, #24
 8049418:	46bd      	mov	sp, r7
 804941a:	bd80      	pop	{r7, pc}

0804941c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 804941c:	b580      	push	{r7, lr}
 804941e:	b084      	sub	sp, #16
 8049420:	af00      	add	r7, sp, #0
 8049422:	6078      	str	r0, [r7, #4]
 8049424:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8049426:	683b      	ldr	r3, [r7, #0]
 8049428:	889b      	ldrh	r3, [r3, #4]
 804942a:	2b00      	cmp	r3, #0
 804942c:	d131      	bne.n	8049492 <USBD_SetAddress+0x76>
 804942e:	683b      	ldr	r3, [r7, #0]
 8049430:	88db      	ldrh	r3, [r3, #6]
 8049432:	2b00      	cmp	r3, #0
 8049434:	d12d      	bne.n	8049492 <USBD_SetAddress+0x76>
 8049436:	683b      	ldr	r3, [r7, #0]
 8049438:	885b      	ldrh	r3, [r3, #2]
 804943a:	2b7f      	cmp	r3, #127	@ 0x7f
 804943c:	d829      	bhi.n	8049492 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 804943e:	683b      	ldr	r3, [r7, #0]
 8049440:	885b      	ldrh	r3, [r3, #2]
 8049442:	b2db      	uxtb	r3, r3
 8049444:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8049448:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 804944a:	687b      	ldr	r3, [r7, #4]
 804944c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049450:	b2db      	uxtb	r3, r3
 8049452:	2b03      	cmp	r3, #3
 8049454:	d104      	bne.n	8049460 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8049456:	6839      	ldr	r1, [r7, #0]
 8049458:	6878      	ldr	r0, [r7, #4]
 804945a:	f000 f9bc 	bl	80497d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 804945e:	e01d      	b.n	804949c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8049460:	687b      	ldr	r3, [r7, #4]
 8049462:	7bfa      	ldrb	r2, [r7, #15]
 8049464:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8049468:	7bfb      	ldrb	r3, [r7, #15]
 804946a:	4619      	mov	r1, r3
 804946c:	6878      	ldr	r0, [r7, #4]
 804946e:	f001 fedf 	bl	804b230 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8049472:	6878      	ldr	r0, [r7, #4]
 8049474:	f001 f9fe 	bl	804a874 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8049478:	7bfb      	ldrb	r3, [r7, #15]
 804947a:	2b00      	cmp	r3, #0
 804947c:	d004      	beq.n	8049488 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 804947e:	687b      	ldr	r3, [r7, #4]
 8049480:	2202      	movs	r2, #2
 8049482:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049486:	e009      	b.n	804949c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8049488:	687b      	ldr	r3, [r7, #4]
 804948a:	2201      	movs	r2, #1
 804948c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049490:	e004      	b.n	804949c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8049492:	6839      	ldr	r1, [r7, #0]
 8049494:	6878      	ldr	r0, [r7, #4]
 8049496:	f000 f99e 	bl	80497d6 <USBD_CtlError>
  }
}
 804949a:	bf00      	nop
 804949c:	bf00      	nop
 804949e:	3710      	adds	r7, #16
 80494a0:	46bd      	mov	sp, r7
 80494a2:	bd80      	pop	{r7, pc}

080494a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80494a4:	b580      	push	{r7, lr}
 80494a6:	b084      	sub	sp, #16
 80494a8:	af00      	add	r7, sp, #0
 80494aa:	6078      	str	r0, [r7, #4]
 80494ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80494ae:	2300      	movs	r3, #0
 80494b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80494b2:	683b      	ldr	r3, [r7, #0]
 80494b4:	885b      	ldrh	r3, [r3, #2]
 80494b6:	b2da      	uxtb	r2, r3
 80494b8:	4b4e      	ldr	r3, [pc, #312]	@ (80495f4 <USBD_SetConfig+0x150>)
 80494ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80494bc:	4b4d      	ldr	r3, [pc, #308]	@ (80495f4 <USBD_SetConfig+0x150>)
 80494be:	781b      	ldrb	r3, [r3, #0]
 80494c0:	2b01      	cmp	r3, #1
 80494c2:	d905      	bls.n	80494d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80494c4:	6839      	ldr	r1, [r7, #0]
 80494c6:	6878      	ldr	r0, [r7, #4]
 80494c8:	f000 f985 	bl	80497d6 <USBD_CtlError>
    return USBD_FAIL;
 80494cc:	2303      	movs	r3, #3
 80494ce:	e08c      	b.n	80495ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80494d0:	687b      	ldr	r3, [r7, #4]
 80494d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80494d6:	b2db      	uxtb	r3, r3
 80494d8:	2b02      	cmp	r3, #2
 80494da:	d002      	beq.n	80494e2 <USBD_SetConfig+0x3e>
 80494dc:	2b03      	cmp	r3, #3
 80494de:	d029      	beq.n	8049534 <USBD_SetConfig+0x90>
 80494e0:	e075      	b.n	80495ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80494e2:	4b44      	ldr	r3, [pc, #272]	@ (80495f4 <USBD_SetConfig+0x150>)
 80494e4:	781b      	ldrb	r3, [r3, #0]
 80494e6:	2b00      	cmp	r3, #0
 80494e8:	d020      	beq.n	804952c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80494ea:	4b42      	ldr	r3, [pc, #264]	@ (80495f4 <USBD_SetConfig+0x150>)
 80494ec:	781b      	ldrb	r3, [r3, #0]
 80494ee:	461a      	mov	r2, r3
 80494f0:	687b      	ldr	r3, [r7, #4]
 80494f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80494f4:	4b3f      	ldr	r3, [pc, #252]	@ (80495f4 <USBD_SetConfig+0x150>)
 80494f6:	781b      	ldrb	r3, [r3, #0]
 80494f8:	4619      	mov	r1, r3
 80494fa:	6878      	ldr	r0, [r7, #4]
 80494fc:	f7fe ffcb 	bl	8048496 <USBD_SetClassConfig>
 8049500:	4603      	mov	r3, r0
 8049502:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8049504:	7bfb      	ldrb	r3, [r7, #15]
 8049506:	2b00      	cmp	r3, #0
 8049508:	d008      	beq.n	804951c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 804950a:	6839      	ldr	r1, [r7, #0]
 804950c:	6878      	ldr	r0, [r7, #4]
 804950e:	f000 f962 	bl	80497d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8049512:	687b      	ldr	r3, [r7, #4]
 8049514:	2202      	movs	r2, #2
 8049516:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 804951a:	e065      	b.n	80495e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 804951c:	6878      	ldr	r0, [r7, #4]
 804951e:	f001 f9a9 	bl	804a874 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8049522:	687b      	ldr	r3, [r7, #4]
 8049524:	2203      	movs	r2, #3
 8049526:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 804952a:	e05d      	b.n	80495e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 804952c:	6878      	ldr	r0, [r7, #4]
 804952e:	f001 f9a1 	bl	804a874 <USBD_CtlSendStatus>
      break;
 8049532:	e059      	b.n	80495e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8049534:	4b2f      	ldr	r3, [pc, #188]	@ (80495f4 <USBD_SetConfig+0x150>)
 8049536:	781b      	ldrb	r3, [r3, #0]
 8049538:	2b00      	cmp	r3, #0
 804953a:	d112      	bne.n	8049562 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 804953c:	687b      	ldr	r3, [r7, #4]
 804953e:	2202      	movs	r2, #2
 8049540:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8049544:	4b2b      	ldr	r3, [pc, #172]	@ (80495f4 <USBD_SetConfig+0x150>)
 8049546:	781b      	ldrb	r3, [r3, #0]
 8049548:	461a      	mov	r2, r3
 804954a:	687b      	ldr	r3, [r7, #4]
 804954c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 804954e:	4b29      	ldr	r3, [pc, #164]	@ (80495f4 <USBD_SetConfig+0x150>)
 8049550:	781b      	ldrb	r3, [r3, #0]
 8049552:	4619      	mov	r1, r3
 8049554:	6878      	ldr	r0, [r7, #4]
 8049556:	f7fe ffba 	bl	80484ce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 804955a:	6878      	ldr	r0, [r7, #4]
 804955c:	f001 f98a 	bl	804a874 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8049560:	e042      	b.n	80495e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8049562:	4b24      	ldr	r3, [pc, #144]	@ (80495f4 <USBD_SetConfig+0x150>)
 8049564:	781b      	ldrb	r3, [r3, #0]
 8049566:	461a      	mov	r2, r3
 8049568:	687b      	ldr	r3, [r7, #4]
 804956a:	685b      	ldr	r3, [r3, #4]
 804956c:	429a      	cmp	r2, r3
 804956e:	d02a      	beq.n	80495c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8049570:	687b      	ldr	r3, [r7, #4]
 8049572:	685b      	ldr	r3, [r3, #4]
 8049574:	b2db      	uxtb	r3, r3
 8049576:	4619      	mov	r1, r3
 8049578:	6878      	ldr	r0, [r7, #4]
 804957a:	f7fe ffa8 	bl	80484ce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 804957e:	4b1d      	ldr	r3, [pc, #116]	@ (80495f4 <USBD_SetConfig+0x150>)
 8049580:	781b      	ldrb	r3, [r3, #0]
 8049582:	461a      	mov	r2, r3
 8049584:	687b      	ldr	r3, [r7, #4]
 8049586:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8049588:	4b1a      	ldr	r3, [pc, #104]	@ (80495f4 <USBD_SetConfig+0x150>)
 804958a:	781b      	ldrb	r3, [r3, #0]
 804958c:	4619      	mov	r1, r3
 804958e:	6878      	ldr	r0, [r7, #4]
 8049590:	f7fe ff81 	bl	8048496 <USBD_SetClassConfig>
 8049594:	4603      	mov	r3, r0
 8049596:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8049598:	7bfb      	ldrb	r3, [r7, #15]
 804959a:	2b00      	cmp	r3, #0
 804959c:	d00f      	beq.n	80495be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 804959e:	6839      	ldr	r1, [r7, #0]
 80495a0:	6878      	ldr	r0, [r7, #4]
 80495a2:	f000 f918 	bl	80497d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80495a6:	687b      	ldr	r3, [r7, #4]
 80495a8:	685b      	ldr	r3, [r3, #4]
 80495aa:	b2db      	uxtb	r3, r3
 80495ac:	4619      	mov	r1, r3
 80495ae:	6878      	ldr	r0, [r7, #4]
 80495b0:	f7fe ff8d 	bl	80484ce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80495b4:	687b      	ldr	r3, [r7, #4]
 80495b6:	2202      	movs	r2, #2
 80495b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80495bc:	e014      	b.n	80495e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80495be:	6878      	ldr	r0, [r7, #4]
 80495c0:	f001 f958 	bl	804a874 <USBD_CtlSendStatus>
      break;
 80495c4:	e010      	b.n	80495e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80495c6:	6878      	ldr	r0, [r7, #4]
 80495c8:	f001 f954 	bl	804a874 <USBD_CtlSendStatus>
      break;
 80495cc:	e00c      	b.n	80495e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80495ce:	6839      	ldr	r1, [r7, #0]
 80495d0:	6878      	ldr	r0, [r7, #4]
 80495d2:	f000 f900 	bl	80497d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80495d6:	4b07      	ldr	r3, [pc, #28]	@ (80495f4 <USBD_SetConfig+0x150>)
 80495d8:	781b      	ldrb	r3, [r3, #0]
 80495da:	4619      	mov	r1, r3
 80495dc:	6878      	ldr	r0, [r7, #4]
 80495de:	f7fe ff76 	bl	80484ce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80495e2:	2303      	movs	r3, #3
 80495e4:	73fb      	strb	r3, [r7, #15]
      break;
 80495e6:	bf00      	nop
  }

  return ret;
 80495e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80495ea:	4618      	mov	r0, r3
 80495ec:	3710      	adds	r7, #16
 80495ee:	46bd      	mov	sp, r7
 80495f0:	bd80      	pop	{r7, pc}
 80495f2:	bf00      	nop
 80495f4:	2400021c 	.word	0x2400021c

080495f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80495f8:	b580      	push	{r7, lr}
 80495fa:	b082      	sub	sp, #8
 80495fc:	af00      	add	r7, sp, #0
 80495fe:	6078      	str	r0, [r7, #4]
 8049600:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8049602:	683b      	ldr	r3, [r7, #0]
 8049604:	88db      	ldrh	r3, [r3, #6]
 8049606:	2b01      	cmp	r3, #1
 8049608:	d004      	beq.n	8049614 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 804960a:	6839      	ldr	r1, [r7, #0]
 804960c:	6878      	ldr	r0, [r7, #4]
 804960e:	f000 f8e2 	bl	80497d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8049612:	e023      	b.n	804965c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8049614:	687b      	ldr	r3, [r7, #4]
 8049616:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 804961a:	b2db      	uxtb	r3, r3
 804961c:	2b02      	cmp	r3, #2
 804961e:	dc02      	bgt.n	8049626 <USBD_GetConfig+0x2e>
 8049620:	2b00      	cmp	r3, #0
 8049622:	dc03      	bgt.n	804962c <USBD_GetConfig+0x34>
 8049624:	e015      	b.n	8049652 <USBD_GetConfig+0x5a>
 8049626:	2b03      	cmp	r3, #3
 8049628:	d00b      	beq.n	8049642 <USBD_GetConfig+0x4a>
 804962a:	e012      	b.n	8049652 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 804962c:	687b      	ldr	r3, [r7, #4]
 804962e:	2200      	movs	r2, #0
 8049630:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8049632:	687b      	ldr	r3, [r7, #4]
 8049634:	3308      	adds	r3, #8
 8049636:	2201      	movs	r2, #1
 8049638:	4619      	mov	r1, r3
 804963a:	6878      	ldr	r0, [r7, #4]
 804963c:	f001 f8c0 	bl	804a7c0 <USBD_CtlSendData>
        break;
 8049640:	e00c      	b.n	804965c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8049642:	687b      	ldr	r3, [r7, #4]
 8049644:	3304      	adds	r3, #4
 8049646:	2201      	movs	r2, #1
 8049648:	4619      	mov	r1, r3
 804964a:	6878      	ldr	r0, [r7, #4]
 804964c:	f001 f8b8 	bl	804a7c0 <USBD_CtlSendData>
        break;
 8049650:	e004      	b.n	804965c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8049652:	6839      	ldr	r1, [r7, #0]
 8049654:	6878      	ldr	r0, [r7, #4]
 8049656:	f000 f8be 	bl	80497d6 <USBD_CtlError>
        break;
 804965a:	bf00      	nop
}
 804965c:	bf00      	nop
 804965e:	3708      	adds	r7, #8
 8049660:	46bd      	mov	sp, r7
 8049662:	bd80      	pop	{r7, pc}

08049664 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8049664:	b580      	push	{r7, lr}
 8049666:	b082      	sub	sp, #8
 8049668:	af00      	add	r7, sp, #0
 804966a:	6078      	str	r0, [r7, #4]
 804966c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 804966e:	687b      	ldr	r3, [r7, #4]
 8049670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049674:	b2db      	uxtb	r3, r3
 8049676:	3b01      	subs	r3, #1
 8049678:	2b02      	cmp	r3, #2
 804967a:	d81e      	bhi.n	80496ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 804967c:	683b      	ldr	r3, [r7, #0]
 804967e:	88db      	ldrh	r3, [r3, #6]
 8049680:	2b02      	cmp	r3, #2
 8049682:	d004      	beq.n	804968e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8049684:	6839      	ldr	r1, [r7, #0]
 8049686:	6878      	ldr	r0, [r7, #4]
 8049688:	f000 f8a5 	bl	80497d6 <USBD_CtlError>
        break;
 804968c:	e01a      	b.n	80496c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 804968e:	687b      	ldr	r3, [r7, #4]
 8049690:	2201      	movs	r2, #1
 8049692:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8049694:	687b      	ldr	r3, [r7, #4]
 8049696:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 804969a:	2b00      	cmp	r3, #0
 804969c:	d005      	beq.n	80496aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 804969e:	687b      	ldr	r3, [r7, #4]
 80496a0:	68db      	ldr	r3, [r3, #12]
 80496a2:	f043 0202 	orr.w	r2, r3, #2
 80496a6:	687b      	ldr	r3, [r7, #4]
 80496a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80496aa:	687b      	ldr	r3, [r7, #4]
 80496ac:	330c      	adds	r3, #12
 80496ae:	2202      	movs	r2, #2
 80496b0:	4619      	mov	r1, r3
 80496b2:	6878      	ldr	r0, [r7, #4]
 80496b4:	f001 f884 	bl	804a7c0 <USBD_CtlSendData>
      break;
 80496b8:	e004      	b.n	80496c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80496ba:	6839      	ldr	r1, [r7, #0]
 80496bc:	6878      	ldr	r0, [r7, #4]
 80496be:	f000 f88a 	bl	80497d6 <USBD_CtlError>
      break;
 80496c2:	bf00      	nop
  }
}
 80496c4:	bf00      	nop
 80496c6:	3708      	adds	r7, #8
 80496c8:	46bd      	mov	sp, r7
 80496ca:	bd80      	pop	{r7, pc}

080496cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80496cc:	b580      	push	{r7, lr}
 80496ce:	b082      	sub	sp, #8
 80496d0:	af00      	add	r7, sp, #0
 80496d2:	6078      	str	r0, [r7, #4]
 80496d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80496d6:	683b      	ldr	r3, [r7, #0]
 80496d8:	885b      	ldrh	r3, [r3, #2]
 80496da:	2b01      	cmp	r3, #1
 80496dc:	d107      	bne.n	80496ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80496de:	687b      	ldr	r3, [r7, #4]
 80496e0:	2201      	movs	r2, #1
 80496e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80496e6:	6878      	ldr	r0, [r7, #4]
 80496e8:	f001 f8c4 	bl	804a874 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80496ec:	e013      	b.n	8049716 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80496ee:	683b      	ldr	r3, [r7, #0]
 80496f0:	885b      	ldrh	r3, [r3, #2]
 80496f2:	2b02      	cmp	r3, #2
 80496f4:	d10b      	bne.n	804970e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80496f6:	683b      	ldr	r3, [r7, #0]
 80496f8:	889b      	ldrh	r3, [r3, #4]
 80496fa:	0a1b      	lsrs	r3, r3, #8
 80496fc:	b29b      	uxth	r3, r3
 80496fe:	b2da      	uxtb	r2, r3
 8049700:	687b      	ldr	r3, [r7, #4]
 8049702:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8049706:	6878      	ldr	r0, [r7, #4]
 8049708:	f001 f8b4 	bl	804a874 <USBD_CtlSendStatus>
}
 804970c:	e003      	b.n	8049716 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 804970e:	6839      	ldr	r1, [r7, #0]
 8049710:	6878      	ldr	r0, [r7, #4]
 8049712:	f000 f860 	bl	80497d6 <USBD_CtlError>
}
 8049716:	bf00      	nop
 8049718:	3708      	adds	r7, #8
 804971a:	46bd      	mov	sp, r7
 804971c:	bd80      	pop	{r7, pc}

0804971e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 804971e:	b580      	push	{r7, lr}
 8049720:	b082      	sub	sp, #8
 8049722:	af00      	add	r7, sp, #0
 8049724:	6078      	str	r0, [r7, #4]
 8049726:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8049728:	687b      	ldr	r3, [r7, #4]
 804972a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 804972e:	b2db      	uxtb	r3, r3
 8049730:	3b01      	subs	r3, #1
 8049732:	2b02      	cmp	r3, #2
 8049734:	d80b      	bhi.n	804974e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8049736:	683b      	ldr	r3, [r7, #0]
 8049738:	885b      	ldrh	r3, [r3, #2]
 804973a:	2b01      	cmp	r3, #1
 804973c:	d10c      	bne.n	8049758 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 804973e:	687b      	ldr	r3, [r7, #4]
 8049740:	2200      	movs	r2, #0
 8049742:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8049746:	6878      	ldr	r0, [r7, #4]
 8049748:	f001 f894 	bl	804a874 <USBD_CtlSendStatus>
      }
      break;
 804974c:	e004      	b.n	8049758 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 804974e:	6839      	ldr	r1, [r7, #0]
 8049750:	6878      	ldr	r0, [r7, #4]
 8049752:	f000 f840 	bl	80497d6 <USBD_CtlError>
      break;
 8049756:	e000      	b.n	804975a <USBD_ClrFeature+0x3c>
      break;
 8049758:	bf00      	nop
  }
}
 804975a:	bf00      	nop
 804975c:	3708      	adds	r7, #8
 804975e:	46bd      	mov	sp, r7
 8049760:	bd80      	pop	{r7, pc}

08049762 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8049762:	b580      	push	{r7, lr}
 8049764:	b084      	sub	sp, #16
 8049766:	af00      	add	r7, sp, #0
 8049768:	6078      	str	r0, [r7, #4]
 804976a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 804976c:	683b      	ldr	r3, [r7, #0]
 804976e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8049770:	68fb      	ldr	r3, [r7, #12]
 8049772:	781a      	ldrb	r2, [r3, #0]
 8049774:	687b      	ldr	r3, [r7, #4]
 8049776:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8049778:	68fb      	ldr	r3, [r7, #12]
 804977a:	3301      	adds	r3, #1
 804977c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 804977e:	68fb      	ldr	r3, [r7, #12]
 8049780:	781a      	ldrb	r2, [r3, #0]
 8049782:	687b      	ldr	r3, [r7, #4]
 8049784:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8049786:	68fb      	ldr	r3, [r7, #12]
 8049788:	3301      	adds	r3, #1
 804978a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 804978c:	68f8      	ldr	r0, [r7, #12]
 804978e:	f7ff f9f0 	bl	8048b72 <SWAPBYTE>
 8049792:	4603      	mov	r3, r0
 8049794:	461a      	mov	r2, r3
 8049796:	687b      	ldr	r3, [r7, #4]
 8049798:	805a      	strh	r2, [r3, #2]

  pbuff++;
 804979a:	68fb      	ldr	r3, [r7, #12]
 804979c:	3301      	adds	r3, #1
 804979e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80497a0:	68fb      	ldr	r3, [r7, #12]
 80497a2:	3301      	adds	r3, #1
 80497a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80497a6:	68f8      	ldr	r0, [r7, #12]
 80497a8:	f7ff f9e3 	bl	8048b72 <SWAPBYTE>
 80497ac:	4603      	mov	r3, r0
 80497ae:	461a      	mov	r2, r3
 80497b0:	687b      	ldr	r3, [r7, #4]
 80497b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80497b4:	68fb      	ldr	r3, [r7, #12]
 80497b6:	3301      	adds	r3, #1
 80497b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80497ba:	68fb      	ldr	r3, [r7, #12]
 80497bc:	3301      	adds	r3, #1
 80497be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80497c0:	68f8      	ldr	r0, [r7, #12]
 80497c2:	f7ff f9d6 	bl	8048b72 <SWAPBYTE>
 80497c6:	4603      	mov	r3, r0
 80497c8:	461a      	mov	r2, r3
 80497ca:	687b      	ldr	r3, [r7, #4]
 80497cc:	80da      	strh	r2, [r3, #6]
}
 80497ce:	bf00      	nop
 80497d0:	3710      	adds	r7, #16
 80497d2:	46bd      	mov	sp, r7
 80497d4:	bd80      	pop	{r7, pc}

080497d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80497d6:	b580      	push	{r7, lr}
 80497d8:	b082      	sub	sp, #8
 80497da:	af00      	add	r7, sp, #0
 80497dc:	6078      	str	r0, [r7, #4]
 80497de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80497e0:	2180      	movs	r1, #128	@ 0x80
 80497e2:	6878      	ldr	r0, [r7, #4]
 80497e4:	f001 fcba 	bl	804b15c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80497e8:	2100      	movs	r1, #0
 80497ea:	6878      	ldr	r0, [r7, #4]
 80497ec:	f001 fcb6 	bl	804b15c <USBD_LL_StallEP>
}
 80497f0:	bf00      	nop
 80497f2:	3708      	adds	r7, #8
 80497f4:	46bd      	mov	sp, r7
 80497f6:	bd80      	pop	{r7, pc}

080497f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80497f8:	b580      	push	{r7, lr}
 80497fa:	b086      	sub	sp, #24
 80497fc:	af00      	add	r7, sp, #0
 80497fe:	60f8      	str	r0, [r7, #12]
 8049800:	60b9      	str	r1, [r7, #8]
 8049802:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8049804:	2300      	movs	r3, #0
 8049806:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8049808:	68fb      	ldr	r3, [r7, #12]
 804980a:	2b00      	cmp	r3, #0
 804980c:	d042      	beq.n	8049894 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 804980e:	68fb      	ldr	r3, [r7, #12]
 8049810:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8049812:	6938      	ldr	r0, [r7, #16]
 8049814:	f000 f842 	bl	804989c <USBD_GetLen>
 8049818:	4603      	mov	r3, r0
 804981a:	3301      	adds	r3, #1
 804981c:	005b      	lsls	r3, r3, #1
 804981e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8049822:	d808      	bhi.n	8049836 <USBD_GetString+0x3e>
 8049824:	6938      	ldr	r0, [r7, #16]
 8049826:	f000 f839 	bl	804989c <USBD_GetLen>
 804982a:	4603      	mov	r3, r0
 804982c:	3301      	adds	r3, #1
 804982e:	b29b      	uxth	r3, r3
 8049830:	005b      	lsls	r3, r3, #1
 8049832:	b29a      	uxth	r2, r3
 8049834:	e001      	b.n	804983a <USBD_GetString+0x42>
 8049836:	f44f 7200 	mov.w	r2, #512	@ 0x200
 804983a:	687b      	ldr	r3, [r7, #4]
 804983c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 804983e:	7dfb      	ldrb	r3, [r7, #23]
 8049840:	68ba      	ldr	r2, [r7, #8]
 8049842:	4413      	add	r3, r2
 8049844:	687a      	ldr	r2, [r7, #4]
 8049846:	7812      	ldrb	r2, [r2, #0]
 8049848:	701a      	strb	r2, [r3, #0]
  idx++;
 804984a:	7dfb      	ldrb	r3, [r7, #23]
 804984c:	3301      	adds	r3, #1
 804984e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8049850:	7dfb      	ldrb	r3, [r7, #23]
 8049852:	68ba      	ldr	r2, [r7, #8]
 8049854:	4413      	add	r3, r2
 8049856:	2203      	movs	r2, #3
 8049858:	701a      	strb	r2, [r3, #0]
  idx++;
 804985a:	7dfb      	ldrb	r3, [r7, #23]
 804985c:	3301      	adds	r3, #1
 804985e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8049860:	e013      	b.n	804988a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8049862:	7dfb      	ldrb	r3, [r7, #23]
 8049864:	68ba      	ldr	r2, [r7, #8]
 8049866:	4413      	add	r3, r2
 8049868:	693a      	ldr	r2, [r7, #16]
 804986a:	7812      	ldrb	r2, [r2, #0]
 804986c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 804986e:	693b      	ldr	r3, [r7, #16]
 8049870:	3301      	adds	r3, #1
 8049872:	613b      	str	r3, [r7, #16]
    idx++;
 8049874:	7dfb      	ldrb	r3, [r7, #23]
 8049876:	3301      	adds	r3, #1
 8049878:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 804987a:	7dfb      	ldrb	r3, [r7, #23]
 804987c:	68ba      	ldr	r2, [r7, #8]
 804987e:	4413      	add	r3, r2
 8049880:	2200      	movs	r2, #0
 8049882:	701a      	strb	r2, [r3, #0]
    idx++;
 8049884:	7dfb      	ldrb	r3, [r7, #23]
 8049886:	3301      	adds	r3, #1
 8049888:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 804988a:	693b      	ldr	r3, [r7, #16]
 804988c:	781b      	ldrb	r3, [r3, #0]
 804988e:	2b00      	cmp	r3, #0
 8049890:	d1e7      	bne.n	8049862 <USBD_GetString+0x6a>
 8049892:	e000      	b.n	8049896 <USBD_GetString+0x9e>
    return;
 8049894:	bf00      	nop
  }
}
 8049896:	3718      	adds	r7, #24
 8049898:	46bd      	mov	sp, r7
 804989a:	bd80      	pop	{r7, pc}

0804989c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 804989c:	b480      	push	{r7}
 804989e:	b085      	sub	sp, #20
 80498a0:	af00      	add	r7, sp, #0
 80498a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80498a4:	2300      	movs	r3, #0
 80498a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80498a8:	687b      	ldr	r3, [r7, #4]
 80498aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80498ac:	e005      	b.n	80498ba <USBD_GetLen+0x1e>
  {
    len++;
 80498ae:	7bfb      	ldrb	r3, [r7, #15]
 80498b0:	3301      	adds	r3, #1
 80498b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80498b4:	68bb      	ldr	r3, [r7, #8]
 80498b6:	3301      	adds	r3, #1
 80498b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80498ba:	68bb      	ldr	r3, [r7, #8]
 80498bc:	781b      	ldrb	r3, [r3, #0]
 80498be:	2b00      	cmp	r3, #0
 80498c0:	d1f5      	bne.n	80498ae <USBD_GetLen+0x12>
  }

  return len;
 80498c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80498c4:	4618      	mov	r0, r3
 80498c6:	3714      	adds	r7, #20
 80498c8:	46bd      	mov	sp, r7
 80498ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80498ce:	4770      	bx	lr

080498d0 <__NVIC_SystemReset>:
{
 80498d0:	b480      	push	{r7}
 80498d2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80498d4:	f3bf 8f4f 	dsb	sy
}
 80498d8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80498da:	4b06      	ldr	r3, [pc, #24]	@ (80498f4 <__NVIC_SystemReset+0x24>)
 80498dc:	68db      	ldr	r3, [r3, #12]
 80498de:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80498e2:	4904      	ldr	r1, [pc, #16]	@ (80498f4 <__NVIC_SystemReset+0x24>)
 80498e4:	4b04      	ldr	r3, [pc, #16]	@ (80498f8 <__NVIC_SystemReset+0x28>)
 80498e6:	4313      	orrs	r3, r2
 80498e8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80498ea:	f3bf 8f4f 	dsb	sy
}
 80498ee:	bf00      	nop
    __NOP();
 80498f0:	bf00      	nop
 80498f2:	e7fd      	b.n	80498f0 <__NVIC_SystemReset+0x20>
 80498f4:	e000ed00 	.word	0xe000ed00
 80498f8:	05fa0004 	.word	0x05fa0004

080498fc <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80498fc:	b580      	push	{r7, lr}
 80498fe:	b084      	sub	sp, #16
 8049900:	af00      	add	r7, sp, #0
 8049902:	6078      	str	r0, [r7, #4]
 8049904:	460b      	mov	r3, r1
 8049906:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8049908:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 804990c:	f001 fcf2 	bl	804b2f4 <USBD_static_malloc>
 8049910:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8049912:	68fb      	ldr	r3, [r7, #12]
 8049914:	2b00      	cmp	r3, #0
 8049916:	d109      	bne.n	804992c <USBD_DFU_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8049918:	687b      	ldr	r3, [r7, #4]
 804991a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804991e:	687b      	ldr	r3, [r7, #4]
 8049920:	32b0      	adds	r2, #176	@ 0xb0
 8049922:	2100      	movs	r1, #0
 8049924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8049928:	2302      	movs	r3, #2
 804992a:	e052      	b.n	80499d2 <USBD_DFU_Init+0xd6>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 804992c:	687b      	ldr	r3, [r7, #4]
 804992e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049932:	687b      	ldr	r3, [r7, #4]
 8049934:	32b0      	adds	r2, #176	@ 0xb0
 8049936:	68f9      	ldr	r1, [r7, #12]
 8049938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 804993c:	687b      	ldr	r3, [r7, #4]
 804993e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049942:	687b      	ldr	r3, [r7, #4]
 8049944:	32b0      	adds	r2, #176	@ 0xb0
 8049946:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 804994a:	687b      	ldr	r3, [r7, #4]
 804994c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 8049950:	68fb      	ldr	r3, [r7, #12]
 8049952:	2200      	movs	r2, #0
 8049954:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8049958:	68fb      	ldr	r3, [r7, #12]
 804995a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 804995e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 8049962:	68fb      	ldr	r3, [r7, #12]
 8049964:	2200      	movs	r2, #0
 8049966:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 804996a:	68fb      	ldr	r3, [r7, #12]
 804996c:	2200      	movs	r2, #0
 804996e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8049972:	68fb      	ldr	r3, [r7, #12]
 8049974:	2200      	movs	r2, #0
 8049976:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
  hdfu->dev_state = DFU_STATE_IDLE;
 804997a:	68fb      	ldr	r3, [r7, #12]
 804997c:	2202      	movs	r2, #2
 804997e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8049982:	68fb      	ldr	r3, [r7, #12]
 8049984:	2200      	movs	r2, #0
 8049986:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[1] = 0U;
 804998a:	68fb      	ldr	r3, [r7, #12]
 804998c:	2200      	movs	r2, #0
 804998e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
  hdfu->dev_status[2] = 0U;
 8049992:	68fb      	ldr	r3, [r7, #12]
 8049994:	2200      	movs	r2, #0
 8049996:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
  hdfu->dev_status[3] = 0U;
 804999a:	68fb      	ldr	r3, [r7, #12]
 804999c:	2200      	movs	r2, #0
 804999e:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80499a2:	68fb      	ldr	r3, [r7, #12]
 80499a4:	2202      	movs	r2, #2
 80499a6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[5] = 0U;
 80499aa:	68fb      	ldr	r3, [r7, #12]
 80499ac:	2200      	movs	r2, #0
 80499ae:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 80499b2:	687b      	ldr	r3, [r7, #4]
 80499b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80499b8:	687a      	ldr	r2, [r7, #4]
 80499ba:	33b0      	adds	r3, #176	@ 0xb0
 80499bc:	009b      	lsls	r3, r3, #2
 80499be:	4413      	add	r3, r2
 80499c0:	685b      	ldr	r3, [r3, #4]
 80499c2:	685b      	ldr	r3, [r3, #4]
 80499c4:	4798      	blx	r3
 80499c6:	4603      	mov	r3, r0
 80499c8:	2b00      	cmp	r3, #0
 80499ca:	d001      	beq.n	80499d0 <USBD_DFU_Init+0xd4>
  {
    return (uint8_t)USBD_FAIL;
 80499cc:	2303      	movs	r3, #3
 80499ce:	e000      	b.n	80499d2 <USBD_DFU_Init+0xd6>
  }

  return (uint8_t)USBD_OK;
 80499d0:	2300      	movs	r3, #0
}
 80499d2:	4618      	mov	r0, r3
 80499d4:	3710      	adds	r7, #16
 80499d6:	46bd      	mov	sp, r7
 80499d8:	bd80      	pop	{r7, pc}

080499da <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80499da:	b580      	push	{r7, lr}
 80499dc:	b084      	sub	sp, #16
 80499de:	af00      	add	r7, sp, #0
 80499e0:	6078      	str	r0, [r7, #4]
 80499e2:	460b      	mov	r3, r1
 80499e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80499e6:	687b      	ldr	r3, [r7, #4]
 80499e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80499ec:	687b      	ldr	r3, [r7, #4]
 80499ee:	32b0      	adds	r2, #176	@ 0xb0
 80499f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80499f4:	2b00      	cmp	r3, #0
 80499f6:	d101      	bne.n	80499fc <USBD_DFU_DeInit+0x22>
  {
    return (uint8_t)USBD_EMEM;
 80499f8:	2302      	movs	r3, #2
 80499fa:	e03c      	b.n	8049a76 <USBD_DFU_DeInit+0x9c>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80499fc:	687b      	ldr	r3, [r7, #4]
 80499fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049a02:	687b      	ldr	r3, [r7, #4]
 8049a04:	32b0      	adds	r2, #176	@ 0xb0
 8049a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049a0a:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8049a0c:	68fb      	ldr	r3, [r7, #12]
 8049a0e:	2200      	movs	r2, #0
 8049a10:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8049a14:	68fb      	ldr	r3, [r7, #12]
 8049a16:	2200      	movs	r2, #0
 8049a18:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8049a1c:	68fb      	ldr	r3, [r7, #12]
 8049a1e:	2202      	movs	r2, #2
 8049a20:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8049a24:	68fb      	ldr	r3, [r7, #12]
 8049a26:	2200      	movs	r2, #0
 8049a28:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8049a2c:	68fb      	ldr	r3, [r7, #12]
 8049a2e:	2202      	movs	r2, #2
 8049a30:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8049a34:	687b      	ldr	r3, [r7, #4]
 8049a36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8049a3a:	687a      	ldr	r2, [r7, #4]
 8049a3c:	33b0      	adds	r3, #176	@ 0xb0
 8049a3e:	009b      	lsls	r3, r3, #2
 8049a40:	4413      	add	r3, r2
 8049a42:	685b      	ldr	r3, [r3, #4]
 8049a44:	689b      	ldr	r3, [r3, #8]
 8049a46:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8049a48:	687b      	ldr	r3, [r7, #4]
 8049a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049a4e:	687b      	ldr	r3, [r7, #4]
 8049a50:	32b0      	adds	r2, #176	@ 0xb0
 8049a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049a56:	4618      	mov	r0, r3
 8049a58:	f001 fc5a 	bl	804b310 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 8049a5c:	687b      	ldr	r3, [r7, #4]
 8049a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049a62:	687b      	ldr	r3, [r7, #4]
 8049a64:	32b0      	adds	r2, #176	@ 0xb0
 8049a66:	2100      	movs	r1, #0
 8049a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = NULL;
 8049a6c:	687b      	ldr	r3, [r7, #4]
 8049a6e:	2200      	movs	r2, #0
 8049a70:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8049a74:	2300      	movs	r3, #0
}
 8049a76:	4618      	mov	r0, r3
 8049a78:	3710      	adds	r7, #16
 8049a7a:	46bd      	mov	sp, r7
 8049a7c:	bd80      	pop	{r7, pc}
	...

08049a80 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8049a80:	b580      	push	{r7, lr}
 8049a82:	b086      	sub	sp, #24
 8049a84:	af00      	add	r7, sp, #0
 8049a86:	6078      	str	r0, [r7, #4]
 8049a88:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8049a8a:	687b      	ldr	r3, [r7, #4]
 8049a8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049a90:	687b      	ldr	r3, [r7, #4]
 8049a92:	32b0      	adds	r2, #176	@ 0xb0
 8049a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049a98:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8049a9a:	2300      	movs	r3, #0
 8049a9c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pbuf;
  uint16_t len;
  uint16_t status_info = 0U;
 8049a9e:	2300      	movs	r3, #0
 8049aa0:	813b      	strh	r3, [r7, #8]

  if (hdfu == NULL)
 8049aa2:	693b      	ldr	r3, [r7, #16]
 8049aa4:	2b00      	cmp	r3, #0
 8049aa6:	d101      	bne.n	8049aac <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8049aa8:	2303      	movs	r3, #3
 8049aaa:	e0e8      	b.n	8049c7e <USBD_DFU_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8049aac:	683b      	ldr	r3, [r7, #0]
 8049aae:	781b      	ldrb	r3, [r3, #0]
 8049ab0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8049ab4:	2b00      	cmp	r3, #0
 8049ab6:	d03e      	beq.n	8049b36 <USBD_DFU_Setup+0xb6>
 8049ab8:	2b20      	cmp	r3, #32
 8049aba:	f040 80d8 	bne.w	8049c6e <USBD_DFU_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8049abe:	683b      	ldr	r3, [r7, #0]
 8049ac0:	785b      	ldrb	r3, [r3, #1]
 8049ac2:	2b06      	cmp	r3, #6
 8049ac4:	d82f      	bhi.n	8049b26 <USBD_DFU_Setup+0xa6>
 8049ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8049acc <USBD_DFU_Setup+0x4c>)
 8049ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049acc:	08049b1d 	.word	0x08049b1d
 8049ad0:	08049ae9 	.word	0x08049ae9
 8049ad4:	08049af3 	.word	0x08049af3
 8049ad8:	08049afd 	.word	0x08049afd
 8049adc:	08049b05 	.word	0x08049b05
 8049ae0:	08049b0d 	.word	0x08049b0d
 8049ae4:	08049b15 	.word	0x08049b15
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8049ae8:	6839      	ldr	r1, [r7, #0]
 8049aea:	6878      	ldr	r0, [r7, #4]
 8049aec:	f000 fac2 	bl	804a074 <DFU_Download>
          break;
 8049af0:	e020      	b.n	8049b34 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8049af2:	6839      	ldr	r1, [r7, #0]
 8049af4:	6878      	ldr	r0, [r7, #4]
 8049af6:	f000 fb33 	bl	804a160 <DFU_Upload>
          break;
 8049afa:	e01b      	b.n	8049b34 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8049afc:	6878      	ldr	r0, [r7, #4]
 8049afe:	f000 fc37 	bl	804a370 <DFU_GetStatus>
          break;
 8049b02:	e017      	b.n	8049b34 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8049b04:	6878      	ldr	r0, [r7, #4]
 8049b06:	f000 fcff 	bl	804a508 <DFU_ClearStatus>
          break;
 8049b0a:	e013      	b.n	8049b34 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8049b0c:	6878      	ldr	r0, [r7, #4]
 8049b0e:	f000 fd53 	bl	804a5b8 <DFU_GetState>
          break;
 8049b12:	e00f      	b.n	8049b34 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8049b14:	6878      	ldr	r0, [r7, #4]
 8049b16:	f000 fd6b 	bl	804a5f0 <DFU_Abort>
          break;
 8049b1a:	e00b      	b.n	8049b34 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8049b1c:	6839      	ldr	r1, [r7, #0]
 8049b1e:	6878      	ldr	r0, [r7, #4]
 8049b20:	f000 fa38 	bl	8049f94 <DFU_Detach>
          break;
 8049b24:	e006      	b.n	8049b34 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8049b26:	6839      	ldr	r1, [r7, #0]
 8049b28:	6878      	ldr	r0, [r7, #4]
 8049b2a:	f7ff fe54 	bl	80497d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8049b2e:	2303      	movs	r3, #3
 8049b30:	75fb      	strb	r3, [r7, #23]
          break;
 8049b32:	bf00      	nop
      }
      break;
 8049b34:	e0a2      	b.n	8049c7c <USBD_DFU_Setup+0x1fc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8049b36:	683b      	ldr	r3, [r7, #0]
 8049b38:	785b      	ldrb	r3, [r3, #1]
 8049b3a:	2b0b      	cmp	r3, #11
 8049b3c:	f200 808c 	bhi.w	8049c58 <USBD_DFU_Setup+0x1d8>
 8049b40:	a201      	add	r2, pc, #4	@ (adr r2, 8049b48 <USBD_DFU_Setup+0xc8>)
 8049b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049b46:	bf00      	nop
 8049b48:	08049b79 	.word	0x08049b79
 8049b4c:	08049c67 	.word	0x08049c67
 8049b50:	08049c59 	.word	0x08049c59
 8049b54:	08049c59 	.word	0x08049c59
 8049b58:	08049c59 	.word	0x08049c59
 8049b5c:	08049c59 	.word	0x08049c59
 8049b60:	08049ba3 	.word	0x08049ba3
 8049b64:	08049c59 	.word	0x08049c59
 8049b68:	08049c59 	.word	0x08049c59
 8049b6c:	08049c59 	.word	0x08049c59
 8049b70:	08049beb 	.word	0x08049beb
 8049b74:	08049c17 	.word	0x08049c17
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049b78:	687b      	ldr	r3, [r7, #4]
 8049b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049b7e:	b2db      	uxtb	r3, r3
 8049b80:	2b03      	cmp	r3, #3
 8049b82:	d107      	bne.n	8049b94 <USBD_DFU_Setup+0x114>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8049b84:	f107 0308 	add.w	r3, r7, #8
 8049b88:	2202      	movs	r2, #2
 8049b8a:	4619      	mov	r1, r3
 8049b8c:	6878      	ldr	r0, [r7, #4]
 8049b8e:	f000 fe17 	bl	804a7c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8049b92:	e06b      	b.n	8049c6c <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8049b94:	6839      	ldr	r1, [r7, #0]
 8049b96:	6878      	ldr	r0, [r7, #4]
 8049b98:	f7ff fe1d 	bl	80497d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8049b9c:	2303      	movs	r3, #3
 8049b9e:	75fb      	strb	r3, [r7, #23]
          break;
 8049ba0:	e064      	b.n	8049c6c <USBD_DFU_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8049ba2:	683b      	ldr	r3, [r7, #0]
 8049ba4:	885b      	ldrh	r3, [r3, #2]
 8049ba6:	0a1b      	lsrs	r3, r3, #8
 8049ba8:	b29b      	uxth	r3, r3
 8049baa:	2b21      	cmp	r3, #33	@ 0x21
 8049bac:	d15d      	bne.n	8049c6a <USBD_DFU_Setup+0x1ea>
          {
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8049bae:	687b      	ldr	r3, [r7, #4]
 8049bb0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8049bb4:	4618      	mov	r0, r3
 8049bb6:	f000 fdd5 	bl	804a764 <USBD_DFU_GetDfuFuncDesc>
 8049bba:	60f8      	str	r0, [r7, #12]

            if (pbuf != NULL)
 8049bbc:	68fb      	ldr	r3, [r7, #12]
 8049bbe:	2b00      	cmp	r3, #0
 8049bc0:	d00c      	beq.n	8049bdc <USBD_DFU_Setup+0x15c>
            {
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8049bc2:	683b      	ldr	r3, [r7, #0]
 8049bc4:	88db      	ldrh	r3, [r3, #6]
 8049bc6:	2b09      	cmp	r3, #9
 8049bc8:	bf28      	it	cs
 8049bca:	2309      	movcs	r3, #9
 8049bcc:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8049bce:	897b      	ldrh	r3, [r7, #10]
 8049bd0:	461a      	mov	r2, r3
 8049bd2:	68f9      	ldr	r1, [r7, #12]
 8049bd4:	6878      	ldr	r0, [r7, #4]
 8049bd6:	f000 fdf3 	bl	804a7c0 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8049bda:	e046      	b.n	8049c6a <USBD_DFU_Setup+0x1ea>
              USBD_CtlError(pdev, req);
 8049bdc:	6839      	ldr	r1, [r7, #0]
 8049bde:	6878      	ldr	r0, [r7, #4]
 8049be0:	f7ff fdf9 	bl	80497d6 <USBD_CtlError>
              ret = USBD_FAIL;
 8049be4:	2303      	movs	r3, #3
 8049be6:	75fb      	strb	r3, [r7, #23]
          break;
 8049be8:	e03f      	b.n	8049c6a <USBD_DFU_Setup+0x1ea>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049bea:	687b      	ldr	r3, [r7, #4]
 8049bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049bf0:	b2db      	uxtb	r3, r3
 8049bf2:	2b03      	cmp	r3, #3
 8049bf4:	d108      	bne.n	8049c08 <USBD_DFU_Setup+0x188>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8049bf6:	693b      	ldr	r3, [r7, #16]
 8049bf8:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8049bfc:	2201      	movs	r2, #1
 8049bfe:	4619      	mov	r1, r3
 8049c00:	6878      	ldr	r0, [r7, #4]
 8049c02:	f000 fddd 	bl	804a7c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8049c06:	e031      	b.n	8049c6c <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8049c08:	6839      	ldr	r1, [r7, #0]
 8049c0a:	6878      	ldr	r0, [r7, #4]
 8049c0c:	f7ff fde3 	bl	80497d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8049c10:	2303      	movs	r3, #3
 8049c12:	75fb      	strb	r3, [r7, #23]
          break;
 8049c14:	e02a      	b.n	8049c6c <USBD_DFU_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8049c16:	683b      	ldr	r3, [r7, #0]
 8049c18:	885b      	ldrh	r3, [r3, #2]
 8049c1a:	b2db      	uxtb	r3, r3
 8049c1c:	2b00      	cmp	r3, #0
 8049c1e:	d114      	bne.n	8049c4a <USBD_DFU_Setup+0x1ca>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049c20:	687b      	ldr	r3, [r7, #4]
 8049c22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049c26:	b2db      	uxtb	r3, r3
 8049c28:	2b03      	cmp	r3, #3
 8049c2a:	d107      	bne.n	8049c3c <USBD_DFU_Setup+0x1bc>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8049c2c:	683b      	ldr	r3, [r7, #0]
 8049c2e:	885b      	ldrh	r3, [r3, #2]
 8049c30:	b2db      	uxtb	r3, r3
 8049c32:	461a      	mov	r2, r3
 8049c34:	693b      	ldr	r3, [r7, #16]
 8049c36:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8049c3a:	e017      	b.n	8049c6c <USBD_DFU_Setup+0x1ec>
              USBD_CtlError(pdev, req);
 8049c3c:	6839      	ldr	r1, [r7, #0]
 8049c3e:	6878      	ldr	r0, [r7, #4]
 8049c40:	f7ff fdc9 	bl	80497d6 <USBD_CtlError>
              ret = USBD_FAIL;
 8049c44:	2303      	movs	r3, #3
 8049c46:	75fb      	strb	r3, [r7, #23]
          break;
 8049c48:	e010      	b.n	8049c6c <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8049c4a:	6839      	ldr	r1, [r7, #0]
 8049c4c:	6878      	ldr	r0, [r7, #4]
 8049c4e:	f7ff fdc2 	bl	80497d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8049c52:	2303      	movs	r3, #3
 8049c54:	75fb      	strb	r3, [r7, #23]
          break;
 8049c56:	e009      	b.n	8049c6c <USBD_DFU_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8049c58:	6839      	ldr	r1, [r7, #0]
 8049c5a:	6878      	ldr	r0, [r7, #4]
 8049c5c:	f7ff fdbb 	bl	80497d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8049c60:	2303      	movs	r3, #3
 8049c62:	75fb      	strb	r3, [r7, #23]
          break;
 8049c64:	e002      	b.n	8049c6c <USBD_DFU_Setup+0x1ec>
          break;
 8049c66:	bf00      	nop
 8049c68:	e008      	b.n	8049c7c <USBD_DFU_Setup+0x1fc>
          break;
 8049c6a:	bf00      	nop
      }
      break;
 8049c6c:	e006      	b.n	8049c7c <USBD_DFU_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8049c6e:	6839      	ldr	r1, [r7, #0]
 8049c70:	6878      	ldr	r0, [r7, #4]
 8049c72:	f7ff fdb0 	bl	80497d6 <USBD_CtlError>
      ret = USBD_FAIL;
 8049c76:	2303      	movs	r3, #3
 8049c78:	75fb      	strb	r3, [r7, #23]
      break;
 8049c7a:	bf00      	nop
  }

  return (uint8_t)ret;
 8049c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8049c7e:	4618      	mov	r0, r3
 8049c80:	3718      	adds	r7, #24
 8049c82:	46bd      	mov	sp, r7
 8049c84:	bd80      	pop	{r7, pc}
 8049c86:	bf00      	nop

08049c88 <USBD_DFU_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8049c88:	b480      	push	{r7}
 8049c8a:	b083      	sub	sp, #12
 8049c8c:	af00      	add	r7, sp, #0
 8049c8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8049c90:	687b      	ldr	r3, [r7, #4]
 8049c92:	221b      	movs	r2, #27
 8049c94:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8049c96:	4b03      	ldr	r3, [pc, #12]	@ (8049ca4 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8049c98:	4618      	mov	r0, r3
 8049c9a:	370c      	adds	r7, #12
 8049c9c:	46bd      	mov	sp, r7
 8049c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049ca2:	4770      	bx	lr
 8049ca4:	2400004c 	.word	0x2400004c

08049ca8 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8049ca8:	b480      	push	{r7}
 8049caa:	b083      	sub	sp, #12
 8049cac:	af00      	add	r7, sp, #0
 8049cae:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8049cb0:	2300      	movs	r3, #0
}
 8049cb2:	4618      	mov	r0, r3
 8049cb4:	370c      	adds	r7, #12
 8049cb6:	46bd      	mov	sp, r7
 8049cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049cbc:	4770      	bx	lr

08049cbe <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8049cbe:	b580      	push	{r7, lr}
 8049cc0:	b088      	sub	sp, #32
 8049cc2:	af00      	add	r7, sp, #0
 8049cc4:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t app_addr_ptr;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8049cc6:	687b      	ldr	r3, [r7, #4]
 8049cc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049ccc:	687b      	ldr	r3, [r7, #4]
 8049cce:	32b0      	adds	r2, #176	@ 0xb0
 8049cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049cd4:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8049cd6:	687b      	ldr	r3, [r7, #4]
 8049cd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8049cdc:	687a      	ldr	r2, [r7, #4]
 8049cde:	33b0      	adds	r3, #176	@ 0xb0
 8049ce0:	009b      	lsls	r3, r3, #2
 8049ce2:	4413      	add	r3, r2
 8049ce4:	685b      	ldr	r3, [r3, #4]
 8049ce6:	61bb      	str	r3, [r7, #24]
#if (USBD_DFU_VENDOR_CMD_ENABLED == 1U) || (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 8049ce8:	69fb      	ldr	r3, [r7, #28]
 8049cea:	2b00      	cmp	r3, #0
 8049cec:	d101      	bne.n	8049cf2 <USBD_DFU_EP0_TxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8049cee:	2303      	movs	r3, #3
 8049cf0:	e0f1      	b.n	8049ed6 <USBD_DFU_EP0_TxReady+0x218>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8049cf2:	69fb      	ldr	r3, [r7, #28]
 8049cf4:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8049cf8:	2b04      	cmp	r3, #4
 8049cfa:	f040 80e0 	bne.w	8049ebe <USBD_DFU_EP0_TxReady+0x200>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8049cfe:	69fb      	ldr	r3, [r7, #28]
 8049d00:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8049d04:	2b00      	cmp	r3, #0
 8049d06:	f040 8085 	bne.w	8049e14 <USBD_DFU_EP0_TxReady+0x156>
    {
      if (hdfu->wlength == 1U)
 8049d0a:	69fb      	ldr	r3, [r7, #28]
 8049d0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8049d10:	2b01      	cmp	r3, #1
 8049d12:	f000 80b5 	beq.w	8049e80 <USBD_DFU_EP0_TxReady+0x1c2>
            return (uint8_t)USBD_FAIL;
          }
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
      }
      else if (hdfu->wlength == 5U)
 8049d16:	69fb      	ldr	r3, [r7, #28]
 8049d18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8049d1c:	2b05      	cmp	r3, #5
 8049d1e:	d166      	bne.n	8049dee <USBD_DFU_EP0_TxReady+0x130>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8049d20:	69fb      	ldr	r3, [r7, #28]
 8049d22:	781b      	ldrb	r3, [r3, #0]
 8049d24:	2b21      	cmp	r3, #33	@ 0x21
 8049d26:	d124      	bne.n	8049d72 <USBD_DFU_EP0_TxReady+0xb4>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          hdfu->data_ptr = hdfu->buffer.d8[1];
 8049d28:	69fb      	ldr	r3, [r7, #28]
 8049d2a:	785b      	ldrb	r3, [r3, #1]
 8049d2c:	461a      	mov	r2, r3
 8049d2e:	69fb      	ldr	r3, [r7, #28]
 8049d30:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8049d34:	69fb      	ldr	r3, [r7, #28]
 8049d36:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8049d3a:	69fb      	ldr	r3, [r7, #28]
 8049d3c:	789b      	ldrb	r3, [r3, #2]
 8049d3e:	021b      	lsls	r3, r3, #8
 8049d40:	441a      	add	r2, r3
 8049d42:	69fb      	ldr	r3, [r7, #28]
 8049d44:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8049d48:	69fb      	ldr	r3, [r7, #28]
 8049d4a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8049d4e:	69fb      	ldr	r3, [r7, #28]
 8049d50:	78db      	ldrb	r3, [r3, #3]
 8049d52:	041b      	lsls	r3, r3, #16
 8049d54:	441a      	add	r2, r3
 8049d56:	69fb      	ldr	r3, [r7, #28]
 8049d58:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8049d5c:	69fb      	ldr	r3, [r7, #28]
 8049d5e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8049d62:	69fb      	ldr	r3, [r7, #28]
 8049d64:	791b      	ldrb	r3, [r3, #4]
 8049d66:	061b      	lsls	r3, r3, #24
 8049d68:	441a      	add	r2, r3
 8049d6a:	69fb      	ldr	r3, [r7, #28]
 8049d6c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8049d70:	e086      	b.n	8049e80 <USBD_DFU_EP0_TxReady+0x1c2>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8049d72:	69fb      	ldr	r3, [r7, #28]
 8049d74:	781b      	ldrb	r3, [r3, #0]
 8049d76:	2b41      	cmp	r3, #65	@ 0x41
 8049d78:	d137      	bne.n	8049dea <USBD_DFU_EP0_TxReady+0x12c>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          app_addr_ptr = hdfu->buffer.d8[1];
 8049d7a:	69fb      	ldr	r3, [r7, #28]
 8049d7c:	785b      	ldrb	r3, [r3, #1]
 8049d7e:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8049d80:	69fb      	ldr	r3, [r7, #28]
 8049d82:	789b      	ldrb	r3, [r3, #2]
 8049d84:	021b      	lsls	r3, r3, #8
 8049d86:	693a      	ldr	r2, [r7, #16]
 8049d88:	4413      	add	r3, r2
 8049d8a:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8049d8c:	69fb      	ldr	r3, [r7, #28]
 8049d8e:	78db      	ldrb	r3, [r3, #3]
 8049d90:	041b      	lsls	r3, r3, #16
 8049d92:	693a      	ldr	r2, [r7, #16]
 8049d94:	4413      	add	r3, r2
 8049d96:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8049d98:	69fb      	ldr	r3, [r7, #28]
 8049d9a:	791b      	ldrb	r3, [r3, #4]
 8049d9c:	061b      	lsls	r3, r3, #24
 8049d9e:	693a      	ldr	r2, [r7, #16]
 8049da0:	4413      	add	r3, r2
 8049da2:	613b      	str	r3, [r7, #16]

          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 8049da4:	69bb      	ldr	r3, [r7, #24]
 8049da6:	68db      	ldr	r3, [r3, #12]
 8049da8:	6938      	ldr	r0, [r7, #16]
 8049daa:	4798      	blx	r3
 8049dac:	4603      	mov	r3, r0
 8049dae:	2b00      	cmp	r3, #0
 8049db0:	d066      	beq.n	8049e80 <USBD_DFU_EP0_TxReady+0x1c2>
          {
            /* Update the state machine */
            hdfu->dev_state = DFU_STATE_ERROR;
 8049db2:	69fb      	ldr	r3, [r7, #28]
 8049db4:	220a      	movs	r2, #10
 8049db6:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8049dba:	69fb      	ldr	r3, [r7, #28]
 8049dbc:	220b      	movs	r2, #11
 8049dbe:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
            hdfu->dev_status[1] = 0U;
 8049dc2:	69fb      	ldr	r3, [r7, #28]
 8049dc4:	2200      	movs	r2, #0
 8049dc6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8049dca:	69fb      	ldr	r3, [r7, #28]
 8049dcc:	2200      	movs	r2, #0
 8049dce:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8049dd2:	69fb      	ldr	r3, [r7, #28]
 8049dd4:	2200      	movs	r2, #0
 8049dd6:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 8049dda:	69fb      	ldr	r3, [r7, #28]
 8049ddc:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8049de0:	69fb      	ldr	r3, [r7, #28]
 8049de2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            return (uint8_t)USBD_FAIL;
 8049de6:	2303      	movs	r3, #3
 8049de8:	e075      	b.n	8049ed6 <USBD_DFU_EP0_TxReady+0x218>
          }
        }
#else
        else
        {
          return (uint8_t)USBD_FAIL;
 8049dea:	2303      	movs	r3, #3
 8049dec:	e073      	b.n	8049ed6 <USBD_DFU_EP0_TxReady+0x218>
          req.wLength = 1U;
          USBD_CtlError(pdev, &req);
        }
#else
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8049dee:	69fb      	ldr	r3, [r7, #28]
 8049df0:	2200      	movs	r2, #0
 8049df2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8049df6:	69fb      	ldr	r3, [r7, #28]
 8049df8:	2200      	movs	r2, #0
 8049dfa:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8049dfe:	2300      	movs	r3, #0
 8049e00:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 8049e02:	2301      	movs	r3, #1
 8049e04:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 8049e06:	f107 0308 	add.w	r3, r7, #8
 8049e0a:	4619      	mov	r1, r3
 8049e0c:	6878      	ldr	r0, [r7, #4]
 8049e0e:	f7ff fce2 	bl	80497d6 <USBD_CtlError>
 8049e12:	e035      	b.n	8049e80 <USBD_DFU_EP0_TxReady+0x1c2>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8049e14:	69fb      	ldr	r3, [r7, #28]
 8049e16:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8049e1a:	2b01      	cmp	r3, #1
 8049e1c:	d930      	bls.n	8049e80 <USBD_DFU_EP0_TxReady+0x1c2>
          return (uint8_t)USBD_FAIL;
        }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8049e1e:	69fb      	ldr	r3, [r7, #28]
 8049e20:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8049e24:	3b02      	subs	r3, #2
 8049e26:	029a      	lsls	r2, r3, #10
 8049e28:	69fb      	ldr	r3, [r7, #28]
 8049e2a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8049e2e:	4413      	add	r3, r2
 8049e30:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8049e32:	69bb      	ldr	r3, [r7, #24]
 8049e34:	691b      	ldr	r3, [r3, #16]
 8049e36:	69f8      	ldr	r0, [r7, #28]
 8049e38:	6979      	ldr	r1, [r7, #20]
 8049e3a:	69fa      	ldr	r2, [r7, #28]
 8049e3c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8049e40:	4798      	blx	r3
 8049e42:	4603      	mov	r3, r0
 8049e44:	2b00      	cmp	r3, #0
 8049e46:	d01b      	beq.n	8049e80 <USBD_DFU_EP0_TxReady+0x1c2>
        {
          /* Update the state machine */
          hdfu->dev_state = DFU_STATE_ERROR;
 8049e48:	69fb      	ldr	r3, [r7, #28]
 8049e4a:	220a      	movs	r2, #10
 8049e4c:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8049e50:	69fb      	ldr	r3, [r7, #28]
 8049e52:	220b      	movs	r2, #11
 8049e54:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
          hdfu->dev_status[1] = 0U;
 8049e58:	69fb      	ldr	r3, [r7, #28]
 8049e5a:	2200      	movs	r2, #0
 8049e5c:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 8049e60:	69fb      	ldr	r3, [r7, #28]
 8049e62:	2200      	movs	r2, #0
 8049e64:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 8049e68:	69fb      	ldr	r3, [r7, #28]
 8049e6a:	2200      	movs	r2, #0
 8049e6c:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 8049e70:	69fb      	ldr	r3, [r7, #28]
 8049e72:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8049e76:	69fb      	ldr	r3, [r7, #28]
 8049e78:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          return (uint8_t)USBD_FAIL;
 8049e7c:	2303      	movs	r3, #3
 8049e7e:	e02a      	b.n	8049ed6 <USBD_DFU_EP0_TxReady+0x218>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8049e80:	69fb      	ldr	r3, [r7, #28]
 8049e82:	2200      	movs	r2, #0
 8049e84:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8049e88:	69fb      	ldr	r3, [r7, #28]
 8049e8a:	2200      	movs	r2, #0
 8049e8c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8049e90:	69fb      	ldr	r3, [r7, #28]
 8049e92:	2203      	movs	r2, #3
 8049e94:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 8049e98:	69fb      	ldr	r3, [r7, #28]
 8049e9a:	2200      	movs	r2, #0
 8049e9c:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8049ea0:	69fb      	ldr	r3, [r7, #28]
 8049ea2:	2200      	movs	r2, #0
 8049ea4:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8049ea8:	69fb      	ldr	r3, [r7, #28]
 8049eaa:	2200      	movs	r2, #0
 8049eac:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8049eb0:	69fb      	ldr	r3, [r7, #28]
 8049eb2:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8049eb6:	69fb      	ldr	r3, [r7, #28]
 8049eb8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 8049ebc:	e00a      	b.n	8049ed4 <USBD_DFU_EP0_TxReady+0x216>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8049ebe:	69fb      	ldr	r3, [r7, #28]
 8049ec0:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8049ec4:	2b07      	cmp	r3, #7
 8049ec6:	d103      	bne.n	8049ed0 <USBD_DFU_EP0_TxReady+0x212>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8049ec8:	6878      	ldr	r0, [r7, #4]
 8049eca:	f000 fbe6 	bl	804a69a <DFU_Leave>
 8049ece:	e001      	b.n	8049ed4 <USBD_DFU_EP0_TxReady+0x216>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8049ed0:	2303      	movs	r3, #3
 8049ed2:	e000      	b.n	8049ed6 <USBD_DFU_EP0_TxReady+0x218>
  }

  return (uint8_t)USBD_OK;
 8049ed4:	2300      	movs	r3, #0
}
 8049ed6:	4618      	mov	r0, r3
 8049ed8:	3720      	adds	r7, #32
 8049eda:	46bd      	mov	sp, r7
 8049edc:	bd80      	pop	{r7, pc}

08049ede <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8049ede:	b480      	push	{r7}
 8049ee0:	b083      	sub	sp, #12
 8049ee2:	af00      	add	r7, sp, #0
 8049ee4:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8049ee6:	2300      	movs	r3, #0
}
 8049ee8:	4618      	mov	r0, r3
 8049eea:	370c      	adds	r7, #12
 8049eec:	46bd      	mov	sp, r7
 8049eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049ef2:	4770      	bx	lr

08049ef4 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8049ef4:	b480      	push	{r7}
 8049ef6:	b083      	sub	sp, #12
 8049ef8:	af00      	add	r7, sp, #0
 8049efa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8049efc:	687b      	ldr	r3, [r7, #4]
 8049efe:	220a      	movs	r2, #10
 8049f00:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8049f02:	4b03      	ldr	r3, [pc, #12]	@ (8049f10 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8049f04:	4618      	mov	r0, r3
 8049f06:	370c      	adds	r7, #12
 8049f08:	46bd      	mov	sp, r7
 8049f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049f0e:	4770      	bx	lr
 8049f10:	24000068 	.word	0x24000068

08049f14 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8049f14:	b580      	push	{r7, lr}
 8049f16:	b086      	sub	sp, #24
 8049f18:	af00      	add	r7, sp, #0
 8049f1a:	60f8      	str	r0, [r7, #12]
 8049f1c:	460b      	mov	r3, r1
 8049f1e:	607a      	str	r2, [r7, #4]
 8049f20:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8049f22:	68fb      	ldr	r3, [r7, #12]
 8049f24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8049f28:	68fa      	ldr	r2, [r7, #12]
 8049f2a:	33b0      	adds	r3, #176	@ 0xb0
 8049f2c:	009b      	lsls	r3, r3, #2
 8049f2e:	4413      	add	r3, r2
 8049f30:	685b      	ldr	r3, [r3, #4]
 8049f32:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8049f34:	7afb      	ldrb	r3, [r7, #11]
 8049f36:	2b06      	cmp	r3, #6
 8049f38:	d808      	bhi.n	8049f4c <USBD_DFU_GetUsrStringDesc+0x38>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8049f3a:	697b      	ldr	r3, [r7, #20]
 8049f3c:	681b      	ldr	r3, [r3, #0]
 8049f3e:	687a      	ldr	r2, [r7, #4]
 8049f40:	4906      	ldr	r1, [pc, #24]	@ (8049f5c <USBD_DFU_GetUsrStringDesc+0x48>)
 8049f42:	4618      	mov	r0, r3
 8049f44:	f7ff fc58 	bl	80497f8 <USBD_GetString>
    return USBD_StrDesc;
 8049f48:	4b04      	ldr	r3, [pc, #16]	@ (8049f5c <USBD_DFU_GetUsrStringDesc+0x48>)
 8049f4a:	e003      	b.n	8049f54 <USBD_DFU_GetUsrStringDesc+0x40>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    *length = 0U;
 8049f4c:	687b      	ldr	r3, [r7, #4]
 8049f4e:	2200      	movs	r2, #0
 8049f50:	801a      	strh	r2, [r3, #0]
    return NULL;
 8049f52:	2300      	movs	r3, #0
  }
}
 8049f54:	4618      	mov	r0, r3
 8049f56:	3718      	adds	r7, #24
 8049f58:	46bd      	mov	sp, r7
 8049f5a:	bd80      	pop	{r7, pc}
 8049f5c:	24000220 	.word	0x24000220

08049f60 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8049f60:	b480      	push	{r7}
 8049f62:	b083      	sub	sp, #12
 8049f64:	af00      	add	r7, sp, #0
 8049f66:	6078      	str	r0, [r7, #4]
 8049f68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8049f6a:	683b      	ldr	r3, [r7, #0]
 8049f6c:	2b00      	cmp	r3, #0
 8049f6e:	d101      	bne.n	8049f74 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8049f70:	2303      	movs	r3, #3
 8049f72:	e009      	b.n	8049f88 <USBD_DFU_RegisterMedia+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8049f74:	687b      	ldr	r3, [r7, #4]
 8049f76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8049f7a:	687a      	ldr	r2, [r7, #4]
 8049f7c:	33b0      	adds	r3, #176	@ 0xb0
 8049f7e:	009b      	lsls	r3, r3, #2
 8049f80:	4413      	add	r3, r2
 8049f82:	683a      	ldr	r2, [r7, #0]
 8049f84:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8049f86:	2300      	movs	r3, #0
}
 8049f88:	4618      	mov	r0, r3
 8049f8a:	370c      	adds	r7, #12
 8049f8c:	46bd      	mov	sp, r7
 8049f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049f92:	4770      	bx	lr

08049f94 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8049f94:	b580      	push	{r7, lr}
 8049f96:	b084      	sub	sp, #16
 8049f98:	af00      	add	r7, sp, #0
 8049f9a:	6078      	str	r0, [r7, #4]
 8049f9c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8049f9e:	687b      	ldr	r3, [r7, #4]
 8049fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049fa4:	687b      	ldr	r3, [r7, #4]
 8049fa6:	32b0      	adds	r2, #176	@ 0xb0
 8049fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049fac:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8049fae:	687b      	ldr	r3, [r7, #4]
 8049fb0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8049fb4:	4618      	mov	r0, r3
 8049fb6:	f000 fbd5 	bl	804a764 <USBD_DFU_GetDfuFuncDesc>
 8049fba:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 8049fbc:	68fb      	ldr	r3, [r7, #12]
 8049fbe:	2b00      	cmp	r3, #0
 8049fc0:	d054      	beq.n	804a06c <DFU_Detach+0xd8>
 8049fc2:	68bb      	ldr	r3, [r7, #8]
 8049fc4:	2b00      	cmp	r3, #0
 8049fc6:	d051      	beq.n	804a06c <DFU_Detach+0xd8>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8049fc8:	68fb      	ldr	r3, [r7, #12]
 8049fca:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8049fce:	2b02      	cmp	r3, #2
 8049fd0:	d013      	beq.n	8049ffa <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8049fd2:	68fb      	ldr	r3, [r7, #12]
 8049fd4:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8049fd8:	2b03      	cmp	r3, #3
 8049fda:	d00e      	beq.n	8049ffa <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8049fdc:	68fb      	ldr	r3, [r7, #12]
 8049fde:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8049fe2:	2b05      	cmp	r3, #5
 8049fe4:	d009      	beq.n	8049ffa <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8049fe6:	68fb      	ldr	r3, [r7, #12]
 8049fe8:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8049fec:	2b06      	cmp	r3, #6
 8049fee:	d004      	beq.n	8049ffa <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8049ff0:	68fb      	ldr	r3, [r7, #12]
 8049ff2:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8049ff6:	2b09      	cmp	r3, #9
 8049ff8:	d125      	bne.n	804a046 <DFU_Detach+0xb2>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8049ffa:	68fb      	ldr	r3, [r7, #12]
 8049ffc:	2202      	movs	r2, #2
 8049ffe:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 804a002:	68fb      	ldr	r3, [r7, #12]
 804a004:	2200      	movs	r2, #0
 804a006:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 804a00a:	68fb      	ldr	r3, [r7, #12]
 804a00c:	2200      	movs	r2, #0
 804a00e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 804a012:	68fb      	ldr	r3, [r7, #12]
 804a014:	2200      	movs	r2, #0
 804a016:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 804a01a:	68fb      	ldr	r3, [r7, #12]
 804a01c:	2200      	movs	r2, #0
 804a01e:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 804a022:	68fb      	ldr	r3, [r7, #12]
 804a024:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a028:	68fb      	ldr	r3, [r7, #12]
 804a02a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /*iString*/
 804a02e:	68fb      	ldr	r3, [r7, #12]
 804a030:	2200      	movs	r2, #0
 804a032:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 804a036:	68fb      	ldr	r3, [r7, #12]
 804a038:	2200      	movs	r2, #0
 804a03a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 804a03e:	68fb      	ldr	r3, [r7, #12]
 804a040:	2200      	movs	r2, #0
 804a042:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 804a046:	68bb      	ldr	r3, [r7, #8]
 804a048:	789b      	ldrb	r3, [r3, #2]
 804a04a:	f003 0308 	and.w	r3, r3, #8
 804a04e:	2b00      	cmp	r3, #0
 804a050:	d006      	beq.n	804a060 <DFU_Detach+0xcc>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 804a052:	6878      	ldr	r0, [r7, #4]
 804a054:	f7fe f9f9 	bl	804844a <USBD_Stop>
    (void)USBD_Start(pdev);
 804a058:	6878      	ldr	r0, [r7, #4]
 804a05a:	f7fe f9ea 	bl	8048432 <USBD_Start>
 804a05e:	e006      	b.n	804a06e <DFU_Detach+0xda>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 804a060:	683b      	ldr	r3, [r7, #0]
 804a062:	885b      	ldrh	r3, [r3, #2]
 804a064:	4618      	mov	r0, r3
 804a066:	f7f7 f843 	bl	80410f0 <HAL_Delay>
 804a06a:	e000      	b.n	804a06e <DFU_Detach+0xda>
    return;
 804a06c:	bf00      	nop
  }
}
 804a06e:	3710      	adds	r7, #16
 804a070:	46bd      	mov	sp, r7
 804a072:	bd80      	pop	{r7, pc}

0804a074 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 804a074:	b580      	push	{r7, lr}
 804a076:	b084      	sub	sp, #16
 804a078:	af00      	add	r7, sp, #0
 804a07a:	6078      	str	r0, [r7, #4]
 804a07c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804a07e:	687b      	ldr	r3, [r7, #4]
 804a080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804a084:	687b      	ldr	r3, [r7, #4]
 804a086:	32b0      	adds	r2, #176	@ 0xb0
 804a088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804a08c:	60fb      	str	r3, [r7, #12]
#if (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

  if (hdfu == NULL)
 804a08e:	68fb      	ldr	r3, [r7, #12]
 804a090:	2b00      	cmp	r3, #0
 804a092:	d061      	beq.n	804a158 <DFU_Download+0xe4>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 804a094:	683b      	ldr	r3, [r7, #0]
 804a096:	88db      	ldrh	r3, [r3, #6]
 804a098:	2b00      	cmp	r3, #0
 804a09a:	d033      	beq.n	804a104 <DFU_Download+0x90>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 804a09c:	68fb      	ldr	r3, [r7, #12]
 804a09e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a0a2:	2b02      	cmp	r3, #2
 804a0a4:	d004      	beq.n	804a0b0 <DFU_Download+0x3c>
 804a0a6:	68fb      	ldr	r3, [r7, #12]
 804a0a8:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a0ac:	2b05      	cmp	r3, #5
 804a0ae:	d124      	bne.n	804a0fa <DFU_Download+0x86>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 804a0b0:	683b      	ldr	r3, [r7, #0]
 804a0b2:	885b      	ldrh	r3, [r3, #2]
 804a0b4:	461a      	mov	r2, r3
 804a0b6:	68fb      	ldr	r3, [r7, #12]
 804a0b8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 804a0bc:	683b      	ldr	r3, [r7, #0]
 804a0be:	88db      	ldrh	r3, [r3, #6]
 804a0c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 804a0c4:	bf28      	it	cs
 804a0c6:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 804a0ca:	b29b      	uxth	r3, r3
 804a0cc:	461a      	mov	r2, r3
 804a0ce:	68fb      	ldr	r3, [r7, #12]
 804a0d0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 804a0d4:	68fb      	ldr	r3, [r7, #12]
 804a0d6:	2203      	movs	r2, #3
 804a0d8:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
      hdfu->dev_status[4] = hdfu->dev_state;
 804a0dc:	68fb      	ldr	r3, [r7, #12]
 804a0de:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a0e2:	68fb      	ldr	r3, [r7, #12]
 804a0e4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 804a0e8:	68f9      	ldr	r1, [r7, #12]
 804a0ea:	68fb      	ldr	r3, [r7, #12]
 804a0ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 804a0f0:	461a      	mov	r2, r3
 804a0f2:	6878      	ldr	r0, [r7, #4]
 804a0f4:	f000 fb90 	bl	804a818 <USBD_CtlPrepareRx>
 804a0f8:	e02f      	b.n	804a15a <DFU_Download+0xe6>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 804a0fa:	6839      	ldr	r1, [r7, #0]
 804a0fc:	6878      	ldr	r0, [r7, #4]
 804a0fe:	f7ff fb6a 	bl	80497d6 <USBD_CtlError>
 804a102:	e02a      	b.n	804a15a <DFU_Download+0xe6>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation */
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 804a104:	68fb      	ldr	r3, [r7, #12]
 804a106:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a10a:	2b05      	cmp	r3, #5
 804a10c:	d004      	beq.n	804a118 <DFU_Download+0xa4>
 804a10e:	68fb      	ldr	r3, [r7, #12]
 804a110:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a114:	2b02      	cmp	r3, #2
 804a116:	d11a      	bne.n	804a14e <DFU_Download+0xda>
        hdfu->dev_status[4] = hdfu->dev_state;
      }
      else
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */
      {
        hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 804a118:	68fb      	ldr	r3, [r7, #12]
 804a11a:	2201      	movs	r2, #1
 804a11c:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 804a120:	68fb      	ldr	r3, [r7, #12]
 804a122:	2206      	movs	r2, #6
 804a124:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 804a128:	68fb      	ldr	r3, [r7, #12]
 804a12a:	2200      	movs	r2, #0
 804a12c:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 804a130:	68fb      	ldr	r3, [r7, #12]
 804a132:	2200      	movs	r2, #0
 804a134:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 804a138:	68fb      	ldr	r3, [r7, #12]
 804a13a:	2200      	movs	r2, #0
 804a13c:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 804a140:	68fb      	ldr	r3, [r7, #12]
 804a142:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a146:	68fb      	ldr	r3, [r7, #12]
 804a148:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 804a14c:	e005      	b.n	804a15a <DFU_Download+0xe6>
      }
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 804a14e:	6839      	ldr	r1, [r7, #0]
 804a150:	6878      	ldr	r0, [r7, #4]
 804a152:	f7ff fb40 	bl	80497d6 <USBD_CtlError>
 804a156:	e000      	b.n	804a15a <DFU_Download+0xe6>
    return;
 804a158:	bf00      	nop
    }
  }
}
 804a15a:	3710      	adds	r7, #16
 804a15c:	46bd      	mov	sp, r7
 804a15e:	bd80      	pop	{r7, pc}

0804a160 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 804a160:	b580      	push	{r7, lr}
 804a162:	b088      	sub	sp, #32
 804a164:	af00      	add	r7, sp, #0
 804a166:	6078      	str	r0, [r7, #4]
 804a168:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804a16a:	687b      	ldr	r3, [r7, #4]
 804a16c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804a170:	687b      	ldr	r3, [r7, #4]
 804a172:	32b0      	adds	r2, #176	@ 0xb0
 804a174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804a178:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 804a17a:	687b      	ldr	r3, [r7, #4]
 804a17c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 804a180:	687a      	ldr	r2, [r7, #4]
 804a182:	33b0      	adds	r3, #176	@ 0xb0
 804a184:	009b      	lsls	r3, r3, #2
 804a186:	4413      	add	r3, r2
 804a188:	685b      	ldr	r3, [r3, #4]
 804a18a:	61bb      	str	r3, [r7, #24]
  uint8_t VendorCmdLength = 0U;
  uint8_t VendorCmdBuffer[DFU_VENDOR_CMD_MAX];
  uint8_t idx;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 804a18c:	69fb      	ldr	r3, [r7, #28]
 804a18e:	2b00      	cmp	r3, #0
 804a190:	f000 80ea 	beq.w	804a368 <DFU_Upload+0x208>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 804a194:	683b      	ldr	r3, [r7, #0]
 804a196:	88db      	ldrh	r3, [r3, #6]
 804a198:	2b00      	cmp	r3, #0
 804a19a:	f000 80ce 	beq.w	804a33a <DFU_Upload+0x1da>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 804a19e:	69fb      	ldr	r3, [r7, #28]
 804a1a0:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a1a4:	2b02      	cmp	r3, #2
 804a1a6:	d005      	beq.n	804a1b4 <DFU_Upload+0x54>
 804a1a8:	69fb      	ldr	r3, [r7, #28]
 804a1aa:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a1ae:	2b09      	cmp	r3, #9
 804a1b0:	f040 80b6 	bne.w	804a320 <DFU_Upload+0x1c0>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 804a1b4:	683b      	ldr	r3, [r7, #0]
 804a1b6:	885b      	ldrh	r3, [r3, #2]
 804a1b8:	461a      	mov	r2, r3
 804a1ba:	69fb      	ldr	r3, [r7, #28]
 804a1bc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 804a1c0:	683b      	ldr	r3, [r7, #0]
 804a1c2:	88db      	ldrh	r3, [r3, #6]
 804a1c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 804a1c8:	bf28      	it	cs
 804a1ca:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 804a1ce:	b29b      	uxth	r3, r3
 804a1d0:	461a      	mov	r2, r3
 804a1d2:	69fb      	ldr	r3, [r7, #28]
 804a1d4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 804a1d8:	69fb      	ldr	r3, [r7, #28]
 804a1da:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 804a1de:	2b00      	cmp	r3, #0
 804a1e0:	d12e      	bne.n	804a240 <DFU_Upload+0xe0>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 804a1e2:	69fb      	ldr	r3, [r7, #28]
 804a1e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 804a1e8:	2b03      	cmp	r3, #3
 804a1ea:	d901      	bls.n	804a1f0 <DFU_Upload+0x90>
 804a1ec:	2202      	movs	r2, #2
 804a1ee:	e000      	b.n	804a1f2 <DFU_Upload+0x92>
 804a1f0:	2209      	movs	r2, #9
 804a1f2:	69fb      	ldr	r3, [r7, #28]
 804a1f4:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 804a1f8:	69fb      	ldr	r3, [r7, #28]
 804a1fa:	2200      	movs	r2, #0
 804a1fc:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 804a200:	69fb      	ldr	r3, [r7, #28]
 804a202:	2200      	movs	r2, #0
 804a204:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 804a208:	69fb      	ldr	r3, [r7, #28]
 804a20a:	2200      	movs	r2, #0
 804a20c:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 804a210:	69fb      	ldr	r3, [r7, #28]
 804a212:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a216:	69fb      	ldr	r3, [r7, #28]
 804a218:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 804a21c:	69fb      	ldr	r3, [r7, #28]
 804a21e:	2200      	movs	r2, #0
 804a220:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 804a222:	69fb      	ldr	r3, [r7, #28]
 804a224:	2221      	movs	r2, #33	@ 0x21
 804a226:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 804a228:	69fb      	ldr	r3, [r7, #28]
 804a22a:	2241      	movs	r2, #65	@ 0x41
 804a22c:	709a      	strb	r2, [r3, #2]

        CmdLength = 3U;
 804a22e:	2303      	movs	r3, #3
 804a230:	60fb      	str	r3, [r7, #12]
          CmdLength += MIN(VendorCmdLength, DFU_VENDOR_CMD_MAX);
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 804a232:	69fb      	ldr	r3, [r7, #28]
 804a234:	68fa      	ldr	r2, [r7, #12]
 804a236:	4619      	mov	r1, r3
 804a238:	6878      	ldr	r0, [r7, #4]
 804a23a:	f000 fac1 	bl	804a7c0 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 804a23e:	e094      	b.n	804a36a <DFU_Upload+0x20a>
      }
      else if (hdfu->wblock_num > 1U)
 804a240:	69fb      	ldr	r3, [r7, #28]
 804a242:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 804a246:	2b01      	cmp	r3, #1
 804a248:	d94f      	bls.n	804a2ea <DFU_Upload+0x18a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 804a24a:	69fb      	ldr	r3, [r7, #28]
 804a24c:	2209      	movs	r2, #9
 804a24e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 804a252:	69fb      	ldr	r3, [r7, #28]
 804a254:	2200      	movs	r2, #0
 804a256:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 804a25a:	69fb      	ldr	r3, [r7, #28]
 804a25c:	2200      	movs	r2, #0
 804a25e:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 804a262:	69fb      	ldr	r3, [r7, #28]
 804a264:	2200      	movs	r2, #0
 804a266:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 804a26a:	69fb      	ldr	r3, [r7, #28]
 804a26c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a270:	69fb      	ldr	r3, [r7, #28]
 804a272:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        }

        if (VendorStatus == IS_DFU_PHY_ADDRESS)
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
        {
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 804a276:	69fb      	ldr	r3, [r7, #28]
 804a278:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 804a27c:	3b02      	subs	r3, #2
 804a27e:	029a      	lsls	r2, r3, #10
 804a280:	69fb      	ldr	r3, [r7, #28]
 804a282:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 804a286:	4413      	add	r3, r2
 804a288:	617b      	str	r3, [r7, #20]

          /* Return the physical address where data are stored */
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 804a28a:	69bb      	ldr	r3, [r7, #24]
 804a28c:	695b      	ldr	r3, [r3, #20]
 804a28e:	6978      	ldr	r0, [r7, #20]
 804a290:	69f9      	ldr	r1, [r7, #28]
 804a292:	69fa      	ldr	r2, [r7, #28]
 804a294:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 804a298:	4798      	blx	r3
 804a29a:	6138      	str	r0, [r7, #16]

          if (phaddr == NULL)
 804a29c:	693b      	ldr	r3, [r7, #16]
 804a29e:	2b00      	cmp	r3, #0
 804a2a0:	d11a      	bne.n	804a2d8 <DFU_Upload+0x178>
          {
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 804a2a2:	69fb      	ldr	r3, [r7, #28]
 804a2a4:	220f      	movs	r2, #15
 804a2a6:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

            hdfu->dev_status[1] = 0U;
 804a2aa:	69fb      	ldr	r3, [r7, #28]
 804a2ac:	2200      	movs	r2, #0
 804a2ae:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 804a2b2:	69fb      	ldr	r3, [r7, #28]
 804a2b4:	2200      	movs	r2, #0
 804a2b6:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 804a2ba:	69fb      	ldr	r3, [r7, #28]
 804a2bc:	2200      	movs	r2, #0
 804a2be:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 804a2c2:	69fb      	ldr	r3, [r7, #28]
 804a2c4:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a2c8:	69fb      	ldr	r3, [r7, #28]
 804a2ca:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

            /* Call the error management function (command will be NAKed) */
            USBD_CtlError(pdev, req);
 804a2ce:	6839      	ldr	r1, [r7, #0]
 804a2d0:	6878      	ldr	r0, [r7, #4]
 804a2d2:	f7ff fa80 	bl	80497d6 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 804a2d6:	e048      	b.n	804a36a <DFU_Upload+0x20a>
          }
          else
          {
            /* Send the status data over EP0 */
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 804a2d8:	69fb      	ldr	r3, [r7, #28]
 804a2da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 804a2de:	461a      	mov	r2, r3
 804a2e0:	6939      	ldr	r1, [r7, #16]
 804a2e2:	6878      	ldr	r0, [r7, #4]
 804a2e4:	f000 fa6c 	bl	804a7c0 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 804a2e8:	e03f      	b.n	804a36a <DFU_Upload+0x20a>
          }
        }
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 804a2ea:	69fb      	ldr	r3, [r7, #28]
 804a2ec:	220f      	movs	r2, #15
 804a2ee:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 804a2f2:	69fb      	ldr	r3, [r7, #28]
 804a2f4:	2200      	movs	r2, #0
 804a2f6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 804a2fa:	69fb      	ldr	r3, [r7, #28]
 804a2fc:	2200      	movs	r2, #0
 804a2fe:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 804a302:	69fb      	ldr	r3, [r7, #28]
 804a304:	2200      	movs	r2, #0
 804a306:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 804a30a:	69fb      	ldr	r3, [r7, #28]
 804a30c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a310:	69fb      	ldr	r3, [r7, #28]
 804a312:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        /* Call the error management function (command will be NAKed) */
        USBD_CtlError(pdev, req);
 804a316:	6839      	ldr	r1, [r7, #0]
 804a318:	6878      	ldr	r0, [r7, #4]
 804a31a:	f7ff fa5c 	bl	80497d6 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 804a31e:	e024      	b.n	804a36a <DFU_Upload+0x20a>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 804a320:	69fb      	ldr	r3, [r7, #28]
 804a322:	2200      	movs	r2, #0
 804a324:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 804a328:	69fb      	ldr	r3, [r7, #28]
 804a32a:	2200      	movs	r2, #0
 804a32c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed) */
      USBD_CtlError(pdev, req);
 804a330:	6839      	ldr	r1, [r7, #0]
 804a332:	6878      	ldr	r0, [r7, #4]
 804a334:	f7ff fa4f 	bl	80497d6 <USBD_CtlError>
 804a338:	e017      	b.n	804a36a <DFU_Upload+0x20a>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 804a33a:	69fb      	ldr	r3, [r7, #28]
 804a33c:	2202      	movs	r2, #2
 804a33e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 804a342:	69fb      	ldr	r3, [r7, #28]
 804a344:	2200      	movs	r2, #0
 804a346:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 804a34a:	69fb      	ldr	r3, [r7, #28]
 804a34c:	2200      	movs	r2, #0
 804a34e:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 804a352:	69fb      	ldr	r3, [r7, #28]
 804a354:	2200      	movs	r2, #0
 804a356:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 804a35a:	69fb      	ldr	r3, [r7, #28]
 804a35c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a360:	69fb      	ldr	r3, [r7, #28]
 804a362:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 804a366:	e000      	b.n	804a36a <DFU_Upload+0x20a>
    return;
 804a368:	bf00      	nop
  }
}
 804a36a:	3720      	adds	r7, #32
 804a36c:	46bd      	mov	sp, r7
 804a36e:	bd80      	pop	{r7, pc}

0804a370 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 804a370:	b580      	push	{r7, lr}
 804a372:	b086      	sub	sp, #24
 804a374:	af00      	add	r7, sp, #0
 804a376:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804a378:	687b      	ldr	r3, [r7, #4]
 804a37a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804a37e:	687b      	ldr	r3, [r7, #4]
 804a380:	32b0      	adds	r2, #176	@ 0xb0
 804a382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804a386:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 804a388:	687b      	ldr	r3, [r7, #4]
 804a38a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 804a38e:	687a      	ldr	r2, [r7, #4]
 804a390:	33b0      	adds	r3, #176	@ 0xb0
 804a392:	009b      	lsls	r3, r3, #2
 804a394:	4413      	add	r3, r2
 804a396:	685b      	ldr	r3, [r3, #4]
 804a398:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 804a39a:	687b      	ldr	r3, [r7, #4]
 804a39c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 804a3a0:	4618      	mov	r0, r3
 804a3a2:	f000 f9df 	bl	804a764 <USBD_DFU_GetDfuFuncDesc>
 804a3a6:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 804a3a8:	697b      	ldr	r3, [r7, #20]
 804a3aa:	2b00      	cmp	r3, #0
 804a3ac:	f000 80a8 	beq.w	804a500 <DFU_GetStatus+0x190>
 804a3b0:	693b      	ldr	r3, [r7, #16]
 804a3b2:	2b00      	cmp	r3, #0
 804a3b4:	f000 80a4 	beq.w	804a500 <DFU_GetStatus+0x190>
 804a3b8:	68fb      	ldr	r3, [r7, #12]
 804a3ba:	2b00      	cmp	r3, #0
 804a3bc:	f000 80a0 	beq.w	804a500 <DFU_GetStatus+0x190>
  {
    return;
  }

  switch (hdfu->dev_state)
 804a3c0:	697b      	ldr	r3, [r7, #20]
 804a3c2:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a3c6:	2b03      	cmp	r3, #3
 804a3c8:	d002      	beq.n	804a3d0 <DFU_GetStatus+0x60>
 804a3ca:	2b06      	cmp	r3, #6
 804a3cc:	d051      	beq.n	804a472 <DFU_GetStatus+0x102>
        }
      }
      break;

    default:
      break;
 804a3ce:	e08e      	b.n	804a4ee <DFU_GetStatus+0x17e>
      if (hdfu->wlength != 0U)
 804a3d0:	697b      	ldr	r3, [r7, #20]
 804a3d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 804a3d6:	2b00      	cmp	r3, #0
 804a3d8:	d034      	beq.n	804a444 <DFU_GetStatus+0xd4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 804a3da:	697b      	ldr	r3, [r7, #20]
 804a3dc:	2204      	movs	r2, #4
 804a3de:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 804a3e2:	697b      	ldr	r3, [r7, #20]
 804a3e4:	2200      	movs	r2, #0
 804a3e6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 804a3ea:	697b      	ldr	r3, [r7, #20]
 804a3ec:	2200      	movs	r2, #0
 804a3ee:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 804a3f2:	697b      	ldr	r3, [r7, #20]
 804a3f4:	2200      	movs	r2, #0
 804a3f6:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 804a3fa:	697b      	ldr	r3, [r7, #20]
 804a3fc:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a400:	697b      	ldr	r3, [r7, #20]
 804a402:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 804a406:	697b      	ldr	r3, [r7, #20]
 804a408:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 804a40c:	2b00      	cmp	r3, #0
 804a40e:	d10e      	bne.n	804a42e <DFU_GetStatus+0xbe>
 804a410:	697b      	ldr	r3, [r7, #20]
 804a412:	781b      	ldrb	r3, [r3, #0]
 804a414:	2b41      	cmp	r3, #65	@ 0x41
 804a416:	d10a      	bne.n	804a42e <DFU_GetStatus+0xbe>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 804a418:	693b      	ldr	r3, [r7, #16]
 804a41a:	699b      	ldr	r3, [r3, #24]
 804a41c:	697a      	ldr	r2, [r7, #20]
 804a41e:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 804a422:	697a      	ldr	r2, [r7, #20]
 804a424:	f202 4214 	addw	r2, r2, #1044	@ 0x414
 804a428:	2100      	movs	r1, #0
 804a42a:	4798      	blx	r3
      break;
 804a42c:	e05f      	b.n	804a4ee <DFU_GetStatus+0x17e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 804a42e:	693b      	ldr	r3, [r7, #16]
 804a430:	699b      	ldr	r3, [r3, #24]
 804a432:	697a      	ldr	r2, [r7, #20]
 804a434:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 804a438:	697a      	ldr	r2, [r7, #20]
 804a43a:	f202 4214 	addw	r2, r2, #1044	@ 0x414
 804a43e:	2101      	movs	r1, #1
 804a440:	4798      	blx	r3
      break;
 804a442:	e054      	b.n	804a4ee <DFU_GetStatus+0x17e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 804a444:	697b      	ldr	r3, [r7, #20]
 804a446:	2205      	movs	r2, #5
 804a448:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 804a44c:	697b      	ldr	r3, [r7, #20]
 804a44e:	2200      	movs	r2, #0
 804a450:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 804a454:	697b      	ldr	r3, [r7, #20]
 804a456:	2200      	movs	r2, #0
 804a458:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 804a45c:	697b      	ldr	r3, [r7, #20]
 804a45e:	2200      	movs	r2, #0
 804a460:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 804a464:	697b      	ldr	r3, [r7, #20]
 804a466:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a46a:	697b      	ldr	r3, [r7, #20]
 804a46c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 804a470:	e03d      	b.n	804a4ee <DFU_GetStatus+0x17e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 804a472:	697b      	ldr	r3, [r7, #20]
 804a474:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 804a478:	2b01      	cmp	r3, #1
 804a47a:	d116      	bne.n	804a4aa <DFU_GetStatus+0x13a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 804a47c:	697b      	ldr	r3, [r7, #20]
 804a47e:	2207      	movs	r2, #7
 804a480:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 804a484:	697b      	ldr	r3, [r7, #20]
 804a486:	2201      	movs	r2, #1
 804a488:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 804a48c:	697b      	ldr	r3, [r7, #20]
 804a48e:	2200      	movs	r2, #0
 804a490:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 804a494:	697b      	ldr	r3, [r7, #20]
 804a496:	2200      	movs	r2, #0
 804a498:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 804a49c:	697b      	ldr	r3, [r7, #20]
 804a49e:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a4a2:	697b      	ldr	r3, [r7, #20]
 804a4a4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 804a4a8:	e020      	b.n	804a4ec <DFU_GetStatus+0x17c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 804a4aa:	697b      	ldr	r3, [r7, #20]
 804a4ac:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 804a4b0:	2b00      	cmp	r3, #0
 804a4b2:	d11b      	bne.n	804a4ec <DFU_GetStatus+0x17c>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 804a4b4:	68fb      	ldr	r3, [r7, #12]
 804a4b6:	789b      	ldrb	r3, [r3, #2]
 804a4b8:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 804a4bc:	2b00      	cmp	r3, #0
 804a4be:	d015      	beq.n	804a4ec <DFU_GetStatus+0x17c>
          hdfu->dev_state = DFU_STATE_IDLE;
 804a4c0:	697b      	ldr	r3, [r7, #20]
 804a4c2:	2202      	movs	r2, #2
 804a4c4:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
          hdfu->dev_status[1] = 0U;
 804a4c8:	697b      	ldr	r3, [r7, #20]
 804a4ca:	2200      	movs	r2, #0
 804a4cc:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 804a4d0:	697b      	ldr	r3, [r7, #20]
 804a4d2:	2200      	movs	r2, #0
 804a4d4:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 804a4d8:	697b      	ldr	r3, [r7, #20]
 804a4da:	2200      	movs	r2, #0
 804a4dc:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 804a4e0:	697b      	ldr	r3, [r7, #20]
 804a4e2:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a4e6:	697b      	ldr	r3, [r7, #20]
 804a4e8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 804a4ec:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 804a4ee:	697b      	ldr	r3, [r7, #20]
 804a4f0:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 804a4f4:	2206      	movs	r2, #6
 804a4f6:	4619      	mov	r1, r3
 804a4f8:	6878      	ldr	r0, [r7, #4]
 804a4fa:	f000 f961 	bl	804a7c0 <USBD_CtlSendData>
 804a4fe:	e000      	b.n	804a502 <DFU_GetStatus+0x192>
    return;
 804a500:	bf00      	nop
}
 804a502:	3718      	adds	r7, #24
 804a504:	46bd      	mov	sp, r7
 804a506:	bd80      	pop	{r7, pc}

0804a508 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 804a508:	b480      	push	{r7}
 804a50a:	b085      	sub	sp, #20
 804a50c:	af00      	add	r7, sp, #0
 804a50e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804a510:	687b      	ldr	r3, [r7, #4]
 804a512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804a516:	687b      	ldr	r3, [r7, #4]
 804a518:	32b0      	adds	r2, #176	@ 0xb0
 804a51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804a51e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 804a520:	68fb      	ldr	r3, [r7, #12]
 804a522:	2b00      	cmp	r3, #0
 804a524:	d042      	beq.n	804a5ac <DFU_ClearStatus+0xa4>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 804a526:	68fb      	ldr	r3, [r7, #12]
 804a528:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a52c:	2b0a      	cmp	r3, #10
 804a52e:	d11e      	bne.n	804a56e <DFU_ClearStatus+0x66>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 804a530:	68fb      	ldr	r3, [r7, #12]
 804a532:	2202      	movs	r2, #2
 804a534:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 804a538:	68fb      	ldr	r3, [r7, #12]
 804a53a:	2200      	movs	r2, #0
 804a53c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 804a540:	68fb      	ldr	r3, [r7, #12]
 804a542:	2200      	movs	r2, #0
 804a544:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 804a548:	68fb      	ldr	r3, [r7, #12]
 804a54a:	2200      	movs	r2, #0
 804a54c:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 804a550:	68fb      	ldr	r3, [r7, #12]
 804a552:	2200      	movs	r2, #0
 804a554:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 804a558:	68fb      	ldr	r3, [r7, #12]
 804a55a:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a55e:	68fb      	ldr	r3, [r7, #12]
 804a560:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 804a564:	68fb      	ldr	r3, [r7, #12]
 804a566:	2200      	movs	r2, #0
 804a568:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 804a56c:	e01f      	b.n	804a5ae <DFU_ClearStatus+0xa6>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 804a56e:	68fb      	ldr	r3, [r7, #12]
 804a570:	220a      	movs	r2, #10
 804a572:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 804a576:	68fb      	ldr	r3, [r7, #12]
 804a578:	220e      	movs	r2, #14
 804a57a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 804a57e:	68fb      	ldr	r3, [r7, #12]
 804a580:	2200      	movs	r2, #0
 804a582:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 804a586:	68fb      	ldr	r3, [r7, #12]
 804a588:	2200      	movs	r2, #0
 804a58a:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 804a58e:	68fb      	ldr	r3, [r7, #12]
 804a590:	2200      	movs	r2, #0
 804a592:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 804a596:	68fb      	ldr	r3, [r7, #12]
 804a598:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a59c:	68fb      	ldr	r3, [r7, #12]
 804a59e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 804a5a2:	68fb      	ldr	r3, [r7, #12]
 804a5a4:	2200      	movs	r2, #0
 804a5a6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 804a5aa:	e000      	b.n	804a5ae <DFU_ClearStatus+0xa6>
    return;
 804a5ac:	bf00      	nop
  }
}
 804a5ae:	3714      	adds	r7, #20
 804a5b0:	46bd      	mov	sp, r7
 804a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a5b6:	4770      	bx	lr

0804a5b8 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 804a5b8:	b580      	push	{r7, lr}
 804a5ba:	b084      	sub	sp, #16
 804a5bc:	af00      	add	r7, sp, #0
 804a5be:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804a5c0:	687b      	ldr	r3, [r7, #4]
 804a5c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804a5c6:	687b      	ldr	r3, [r7, #4]
 804a5c8:	32b0      	adds	r2, #176	@ 0xb0
 804a5ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804a5ce:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 804a5d0:	68fb      	ldr	r3, [r7, #12]
 804a5d2:	2b00      	cmp	r3, #0
 804a5d4:	d008      	beq.n	804a5e8 <DFU_GetState+0x30>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 804a5d6:	68fb      	ldr	r3, [r7, #12]
 804a5d8:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 804a5dc:	2201      	movs	r2, #1
 804a5de:	4619      	mov	r1, r3
 804a5e0:	6878      	ldr	r0, [r7, #4]
 804a5e2:	f000 f8ed 	bl	804a7c0 <USBD_CtlSendData>
 804a5e6:	e000      	b.n	804a5ea <DFU_GetState+0x32>
    return;
 804a5e8:	bf00      	nop
}
 804a5ea:	3710      	adds	r7, #16
 804a5ec:	46bd      	mov	sp, r7
 804a5ee:	bd80      	pop	{r7, pc}

0804a5f0 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 804a5f0:	b480      	push	{r7}
 804a5f2:	b085      	sub	sp, #20
 804a5f4:	af00      	add	r7, sp, #0
 804a5f6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804a5f8:	687b      	ldr	r3, [r7, #4]
 804a5fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804a5fe:	687b      	ldr	r3, [r7, #4]
 804a600:	32b0      	adds	r2, #176	@ 0xb0
 804a602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804a606:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 804a608:	68fb      	ldr	r3, [r7, #12]
 804a60a:	2b00      	cmp	r3, #0
 804a60c:	d03f      	beq.n	804a68e <DFU_Abort+0x9e>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 804a60e:	68fb      	ldr	r3, [r7, #12]
 804a610:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a614:	2b02      	cmp	r3, #2
 804a616:	d013      	beq.n	804a640 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 804a618:	68fb      	ldr	r3, [r7, #12]
 804a61a:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 804a61e:	2b03      	cmp	r3, #3
 804a620:	d00e      	beq.n	804a640 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 804a622:	68fb      	ldr	r3, [r7, #12]
 804a624:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 804a628:	2b05      	cmp	r3, #5
 804a62a:	d009      	beq.n	804a640 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 804a62c:	68fb      	ldr	r3, [r7, #12]
 804a62e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 804a632:	2b06      	cmp	r3, #6
 804a634:	d004      	beq.n	804a640 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 804a636:	68fb      	ldr	r3, [r7, #12]
 804a638:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 804a63c:	2b09      	cmp	r3, #9
 804a63e:	d127      	bne.n	804a690 <DFU_Abort+0xa0>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 804a640:	68fb      	ldr	r3, [r7, #12]
 804a642:	2202      	movs	r2, #2
 804a644:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 804a648:	68fb      	ldr	r3, [r7, #12]
 804a64a:	2200      	movs	r2, #0
 804a64c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 804a650:	68fb      	ldr	r3, [r7, #12]
 804a652:	2200      	movs	r2, #0
 804a654:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 804a658:	68fb      	ldr	r3, [r7, #12]
 804a65a:	2200      	movs	r2, #0
 804a65c:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 804a660:	68fb      	ldr	r3, [r7, #12]
 804a662:	2200      	movs	r2, #0
 804a664:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 804a668:	68fb      	ldr	r3, [r7, #12]
 804a66a:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a66e:	68fb      	ldr	r3, [r7, #12]
 804a670:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 804a674:	68fb      	ldr	r3, [r7, #12]
 804a676:	2200      	movs	r2, #0
 804a678:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 804a67c:	68fb      	ldr	r3, [r7, #12]
 804a67e:	2200      	movs	r2, #0
 804a680:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 804a684:	68fb      	ldr	r3, [r7, #12]
 804a686:	2200      	movs	r2, #0
 804a688:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 804a68c:	e000      	b.n	804a690 <DFU_Abort+0xa0>
    return;
 804a68e:	bf00      	nop
  }
}
 804a690:	3714      	adds	r7, #20
 804a692:	46bd      	mov	sp, r7
 804a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a698:	4770      	bx	lr

0804a69a <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 804a69a:	b580      	push	{r7, lr}
 804a69c:	b086      	sub	sp, #24
 804a69e:	af00      	add	r7, sp, #0
 804a6a0:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804a6a2:	687b      	ldr	r3, [r7, #4]
 804a6a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804a6a8:	687b      	ldr	r3, [r7, #4]
 804a6aa:	32b0      	adds	r2, #176	@ 0xb0
 804a6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804a6b0:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 804a6b2:	687b      	ldr	r3, [r7, #4]
 804a6b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 804a6b8:	687a      	ldr	r2, [r7, #4]
 804a6ba:	33b0      	adds	r3, #176	@ 0xb0
 804a6bc:	009b      	lsls	r3, r3, #2
 804a6be:	4413      	add	r3, r2
 804a6c0:	685b      	ldr	r3, [r3, #4]
 804a6c2:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 804a6c4:	687b      	ldr	r3, [r7, #4]
 804a6c6:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 804a6ca:	4618      	mov	r0, r3
 804a6cc:	f000 f84a 	bl	804a764 <USBD_DFU_GetDfuFuncDesc>
 804a6d0:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 804a6d2:	697b      	ldr	r3, [r7, #20]
 804a6d4:	2b00      	cmp	r3, #0
 804a6d6:	d041      	beq.n	804a75c <DFU_Leave+0xc2>
 804a6d8:	693b      	ldr	r3, [r7, #16]
 804a6da:	2b00      	cmp	r3, #0
 804a6dc:	d03e      	beq.n	804a75c <DFU_Leave+0xc2>
 804a6de:	68fb      	ldr	r3, [r7, #12]
 804a6e0:	2b00      	cmp	r3, #0
 804a6e2:	d03b      	beq.n	804a75c <DFU_Leave+0xc2>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 804a6e4:	697b      	ldr	r3, [r7, #20]
 804a6e6:	2200      	movs	r2, #0
 804a6e8:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d

  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 804a6ec:	68fb      	ldr	r3, [r7, #12]
 804a6ee:	789b      	ldrb	r3, [r3, #2]
 804a6f0:	f003 0304 	and.w	r3, r3, #4
 804a6f4:	2b00      	cmp	r3, #0
 804a6f6:	d016      	beq.n	804a726 <DFU_Leave+0x8c>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 804a6f8:	697b      	ldr	r3, [r7, #20]
 804a6fa:	2206      	movs	r2, #6
 804a6fc:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 804a700:	697b      	ldr	r3, [r7, #20]
 804a702:	2200      	movs	r2, #0
 804a704:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 804a708:	697b      	ldr	r3, [r7, #20]
 804a70a:	2200      	movs	r2, #0
 804a70c:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 804a710:	697b      	ldr	r3, [r7, #20]
 804a712:	2200      	movs	r2, #0
 804a714:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 804a718:	697b      	ldr	r3, [r7, #20]
 804a71a:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a71e:	697b      	ldr	r3, [r7, #20]
 804a720:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    return;
 804a724:	e01b      	b.n	804a75e <DFU_Leave+0xc4>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 804a726:	697b      	ldr	r3, [r7, #20]
 804a728:	2208      	movs	r2, #8
 804a72a:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 804a72e:	697b      	ldr	r3, [r7, #20]
 804a730:	2200      	movs	r2, #0
 804a732:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 804a736:	697b      	ldr	r3, [r7, #20]
 804a738:	2200      	movs	r2, #0
 804a73a:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 804a73e:	697b      	ldr	r3, [r7, #20]
 804a740:	2200      	movs	r2, #0
 804a742:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 804a746:	697b      	ldr	r3, [r7, #20]
 804a748:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a74c:	697b      	ldr	r3, [r7, #20]
 804a74e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 804a752:	6878      	ldr	r0, [r7, #4]
 804a754:	f7fd fe79 	bl	804844a <USBD_Stop>
#if (USBD_DFU_VENDOR_EXIT_ENABLED == 1U)
    /* Jump should be ensured by user application */
    DfuInterface->LeaveDFU(hdfu->data_ptr);
#else
    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 804a758:	f7ff f8ba 	bl	80498d0 <__NVIC_SystemReset>
    return;
 804a75c:	bf00      	nop
#endif /* USBD_DFU_VENDOR_EXIT_ENABLED */

    /* The next instructions will not be reached (system reset) */
  }
}
 804a75e:	3718      	adds	r7, #24
 804a760:	46bd      	mov	sp, r7
 804a762:	bd80      	pop	{r7, pc}

0804a764 <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 804a764:	b580      	push	{r7, lr}
 804a766:	b086      	sub	sp, #24
 804a768:	af00      	add	r7, sp, #0
 804a76a:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 804a76c:	687b      	ldr	r3, [r7, #4]
 804a76e:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 804a770:	687b      	ldr	r3, [r7, #4]
 804a772:	617b      	str	r3, [r7, #20]
  uint8_t *pDfuDesc = NULL;
 804a774:	2300      	movs	r3, #0
 804a776:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 804a778:	68fb      	ldr	r3, [r7, #12]
 804a77a:	885b      	ldrh	r3, [r3, #2]
 804a77c:	b29b      	uxth	r3, r3
 804a77e:	68fa      	ldr	r2, [r7, #12]
 804a780:	7812      	ldrb	r2, [r2, #0]
 804a782:	4293      	cmp	r3, r2
 804a784:	d917      	bls.n	804a7b6 <USBD_DFU_GetDfuFuncDesc+0x52>
  {
    ptr = desc->bLength;
 804a786:	68fb      	ldr	r3, [r7, #12]
 804a788:	781b      	ldrb	r3, [r3, #0]
 804a78a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 804a78c:	e00d      	b.n	804a7aa <USBD_DFU_GetDfuFuncDesc+0x46>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 804a78e:	f107 030a 	add.w	r3, r7, #10
 804a792:	4619      	mov	r1, r3
 804a794:	6978      	ldr	r0, [r7, #20]
 804a796:	f7fe f9d0 	bl	8048b3a <USBD_GetNextDesc>
 804a79a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 804a79c:	697b      	ldr	r3, [r7, #20]
 804a79e:	785b      	ldrb	r3, [r3, #1]
 804a7a0:	2b21      	cmp	r3, #33	@ 0x21
 804a7a2:	d102      	bne.n	804a7aa <USBD_DFU_GetDfuFuncDesc+0x46>
      {
        pDfuDesc = (uint8_t *)pdesc;
 804a7a4:	697b      	ldr	r3, [r7, #20]
 804a7a6:	613b      	str	r3, [r7, #16]
        break;
 804a7a8:	e005      	b.n	804a7b6 <USBD_DFU_GetDfuFuncDesc+0x52>
    while (ptr < desc->wTotalLength)
 804a7aa:	68fb      	ldr	r3, [r7, #12]
 804a7ac:	885b      	ldrh	r3, [r3, #2]
 804a7ae:	b29a      	uxth	r2, r3
 804a7b0:	897b      	ldrh	r3, [r7, #10]
 804a7b2:	429a      	cmp	r2, r3
 804a7b4:	d8eb      	bhi.n	804a78e <USBD_DFU_GetDfuFuncDesc+0x2a>
      }
    }
  }
  return pDfuDesc;
 804a7b6:	693b      	ldr	r3, [r7, #16]
}
 804a7b8:	4618      	mov	r0, r3
 804a7ba:	3718      	adds	r7, #24
 804a7bc:	46bd      	mov	sp, r7
 804a7be:	bd80      	pop	{r7, pc}

0804a7c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 804a7c0:	b580      	push	{r7, lr}
 804a7c2:	b084      	sub	sp, #16
 804a7c4:	af00      	add	r7, sp, #0
 804a7c6:	60f8      	str	r0, [r7, #12]
 804a7c8:	60b9      	str	r1, [r7, #8]
 804a7ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 804a7cc:	68fb      	ldr	r3, [r7, #12]
 804a7ce:	2202      	movs	r2, #2
 804a7d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 804a7d4:	68fb      	ldr	r3, [r7, #12]
 804a7d6:	687a      	ldr	r2, [r7, #4]
 804a7d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 804a7da:	68fb      	ldr	r3, [r7, #12]
 804a7dc:	687a      	ldr	r2, [r7, #4]
 804a7de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 804a7e0:	687b      	ldr	r3, [r7, #4]
 804a7e2:	68ba      	ldr	r2, [r7, #8]
 804a7e4:	2100      	movs	r1, #0
 804a7e6:	68f8      	ldr	r0, [r7, #12]
 804a7e8:	f000 fd41 	bl	804b26e <USBD_LL_Transmit>

  return USBD_OK;
 804a7ec:	2300      	movs	r3, #0
}
 804a7ee:	4618      	mov	r0, r3
 804a7f0:	3710      	adds	r7, #16
 804a7f2:	46bd      	mov	sp, r7
 804a7f4:	bd80      	pop	{r7, pc}

0804a7f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 804a7f6:	b580      	push	{r7, lr}
 804a7f8:	b084      	sub	sp, #16
 804a7fa:	af00      	add	r7, sp, #0
 804a7fc:	60f8      	str	r0, [r7, #12]
 804a7fe:	60b9      	str	r1, [r7, #8]
 804a800:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 804a802:	687b      	ldr	r3, [r7, #4]
 804a804:	68ba      	ldr	r2, [r7, #8]
 804a806:	2100      	movs	r1, #0
 804a808:	68f8      	ldr	r0, [r7, #12]
 804a80a:	f000 fd30 	bl	804b26e <USBD_LL_Transmit>

  return USBD_OK;
 804a80e:	2300      	movs	r3, #0
}
 804a810:	4618      	mov	r0, r3
 804a812:	3710      	adds	r7, #16
 804a814:	46bd      	mov	sp, r7
 804a816:	bd80      	pop	{r7, pc}

0804a818 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 804a818:	b580      	push	{r7, lr}
 804a81a:	b084      	sub	sp, #16
 804a81c:	af00      	add	r7, sp, #0
 804a81e:	60f8      	str	r0, [r7, #12]
 804a820:	60b9      	str	r1, [r7, #8]
 804a822:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 804a824:	68fb      	ldr	r3, [r7, #12]
 804a826:	2203      	movs	r2, #3
 804a828:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 804a82c:	68fb      	ldr	r3, [r7, #12]
 804a82e:	687a      	ldr	r2, [r7, #4]
 804a830:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 804a834:	68fb      	ldr	r3, [r7, #12]
 804a836:	687a      	ldr	r2, [r7, #4]
 804a838:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 804a83c:	687b      	ldr	r3, [r7, #4]
 804a83e:	68ba      	ldr	r2, [r7, #8]
 804a840:	2100      	movs	r1, #0
 804a842:	68f8      	ldr	r0, [r7, #12]
 804a844:	f000 fd34 	bl	804b2b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 804a848:	2300      	movs	r3, #0
}
 804a84a:	4618      	mov	r0, r3
 804a84c:	3710      	adds	r7, #16
 804a84e:	46bd      	mov	sp, r7
 804a850:	bd80      	pop	{r7, pc}

0804a852 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 804a852:	b580      	push	{r7, lr}
 804a854:	b084      	sub	sp, #16
 804a856:	af00      	add	r7, sp, #0
 804a858:	60f8      	str	r0, [r7, #12]
 804a85a:	60b9      	str	r1, [r7, #8]
 804a85c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 804a85e:	687b      	ldr	r3, [r7, #4]
 804a860:	68ba      	ldr	r2, [r7, #8]
 804a862:	2100      	movs	r1, #0
 804a864:	68f8      	ldr	r0, [r7, #12]
 804a866:	f000 fd23 	bl	804b2b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 804a86a:	2300      	movs	r3, #0
}
 804a86c:	4618      	mov	r0, r3
 804a86e:	3710      	adds	r7, #16
 804a870:	46bd      	mov	sp, r7
 804a872:	bd80      	pop	{r7, pc}

0804a874 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 804a874:	b580      	push	{r7, lr}
 804a876:	b082      	sub	sp, #8
 804a878:	af00      	add	r7, sp, #0
 804a87a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 804a87c:	687b      	ldr	r3, [r7, #4]
 804a87e:	2204      	movs	r2, #4
 804a880:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 804a884:	2300      	movs	r3, #0
 804a886:	2200      	movs	r2, #0
 804a888:	2100      	movs	r1, #0
 804a88a:	6878      	ldr	r0, [r7, #4]
 804a88c:	f000 fcef 	bl	804b26e <USBD_LL_Transmit>

  return USBD_OK;
 804a890:	2300      	movs	r3, #0
}
 804a892:	4618      	mov	r0, r3
 804a894:	3708      	adds	r7, #8
 804a896:	46bd      	mov	sp, r7
 804a898:	bd80      	pop	{r7, pc}

0804a89a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 804a89a:	b580      	push	{r7, lr}
 804a89c:	b082      	sub	sp, #8
 804a89e:	af00      	add	r7, sp, #0
 804a8a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 804a8a2:	687b      	ldr	r3, [r7, #4]
 804a8a4:	2205      	movs	r2, #5
 804a8a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 804a8aa:	2300      	movs	r3, #0
 804a8ac:	2200      	movs	r2, #0
 804a8ae:	2100      	movs	r1, #0
 804a8b0:	6878      	ldr	r0, [r7, #4]
 804a8b2:	f000 fcfd 	bl	804b2b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 804a8b6:	2300      	movs	r3, #0
}
 804a8b8:	4618      	mov	r0, r3
 804a8ba:	3708      	adds	r7, #8
 804a8bc:	46bd      	mov	sp, r7
 804a8be:	bd80      	pop	{r7, pc}

0804a8c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 804a8c0:	b580      	push	{r7, lr}
 804a8c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 804a8c4:	2201      	movs	r2, #1
 804a8c6:	4913      	ldr	r1, [pc, #76]	@ (804a914 <MX_USB_DEVICE_Init+0x54>)
 804a8c8:	4813      	ldr	r0, [pc, #76]	@ (804a918 <MX_USB_DEVICE_Init+0x58>)
 804a8ca:	f7fd fd4c 	bl	8048366 <USBD_Init>
 804a8ce:	4603      	mov	r3, r0
 804a8d0:	2b00      	cmp	r3, #0
 804a8d2:	d001      	beq.n	804a8d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 804a8d4:	f7f6 f99c 	bl	8040c10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_DFU) != USBD_OK)
 804a8d8:	4910      	ldr	r1, [pc, #64]	@ (804a91c <MX_USB_DEVICE_Init+0x5c>)
 804a8da:	480f      	ldr	r0, [pc, #60]	@ (804a918 <MX_USB_DEVICE_Init+0x58>)
 804a8dc:	f7fd fd73 	bl	80483c6 <USBD_RegisterClass>
 804a8e0:	4603      	mov	r3, r0
 804a8e2:	2b00      	cmp	r3, #0
 804a8e4:	d001      	beq.n	804a8ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 804a8e6:	f7f6 f993 	bl	8040c10 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceHS, &USBD_DFU_fops_HS) != USBD_OK)
 804a8ea:	490d      	ldr	r1, [pc, #52]	@ (804a920 <MX_USB_DEVICE_Init+0x60>)
 804a8ec:	480a      	ldr	r0, [pc, #40]	@ (804a918 <MX_USB_DEVICE_Init+0x58>)
 804a8ee:	f7ff fb37 	bl	8049f60 <USBD_DFU_RegisterMedia>
 804a8f2:	4603      	mov	r3, r0
 804a8f4:	2b00      	cmp	r3, #0
 804a8f6:	d001      	beq.n	804a8fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 804a8f8:	f7f6 f98a 	bl	8040c10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 804a8fc:	4806      	ldr	r0, [pc, #24]	@ (804a918 <MX_USB_DEVICE_Init+0x58>)
 804a8fe:	f7fd fd98 	bl	8048432 <USBD_Start>
 804a902:	4603      	mov	r3, r0
 804a904:	2b00      	cmp	r3, #0
 804a906:	d001      	beq.n	804a90c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 804a908:	f7f6 f982 	bl	8040c10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 804a90c:	f7f8 fb08 	bl	8042f20 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 804a910:	bf00      	nop
 804a912:	bd80      	pop	{r7, pc}
 804a914:	24000074 	.word	0x24000074
 804a918:	24000320 	.word	0x24000320
 804a91c:	24000010 	.word	0x24000010
 804a920:	240000c8 	.word	0x240000c8

0804a924 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a924:	b480      	push	{r7}
 804a926:	b083      	sub	sp, #12
 804a928:	af00      	add	r7, sp, #0
 804a92a:	4603      	mov	r3, r0
 804a92c:	6039      	str	r1, [r7, #0]
 804a92e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 804a930:	683b      	ldr	r3, [r7, #0]
 804a932:	2212      	movs	r2, #18
 804a934:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 804a936:	4b03      	ldr	r3, [pc, #12]	@ (804a944 <USBD_HS_DeviceDescriptor+0x20>)
}
 804a938:	4618      	mov	r0, r3
 804a93a:	370c      	adds	r7, #12
 804a93c:	46bd      	mov	sp, r7
 804a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a942:	4770      	bx	lr
 804a944:	24000094 	.word	0x24000094

0804a948 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a948:	b480      	push	{r7}
 804a94a:	b083      	sub	sp, #12
 804a94c:	af00      	add	r7, sp, #0
 804a94e:	4603      	mov	r3, r0
 804a950:	6039      	str	r1, [r7, #0]
 804a952:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 804a954:	683b      	ldr	r3, [r7, #0]
 804a956:	2204      	movs	r2, #4
 804a958:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 804a95a:	4b03      	ldr	r3, [pc, #12]	@ (804a968 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 804a95c:	4618      	mov	r0, r3
 804a95e:	370c      	adds	r7, #12
 804a960:	46bd      	mov	sp, r7
 804a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a966:	4770      	bx	lr
 804a968:	240000a8 	.word	0x240000a8

0804a96c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a96c:	b580      	push	{r7, lr}
 804a96e:	b082      	sub	sp, #8
 804a970:	af00      	add	r7, sp, #0
 804a972:	4603      	mov	r3, r0
 804a974:	6039      	str	r1, [r7, #0]
 804a976:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 804a978:	79fb      	ldrb	r3, [r7, #7]
 804a97a:	2b00      	cmp	r3, #0
 804a97c:	d105      	bne.n	804a98a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 804a97e:	683a      	ldr	r2, [r7, #0]
 804a980:	4907      	ldr	r1, [pc, #28]	@ (804a9a0 <USBD_HS_ProductStrDescriptor+0x34>)
 804a982:	4808      	ldr	r0, [pc, #32]	@ (804a9a4 <USBD_HS_ProductStrDescriptor+0x38>)
 804a984:	f7fe ff38 	bl	80497f8 <USBD_GetString>
 804a988:	e004      	b.n	804a994 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 804a98a:	683a      	ldr	r2, [r7, #0]
 804a98c:	4904      	ldr	r1, [pc, #16]	@ (804a9a0 <USBD_HS_ProductStrDescriptor+0x34>)
 804a98e:	4805      	ldr	r0, [pc, #20]	@ (804a9a4 <USBD_HS_ProductStrDescriptor+0x38>)
 804a990:	f7fe ff32 	bl	80497f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 804a994:	4b02      	ldr	r3, [pc, #8]	@ (804a9a0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 804a996:	4618      	mov	r0, r3
 804a998:	3708      	adds	r7, #8
 804a99a:	46bd      	mov	sp, r7
 804a99c:	bd80      	pop	{r7, pc}
 804a99e:	bf00      	nop
 804a9a0:	240005fc 	.word	0x240005fc
 804a9a4:	0804c228 	.word	0x0804c228

0804a9a8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a9a8:	b580      	push	{r7, lr}
 804a9aa:	b082      	sub	sp, #8
 804a9ac:	af00      	add	r7, sp, #0
 804a9ae:	4603      	mov	r3, r0
 804a9b0:	6039      	str	r1, [r7, #0]
 804a9b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 804a9b4:	683a      	ldr	r2, [r7, #0]
 804a9b6:	4904      	ldr	r1, [pc, #16]	@ (804a9c8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 804a9b8:	4804      	ldr	r0, [pc, #16]	@ (804a9cc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 804a9ba:	f7fe ff1d 	bl	80497f8 <USBD_GetString>
  return USBD_StrDesc;
 804a9be:	4b02      	ldr	r3, [pc, #8]	@ (804a9c8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 804a9c0:	4618      	mov	r0, r3
 804a9c2:	3708      	adds	r7, #8
 804a9c4:	46bd      	mov	sp, r7
 804a9c6:	bd80      	pop	{r7, pc}
 804a9c8:	240005fc 	.word	0x240005fc
 804a9cc:	0804c248 	.word	0x0804c248

0804a9d0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a9d0:	b580      	push	{r7, lr}
 804a9d2:	b082      	sub	sp, #8
 804a9d4:	af00      	add	r7, sp, #0
 804a9d6:	4603      	mov	r3, r0
 804a9d8:	6039      	str	r1, [r7, #0]
 804a9da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 804a9dc:	683b      	ldr	r3, [r7, #0]
 804a9de:	221a      	movs	r2, #26
 804a9e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 804a9e2:	f000 f843 	bl	804aa6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 804a9e6:	4b02      	ldr	r3, [pc, #8]	@ (804a9f0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 804a9e8:	4618      	mov	r0, r3
 804a9ea:	3708      	adds	r7, #8
 804a9ec:	46bd      	mov	sp, r7
 804a9ee:	bd80      	pop	{r7, pc}
 804a9f0:	240000ac 	.word	0x240000ac

0804a9f4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a9f4:	b580      	push	{r7, lr}
 804a9f6:	b082      	sub	sp, #8
 804a9f8:	af00      	add	r7, sp, #0
 804a9fa:	4603      	mov	r3, r0
 804a9fc:	6039      	str	r1, [r7, #0]
 804a9fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 804aa00:	79fb      	ldrb	r3, [r7, #7]
 804aa02:	2b00      	cmp	r3, #0
 804aa04:	d105      	bne.n	804aa12 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 804aa06:	683a      	ldr	r2, [r7, #0]
 804aa08:	4907      	ldr	r1, [pc, #28]	@ (804aa28 <USBD_HS_ConfigStrDescriptor+0x34>)
 804aa0a:	4808      	ldr	r0, [pc, #32]	@ (804aa2c <USBD_HS_ConfigStrDescriptor+0x38>)
 804aa0c:	f7fe fef4 	bl	80497f8 <USBD_GetString>
 804aa10:	e004      	b.n	804aa1c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 804aa12:	683a      	ldr	r2, [r7, #0]
 804aa14:	4904      	ldr	r1, [pc, #16]	@ (804aa28 <USBD_HS_ConfigStrDescriptor+0x34>)
 804aa16:	4805      	ldr	r0, [pc, #20]	@ (804aa2c <USBD_HS_ConfigStrDescriptor+0x38>)
 804aa18:	f7fe feee 	bl	80497f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 804aa1c:	4b02      	ldr	r3, [pc, #8]	@ (804aa28 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 804aa1e:	4618      	mov	r0, r3
 804aa20:	3708      	adds	r7, #8
 804aa22:	46bd      	mov	sp, r7
 804aa24:	bd80      	pop	{r7, pc}
 804aa26:	bf00      	nop
 804aa28:	240005fc 	.word	0x240005fc
 804aa2c:	0804c25c 	.word	0x0804c25c

0804aa30 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804aa30:	b580      	push	{r7, lr}
 804aa32:	b082      	sub	sp, #8
 804aa34:	af00      	add	r7, sp, #0
 804aa36:	4603      	mov	r3, r0
 804aa38:	6039      	str	r1, [r7, #0]
 804aa3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 804aa3c:	79fb      	ldrb	r3, [r7, #7]
 804aa3e:	2b00      	cmp	r3, #0
 804aa40:	d105      	bne.n	804aa4e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 804aa42:	683a      	ldr	r2, [r7, #0]
 804aa44:	4907      	ldr	r1, [pc, #28]	@ (804aa64 <USBD_HS_InterfaceStrDescriptor+0x34>)
 804aa46:	4808      	ldr	r0, [pc, #32]	@ (804aa68 <USBD_HS_InterfaceStrDescriptor+0x38>)
 804aa48:	f7fe fed6 	bl	80497f8 <USBD_GetString>
 804aa4c:	e004      	b.n	804aa58 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 804aa4e:	683a      	ldr	r2, [r7, #0]
 804aa50:	4904      	ldr	r1, [pc, #16]	@ (804aa64 <USBD_HS_InterfaceStrDescriptor+0x34>)
 804aa52:	4805      	ldr	r0, [pc, #20]	@ (804aa68 <USBD_HS_InterfaceStrDescriptor+0x38>)
 804aa54:	f7fe fed0 	bl	80497f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 804aa58:	4b02      	ldr	r3, [pc, #8]	@ (804aa64 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 804aa5a:	4618      	mov	r0, r3
 804aa5c:	3708      	adds	r7, #8
 804aa5e:	46bd      	mov	sp, r7
 804aa60:	bd80      	pop	{r7, pc}
 804aa62:	bf00      	nop
 804aa64:	240005fc 	.word	0x240005fc
 804aa68:	0804c268 	.word	0x0804c268

0804aa6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 804aa6c:	b580      	push	{r7, lr}
 804aa6e:	b084      	sub	sp, #16
 804aa70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 804aa72:	4b0f      	ldr	r3, [pc, #60]	@ (804aab0 <Get_SerialNum+0x44>)
 804aa74:	681b      	ldr	r3, [r3, #0]
 804aa76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 804aa78:	4b0e      	ldr	r3, [pc, #56]	@ (804aab4 <Get_SerialNum+0x48>)
 804aa7a:	681b      	ldr	r3, [r3, #0]
 804aa7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 804aa7e:	4b0e      	ldr	r3, [pc, #56]	@ (804aab8 <Get_SerialNum+0x4c>)
 804aa80:	681b      	ldr	r3, [r3, #0]
 804aa82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 804aa84:	68fa      	ldr	r2, [r7, #12]
 804aa86:	687b      	ldr	r3, [r7, #4]
 804aa88:	4413      	add	r3, r2
 804aa8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 804aa8c:	68fb      	ldr	r3, [r7, #12]
 804aa8e:	2b00      	cmp	r3, #0
 804aa90:	d009      	beq.n	804aaa6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 804aa92:	2208      	movs	r2, #8
 804aa94:	4909      	ldr	r1, [pc, #36]	@ (804aabc <Get_SerialNum+0x50>)
 804aa96:	68f8      	ldr	r0, [r7, #12]
 804aa98:	f000 f814 	bl	804aac4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 804aa9c:	2204      	movs	r2, #4
 804aa9e:	4908      	ldr	r1, [pc, #32]	@ (804aac0 <Get_SerialNum+0x54>)
 804aaa0:	68b8      	ldr	r0, [r7, #8]
 804aaa2:	f000 f80f 	bl	804aac4 <IntToUnicode>
  }
}
 804aaa6:	bf00      	nop
 804aaa8:	3710      	adds	r7, #16
 804aaaa:	46bd      	mov	sp, r7
 804aaac:	bd80      	pop	{r7, pc}
 804aaae:	bf00      	nop
 804aab0:	1ff1e800 	.word	0x1ff1e800
 804aab4:	1ff1e804 	.word	0x1ff1e804
 804aab8:	1ff1e808 	.word	0x1ff1e808
 804aabc:	240000ae 	.word	0x240000ae
 804aac0:	240000be 	.word	0x240000be

0804aac4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 804aac4:	b480      	push	{r7}
 804aac6:	b087      	sub	sp, #28
 804aac8:	af00      	add	r7, sp, #0
 804aaca:	60f8      	str	r0, [r7, #12]
 804aacc:	60b9      	str	r1, [r7, #8]
 804aace:	4613      	mov	r3, r2
 804aad0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 804aad2:	2300      	movs	r3, #0
 804aad4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 804aad6:	2300      	movs	r3, #0
 804aad8:	75fb      	strb	r3, [r7, #23]
 804aada:	e027      	b.n	804ab2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 804aadc:	68fb      	ldr	r3, [r7, #12]
 804aade:	0f1b      	lsrs	r3, r3, #28
 804aae0:	2b09      	cmp	r3, #9
 804aae2:	d80b      	bhi.n	804aafc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 804aae4:	68fb      	ldr	r3, [r7, #12]
 804aae6:	0f1b      	lsrs	r3, r3, #28
 804aae8:	b2da      	uxtb	r2, r3
 804aaea:	7dfb      	ldrb	r3, [r7, #23]
 804aaec:	005b      	lsls	r3, r3, #1
 804aaee:	4619      	mov	r1, r3
 804aaf0:	68bb      	ldr	r3, [r7, #8]
 804aaf2:	440b      	add	r3, r1
 804aaf4:	3230      	adds	r2, #48	@ 0x30
 804aaf6:	b2d2      	uxtb	r2, r2
 804aaf8:	701a      	strb	r2, [r3, #0]
 804aafa:	e00a      	b.n	804ab12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 804aafc:	68fb      	ldr	r3, [r7, #12]
 804aafe:	0f1b      	lsrs	r3, r3, #28
 804ab00:	b2da      	uxtb	r2, r3
 804ab02:	7dfb      	ldrb	r3, [r7, #23]
 804ab04:	005b      	lsls	r3, r3, #1
 804ab06:	4619      	mov	r1, r3
 804ab08:	68bb      	ldr	r3, [r7, #8]
 804ab0a:	440b      	add	r3, r1
 804ab0c:	3237      	adds	r2, #55	@ 0x37
 804ab0e:	b2d2      	uxtb	r2, r2
 804ab10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 804ab12:	68fb      	ldr	r3, [r7, #12]
 804ab14:	011b      	lsls	r3, r3, #4
 804ab16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 804ab18:	7dfb      	ldrb	r3, [r7, #23]
 804ab1a:	005b      	lsls	r3, r3, #1
 804ab1c:	3301      	adds	r3, #1
 804ab1e:	68ba      	ldr	r2, [r7, #8]
 804ab20:	4413      	add	r3, r2
 804ab22:	2200      	movs	r2, #0
 804ab24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 804ab26:	7dfb      	ldrb	r3, [r7, #23]
 804ab28:	3301      	adds	r3, #1
 804ab2a:	75fb      	strb	r3, [r7, #23]
 804ab2c:	7dfa      	ldrb	r2, [r7, #23]
 804ab2e:	79fb      	ldrb	r3, [r7, #7]
 804ab30:	429a      	cmp	r2, r3
 804ab32:	d3d3      	bcc.n	804aadc <IntToUnicode+0x18>
  }
}
 804ab34:	bf00      	nop
 804ab36:	bf00      	nop
 804ab38:	371c      	adds	r7, #28
 804ab3a:	46bd      	mov	sp, r7
 804ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ab40:	4770      	bx	lr

0804ab42 <MEM_If_Init_HS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_HS(void)
{
 804ab42:	b480      	push	{r7}
 804ab44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 804ab46:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 804ab48:	4618      	mov	r0, r3
 804ab4a:	46bd      	mov	sp, r7
 804ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ab50:	4770      	bx	lr

0804ab52 <MEM_If_DeInit_HS>:
/**
  * @brief  De-Initializes Memory.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_DeInit_HS(void)
{
 804ab52:	b480      	push	{r7}
 804ab54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 804ab56:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 804ab58:	4618      	mov	r0, r3
 804ab5a:	46bd      	mov	sp, r7
 804ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ab60:	4770      	bx	lr

0804ab62 <MEM_If_Erase_HS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_HS(uint32_t Add)
{
 804ab62:	b480      	push	{r7}
 804ab64:	b083      	sub	sp, #12
 804ab66:	af00      	add	r7, sp, #0
 804ab68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 8 */
  UNUSED(Add);

  return (USBD_OK);
 804ab6a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 804ab6c:	4618      	mov	r0, r3
 804ab6e:	370c      	adds	r7, #12
 804ab70:	46bd      	mov	sp, r7
 804ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ab76:	4770      	bx	lr

0804ab78 <MEM_If_Write_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 804ab78:	b480      	push	{r7}
 804ab7a:	b085      	sub	sp, #20
 804ab7c:	af00      	add	r7, sp, #0
 804ab7e:	60f8      	str	r0, [r7, #12]
 804ab80:	60b9      	str	r1, [r7, #8]
 804ab82:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 9 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (USBD_OK);
 804ab84:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 804ab86:	4618      	mov	r0, r3
 804ab88:	3714      	adds	r7, #20
 804ab8a:	46bd      	mov	sp, r7
 804ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ab90:	4770      	bx	lr

0804ab92 <MEM_If_Read_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 804ab92:	b480      	push	{r7}
 804ab94:	b085      	sub	sp, #20
 804ab96:	af00      	add	r7, sp, #0
 804ab98:	60f8      	str	r0, [r7, #12]
 804ab9a:	60b9      	str	r1, [r7, #8]
 804ab9c:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 10 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (uint8_t*)(USBD_OK);
 804ab9e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 804aba0:	4618      	mov	r0, r3
 804aba2:	3714      	adds	r7, #20
 804aba4:	46bd      	mov	sp, r7
 804aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804abaa:	4770      	bx	lr

0804abac <MEM_If_GetStatus_HS>:
  * @param  Cmd: Number of data to be read (in bytes).
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval 0 if operation is successful
  */
uint16_t MEM_If_GetStatus_HS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 804abac:	b480      	push	{r7}
 804abae:	b085      	sub	sp, #20
 804abb0:	af00      	add	r7, sp, #0
 804abb2:	60f8      	str	r0, [r7, #12]
 804abb4:	460b      	mov	r3, r1
 804abb6:	607a      	str	r2, [r7, #4]
 804abb8:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 11 */
  UNUSED(Add);
  UNUSED(buffer);

  switch(Cmd)
 804abba:	7afb      	ldrb	r3, [r7, #11]
 804abbc:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 804abbe:	bf00      	nop
  }
  return  (USBD_OK);
 804abc0:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 804abc2:	4618      	mov	r0, r3
 804abc4:	3714      	adds	r7, #20
 804abc6:	46bd      	mov	sp, r7
 804abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804abcc:	4770      	bx	lr
	...

0804abd0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 804abd0:	b580      	push	{r7, lr}
 804abd2:	b0c2      	sub	sp, #264	@ 0x108
 804abd4:	af00      	add	r7, sp, #0
 804abd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 804abda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 804abde:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804abe0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804abe4:	2200      	movs	r2, #0
 804abe6:	601a      	str	r2, [r3, #0]
 804abe8:	605a      	str	r2, [r3, #4]
 804abea:	609a      	str	r2, [r3, #8]
 804abec:	60da      	str	r2, [r3, #12]
 804abee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 804abf0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 804abf4:	22c8      	movs	r2, #200	@ 0xc8
 804abf6:	2100      	movs	r1, #0
 804abf8:	4618      	mov	r0, r3
 804abfa:	f000 fcd6 	bl	804b5aa <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 804abfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 804ac02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 804ac06:	681b      	ldr	r3, [r3, #0]
 804ac08:	681b      	ldr	r3, [r3, #0]
 804ac0a:	4a7d      	ldr	r2, [pc, #500]	@ (804ae00 <HAL_PCD_MspInit+0x230>)
 804ac0c:	4293      	cmp	r3, r2
 804ac0e:	f040 80f2 	bne.w	804adf6 <HAL_PCD_MspInit+0x226>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 804ac12:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 804ac16:	f04f 0300 	mov.w	r3, #0
 804ac1a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 804ac1e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 804ac22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804ac26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 804ac2a:	4618      	mov	r0, r3
 804ac2c:	f7f9 f9d8 	bl	8043fe0 <HAL_RCCEx_PeriphCLKConfig>
 804ac30:	4603      	mov	r3, r0
 804ac32:	2b00      	cmp	r3, #0
 804ac34:	d001      	beq.n	804ac3a <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 804ac36:	f7f5 ffeb 	bl	8040c10 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 804ac3a:	f7f8 f971 	bl	8042f20 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 804ac3e:	4b71      	ldr	r3, [pc, #452]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804ac40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804ac44:	4a6f      	ldr	r2, [pc, #444]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804ac46:	f043 0302 	orr.w	r3, r3, #2
 804ac4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804ac4e:	4b6d      	ldr	r3, [pc, #436]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804ac50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804ac54:	f003 0302 	and.w	r3, r3, #2
 804ac58:	627b      	str	r3, [r7, #36]	@ 0x24
 804ac5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 804ac5c:	4b69      	ldr	r3, [pc, #420]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804ac5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804ac62:	4a68      	ldr	r2, [pc, #416]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804ac64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 804ac68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804ac6c:	4b65      	ldr	r3, [pc, #404]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804ac6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804ac72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804ac76:	623b      	str	r3, [r7, #32]
 804ac78:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804ac7a:	4b62      	ldr	r3, [pc, #392]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804ac7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804ac80:	4a60      	ldr	r2, [pc, #384]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804ac82:	f043 0304 	orr.w	r3, r3, #4
 804ac86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804ac8a:	4b5e      	ldr	r3, [pc, #376]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804ac8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804ac90:	f003 0304 	and.w	r3, r3, #4
 804ac94:	61fb      	str	r3, [r7, #28]
 804ac96:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 804ac98:	4b5a      	ldr	r3, [pc, #360]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804ac9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804ac9e:	4a59      	ldr	r2, [pc, #356]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804aca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 804aca4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804aca8:	4b56      	ldr	r3, [pc, #344]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804acaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804acae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 804acb2:	61bb      	str	r3, [r7, #24]
 804acb4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 804acb6:	4b53      	ldr	r3, [pc, #332]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804acb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804acbc:	4a51      	ldr	r2, [pc, #324]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804acbe:	f043 0301 	orr.w	r3, r3, #1
 804acc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804acc6:	4b4f      	ldr	r3, [pc, #316]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804acc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804accc:	f003 0301 	and.w	r3, r3, #1
 804acd0:	617b      	str	r3, [r7, #20]
 804acd2:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 804acd4:	f643 4323 	movw	r3, #15395	@ 0x3c23
 804acd8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804acdc:	2302      	movs	r3, #2
 804acde:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804ace2:	2300      	movs	r3, #0
 804ace4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804ace8:	2302      	movs	r3, #2
 804acea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804acee:	230a      	movs	r3, #10
 804acf0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804acf4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804acf8:	4619      	mov	r1, r3
 804acfa:	4843      	ldr	r0, [pc, #268]	@ (804ae08 <HAL_PCD_MspInit+0x238>)
 804acfc:	f7f6 fc2a 	bl	8041554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 804ad00:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 804ad04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804ad08:	2302      	movs	r3, #2
 804ad0a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804ad0e:	2300      	movs	r3, #0
 804ad10:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804ad14:	2302      	movs	r3, #2
 804ad16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804ad1a:	230a      	movs	r3, #10
 804ad1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 804ad20:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804ad24:	4619      	mov	r1, r3
 804ad26:	4839      	ldr	r0, [pc, #228]	@ (804ae0c <HAL_PCD_MspInit+0x23c>)
 804ad28:	f7f6 fc14 	bl	8041554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 804ad2c:	2301      	movs	r3, #1
 804ad2e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804ad32:	2302      	movs	r3, #2
 804ad34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804ad38:	2300      	movs	r3, #0
 804ad3a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804ad3e:	2302      	movs	r3, #2
 804ad40:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804ad44:	230a      	movs	r3, #10
 804ad46:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 804ad4a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804ad4e:	4619      	mov	r1, r3
 804ad50:	482f      	ldr	r0, [pc, #188]	@ (804ae10 <HAL_PCD_MspInit+0x240>)
 804ad52:	f7f6 fbff 	bl	8041554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 804ad56:	2310      	movs	r3, #16
 804ad58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804ad5c:	2302      	movs	r3, #2
 804ad5e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804ad62:	2300      	movs	r3, #0
 804ad64:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804ad68:	2302      	movs	r3, #2
 804ad6a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804ad6e:	230a      	movs	r3, #10
 804ad70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 804ad74:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804ad78:	4619      	mov	r1, r3
 804ad7a:	4826      	ldr	r0, [pc, #152]	@ (804ae14 <HAL_PCD_MspInit+0x244>)
 804ad7c:	f7f6 fbea 	bl	8041554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 804ad80:	2328      	movs	r3, #40	@ 0x28
 804ad82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804ad86:	2302      	movs	r3, #2
 804ad88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804ad8c:	2300      	movs	r3, #0
 804ad8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804ad92:	2302      	movs	r3, #2
 804ad94:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804ad98:	230a      	movs	r3, #10
 804ad9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804ad9e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804ada2:	4619      	mov	r1, r3
 804ada4:	481c      	ldr	r0, [pc, #112]	@ (804ae18 <HAL_PCD_MspInit+0x248>)
 804ada6:	f7f6 fbd5 	bl	8041554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 804adaa:	4b16      	ldr	r3, [pc, #88]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804adac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804adb0:	4a14      	ldr	r2, [pc, #80]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804adb2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 804adb6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 804adba:	4b12      	ldr	r3, [pc, #72]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804adbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804adc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804adc4:	613b      	str	r3, [r7, #16]
 804adc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 804adc8:	4b0e      	ldr	r3, [pc, #56]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804adca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804adce:	4a0d      	ldr	r2, [pc, #52]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804add0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 804add4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 804add8:	4b0a      	ldr	r3, [pc, #40]	@ (804ae04 <HAL_PCD_MspInit+0x234>)
 804adda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804adde:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 804ade2:	60fb      	str	r3, [r7, #12]
 804ade4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 804ade6:	2200      	movs	r2, #0
 804ade8:	2100      	movs	r1, #0
 804adea:	204d      	movs	r0, #77	@ 0x4d
 804adec:	f7f6 fa8b 	bl	8041306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 804adf0:	204d      	movs	r0, #77	@ 0x4d
 804adf2:	f7f6 faa2 	bl	804133a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 804adf6:	bf00      	nop
 804adf8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 804adfc:	46bd      	mov	sp, r7
 804adfe:	bd80      	pop	{r7, pc}
 804ae00:	40040000 	.word	0x40040000
 804ae04:	58024400 	.word	0x58024400
 804ae08:	58020400 	.word	0x58020400
 804ae0c:	58022000 	.word	0x58022000
 804ae10:	58020800 	.word	0x58020800
 804ae14:	58021c00 	.word	0x58021c00
 804ae18:	58020000 	.word	0x58020000

0804ae1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804ae1c:	b580      	push	{r7, lr}
 804ae1e:	b082      	sub	sp, #8
 804ae20:	af00      	add	r7, sp, #0
 804ae22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 804ae24:	687b      	ldr	r3, [r7, #4]
 804ae26:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 804ae2a:	687b      	ldr	r3, [r7, #4]
 804ae2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 804ae30:	4619      	mov	r1, r3
 804ae32:	4610      	mov	r0, r2
 804ae34:	f7fd fb65 	bl	8048502 <USBD_LL_SetupStage>
}
 804ae38:	bf00      	nop
 804ae3a:	3708      	adds	r7, #8
 804ae3c:	46bd      	mov	sp, r7
 804ae3e:	bd80      	pop	{r7, pc}

0804ae40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804ae40:	b580      	push	{r7, lr}
 804ae42:	b082      	sub	sp, #8
 804ae44:	af00      	add	r7, sp, #0
 804ae46:	6078      	str	r0, [r7, #4]
 804ae48:	460b      	mov	r3, r1
 804ae4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 804ae4c:	687b      	ldr	r3, [r7, #4]
 804ae4e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 804ae52:	78fa      	ldrb	r2, [r7, #3]
 804ae54:	6879      	ldr	r1, [r7, #4]
 804ae56:	4613      	mov	r3, r2
 804ae58:	00db      	lsls	r3, r3, #3
 804ae5a:	4413      	add	r3, r2
 804ae5c:	009b      	lsls	r3, r3, #2
 804ae5e:	440b      	add	r3, r1
 804ae60:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 804ae64:	681a      	ldr	r2, [r3, #0]
 804ae66:	78fb      	ldrb	r3, [r7, #3]
 804ae68:	4619      	mov	r1, r3
 804ae6a:	f7fd fb9f 	bl	80485ac <USBD_LL_DataOutStage>
}
 804ae6e:	bf00      	nop
 804ae70:	3708      	adds	r7, #8
 804ae72:	46bd      	mov	sp, r7
 804ae74:	bd80      	pop	{r7, pc}

0804ae76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804ae76:	b580      	push	{r7, lr}
 804ae78:	b082      	sub	sp, #8
 804ae7a:	af00      	add	r7, sp, #0
 804ae7c:	6078      	str	r0, [r7, #4]
 804ae7e:	460b      	mov	r3, r1
 804ae80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 804ae82:	687b      	ldr	r3, [r7, #4]
 804ae84:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 804ae88:	78fa      	ldrb	r2, [r7, #3]
 804ae8a:	6879      	ldr	r1, [r7, #4]
 804ae8c:	4613      	mov	r3, r2
 804ae8e:	00db      	lsls	r3, r3, #3
 804ae90:	4413      	add	r3, r2
 804ae92:	009b      	lsls	r3, r3, #2
 804ae94:	440b      	add	r3, r1
 804ae96:	3320      	adds	r3, #32
 804ae98:	681a      	ldr	r2, [r3, #0]
 804ae9a:	78fb      	ldrb	r3, [r7, #3]
 804ae9c:	4619      	mov	r1, r3
 804ae9e:	f7fd fc38 	bl	8048712 <USBD_LL_DataInStage>
}
 804aea2:	bf00      	nop
 804aea4:	3708      	adds	r7, #8
 804aea6:	46bd      	mov	sp, r7
 804aea8:	bd80      	pop	{r7, pc}

0804aeaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804aeaa:	b580      	push	{r7, lr}
 804aeac:	b082      	sub	sp, #8
 804aeae:	af00      	add	r7, sp, #0
 804aeb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 804aeb2:	687b      	ldr	r3, [r7, #4]
 804aeb4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804aeb8:	4618      	mov	r0, r3
 804aeba:	f7fd fd72 	bl	80489a2 <USBD_LL_SOF>
}
 804aebe:	bf00      	nop
 804aec0:	3708      	adds	r7, #8
 804aec2:	46bd      	mov	sp, r7
 804aec4:	bd80      	pop	{r7, pc}

0804aec6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804aec6:	b580      	push	{r7, lr}
 804aec8:	b084      	sub	sp, #16
 804aeca:	af00      	add	r7, sp, #0
 804aecc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 804aece:	2301      	movs	r3, #1
 804aed0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 804aed2:	687b      	ldr	r3, [r7, #4]
 804aed4:	79db      	ldrb	r3, [r3, #7]
 804aed6:	2b00      	cmp	r3, #0
 804aed8:	d102      	bne.n	804aee0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 804aeda:	2300      	movs	r3, #0
 804aedc:	73fb      	strb	r3, [r7, #15]
 804aede:	e008      	b.n	804aef2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 804aee0:	687b      	ldr	r3, [r7, #4]
 804aee2:	79db      	ldrb	r3, [r3, #7]
 804aee4:	2b02      	cmp	r3, #2
 804aee6:	d102      	bne.n	804aeee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 804aee8:	2301      	movs	r3, #1
 804aeea:	73fb      	strb	r3, [r7, #15]
 804aeec:	e001      	b.n	804aef2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 804aeee:	f7f5 fe8f 	bl	8040c10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 804aef2:	687b      	ldr	r3, [r7, #4]
 804aef4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804aef8:	7bfa      	ldrb	r2, [r7, #15]
 804aefa:	4611      	mov	r1, r2
 804aefc:	4618      	mov	r0, r3
 804aefe:	f7fd fd0c 	bl	804891a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 804af02:	687b      	ldr	r3, [r7, #4]
 804af04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804af08:	4618      	mov	r0, r3
 804af0a:	f7fd fcb4 	bl	8048876 <USBD_LL_Reset>
}
 804af0e:	bf00      	nop
 804af10:	3710      	adds	r7, #16
 804af12:	46bd      	mov	sp, r7
 804af14:	bd80      	pop	{r7, pc}
	...

0804af18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804af18:	b580      	push	{r7, lr}
 804af1a:	b082      	sub	sp, #8
 804af1c:	af00      	add	r7, sp, #0
 804af1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 804af20:	687b      	ldr	r3, [r7, #4]
 804af22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804af26:	4618      	mov	r0, r3
 804af28:	f7fd fd07 	bl	804893a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 804af2c:	687b      	ldr	r3, [r7, #4]
 804af2e:	681b      	ldr	r3, [r3, #0]
 804af30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 804af34:	681b      	ldr	r3, [r3, #0]
 804af36:	687a      	ldr	r2, [r7, #4]
 804af38:	6812      	ldr	r2, [r2, #0]
 804af3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 804af3e:	f043 0301 	orr.w	r3, r3, #1
 804af42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 804af44:	687b      	ldr	r3, [r7, #4]
 804af46:	7adb      	ldrb	r3, [r3, #11]
 804af48:	2b00      	cmp	r3, #0
 804af4a:	d005      	beq.n	804af58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 804af4c:	4b04      	ldr	r3, [pc, #16]	@ (804af60 <HAL_PCD_SuspendCallback+0x48>)
 804af4e:	691b      	ldr	r3, [r3, #16]
 804af50:	4a03      	ldr	r2, [pc, #12]	@ (804af60 <HAL_PCD_SuspendCallback+0x48>)
 804af52:	f043 0306 	orr.w	r3, r3, #6
 804af56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 804af58:	bf00      	nop
 804af5a:	3708      	adds	r7, #8
 804af5c:	46bd      	mov	sp, r7
 804af5e:	bd80      	pop	{r7, pc}
 804af60:	e000ed00 	.word	0xe000ed00

0804af64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804af64:	b580      	push	{r7, lr}
 804af66:	b082      	sub	sp, #8
 804af68:	af00      	add	r7, sp, #0
 804af6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 804af6c:	687b      	ldr	r3, [r7, #4]
 804af6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804af72:	4618      	mov	r0, r3
 804af74:	f7fd fcfd 	bl	8048972 <USBD_LL_Resume>
}
 804af78:	bf00      	nop
 804af7a:	3708      	adds	r7, #8
 804af7c:	46bd      	mov	sp, r7
 804af7e:	bd80      	pop	{r7, pc}

0804af80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804af80:	b580      	push	{r7, lr}
 804af82:	b082      	sub	sp, #8
 804af84:	af00      	add	r7, sp, #0
 804af86:	6078      	str	r0, [r7, #4]
 804af88:	460b      	mov	r3, r1
 804af8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 804af8c:	687b      	ldr	r3, [r7, #4]
 804af8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804af92:	78fa      	ldrb	r2, [r7, #3]
 804af94:	4611      	mov	r1, r2
 804af96:	4618      	mov	r0, r3
 804af98:	f7fd fd55 	bl	8048a46 <USBD_LL_IsoOUTIncomplete>
}
 804af9c:	bf00      	nop
 804af9e:	3708      	adds	r7, #8
 804afa0:	46bd      	mov	sp, r7
 804afa2:	bd80      	pop	{r7, pc}

0804afa4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804afa4:	b580      	push	{r7, lr}
 804afa6:	b082      	sub	sp, #8
 804afa8:	af00      	add	r7, sp, #0
 804afaa:	6078      	str	r0, [r7, #4]
 804afac:	460b      	mov	r3, r1
 804afae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 804afb0:	687b      	ldr	r3, [r7, #4]
 804afb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804afb6:	78fa      	ldrb	r2, [r7, #3]
 804afb8:	4611      	mov	r1, r2
 804afba:	4618      	mov	r0, r3
 804afbc:	f7fd fd11 	bl	80489e2 <USBD_LL_IsoINIncomplete>
}
 804afc0:	bf00      	nop
 804afc2:	3708      	adds	r7, #8
 804afc4:	46bd      	mov	sp, r7
 804afc6:	bd80      	pop	{r7, pc}

0804afc8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804afc8:	b580      	push	{r7, lr}
 804afca:	b082      	sub	sp, #8
 804afcc:	af00      	add	r7, sp, #0
 804afce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 804afd0:	687b      	ldr	r3, [r7, #4]
 804afd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804afd6:	4618      	mov	r0, r3
 804afd8:	f7fd fd67 	bl	8048aaa <USBD_LL_DevConnected>
}
 804afdc:	bf00      	nop
 804afde:	3708      	adds	r7, #8
 804afe0:	46bd      	mov	sp, r7
 804afe2:	bd80      	pop	{r7, pc}

0804afe4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804afe4:	b580      	push	{r7, lr}
 804afe6:	b082      	sub	sp, #8
 804afe8:	af00      	add	r7, sp, #0
 804afea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 804afec:	687b      	ldr	r3, [r7, #4]
 804afee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804aff2:	4618      	mov	r0, r3
 804aff4:	f7fd fd64 	bl	8048ac0 <USBD_LL_DevDisconnected>
}
 804aff8:	bf00      	nop
 804affa:	3708      	adds	r7, #8
 804affc:	46bd      	mov	sp, r7
 804affe:	bd80      	pop	{r7, pc}

0804b000 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 804b000:	b580      	push	{r7, lr}
 804b002:	b082      	sub	sp, #8
 804b004:	af00      	add	r7, sp, #0
 804b006:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 804b008:	687b      	ldr	r3, [r7, #4]
 804b00a:	781b      	ldrb	r3, [r3, #0]
 804b00c:	2b01      	cmp	r3, #1
 804b00e:	d140      	bne.n	804b092 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 804b010:	4a22      	ldr	r2, [pc, #136]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b012:	687b      	ldr	r3, [r7, #4]
 804b014:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 804b018:	687b      	ldr	r3, [r7, #4]
 804b01a:	4a20      	ldr	r2, [pc, #128]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b01c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 804b020:	4b1e      	ldr	r3, [pc, #120]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b022:	4a1f      	ldr	r2, [pc, #124]	@ (804b0a0 <USBD_LL_Init+0xa0>)
 804b024:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 804b026:	4b1d      	ldr	r3, [pc, #116]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b028:	2209      	movs	r2, #9
 804b02a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 804b02c:	4b1b      	ldr	r3, [pc, #108]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b02e:	2200      	movs	r2, #0
 804b030:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 804b032:	4b1a      	ldr	r3, [pc, #104]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b034:	2200      	movs	r2, #0
 804b036:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 804b038:	4b18      	ldr	r3, [pc, #96]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b03a:	2201      	movs	r2, #1
 804b03c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 804b03e:	4b17      	ldr	r3, [pc, #92]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b040:	2200      	movs	r2, #0
 804b042:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 804b044:	4b15      	ldr	r3, [pc, #84]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b046:	2200      	movs	r2, #0
 804b048:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 804b04a:	4b14      	ldr	r3, [pc, #80]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b04c:	2200      	movs	r2, #0
 804b04e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 804b050:	4b12      	ldr	r3, [pc, #72]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b052:	2200      	movs	r2, #0
 804b054:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 804b056:	4b11      	ldr	r3, [pc, #68]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b058:	2200      	movs	r2, #0
 804b05a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 804b05c:	4b0f      	ldr	r3, [pc, #60]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b05e:	2200      	movs	r2, #0
 804b060:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 804b062:	480e      	ldr	r0, [pc, #56]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b064:	f7f6 fc88 	bl	8041978 <HAL_PCD_Init>
 804b068:	4603      	mov	r3, r0
 804b06a:	2b00      	cmp	r3, #0
 804b06c:	d001      	beq.n	804b072 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 804b06e:	f7f5 fdcf 	bl	8040c10 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 804b072:	f44f 7100 	mov.w	r1, #512	@ 0x200
 804b076:	4809      	ldr	r0, [pc, #36]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b078:	f7f7 feb7 	bl	8042dea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 804b07c:	2280      	movs	r2, #128	@ 0x80
 804b07e:	2100      	movs	r1, #0
 804b080:	4806      	ldr	r0, [pc, #24]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b082:	f7f7 fe6b 	bl	8042d5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 804b086:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 804b08a:	2101      	movs	r1, #1
 804b08c:	4803      	ldr	r0, [pc, #12]	@ (804b09c <USBD_LL_Init+0x9c>)
 804b08e:	f7f7 fe65 	bl	8042d5c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 804b092:	2300      	movs	r3, #0
}
 804b094:	4618      	mov	r0, r3
 804b096:	3708      	adds	r7, #8
 804b098:	46bd      	mov	sp, r7
 804b09a:	bd80      	pop	{r7, pc}
 804b09c:	240007fc 	.word	0x240007fc
 804b0a0:	40040000 	.word	0x40040000

0804b0a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 804b0a4:	b580      	push	{r7, lr}
 804b0a6:	b084      	sub	sp, #16
 804b0a8:	af00      	add	r7, sp, #0
 804b0aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804b0ac:	2300      	movs	r3, #0
 804b0ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b0b0:	2300      	movs	r3, #0
 804b0b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 804b0b4:	687b      	ldr	r3, [r7, #4]
 804b0b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804b0ba:	4618      	mov	r0, r3
 804b0bc:	f7f6 fd68 	bl	8041b90 <HAL_PCD_Start>
 804b0c0:	4603      	mov	r3, r0
 804b0c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804b0c4:	7bfb      	ldrb	r3, [r7, #15]
 804b0c6:	4618      	mov	r0, r3
 804b0c8:	f000 f92c 	bl	804b324 <USBD_Get_USB_Status>
 804b0cc:	4603      	mov	r3, r0
 804b0ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804b0d0:	7bbb      	ldrb	r3, [r7, #14]
}
 804b0d2:	4618      	mov	r0, r3
 804b0d4:	3710      	adds	r7, #16
 804b0d6:	46bd      	mov	sp, r7
 804b0d8:	bd80      	pop	{r7, pc}

0804b0da <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 804b0da:	b580      	push	{r7, lr}
 804b0dc:	b084      	sub	sp, #16
 804b0de:	af00      	add	r7, sp, #0
 804b0e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804b0e2:	2300      	movs	r3, #0
 804b0e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b0e6:	2300      	movs	r3, #0
 804b0e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 804b0ea:	687b      	ldr	r3, [r7, #4]
 804b0ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804b0f0:	4618      	mov	r0, r3
 804b0f2:	f7f6 fd82 	bl	8041bfa <HAL_PCD_Stop>
 804b0f6:	4603      	mov	r3, r0
 804b0f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804b0fa:	7bfb      	ldrb	r3, [r7, #15]
 804b0fc:	4618      	mov	r0, r3
 804b0fe:	f000 f911 	bl	804b324 <USBD_Get_USB_Status>
 804b102:	4603      	mov	r3, r0
 804b104:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804b106:	7bbb      	ldrb	r3, [r7, #14]
}
 804b108:	4618      	mov	r0, r3
 804b10a:	3710      	adds	r7, #16
 804b10c:	46bd      	mov	sp, r7
 804b10e:	bd80      	pop	{r7, pc}

0804b110 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 804b110:	b580      	push	{r7, lr}
 804b112:	b084      	sub	sp, #16
 804b114:	af00      	add	r7, sp, #0
 804b116:	6078      	str	r0, [r7, #4]
 804b118:	4608      	mov	r0, r1
 804b11a:	4611      	mov	r1, r2
 804b11c:	461a      	mov	r2, r3
 804b11e:	4603      	mov	r3, r0
 804b120:	70fb      	strb	r3, [r7, #3]
 804b122:	460b      	mov	r3, r1
 804b124:	70bb      	strb	r3, [r7, #2]
 804b126:	4613      	mov	r3, r2
 804b128:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804b12a:	2300      	movs	r3, #0
 804b12c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b12e:	2300      	movs	r3, #0
 804b130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 804b132:	687b      	ldr	r3, [r7, #4]
 804b134:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 804b138:	78bb      	ldrb	r3, [r7, #2]
 804b13a:	883a      	ldrh	r2, [r7, #0]
 804b13c:	78f9      	ldrb	r1, [r7, #3]
 804b13e:	f7f7 fa89 	bl	8042654 <HAL_PCD_EP_Open>
 804b142:	4603      	mov	r3, r0
 804b144:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804b146:	7bfb      	ldrb	r3, [r7, #15]
 804b148:	4618      	mov	r0, r3
 804b14a:	f000 f8eb 	bl	804b324 <USBD_Get_USB_Status>
 804b14e:	4603      	mov	r3, r0
 804b150:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804b152:	7bbb      	ldrb	r3, [r7, #14]
}
 804b154:	4618      	mov	r0, r3
 804b156:	3710      	adds	r7, #16
 804b158:	46bd      	mov	sp, r7
 804b15a:	bd80      	pop	{r7, pc}

0804b15c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804b15c:	b580      	push	{r7, lr}
 804b15e:	b084      	sub	sp, #16
 804b160:	af00      	add	r7, sp, #0
 804b162:	6078      	str	r0, [r7, #4]
 804b164:	460b      	mov	r3, r1
 804b166:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804b168:	2300      	movs	r3, #0
 804b16a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b16c:	2300      	movs	r3, #0
 804b16e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 804b170:	687b      	ldr	r3, [r7, #4]
 804b172:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804b176:	78fa      	ldrb	r2, [r7, #3]
 804b178:	4611      	mov	r1, r2
 804b17a:	4618      	mov	r0, r3
 804b17c:	f7f7 fb49 	bl	8042812 <HAL_PCD_EP_SetStall>
 804b180:	4603      	mov	r3, r0
 804b182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804b184:	7bfb      	ldrb	r3, [r7, #15]
 804b186:	4618      	mov	r0, r3
 804b188:	f000 f8cc 	bl	804b324 <USBD_Get_USB_Status>
 804b18c:	4603      	mov	r3, r0
 804b18e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804b190:	7bbb      	ldrb	r3, [r7, #14]
}
 804b192:	4618      	mov	r0, r3
 804b194:	3710      	adds	r7, #16
 804b196:	46bd      	mov	sp, r7
 804b198:	bd80      	pop	{r7, pc}

0804b19a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804b19a:	b580      	push	{r7, lr}
 804b19c:	b084      	sub	sp, #16
 804b19e:	af00      	add	r7, sp, #0
 804b1a0:	6078      	str	r0, [r7, #4]
 804b1a2:	460b      	mov	r3, r1
 804b1a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804b1a6:	2300      	movs	r3, #0
 804b1a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b1aa:	2300      	movs	r3, #0
 804b1ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 804b1ae:	687b      	ldr	r3, [r7, #4]
 804b1b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804b1b4:	78fa      	ldrb	r2, [r7, #3]
 804b1b6:	4611      	mov	r1, r2
 804b1b8:	4618      	mov	r0, r3
 804b1ba:	f7f7 fb8d 	bl	80428d8 <HAL_PCD_EP_ClrStall>
 804b1be:	4603      	mov	r3, r0
 804b1c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804b1c2:	7bfb      	ldrb	r3, [r7, #15]
 804b1c4:	4618      	mov	r0, r3
 804b1c6:	f000 f8ad 	bl	804b324 <USBD_Get_USB_Status>
 804b1ca:	4603      	mov	r3, r0
 804b1cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804b1ce:	7bbb      	ldrb	r3, [r7, #14]
}
 804b1d0:	4618      	mov	r0, r3
 804b1d2:	3710      	adds	r7, #16
 804b1d4:	46bd      	mov	sp, r7
 804b1d6:	bd80      	pop	{r7, pc}

0804b1d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804b1d8:	b480      	push	{r7}
 804b1da:	b085      	sub	sp, #20
 804b1dc:	af00      	add	r7, sp, #0
 804b1de:	6078      	str	r0, [r7, #4]
 804b1e0:	460b      	mov	r3, r1
 804b1e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 804b1e4:	687b      	ldr	r3, [r7, #4]
 804b1e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804b1ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 804b1ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 804b1f0:	2b00      	cmp	r3, #0
 804b1f2:	da0b      	bge.n	804b20c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 804b1f4:	78fb      	ldrb	r3, [r7, #3]
 804b1f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804b1fa:	68f9      	ldr	r1, [r7, #12]
 804b1fc:	4613      	mov	r3, r2
 804b1fe:	00db      	lsls	r3, r3, #3
 804b200:	4413      	add	r3, r2
 804b202:	009b      	lsls	r3, r3, #2
 804b204:	440b      	add	r3, r1
 804b206:	3316      	adds	r3, #22
 804b208:	781b      	ldrb	r3, [r3, #0]
 804b20a:	e00b      	b.n	804b224 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 804b20c:	78fb      	ldrb	r3, [r7, #3]
 804b20e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804b212:	68f9      	ldr	r1, [r7, #12]
 804b214:	4613      	mov	r3, r2
 804b216:	00db      	lsls	r3, r3, #3
 804b218:	4413      	add	r3, r2
 804b21a:	009b      	lsls	r3, r3, #2
 804b21c:	440b      	add	r3, r1
 804b21e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 804b222:	781b      	ldrb	r3, [r3, #0]
  }
}
 804b224:	4618      	mov	r0, r3
 804b226:	3714      	adds	r7, #20
 804b228:	46bd      	mov	sp, r7
 804b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b22e:	4770      	bx	lr

0804b230 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 804b230:	b580      	push	{r7, lr}
 804b232:	b084      	sub	sp, #16
 804b234:	af00      	add	r7, sp, #0
 804b236:	6078      	str	r0, [r7, #4]
 804b238:	460b      	mov	r3, r1
 804b23a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804b23c:	2300      	movs	r3, #0
 804b23e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b240:	2300      	movs	r3, #0
 804b242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 804b244:	687b      	ldr	r3, [r7, #4]
 804b246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804b24a:	78fa      	ldrb	r2, [r7, #3]
 804b24c:	4611      	mov	r1, r2
 804b24e:	4618      	mov	r0, r3
 804b250:	f7f7 f9dc 	bl	804260c <HAL_PCD_SetAddress>
 804b254:	4603      	mov	r3, r0
 804b256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804b258:	7bfb      	ldrb	r3, [r7, #15]
 804b25a:	4618      	mov	r0, r3
 804b25c:	f000 f862 	bl	804b324 <USBD_Get_USB_Status>
 804b260:	4603      	mov	r3, r0
 804b262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804b264:	7bbb      	ldrb	r3, [r7, #14]
}
 804b266:	4618      	mov	r0, r3
 804b268:	3710      	adds	r7, #16
 804b26a:	46bd      	mov	sp, r7
 804b26c:	bd80      	pop	{r7, pc}

0804b26e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 804b26e:	b580      	push	{r7, lr}
 804b270:	b086      	sub	sp, #24
 804b272:	af00      	add	r7, sp, #0
 804b274:	60f8      	str	r0, [r7, #12]
 804b276:	607a      	str	r2, [r7, #4]
 804b278:	603b      	str	r3, [r7, #0]
 804b27a:	460b      	mov	r3, r1
 804b27c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804b27e:	2300      	movs	r3, #0
 804b280:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b282:	2300      	movs	r3, #0
 804b284:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 804b286:	68fb      	ldr	r3, [r7, #12]
 804b288:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 804b28c:	7af9      	ldrb	r1, [r7, #11]
 804b28e:	683b      	ldr	r3, [r7, #0]
 804b290:	687a      	ldr	r2, [r7, #4]
 804b292:	f7f7 fa84 	bl	804279e <HAL_PCD_EP_Transmit>
 804b296:	4603      	mov	r3, r0
 804b298:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804b29a:	7dfb      	ldrb	r3, [r7, #23]
 804b29c:	4618      	mov	r0, r3
 804b29e:	f000 f841 	bl	804b324 <USBD_Get_USB_Status>
 804b2a2:	4603      	mov	r3, r0
 804b2a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 804b2a6:	7dbb      	ldrb	r3, [r7, #22]
}
 804b2a8:	4618      	mov	r0, r3
 804b2aa:	3718      	adds	r7, #24
 804b2ac:	46bd      	mov	sp, r7
 804b2ae:	bd80      	pop	{r7, pc}

0804b2b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 804b2b0:	b580      	push	{r7, lr}
 804b2b2:	b086      	sub	sp, #24
 804b2b4:	af00      	add	r7, sp, #0
 804b2b6:	60f8      	str	r0, [r7, #12]
 804b2b8:	607a      	str	r2, [r7, #4]
 804b2ba:	603b      	str	r3, [r7, #0]
 804b2bc:	460b      	mov	r3, r1
 804b2be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804b2c0:	2300      	movs	r3, #0
 804b2c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b2c4:	2300      	movs	r3, #0
 804b2c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 804b2c8:	68fb      	ldr	r3, [r7, #12]
 804b2ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 804b2ce:	7af9      	ldrb	r1, [r7, #11]
 804b2d0:	683b      	ldr	r3, [r7, #0]
 804b2d2:	687a      	ldr	r2, [r7, #4]
 804b2d4:	f7f7 fa28 	bl	8042728 <HAL_PCD_EP_Receive>
 804b2d8:	4603      	mov	r3, r0
 804b2da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804b2dc:	7dfb      	ldrb	r3, [r7, #23]
 804b2de:	4618      	mov	r0, r3
 804b2e0:	f000 f820 	bl	804b324 <USBD_Get_USB_Status>
 804b2e4:	4603      	mov	r3, r0
 804b2e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 804b2e8:	7dbb      	ldrb	r3, [r7, #22]
}
 804b2ea:	4618      	mov	r0, r3
 804b2ec:	3718      	adds	r7, #24
 804b2ee:	46bd      	mov	sp, r7
 804b2f0:	bd80      	pop	{r7, pc}
	...

0804b2f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 804b2f4:	b480      	push	{r7}
 804b2f6:	b083      	sub	sp, #12
 804b2f8:	af00      	add	r7, sp, #0
 804b2fa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 804b2fc:	4b03      	ldr	r3, [pc, #12]	@ (804b30c <USBD_static_malloc+0x18>)
}
 804b2fe:	4618      	mov	r0, r3
 804b300:	370c      	adds	r7, #12
 804b302:	46bd      	mov	sp, r7
 804b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b308:	4770      	bx	lr
 804b30a:	bf00      	nop
 804b30c:	24000ce0 	.word	0x24000ce0

0804b310 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 804b310:	b480      	push	{r7}
 804b312:	b083      	sub	sp, #12
 804b314:	af00      	add	r7, sp, #0
 804b316:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 804b318:	bf00      	nop
 804b31a:	370c      	adds	r7, #12
 804b31c:	46bd      	mov	sp, r7
 804b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b322:	4770      	bx	lr

0804b324 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 804b324:	b480      	push	{r7}
 804b326:	b085      	sub	sp, #20
 804b328:	af00      	add	r7, sp, #0
 804b32a:	4603      	mov	r3, r0
 804b32c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b32e:	2300      	movs	r3, #0
 804b330:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 804b332:	79fb      	ldrb	r3, [r7, #7]
 804b334:	2b03      	cmp	r3, #3
 804b336:	d817      	bhi.n	804b368 <USBD_Get_USB_Status+0x44>
 804b338:	a201      	add	r2, pc, #4	@ (adr r2, 804b340 <USBD_Get_USB_Status+0x1c>)
 804b33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804b33e:	bf00      	nop
 804b340:	0804b351 	.word	0x0804b351
 804b344:	0804b357 	.word	0x0804b357
 804b348:	0804b35d 	.word	0x0804b35d
 804b34c:	0804b363 	.word	0x0804b363
  {
    case HAL_OK :
      usb_status = USBD_OK;
 804b350:	2300      	movs	r3, #0
 804b352:	73fb      	strb	r3, [r7, #15]
    break;
 804b354:	e00b      	b.n	804b36e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 804b356:	2303      	movs	r3, #3
 804b358:	73fb      	strb	r3, [r7, #15]
    break;
 804b35a:	e008      	b.n	804b36e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 804b35c:	2301      	movs	r3, #1
 804b35e:	73fb      	strb	r3, [r7, #15]
    break;
 804b360:	e005      	b.n	804b36e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 804b362:	2303      	movs	r3, #3
 804b364:	73fb      	strb	r3, [r7, #15]
    break;
 804b366:	e002      	b.n	804b36e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 804b368:	2303      	movs	r3, #3
 804b36a:	73fb      	strb	r3, [r7, #15]
    break;
 804b36c:	bf00      	nop
  }
  return usb_status;
 804b36e:	7bfb      	ldrb	r3, [r7, #15]
}
 804b370:	4618      	mov	r0, r3
 804b372:	3714      	adds	r7, #20
 804b374:	46bd      	mov	sp, r7
 804b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b37a:	4770      	bx	lr

0804b37c <std>:
 804b37c:	2300      	movs	r3, #0
 804b37e:	b510      	push	{r4, lr}
 804b380:	4604      	mov	r4, r0
 804b382:	e9c0 3300 	strd	r3, r3, [r0]
 804b386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804b38a:	6083      	str	r3, [r0, #8]
 804b38c:	8181      	strh	r1, [r0, #12]
 804b38e:	6643      	str	r3, [r0, #100]	@ 0x64
 804b390:	81c2      	strh	r2, [r0, #14]
 804b392:	6183      	str	r3, [r0, #24]
 804b394:	4619      	mov	r1, r3
 804b396:	2208      	movs	r2, #8
 804b398:	305c      	adds	r0, #92	@ 0x5c
 804b39a:	f000 f906 	bl	804b5aa <memset>
 804b39e:	4b0d      	ldr	r3, [pc, #52]	@ (804b3d4 <std+0x58>)
 804b3a0:	6263      	str	r3, [r4, #36]	@ 0x24
 804b3a2:	4b0d      	ldr	r3, [pc, #52]	@ (804b3d8 <std+0x5c>)
 804b3a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 804b3a6:	4b0d      	ldr	r3, [pc, #52]	@ (804b3dc <std+0x60>)
 804b3a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 804b3aa:	4b0d      	ldr	r3, [pc, #52]	@ (804b3e0 <std+0x64>)
 804b3ac:	6323      	str	r3, [r4, #48]	@ 0x30
 804b3ae:	4b0d      	ldr	r3, [pc, #52]	@ (804b3e4 <std+0x68>)
 804b3b0:	6224      	str	r4, [r4, #32]
 804b3b2:	429c      	cmp	r4, r3
 804b3b4:	d006      	beq.n	804b3c4 <std+0x48>
 804b3b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 804b3ba:	4294      	cmp	r4, r2
 804b3bc:	d002      	beq.n	804b3c4 <std+0x48>
 804b3be:	33d0      	adds	r3, #208	@ 0xd0
 804b3c0:	429c      	cmp	r4, r3
 804b3c2:	d105      	bne.n	804b3d0 <std+0x54>
 804b3c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 804b3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804b3cc:	f000 b966 	b.w	804b69c <__retarget_lock_init_recursive>
 804b3d0:	bd10      	pop	{r4, pc}
 804b3d2:	bf00      	nop
 804b3d4:	0804b525 	.word	0x0804b525
 804b3d8:	0804b547 	.word	0x0804b547
 804b3dc:	0804b57f 	.word	0x0804b57f
 804b3e0:	0804b5a3 	.word	0x0804b5a3
 804b3e4:	24001104 	.word	0x24001104

0804b3e8 <stdio_exit_handler>:
 804b3e8:	4a02      	ldr	r2, [pc, #8]	@ (804b3f4 <stdio_exit_handler+0xc>)
 804b3ea:	4903      	ldr	r1, [pc, #12]	@ (804b3f8 <stdio_exit_handler+0x10>)
 804b3ec:	4803      	ldr	r0, [pc, #12]	@ (804b3fc <stdio_exit_handler+0x14>)
 804b3ee:	f000 b869 	b.w	804b4c4 <_fwalk_sglue>
 804b3f2:	bf00      	nop
 804b3f4:	240000e4 	.word	0x240000e4
 804b3f8:	0804bf39 	.word	0x0804bf39
 804b3fc:	240000f4 	.word	0x240000f4

0804b400 <cleanup_stdio>:
 804b400:	6841      	ldr	r1, [r0, #4]
 804b402:	4b0c      	ldr	r3, [pc, #48]	@ (804b434 <cleanup_stdio+0x34>)
 804b404:	4299      	cmp	r1, r3
 804b406:	b510      	push	{r4, lr}
 804b408:	4604      	mov	r4, r0
 804b40a:	d001      	beq.n	804b410 <cleanup_stdio+0x10>
 804b40c:	f000 fd94 	bl	804bf38 <_fflush_r>
 804b410:	68a1      	ldr	r1, [r4, #8]
 804b412:	4b09      	ldr	r3, [pc, #36]	@ (804b438 <cleanup_stdio+0x38>)
 804b414:	4299      	cmp	r1, r3
 804b416:	d002      	beq.n	804b41e <cleanup_stdio+0x1e>
 804b418:	4620      	mov	r0, r4
 804b41a:	f000 fd8d 	bl	804bf38 <_fflush_r>
 804b41e:	68e1      	ldr	r1, [r4, #12]
 804b420:	4b06      	ldr	r3, [pc, #24]	@ (804b43c <cleanup_stdio+0x3c>)
 804b422:	4299      	cmp	r1, r3
 804b424:	d004      	beq.n	804b430 <cleanup_stdio+0x30>
 804b426:	4620      	mov	r0, r4
 804b428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804b42c:	f000 bd84 	b.w	804bf38 <_fflush_r>
 804b430:	bd10      	pop	{r4, pc}
 804b432:	bf00      	nop
 804b434:	24001104 	.word	0x24001104
 804b438:	2400116c 	.word	0x2400116c
 804b43c:	240011d4 	.word	0x240011d4

0804b440 <global_stdio_init.part.0>:
 804b440:	b510      	push	{r4, lr}
 804b442:	4b0b      	ldr	r3, [pc, #44]	@ (804b470 <global_stdio_init.part.0+0x30>)
 804b444:	4c0b      	ldr	r4, [pc, #44]	@ (804b474 <global_stdio_init.part.0+0x34>)
 804b446:	4a0c      	ldr	r2, [pc, #48]	@ (804b478 <global_stdio_init.part.0+0x38>)
 804b448:	601a      	str	r2, [r3, #0]
 804b44a:	4620      	mov	r0, r4
 804b44c:	2200      	movs	r2, #0
 804b44e:	2104      	movs	r1, #4
 804b450:	f7ff ff94 	bl	804b37c <std>
 804b454:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 804b458:	2201      	movs	r2, #1
 804b45a:	2109      	movs	r1, #9
 804b45c:	f7ff ff8e 	bl	804b37c <std>
 804b460:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 804b464:	2202      	movs	r2, #2
 804b466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804b46a:	2112      	movs	r1, #18
 804b46c:	f7ff bf86 	b.w	804b37c <std>
 804b470:	2400123c 	.word	0x2400123c
 804b474:	24001104 	.word	0x24001104
 804b478:	0804b3e9 	.word	0x0804b3e9

0804b47c <__sfp_lock_acquire>:
 804b47c:	4801      	ldr	r0, [pc, #4]	@ (804b484 <__sfp_lock_acquire+0x8>)
 804b47e:	f000 b90e 	b.w	804b69e <__retarget_lock_acquire_recursive>
 804b482:	bf00      	nop
 804b484:	24001245 	.word	0x24001245

0804b488 <__sfp_lock_release>:
 804b488:	4801      	ldr	r0, [pc, #4]	@ (804b490 <__sfp_lock_release+0x8>)
 804b48a:	f000 b909 	b.w	804b6a0 <__retarget_lock_release_recursive>
 804b48e:	bf00      	nop
 804b490:	24001245 	.word	0x24001245

0804b494 <__sinit>:
 804b494:	b510      	push	{r4, lr}
 804b496:	4604      	mov	r4, r0
 804b498:	f7ff fff0 	bl	804b47c <__sfp_lock_acquire>
 804b49c:	6a23      	ldr	r3, [r4, #32]
 804b49e:	b11b      	cbz	r3, 804b4a8 <__sinit+0x14>
 804b4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804b4a4:	f7ff bff0 	b.w	804b488 <__sfp_lock_release>
 804b4a8:	4b04      	ldr	r3, [pc, #16]	@ (804b4bc <__sinit+0x28>)
 804b4aa:	6223      	str	r3, [r4, #32]
 804b4ac:	4b04      	ldr	r3, [pc, #16]	@ (804b4c0 <__sinit+0x2c>)
 804b4ae:	681b      	ldr	r3, [r3, #0]
 804b4b0:	2b00      	cmp	r3, #0
 804b4b2:	d1f5      	bne.n	804b4a0 <__sinit+0xc>
 804b4b4:	f7ff ffc4 	bl	804b440 <global_stdio_init.part.0>
 804b4b8:	e7f2      	b.n	804b4a0 <__sinit+0xc>
 804b4ba:	bf00      	nop
 804b4bc:	0804b401 	.word	0x0804b401
 804b4c0:	2400123c 	.word	0x2400123c

0804b4c4 <_fwalk_sglue>:
 804b4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804b4c8:	4607      	mov	r7, r0
 804b4ca:	4688      	mov	r8, r1
 804b4cc:	4614      	mov	r4, r2
 804b4ce:	2600      	movs	r6, #0
 804b4d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 804b4d4:	f1b9 0901 	subs.w	r9, r9, #1
 804b4d8:	d505      	bpl.n	804b4e6 <_fwalk_sglue+0x22>
 804b4da:	6824      	ldr	r4, [r4, #0]
 804b4dc:	2c00      	cmp	r4, #0
 804b4de:	d1f7      	bne.n	804b4d0 <_fwalk_sglue+0xc>
 804b4e0:	4630      	mov	r0, r6
 804b4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804b4e6:	89ab      	ldrh	r3, [r5, #12]
 804b4e8:	2b01      	cmp	r3, #1
 804b4ea:	d907      	bls.n	804b4fc <_fwalk_sglue+0x38>
 804b4ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804b4f0:	3301      	adds	r3, #1
 804b4f2:	d003      	beq.n	804b4fc <_fwalk_sglue+0x38>
 804b4f4:	4629      	mov	r1, r5
 804b4f6:	4638      	mov	r0, r7
 804b4f8:	47c0      	blx	r8
 804b4fa:	4306      	orrs	r6, r0
 804b4fc:	3568      	adds	r5, #104	@ 0x68
 804b4fe:	e7e9      	b.n	804b4d4 <_fwalk_sglue+0x10>

0804b500 <iprintf>:
 804b500:	b40f      	push	{r0, r1, r2, r3}
 804b502:	b507      	push	{r0, r1, r2, lr}
 804b504:	4906      	ldr	r1, [pc, #24]	@ (804b520 <iprintf+0x20>)
 804b506:	ab04      	add	r3, sp, #16
 804b508:	6808      	ldr	r0, [r1, #0]
 804b50a:	f853 2b04 	ldr.w	r2, [r3], #4
 804b50e:	6881      	ldr	r1, [r0, #8]
 804b510:	9301      	str	r3, [sp, #4]
 804b512:	f000 f9e9 	bl	804b8e8 <_vfiprintf_r>
 804b516:	b003      	add	sp, #12
 804b518:	f85d eb04 	ldr.w	lr, [sp], #4
 804b51c:	b004      	add	sp, #16
 804b51e:	4770      	bx	lr
 804b520:	240000f0 	.word	0x240000f0

0804b524 <__sread>:
 804b524:	b510      	push	{r4, lr}
 804b526:	460c      	mov	r4, r1
 804b528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804b52c:	f000 f868 	bl	804b600 <_read_r>
 804b530:	2800      	cmp	r0, #0
 804b532:	bfab      	itete	ge
 804b534:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 804b536:	89a3      	ldrhlt	r3, [r4, #12]
 804b538:	181b      	addge	r3, r3, r0
 804b53a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 804b53e:	bfac      	ite	ge
 804b540:	6563      	strge	r3, [r4, #84]	@ 0x54
 804b542:	81a3      	strhlt	r3, [r4, #12]
 804b544:	bd10      	pop	{r4, pc}

0804b546 <__swrite>:
 804b546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804b54a:	461f      	mov	r7, r3
 804b54c:	898b      	ldrh	r3, [r1, #12]
 804b54e:	05db      	lsls	r3, r3, #23
 804b550:	4605      	mov	r5, r0
 804b552:	460c      	mov	r4, r1
 804b554:	4616      	mov	r6, r2
 804b556:	d505      	bpl.n	804b564 <__swrite+0x1e>
 804b558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804b55c:	2302      	movs	r3, #2
 804b55e:	2200      	movs	r2, #0
 804b560:	f000 f83c 	bl	804b5dc <_lseek_r>
 804b564:	89a3      	ldrh	r3, [r4, #12]
 804b566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804b56a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 804b56e:	81a3      	strh	r3, [r4, #12]
 804b570:	4632      	mov	r2, r6
 804b572:	463b      	mov	r3, r7
 804b574:	4628      	mov	r0, r5
 804b576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804b57a:	f000 b853 	b.w	804b624 <_write_r>

0804b57e <__sseek>:
 804b57e:	b510      	push	{r4, lr}
 804b580:	460c      	mov	r4, r1
 804b582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804b586:	f000 f829 	bl	804b5dc <_lseek_r>
 804b58a:	1c43      	adds	r3, r0, #1
 804b58c:	89a3      	ldrh	r3, [r4, #12]
 804b58e:	bf15      	itete	ne
 804b590:	6560      	strne	r0, [r4, #84]	@ 0x54
 804b592:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 804b596:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 804b59a:	81a3      	strheq	r3, [r4, #12]
 804b59c:	bf18      	it	ne
 804b59e:	81a3      	strhne	r3, [r4, #12]
 804b5a0:	bd10      	pop	{r4, pc}

0804b5a2 <__sclose>:
 804b5a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804b5a6:	f000 b809 	b.w	804b5bc <_close_r>

0804b5aa <memset>:
 804b5aa:	4402      	add	r2, r0
 804b5ac:	4603      	mov	r3, r0
 804b5ae:	4293      	cmp	r3, r2
 804b5b0:	d100      	bne.n	804b5b4 <memset+0xa>
 804b5b2:	4770      	bx	lr
 804b5b4:	f803 1b01 	strb.w	r1, [r3], #1
 804b5b8:	e7f9      	b.n	804b5ae <memset+0x4>
	...

0804b5bc <_close_r>:
 804b5bc:	b538      	push	{r3, r4, r5, lr}
 804b5be:	4d06      	ldr	r5, [pc, #24]	@ (804b5d8 <_close_r+0x1c>)
 804b5c0:	2300      	movs	r3, #0
 804b5c2:	4604      	mov	r4, r0
 804b5c4:	4608      	mov	r0, r1
 804b5c6:	602b      	str	r3, [r5, #0]
 804b5c8:	f7f5 fc69 	bl	8040e9e <_close>
 804b5cc:	1c43      	adds	r3, r0, #1
 804b5ce:	d102      	bne.n	804b5d6 <_close_r+0x1a>
 804b5d0:	682b      	ldr	r3, [r5, #0]
 804b5d2:	b103      	cbz	r3, 804b5d6 <_close_r+0x1a>
 804b5d4:	6023      	str	r3, [r4, #0]
 804b5d6:	bd38      	pop	{r3, r4, r5, pc}
 804b5d8:	24001240 	.word	0x24001240

0804b5dc <_lseek_r>:
 804b5dc:	b538      	push	{r3, r4, r5, lr}
 804b5de:	4d07      	ldr	r5, [pc, #28]	@ (804b5fc <_lseek_r+0x20>)
 804b5e0:	4604      	mov	r4, r0
 804b5e2:	4608      	mov	r0, r1
 804b5e4:	4611      	mov	r1, r2
 804b5e6:	2200      	movs	r2, #0
 804b5e8:	602a      	str	r2, [r5, #0]
 804b5ea:	461a      	mov	r2, r3
 804b5ec:	f7f5 fc7e 	bl	8040eec <_lseek>
 804b5f0:	1c43      	adds	r3, r0, #1
 804b5f2:	d102      	bne.n	804b5fa <_lseek_r+0x1e>
 804b5f4:	682b      	ldr	r3, [r5, #0]
 804b5f6:	b103      	cbz	r3, 804b5fa <_lseek_r+0x1e>
 804b5f8:	6023      	str	r3, [r4, #0]
 804b5fa:	bd38      	pop	{r3, r4, r5, pc}
 804b5fc:	24001240 	.word	0x24001240

0804b600 <_read_r>:
 804b600:	b538      	push	{r3, r4, r5, lr}
 804b602:	4d07      	ldr	r5, [pc, #28]	@ (804b620 <_read_r+0x20>)
 804b604:	4604      	mov	r4, r0
 804b606:	4608      	mov	r0, r1
 804b608:	4611      	mov	r1, r2
 804b60a:	2200      	movs	r2, #0
 804b60c:	602a      	str	r2, [r5, #0]
 804b60e:	461a      	mov	r2, r3
 804b610:	f7f5 fc0c 	bl	8040e2c <_read>
 804b614:	1c43      	adds	r3, r0, #1
 804b616:	d102      	bne.n	804b61e <_read_r+0x1e>
 804b618:	682b      	ldr	r3, [r5, #0]
 804b61a:	b103      	cbz	r3, 804b61e <_read_r+0x1e>
 804b61c:	6023      	str	r3, [r4, #0]
 804b61e:	bd38      	pop	{r3, r4, r5, pc}
 804b620:	24001240 	.word	0x24001240

0804b624 <_write_r>:
 804b624:	b538      	push	{r3, r4, r5, lr}
 804b626:	4d07      	ldr	r5, [pc, #28]	@ (804b644 <_write_r+0x20>)
 804b628:	4604      	mov	r4, r0
 804b62a:	4608      	mov	r0, r1
 804b62c:	4611      	mov	r1, r2
 804b62e:	2200      	movs	r2, #0
 804b630:	602a      	str	r2, [r5, #0]
 804b632:	461a      	mov	r2, r3
 804b634:	f7f5 fc17 	bl	8040e66 <_write>
 804b638:	1c43      	adds	r3, r0, #1
 804b63a:	d102      	bne.n	804b642 <_write_r+0x1e>
 804b63c:	682b      	ldr	r3, [r5, #0]
 804b63e:	b103      	cbz	r3, 804b642 <_write_r+0x1e>
 804b640:	6023      	str	r3, [r4, #0]
 804b642:	bd38      	pop	{r3, r4, r5, pc}
 804b644:	24001240 	.word	0x24001240

0804b648 <__errno>:
 804b648:	4b01      	ldr	r3, [pc, #4]	@ (804b650 <__errno+0x8>)
 804b64a:	6818      	ldr	r0, [r3, #0]
 804b64c:	4770      	bx	lr
 804b64e:	bf00      	nop
 804b650:	240000f0 	.word	0x240000f0

0804b654 <__libc_init_array>:
 804b654:	b570      	push	{r4, r5, r6, lr}
 804b656:	4d0d      	ldr	r5, [pc, #52]	@ (804b68c <__libc_init_array+0x38>)
 804b658:	4c0d      	ldr	r4, [pc, #52]	@ (804b690 <__libc_init_array+0x3c>)
 804b65a:	1b64      	subs	r4, r4, r5
 804b65c:	10a4      	asrs	r4, r4, #2
 804b65e:	2600      	movs	r6, #0
 804b660:	42a6      	cmp	r6, r4
 804b662:	d109      	bne.n	804b678 <__libc_init_array+0x24>
 804b664:	4d0b      	ldr	r5, [pc, #44]	@ (804b694 <__libc_init_array+0x40>)
 804b666:	4c0c      	ldr	r4, [pc, #48]	@ (804b698 <__libc_init_array+0x44>)
 804b668:	f000 fdb6 	bl	804c1d8 <_init>
 804b66c:	1b64      	subs	r4, r4, r5
 804b66e:	10a4      	asrs	r4, r4, #2
 804b670:	2600      	movs	r6, #0
 804b672:	42a6      	cmp	r6, r4
 804b674:	d105      	bne.n	804b682 <__libc_init_array+0x2e>
 804b676:	bd70      	pop	{r4, r5, r6, pc}
 804b678:	f855 3b04 	ldr.w	r3, [r5], #4
 804b67c:	4798      	blx	r3
 804b67e:	3601      	adds	r6, #1
 804b680:	e7ee      	b.n	804b660 <__libc_init_array+0xc>
 804b682:	f855 3b04 	ldr.w	r3, [r5], #4
 804b686:	4798      	blx	r3
 804b688:	3601      	adds	r6, #1
 804b68a:	e7f2      	b.n	804b672 <__libc_init_array+0x1e>
 804b68c:	0804c34c 	.word	0x0804c34c
 804b690:	0804c34c 	.word	0x0804c34c
 804b694:	0804c34c 	.word	0x0804c34c
 804b698:	0804c350 	.word	0x0804c350

0804b69c <__retarget_lock_init_recursive>:
 804b69c:	4770      	bx	lr

0804b69e <__retarget_lock_acquire_recursive>:
 804b69e:	4770      	bx	lr

0804b6a0 <__retarget_lock_release_recursive>:
 804b6a0:	4770      	bx	lr
	...

0804b6a4 <_free_r>:
 804b6a4:	b538      	push	{r3, r4, r5, lr}
 804b6a6:	4605      	mov	r5, r0
 804b6a8:	2900      	cmp	r1, #0
 804b6aa:	d041      	beq.n	804b730 <_free_r+0x8c>
 804b6ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804b6b0:	1f0c      	subs	r4, r1, #4
 804b6b2:	2b00      	cmp	r3, #0
 804b6b4:	bfb8      	it	lt
 804b6b6:	18e4      	addlt	r4, r4, r3
 804b6b8:	f000 f8e0 	bl	804b87c <__malloc_lock>
 804b6bc:	4a1d      	ldr	r2, [pc, #116]	@ (804b734 <_free_r+0x90>)
 804b6be:	6813      	ldr	r3, [r2, #0]
 804b6c0:	b933      	cbnz	r3, 804b6d0 <_free_r+0x2c>
 804b6c2:	6063      	str	r3, [r4, #4]
 804b6c4:	6014      	str	r4, [r2, #0]
 804b6c6:	4628      	mov	r0, r5
 804b6c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804b6cc:	f000 b8dc 	b.w	804b888 <__malloc_unlock>
 804b6d0:	42a3      	cmp	r3, r4
 804b6d2:	d908      	bls.n	804b6e6 <_free_r+0x42>
 804b6d4:	6820      	ldr	r0, [r4, #0]
 804b6d6:	1821      	adds	r1, r4, r0
 804b6d8:	428b      	cmp	r3, r1
 804b6da:	bf01      	itttt	eq
 804b6dc:	6819      	ldreq	r1, [r3, #0]
 804b6de:	685b      	ldreq	r3, [r3, #4]
 804b6e0:	1809      	addeq	r1, r1, r0
 804b6e2:	6021      	streq	r1, [r4, #0]
 804b6e4:	e7ed      	b.n	804b6c2 <_free_r+0x1e>
 804b6e6:	461a      	mov	r2, r3
 804b6e8:	685b      	ldr	r3, [r3, #4]
 804b6ea:	b10b      	cbz	r3, 804b6f0 <_free_r+0x4c>
 804b6ec:	42a3      	cmp	r3, r4
 804b6ee:	d9fa      	bls.n	804b6e6 <_free_r+0x42>
 804b6f0:	6811      	ldr	r1, [r2, #0]
 804b6f2:	1850      	adds	r0, r2, r1
 804b6f4:	42a0      	cmp	r0, r4
 804b6f6:	d10b      	bne.n	804b710 <_free_r+0x6c>
 804b6f8:	6820      	ldr	r0, [r4, #0]
 804b6fa:	4401      	add	r1, r0
 804b6fc:	1850      	adds	r0, r2, r1
 804b6fe:	4283      	cmp	r3, r0
 804b700:	6011      	str	r1, [r2, #0]
 804b702:	d1e0      	bne.n	804b6c6 <_free_r+0x22>
 804b704:	6818      	ldr	r0, [r3, #0]
 804b706:	685b      	ldr	r3, [r3, #4]
 804b708:	6053      	str	r3, [r2, #4]
 804b70a:	4408      	add	r0, r1
 804b70c:	6010      	str	r0, [r2, #0]
 804b70e:	e7da      	b.n	804b6c6 <_free_r+0x22>
 804b710:	d902      	bls.n	804b718 <_free_r+0x74>
 804b712:	230c      	movs	r3, #12
 804b714:	602b      	str	r3, [r5, #0]
 804b716:	e7d6      	b.n	804b6c6 <_free_r+0x22>
 804b718:	6820      	ldr	r0, [r4, #0]
 804b71a:	1821      	adds	r1, r4, r0
 804b71c:	428b      	cmp	r3, r1
 804b71e:	bf04      	itt	eq
 804b720:	6819      	ldreq	r1, [r3, #0]
 804b722:	685b      	ldreq	r3, [r3, #4]
 804b724:	6063      	str	r3, [r4, #4]
 804b726:	bf04      	itt	eq
 804b728:	1809      	addeq	r1, r1, r0
 804b72a:	6021      	streq	r1, [r4, #0]
 804b72c:	6054      	str	r4, [r2, #4]
 804b72e:	e7ca      	b.n	804b6c6 <_free_r+0x22>
 804b730:	bd38      	pop	{r3, r4, r5, pc}
 804b732:	bf00      	nop
 804b734:	2400124c 	.word	0x2400124c

0804b738 <sbrk_aligned>:
 804b738:	b570      	push	{r4, r5, r6, lr}
 804b73a:	4e0f      	ldr	r6, [pc, #60]	@ (804b778 <sbrk_aligned+0x40>)
 804b73c:	460c      	mov	r4, r1
 804b73e:	6831      	ldr	r1, [r6, #0]
 804b740:	4605      	mov	r5, r0
 804b742:	b911      	cbnz	r1, 804b74a <sbrk_aligned+0x12>
 804b744:	f000 fcb4 	bl	804c0b0 <_sbrk_r>
 804b748:	6030      	str	r0, [r6, #0]
 804b74a:	4621      	mov	r1, r4
 804b74c:	4628      	mov	r0, r5
 804b74e:	f000 fcaf 	bl	804c0b0 <_sbrk_r>
 804b752:	1c43      	adds	r3, r0, #1
 804b754:	d103      	bne.n	804b75e <sbrk_aligned+0x26>
 804b756:	f04f 34ff 	mov.w	r4, #4294967295
 804b75a:	4620      	mov	r0, r4
 804b75c:	bd70      	pop	{r4, r5, r6, pc}
 804b75e:	1cc4      	adds	r4, r0, #3
 804b760:	f024 0403 	bic.w	r4, r4, #3
 804b764:	42a0      	cmp	r0, r4
 804b766:	d0f8      	beq.n	804b75a <sbrk_aligned+0x22>
 804b768:	1a21      	subs	r1, r4, r0
 804b76a:	4628      	mov	r0, r5
 804b76c:	f000 fca0 	bl	804c0b0 <_sbrk_r>
 804b770:	3001      	adds	r0, #1
 804b772:	d1f2      	bne.n	804b75a <sbrk_aligned+0x22>
 804b774:	e7ef      	b.n	804b756 <sbrk_aligned+0x1e>
 804b776:	bf00      	nop
 804b778:	24001248 	.word	0x24001248

0804b77c <_malloc_r>:
 804b77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804b780:	1ccd      	adds	r5, r1, #3
 804b782:	f025 0503 	bic.w	r5, r5, #3
 804b786:	3508      	adds	r5, #8
 804b788:	2d0c      	cmp	r5, #12
 804b78a:	bf38      	it	cc
 804b78c:	250c      	movcc	r5, #12
 804b78e:	2d00      	cmp	r5, #0
 804b790:	4606      	mov	r6, r0
 804b792:	db01      	blt.n	804b798 <_malloc_r+0x1c>
 804b794:	42a9      	cmp	r1, r5
 804b796:	d904      	bls.n	804b7a2 <_malloc_r+0x26>
 804b798:	230c      	movs	r3, #12
 804b79a:	6033      	str	r3, [r6, #0]
 804b79c:	2000      	movs	r0, #0
 804b79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804b7a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 804b878 <_malloc_r+0xfc>
 804b7a6:	f000 f869 	bl	804b87c <__malloc_lock>
 804b7aa:	f8d8 3000 	ldr.w	r3, [r8]
 804b7ae:	461c      	mov	r4, r3
 804b7b0:	bb44      	cbnz	r4, 804b804 <_malloc_r+0x88>
 804b7b2:	4629      	mov	r1, r5
 804b7b4:	4630      	mov	r0, r6
 804b7b6:	f7ff ffbf 	bl	804b738 <sbrk_aligned>
 804b7ba:	1c43      	adds	r3, r0, #1
 804b7bc:	4604      	mov	r4, r0
 804b7be:	d158      	bne.n	804b872 <_malloc_r+0xf6>
 804b7c0:	f8d8 4000 	ldr.w	r4, [r8]
 804b7c4:	4627      	mov	r7, r4
 804b7c6:	2f00      	cmp	r7, #0
 804b7c8:	d143      	bne.n	804b852 <_malloc_r+0xd6>
 804b7ca:	2c00      	cmp	r4, #0
 804b7cc:	d04b      	beq.n	804b866 <_malloc_r+0xea>
 804b7ce:	6823      	ldr	r3, [r4, #0]
 804b7d0:	4639      	mov	r1, r7
 804b7d2:	4630      	mov	r0, r6
 804b7d4:	eb04 0903 	add.w	r9, r4, r3
 804b7d8:	f000 fc6a 	bl	804c0b0 <_sbrk_r>
 804b7dc:	4581      	cmp	r9, r0
 804b7de:	d142      	bne.n	804b866 <_malloc_r+0xea>
 804b7e0:	6821      	ldr	r1, [r4, #0]
 804b7e2:	1a6d      	subs	r5, r5, r1
 804b7e4:	4629      	mov	r1, r5
 804b7e6:	4630      	mov	r0, r6
 804b7e8:	f7ff ffa6 	bl	804b738 <sbrk_aligned>
 804b7ec:	3001      	adds	r0, #1
 804b7ee:	d03a      	beq.n	804b866 <_malloc_r+0xea>
 804b7f0:	6823      	ldr	r3, [r4, #0]
 804b7f2:	442b      	add	r3, r5
 804b7f4:	6023      	str	r3, [r4, #0]
 804b7f6:	f8d8 3000 	ldr.w	r3, [r8]
 804b7fa:	685a      	ldr	r2, [r3, #4]
 804b7fc:	bb62      	cbnz	r2, 804b858 <_malloc_r+0xdc>
 804b7fe:	f8c8 7000 	str.w	r7, [r8]
 804b802:	e00f      	b.n	804b824 <_malloc_r+0xa8>
 804b804:	6822      	ldr	r2, [r4, #0]
 804b806:	1b52      	subs	r2, r2, r5
 804b808:	d420      	bmi.n	804b84c <_malloc_r+0xd0>
 804b80a:	2a0b      	cmp	r2, #11
 804b80c:	d917      	bls.n	804b83e <_malloc_r+0xc2>
 804b80e:	1961      	adds	r1, r4, r5
 804b810:	42a3      	cmp	r3, r4
 804b812:	6025      	str	r5, [r4, #0]
 804b814:	bf18      	it	ne
 804b816:	6059      	strne	r1, [r3, #4]
 804b818:	6863      	ldr	r3, [r4, #4]
 804b81a:	bf08      	it	eq
 804b81c:	f8c8 1000 	streq.w	r1, [r8]
 804b820:	5162      	str	r2, [r4, r5]
 804b822:	604b      	str	r3, [r1, #4]
 804b824:	4630      	mov	r0, r6
 804b826:	f000 f82f 	bl	804b888 <__malloc_unlock>
 804b82a:	f104 000b 	add.w	r0, r4, #11
 804b82e:	1d23      	adds	r3, r4, #4
 804b830:	f020 0007 	bic.w	r0, r0, #7
 804b834:	1ac2      	subs	r2, r0, r3
 804b836:	bf1c      	itt	ne
 804b838:	1a1b      	subne	r3, r3, r0
 804b83a:	50a3      	strne	r3, [r4, r2]
 804b83c:	e7af      	b.n	804b79e <_malloc_r+0x22>
 804b83e:	6862      	ldr	r2, [r4, #4]
 804b840:	42a3      	cmp	r3, r4
 804b842:	bf0c      	ite	eq
 804b844:	f8c8 2000 	streq.w	r2, [r8]
 804b848:	605a      	strne	r2, [r3, #4]
 804b84a:	e7eb      	b.n	804b824 <_malloc_r+0xa8>
 804b84c:	4623      	mov	r3, r4
 804b84e:	6864      	ldr	r4, [r4, #4]
 804b850:	e7ae      	b.n	804b7b0 <_malloc_r+0x34>
 804b852:	463c      	mov	r4, r7
 804b854:	687f      	ldr	r7, [r7, #4]
 804b856:	e7b6      	b.n	804b7c6 <_malloc_r+0x4a>
 804b858:	461a      	mov	r2, r3
 804b85a:	685b      	ldr	r3, [r3, #4]
 804b85c:	42a3      	cmp	r3, r4
 804b85e:	d1fb      	bne.n	804b858 <_malloc_r+0xdc>
 804b860:	2300      	movs	r3, #0
 804b862:	6053      	str	r3, [r2, #4]
 804b864:	e7de      	b.n	804b824 <_malloc_r+0xa8>
 804b866:	230c      	movs	r3, #12
 804b868:	6033      	str	r3, [r6, #0]
 804b86a:	4630      	mov	r0, r6
 804b86c:	f000 f80c 	bl	804b888 <__malloc_unlock>
 804b870:	e794      	b.n	804b79c <_malloc_r+0x20>
 804b872:	6005      	str	r5, [r0, #0]
 804b874:	e7d6      	b.n	804b824 <_malloc_r+0xa8>
 804b876:	bf00      	nop
 804b878:	2400124c 	.word	0x2400124c

0804b87c <__malloc_lock>:
 804b87c:	4801      	ldr	r0, [pc, #4]	@ (804b884 <__malloc_lock+0x8>)
 804b87e:	f7ff bf0e 	b.w	804b69e <__retarget_lock_acquire_recursive>
 804b882:	bf00      	nop
 804b884:	24001244 	.word	0x24001244

0804b888 <__malloc_unlock>:
 804b888:	4801      	ldr	r0, [pc, #4]	@ (804b890 <__malloc_unlock+0x8>)
 804b88a:	f7ff bf09 	b.w	804b6a0 <__retarget_lock_release_recursive>
 804b88e:	bf00      	nop
 804b890:	24001244 	.word	0x24001244

0804b894 <__sfputc_r>:
 804b894:	6893      	ldr	r3, [r2, #8]
 804b896:	3b01      	subs	r3, #1
 804b898:	2b00      	cmp	r3, #0
 804b89a:	b410      	push	{r4}
 804b89c:	6093      	str	r3, [r2, #8]
 804b89e:	da08      	bge.n	804b8b2 <__sfputc_r+0x1e>
 804b8a0:	6994      	ldr	r4, [r2, #24]
 804b8a2:	42a3      	cmp	r3, r4
 804b8a4:	db01      	blt.n	804b8aa <__sfputc_r+0x16>
 804b8a6:	290a      	cmp	r1, #10
 804b8a8:	d103      	bne.n	804b8b2 <__sfputc_r+0x1e>
 804b8aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 804b8ae:	f000 bb6b 	b.w	804bf88 <__swbuf_r>
 804b8b2:	6813      	ldr	r3, [r2, #0]
 804b8b4:	1c58      	adds	r0, r3, #1
 804b8b6:	6010      	str	r0, [r2, #0]
 804b8b8:	7019      	strb	r1, [r3, #0]
 804b8ba:	4608      	mov	r0, r1
 804b8bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 804b8c0:	4770      	bx	lr

0804b8c2 <__sfputs_r>:
 804b8c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804b8c4:	4606      	mov	r6, r0
 804b8c6:	460f      	mov	r7, r1
 804b8c8:	4614      	mov	r4, r2
 804b8ca:	18d5      	adds	r5, r2, r3
 804b8cc:	42ac      	cmp	r4, r5
 804b8ce:	d101      	bne.n	804b8d4 <__sfputs_r+0x12>
 804b8d0:	2000      	movs	r0, #0
 804b8d2:	e007      	b.n	804b8e4 <__sfputs_r+0x22>
 804b8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 804b8d8:	463a      	mov	r2, r7
 804b8da:	4630      	mov	r0, r6
 804b8dc:	f7ff ffda 	bl	804b894 <__sfputc_r>
 804b8e0:	1c43      	adds	r3, r0, #1
 804b8e2:	d1f3      	bne.n	804b8cc <__sfputs_r+0xa>
 804b8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804b8e8 <_vfiprintf_r>:
 804b8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b8ec:	460d      	mov	r5, r1
 804b8ee:	b09d      	sub	sp, #116	@ 0x74
 804b8f0:	4614      	mov	r4, r2
 804b8f2:	4698      	mov	r8, r3
 804b8f4:	4606      	mov	r6, r0
 804b8f6:	b118      	cbz	r0, 804b900 <_vfiprintf_r+0x18>
 804b8f8:	6a03      	ldr	r3, [r0, #32]
 804b8fa:	b90b      	cbnz	r3, 804b900 <_vfiprintf_r+0x18>
 804b8fc:	f7ff fdca 	bl	804b494 <__sinit>
 804b900:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 804b902:	07d9      	lsls	r1, r3, #31
 804b904:	d405      	bmi.n	804b912 <_vfiprintf_r+0x2a>
 804b906:	89ab      	ldrh	r3, [r5, #12]
 804b908:	059a      	lsls	r2, r3, #22
 804b90a:	d402      	bmi.n	804b912 <_vfiprintf_r+0x2a>
 804b90c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804b90e:	f7ff fec6 	bl	804b69e <__retarget_lock_acquire_recursive>
 804b912:	89ab      	ldrh	r3, [r5, #12]
 804b914:	071b      	lsls	r3, r3, #28
 804b916:	d501      	bpl.n	804b91c <_vfiprintf_r+0x34>
 804b918:	692b      	ldr	r3, [r5, #16]
 804b91a:	b99b      	cbnz	r3, 804b944 <_vfiprintf_r+0x5c>
 804b91c:	4629      	mov	r1, r5
 804b91e:	4630      	mov	r0, r6
 804b920:	f000 fb70 	bl	804c004 <__swsetup_r>
 804b924:	b170      	cbz	r0, 804b944 <_vfiprintf_r+0x5c>
 804b926:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 804b928:	07dc      	lsls	r4, r3, #31
 804b92a:	d504      	bpl.n	804b936 <_vfiprintf_r+0x4e>
 804b92c:	f04f 30ff 	mov.w	r0, #4294967295
 804b930:	b01d      	add	sp, #116	@ 0x74
 804b932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804b936:	89ab      	ldrh	r3, [r5, #12]
 804b938:	0598      	lsls	r0, r3, #22
 804b93a:	d4f7      	bmi.n	804b92c <_vfiprintf_r+0x44>
 804b93c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804b93e:	f7ff feaf 	bl	804b6a0 <__retarget_lock_release_recursive>
 804b942:	e7f3      	b.n	804b92c <_vfiprintf_r+0x44>
 804b944:	2300      	movs	r3, #0
 804b946:	9309      	str	r3, [sp, #36]	@ 0x24
 804b948:	2320      	movs	r3, #32
 804b94a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 804b94e:	f8cd 800c 	str.w	r8, [sp, #12]
 804b952:	2330      	movs	r3, #48	@ 0x30
 804b954:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 804bb04 <_vfiprintf_r+0x21c>
 804b958:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 804b95c:	f04f 0901 	mov.w	r9, #1
 804b960:	4623      	mov	r3, r4
 804b962:	469a      	mov	sl, r3
 804b964:	f813 2b01 	ldrb.w	r2, [r3], #1
 804b968:	b10a      	cbz	r2, 804b96e <_vfiprintf_r+0x86>
 804b96a:	2a25      	cmp	r2, #37	@ 0x25
 804b96c:	d1f9      	bne.n	804b962 <_vfiprintf_r+0x7a>
 804b96e:	ebba 0b04 	subs.w	fp, sl, r4
 804b972:	d00b      	beq.n	804b98c <_vfiprintf_r+0xa4>
 804b974:	465b      	mov	r3, fp
 804b976:	4622      	mov	r2, r4
 804b978:	4629      	mov	r1, r5
 804b97a:	4630      	mov	r0, r6
 804b97c:	f7ff ffa1 	bl	804b8c2 <__sfputs_r>
 804b980:	3001      	adds	r0, #1
 804b982:	f000 80a7 	beq.w	804bad4 <_vfiprintf_r+0x1ec>
 804b986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 804b988:	445a      	add	r2, fp
 804b98a:	9209      	str	r2, [sp, #36]	@ 0x24
 804b98c:	f89a 3000 	ldrb.w	r3, [sl]
 804b990:	2b00      	cmp	r3, #0
 804b992:	f000 809f 	beq.w	804bad4 <_vfiprintf_r+0x1ec>
 804b996:	2300      	movs	r3, #0
 804b998:	f04f 32ff 	mov.w	r2, #4294967295
 804b99c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804b9a0:	f10a 0a01 	add.w	sl, sl, #1
 804b9a4:	9304      	str	r3, [sp, #16]
 804b9a6:	9307      	str	r3, [sp, #28]
 804b9a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 804b9ac:	931a      	str	r3, [sp, #104]	@ 0x68
 804b9ae:	4654      	mov	r4, sl
 804b9b0:	2205      	movs	r2, #5
 804b9b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 804b9b6:	4853      	ldr	r0, [pc, #332]	@ (804bb04 <_vfiprintf_r+0x21c>)
 804b9b8:	f7f4 fc92 	bl	80402e0 <memchr>
 804b9bc:	9a04      	ldr	r2, [sp, #16]
 804b9be:	b9d8      	cbnz	r0, 804b9f8 <_vfiprintf_r+0x110>
 804b9c0:	06d1      	lsls	r1, r2, #27
 804b9c2:	bf44      	itt	mi
 804b9c4:	2320      	movmi	r3, #32
 804b9c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 804b9ca:	0713      	lsls	r3, r2, #28
 804b9cc:	bf44      	itt	mi
 804b9ce:	232b      	movmi	r3, #43	@ 0x2b
 804b9d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 804b9d4:	f89a 3000 	ldrb.w	r3, [sl]
 804b9d8:	2b2a      	cmp	r3, #42	@ 0x2a
 804b9da:	d015      	beq.n	804ba08 <_vfiprintf_r+0x120>
 804b9dc:	9a07      	ldr	r2, [sp, #28]
 804b9de:	4654      	mov	r4, sl
 804b9e0:	2000      	movs	r0, #0
 804b9e2:	f04f 0c0a 	mov.w	ip, #10
 804b9e6:	4621      	mov	r1, r4
 804b9e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 804b9ec:	3b30      	subs	r3, #48	@ 0x30
 804b9ee:	2b09      	cmp	r3, #9
 804b9f0:	d94b      	bls.n	804ba8a <_vfiprintf_r+0x1a2>
 804b9f2:	b1b0      	cbz	r0, 804ba22 <_vfiprintf_r+0x13a>
 804b9f4:	9207      	str	r2, [sp, #28]
 804b9f6:	e014      	b.n	804ba22 <_vfiprintf_r+0x13a>
 804b9f8:	eba0 0308 	sub.w	r3, r0, r8
 804b9fc:	fa09 f303 	lsl.w	r3, r9, r3
 804ba00:	4313      	orrs	r3, r2
 804ba02:	9304      	str	r3, [sp, #16]
 804ba04:	46a2      	mov	sl, r4
 804ba06:	e7d2      	b.n	804b9ae <_vfiprintf_r+0xc6>
 804ba08:	9b03      	ldr	r3, [sp, #12]
 804ba0a:	1d19      	adds	r1, r3, #4
 804ba0c:	681b      	ldr	r3, [r3, #0]
 804ba0e:	9103      	str	r1, [sp, #12]
 804ba10:	2b00      	cmp	r3, #0
 804ba12:	bfbb      	ittet	lt
 804ba14:	425b      	neglt	r3, r3
 804ba16:	f042 0202 	orrlt.w	r2, r2, #2
 804ba1a:	9307      	strge	r3, [sp, #28]
 804ba1c:	9307      	strlt	r3, [sp, #28]
 804ba1e:	bfb8      	it	lt
 804ba20:	9204      	strlt	r2, [sp, #16]
 804ba22:	7823      	ldrb	r3, [r4, #0]
 804ba24:	2b2e      	cmp	r3, #46	@ 0x2e
 804ba26:	d10a      	bne.n	804ba3e <_vfiprintf_r+0x156>
 804ba28:	7863      	ldrb	r3, [r4, #1]
 804ba2a:	2b2a      	cmp	r3, #42	@ 0x2a
 804ba2c:	d132      	bne.n	804ba94 <_vfiprintf_r+0x1ac>
 804ba2e:	9b03      	ldr	r3, [sp, #12]
 804ba30:	1d1a      	adds	r2, r3, #4
 804ba32:	681b      	ldr	r3, [r3, #0]
 804ba34:	9203      	str	r2, [sp, #12]
 804ba36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 804ba3a:	3402      	adds	r4, #2
 804ba3c:	9305      	str	r3, [sp, #20]
 804ba3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 804bb14 <_vfiprintf_r+0x22c>
 804ba42:	7821      	ldrb	r1, [r4, #0]
 804ba44:	2203      	movs	r2, #3
 804ba46:	4650      	mov	r0, sl
 804ba48:	f7f4 fc4a 	bl	80402e0 <memchr>
 804ba4c:	b138      	cbz	r0, 804ba5e <_vfiprintf_r+0x176>
 804ba4e:	9b04      	ldr	r3, [sp, #16]
 804ba50:	eba0 000a 	sub.w	r0, r0, sl
 804ba54:	2240      	movs	r2, #64	@ 0x40
 804ba56:	4082      	lsls	r2, r0
 804ba58:	4313      	orrs	r3, r2
 804ba5a:	3401      	adds	r4, #1
 804ba5c:	9304      	str	r3, [sp, #16]
 804ba5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 804ba62:	4829      	ldr	r0, [pc, #164]	@ (804bb08 <_vfiprintf_r+0x220>)
 804ba64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 804ba68:	2206      	movs	r2, #6
 804ba6a:	f7f4 fc39 	bl	80402e0 <memchr>
 804ba6e:	2800      	cmp	r0, #0
 804ba70:	d03f      	beq.n	804baf2 <_vfiprintf_r+0x20a>
 804ba72:	4b26      	ldr	r3, [pc, #152]	@ (804bb0c <_vfiprintf_r+0x224>)
 804ba74:	bb1b      	cbnz	r3, 804babe <_vfiprintf_r+0x1d6>
 804ba76:	9b03      	ldr	r3, [sp, #12]
 804ba78:	3307      	adds	r3, #7
 804ba7a:	f023 0307 	bic.w	r3, r3, #7
 804ba7e:	3308      	adds	r3, #8
 804ba80:	9303      	str	r3, [sp, #12]
 804ba82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 804ba84:	443b      	add	r3, r7
 804ba86:	9309      	str	r3, [sp, #36]	@ 0x24
 804ba88:	e76a      	b.n	804b960 <_vfiprintf_r+0x78>
 804ba8a:	fb0c 3202 	mla	r2, ip, r2, r3
 804ba8e:	460c      	mov	r4, r1
 804ba90:	2001      	movs	r0, #1
 804ba92:	e7a8      	b.n	804b9e6 <_vfiprintf_r+0xfe>
 804ba94:	2300      	movs	r3, #0
 804ba96:	3401      	adds	r4, #1
 804ba98:	9305      	str	r3, [sp, #20]
 804ba9a:	4619      	mov	r1, r3
 804ba9c:	f04f 0c0a 	mov.w	ip, #10
 804baa0:	4620      	mov	r0, r4
 804baa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 804baa6:	3a30      	subs	r2, #48	@ 0x30
 804baa8:	2a09      	cmp	r2, #9
 804baaa:	d903      	bls.n	804bab4 <_vfiprintf_r+0x1cc>
 804baac:	2b00      	cmp	r3, #0
 804baae:	d0c6      	beq.n	804ba3e <_vfiprintf_r+0x156>
 804bab0:	9105      	str	r1, [sp, #20]
 804bab2:	e7c4      	b.n	804ba3e <_vfiprintf_r+0x156>
 804bab4:	fb0c 2101 	mla	r1, ip, r1, r2
 804bab8:	4604      	mov	r4, r0
 804baba:	2301      	movs	r3, #1
 804babc:	e7f0      	b.n	804baa0 <_vfiprintf_r+0x1b8>
 804babe:	ab03      	add	r3, sp, #12
 804bac0:	9300      	str	r3, [sp, #0]
 804bac2:	462a      	mov	r2, r5
 804bac4:	4b12      	ldr	r3, [pc, #72]	@ (804bb10 <_vfiprintf_r+0x228>)
 804bac6:	a904      	add	r1, sp, #16
 804bac8:	4630      	mov	r0, r6
 804baca:	f3af 8000 	nop.w
 804bace:	4607      	mov	r7, r0
 804bad0:	1c78      	adds	r0, r7, #1
 804bad2:	d1d6      	bne.n	804ba82 <_vfiprintf_r+0x19a>
 804bad4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 804bad6:	07d9      	lsls	r1, r3, #31
 804bad8:	d405      	bmi.n	804bae6 <_vfiprintf_r+0x1fe>
 804bada:	89ab      	ldrh	r3, [r5, #12]
 804badc:	059a      	lsls	r2, r3, #22
 804bade:	d402      	bmi.n	804bae6 <_vfiprintf_r+0x1fe>
 804bae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804bae2:	f7ff fddd 	bl	804b6a0 <__retarget_lock_release_recursive>
 804bae6:	89ab      	ldrh	r3, [r5, #12]
 804bae8:	065b      	lsls	r3, r3, #25
 804baea:	f53f af1f 	bmi.w	804b92c <_vfiprintf_r+0x44>
 804baee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 804baf0:	e71e      	b.n	804b930 <_vfiprintf_r+0x48>
 804baf2:	ab03      	add	r3, sp, #12
 804baf4:	9300      	str	r3, [sp, #0]
 804baf6:	462a      	mov	r2, r5
 804baf8:	4b05      	ldr	r3, [pc, #20]	@ (804bb10 <_vfiprintf_r+0x228>)
 804bafa:	a904      	add	r1, sp, #16
 804bafc:	4630      	mov	r0, r6
 804bafe:	f000 f879 	bl	804bbf4 <_printf_i>
 804bb02:	e7e4      	b.n	804bace <_vfiprintf_r+0x1e6>
 804bb04:	0804c310 	.word	0x0804c310
 804bb08:	0804c31a 	.word	0x0804c31a
 804bb0c:	00000000 	.word	0x00000000
 804bb10:	0804b8c3 	.word	0x0804b8c3
 804bb14:	0804c316 	.word	0x0804c316

0804bb18 <_printf_common>:
 804bb18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804bb1c:	4616      	mov	r6, r2
 804bb1e:	4698      	mov	r8, r3
 804bb20:	688a      	ldr	r2, [r1, #8]
 804bb22:	690b      	ldr	r3, [r1, #16]
 804bb24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 804bb28:	4293      	cmp	r3, r2
 804bb2a:	bfb8      	it	lt
 804bb2c:	4613      	movlt	r3, r2
 804bb2e:	6033      	str	r3, [r6, #0]
 804bb30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 804bb34:	4607      	mov	r7, r0
 804bb36:	460c      	mov	r4, r1
 804bb38:	b10a      	cbz	r2, 804bb3e <_printf_common+0x26>
 804bb3a:	3301      	adds	r3, #1
 804bb3c:	6033      	str	r3, [r6, #0]
 804bb3e:	6823      	ldr	r3, [r4, #0]
 804bb40:	0699      	lsls	r1, r3, #26
 804bb42:	bf42      	ittt	mi
 804bb44:	6833      	ldrmi	r3, [r6, #0]
 804bb46:	3302      	addmi	r3, #2
 804bb48:	6033      	strmi	r3, [r6, #0]
 804bb4a:	6825      	ldr	r5, [r4, #0]
 804bb4c:	f015 0506 	ands.w	r5, r5, #6
 804bb50:	d106      	bne.n	804bb60 <_printf_common+0x48>
 804bb52:	f104 0a19 	add.w	sl, r4, #25
 804bb56:	68e3      	ldr	r3, [r4, #12]
 804bb58:	6832      	ldr	r2, [r6, #0]
 804bb5a:	1a9b      	subs	r3, r3, r2
 804bb5c:	42ab      	cmp	r3, r5
 804bb5e:	dc26      	bgt.n	804bbae <_printf_common+0x96>
 804bb60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 804bb64:	6822      	ldr	r2, [r4, #0]
 804bb66:	3b00      	subs	r3, #0
 804bb68:	bf18      	it	ne
 804bb6a:	2301      	movne	r3, #1
 804bb6c:	0692      	lsls	r2, r2, #26
 804bb6e:	d42b      	bmi.n	804bbc8 <_printf_common+0xb0>
 804bb70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 804bb74:	4641      	mov	r1, r8
 804bb76:	4638      	mov	r0, r7
 804bb78:	47c8      	blx	r9
 804bb7a:	3001      	adds	r0, #1
 804bb7c:	d01e      	beq.n	804bbbc <_printf_common+0xa4>
 804bb7e:	6823      	ldr	r3, [r4, #0]
 804bb80:	6922      	ldr	r2, [r4, #16]
 804bb82:	f003 0306 	and.w	r3, r3, #6
 804bb86:	2b04      	cmp	r3, #4
 804bb88:	bf02      	ittt	eq
 804bb8a:	68e5      	ldreq	r5, [r4, #12]
 804bb8c:	6833      	ldreq	r3, [r6, #0]
 804bb8e:	1aed      	subeq	r5, r5, r3
 804bb90:	68a3      	ldr	r3, [r4, #8]
 804bb92:	bf0c      	ite	eq
 804bb94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804bb98:	2500      	movne	r5, #0
 804bb9a:	4293      	cmp	r3, r2
 804bb9c:	bfc4      	itt	gt
 804bb9e:	1a9b      	subgt	r3, r3, r2
 804bba0:	18ed      	addgt	r5, r5, r3
 804bba2:	2600      	movs	r6, #0
 804bba4:	341a      	adds	r4, #26
 804bba6:	42b5      	cmp	r5, r6
 804bba8:	d11a      	bne.n	804bbe0 <_printf_common+0xc8>
 804bbaa:	2000      	movs	r0, #0
 804bbac:	e008      	b.n	804bbc0 <_printf_common+0xa8>
 804bbae:	2301      	movs	r3, #1
 804bbb0:	4652      	mov	r2, sl
 804bbb2:	4641      	mov	r1, r8
 804bbb4:	4638      	mov	r0, r7
 804bbb6:	47c8      	blx	r9
 804bbb8:	3001      	adds	r0, #1
 804bbba:	d103      	bne.n	804bbc4 <_printf_common+0xac>
 804bbbc:	f04f 30ff 	mov.w	r0, #4294967295
 804bbc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804bbc4:	3501      	adds	r5, #1
 804bbc6:	e7c6      	b.n	804bb56 <_printf_common+0x3e>
 804bbc8:	18e1      	adds	r1, r4, r3
 804bbca:	1c5a      	adds	r2, r3, #1
 804bbcc:	2030      	movs	r0, #48	@ 0x30
 804bbce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 804bbd2:	4422      	add	r2, r4
 804bbd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 804bbd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 804bbdc:	3302      	adds	r3, #2
 804bbde:	e7c7      	b.n	804bb70 <_printf_common+0x58>
 804bbe0:	2301      	movs	r3, #1
 804bbe2:	4622      	mov	r2, r4
 804bbe4:	4641      	mov	r1, r8
 804bbe6:	4638      	mov	r0, r7
 804bbe8:	47c8      	blx	r9
 804bbea:	3001      	adds	r0, #1
 804bbec:	d0e6      	beq.n	804bbbc <_printf_common+0xa4>
 804bbee:	3601      	adds	r6, #1
 804bbf0:	e7d9      	b.n	804bba6 <_printf_common+0x8e>
	...

0804bbf4 <_printf_i>:
 804bbf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 804bbf8:	7e0f      	ldrb	r7, [r1, #24]
 804bbfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 804bbfc:	2f78      	cmp	r7, #120	@ 0x78
 804bbfe:	4691      	mov	r9, r2
 804bc00:	4680      	mov	r8, r0
 804bc02:	460c      	mov	r4, r1
 804bc04:	469a      	mov	sl, r3
 804bc06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 804bc0a:	d807      	bhi.n	804bc1c <_printf_i+0x28>
 804bc0c:	2f62      	cmp	r7, #98	@ 0x62
 804bc0e:	d80a      	bhi.n	804bc26 <_printf_i+0x32>
 804bc10:	2f00      	cmp	r7, #0
 804bc12:	f000 80d1 	beq.w	804bdb8 <_printf_i+0x1c4>
 804bc16:	2f58      	cmp	r7, #88	@ 0x58
 804bc18:	f000 80b8 	beq.w	804bd8c <_printf_i+0x198>
 804bc1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 804bc20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 804bc24:	e03a      	b.n	804bc9c <_printf_i+0xa8>
 804bc26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 804bc2a:	2b15      	cmp	r3, #21
 804bc2c:	d8f6      	bhi.n	804bc1c <_printf_i+0x28>
 804bc2e:	a101      	add	r1, pc, #4	@ (adr r1, 804bc34 <_printf_i+0x40>)
 804bc30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 804bc34:	0804bc8d 	.word	0x0804bc8d
 804bc38:	0804bca1 	.word	0x0804bca1
 804bc3c:	0804bc1d 	.word	0x0804bc1d
 804bc40:	0804bc1d 	.word	0x0804bc1d
 804bc44:	0804bc1d 	.word	0x0804bc1d
 804bc48:	0804bc1d 	.word	0x0804bc1d
 804bc4c:	0804bca1 	.word	0x0804bca1
 804bc50:	0804bc1d 	.word	0x0804bc1d
 804bc54:	0804bc1d 	.word	0x0804bc1d
 804bc58:	0804bc1d 	.word	0x0804bc1d
 804bc5c:	0804bc1d 	.word	0x0804bc1d
 804bc60:	0804bd9f 	.word	0x0804bd9f
 804bc64:	0804bccb 	.word	0x0804bccb
 804bc68:	0804bd59 	.word	0x0804bd59
 804bc6c:	0804bc1d 	.word	0x0804bc1d
 804bc70:	0804bc1d 	.word	0x0804bc1d
 804bc74:	0804bdc1 	.word	0x0804bdc1
 804bc78:	0804bc1d 	.word	0x0804bc1d
 804bc7c:	0804bccb 	.word	0x0804bccb
 804bc80:	0804bc1d 	.word	0x0804bc1d
 804bc84:	0804bc1d 	.word	0x0804bc1d
 804bc88:	0804bd61 	.word	0x0804bd61
 804bc8c:	6833      	ldr	r3, [r6, #0]
 804bc8e:	1d1a      	adds	r2, r3, #4
 804bc90:	681b      	ldr	r3, [r3, #0]
 804bc92:	6032      	str	r2, [r6, #0]
 804bc94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 804bc98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 804bc9c:	2301      	movs	r3, #1
 804bc9e:	e09c      	b.n	804bdda <_printf_i+0x1e6>
 804bca0:	6833      	ldr	r3, [r6, #0]
 804bca2:	6820      	ldr	r0, [r4, #0]
 804bca4:	1d19      	adds	r1, r3, #4
 804bca6:	6031      	str	r1, [r6, #0]
 804bca8:	0606      	lsls	r6, r0, #24
 804bcaa:	d501      	bpl.n	804bcb0 <_printf_i+0xbc>
 804bcac:	681d      	ldr	r5, [r3, #0]
 804bcae:	e003      	b.n	804bcb8 <_printf_i+0xc4>
 804bcb0:	0645      	lsls	r5, r0, #25
 804bcb2:	d5fb      	bpl.n	804bcac <_printf_i+0xb8>
 804bcb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 804bcb8:	2d00      	cmp	r5, #0
 804bcba:	da03      	bge.n	804bcc4 <_printf_i+0xd0>
 804bcbc:	232d      	movs	r3, #45	@ 0x2d
 804bcbe:	426d      	negs	r5, r5
 804bcc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 804bcc4:	4858      	ldr	r0, [pc, #352]	@ (804be28 <_printf_i+0x234>)
 804bcc6:	230a      	movs	r3, #10
 804bcc8:	e011      	b.n	804bcee <_printf_i+0xfa>
 804bcca:	6821      	ldr	r1, [r4, #0]
 804bccc:	6833      	ldr	r3, [r6, #0]
 804bcce:	0608      	lsls	r0, r1, #24
 804bcd0:	f853 5b04 	ldr.w	r5, [r3], #4
 804bcd4:	d402      	bmi.n	804bcdc <_printf_i+0xe8>
 804bcd6:	0649      	lsls	r1, r1, #25
 804bcd8:	bf48      	it	mi
 804bcda:	b2ad      	uxthmi	r5, r5
 804bcdc:	2f6f      	cmp	r7, #111	@ 0x6f
 804bcde:	4852      	ldr	r0, [pc, #328]	@ (804be28 <_printf_i+0x234>)
 804bce0:	6033      	str	r3, [r6, #0]
 804bce2:	bf14      	ite	ne
 804bce4:	230a      	movne	r3, #10
 804bce6:	2308      	moveq	r3, #8
 804bce8:	2100      	movs	r1, #0
 804bcea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 804bcee:	6866      	ldr	r6, [r4, #4]
 804bcf0:	60a6      	str	r6, [r4, #8]
 804bcf2:	2e00      	cmp	r6, #0
 804bcf4:	db05      	blt.n	804bd02 <_printf_i+0x10e>
 804bcf6:	6821      	ldr	r1, [r4, #0]
 804bcf8:	432e      	orrs	r6, r5
 804bcfa:	f021 0104 	bic.w	r1, r1, #4
 804bcfe:	6021      	str	r1, [r4, #0]
 804bd00:	d04b      	beq.n	804bd9a <_printf_i+0x1a6>
 804bd02:	4616      	mov	r6, r2
 804bd04:	fbb5 f1f3 	udiv	r1, r5, r3
 804bd08:	fb03 5711 	mls	r7, r3, r1, r5
 804bd0c:	5dc7      	ldrb	r7, [r0, r7]
 804bd0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 804bd12:	462f      	mov	r7, r5
 804bd14:	42bb      	cmp	r3, r7
 804bd16:	460d      	mov	r5, r1
 804bd18:	d9f4      	bls.n	804bd04 <_printf_i+0x110>
 804bd1a:	2b08      	cmp	r3, #8
 804bd1c:	d10b      	bne.n	804bd36 <_printf_i+0x142>
 804bd1e:	6823      	ldr	r3, [r4, #0]
 804bd20:	07df      	lsls	r7, r3, #31
 804bd22:	d508      	bpl.n	804bd36 <_printf_i+0x142>
 804bd24:	6923      	ldr	r3, [r4, #16]
 804bd26:	6861      	ldr	r1, [r4, #4]
 804bd28:	4299      	cmp	r1, r3
 804bd2a:	bfde      	ittt	le
 804bd2c:	2330      	movle	r3, #48	@ 0x30
 804bd2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 804bd32:	f106 36ff 	addle.w	r6, r6, #4294967295
 804bd36:	1b92      	subs	r2, r2, r6
 804bd38:	6122      	str	r2, [r4, #16]
 804bd3a:	f8cd a000 	str.w	sl, [sp]
 804bd3e:	464b      	mov	r3, r9
 804bd40:	aa03      	add	r2, sp, #12
 804bd42:	4621      	mov	r1, r4
 804bd44:	4640      	mov	r0, r8
 804bd46:	f7ff fee7 	bl	804bb18 <_printf_common>
 804bd4a:	3001      	adds	r0, #1
 804bd4c:	d14a      	bne.n	804bde4 <_printf_i+0x1f0>
 804bd4e:	f04f 30ff 	mov.w	r0, #4294967295
 804bd52:	b004      	add	sp, #16
 804bd54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804bd58:	6823      	ldr	r3, [r4, #0]
 804bd5a:	f043 0320 	orr.w	r3, r3, #32
 804bd5e:	6023      	str	r3, [r4, #0]
 804bd60:	4832      	ldr	r0, [pc, #200]	@ (804be2c <_printf_i+0x238>)
 804bd62:	2778      	movs	r7, #120	@ 0x78
 804bd64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 804bd68:	6823      	ldr	r3, [r4, #0]
 804bd6a:	6831      	ldr	r1, [r6, #0]
 804bd6c:	061f      	lsls	r7, r3, #24
 804bd6e:	f851 5b04 	ldr.w	r5, [r1], #4
 804bd72:	d402      	bmi.n	804bd7a <_printf_i+0x186>
 804bd74:	065f      	lsls	r7, r3, #25
 804bd76:	bf48      	it	mi
 804bd78:	b2ad      	uxthmi	r5, r5
 804bd7a:	6031      	str	r1, [r6, #0]
 804bd7c:	07d9      	lsls	r1, r3, #31
 804bd7e:	bf44      	itt	mi
 804bd80:	f043 0320 	orrmi.w	r3, r3, #32
 804bd84:	6023      	strmi	r3, [r4, #0]
 804bd86:	b11d      	cbz	r5, 804bd90 <_printf_i+0x19c>
 804bd88:	2310      	movs	r3, #16
 804bd8a:	e7ad      	b.n	804bce8 <_printf_i+0xf4>
 804bd8c:	4826      	ldr	r0, [pc, #152]	@ (804be28 <_printf_i+0x234>)
 804bd8e:	e7e9      	b.n	804bd64 <_printf_i+0x170>
 804bd90:	6823      	ldr	r3, [r4, #0]
 804bd92:	f023 0320 	bic.w	r3, r3, #32
 804bd96:	6023      	str	r3, [r4, #0]
 804bd98:	e7f6      	b.n	804bd88 <_printf_i+0x194>
 804bd9a:	4616      	mov	r6, r2
 804bd9c:	e7bd      	b.n	804bd1a <_printf_i+0x126>
 804bd9e:	6833      	ldr	r3, [r6, #0]
 804bda0:	6825      	ldr	r5, [r4, #0]
 804bda2:	6961      	ldr	r1, [r4, #20]
 804bda4:	1d18      	adds	r0, r3, #4
 804bda6:	6030      	str	r0, [r6, #0]
 804bda8:	062e      	lsls	r6, r5, #24
 804bdaa:	681b      	ldr	r3, [r3, #0]
 804bdac:	d501      	bpl.n	804bdb2 <_printf_i+0x1be>
 804bdae:	6019      	str	r1, [r3, #0]
 804bdb0:	e002      	b.n	804bdb8 <_printf_i+0x1c4>
 804bdb2:	0668      	lsls	r0, r5, #25
 804bdb4:	d5fb      	bpl.n	804bdae <_printf_i+0x1ba>
 804bdb6:	8019      	strh	r1, [r3, #0]
 804bdb8:	2300      	movs	r3, #0
 804bdba:	6123      	str	r3, [r4, #16]
 804bdbc:	4616      	mov	r6, r2
 804bdbe:	e7bc      	b.n	804bd3a <_printf_i+0x146>
 804bdc0:	6833      	ldr	r3, [r6, #0]
 804bdc2:	1d1a      	adds	r2, r3, #4
 804bdc4:	6032      	str	r2, [r6, #0]
 804bdc6:	681e      	ldr	r6, [r3, #0]
 804bdc8:	6862      	ldr	r2, [r4, #4]
 804bdca:	2100      	movs	r1, #0
 804bdcc:	4630      	mov	r0, r6
 804bdce:	f7f4 fa87 	bl	80402e0 <memchr>
 804bdd2:	b108      	cbz	r0, 804bdd8 <_printf_i+0x1e4>
 804bdd4:	1b80      	subs	r0, r0, r6
 804bdd6:	6060      	str	r0, [r4, #4]
 804bdd8:	6863      	ldr	r3, [r4, #4]
 804bdda:	6123      	str	r3, [r4, #16]
 804bddc:	2300      	movs	r3, #0
 804bdde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 804bde2:	e7aa      	b.n	804bd3a <_printf_i+0x146>
 804bde4:	6923      	ldr	r3, [r4, #16]
 804bde6:	4632      	mov	r2, r6
 804bde8:	4649      	mov	r1, r9
 804bdea:	4640      	mov	r0, r8
 804bdec:	47d0      	blx	sl
 804bdee:	3001      	adds	r0, #1
 804bdf0:	d0ad      	beq.n	804bd4e <_printf_i+0x15a>
 804bdf2:	6823      	ldr	r3, [r4, #0]
 804bdf4:	079b      	lsls	r3, r3, #30
 804bdf6:	d413      	bmi.n	804be20 <_printf_i+0x22c>
 804bdf8:	68e0      	ldr	r0, [r4, #12]
 804bdfa:	9b03      	ldr	r3, [sp, #12]
 804bdfc:	4298      	cmp	r0, r3
 804bdfe:	bfb8      	it	lt
 804be00:	4618      	movlt	r0, r3
 804be02:	e7a6      	b.n	804bd52 <_printf_i+0x15e>
 804be04:	2301      	movs	r3, #1
 804be06:	4632      	mov	r2, r6
 804be08:	4649      	mov	r1, r9
 804be0a:	4640      	mov	r0, r8
 804be0c:	47d0      	blx	sl
 804be0e:	3001      	adds	r0, #1
 804be10:	d09d      	beq.n	804bd4e <_printf_i+0x15a>
 804be12:	3501      	adds	r5, #1
 804be14:	68e3      	ldr	r3, [r4, #12]
 804be16:	9903      	ldr	r1, [sp, #12]
 804be18:	1a5b      	subs	r3, r3, r1
 804be1a:	42ab      	cmp	r3, r5
 804be1c:	dcf2      	bgt.n	804be04 <_printf_i+0x210>
 804be1e:	e7eb      	b.n	804bdf8 <_printf_i+0x204>
 804be20:	2500      	movs	r5, #0
 804be22:	f104 0619 	add.w	r6, r4, #25
 804be26:	e7f5      	b.n	804be14 <_printf_i+0x220>
 804be28:	0804c321 	.word	0x0804c321
 804be2c:	0804c332 	.word	0x0804c332

0804be30 <__sflush_r>:
 804be30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 804be34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804be38:	0716      	lsls	r6, r2, #28
 804be3a:	4605      	mov	r5, r0
 804be3c:	460c      	mov	r4, r1
 804be3e:	d454      	bmi.n	804beea <__sflush_r+0xba>
 804be40:	684b      	ldr	r3, [r1, #4]
 804be42:	2b00      	cmp	r3, #0
 804be44:	dc02      	bgt.n	804be4c <__sflush_r+0x1c>
 804be46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 804be48:	2b00      	cmp	r3, #0
 804be4a:	dd48      	ble.n	804bede <__sflush_r+0xae>
 804be4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 804be4e:	2e00      	cmp	r6, #0
 804be50:	d045      	beq.n	804bede <__sflush_r+0xae>
 804be52:	2300      	movs	r3, #0
 804be54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 804be58:	682f      	ldr	r7, [r5, #0]
 804be5a:	6a21      	ldr	r1, [r4, #32]
 804be5c:	602b      	str	r3, [r5, #0]
 804be5e:	d030      	beq.n	804bec2 <__sflush_r+0x92>
 804be60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 804be62:	89a3      	ldrh	r3, [r4, #12]
 804be64:	0759      	lsls	r1, r3, #29
 804be66:	d505      	bpl.n	804be74 <__sflush_r+0x44>
 804be68:	6863      	ldr	r3, [r4, #4]
 804be6a:	1ad2      	subs	r2, r2, r3
 804be6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 804be6e:	b10b      	cbz	r3, 804be74 <__sflush_r+0x44>
 804be70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 804be72:	1ad2      	subs	r2, r2, r3
 804be74:	2300      	movs	r3, #0
 804be76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 804be78:	6a21      	ldr	r1, [r4, #32]
 804be7a:	4628      	mov	r0, r5
 804be7c:	47b0      	blx	r6
 804be7e:	1c43      	adds	r3, r0, #1
 804be80:	89a3      	ldrh	r3, [r4, #12]
 804be82:	d106      	bne.n	804be92 <__sflush_r+0x62>
 804be84:	6829      	ldr	r1, [r5, #0]
 804be86:	291d      	cmp	r1, #29
 804be88:	d82b      	bhi.n	804bee2 <__sflush_r+0xb2>
 804be8a:	4a2a      	ldr	r2, [pc, #168]	@ (804bf34 <__sflush_r+0x104>)
 804be8c:	40ca      	lsrs	r2, r1
 804be8e:	07d6      	lsls	r6, r2, #31
 804be90:	d527      	bpl.n	804bee2 <__sflush_r+0xb2>
 804be92:	2200      	movs	r2, #0
 804be94:	6062      	str	r2, [r4, #4]
 804be96:	04d9      	lsls	r1, r3, #19
 804be98:	6922      	ldr	r2, [r4, #16]
 804be9a:	6022      	str	r2, [r4, #0]
 804be9c:	d504      	bpl.n	804bea8 <__sflush_r+0x78>
 804be9e:	1c42      	adds	r2, r0, #1
 804bea0:	d101      	bne.n	804bea6 <__sflush_r+0x76>
 804bea2:	682b      	ldr	r3, [r5, #0]
 804bea4:	b903      	cbnz	r3, 804bea8 <__sflush_r+0x78>
 804bea6:	6560      	str	r0, [r4, #84]	@ 0x54
 804bea8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 804beaa:	602f      	str	r7, [r5, #0]
 804beac:	b1b9      	cbz	r1, 804bede <__sflush_r+0xae>
 804beae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 804beb2:	4299      	cmp	r1, r3
 804beb4:	d002      	beq.n	804bebc <__sflush_r+0x8c>
 804beb6:	4628      	mov	r0, r5
 804beb8:	f7ff fbf4 	bl	804b6a4 <_free_r>
 804bebc:	2300      	movs	r3, #0
 804bebe:	6363      	str	r3, [r4, #52]	@ 0x34
 804bec0:	e00d      	b.n	804bede <__sflush_r+0xae>
 804bec2:	2301      	movs	r3, #1
 804bec4:	4628      	mov	r0, r5
 804bec6:	47b0      	blx	r6
 804bec8:	4602      	mov	r2, r0
 804beca:	1c50      	adds	r0, r2, #1
 804becc:	d1c9      	bne.n	804be62 <__sflush_r+0x32>
 804bece:	682b      	ldr	r3, [r5, #0]
 804bed0:	2b00      	cmp	r3, #0
 804bed2:	d0c6      	beq.n	804be62 <__sflush_r+0x32>
 804bed4:	2b1d      	cmp	r3, #29
 804bed6:	d001      	beq.n	804bedc <__sflush_r+0xac>
 804bed8:	2b16      	cmp	r3, #22
 804beda:	d11e      	bne.n	804bf1a <__sflush_r+0xea>
 804bedc:	602f      	str	r7, [r5, #0]
 804bede:	2000      	movs	r0, #0
 804bee0:	e022      	b.n	804bf28 <__sflush_r+0xf8>
 804bee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804bee6:	b21b      	sxth	r3, r3
 804bee8:	e01b      	b.n	804bf22 <__sflush_r+0xf2>
 804beea:	690f      	ldr	r7, [r1, #16]
 804beec:	2f00      	cmp	r7, #0
 804beee:	d0f6      	beq.n	804bede <__sflush_r+0xae>
 804bef0:	0793      	lsls	r3, r2, #30
 804bef2:	680e      	ldr	r6, [r1, #0]
 804bef4:	bf08      	it	eq
 804bef6:	694b      	ldreq	r3, [r1, #20]
 804bef8:	600f      	str	r7, [r1, #0]
 804befa:	bf18      	it	ne
 804befc:	2300      	movne	r3, #0
 804befe:	eba6 0807 	sub.w	r8, r6, r7
 804bf02:	608b      	str	r3, [r1, #8]
 804bf04:	f1b8 0f00 	cmp.w	r8, #0
 804bf08:	dde9      	ble.n	804bede <__sflush_r+0xae>
 804bf0a:	6a21      	ldr	r1, [r4, #32]
 804bf0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 804bf0e:	4643      	mov	r3, r8
 804bf10:	463a      	mov	r2, r7
 804bf12:	4628      	mov	r0, r5
 804bf14:	47b0      	blx	r6
 804bf16:	2800      	cmp	r0, #0
 804bf18:	dc08      	bgt.n	804bf2c <__sflush_r+0xfc>
 804bf1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804bf1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804bf22:	81a3      	strh	r3, [r4, #12]
 804bf24:	f04f 30ff 	mov.w	r0, #4294967295
 804bf28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804bf2c:	4407      	add	r7, r0
 804bf2e:	eba8 0800 	sub.w	r8, r8, r0
 804bf32:	e7e7      	b.n	804bf04 <__sflush_r+0xd4>
 804bf34:	20400001 	.word	0x20400001

0804bf38 <_fflush_r>:
 804bf38:	b538      	push	{r3, r4, r5, lr}
 804bf3a:	690b      	ldr	r3, [r1, #16]
 804bf3c:	4605      	mov	r5, r0
 804bf3e:	460c      	mov	r4, r1
 804bf40:	b913      	cbnz	r3, 804bf48 <_fflush_r+0x10>
 804bf42:	2500      	movs	r5, #0
 804bf44:	4628      	mov	r0, r5
 804bf46:	bd38      	pop	{r3, r4, r5, pc}
 804bf48:	b118      	cbz	r0, 804bf52 <_fflush_r+0x1a>
 804bf4a:	6a03      	ldr	r3, [r0, #32]
 804bf4c:	b90b      	cbnz	r3, 804bf52 <_fflush_r+0x1a>
 804bf4e:	f7ff faa1 	bl	804b494 <__sinit>
 804bf52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804bf56:	2b00      	cmp	r3, #0
 804bf58:	d0f3      	beq.n	804bf42 <_fflush_r+0xa>
 804bf5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 804bf5c:	07d0      	lsls	r0, r2, #31
 804bf5e:	d404      	bmi.n	804bf6a <_fflush_r+0x32>
 804bf60:	0599      	lsls	r1, r3, #22
 804bf62:	d402      	bmi.n	804bf6a <_fflush_r+0x32>
 804bf64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 804bf66:	f7ff fb9a 	bl	804b69e <__retarget_lock_acquire_recursive>
 804bf6a:	4628      	mov	r0, r5
 804bf6c:	4621      	mov	r1, r4
 804bf6e:	f7ff ff5f 	bl	804be30 <__sflush_r>
 804bf72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 804bf74:	07da      	lsls	r2, r3, #31
 804bf76:	4605      	mov	r5, r0
 804bf78:	d4e4      	bmi.n	804bf44 <_fflush_r+0xc>
 804bf7a:	89a3      	ldrh	r3, [r4, #12]
 804bf7c:	059b      	lsls	r3, r3, #22
 804bf7e:	d4e1      	bmi.n	804bf44 <_fflush_r+0xc>
 804bf80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 804bf82:	f7ff fb8d 	bl	804b6a0 <__retarget_lock_release_recursive>
 804bf86:	e7dd      	b.n	804bf44 <_fflush_r+0xc>

0804bf88 <__swbuf_r>:
 804bf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804bf8a:	460e      	mov	r6, r1
 804bf8c:	4614      	mov	r4, r2
 804bf8e:	4605      	mov	r5, r0
 804bf90:	b118      	cbz	r0, 804bf9a <__swbuf_r+0x12>
 804bf92:	6a03      	ldr	r3, [r0, #32]
 804bf94:	b90b      	cbnz	r3, 804bf9a <__swbuf_r+0x12>
 804bf96:	f7ff fa7d 	bl	804b494 <__sinit>
 804bf9a:	69a3      	ldr	r3, [r4, #24]
 804bf9c:	60a3      	str	r3, [r4, #8]
 804bf9e:	89a3      	ldrh	r3, [r4, #12]
 804bfa0:	071a      	lsls	r2, r3, #28
 804bfa2:	d501      	bpl.n	804bfa8 <__swbuf_r+0x20>
 804bfa4:	6923      	ldr	r3, [r4, #16]
 804bfa6:	b943      	cbnz	r3, 804bfba <__swbuf_r+0x32>
 804bfa8:	4621      	mov	r1, r4
 804bfaa:	4628      	mov	r0, r5
 804bfac:	f000 f82a 	bl	804c004 <__swsetup_r>
 804bfb0:	b118      	cbz	r0, 804bfba <__swbuf_r+0x32>
 804bfb2:	f04f 37ff 	mov.w	r7, #4294967295
 804bfb6:	4638      	mov	r0, r7
 804bfb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804bfba:	6823      	ldr	r3, [r4, #0]
 804bfbc:	6922      	ldr	r2, [r4, #16]
 804bfbe:	1a98      	subs	r0, r3, r2
 804bfc0:	6963      	ldr	r3, [r4, #20]
 804bfc2:	b2f6      	uxtb	r6, r6
 804bfc4:	4283      	cmp	r3, r0
 804bfc6:	4637      	mov	r7, r6
 804bfc8:	dc05      	bgt.n	804bfd6 <__swbuf_r+0x4e>
 804bfca:	4621      	mov	r1, r4
 804bfcc:	4628      	mov	r0, r5
 804bfce:	f7ff ffb3 	bl	804bf38 <_fflush_r>
 804bfd2:	2800      	cmp	r0, #0
 804bfd4:	d1ed      	bne.n	804bfb2 <__swbuf_r+0x2a>
 804bfd6:	68a3      	ldr	r3, [r4, #8]
 804bfd8:	3b01      	subs	r3, #1
 804bfda:	60a3      	str	r3, [r4, #8]
 804bfdc:	6823      	ldr	r3, [r4, #0]
 804bfde:	1c5a      	adds	r2, r3, #1
 804bfe0:	6022      	str	r2, [r4, #0]
 804bfe2:	701e      	strb	r6, [r3, #0]
 804bfe4:	6962      	ldr	r2, [r4, #20]
 804bfe6:	1c43      	adds	r3, r0, #1
 804bfe8:	429a      	cmp	r2, r3
 804bfea:	d004      	beq.n	804bff6 <__swbuf_r+0x6e>
 804bfec:	89a3      	ldrh	r3, [r4, #12]
 804bfee:	07db      	lsls	r3, r3, #31
 804bff0:	d5e1      	bpl.n	804bfb6 <__swbuf_r+0x2e>
 804bff2:	2e0a      	cmp	r6, #10
 804bff4:	d1df      	bne.n	804bfb6 <__swbuf_r+0x2e>
 804bff6:	4621      	mov	r1, r4
 804bff8:	4628      	mov	r0, r5
 804bffa:	f7ff ff9d 	bl	804bf38 <_fflush_r>
 804bffe:	2800      	cmp	r0, #0
 804c000:	d0d9      	beq.n	804bfb6 <__swbuf_r+0x2e>
 804c002:	e7d6      	b.n	804bfb2 <__swbuf_r+0x2a>

0804c004 <__swsetup_r>:
 804c004:	b538      	push	{r3, r4, r5, lr}
 804c006:	4b29      	ldr	r3, [pc, #164]	@ (804c0ac <__swsetup_r+0xa8>)
 804c008:	4605      	mov	r5, r0
 804c00a:	6818      	ldr	r0, [r3, #0]
 804c00c:	460c      	mov	r4, r1
 804c00e:	b118      	cbz	r0, 804c018 <__swsetup_r+0x14>
 804c010:	6a03      	ldr	r3, [r0, #32]
 804c012:	b90b      	cbnz	r3, 804c018 <__swsetup_r+0x14>
 804c014:	f7ff fa3e 	bl	804b494 <__sinit>
 804c018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804c01c:	0719      	lsls	r1, r3, #28
 804c01e:	d422      	bmi.n	804c066 <__swsetup_r+0x62>
 804c020:	06da      	lsls	r2, r3, #27
 804c022:	d407      	bmi.n	804c034 <__swsetup_r+0x30>
 804c024:	2209      	movs	r2, #9
 804c026:	602a      	str	r2, [r5, #0]
 804c028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804c02c:	81a3      	strh	r3, [r4, #12]
 804c02e:	f04f 30ff 	mov.w	r0, #4294967295
 804c032:	e033      	b.n	804c09c <__swsetup_r+0x98>
 804c034:	0758      	lsls	r0, r3, #29
 804c036:	d512      	bpl.n	804c05e <__swsetup_r+0x5a>
 804c038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 804c03a:	b141      	cbz	r1, 804c04e <__swsetup_r+0x4a>
 804c03c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 804c040:	4299      	cmp	r1, r3
 804c042:	d002      	beq.n	804c04a <__swsetup_r+0x46>
 804c044:	4628      	mov	r0, r5
 804c046:	f7ff fb2d 	bl	804b6a4 <_free_r>
 804c04a:	2300      	movs	r3, #0
 804c04c:	6363      	str	r3, [r4, #52]	@ 0x34
 804c04e:	89a3      	ldrh	r3, [r4, #12]
 804c050:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 804c054:	81a3      	strh	r3, [r4, #12]
 804c056:	2300      	movs	r3, #0
 804c058:	6063      	str	r3, [r4, #4]
 804c05a:	6923      	ldr	r3, [r4, #16]
 804c05c:	6023      	str	r3, [r4, #0]
 804c05e:	89a3      	ldrh	r3, [r4, #12]
 804c060:	f043 0308 	orr.w	r3, r3, #8
 804c064:	81a3      	strh	r3, [r4, #12]
 804c066:	6923      	ldr	r3, [r4, #16]
 804c068:	b94b      	cbnz	r3, 804c07e <__swsetup_r+0x7a>
 804c06a:	89a3      	ldrh	r3, [r4, #12]
 804c06c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 804c070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 804c074:	d003      	beq.n	804c07e <__swsetup_r+0x7a>
 804c076:	4621      	mov	r1, r4
 804c078:	4628      	mov	r0, r5
 804c07a:	f000 f84f 	bl	804c11c <__smakebuf_r>
 804c07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804c082:	f013 0201 	ands.w	r2, r3, #1
 804c086:	d00a      	beq.n	804c09e <__swsetup_r+0x9a>
 804c088:	2200      	movs	r2, #0
 804c08a:	60a2      	str	r2, [r4, #8]
 804c08c:	6962      	ldr	r2, [r4, #20]
 804c08e:	4252      	negs	r2, r2
 804c090:	61a2      	str	r2, [r4, #24]
 804c092:	6922      	ldr	r2, [r4, #16]
 804c094:	b942      	cbnz	r2, 804c0a8 <__swsetup_r+0xa4>
 804c096:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 804c09a:	d1c5      	bne.n	804c028 <__swsetup_r+0x24>
 804c09c:	bd38      	pop	{r3, r4, r5, pc}
 804c09e:	0799      	lsls	r1, r3, #30
 804c0a0:	bf58      	it	pl
 804c0a2:	6962      	ldrpl	r2, [r4, #20]
 804c0a4:	60a2      	str	r2, [r4, #8]
 804c0a6:	e7f4      	b.n	804c092 <__swsetup_r+0x8e>
 804c0a8:	2000      	movs	r0, #0
 804c0aa:	e7f7      	b.n	804c09c <__swsetup_r+0x98>
 804c0ac:	240000f0 	.word	0x240000f0

0804c0b0 <_sbrk_r>:
 804c0b0:	b538      	push	{r3, r4, r5, lr}
 804c0b2:	4d06      	ldr	r5, [pc, #24]	@ (804c0cc <_sbrk_r+0x1c>)
 804c0b4:	2300      	movs	r3, #0
 804c0b6:	4604      	mov	r4, r0
 804c0b8:	4608      	mov	r0, r1
 804c0ba:	602b      	str	r3, [r5, #0]
 804c0bc:	f7f4 ff24 	bl	8040f08 <_sbrk>
 804c0c0:	1c43      	adds	r3, r0, #1
 804c0c2:	d102      	bne.n	804c0ca <_sbrk_r+0x1a>
 804c0c4:	682b      	ldr	r3, [r5, #0]
 804c0c6:	b103      	cbz	r3, 804c0ca <_sbrk_r+0x1a>
 804c0c8:	6023      	str	r3, [r4, #0]
 804c0ca:	bd38      	pop	{r3, r4, r5, pc}
 804c0cc:	24001240 	.word	0x24001240

0804c0d0 <__swhatbuf_r>:
 804c0d0:	b570      	push	{r4, r5, r6, lr}
 804c0d2:	460c      	mov	r4, r1
 804c0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804c0d8:	2900      	cmp	r1, #0
 804c0da:	b096      	sub	sp, #88	@ 0x58
 804c0dc:	4615      	mov	r5, r2
 804c0de:	461e      	mov	r6, r3
 804c0e0:	da0d      	bge.n	804c0fe <__swhatbuf_r+0x2e>
 804c0e2:	89a3      	ldrh	r3, [r4, #12]
 804c0e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 804c0e8:	f04f 0100 	mov.w	r1, #0
 804c0ec:	bf14      	ite	ne
 804c0ee:	2340      	movne	r3, #64	@ 0x40
 804c0f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 804c0f4:	2000      	movs	r0, #0
 804c0f6:	6031      	str	r1, [r6, #0]
 804c0f8:	602b      	str	r3, [r5, #0]
 804c0fa:	b016      	add	sp, #88	@ 0x58
 804c0fc:	bd70      	pop	{r4, r5, r6, pc}
 804c0fe:	466a      	mov	r2, sp
 804c100:	f000 f848 	bl	804c194 <_fstat_r>
 804c104:	2800      	cmp	r0, #0
 804c106:	dbec      	blt.n	804c0e2 <__swhatbuf_r+0x12>
 804c108:	9901      	ldr	r1, [sp, #4]
 804c10a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 804c10e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 804c112:	4259      	negs	r1, r3
 804c114:	4159      	adcs	r1, r3
 804c116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 804c11a:	e7eb      	b.n	804c0f4 <__swhatbuf_r+0x24>

0804c11c <__smakebuf_r>:
 804c11c:	898b      	ldrh	r3, [r1, #12]
 804c11e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804c120:	079d      	lsls	r5, r3, #30
 804c122:	4606      	mov	r6, r0
 804c124:	460c      	mov	r4, r1
 804c126:	d507      	bpl.n	804c138 <__smakebuf_r+0x1c>
 804c128:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 804c12c:	6023      	str	r3, [r4, #0]
 804c12e:	6123      	str	r3, [r4, #16]
 804c130:	2301      	movs	r3, #1
 804c132:	6163      	str	r3, [r4, #20]
 804c134:	b003      	add	sp, #12
 804c136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804c138:	ab01      	add	r3, sp, #4
 804c13a:	466a      	mov	r2, sp
 804c13c:	f7ff ffc8 	bl	804c0d0 <__swhatbuf_r>
 804c140:	9f00      	ldr	r7, [sp, #0]
 804c142:	4605      	mov	r5, r0
 804c144:	4639      	mov	r1, r7
 804c146:	4630      	mov	r0, r6
 804c148:	f7ff fb18 	bl	804b77c <_malloc_r>
 804c14c:	b948      	cbnz	r0, 804c162 <__smakebuf_r+0x46>
 804c14e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804c152:	059a      	lsls	r2, r3, #22
 804c154:	d4ee      	bmi.n	804c134 <__smakebuf_r+0x18>
 804c156:	f023 0303 	bic.w	r3, r3, #3
 804c15a:	f043 0302 	orr.w	r3, r3, #2
 804c15e:	81a3      	strh	r3, [r4, #12]
 804c160:	e7e2      	b.n	804c128 <__smakebuf_r+0xc>
 804c162:	89a3      	ldrh	r3, [r4, #12]
 804c164:	6020      	str	r0, [r4, #0]
 804c166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 804c16a:	81a3      	strh	r3, [r4, #12]
 804c16c:	9b01      	ldr	r3, [sp, #4]
 804c16e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 804c172:	b15b      	cbz	r3, 804c18c <__smakebuf_r+0x70>
 804c174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804c178:	4630      	mov	r0, r6
 804c17a:	f000 f81d 	bl	804c1b8 <_isatty_r>
 804c17e:	b128      	cbz	r0, 804c18c <__smakebuf_r+0x70>
 804c180:	89a3      	ldrh	r3, [r4, #12]
 804c182:	f023 0303 	bic.w	r3, r3, #3
 804c186:	f043 0301 	orr.w	r3, r3, #1
 804c18a:	81a3      	strh	r3, [r4, #12]
 804c18c:	89a3      	ldrh	r3, [r4, #12]
 804c18e:	431d      	orrs	r5, r3
 804c190:	81a5      	strh	r5, [r4, #12]
 804c192:	e7cf      	b.n	804c134 <__smakebuf_r+0x18>

0804c194 <_fstat_r>:
 804c194:	b538      	push	{r3, r4, r5, lr}
 804c196:	4d07      	ldr	r5, [pc, #28]	@ (804c1b4 <_fstat_r+0x20>)
 804c198:	2300      	movs	r3, #0
 804c19a:	4604      	mov	r4, r0
 804c19c:	4608      	mov	r0, r1
 804c19e:	4611      	mov	r1, r2
 804c1a0:	602b      	str	r3, [r5, #0]
 804c1a2:	f7f4 fe88 	bl	8040eb6 <_fstat>
 804c1a6:	1c43      	adds	r3, r0, #1
 804c1a8:	d102      	bne.n	804c1b0 <_fstat_r+0x1c>
 804c1aa:	682b      	ldr	r3, [r5, #0]
 804c1ac:	b103      	cbz	r3, 804c1b0 <_fstat_r+0x1c>
 804c1ae:	6023      	str	r3, [r4, #0]
 804c1b0:	bd38      	pop	{r3, r4, r5, pc}
 804c1b2:	bf00      	nop
 804c1b4:	24001240 	.word	0x24001240

0804c1b8 <_isatty_r>:
 804c1b8:	b538      	push	{r3, r4, r5, lr}
 804c1ba:	4d06      	ldr	r5, [pc, #24]	@ (804c1d4 <_isatty_r+0x1c>)
 804c1bc:	2300      	movs	r3, #0
 804c1be:	4604      	mov	r4, r0
 804c1c0:	4608      	mov	r0, r1
 804c1c2:	602b      	str	r3, [r5, #0]
 804c1c4:	f7f4 fe87 	bl	8040ed6 <_isatty>
 804c1c8:	1c43      	adds	r3, r0, #1
 804c1ca:	d102      	bne.n	804c1d2 <_isatty_r+0x1a>
 804c1cc:	682b      	ldr	r3, [r5, #0]
 804c1ce:	b103      	cbz	r3, 804c1d2 <_isatty_r+0x1a>
 804c1d0:	6023      	str	r3, [r4, #0]
 804c1d2:	bd38      	pop	{r3, r4, r5, pc}
 804c1d4:	24001240 	.word	0x24001240

0804c1d8 <_init>:
 804c1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804c1da:	bf00      	nop
 804c1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804c1de:	bc08      	pop	{r3}
 804c1e0:	469e      	mov	lr, r3
 804c1e2:	4770      	bx	lr

0804c1e4 <_fini>:
 804c1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804c1e6:	bf00      	nop
 804c1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804c1ea:	bc08      	pop	{r3}
 804c1ec:	469e      	mov	lr, r3
 804c1ee:	4770      	bx	lr
