
h7_bootloader_application_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6dc  080402a0  080402a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0804b97c  0804b97c  0000c97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804ba9c  0804ba9c  0000d180  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0804ba9c  0804ba9c  0000ca9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804baa4  0804baa4  0000d180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804baa4  0804baa4  0000caa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0804baa8  0804baa8  0000caa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  24000000  0804baac  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c14  24000180  0804bc2c  0000d180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000d94  0804bc2c  0000dd94  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1d2  00000000  00000000  0000d1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003df6  00000000  00000000  00028380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0002c178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed3  00000000  00000000  0002d510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042fe2  00000000  00000000  0002e3e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bbb4  00000000  00000000  000713c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019c687  00000000  00000000  0008cf79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00229600  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e4  00000000  00000000  00229644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0022ee28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080402a0 <__do_global_dtors_aux>:
 80402a0:	b510      	push	{r4, lr}
 80402a2:	4c05      	ldr	r4, [pc, #20]	@ (80402b8 <__do_global_dtors_aux+0x18>)
 80402a4:	7823      	ldrb	r3, [r4, #0]
 80402a6:	b933      	cbnz	r3, 80402b6 <__do_global_dtors_aux+0x16>
 80402a8:	4b04      	ldr	r3, [pc, #16]	@ (80402bc <__do_global_dtors_aux+0x1c>)
 80402aa:	b113      	cbz	r3, 80402b2 <__do_global_dtors_aux+0x12>
 80402ac:	4804      	ldr	r0, [pc, #16]	@ (80402c0 <__do_global_dtors_aux+0x20>)
 80402ae:	f3af 8000 	nop.w
 80402b2:	2301      	movs	r3, #1
 80402b4:	7023      	strb	r3, [r4, #0]
 80402b6:	bd10      	pop	{r4, pc}
 80402b8:	24000180 	.word	0x24000180
 80402bc:	00000000 	.word	0x00000000
 80402c0:	0804b964 	.word	0x0804b964

080402c4 <frame_dummy>:
 80402c4:	b508      	push	{r3, lr}
 80402c6:	4b03      	ldr	r3, [pc, #12]	@ (80402d4 <frame_dummy+0x10>)
 80402c8:	b11b      	cbz	r3, 80402d2 <frame_dummy+0xe>
 80402ca:	4903      	ldr	r1, [pc, #12]	@ (80402d8 <frame_dummy+0x14>)
 80402cc:	4803      	ldr	r0, [pc, #12]	@ (80402dc <frame_dummy+0x18>)
 80402ce:	f3af 8000 	nop.w
 80402d2:	bd08      	pop	{r3, pc}
 80402d4:	00000000 	.word	0x00000000
 80402d8:	24000184 	.word	0x24000184
 80402dc:	0804b964 	.word	0x0804b964

080402e0 <memchr>:
 80402e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80402e4:	2a10      	cmp	r2, #16
 80402e6:	db2b      	blt.n	8040340 <memchr+0x60>
 80402e8:	f010 0f07 	tst.w	r0, #7
 80402ec:	d008      	beq.n	8040300 <memchr+0x20>
 80402ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80402f2:	3a01      	subs	r2, #1
 80402f4:	428b      	cmp	r3, r1
 80402f6:	d02d      	beq.n	8040354 <memchr+0x74>
 80402f8:	f010 0f07 	tst.w	r0, #7
 80402fc:	b342      	cbz	r2, 8040350 <memchr+0x70>
 80402fe:	d1f6      	bne.n	80402ee <memchr+0xe>
 8040300:	b4f0      	push	{r4, r5, r6, r7}
 8040302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804030a:	f022 0407 	bic.w	r4, r2, #7
 804030e:	f07f 0700 	mvns.w	r7, #0
 8040312:	2300      	movs	r3, #0
 8040314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040318:	3c08      	subs	r4, #8
 804031a:	ea85 0501 	eor.w	r5, r5, r1
 804031e:	ea86 0601 	eor.w	r6, r6, r1
 8040322:	fa85 f547 	uadd8	r5, r5, r7
 8040326:	faa3 f587 	sel	r5, r3, r7
 804032a:	fa86 f647 	uadd8	r6, r6, r7
 804032e:	faa5 f687 	sel	r6, r5, r7
 8040332:	b98e      	cbnz	r6, 8040358 <memchr+0x78>
 8040334:	d1ee      	bne.n	8040314 <memchr+0x34>
 8040336:	bcf0      	pop	{r4, r5, r6, r7}
 8040338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 804033c:	f002 0207 	and.w	r2, r2, #7
 8040340:	b132      	cbz	r2, 8040350 <memchr+0x70>
 8040342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040346:	3a01      	subs	r2, #1
 8040348:	ea83 0301 	eor.w	r3, r3, r1
 804034c:	b113      	cbz	r3, 8040354 <memchr+0x74>
 804034e:	d1f8      	bne.n	8040342 <memchr+0x62>
 8040350:	2000      	movs	r0, #0
 8040352:	4770      	bx	lr
 8040354:	3801      	subs	r0, #1
 8040356:	4770      	bx	lr
 8040358:	2d00      	cmp	r5, #0
 804035a:	bf06      	itte	eq
 804035c:	4635      	moveq	r5, r6
 804035e:	3803      	subeq	r0, #3
 8040360:	3807      	subne	r0, #7
 8040362:	f015 0f01 	tst.w	r5, #1
 8040366:	d107      	bne.n	8040378 <memchr+0x98>
 8040368:	3001      	adds	r0, #1
 804036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 804036e:	bf02      	ittt	eq
 8040370:	3001      	addeq	r0, #1
 8040372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8040376:	3001      	addeq	r0, #1
 8040378:	bcf0      	pop	{r4, r5, r6, r7}
 804037a:	3801      	subs	r0, #1
 804037c:	4770      	bx	lr
 804037e:	bf00      	nop

08040380 <__aeabi_uldivmod>:
 8040380:	b953      	cbnz	r3, 8040398 <__aeabi_uldivmod+0x18>
 8040382:	b94a      	cbnz	r2, 8040398 <__aeabi_uldivmod+0x18>
 8040384:	2900      	cmp	r1, #0
 8040386:	bf08      	it	eq
 8040388:	2800      	cmpeq	r0, #0
 804038a:	bf1c      	itt	ne
 804038c:	f04f 31ff 	movne.w	r1, #4294967295
 8040390:	f04f 30ff 	movne.w	r0, #4294967295
 8040394:	f000 b988 	b.w	80406a8 <__aeabi_idiv0>
 8040398:	f1ad 0c08 	sub.w	ip, sp, #8
 804039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80403a0:	f000 f806 	bl	80403b0 <__udivmoddi4>
 80403a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80403a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80403ac:	b004      	add	sp, #16
 80403ae:	4770      	bx	lr

080403b0 <__udivmoddi4>:
 80403b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80403b4:	9d08      	ldr	r5, [sp, #32]
 80403b6:	468e      	mov	lr, r1
 80403b8:	4604      	mov	r4, r0
 80403ba:	4688      	mov	r8, r1
 80403bc:	2b00      	cmp	r3, #0
 80403be:	d14a      	bne.n	8040456 <__udivmoddi4+0xa6>
 80403c0:	428a      	cmp	r2, r1
 80403c2:	4617      	mov	r7, r2
 80403c4:	d962      	bls.n	804048c <__udivmoddi4+0xdc>
 80403c6:	fab2 f682 	clz	r6, r2
 80403ca:	b14e      	cbz	r6, 80403e0 <__udivmoddi4+0x30>
 80403cc:	f1c6 0320 	rsb	r3, r6, #32
 80403d0:	fa01 f806 	lsl.w	r8, r1, r6
 80403d4:	fa20 f303 	lsr.w	r3, r0, r3
 80403d8:	40b7      	lsls	r7, r6
 80403da:	ea43 0808 	orr.w	r8, r3, r8
 80403de:	40b4      	lsls	r4, r6
 80403e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80403e4:	fa1f fc87 	uxth.w	ip, r7
 80403e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80403ec:	0c23      	lsrs	r3, r4, #16
 80403ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80403f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80403f6:	fb01 f20c 	mul.w	r2, r1, ip
 80403fa:	429a      	cmp	r2, r3
 80403fc:	d909      	bls.n	8040412 <__udivmoddi4+0x62>
 80403fe:	18fb      	adds	r3, r7, r3
 8040400:	f101 30ff 	add.w	r0, r1, #4294967295
 8040404:	f080 80ea 	bcs.w	80405dc <__udivmoddi4+0x22c>
 8040408:	429a      	cmp	r2, r3
 804040a:	f240 80e7 	bls.w	80405dc <__udivmoddi4+0x22c>
 804040e:	3902      	subs	r1, #2
 8040410:	443b      	add	r3, r7
 8040412:	1a9a      	subs	r2, r3, r2
 8040414:	b2a3      	uxth	r3, r4
 8040416:	fbb2 f0fe 	udiv	r0, r2, lr
 804041a:	fb0e 2210 	mls	r2, lr, r0, r2
 804041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8040422:	fb00 fc0c 	mul.w	ip, r0, ip
 8040426:	459c      	cmp	ip, r3
 8040428:	d909      	bls.n	804043e <__udivmoddi4+0x8e>
 804042a:	18fb      	adds	r3, r7, r3
 804042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8040430:	f080 80d6 	bcs.w	80405e0 <__udivmoddi4+0x230>
 8040434:	459c      	cmp	ip, r3
 8040436:	f240 80d3 	bls.w	80405e0 <__udivmoddi4+0x230>
 804043a:	443b      	add	r3, r7
 804043c:	3802      	subs	r0, #2
 804043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8040442:	eba3 030c 	sub.w	r3, r3, ip
 8040446:	2100      	movs	r1, #0
 8040448:	b11d      	cbz	r5, 8040452 <__udivmoddi4+0xa2>
 804044a:	40f3      	lsrs	r3, r6
 804044c:	2200      	movs	r2, #0
 804044e:	e9c5 3200 	strd	r3, r2, [r5]
 8040452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040456:	428b      	cmp	r3, r1
 8040458:	d905      	bls.n	8040466 <__udivmoddi4+0xb6>
 804045a:	b10d      	cbz	r5, 8040460 <__udivmoddi4+0xb0>
 804045c:	e9c5 0100 	strd	r0, r1, [r5]
 8040460:	2100      	movs	r1, #0
 8040462:	4608      	mov	r0, r1
 8040464:	e7f5      	b.n	8040452 <__udivmoddi4+0xa2>
 8040466:	fab3 f183 	clz	r1, r3
 804046a:	2900      	cmp	r1, #0
 804046c:	d146      	bne.n	80404fc <__udivmoddi4+0x14c>
 804046e:	4573      	cmp	r3, lr
 8040470:	d302      	bcc.n	8040478 <__udivmoddi4+0xc8>
 8040472:	4282      	cmp	r2, r0
 8040474:	f200 8105 	bhi.w	8040682 <__udivmoddi4+0x2d2>
 8040478:	1a84      	subs	r4, r0, r2
 804047a:	eb6e 0203 	sbc.w	r2, lr, r3
 804047e:	2001      	movs	r0, #1
 8040480:	4690      	mov	r8, r2
 8040482:	2d00      	cmp	r5, #0
 8040484:	d0e5      	beq.n	8040452 <__udivmoddi4+0xa2>
 8040486:	e9c5 4800 	strd	r4, r8, [r5]
 804048a:	e7e2      	b.n	8040452 <__udivmoddi4+0xa2>
 804048c:	2a00      	cmp	r2, #0
 804048e:	f000 8090 	beq.w	80405b2 <__udivmoddi4+0x202>
 8040492:	fab2 f682 	clz	r6, r2
 8040496:	2e00      	cmp	r6, #0
 8040498:	f040 80a4 	bne.w	80405e4 <__udivmoddi4+0x234>
 804049c:	1a8a      	subs	r2, r1, r2
 804049e:	0c03      	lsrs	r3, r0, #16
 80404a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80404a4:	b280      	uxth	r0, r0
 80404a6:	b2bc      	uxth	r4, r7
 80404a8:	2101      	movs	r1, #1
 80404aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80404ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80404b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80404b6:	fb04 f20c 	mul.w	r2, r4, ip
 80404ba:	429a      	cmp	r2, r3
 80404bc:	d907      	bls.n	80404ce <__udivmoddi4+0x11e>
 80404be:	18fb      	adds	r3, r7, r3
 80404c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80404c4:	d202      	bcs.n	80404cc <__udivmoddi4+0x11c>
 80404c6:	429a      	cmp	r2, r3
 80404c8:	f200 80e0 	bhi.w	804068c <__udivmoddi4+0x2dc>
 80404cc:	46c4      	mov	ip, r8
 80404ce:	1a9b      	subs	r3, r3, r2
 80404d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80404d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80404d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80404dc:	fb02 f404 	mul.w	r4, r2, r4
 80404e0:	429c      	cmp	r4, r3
 80404e2:	d907      	bls.n	80404f4 <__udivmoddi4+0x144>
 80404e4:	18fb      	adds	r3, r7, r3
 80404e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80404ea:	d202      	bcs.n	80404f2 <__udivmoddi4+0x142>
 80404ec:	429c      	cmp	r4, r3
 80404ee:	f200 80ca 	bhi.w	8040686 <__udivmoddi4+0x2d6>
 80404f2:	4602      	mov	r2, r0
 80404f4:	1b1b      	subs	r3, r3, r4
 80404f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80404fa:	e7a5      	b.n	8040448 <__udivmoddi4+0x98>
 80404fc:	f1c1 0620 	rsb	r6, r1, #32
 8040500:	408b      	lsls	r3, r1
 8040502:	fa22 f706 	lsr.w	r7, r2, r6
 8040506:	431f      	orrs	r7, r3
 8040508:	fa0e f401 	lsl.w	r4, lr, r1
 804050c:	fa20 f306 	lsr.w	r3, r0, r6
 8040510:	fa2e fe06 	lsr.w	lr, lr, r6
 8040514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8040518:	4323      	orrs	r3, r4
 804051a:	fa00 f801 	lsl.w	r8, r0, r1
 804051e:	fa1f fc87 	uxth.w	ip, r7
 8040522:	fbbe f0f9 	udiv	r0, lr, r9
 8040526:	0c1c      	lsrs	r4, r3, #16
 8040528:	fb09 ee10 	mls	lr, r9, r0, lr
 804052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8040530:	fb00 fe0c 	mul.w	lr, r0, ip
 8040534:	45a6      	cmp	lr, r4
 8040536:	fa02 f201 	lsl.w	r2, r2, r1
 804053a:	d909      	bls.n	8040550 <__udivmoddi4+0x1a0>
 804053c:	193c      	adds	r4, r7, r4
 804053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8040542:	f080 809c 	bcs.w	804067e <__udivmoddi4+0x2ce>
 8040546:	45a6      	cmp	lr, r4
 8040548:	f240 8099 	bls.w	804067e <__udivmoddi4+0x2ce>
 804054c:	3802      	subs	r0, #2
 804054e:	443c      	add	r4, r7
 8040550:	eba4 040e 	sub.w	r4, r4, lr
 8040554:	fa1f fe83 	uxth.w	lr, r3
 8040558:	fbb4 f3f9 	udiv	r3, r4, r9
 804055c:	fb09 4413 	mls	r4, r9, r3, r4
 8040560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8040564:	fb03 fc0c 	mul.w	ip, r3, ip
 8040568:	45a4      	cmp	ip, r4
 804056a:	d908      	bls.n	804057e <__udivmoddi4+0x1ce>
 804056c:	193c      	adds	r4, r7, r4
 804056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8040572:	f080 8082 	bcs.w	804067a <__udivmoddi4+0x2ca>
 8040576:	45a4      	cmp	ip, r4
 8040578:	d97f      	bls.n	804067a <__udivmoddi4+0x2ca>
 804057a:	3b02      	subs	r3, #2
 804057c:	443c      	add	r4, r7
 804057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8040582:	eba4 040c 	sub.w	r4, r4, ip
 8040586:	fba0 ec02 	umull	lr, ip, r0, r2
 804058a:	4564      	cmp	r4, ip
 804058c:	4673      	mov	r3, lr
 804058e:	46e1      	mov	r9, ip
 8040590:	d362      	bcc.n	8040658 <__udivmoddi4+0x2a8>
 8040592:	d05f      	beq.n	8040654 <__udivmoddi4+0x2a4>
 8040594:	b15d      	cbz	r5, 80405ae <__udivmoddi4+0x1fe>
 8040596:	ebb8 0203 	subs.w	r2, r8, r3
 804059a:	eb64 0409 	sbc.w	r4, r4, r9
 804059e:	fa04 f606 	lsl.w	r6, r4, r6
 80405a2:	fa22 f301 	lsr.w	r3, r2, r1
 80405a6:	431e      	orrs	r6, r3
 80405a8:	40cc      	lsrs	r4, r1
 80405aa:	e9c5 6400 	strd	r6, r4, [r5]
 80405ae:	2100      	movs	r1, #0
 80405b0:	e74f      	b.n	8040452 <__udivmoddi4+0xa2>
 80405b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80405b6:	0c01      	lsrs	r1, r0, #16
 80405b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80405bc:	b280      	uxth	r0, r0
 80405be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80405c2:	463b      	mov	r3, r7
 80405c4:	4638      	mov	r0, r7
 80405c6:	463c      	mov	r4, r7
 80405c8:	46b8      	mov	r8, r7
 80405ca:	46be      	mov	lr, r7
 80405cc:	2620      	movs	r6, #32
 80405ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80405d2:	eba2 0208 	sub.w	r2, r2, r8
 80405d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80405da:	e766      	b.n	80404aa <__udivmoddi4+0xfa>
 80405dc:	4601      	mov	r1, r0
 80405de:	e718      	b.n	8040412 <__udivmoddi4+0x62>
 80405e0:	4610      	mov	r0, r2
 80405e2:	e72c      	b.n	804043e <__udivmoddi4+0x8e>
 80405e4:	f1c6 0220 	rsb	r2, r6, #32
 80405e8:	fa2e f302 	lsr.w	r3, lr, r2
 80405ec:	40b7      	lsls	r7, r6
 80405ee:	40b1      	lsls	r1, r6
 80405f0:	fa20 f202 	lsr.w	r2, r0, r2
 80405f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80405f8:	430a      	orrs	r2, r1
 80405fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80405fe:	b2bc      	uxth	r4, r7
 8040600:	fb0e 3318 	mls	r3, lr, r8, r3
 8040604:	0c11      	lsrs	r1, r2, #16
 8040606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 804060a:	fb08 f904 	mul.w	r9, r8, r4
 804060e:	40b0      	lsls	r0, r6
 8040610:	4589      	cmp	r9, r1
 8040612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8040616:	b280      	uxth	r0, r0
 8040618:	d93e      	bls.n	8040698 <__udivmoddi4+0x2e8>
 804061a:	1879      	adds	r1, r7, r1
 804061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8040620:	d201      	bcs.n	8040626 <__udivmoddi4+0x276>
 8040622:	4589      	cmp	r9, r1
 8040624:	d81f      	bhi.n	8040666 <__udivmoddi4+0x2b6>
 8040626:	eba1 0109 	sub.w	r1, r1, r9
 804062a:	fbb1 f9fe 	udiv	r9, r1, lr
 804062e:	fb09 f804 	mul.w	r8, r9, r4
 8040632:	fb0e 1119 	mls	r1, lr, r9, r1
 8040636:	b292      	uxth	r2, r2
 8040638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 804063c:	4542      	cmp	r2, r8
 804063e:	d229      	bcs.n	8040694 <__udivmoddi4+0x2e4>
 8040640:	18ba      	adds	r2, r7, r2
 8040642:	f109 31ff 	add.w	r1, r9, #4294967295
 8040646:	d2c4      	bcs.n	80405d2 <__udivmoddi4+0x222>
 8040648:	4542      	cmp	r2, r8
 804064a:	d2c2      	bcs.n	80405d2 <__udivmoddi4+0x222>
 804064c:	f1a9 0102 	sub.w	r1, r9, #2
 8040650:	443a      	add	r2, r7
 8040652:	e7be      	b.n	80405d2 <__udivmoddi4+0x222>
 8040654:	45f0      	cmp	r8, lr
 8040656:	d29d      	bcs.n	8040594 <__udivmoddi4+0x1e4>
 8040658:	ebbe 0302 	subs.w	r3, lr, r2
 804065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8040660:	3801      	subs	r0, #1
 8040662:	46e1      	mov	r9, ip
 8040664:	e796      	b.n	8040594 <__udivmoddi4+0x1e4>
 8040666:	eba7 0909 	sub.w	r9, r7, r9
 804066a:	4449      	add	r1, r9
 804066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8040670:	fbb1 f9fe 	udiv	r9, r1, lr
 8040674:	fb09 f804 	mul.w	r8, r9, r4
 8040678:	e7db      	b.n	8040632 <__udivmoddi4+0x282>
 804067a:	4673      	mov	r3, lr
 804067c:	e77f      	b.n	804057e <__udivmoddi4+0x1ce>
 804067e:	4650      	mov	r0, sl
 8040680:	e766      	b.n	8040550 <__udivmoddi4+0x1a0>
 8040682:	4608      	mov	r0, r1
 8040684:	e6fd      	b.n	8040482 <__udivmoddi4+0xd2>
 8040686:	443b      	add	r3, r7
 8040688:	3a02      	subs	r2, #2
 804068a:	e733      	b.n	80404f4 <__udivmoddi4+0x144>
 804068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8040690:	443b      	add	r3, r7
 8040692:	e71c      	b.n	80404ce <__udivmoddi4+0x11e>
 8040694:	4649      	mov	r1, r9
 8040696:	e79c      	b.n	80405d2 <__udivmoddi4+0x222>
 8040698:	eba1 0109 	sub.w	r1, r1, r9
 804069c:	46c4      	mov	ip, r8
 804069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80406a2:	fb09 f804 	mul.w	r8, r9, r4
 80406a6:	e7c4      	b.n	8040632 <__udivmoddi4+0x282>

080406a8 <__aeabi_idiv0>:
 80406a8:	4770      	bx	lr
 80406aa:	bf00      	nop

080406ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80406ac:	b480      	push	{r7}
 80406ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80406b0:	4b4a      	ldr	r3, [pc, #296]	@ (80407dc <SystemInit+0x130>)
 80406b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80406b6:	4a49      	ldr	r2, [pc, #292]	@ (80407dc <SystemInit+0x130>)
 80406b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80406bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80406c0:	4b46      	ldr	r3, [pc, #280]	@ (80407dc <SystemInit+0x130>)
 80406c2:	691b      	ldr	r3, [r3, #16]
 80406c4:	4a45      	ldr	r2, [pc, #276]	@ (80407dc <SystemInit+0x130>)
 80406c6:	f043 0310 	orr.w	r3, r3, #16
 80406ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80406cc:	4b44      	ldr	r3, [pc, #272]	@ (80407e0 <SystemInit+0x134>)
 80406ce:	681b      	ldr	r3, [r3, #0]
 80406d0:	f003 030f 	and.w	r3, r3, #15
 80406d4:	2b06      	cmp	r3, #6
 80406d6:	d807      	bhi.n	80406e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80406d8:	4b41      	ldr	r3, [pc, #260]	@ (80407e0 <SystemInit+0x134>)
 80406da:	681b      	ldr	r3, [r3, #0]
 80406dc:	f023 030f 	bic.w	r3, r3, #15
 80406e0:	4a3f      	ldr	r2, [pc, #252]	@ (80407e0 <SystemInit+0x134>)
 80406e2:	f043 0307 	orr.w	r3, r3, #7
 80406e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80406e8:	4b3e      	ldr	r3, [pc, #248]	@ (80407e4 <SystemInit+0x138>)
 80406ea:	681b      	ldr	r3, [r3, #0]
 80406ec:	4a3d      	ldr	r2, [pc, #244]	@ (80407e4 <SystemInit+0x138>)
 80406ee:	f043 0301 	orr.w	r3, r3, #1
 80406f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80406f4:	4b3b      	ldr	r3, [pc, #236]	@ (80407e4 <SystemInit+0x138>)
 80406f6:	2200      	movs	r2, #0
 80406f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80406fa:	4b3a      	ldr	r3, [pc, #232]	@ (80407e4 <SystemInit+0x138>)
 80406fc:	681a      	ldr	r2, [r3, #0]
 80406fe:	4939      	ldr	r1, [pc, #228]	@ (80407e4 <SystemInit+0x138>)
 8040700:	4b39      	ldr	r3, [pc, #228]	@ (80407e8 <SystemInit+0x13c>)
 8040702:	4013      	ands	r3, r2
 8040704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8040706:	4b36      	ldr	r3, [pc, #216]	@ (80407e0 <SystemInit+0x134>)
 8040708:	681b      	ldr	r3, [r3, #0]
 804070a:	f003 0308 	and.w	r3, r3, #8
 804070e:	2b00      	cmp	r3, #0
 8040710:	d007      	beq.n	8040722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8040712:	4b33      	ldr	r3, [pc, #204]	@ (80407e0 <SystemInit+0x134>)
 8040714:	681b      	ldr	r3, [r3, #0]
 8040716:	f023 030f 	bic.w	r3, r3, #15
 804071a:	4a31      	ldr	r2, [pc, #196]	@ (80407e0 <SystemInit+0x134>)
 804071c:	f043 0307 	orr.w	r3, r3, #7
 8040720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8040722:	4b30      	ldr	r3, [pc, #192]	@ (80407e4 <SystemInit+0x138>)
 8040724:	2200      	movs	r2, #0
 8040726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8040728:	4b2e      	ldr	r3, [pc, #184]	@ (80407e4 <SystemInit+0x138>)
 804072a:	2200      	movs	r2, #0
 804072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 804072e:	4b2d      	ldr	r3, [pc, #180]	@ (80407e4 <SystemInit+0x138>)
 8040730:	2200      	movs	r2, #0
 8040732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8040734:	4b2b      	ldr	r3, [pc, #172]	@ (80407e4 <SystemInit+0x138>)
 8040736:	4a2d      	ldr	r2, [pc, #180]	@ (80407ec <SystemInit+0x140>)
 8040738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 804073a:	4b2a      	ldr	r3, [pc, #168]	@ (80407e4 <SystemInit+0x138>)
 804073c:	4a2c      	ldr	r2, [pc, #176]	@ (80407f0 <SystemInit+0x144>)
 804073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8040740:	4b28      	ldr	r3, [pc, #160]	@ (80407e4 <SystemInit+0x138>)
 8040742:	4a2c      	ldr	r2, [pc, #176]	@ (80407f4 <SystemInit+0x148>)
 8040744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8040746:	4b27      	ldr	r3, [pc, #156]	@ (80407e4 <SystemInit+0x138>)
 8040748:	2200      	movs	r2, #0
 804074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 804074c:	4b25      	ldr	r3, [pc, #148]	@ (80407e4 <SystemInit+0x138>)
 804074e:	4a29      	ldr	r2, [pc, #164]	@ (80407f4 <SystemInit+0x148>)
 8040750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8040752:	4b24      	ldr	r3, [pc, #144]	@ (80407e4 <SystemInit+0x138>)
 8040754:	2200      	movs	r2, #0
 8040756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8040758:	4b22      	ldr	r3, [pc, #136]	@ (80407e4 <SystemInit+0x138>)
 804075a:	4a26      	ldr	r2, [pc, #152]	@ (80407f4 <SystemInit+0x148>)
 804075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 804075e:	4b21      	ldr	r3, [pc, #132]	@ (80407e4 <SystemInit+0x138>)
 8040760:	2200      	movs	r2, #0
 8040762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8040764:	4b1f      	ldr	r3, [pc, #124]	@ (80407e4 <SystemInit+0x138>)
 8040766:	681b      	ldr	r3, [r3, #0]
 8040768:	4a1e      	ldr	r2, [pc, #120]	@ (80407e4 <SystemInit+0x138>)
 804076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 804076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8040770:	4b1c      	ldr	r3, [pc, #112]	@ (80407e4 <SystemInit+0x138>)
 8040772:	2200      	movs	r2, #0
 8040774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8040776:	4b20      	ldr	r3, [pc, #128]	@ (80407f8 <SystemInit+0x14c>)
 8040778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804077a:	4a1f      	ldr	r2, [pc, #124]	@ (80407f8 <SystemInit+0x14c>)
 804077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8040780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8040782:	4b1e      	ldr	r3, [pc, #120]	@ (80407fc <SystemInit+0x150>)
 8040784:	681a      	ldr	r2, [r3, #0]
 8040786:	4b1e      	ldr	r3, [pc, #120]	@ (8040800 <SystemInit+0x154>)
 8040788:	4013      	ands	r3, r2
 804078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 804078e:	d202      	bcs.n	8040796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8040790:	4b1c      	ldr	r3, [pc, #112]	@ (8040804 <SystemInit+0x158>)
 8040792:	2201      	movs	r2, #1
 8040794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8040796:	4b13      	ldr	r3, [pc, #76]	@ (80407e4 <SystemInit+0x138>)
 8040798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 804079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80407a0:	2b00      	cmp	r3, #0
 80407a2:	d113      	bne.n	80407cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80407a4:	4b0f      	ldr	r3, [pc, #60]	@ (80407e4 <SystemInit+0x138>)
 80407a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80407aa:	4a0e      	ldr	r2, [pc, #56]	@ (80407e4 <SystemInit+0x138>)
 80407ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80407b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80407b4:	4b14      	ldr	r3, [pc, #80]	@ (8040808 <SystemInit+0x15c>)
 80407b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80407ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80407bc:	4b09      	ldr	r3, [pc, #36]	@ (80407e4 <SystemInit+0x138>)
 80407be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80407c2:	4a08      	ldr	r2, [pc, #32]	@ (80407e4 <SystemInit+0x138>)
 80407c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80407c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  }

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 80407cc:	4b03      	ldr	r3, [pc, #12]	@ (80407dc <SystemInit+0x130>)
 80407ce:	4a0f      	ldr	r2, [pc, #60]	@ (804080c <SystemInit+0x160>)
 80407d0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80407d2:	bf00      	nop
 80407d4:	46bd      	mov	sp, r7
 80407d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407da:	4770      	bx	lr
 80407dc:	e000ed00 	.word	0xe000ed00
 80407e0:	52002000 	.word	0x52002000
 80407e4:	58024400 	.word	0x58024400
 80407e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80407ec:	02020200 	.word	0x02020200
 80407f0:	01ff0000 	.word	0x01ff0000
 80407f4:	01010280 	.word	0x01010280
 80407f8:	580000c0 	.word	0x580000c0
 80407fc:	5c001000 	.word	0x5c001000
 8040800:	ffff0000 	.word	0xffff0000
 8040804:	51008108 	.word	0x51008108
 8040808:	52004000 	.word	0x52004000
 804080c:	08040000 	.word	0x08040000

08040810 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8040810:	b480      	push	{r7}
 8040812:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8040814:	4b09      	ldr	r3, [pc, #36]	@ (804083c <ExitRun0Mode+0x2c>)
 8040816:	68db      	ldr	r3, [r3, #12]
 8040818:	4a08      	ldr	r2, [pc, #32]	@ (804083c <ExitRun0Mode+0x2c>)
 804081a:	f023 0302 	bic.w	r3, r3, #2
 804081e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8040820:	bf00      	nop
 8040822:	4b06      	ldr	r3, [pc, #24]	@ (804083c <ExitRun0Mode+0x2c>)
 8040824:	685b      	ldr	r3, [r3, #4]
 8040826:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 804082a:	2b00      	cmp	r3, #0
 804082c:	d0f9      	beq.n	8040822 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 804082e:	bf00      	nop
 8040830:	bf00      	nop
 8040832:	46bd      	mov	sp, r7
 8040834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040838:	4770      	bx	lr
 804083a:	bf00      	nop
 804083c:	58024800 	.word	0x58024800

08040840 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8040840:	b580      	push	{r7, lr}
 8040842:	b082      	sub	sp, #8
 8040844:	af00      	add	r7, sp, #0
 8040846:	4603      	mov	r3, r0
 8040848:	80fb      	strh	r3, [r7, #6]
    	 printf("Callback \n\r");
 804084a:	4808      	ldr	r0, [pc, #32]	@ (804086c <HAL_GPIO_EXTI_Callback+0x2c>)
 804084c:	f00a fa1e 	bl	804ac8c <iprintf>
    if(GPIO_Pin == GPIO_PIN_8)
 8040850:	88fb      	ldrh	r3, [r7, #6]
 8040852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8040856:	d105      	bne.n	8040864 <HAL_GPIO_EXTI_Callback+0x24>
    {
    	printf("Callback btn\n\r");
 8040858:	4805      	ldr	r0, [pc, #20]	@ (8040870 <HAL_GPIO_EXTI_Callback+0x30>)
 804085a:	f00a fa17 	bl	804ac8c <iprintf>
    	jumpToBootloader = 1;
 804085e:	4b05      	ldr	r3, [pc, #20]	@ (8040874 <HAL_GPIO_EXTI_Callback+0x34>)
 8040860:	2201      	movs	r2, #1
 8040862:	601a      	str	r2, [r3, #0]
    	// HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
    }
}
 8040864:	bf00      	nop
 8040866:	3708      	adds	r7, #8
 8040868:	46bd      	mov	sp, r7
 804086a:	bd80      	pop	{r7, pc}
 804086c:	0804b97c 	.word	0x0804b97c
 8040870:	0804b988 	.word	0x0804b988
 8040874:	24000264 	.word	0x24000264

08040878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040878:	b580      	push	{r7, lr}
 804087a:	b082      	sub	sp, #8
 804087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	jumpToBootloader=0;
 804087e:	4b33      	ldr	r3, [pc, #204]	@ (804094c <main+0xd4>)
 8040880:	2200      	movs	r2, #0
 8040882:	601a      	str	r2, [r3, #0]
	 printf("inside the primary region \n\r");
 8040884:	4832      	ldr	r0, [pc, #200]	@ (8040950 <main+0xd8>)
 8040886:	f00a fa01 	bl	804ac8c <iprintf>
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 804088a:	f000 fc1f 	bl	80410cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 804088e:	f000 f877 	bl	8040980 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8040892:	f000 f8fb 	bl	8040a8c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8040896:	4b2f      	ldr	r3, [pc, #188]	@ (8040954 <main+0xdc>)
 8040898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804089c:	4a2d      	ldr	r2, [pc, #180]	@ (8040954 <main+0xdc>)
 804089e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80408a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80408a6:	4b2b      	ldr	r3, [pc, #172]	@ (8040954 <main+0xdc>)
 80408a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80408ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80408b0:	603b      	str	r3, [r7, #0]
 80408b2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80408b4:	2000      	movs	r0, #0
 80408b6:	f001 f8cb 	bl	8041a50 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80408ba:	2100      	movs	r1, #0
 80408bc:	2000      	movs	r0, #0
 80408be:	f001 f8e1 	bl	8041a84 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80408c2:	f000 f981 	bl	8040bc8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80408c6:	f000 f933 	bl	8040b30 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80408ca:	f009 fc0b 	bl	804a0e4 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 80408ce:	f000 f90d 	bl	8040aec <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  printf("Firmware Application \n\r");
 80408d2:	4821      	ldr	r0, [pc, #132]	@ (8040958 <main+0xe0>)
 80408d4:	f00a f9da 	bl	804ac8c <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11); // Toggle PA11
 80408d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80408dc:	481f      	ldr	r0, [pc, #124]	@ (804095c <main+0xe4>)
 80408de:	f001 f882 	bl	80419e6 <HAL_GPIO_TogglePin>
      HAL_Delay(100); // Delay for 500 ms
 80408e2:	2064      	movs	r0, #100	@ 0x64
 80408e4:	f000 fc84 	bl	80411f0 <HAL_Delay>

      if(jumpToBootloader){
 80408e8:	4b18      	ldr	r3, [pc, #96]	@ (804094c <main+0xd4>)
 80408ea:	681b      	ldr	r3, [r3, #0]
 80408ec:	2b00      	cmp	r3, #0
 80408ee:	d0f3      	beq.n	80408d8 <main+0x60>
    	  printf("Jumping to Bootloader\n\r");
 80408f0:	481b      	ldr	r0, [pc, #108]	@ (8040960 <main+0xe8>)
 80408f2:	f00a f9cb 	bl	804ac8c <iprintf>
    	  	 dfu_boot_flag = (uint32_t*) (&_bflag); // set in linker script
 80408f6:	4b1b      	ldr	r3, [pc, #108]	@ (8040964 <main+0xec>)
 80408f8:	4a1b      	ldr	r2, [pc, #108]	@ (8040968 <main+0xf0>)
 80408fa:	601a      	str	r2, [r3, #0]

    	  	 if (*dfu_boot_flag != DFU_BOOT_FLAG) {
 80408fc:	4b19      	ldr	r3, [pc, #100]	@ (8040964 <main+0xec>)
 80408fe:	681b      	ldr	r3, [r3, #0]
 8040900:	681b      	ldr	r3, [r3, #0]
 8040902:	4a1a      	ldr	r2, [pc, #104]	@ (804096c <main+0xf4>)
 8040904:	4293      	cmp	r3, r2
 8040906:	d01b      	beq.n	8040940 <main+0xc8>

    	  	 /* Test if user code is programmed starting from address 0x08000000 */
    	  	 if (((*(__IO uint32_t*) 0x08000000) & 0x2FF80000) == 0x24000000) {
 8040908:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 804090c:	681a      	ldr	r2, [r3, #0]
 804090e:	4b18      	ldr	r3, [pc, #96]	@ (8040970 <main+0xf8>)
 8040910:	4013      	ands	r3, r2
 8040912:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 8040916:	d113      	bne.n	8040940 <main+0xc8>

    	  		 /* Jump to user application */
    	  		 JumpAddress = *(__IO uint32_t*) (0x08000000 + 4);
 8040918:	4b16      	ldr	r3, [pc, #88]	@ (8040974 <main+0xfc>)
 804091a:	681b      	ldr	r3, [r3, #0]
 804091c:	4a16      	ldr	r2, [pc, #88]	@ (8040978 <main+0x100>)
 804091e:	6013      	str	r3, [r2, #0]
    	  		 JumpToApplication = (pFunction) JumpAddress;
 8040920:	4b15      	ldr	r3, [pc, #84]	@ (8040978 <main+0x100>)
 8040922:	681b      	ldr	r3, [r3, #0]
 8040924:	461a      	mov	r2, r3
 8040926:	4b15      	ldr	r3, [pc, #84]	@ (804097c <main+0x104>)
 8040928:	601a      	str	r2, [r3, #0]

    	  		 /* Initialize user application's Stack Pointer */
    	  		 __set_MSP(*(__IO uint32_t*) 0x08000000);
 804092a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 804092e:	681b      	ldr	r3, [r3, #0]
 8040930:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8040932:	687b      	ldr	r3, [r7, #4]
 8040934:	f383 8808 	msr	MSP, r3
}
 8040938:	bf00      	nop
    	  		 JumpToApplication();
 804093a:	4b10      	ldr	r3, [pc, #64]	@ (804097c <main+0x104>)
 804093c:	681b      	ldr	r3, [r3, #0]
 804093e:	4798      	blx	r3
    	  	 	 }
    	  	 }
    	  	 *dfu_boot_flag=0;
 8040940:	4b08      	ldr	r3, [pc, #32]	@ (8040964 <main+0xec>)
 8040942:	681b      	ldr	r3, [r3, #0]
 8040944:	2200      	movs	r2, #0
 8040946:	601a      	str	r2, [r3, #0]
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11); // Toggle PA11
 8040948:	e7c6      	b.n	80408d8 <main+0x60>
 804094a:	bf00      	nop
 804094c:	24000264 	.word	0x24000264
 8040950:	0804b998 	.word	0x0804b998
 8040954:	58024400 	.word	0x58024400
 8040958:	0804b9b8 	.word	0x0804b9b8
 804095c:	58020000 	.word	0x58020000
 8040960:	0804b9d0 	.word	0x0804b9d0
 8040964:	24000258 	.word	0x24000258
 8040968:	24000254 	.word	0x24000254
 804096c:	deadbeef 	.word	0xdeadbeef
 8040970:	2ff80000 	.word	0x2ff80000
 8040974:	08000004 	.word	0x08000004
 8040978:	24000260 	.word	0x24000260
 804097c:	2400025c 	.word	0x2400025c

08040980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040980:	b580      	push	{r7, lr}
 8040982:	b09c      	sub	sp, #112	@ 0x70
 8040984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 804098a:	224c      	movs	r2, #76	@ 0x4c
 804098c:	2100      	movs	r1, #0
 804098e:	4618      	mov	r0, r3
 8040990:	f00a f9d1 	bl	804ad36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040994:	1d3b      	adds	r3, r7, #4
 8040996:	2220      	movs	r2, #32
 8040998:	2100      	movs	r1, #0
 804099a:	4618      	mov	r0, r3
 804099c:	f00a f9cb 	bl	804ad36 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80409a0:	2004      	movs	r0, #4
 80409a2:	f002 fb0b 	bl	8042fbc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80409a6:	2300      	movs	r3, #0
 80409a8:	603b      	str	r3, [r7, #0]
 80409aa:	4b36      	ldr	r3, [pc, #216]	@ (8040a84 <SystemClock_Config+0x104>)
 80409ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80409ae:	4a35      	ldr	r2, [pc, #212]	@ (8040a84 <SystemClock_Config+0x104>)
 80409b0:	f023 0301 	bic.w	r3, r3, #1
 80409b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80409b6:	4b33      	ldr	r3, [pc, #204]	@ (8040a84 <SystemClock_Config+0x104>)
 80409b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80409ba:	f003 0301 	and.w	r3, r3, #1
 80409be:	603b      	str	r3, [r7, #0]
 80409c0:	4b31      	ldr	r3, [pc, #196]	@ (8040a88 <SystemClock_Config+0x108>)
 80409c2:	699b      	ldr	r3, [r3, #24]
 80409c4:	4a30      	ldr	r2, [pc, #192]	@ (8040a88 <SystemClock_Config+0x108>)
 80409c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80409ca:	6193      	str	r3, [r2, #24]
 80409cc:	4b2e      	ldr	r3, [pc, #184]	@ (8040a88 <SystemClock_Config+0x108>)
 80409ce:	699b      	ldr	r3, [r3, #24]
 80409d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80409d4:	603b      	str	r3, [r7, #0]
 80409d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80409d8:	bf00      	nop
 80409da:	4b2b      	ldr	r3, [pc, #172]	@ (8040a88 <SystemClock_Config+0x108>)
 80409dc:	699b      	ldr	r3, [r3, #24]
 80409de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80409e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80409e6:	d1f8      	bne.n	80409da <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80409e8:	230b      	movs	r3, #11
 80409ea:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80409ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80409f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80409f2:	2301      	movs	r3, #1
 80409f4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80409f6:	2340      	movs	r3, #64	@ 0x40
 80409f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80409fa:	2301      	movs	r3, #1
 80409fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80409fe:	2302      	movs	r3, #2
 8040a00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8040a02:	2302      	movs	r3, #2
 8040a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8040a06:	2305      	movs	r3, #5
 8040a08:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8040a0a:	2330      	movs	r3, #48	@ 0x30
 8040a0c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8040a0e:	2302      	movs	r3, #2
 8040a10:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8040a12:	2305      	movs	r3, #5
 8040a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8040a16:	2302      	movs	r3, #2
 8040a18:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8040a1a:	2308      	movs	r3, #8
 8040a1c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8040a1e:	2300      	movs	r3, #0
 8040a20:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8040a22:	2300      	movs	r3, #0
 8040a24:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8040a2a:	4618      	mov	r0, r3
 8040a2c:	f002 fb30 	bl	8043090 <HAL_RCC_OscConfig>
 8040a30:	4603      	mov	r3, r0
 8040a32:	2b00      	cmp	r3, #0
 8040a34:	d001      	beq.n	8040a3a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8040a36:	f000 f963 	bl	8040d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040a3a:	233f      	movs	r3, #63	@ 0x3f
 8040a3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8040a3e:	2300      	movs	r3, #0
 8040a40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8040a42:	2300      	movs	r3, #0
 8040a44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8040a46:	2300      	movs	r3, #0
 8040a48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8040a4a:	2300      	movs	r3, #0
 8040a4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8040a4e:	2300      	movs	r3, #0
 8040a50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8040a52:	2300      	movs	r3, #0
 8040a54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8040a56:	2300      	movs	r3, #0
 8040a58:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8040a5a:	1d3b      	adds	r3, r7, #4
 8040a5c:	2100      	movs	r1, #0
 8040a5e:	4618      	mov	r0, r3
 8040a60:	f002 ff70 	bl	8043944 <HAL_RCC_ClockConfig>
 8040a64:	4603      	mov	r3, r0
 8040a66:	2b00      	cmp	r3, #0
 8040a68:	d001      	beq.n	8040a6e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8040a6a:	f000 f949 	bl	8040d00 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8040a6e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8040a72:	2100      	movs	r1, #0
 8040a74:	2000      	movs	r0, #0
 8040a76:	f003 f91b 	bl	8043cb0 <HAL_RCC_MCOConfig>
}
 8040a7a:	bf00      	nop
 8040a7c:	3770      	adds	r7, #112	@ 0x70
 8040a7e:	46bd      	mov	sp, r7
 8040a80:	bd80      	pop	{r7, pc}
 8040a82:	bf00      	nop
 8040a84:	58000400 	.word	0x58000400
 8040a88:	58024800 	.word	0x58024800

08040a8c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8040a8c:	b580      	push	{r7, lr}
 8040a8e:	b0b2      	sub	sp, #200	@ 0xc8
 8040a90:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040a92:	463b      	mov	r3, r7
 8040a94:	22c8      	movs	r2, #200	@ 0xc8
 8040a96:	2100      	movs	r1, #0
 8040a98:	4618      	mov	r0, r3
 8040a9a:	f00a f94c 	bl	804ad36 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8040a9e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8040aa2:	f04f 0300 	mov.w	r3, #0
 8040aa6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8040aaa:	2302      	movs	r3, #2
 8040aac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8040aae:	230c      	movs	r3, #12
 8040ab0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8040ab2:	2302      	movs	r3, #2
 8040ab4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8040ab6:	2302      	movs	r3, #2
 8040ab8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8040aba:	2302      	movs	r3, #2
 8040abc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8040abe:	23c0      	movs	r3, #192	@ 0xc0
 8040ac0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8040ac2:	2320      	movs	r3, #32
 8040ac4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8040ac6:	2300      	movs	r3, #0
 8040ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8040aca:	2300      	movs	r3, #0
 8040acc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040ad0:	463b      	mov	r3, r7
 8040ad2:	4618      	mov	r0, r3
 8040ad4:	f003 fb2c 	bl	8044130 <HAL_RCCEx_PeriphCLKConfig>
 8040ad8:	4603      	mov	r3, r0
 8040ada:	2b00      	cmp	r3, #0
 8040adc:	d001      	beq.n	8040ae2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8040ade:	f000 f90f 	bl	8040d00 <Error_Handler>
  }
}
 8040ae2:	bf00      	nop
 8040ae4:	37c8      	adds	r7, #200	@ 0xc8
 8040ae6:	46bd      	mov	sp, r7
 8040ae8:	bd80      	pop	{r7, pc}
	...

08040aec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8040aec:	b580      	push	{r7, lr}
 8040aee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8040af0:	4b0d      	ldr	r3, [pc, #52]	@ (8040b28 <MX_CRC_Init+0x3c>)
 8040af2:	4a0e      	ldr	r2, [pc, #56]	@ (8040b2c <MX_CRC_Init+0x40>)
 8040af4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8040af6:	4b0c      	ldr	r3, [pc, #48]	@ (8040b28 <MX_CRC_Init+0x3c>)
 8040af8:	2200      	movs	r2, #0
 8040afa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8040afc:	4b0a      	ldr	r3, [pc, #40]	@ (8040b28 <MX_CRC_Init+0x3c>)
 8040afe:	2200      	movs	r2, #0
 8040b00:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8040b02:	4b09      	ldr	r3, [pc, #36]	@ (8040b28 <MX_CRC_Init+0x3c>)
 8040b04:	2200      	movs	r2, #0
 8040b06:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8040b08:	4b07      	ldr	r3, [pc, #28]	@ (8040b28 <MX_CRC_Init+0x3c>)
 8040b0a:	2200      	movs	r2, #0
 8040b0c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8040b0e:	4b06      	ldr	r3, [pc, #24]	@ (8040b28 <MX_CRC_Init+0x3c>)
 8040b10:	2201      	movs	r2, #1
 8040b12:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8040b14:	4804      	ldr	r0, [pc, #16]	@ (8040b28 <MX_CRC_Init+0x3c>)
 8040b16:	f000 fcab 	bl	8041470 <HAL_CRC_Init>
 8040b1a:	4603      	mov	r3, r0
 8040b1c:	2b00      	cmp	r3, #0
 8040b1e:	d001      	beq.n	8040b24 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8040b20:	f000 f8ee 	bl	8040d00 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8040b24:	bf00      	nop
 8040b26:	bd80      	pop	{r7, pc}
 8040b28:	2400019c 	.word	0x2400019c
 8040b2c:	58024c00 	.word	0x58024c00

08040b30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040b30:	b580      	push	{r7, lr}
 8040b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040b34:	4b22      	ldr	r3, [pc, #136]	@ (8040bc0 <MX_USART1_UART_Init+0x90>)
 8040b36:	4a23      	ldr	r2, [pc, #140]	@ (8040bc4 <MX_USART1_UART_Init+0x94>)
 8040b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8040b3a:	4b21      	ldr	r3, [pc, #132]	@ (8040bc0 <MX_USART1_UART_Init+0x90>)
 8040b3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8040b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040b42:	4b1f      	ldr	r3, [pc, #124]	@ (8040bc0 <MX_USART1_UART_Init+0x90>)
 8040b44:	2200      	movs	r2, #0
 8040b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040b48:	4b1d      	ldr	r3, [pc, #116]	@ (8040bc0 <MX_USART1_UART_Init+0x90>)
 8040b4a:	2200      	movs	r2, #0
 8040b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8040bc0 <MX_USART1_UART_Init+0x90>)
 8040b50:	2200      	movs	r2, #0
 8040b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040b54:	4b1a      	ldr	r3, [pc, #104]	@ (8040bc0 <MX_USART1_UART_Init+0x90>)
 8040b56:	220c      	movs	r2, #12
 8040b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040b5a:	4b19      	ldr	r3, [pc, #100]	@ (8040bc0 <MX_USART1_UART_Init+0x90>)
 8040b5c:	2200      	movs	r2, #0
 8040b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040b60:	4b17      	ldr	r3, [pc, #92]	@ (8040bc0 <MX_USART1_UART_Init+0x90>)
 8040b62:	2200      	movs	r2, #0
 8040b64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040b66:	4b16      	ldr	r3, [pc, #88]	@ (8040bc0 <MX_USART1_UART_Init+0x90>)
 8040b68:	2200      	movs	r2, #0
 8040b6a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8040b6c:	4b14      	ldr	r3, [pc, #80]	@ (8040bc0 <MX_USART1_UART_Init+0x90>)
 8040b6e:	2200      	movs	r2, #0
 8040b70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040b72:	4b13      	ldr	r3, [pc, #76]	@ (8040bc0 <MX_USART1_UART_Init+0x90>)
 8040b74:	2200      	movs	r2, #0
 8040b76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040b78:	4811      	ldr	r0, [pc, #68]	@ (8040bc0 <MX_USART1_UART_Init+0x90>)
 8040b7a:	f005 f945 	bl	8045e08 <HAL_UART_Init>
 8040b7e:	4603      	mov	r3, r0
 8040b80:	2b00      	cmp	r3, #0
 8040b82:	d001      	beq.n	8040b88 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8040b84:	f000 f8bc 	bl	8040d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040b88:	2100      	movs	r1, #0
 8040b8a:	480d      	ldr	r0, [pc, #52]	@ (8040bc0 <MX_USART1_UART_Init+0x90>)
 8040b8c:	f006 f94d 	bl	8046e2a <HAL_UARTEx_SetTxFifoThreshold>
 8040b90:	4603      	mov	r3, r0
 8040b92:	2b00      	cmp	r3, #0
 8040b94:	d001      	beq.n	8040b9a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8040b96:	f000 f8b3 	bl	8040d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040b9a:	2100      	movs	r1, #0
 8040b9c:	4808      	ldr	r0, [pc, #32]	@ (8040bc0 <MX_USART1_UART_Init+0x90>)
 8040b9e:	f006 f982 	bl	8046ea6 <HAL_UARTEx_SetRxFifoThreshold>
 8040ba2:	4603      	mov	r3, r0
 8040ba4:	2b00      	cmp	r3, #0
 8040ba6:	d001      	beq.n	8040bac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8040ba8:	f000 f8aa 	bl	8040d00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8040bac:	4804      	ldr	r0, [pc, #16]	@ (8040bc0 <MX_USART1_UART_Init+0x90>)
 8040bae:	f006 f903 	bl	8046db8 <HAL_UARTEx_DisableFifoMode>
 8040bb2:	4603      	mov	r3, r0
 8040bb4:	2b00      	cmp	r3, #0
 8040bb6:	d001      	beq.n	8040bbc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8040bb8:	f000 f8a2 	bl	8040d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040bbc:	bf00      	nop
 8040bbe:	bd80      	pop	{r7, pc}
 8040bc0:	240001c0 	.word	0x240001c0
 8040bc4:	40011000 	.word	0x40011000

08040bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040bc8:	b580      	push	{r7, lr}
 8040bca:	b08a      	sub	sp, #40	@ 0x28
 8040bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040bce:	f107 0314 	add.w	r3, r7, #20
 8040bd2:	2200      	movs	r2, #0
 8040bd4:	601a      	str	r2, [r3, #0]
 8040bd6:	605a      	str	r2, [r3, #4]
 8040bd8:	609a      	str	r2, [r3, #8]
 8040bda:	60da      	str	r2, [r3, #12]
 8040bdc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040bde:	4b45      	ldr	r3, [pc, #276]	@ (8040cf4 <MX_GPIO_Init+0x12c>)
 8040be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040be4:	4a43      	ldr	r2, [pc, #268]	@ (8040cf4 <MX_GPIO_Init+0x12c>)
 8040be6:	f043 0302 	orr.w	r3, r3, #2
 8040bea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040bee:	4b41      	ldr	r3, [pc, #260]	@ (8040cf4 <MX_GPIO_Init+0x12c>)
 8040bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040bf4:	f003 0302 	and.w	r3, r3, #2
 8040bf8:	613b      	str	r3, [r7, #16]
 8040bfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040bfc:	4b3d      	ldr	r3, [pc, #244]	@ (8040cf4 <MX_GPIO_Init+0x12c>)
 8040bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040c02:	4a3c      	ldr	r2, [pc, #240]	@ (8040cf4 <MX_GPIO_Init+0x12c>)
 8040c04:	f043 0301 	orr.w	r3, r3, #1
 8040c08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040c0c:	4b39      	ldr	r3, [pc, #228]	@ (8040cf4 <MX_GPIO_Init+0x12c>)
 8040c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040c12:	f003 0301 	and.w	r3, r3, #1
 8040c16:	60fb      	str	r3, [r7, #12]
 8040c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040c1a:	4b36      	ldr	r3, [pc, #216]	@ (8040cf4 <MX_GPIO_Init+0x12c>)
 8040c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040c20:	4a34      	ldr	r2, [pc, #208]	@ (8040cf4 <MX_GPIO_Init+0x12c>)
 8040c22:	f043 0304 	orr.w	r3, r3, #4
 8040c26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040c2a:	4b32      	ldr	r3, [pc, #200]	@ (8040cf4 <MX_GPIO_Init+0x12c>)
 8040c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040c30:	f003 0304 	and.w	r3, r3, #4
 8040c34:	60bb      	str	r3, [r7, #8]
 8040c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8040c38:	4b2e      	ldr	r3, [pc, #184]	@ (8040cf4 <MX_GPIO_Init+0x12c>)
 8040c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8040cf4 <MX_GPIO_Init+0x12c>)
 8040c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8040c44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040c48:	4b2a      	ldr	r3, [pc, #168]	@ (8040cf4 <MX_GPIO_Init+0x12c>)
 8040c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8040c52:	607b      	str	r3, [r7, #4]
 8040c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040c56:	4b27      	ldr	r3, [pc, #156]	@ (8040cf4 <MX_GPIO_Init+0x12c>)
 8040c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040c5c:	4a25      	ldr	r2, [pc, #148]	@ (8040cf4 <MX_GPIO_Init+0x12c>)
 8040c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8040c62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040c66:	4b23      	ldr	r3, [pc, #140]	@ (8040cf4 <MX_GPIO_Init+0x12c>)
 8040c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8040c70:	603b      	str	r3, [r7, #0]
 8040c72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8040c74:	2200      	movs	r2, #0
 8040c76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8040c7a:	481f      	ldr	r0, [pc, #124]	@ (8040cf8 <MX_GPIO_Init+0x130>)
 8040c7c:	f000 fe9a 	bl	80419b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8040c80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8040c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8040c86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8040c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8040c8c:	2301      	movs	r3, #1
 8040c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8040c90:	f107 0314 	add.w	r3, r7, #20
 8040c94:	4619      	mov	r1, r3
 8040c96:	4819      	ldr	r0, [pc, #100]	@ (8040cfc <MX_GPIO_Init+0x134>)
 8040c98:	f000 fcdc 	bl	8041654 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8040c9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8040ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040ca2:	2302      	movs	r3, #2
 8040ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040ca6:	2300      	movs	r3, #0
 8040ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040caa:	2300      	movs	r3, #0
 8040cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8040cae:	2300      	movs	r3, #0
 8040cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8040cb2:	f107 0314 	add.w	r3, r7, #20
 8040cb6:	4619      	mov	r1, r3
 8040cb8:	480f      	ldr	r0, [pc, #60]	@ (8040cf8 <MX_GPIO_Init+0x130>)
 8040cba:	f000 fccb 	bl	8041654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8040cbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8040cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040cc4:	2301      	movs	r3, #1
 8040cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040cc8:	2300      	movs	r3, #0
 8040cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040ccc:	2300      	movs	r3, #0
 8040cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040cd0:	f107 0314 	add.w	r3, r7, #20
 8040cd4:	4619      	mov	r1, r3
 8040cd6:	4808      	ldr	r0, [pc, #32]	@ (8040cf8 <MX_GPIO_Init+0x130>)
 8040cd8:	f000 fcbc 	bl	8041654 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8040cdc:	2200      	movs	r2, #0
 8040cde:	2100      	movs	r1, #0
 8040ce0:	2017      	movs	r0, #23
 8040ce2:	f000 fb90 	bl	8041406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8040ce6:	2017      	movs	r0, #23
 8040ce8:	f000 fba7 	bl	804143a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8040cec:	bf00      	nop
 8040cee:	3728      	adds	r7, #40	@ 0x28
 8040cf0:	46bd      	mov	sp, r7
 8040cf2:	bd80      	pop	{r7, pc}
 8040cf4:	58024400 	.word	0x58024400
 8040cf8:	58020000 	.word	0x58020000
 8040cfc:	58020400 	.word	0x58020400

08040d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040d00:	b480      	push	{r7}
 8040d02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8040d04:	b672      	cpsid	i
}
 8040d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040d08:	bf00      	nop
 8040d0a:	e7fd      	b.n	8040d08 <Error_Handler+0x8>

08040d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040d0c:	b480      	push	{r7}
 8040d0e:	b083      	sub	sp, #12
 8040d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040d12:	4b0a      	ldr	r3, [pc, #40]	@ (8040d3c <HAL_MspInit+0x30>)
 8040d14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8040d18:	4a08      	ldr	r2, [pc, #32]	@ (8040d3c <HAL_MspInit+0x30>)
 8040d1a:	f043 0302 	orr.w	r3, r3, #2
 8040d1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8040d22:	4b06      	ldr	r3, [pc, #24]	@ (8040d3c <HAL_MspInit+0x30>)
 8040d24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8040d28:	f003 0302 	and.w	r3, r3, #2
 8040d2c:	607b      	str	r3, [r7, #4]
 8040d2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040d30:	bf00      	nop
 8040d32:	370c      	adds	r7, #12
 8040d34:	46bd      	mov	sp, r7
 8040d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d3a:	4770      	bx	lr
 8040d3c:	58024400 	.word	0x58024400

08040d40 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8040d40:	b480      	push	{r7}
 8040d42:	b085      	sub	sp, #20
 8040d44:	af00      	add	r7, sp, #0
 8040d46:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8040d48:	687b      	ldr	r3, [r7, #4]
 8040d4a:	681b      	ldr	r3, [r3, #0]
 8040d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8040d7c <HAL_CRC_MspInit+0x3c>)
 8040d4e:	4293      	cmp	r3, r2
 8040d50:	d10e      	bne.n	8040d70 <HAL_CRC_MspInit+0x30>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8040d52:	4b0b      	ldr	r3, [pc, #44]	@ (8040d80 <HAL_CRC_MspInit+0x40>)
 8040d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040d58:	4a09      	ldr	r2, [pc, #36]	@ (8040d80 <HAL_CRC_MspInit+0x40>)
 8040d5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8040d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040d62:	4b07      	ldr	r3, [pc, #28]	@ (8040d80 <HAL_CRC_MspInit+0x40>)
 8040d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040d68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8040d6c:	60fb      	str	r3, [r7, #12]
 8040d6e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8040d70:	bf00      	nop
 8040d72:	3714      	adds	r7, #20
 8040d74:	46bd      	mov	sp, r7
 8040d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d7a:	4770      	bx	lr
 8040d7c:	58024c00 	.word	0x58024c00
 8040d80:	58024400 	.word	0x58024400

08040d84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040d84:	b580      	push	{r7, lr}
 8040d86:	b0bc      	sub	sp, #240	@ 0xf0
 8040d88:	af00      	add	r7, sp, #0
 8040d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040d8c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8040d90:	2200      	movs	r2, #0
 8040d92:	601a      	str	r2, [r3, #0]
 8040d94:	605a      	str	r2, [r3, #4]
 8040d96:	609a      	str	r2, [r3, #8]
 8040d98:	60da      	str	r2, [r3, #12]
 8040d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040d9c:	f107 0310 	add.w	r3, r7, #16
 8040da0:	22c8      	movs	r2, #200	@ 0xc8
 8040da2:	2100      	movs	r1, #0
 8040da4:	4618      	mov	r0, r3
 8040da6:	f009 ffc6 	bl	804ad36 <memset>
  if(huart->Instance==USART1)
 8040daa:	687b      	ldr	r3, [r7, #4]
 8040dac:	681b      	ldr	r3, [r3, #0]
 8040dae:	4a27      	ldr	r2, [pc, #156]	@ (8040e4c <HAL_UART_MspInit+0xc8>)
 8040db0:	4293      	cmp	r3, r2
 8040db2:	d146      	bne.n	8040e42 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8040db4:	f04f 0201 	mov.w	r2, #1
 8040db8:	f04f 0300 	mov.w	r3, #0
 8040dbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8040dc0:	2300      	movs	r3, #0
 8040dc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040dc6:	f107 0310 	add.w	r3, r7, #16
 8040dca:	4618      	mov	r0, r3
 8040dcc:	f003 f9b0 	bl	8044130 <HAL_RCCEx_PeriphCLKConfig>
 8040dd0:	4603      	mov	r3, r0
 8040dd2:	2b00      	cmp	r3, #0
 8040dd4:	d001      	beq.n	8040dda <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8040dd6:	f7ff ff93 	bl	8040d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8040dda:	4b1d      	ldr	r3, [pc, #116]	@ (8040e50 <HAL_UART_MspInit+0xcc>)
 8040ddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8040de0:	4a1b      	ldr	r2, [pc, #108]	@ (8040e50 <HAL_UART_MspInit+0xcc>)
 8040de2:	f043 0310 	orr.w	r3, r3, #16
 8040de6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8040dea:	4b19      	ldr	r3, [pc, #100]	@ (8040e50 <HAL_UART_MspInit+0xcc>)
 8040dec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8040df0:	f003 0310 	and.w	r3, r3, #16
 8040df4:	60fb      	str	r3, [r7, #12]
 8040df6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040df8:	4b15      	ldr	r3, [pc, #84]	@ (8040e50 <HAL_UART_MspInit+0xcc>)
 8040dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040dfe:	4a14      	ldr	r2, [pc, #80]	@ (8040e50 <HAL_UART_MspInit+0xcc>)
 8040e00:	f043 0301 	orr.w	r3, r3, #1
 8040e04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040e08:	4b11      	ldr	r3, [pc, #68]	@ (8040e50 <HAL_UART_MspInit+0xcc>)
 8040e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040e0e:	f003 0301 	and.w	r3, r3, #1
 8040e12:	60bb      	str	r3, [r7, #8]
 8040e14:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8040e16:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8040e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040e1e:	2302      	movs	r3, #2
 8040e20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e24:	2300      	movs	r3, #0
 8040e26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040e2a:	2300      	movs	r3, #0
 8040e2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8040e30:	2307      	movs	r3, #7
 8040e32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040e36:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8040e3a:	4619      	mov	r1, r3
 8040e3c:	4805      	ldr	r0, [pc, #20]	@ (8040e54 <HAL_UART_MspInit+0xd0>)
 8040e3e:	f000 fc09 	bl	8041654 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8040e42:	bf00      	nop
 8040e44:	37f0      	adds	r7, #240	@ 0xf0
 8040e46:	46bd      	mov	sp, r7
 8040e48:	bd80      	pop	{r7, pc}
 8040e4a:	bf00      	nop
 8040e4c:	40011000 	.word	0x40011000
 8040e50:	58024400 	.word	0x58024400
 8040e54:	58020000 	.word	0x58020000

08040e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040e58:	b480      	push	{r7}
 8040e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8040e5c:	bf00      	nop
 8040e5e:	e7fd      	b.n	8040e5c <NMI_Handler+0x4>

08040e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040e60:	b480      	push	{r7}
 8040e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040e64:	bf00      	nop
 8040e66:	e7fd      	b.n	8040e64 <HardFault_Handler+0x4>

08040e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040e68:	b480      	push	{r7}
 8040e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040e6c:	bf00      	nop
 8040e6e:	e7fd      	b.n	8040e6c <MemManage_Handler+0x4>

08040e70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040e70:	b480      	push	{r7}
 8040e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040e74:	bf00      	nop
 8040e76:	e7fd      	b.n	8040e74 <BusFault_Handler+0x4>

08040e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040e78:	b480      	push	{r7}
 8040e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040e7c:	bf00      	nop
 8040e7e:	e7fd      	b.n	8040e7c <UsageFault_Handler+0x4>

08040e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040e80:	b480      	push	{r7}
 8040e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040e84:	bf00      	nop
 8040e86:	46bd      	mov	sp, r7
 8040e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e8c:	4770      	bx	lr

08040e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040e8e:	b480      	push	{r7}
 8040e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040e92:	bf00      	nop
 8040e94:	46bd      	mov	sp, r7
 8040e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e9a:	4770      	bx	lr

08040e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040e9c:	b480      	push	{r7}
 8040e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040ea0:	bf00      	nop
 8040ea2:	46bd      	mov	sp, r7
 8040ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ea8:	4770      	bx	lr

08040eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040eaa:	b580      	push	{r7, lr}
 8040eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040eae:	f000 f97f 	bl	80411b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040eb2:	bf00      	nop
 8040eb4:	bd80      	pop	{r7, pc}

08040eb6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8040eb6:	b580      	push	{r7, lr}
 8040eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8040eba:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8040ebe:	f000 fdac 	bl	8041a1a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8040ec2:	bf00      	nop
 8040ec4:	bd80      	pop	{r7, pc}
	...

08040ec8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8040ec8:	b580      	push	{r7, lr}
 8040eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8040ecc:	4802      	ldr	r0, [pc, #8]	@ (8040ed8 <OTG_HS_IRQHandler+0x10>)
 8040ece:	f000 ff2e 	bl	8041d2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8040ed2:	bf00      	nop
 8040ed4:	bd80      	pop	{r7, pc}
 8040ed6:	bf00      	nop
 8040ed8:	24000750 	.word	0x24000750

08040edc <ITM_SendChar>:
#define DEMCR        			*((volatile uint32_t*) 0xE000EDFCU )
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )
void ITM_SendChar(uint8_t ch)
{
 8040edc:	b480      	push	{r7}
 8040ede:	b083      	sub	sp, #12
 8040ee0:	af00      	add	r7, sp, #0
 8040ee2:	4603      	mov	r3, r0
 8040ee4:	71fb      	strb	r3, [r7, #7]
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8040ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8040f24 <ITM_SendChar+0x48>)
 8040ee8:	681b      	ldr	r3, [r3, #0]
 8040eea:	4a0e      	ldr	r2, [pc, #56]	@ (8040f24 <ITM_SendChar+0x48>)
 8040eec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8040ef0:	6013      	str	r3, [r2, #0]
	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8040ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8040f28 <ITM_SendChar+0x4c>)
 8040ef4:	681b      	ldr	r3, [r3, #0]
 8040ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8040f28 <ITM_SendChar+0x4c>)
 8040ef8:	f043 0301 	orr.w	r3, r3, #1
 8040efc:	6013      	str	r3, [r2, #0]
	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8040efe:	bf00      	nop
 8040f00:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8040f04:	681b      	ldr	r3, [r3, #0]
 8040f06:	f003 0301 	and.w	r3, r3, #1
 8040f0a:	2b00      	cmp	r3, #0
 8040f0c:	d0f8      	beq.n	8040f00 <ITM_SendChar+0x24>
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8040f0e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8040f12:	79fb      	ldrb	r3, [r7, #7]
 8040f14:	6013      	str	r3, [r2, #0]
}
 8040f16:	bf00      	nop
 8040f18:	370c      	adds	r7, #12
 8040f1a:	46bd      	mov	sp, r7
 8040f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f20:	4770      	bx	lr
 8040f22:	bf00      	nop
 8040f24:	e000edfc 	.word	0xe000edfc
 8040f28:	e0000e00 	.word	0xe0000e00

08040f2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8040f2c:	b580      	push	{r7, lr}
 8040f2e:	b086      	sub	sp, #24
 8040f30:	af00      	add	r7, sp, #0
 8040f32:	60f8      	str	r0, [r7, #12]
 8040f34:	60b9      	str	r1, [r7, #8]
 8040f36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040f38:	2300      	movs	r3, #0
 8040f3a:	617b      	str	r3, [r7, #20]
 8040f3c:	e00a      	b.n	8040f54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8040f3e:	f3af 8000 	nop.w
 8040f42:	4601      	mov	r1, r0
 8040f44:	68bb      	ldr	r3, [r7, #8]
 8040f46:	1c5a      	adds	r2, r3, #1
 8040f48:	60ba      	str	r2, [r7, #8]
 8040f4a:	b2ca      	uxtb	r2, r1
 8040f4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040f4e:	697b      	ldr	r3, [r7, #20]
 8040f50:	3301      	adds	r3, #1
 8040f52:	617b      	str	r3, [r7, #20]
 8040f54:	697a      	ldr	r2, [r7, #20]
 8040f56:	687b      	ldr	r3, [r7, #4]
 8040f58:	429a      	cmp	r2, r3
 8040f5a:	dbf0      	blt.n	8040f3e <_read+0x12>
  }

  return len;
 8040f5c:	687b      	ldr	r3, [r7, #4]
}
 8040f5e:	4618      	mov	r0, r3
 8040f60:	3718      	adds	r7, #24
 8040f62:	46bd      	mov	sp, r7
 8040f64:	bd80      	pop	{r7, pc}

08040f66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8040f66:	b580      	push	{r7, lr}
 8040f68:	b086      	sub	sp, #24
 8040f6a:	af00      	add	r7, sp, #0
 8040f6c:	60f8      	str	r0, [r7, #12]
 8040f6e:	60b9      	str	r1, [r7, #8]
 8040f70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040f72:	2300      	movs	r3, #0
 8040f74:	617b      	str	r3, [r7, #20]
 8040f76:	e009      	b.n	8040f8c <_write+0x26>
  {
  //  __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8040f78:	68bb      	ldr	r3, [r7, #8]
 8040f7a:	1c5a      	adds	r2, r3, #1
 8040f7c:	60ba      	str	r2, [r7, #8]
 8040f7e:	781b      	ldrb	r3, [r3, #0]
 8040f80:	4618      	mov	r0, r3
 8040f82:	f7ff ffab 	bl	8040edc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040f86:	697b      	ldr	r3, [r7, #20]
 8040f88:	3301      	adds	r3, #1
 8040f8a:	617b      	str	r3, [r7, #20]
 8040f8c:	697a      	ldr	r2, [r7, #20]
 8040f8e:	687b      	ldr	r3, [r7, #4]
 8040f90:	429a      	cmp	r2, r3
 8040f92:	dbf1      	blt.n	8040f78 <_write+0x12>
  }
  return len;
 8040f94:	687b      	ldr	r3, [r7, #4]
}
 8040f96:	4618      	mov	r0, r3
 8040f98:	3718      	adds	r7, #24
 8040f9a:	46bd      	mov	sp, r7
 8040f9c:	bd80      	pop	{r7, pc}

08040f9e <_close>:

int _close(int file)
{
 8040f9e:	b480      	push	{r7}
 8040fa0:	b083      	sub	sp, #12
 8040fa2:	af00      	add	r7, sp, #0
 8040fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8040fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8040faa:	4618      	mov	r0, r3
 8040fac:	370c      	adds	r7, #12
 8040fae:	46bd      	mov	sp, r7
 8040fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fb4:	4770      	bx	lr

08040fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8040fb6:	b480      	push	{r7}
 8040fb8:	b083      	sub	sp, #12
 8040fba:	af00      	add	r7, sp, #0
 8040fbc:	6078      	str	r0, [r7, #4]
 8040fbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8040fc0:	683b      	ldr	r3, [r7, #0]
 8040fc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8040fc6:	605a      	str	r2, [r3, #4]
  return 0;
 8040fc8:	2300      	movs	r3, #0
}
 8040fca:	4618      	mov	r0, r3
 8040fcc:	370c      	adds	r7, #12
 8040fce:	46bd      	mov	sp, r7
 8040fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fd4:	4770      	bx	lr

08040fd6 <_isatty>:

int _isatty(int file)
{
 8040fd6:	b480      	push	{r7}
 8040fd8:	b083      	sub	sp, #12
 8040fda:	af00      	add	r7, sp, #0
 8040fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8040fde:	2301      	movs	r3, #1
}
 8040fe0:	4618      	mov	r0, r3
 8040fe2:	370c      	adds	r7, #12
 8040fe4:	46bd      	mov	sp, r7
 8040fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fea:	4770      	bx	lr

08040fec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8040fec:	b480      	push	{r7}
 8040fee:	b085      	sub	sp, #20
 8040ff0:	af00      	add	r7, sp, #0
 8040ff2:	60f8      	str	r0, [r7, #12]
 8040ff4:	60b9      	str	r1, [r7, #8]
 8040ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8040ff8:	2300      	movs	r3, #0
}
 8040ffa:	4618      	mov	r0, r3
 8040ffc:	3714      	adds	r7, #20
 8040ffe:	46bd      	mov	sp, r7
 8041000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041004:	4770      	bx	lr
	...

08041008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8041008:	b580      	push	{r7, lr}
 804100a:	b086      	sub	sp, #24
 804100c:	af00      	add	r7, sp, #0
 804100e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8041010:	4a14      	ldr	r2, [pc, #80]	@ (8041064 <_sbrk+0x5c>)
 8041012:	4b15      	ldr	r3, [pc, #84]	@ (8041068 <_sbrk+0x60>)
 8041014:	1ad3      	subs	r3, r2, r3
 8041016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8041018:	697b      	ldr	r3, [r7, #20]
 804101a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 804101c:	4b13      	ldr	r3, [pc, #76]	@ (804106c <_sbrk+0x64>)
 804101e:	681b      	ldr	r3, [r3, #0]
 8041020:	2b00      	cmp	r3, #0
 8041022:	d102      	bne.n	804102a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8041024:	4b11      	ldr	r3, [pc, #68]	@ (804106c <_sbrk+0x64>)
 8041026:	4a12      	ldr	r2, [pc, #72]	@ (8041070 <_sbrk+0x68>)
 8041028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 804102a:	4b10      	ldr	r3, [pc, #64]	@ (804106c <_sbrk+0x64>)
 804102c:	681a      	ldr	r2, [r3, #0]
 804102e:	687b      	ldr	r3, [r7, #4]
 8041030:	4413      	add	r3, r2
 8041032:	693a      	ldr	r2, [r7, #16]
 8041034:	429a      	cmp	r2, r3
 8041036:	d207      	bcs.n	8041048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8041038:	f009 fecc 	bl	804add4 <__errno>
 804103c:	4603      	mov	r3, r0
 804103e:	220c      	movs	r2, #12
 8041040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8041042:	f04f 33ff 	mov.w	r3, #4294967295
 8041046:	e009      	b.n	804105c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8041048:	4b08      	ldr	r3, [pc, #32]	@ (804106c <_sbrk+0x64>)
 804104a:	681b      	ldr	r3, [r3, #0]
 804104c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 804104e:	4b07      	ldr	r3, [pc, #28]	@ (804106c <_sbrk+0x64>)
 8041050:	681a      	ldr	r2, [r3, #0]
 8041052:	687b      	ldr	r3, [r7, #4]
 8041054:	4413      	add	r3, r2
 8041056:	4a05      	ldr	r2, [pc, #20]	@ (804106c <_sbrk+0x64>)
 8041058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 804105a:	68fb      	ldr	r3, [r7, #12]
}
 804105c:	4618      	mov	r0, r3
 804105e:	3718      	adds	r7, #24
 8041060:	46bd      	mov	sp, r7
 8041062:	bd80      	pop	{r7, pc}
 8041064:	2407fffc 	.word	0x2407fffc
 8041068:	00000400 	.word	0x00000400
 804106c:	24000268 	.word	0x24000268
 8041070:	24000d98 	.word	0x24000d98

08041074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8041074:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80410b0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8041078:	f7ff fbca 	bl	8040810 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 804107c:	f7ff fb16 	bl	80406ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8041080:	480c      	ldr	r0, [pc, #48]	@ (80410b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8041082:	490d      	ldr	r1, [pc, #52]	@ (80410b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8041084:	4a0d      	ldr	r2, [pc, #52]	@ (80410bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8041086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8041088:	e002      	b.n	8041090 <LoopCopyDataInit>

0804108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 804108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 804108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 804108e:	3304      	adds	r3, #4

08041090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8041090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8041092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8041094:	d3f9      	bcc.n	804108a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8041096:	4a0a      	ldr	r2, [pc, #40]	@ (80410c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8041098:	4c0a      	ldr	r4, [pc, #40]	@ (80410c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 804109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 804109c:	e001      	b.n	80410a2 <LoopFillZerobss>

0804109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 804109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80410a0:	3204      	adds	r2, #4

080410a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80410a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80410a4:	d3fb      	bcc.n	804109e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80410a6:	f009 fe9b 	bl	804ade0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80410aa:	f7ff fbe5 	bl	8040878 <main>
  bx  lr
 80410ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80410b0:	2407fffc 	.word	0x2407fffc
  ldr r0, =_sdata
 80410b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80410b8:	24000180 	.word	0x24000180
  ldr r2, =_sidata
 80410bc:	0804baac 	.word	0x0804baac
  ldr r2, =_sbss
 80410c0:	24000180 	.word	0x24000180
  ldr r4, =_ebss
 80410c4:	24000d94 	.word	0x24000d94

080410c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80410c8:	e7fe      	b.n	80410c8 <ADC3_IRQHandler>
	...

080410cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80410cc:	b580      	push	{r7, lr}
 80410ce:	b082      	sub	sp, #8
 80410d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80410d2:	2003      	movs	r0, #3
 80410d4:	f000 f98c 	bl	80413f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80410d8:	f002 fe54 	bl	8043d84 <HAL_RCC_GetSysClockFreq>
 80410dc:	4602      	mov	r2, r0
 80410de:	4b15      	ldr	r3, [pc, #84]	@ (8041134 <HAL_Init+0x68>)
 80410e0:	699b      	ldr	r3, [r3, #24]
 80410e2:	0a1b      	lsrs	r3, r3, #8
 80410e4:	f003 030f 	and.w	r3, r3, #15
 80410e8:	4913      	ldr	r1, [pc, #76]	@ (8041138 <HAL_Init+0x6c>)
 80410ea:	5ccb      	ldrb	r3, [r1, r3]
 80410ec:	f003 031f 	and.w	r3, r3, #31
 80410f0:	fa22 f303 	lsr.w	r3, r2, r3
 80410f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80410f6:	4b0f      	ldr	r3, [pc, #60]	@ (8041134 <HAL_Init+0x68>)
 80410f8:	699b      	ldr	r3, [r3, #24]
 80410fa:	f003 030f 	and.w	r3, r3, #15
 80410fe:	4a0e      	ldr	r2, [pc, #56]	@ (8041138 <HAL_Init+0x6c>)
 8041100:	5cd3      	ldrb	r3, [r2, r3]
 8041102:	f003 031f 	and.w	r3, r3, #31
 8041106:	687a      	ldr	r2, [r7, #4]
 8041108:	fa22 f303 	lsr.w	r3, r2, r3
 804110c:	4a0b      	ldr	r2, [pc, #44]	@ (804113c <HAL_Init+0x70>)
 804110e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8041110:	4a0b      	ldr	r2, [pc, #44]	@ (8041140 <HAL_Init+0x74>)
 8041112:	687b      	ldr	r3, [r7, #4]
 8041114:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8041116:	2000      	movs	r0, #0
 8041118:	f000 f814 	bl	8041144 <HAL_InitTick>
 804111c:	4603      	mov	r3, r0
 804111e:	2b00      	cmp	r3, #0
 8041120:	d001      	beq.n	8041126 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8041122:	2301      	movs	r3, #1
 8041124:	e002      	b.n	804112c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8041126:	f7ff fdf1 	bl	8040d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 804112a:	2300      	movs	r3, #0
}
 804112c:	4618      	mov	r0, r3
 804112e:	3708      	adds	r7, #8
 8041130:	46bd      	mov	sp, r7
 8041132:	bd80      	pop	{r7, pc}
 8041134:	58024400 	.word	0x58024400
 8041138:	0804ba30 	.word	0x0804ba30
 804113c:	24000004 	.word	0x24000004
 8041140:	24000000 	.word	0x24000000

08041144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8041144:	b580      	push	{r7, lr}
 8041146:	b082      	sub	sp, #8
 8041148:	af00      	add	r7, sp, #0
 804114a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 804114c:	4b15      	ldr	r3, [pc, #84]	@ (80411a4 <HAL_InitTick+0x60>)
 804114e:	781b      	ldrb	r3, [r3, #0]
 8041150:	2b00      	cmp	r3, #0
 8041152:	d101      	bne.n	8041158 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8041154:	2301      	movs	r3, #1
 8041156:	e021      	b.n	804119c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8041158:	4b13      	ldr	r3, [pc, #76]	@ (80411a8 <HAL_InitTick+0x64>)
 804115a:	681a      	ldr	r2, [r3, #0]
 804115c:	4b11      	ldr	r3, [pc, #68]	@ (80411a4 <HAL_InitTick+0x60>)
 804115e:	781b      	ldrb	r3, [r3, #0]
 8041160:	4619      	mov	r1, r3
 8041162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8041166:	fbb3 f3f1 	udiv	r3, r3, r1
 804116a:	fbb2 f3f3 	udiv	r3, r2, r3
 804116e:	4618      	mov	r0, r3
 8041170:	f000 f971 	bl	8041456 <HAL_SYSTICK_Config>
 8041174:	4603      	mov	r3, r0
 8041176:	2b00      	cmp	r3, #0
 8041178:	d001      	beq.n	804117e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 804117a:	2301      	movs	r3, #1
 804117c:	e00e      	b.n	804119c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 804117e:	687b      	ldr	r3, [r7, #4]
 8041180:	2b0f      	cmp	r3, #15
 8041182:	d80a      	bhi.n	804119a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8041184:	2200      	movs	r2, #0
 8041186:	6879      	ldr	r1, [r7, #4]
 8041188:	f04f 30ff 	mov.w	r0, #4294967295
 804118c:	f000 f93b 	bl	8041406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8041190:	4a06      	ldr	r2, [pc, #24]	@ (80411ac <HAL_InitTick+0x68>)
 8041192:	687b      	ldr	r3, [r7, #4]
 8041194:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8041196:	2300      	movs	r3, #0
 8041198:	e000      	b.n	804119c <HAL_InitTick+0x58>
    return HAL_ERROR;
 804119a:	2301      	movs	r3, #1
}
 804119c:	4618      	mov	r0, r3
 804119e:	3708      	adds	r7, #8
 80411a0:	46bd      	mov	sp, r7
 80411a2:	bd80      	pop	{r7, pc}
 80411a4:	2400000c 	.word	0x2400000c
 80411a8:	24000000 	.word	0x24000000
 80411ac:	24000008 	.word	0x24000008

080411b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80411b0:	b480      	push	{r7}
 80411b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80411b4:	4b06      	ldr	r3, [pc, #24]	@ (80411d0 <HAL_IncTick+0x20>)
 80411b6:	781b      	ldrb	r3, [r3, #0]
 80411b8:	461a      	mov	r2, r3
 80411ba:	4b06      	ldr	r3, [pc, #24]	@ (80411d4 <HAL_IncTick+0x24>)
 80411bc:	681b      	ldr	r3, [r3, #0]
 80411be:	4413      	add	r3, r2
 80411c0:	4a04      	ldr	r2, [pc, #16]	@ (80411d4 <HAL_IncTick+0x24>)
 80411c2:	6013      	str	r3, [r2, #0]
}
 80411c4:	bf00      	nop
 80411c6:	46bd      	mov	sp, r7
 80411c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80411cc:	4770      	bx	lr
 80411ce:	bf00      	nop
 80411d0:	2400000c 	.word	0x2400000c
 80411d4:	2400026c 	.word	0x2400026c

080411d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80411d8:	b480      	push	{r7}
 80411da:	af00      	add	r7, sp, #0
  return uwTick;
 80411dc:	4b03      	ldr	r3, [pc, #12]	@ (80411ec <HAL_GetTick+0x14>)
 80411de:	681b      	ldr	r3, [r3, #0]
}
 80411e0:	4618      	mov	r0, r3
 80411e2:	46bd      	mov	sp, r7
 80411e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80411e8:	4770      	bx	lr
 80411ea:	bf00      	nop
 80411ec:	2400026c 	.word	0x2400026c

080411f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80411f0:	b580      	push	{r7, lr}
 80411f2:	b084      	sub	sp, #16
 80411f4:	af00      	add	r7, sp, #0
 80411f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80411f8:	f7ff ffee 	bl	80411d8 <HAL_GetTick>
 80411fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80411fe:	687b      	ldr	r3, [r7, #4]
 8041200:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8041202:	68fb      	ldr	r3, [r7, #12]
 8041204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8041208:	d005      	beq.n	8041216 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 804120a:	4b0a      	ldr	r3, [pc, #40]	@ (8041234 <HAL_Delay+0x44>)
 804120c:	781b      	ldrb	r3, [r3, #0]
 804120e:	461a      	mov	r2, r3
 8041210:	68fb      	ldr	r3, [r7, #12]
 8041212:	4413      	add	r3, r2
 8041214:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8041216:	bf00      	nop
 8041218:	f7ff ffde 	bl	80411d8 <HAL_GetTick>
 804121c:	4602      	mov	r2, r0
 804121e:	68bb      	ldr	r3, [r7, #8]
 8041220:	1ad3      	subs	r3, r2, r3
 8041222:	68fa      	ldr	r2, [r7, #12]
 8041224:	429a      	cmp	r2, r3
 8041226:	d8f7      	bhi.n	8041218 <HAL_Delay+0x28>
  {
  }
}
 8041228:	bf00      	nop
 804122a:	bf00      	nop
 804122c:	3710      	adds	r7, #16
 804122e:	46bd      	mov	sp, r7
 8041230:	bd80      	pop	{r7, pc}
 8041232:	bf00      	nop
 8041234:	2400000c 	.word	0x2400000c

08041238 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8041238:	b480      	push	{r7}
 804123a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 804123c:	4b03      	ldr	r3, [pc, #12]	@ (804124c <HAL_GetREVID+0x14>)
 804123e:	681b      	ldr	r3, [r3, #0]
 8041240:	0c1b      	lsrs	r3, r3, #16
}
 8041242:	4618      	mov	r0, r3
 8041244:	46bd      	mov	sp, r7
 8041246:	f85d 7b04 	ldr.w	r7, [sp], #4
 804124a:	4770      	bx	lr
 804124c:	5c001000 	.word	0x5c001000

08041250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8041250:	b480      	push	{r7}
 8041252:	b085      	sub	sp, #20
 8041254:	af00      	add	r7, sp, #0
 8041256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8041258:	687b      	ldr	r3, [r7, #4]
 804125a:	f003 0307 	and.w	r3, r3, #7
 804125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8041260:	4b0b      	ldr	r3, [pc, #44]	@ (8041290 <__NVIC_SetPriorityGrouping+0x40>)
 8041262:	68db      	ldr	r3, [r3, #12]
 8041264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8041266:	68ba      	ldr	r2, [r7, #8]
 8041268:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 804126c:	4013      	ands	r3, r2
 804126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8041270:	68fb      	ldr	r3, [r7, #12]
 8041272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8041274:	68bb      	ldr	r3, [r7, #8]
 8041276:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8041278:	4b06      	ldr	r3, [pc, #24]	@ (8041294 <__NVIC_SetPriorityGrouping+0x44>)
 804127a:	4313      	orrs	r3, r2
 804127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 804127e:	4a04      	ldr	r2, [pc, #16]	@ (8041290 <__NVIC_SetPriorityGrouping+0x40>)
 8041280:	68bb      	ldr	r3, [r7, #8]
 8041282:	60d3      	str	r3, [r2, #12]
}
 8041284:	bf00      	nop
 8041286:	3714      	adds	r7, #20
 8041288:	46bd      	mov	sp, r7
 804128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804128e:	4770      	bx	lr
 8041290:	e000ed00 	.word	0xe000ed00
 8041294:	05fa0000 	.word	0x05fa0000

08041298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8041298:	b480      	push	{r7}
 804129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 804129c:	4b04      	ldr	r3, [pc, #16]	@ (80412b0 <__NVIC_GetPriorityGrouping+0x18>)
 804129e:	68db      	ldr	r3, [r3, #12]
 80412a0:	0a1b      	lsrs	r3, r3, #8
 80412a2:	f003 0307 	and.w	r3, r3, #7
}
 80412a6:	4618      	mov	r0, r3
 80412a8:	46bd      	mov	sp, r7
 80412aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80412ae:	4770      	bx	lr
 80412b0:	e000ed00 	.word	0xe000ed00

080412b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80412b4:	b480      	push	{r7}
 80412b6:	b083      	sub	sp, #12
 80412b8:	af00      	add	r7, sp, #0
 80412ba:	4603      	mov	r3, r0
 80412bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80412be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80412c2:	2b00      	cmp	r3, #0
 80412c4:	db0b      	blt.n	80412de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80412c6:	88fb      	ldrh	r3, [r7, #6]
 80412c8:	f003 021f 	and.w	r2, r3, #31
 80412cc:	4907      	ldr	r1, [pc, #28]	@ (80412ec <__NVIC_EnableIRQ+0x38>)
 80412ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80412d2:	095b      	lsrs	r3, r3, #5
 80412d4:	2001      	movs	r0, #1
 80412d6:	fa00 f202 	lsl.w	r2, r0, r2
 80412da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80412de:	bf00      	nop
 80412e0:	370c      	adds	r7, #12
 80412e2:	46bd      	mov	sp, r7
 80412e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80412e8:	4770      	bx	lr
 80412ea:	bf00      	nop
 80412ec:	e000e100 	.word	0xe000e100

080412f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80412f0:	b480      	push	{r7}
 80412f2:	b083      	sub	sp, #12
 80412f4:	af00      	add	r7, sp, #0
 80412f6:	4603      	mov	r3, r0
 80412f8:	6039      	str	r1, [r7, #0]
 80412fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80412fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8041300:	2b00      	cmp	r3, #0
 8041302:	db0a      	blt.n	804131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041304:	683b      	ldr	r3, [r7, #0]
 8041306:	b2da      	uxtb	r2, r3
 8041308:	490c      	ldr	r1, [pc, #48]	@ (804133c <__NVIC_SetPriority+0x4c>)
 804130a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 804130e:	0112      	lsls	r2, r2, #4
 8041310:	b2d2      	uxtb	r2, r2
 8041312:	440b      	add	r3, r1
 8041314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8041318:	e00a      	b.n	8041330 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804131a:	683b      	ldr	r3, [r7, #0]
 804131c:	b2da      	uxtb	r2, r3
 804131e:	4908      	ldr	r1, [pc, #32]	@ (8041340 <__NVIC_SetPriority+0x50>)
 8041320:	88fb      	ldrh	r3, [r7, #6]
 8041322:	f003 030f 	and.w	r3, r3, #15
 8041326:	3b04      	subs	r3, #4
 8041328:	0112      	lsls	r2, r2, #4
 804132a:	b2d2      	uxtb	r2, r2
 804132c:	440b      	add	r3, r1
 804132e:	761a      	strb	r2, [r3, #24]
}
 8041330:	bf00      	nop
 8041332:	370c      	adds	r7, #12
 8041334:	46bd      	mov	sp, r7
 8041336:	f85d 7b04 	ldr.w	r7, [sp], #4
 804133a:	4770      	bx	lr
 804133c:	e000e100 	.word	0xe000e100
 8041340:	e000ed00 	.word	0xe000ed00

08041344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8041344:	b480      	push	{r7}
 8041346:	b089      	sub	sp, #36	@ 0x24
 8041348:	af00      	add	r7, sp, #0
 804134a:	60f8      	str	r0, [r7, #12]
 804134c:	60b9      	str	r1, [r7, #8]
 804134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8041350:	68fb      	ldr	r3, [r7, #12]
 8041352:	f003 0307 	and.w	r3, r3, #7
 8041356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8041358:	69fb      	ldr	r3, [r7, #28]
 804135a:	f1c3 0307 	rsb	r3, r3, #7
 804135e:	2b04      	cmp	r3, #4
 8041360:	bf28      	it	cs
 8041362:	2304      	movcs	r3, #4
 8041364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8041366:	69fb      	ldr	r3, [r7, #28]
 8041368:	3304      	adds	r3, #4
 804136a:	2b06      	cmp	r3, #6
 804136c:	d902      	bls.n	8041374 <NVIC_EncodePriority+0x30>
 804136e:	69fb      	ldr	r3, [r7, #28]
 8041370:	3b03      	subs	r3, #3
 8041372:	e000      	b.n	8041376 <NVIC_EncodePriority+0x32>
 8041374:	2300      	movs	r3, #0
 8041376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8041378:	f04f 32ff 	mov.w	r2, #4294967295
 804137c:	69bb      	ldr	r3, [r7, #24]
 804137e:	fa02 f303 	lsl.w	r3, r2, r3
 8041382:	43da      	mvns	r2, r3
 8041384:	68bb      	ldr	r3, [r7, #8]
 8041386:	401a      	ands	r2, r3
 8041388:	697b      	ldr	r3, [r7, #20]
 804138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 804138c:	f04f 31ff 	mov.w	r1, #4294967295
 8041390:	697b      	ldr	r3, [r7, #20]
 8041392:	fa01 f303 	lsl.w	r3, r1, r3
 8041396:	43d9      	mvns	r1, r3
 8041398:	687b      	ldr	r3, [r7, #4]
 804139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 804139c:	4313      	orrs	r3, r2
         );
}
 804139e:	4618      	mov	r0, r3
 80413a0:	3724      	adds	r7, #36	@ 0x24
 80413a2:	46bd      	mov	sp, r7
 80413a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80413a8:	4770      	bx	lr
	...

080413ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80413ac:	b580      	push	{r7, lr}
 80413ae:	b082      	sub	sp, #8
 80413b0:	af00      	add	r7, sp, #0
 80413b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80413b4:	687b      	ldr	r3, [r7, #4]
 80413b6:	3b01      	subs	r3, #1
 80413b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80413bc:	d301      	bcc.n	80413c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80413be:	2301      	movs	r3, #1
 80413c0:	e00f      	b.n	80413e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80413c2:	4a0a      	ldr	r2, [pc, #40]	@ (80413ec <SysTick_Config+0x40>)
 80413c4:	687b      	ldr	r3, [r7, #4]
 80413c6:	3b01      	subs	r3, #1
 80413c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80413ca:	210f      	movs	r1, #15
 80413cc:	f04f 30ff 	mov.w	r0, #4294967295
 80413d0:	f7ff ff8e 	bl	80412f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80413d4:	4b05      	ldr	r3, [pc, #20]	@ (80413ec <SysTick_Config+0x40>)
 80413d6:	2200      	movs	r2, #0
 80413d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80413da:	4b04      	ldr	r3, [pc, #16]	@ (80413ec <SysTick_Config+0x40>)
 80413dc:	2207      	movs	r2, #7
 80413de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80413e0:	2300      	movs	r3, #0
}
 80413e2:	4618      	mov	r0, r3
 80413e4:	3708      	adds	r7, #8
 80413e6:	46bd      	mov	sp, r7
 80413e8:	bd80      	pop	{r7, pc}
 80413ea:	bf00      	nop
 80413ec:	e000e010 	.word	0xe000e010

080413f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80413f0:	b580      	push	{r7, lr}
 80413f2:	b082      	sub	sp, #8
 80413f4:	af00      	add	r7, sp, #0
 80413f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80413f8:	6878      	ldr	r0, [r7, #4]
 80413fa:	f7ff ff29 	bl	8041250 <__NVIC_SetPriorityGrouping>
}
 80413fe:	bf00      	nop
 8041400:	3708      	adds	r7, #8
 8041402:	46bd      	mov	sp, r7
 8041404:	bd80      	pop	{r7, pc}

08041406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8041406:	b580      	push	{r7, lr}
 8041408:	b086      	sub	sp, #24
 804140a:	af00      	add	r7, sp, #0
 804140c:	4603      	mov	r3, r0
 804140e:	60b9      	str	r1, [r7, #8]
 8041410:	607a      	str	r2, [r7, #4]
 8041412:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8041414:	f7ff ff40 	bl	8041298 <__NVIC_GetPriorityGrouping>
 8041418:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 804141a:	687a      	ldr	r2, [r7, #4]
 804141c:	68b9      	ldr	r1, [r7, #8]
 804141e:	6978      	ldr	r0, [r7, #20]
 8041420:	f7ff ff90 	bl	8041344 <NVIC_EncodePriority>
 8041424:	4602      	mov	r2, r0
 8041426:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 804142a:	4611      	mov	r1, r2
 804142c:	4618      	mov	r0, r3
 804142e:	f7ff ff5f 	bl	80412f0 <__NVIC_SetPriority>
}
 8041432:	bf00      	nop
 8041434:	3718      	adds	r7, #24
 8041436:	46bd      	mov	sp, r7
 8041438:	bd80      	pop	{r7, pc}

0804143a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 804143a:	b580      	push	{r7, lr}
 804143c:	b082      	sub	sp, #8
 804143e:	af00      	add	r7, sp, #0
 8041440:	4603      	mov	r3, r0
 8041442:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8041444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8041448:	4618      	mov	r0, r3
 804144a:	f7ff ff33 	bl	80412b4 <__NVIC_EnableIRQ>
}
 804144e:	bf00      	nop
 8041450:	3708      	adds	r7, #8
 8041452:	46bd      	mov	sp, r7
 8041454:	bd80      	pop	{r7, pc}

08041456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8041456:	b580      	push	{r7, lr}
 8041458:	b082      	sub	sp, #8
 804145a:	af00      	add	r7, sp, #0
 804145c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 804145e:	6878      	ldr	r0, [r7, #4]
 8041460:	f7ff ffa4 	bl	80413ac <SysTick_Config>
 8041464:	4603      	mov	r3, r0
}
 8041466:	4618      	mov	r0, r3
 8041468:	3708      	adds	r7, #8
 804146a:	46bd      	mov	sp, r7
 804146c:	bd80      	pop	{r7, pc}
	...

08041470 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8041470:	b580      	push	{r7, lr}
 8041472:	b082      	sub	sp, #8
 8041474:	af00      	add	r7, sp, #0
 8041476:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8041478:	687b      	ldr	r3, [r7, #4]
 804147a:	2b00      	cmp	r3, #0
 804147c:	d101      	bne.n	8041482 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 804147e:	2301      	movs	r3, #1
 8041480:	e054      	b.n	804152c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8041482:	687b      	ldr	r3, [r7, #4]
 8041484:	7f5b      	ldrb	r3, [r3, #29]
 8041486:	b2db      	uxtb	r3, r3
 8041488:	2b00      	cmp	r3, #0
 804148a:	d105      	bne.n	8041498 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 804148c:	687b      	ldr	r3, [r7, #4]
 804148e:	2200      	movs	r2, #0
 8041490:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8041492:	6878      	ldr	r0, [r7, #4]
 8041494:	f7ff fc54 	bl	8040d40 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8041498:	687b      	ldr	r3, [r7, #4]
 804149a:	2202      	movs	r2, #2
 804149c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 804149e:	687b      	ldr	r3, [r7, #4]
 80414a0:	791b      	ldrb	r3, [r3, #4]
 80414a2:	2b00      	cmp	r3, #0
 80414a4:	d10c      	bne.n	80414c0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80414a6:	687b      	ldr	r3, [r7, #4]
 80414a8:	681b      	ldr	r3, [r3, #0]
 80414aa:	4a22      	ldr	r2, [pc, #136]	@ (8041534 <HAL_CRC_Init+0xc4>)
 80414ac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80414ae:	687b      	ldr	r3, [r7, #4]
 80414b0:	681b      	ldr	r3, [r3, #0]
 80414b2:	689a      	ldr	r2, [r3, #8]
 80414b4:	687b      	ldr	r3, [r7, #4]
 80414b6:	681b      	ldr	r3, [r3, #0]
 80414b8:	f022 0218 	bic.w	r2, r2, #24
 80414bc:	609a      	str	r2, [r3, #8]
 80414be:	e00c      	b.n	80414da <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80414c0:	687b      	ldr	r3, [r7, #4]
 80414c2:	6899      	ldr	r1, [r3, #8]
 80414c4:	687b      	ldr	r3, [r7, #4]
 80414c6:	68db      	ldr	r3, [r3, #12]
 80414c8:	461a      	mov	r2, r3
 80414ca:	6878      	ldr	r0, [r7, #4]
 80414cc:	f000 f834 	bl	8041538 <HAL_CRCEx_Polynomial_Set>
 80414d0:	4603      	mov	r3, r0
 80414d2:	2b00      	cmp	r3, #0
 80414d4:	d001      	beq.n	80414da <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80414d6:	2301      	movs	r3, #1
 80414d8:	e028      	b.n	804152c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80414da:	687b      	ldr	r3, [r7, #4]
 80414dc:	795b      	ldrb	r3, [r3, #5]
 80414de:	2b00      	cmp	r3, #0
 80414e0:	d105      	bne.n	80414ee <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80414e2:	687b      	ldr	r3, [r7, #4]
 80414e4:	681b      	ldr	r3, [r3, #0]
 80414e6:	f04f 32ff 	mov.w	r2, #4294967295
 80414ea:	611a      	str	r2, [r3, #16]
 80414ec:	e004      	b.n	80414f8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80414ee:	687b      	ldr	r3, [r7, #4]
 80414f0:	681b      	ldr	r3, [r3, #0]
 80414f2:	687a      	ldr	r2, [r7, #4]
 80414f4:	6912      	ldr	r2, [r2, #16]
 80414f6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80414f8:	687b      	ldr	r3, [r7, #4]
 80414fa:	681b      	ldr	r3, [r3, #0]
 80414fc:	689b      	ldr	r3, [r3, #8]
 80414fe:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8041502:	687b      	ldr	r3, [r7, #4]
 8041504:	695a      	ldr	r2, [r3, #20]
 8041506:	687b      	ldr	r3, [r7, #4]
 8041508:	681b      	ldr	r3, [r3, #0]
 804150a:	430a      	orrs	r2, r1
 804150c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 804150e:	687b      	ldr	r3, [r7, #4]
 8041510:	681b      	ldr	r3, [r3, #0]
 8041512:	689b      	ldr	r3, [r3, #8]
 8041514:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8041518:	687b      	ldr	r3, [r7, #4]
 804151a:	699a      	ldr	r2, [r3, #24]
 804151c:	687b      	ldr	r3, [r7, #4]
 804151e:	681b      	ldr	r3, [r3, #0]
 8041520:	430a      	orrs	r2, r1
 8041522:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8041524:	687b      	ldr	r3, [r7, #4]
 8041526:	2201      	movs	r2, #1
 8041528:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 804152a:	2300      	movs	r3, #0
}
 804152c:	4618      	mov	r0, r3
 804152e:	3708      	adds	r7, #8
 8041530:	46bd      	mov	sp, r7
 8041532:	bd80      	pop	{r7, pc}
 8041534:	04c11db7 	.word	0x04c11db7

08041538 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8041538:	b480      	push	{r7}
 804153a:	b087      	sub	sp, #28
 804153c:	af00      	add	r7, sp, #0
 804153e:	60f8      	str	r0, [r7, #12]
 8041540:	60b9      	str	r1, [r7, #8]
 8041542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8041544:	2300      	movs	r3, #0
 8041546:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8041548:	231f      	movs	r3, #31
 804154a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 804154c:	68bb      	ldr	r3, [r7, #8]
 804154e:	f003 0301 	and.w	r3, r3, #1
 8041552:	2b00      	cmp	r3, #0
 8041554:	d102      	bne.n	804155c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8041556:	2301      	movs	r3, #1
 8041558:	75fb      	strb	r3, [r7, #23]
 804155a:	e063      	b.n	8041624 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 804155c:	bf00      	nop
 804155e:	693b      	ldr	r3, [r7, #16]
 8041560:	1e5a      	subs	r2, r3, #1
 8041562:	613a      	str	r2, [r7, #16]
 8041564:	2b00      	cmp	r3, #0
 8041566:	d009      	beq.n	804157c <HAL_CRCEx_Polynomial_Set+0x44>
 8041568:	693b      	ldr	r3, [r7, #16]
 804156a:	f003 031f 	and.w	r3, r3, #31
 804156e:	68ba      	ldr	r2, [r7, #8]
 8041570:	fa22 f303 	lsr.w	r3, r2, r3
 8041574:	f003 0301 	and.w	r3, r3, #1
 8041578:	2b00      	cmp	r3, #0
 804157a:	d0f0      	beq.n	804155e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 804157c:	687b      	ldr	r3, [r7, #4]
 804157e:	2b18      	cmp	r3, #24
 8041580:	d846      	bhi.n	8041610 <HAL_CRCEx_Polynomial_Set+0xd8>
 8041582:	a201      	add	r2, pc, #4	@ (adr r2, 8041588 <HAL_CRCEx_Polynomial_Set+0x50>)
 8041584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8041588:	08041617 	.word	0x08041617
 804158c:	08041611 	.word	0x08041611
 8041590:	08041611 	.word	0x08041611
 8041594:	08041611 	.word	0x08041611
 8041598:	08041611 	.word	0x08041611
 804159c:	08041611 	.word	0x08041611
 80415a0:	08041611 	.word	0x08041611
 80415a4:	08041611 	.word	0x08041611
 80415a8:	08041605 	.word	0x08041605
 80415ac:	08041611 	.word	0x08041611
 80415b0:	08041611 	.word	0x08041611
 80415b4:	08041611 	.word	0x08041611
 80415b8:	08041611 	.word	0x08041611
 80415bc:	08041611 	.word	0x08041611
 80415c0:	08041611 	.word	0x08041611
 80415c4:	08041611 	.word	0x08041611
 80415c8:	080415f9 	.word	0x080415f9
 80415cc:	08041611 	.word	0x08041611
 80415d0:	08041611 	.word	0x08041611
 80415d4:	08041611 	.word	0x08041611
 80415d8:	08041611 	.word	0x08041611
 80415dc:	08041611 	.word	0x08041611
 80415e0:	08041611 	.word	0x08041611
 80415e4:	08041611 	.word	0x08041611
 80415e8:	080415ed 	.word	0x080415ed
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80415ec:	693b      	ldr	r3, [r7, #16]
 80415ee:	2b06      	cmp	r3, #6
 80415f0:	d913      	bls.n	804161a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80415f2:	2301      	movs	r3, #1
 80415f4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80415f6:	e010      	b.n	804161a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80415f8:	693b      	ldr	r3, [r7, #16]
 80415fa:	2b07      	cmp	r3, #7
 80415fc:	d90f      	bls.n	804161e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80415fe:	2301      	movs	r3, #1
 8041600:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8041602:	e00c      	b.n	804161e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8041604:	693b      	ldr	r3, [r7, #16]
 8041606:	2b0f      	cmp	r3, #15
 8041608:	d90b      	bls.n	8041622 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 804160a:	2301      	movs	r3, #1
 804160c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 804160e:	e008      	b.n	8041622 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8041610:	2301      	movs	r3, #1
 8041612:	75fb      	strb	r3, [r7, #23]
        break;
 8041614:	e006      	b.n	8041624 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8041616:	bf00      	nop
 8041618:	e004      	b.n	8041624 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 804161a:	bf00      	nop
 804161c:	e002      	b.n	8041624 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 804161e:	bf00      	nop
 8041620:	e000      	b.n	8041624 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8041622:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8041624:	7dfb      	ldrb	r3, [r7, #23]
 8041626:	2b00      	cmp	r3, #0
 8041628:	d10d      	bne.n	8041646 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 804162a:	68fb      	ldr	r3, [r7, #12]
 804162c:	681b      	ldr	r3, [r3, #0]
 804162e:	68ba      	ldr	r2, [r7, #8]
 8041630:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8041632:	68fb      	ldr	r3, [r7, #12]
 8041634:	681b      	ldr	r3, [r3, #0]
 8041636:	689b      	ldr	r3, [r3, #8]
 8041638:	f023 0118 	bic.w	r1, r3, #24
 804163c:	68fb      	ldr	r3, [r7, #12]
 804163e:	681b      	ldr	r3, [r3, #0]
 8041640:	687a      	ldr	r2, [r7, #4]
 8041642:	430a      	orrs	r2, r1
 8041644:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8041646:	7dfb      	ldrb	r3, [r7, #23]
}
 8041648:	4618      	mov	r0, r3
 804164a:	371c      	adds	r7, #28
 804164c:	46bd      	mov	sp, r7
 804164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041652:	4770      	bx	lr

08041654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8041654:	b480      	push	{r7}
 8041656:	b089      	sub	sp, #36	@ 0x24
 8041658:	af00      	add	r7, sp, #0
 804165a:	6078      	str	r0, [r7, #4]
 804165c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 804165e:	2300      	movs	r3, #0
 8041660:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8041662:	4b89      	ldr	r3, [pc, #548]	@ (8041888 <HAL_GPIO_Init+0x234>)
 8041664:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8041666:	e194      	b.n	8041992 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8041668:	683b      	ldr	r3, [r7, #0]
 804166a:	681a      	ldr	r2, [r3, #0]
 804166c:	2101      	movs	r1, #1
 804166e:	69fb      	ldr	r3, [r7, #28]
 8041670:	fa01 f303 	lsl.w	r3, r1, r3
 8041674:	4013      	ands	r3, r2
 8041676:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8041678:	693b      	ldr	r3, [r7, #16]
 804167a:	2b00      	cmp	r3, #0
 804167c:	f000 8186 	beq.w	804198c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8041680:	683b      	ldr	r3, [r7, #0]
 8041682:	685b      	ldr	r3, [r3, #4]
 8041684:	f003 0303 	and.w	r3, r3, #3
 8041688:	2b01      	cmp	r3, #1
 804168a:	d005      	beq.n	8041698 <HAL_GPIO_Init+0x44>
 804168c:	683b      	ldr	r3, [r7, #0]
 804168e:	685b      	ldr	r3, [r3, #4]
 8041690:	f003 0303 	and.w	r3, r3, #3
 8041694:	2b02      	cmp	r3, #2
 8041696:	d130      	bne.n	80416fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8041698:	687b      	ldr	r3, [r7, #4]
 804169a:	689b      	ldr	r3, [r3, #8]
 804169c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 804169e:	69fb      	ldr	r3, [r7, #28]
 80416a0:	005b      	lsls	r3, r3, #1
 80416a2:	2203      	movs	r2, #3
 80416a4:	fa02 f303 	lsl.w	r3, r2, r3
 80416a8:	43db      	mvns	r3, r3
 80416aa:	69ba      	ldr	r2, [r7, #24]
 80416ac:	4013      	ands	r3, r2
 80416ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80416b0:	683b      	ldr	r3, [r7, #0]
 80416b2:	68da      	ldr	r2, [r3, #12]
 80416b4:	69fb      	ldr	r3, [r7, #28]
 80416b6:	005b      	lsls	r3, r3, #1
 80416b8:	fa02 f303 	lsl.w	r3, r2, r3
 80416bc:	69ba      	ldr	r2, [r7, #24]
 80416be:	4313      	orrs	r3, r2
 80416c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80416c2:	687b      	ldr	r3, [r7, #4]
 80416c4:	69ba      	ldr	r2, [r7, #24]
 80416c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80416c8:	687b      	ldr	r3, [r7, #4]
 80416ca:	685b      	ldr	r3, [r3, #4]
 80416cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80416ce:	2201      	movs	r2, #1
 80416d0:	69fb      	ldr	r3, [r7, #28]
 80416d2:	fa02 f303 	lsl.w	r3, r2, r3
 80416d6:	43db      	mvns	r3, r3
 80416d8:	69ba      	ldr	r2, [r7, #24]
 80416da:	4013      	ands	r3, r2
 80416dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80416de:	683b      	ldr	r3, [r7, #0]
 80416e0:	685b      	ldr	r3, [r3, #4]
 80416e2:	091b      	lsrs	r3, r3, #4
 80416e4:	f003 0201 	and.w	r2, r3, #1
 80416e8:	69fb      	ldr	r3, [r7, #28]
 80416ea:	fa02 f303 	lsl.w	r3, r2, r3
 80416ee:	69ba      	ldr	r2, [r7, #24]
 80416f0:	4313      	orrs	r3, r2
 80416f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80416f4:	687b      	ldr	r3, [r7, #4]
 80416f6:	69ba      	ldr	r2, [r7, #24]
 80416f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80416fa:	683b      	ldr	r3, [r7, #0]
 80416fc:	685b      	ldr	r3, [r3, #4]
 80416fe:	f003 0303 	and.w	r3, r3, #3
 8041702:	2b03      	cmp	r3, #3
 8041704:	d017      	beq.n	8041736 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8041706:	687b      	ldr	r3, [r7, #4]
 8041708:	68db      	ldr	r3, [r3, #12]
 804170a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 804170c:	69fb      	ldr	r3, [r7, #28]
 804170e:	005b      	lsls	r3, r3, #1
 8041710:	2203      	movs	r2, #3
 8041712:	fa02 f303 	lsl.w	r3, r2, r3
 8041716:	43db      	mvns	r3, r3
 8041718:	69ba      	ldr	r2, [r7, #24]
 804171a:	4013      	ands	r3, r2
 804171c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 804171e:	683b      	ldr	r3, [r7, #0]
 8041720:	689a      	ldr	r2, [r3, #8]
 8041722:	69fb      	ldr	r3, [r7, #28]
 8041724:	005b      	lsls	r3, r3, #1
 8041726:	fa02 f303 	lsl.w	r3, r2, r3
 804172a:	69ba      	ldr	r2, [r7, #24]
 804172c:	4313      	orrs	r3, r2
 804172e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8041730:	687b      	ldr	r3, [r7, #4]
 8041732:	69ba      	ldr	r2, [r7, #24]
 8041734:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8041736:	683b      	ldr	r3, [r7, #0]
 8041738:	685b      	ldr	r3, [r3, #4]
 804173a:	f003 0303 	and.w	r3, r3, #3
 804173e:	2b02      	cmp	r3, #2
 8041740:	d123      	bne.n	804178a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8041742:	69fb      	ldr	r3, [r7, #28]
 8041744:	08da      	lsrs	r2, r3, #3
 8041746:	687b      	ldr	r3, [r7, #4]
 8041748:	3208      	adds	r2, #8
 804174a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804174e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8041750:	69fb      	ldr	r3, [r7, #28]
 8041752:	f003 0307 	and.w	r3, r3, #7
 8041756:	009b      	lsls	r3, r3, #2
 8041758:	220f      	movs	r2, #15
 804175a:	fa02 f303 	lsl.w	r3, r2, r3
 804175e:	43db      	mvns	r3, r3
 8041760:	69ba      	ldr	r2, [r7, #24]
 8041762:	4013      	ands	r3, r2
 8041764:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8041766:	683b      	ldr	r3, [r7, #0]
 8041768:	691a      	ldr	r2, [r3, #16]
 804176a:	69fb      	ldr	r3, [r7, #28]
 804176c:	f003 0307 	and.w	r3, r3, #7
 8041770:	009b      	lsls	r3, r3, #2
 8041772:	fa02 f303 	lsl.w	r3, r2, r3
 8041776:	69ba      	ldr	r2, [r7, #24]
 8041778:	4313      	orrs	r3, r2
 804177a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 804177c:	69fb      	ldr	r3, [r7, #28]
 804177e:	08da      	lsrs	r2, r3, #3
 8041780:	687b      	ldr	r3, [r7, #4]
 8041782:	3208      	adds	r2, #8
 8041784:	69b9      	ldr	r1, [r7, #24]
 8041786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 804178a:	687b      	ldr	r3, [r7, #4]
 804178c:	681b      	ldr	r3, [r3, #0]
 804178e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8041790:	69fb      	ldr	r3, [r7, #28]
 8041792:	005b      	lsls	r3, r3, #1
 8041794:	2203      	movs	r2, #3
 8041796:	fa02 f303 	lsl.w	r3, r2, r3
 804179a:	43db      	mvns	r3, r3
 804179c:	69ba      	ldr	r2, [r7, #24]
 804179e:	4013      	ands	r3, r2
 80417a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80417a2:	683b      	ldr	r3, [r7, #0]
 80417a4:	685b      	ldr	r3, [r3, #4]
 80417a6:	f003 0203 	and.w	r2, r3, #3
 80417aa:	69fb      	ldr	r3, [r7, #28]
 80417ac:	005b      	lsls	r3, r3, #1
 80417ae:	fa02 f303 	lsl.w	r3, r2, r3
 80417b2:	69ba      	ldr	r2, [r7, #24]
 80417b4:	4313      	orrs	r3, r2
 80417b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80417b8:	687b      	ldr	r3, [r7, #4]
 80417ba:	69ba      	ldr	r2, [r7, #24]
 80417bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80417be:	683b      	ldr	r3, [r7, #0]
 80417c0:	685b      	ldr	r3, [r3, #4]
 80417c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80417c6:	2b00      	cmp	r3, #0
 80417c8:	f000 80e0 	beq.w	804198c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80417cc:	4b2f      	ldr	r3, [pc, #188]	@ (804188c <HAL_GPIO_Init+0x238>)
 80417ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80417d2:	4a2e      	ldr	r2, [pc, #184]	@ (804188c <HAL_GPIO_Init+0x238>)
 80417d4:	f043 0302 	orr.w	r3, r3, #2
 80417d8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80417dc:	4b2b      	ldr	r3, [pc, #172]	@ (804188c <HAL_GPIO_Init+0x238>)
 80417de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80417e2:	f003 0302 	and.w	r3, r3, #2
 80417e6:	60fb      	str	r3, [r7, #12]
 80417e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80417ea:	4a29      	ldr	r2, [pc, #164]	@ (8041890 <HAL_GPIO_Init+0x23c>)
 80417ec:	69fb      	ldr	r3, [r7, #28]
 80417ee:	089b      	lsrs	r3, r3, #2
 80417f0:	3302      	adds	r3, #2
 80417f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80417f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80417f8:	69fb      	ldr	r3, [r7, #28]
 80417fa:	f003 0303 	and.w	r3, r3, #3
 80417fe:	009b      	lsls	r3, r3, #2
 8041800:	220f      	movs	r2, #15
 8041802:	fa02 f303 	lsl.w	r3, r2, r3
 8041806:	43db      	mvns	r3, r3
 8041808:	69ba      	ldr	r2, [r7, #24]
 804180a:	4013      	ands	r3, r2
 804180c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 804180e:	687b      	ldr	r3, [r7, #4]
 8041810:	4a20      	ldr	r2, [pc, #128]	@ (8041894 <HAL_GPIO_Init+0x240>)
 8041812:	4293      	cmp	r3, r2
 8041814:	d052      	beq.n	80418bc <HAL_GPIO_Init+0x268>
 8041816:	687b      	ldr	r3, [r7, #4]
 8041818:	4a1f      	ldr	r2, [pc, #124]	@ (8041898 <HAL_GPIO_Init+0x244>)
 804181a:	4293      	cmp	r3, r2
 804181c:	d031      	beq.n	8041882 <HAL_GPIO_Init+0x22e>
 804181e:	687b      	ldr	r3, [r7, #4]
 8041820:	4a1e      	ldr	r2, [pc, #120]	@ (804189c <HAL_GPIO_Init+0x248>)
 8041822:	4293      	cmp	r3, r2
 8041824:	d02b      	beq.n	804187e <HAL_GPIO_Init+0x22a>
 8041826:	687b      	ldr	r3, [r7, #4]
 8041828:	4a1d      	ldr	r2, [pc, #116]	@ (80418a0 <HAL_GPIO_Init+0x24c>)
 804182a:	4293      	cmp	r3, r2
 804182c:	d025      	beq.n	804187a <HAL_GPIO_Init+0x226>
 804182e:	687b      	ldr	r3, [r7, #4]
 8041830:	4a1c      	ldr	r2, [pc, #112]	@ (80418a4 <HAL_GPIO_Init+0x250>)
 8041832:	4293      	cmp	r3, r2
 8041834:	d01f      	beq.n	8041876 <HAL_GPIO_Init+0x222>
 8041836:	687b      	ldr	r3, [r7, #4]
 8041838:	4a1b      	ldr	r2, [pc, #108]	@ (80418a8 <HAL_GPIO_Init+0x254>)
 804183a:	4293      	cmp	r3, r2
 804183c:	d019      	beq.n	8041872 <HAL_GPIO_Init+0x21e>
 804183e:	687b      	ldr	r3, [r7, #4]
 8041840:	4a1a      	ldr	r2, [pc, #104]	@ (80418ac <HAL_GPIO_Init+0x258>)
 8041842:	4293      	cmp	r3, r2
 8041844:	d013      	beq.n	804186e <HAL_GPIO_Init+0x21a>
 8041846:	687b      	ldr	r3, [r7, #4]
 8041848:	4a19      	ldr	r2, [pc, #100]	@ (80418b0 <HAL_GPIO_Init+0x25c>)
 804184a:	4293      	cmp	r3, r2
 804184c:	d00d      	beq.n	804186a <HAL_GPIO_Init+0x216>
 804184e:	687b      	ldr	r3, [r7, #4]
 8041850:	4a18      	ldr	r2, [pc, #96]	@ (80418b4 <HAL_GPIO_Init+0x260>)
 8041852:	4293      	cmp	r3, r2
 8041854:	d007      	beq.n	8041866 <HAL_GPIO_Init+0x212>
 8041856:	687b      	ldr	r3, [r7, #4]
 8041858:	4a17      	ldr	r2, [pc, #92]	@ (80418b8 <HAL_GPIO_Init+0x264>)
 804185a:	4293      	cmp	r3, r2
 804185c:	d101      	bne.n	8041862 <HAL_GPIO_Init+0x20e>
 804185e:	2309      	movs	r3, #9
 8041860:	e02d      	b.n	80418be <HAL_GPIO_Init+0x26a>
 8041862:	230a      	movs	r3, #10
 8041864:	e02b      	b.n	80418be <HAL_GPIO_Init+0x26a>
 8041866:	2308      	movs	r3, #8
 8041868:	e029      	b.n	80418be <HAL_GPIO_Init+0x26a>
 804186a:	2307      	movs	r3, #7
 804186c:	e027      	b.n	80418be <HAL_GPIO_Init+0x26a>
 804186e:	2306      	movs	r3, #6
 8041870:	e025      	b.n	80418be <HAL_GPIO_Init+0x26a>
 8041872:	2305      	movs	r3, #5
 8041874:	e023      	b.n	80418be <HAL_GPIO_Init+0x26a>
 8041876:	2304      	movs	r3, #4
 8041878:	e021      	b.n	80418be <HAL_GPIO_Init+0x26a>
 804187a:	2303      	movs	r3, #3
 804187c:	e01f      	b.n	80418be <HAL_GPIO_Init+0x26a>
 804187e:	2302      	movs	r3, #2
 8041880:	e01d      	b.n	80418be <HAL_GPIO_Init+0x26a>
 8041882:	2301      	movs	r3, #1
 8041884:	e01b      	b.n	80418be <HAL_GPIO_Init+0x26a>
 8041886:	bf00      	nop
 8041888:	58000080 	.word	0x58000080
 804188c:	58024400 	.word	0x58024400
 8041890:	58000400 	.word	0x58000400
 8041894:	58020000 	.word	0x58020000
 8041898:	58020400 	.word	0x58020400
 804189c:	58020800 	.word	0x58020800
 80418a0:	58020c00 	.word	0x58020c00
 80418a4:	58021000 	.word	0x58021000
 80418a8:	58021400 	.word	0x58021400
 80418ac:	58021800 	.word	0x58021800
 80418b0:	58021c00 	.word	0x58021c00
 80418b4:	58022000 	.word	0x58022000
 80418b8:	58022400 	.word	0x58022400
 80418bc:	2300      	movs	r3, #0
 80418be:	69fa      	ldr	r2, [r7, #28]
 80418c0:	f002 0203 	and.w	r2, r2, #3
 80418c4:	0092      	lsls	r2, r2, #2
 80418c6:	4093      	lsls	r3, r2
 80418c8:	69ba      	ldr	r2, [r7, #24]
 80418ca:	4313      	orrs	r3, r2
 80418cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80418ce:	4938      	ldr	r1, [pc, #224]	@ (80419b0 <HAL_GPIO_Init+0x35c>)
 80418d0:	69fb      	ldr	r3, [r7, #28]
 80418d2:	089b      	lsrs	r3, r3, #2
 80418d4:	3302      	adds	r3, #2
 80418d6:	69ba      	ldr	r2, [r7, #24]
 80418d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80418dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80418e0:	681b      	ldr	r3, [r3, #0]
 80418e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80418e4:	693b      	ldr	r3, [r7, #16]
 80418e6:	43db      	mvns	r3, r3
 80418e8:	69ba      	ldr	r2, [r7, #24]
 80418ea:	4013      	ands	r3, r2
 80418ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80418ee:	683b      	ldr	r3, [r7, #0]
 80418f0:	685b      	ldr	r3, [r3, #4]
 80418f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80418f6:	2b00      	cmp	r3, #0
 80418f8:	d003      	beq.n	8041902 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80418fa:	69ba      	ldr	r2, [r7, #24]
 80418fc:	693b      	ldr	r3, [r7, #16]
 80418fe:	4313      	orrs	r3, r2
 8041900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8041902:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8041906:	69bb      	ldr	r3, [r7, #24]
 8041908:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 804190a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 804190e:	685b      	ldr	r3, [r3, #4]
 8041910:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041912:	693b      	ldr	r3, [r7, #16]
 8041914:	43db      	mvns	r3, r3
 8041916:	69ba      	ldr	r2, [r7, #24]
 8041918:	4013      	ands	r3, r2
 804191a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 804191c:	683b      	ldr	r3, [r7, #0]
 804191e:	685b      	ldr	r3, [r3, #4]
 8041920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8041924:	2b00      	cmp	r3, #0
 8041926:	d003      	beq.n	8041930 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8041928:	69ba      	ldr	r2, [r7, #24]
 804192a:	693b      	ldr	r3, [r7, #16]
 804192c:	4313      	orrs	r3, r2
 804192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8041930:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8041934:	69bb      	ldr	r3, [r7, #24]
 8041936:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8041938:	697b      	ldr	r3, [r7, #20]
 804193a:	685b      	ldr	r3, [r3, #4]
 804193c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 804193e:	693b      	ldr	r3, [r7, #16]
 8041940:	43db      	mvns	r3, r3
 8041942:	69ba      	ldr	r2, [r7, #24]
 8041944:	4013      	ands	r3, r2
 8041946:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8041948:	683b      	ldr	r3, [r7, #0]
 804194a:	685b      	ldr	r3, [r3, #4]
 804194c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041950:	2b00      	cmp	r3, #0
 8041952:	d003      	beq.n	804195c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8041954:	69ba      	ldr	r2, [r7, #24]
 8041956:	693b      	ldr	r3, [r7, #16]
 8041958:	4313      	orrs	r3, r2
 804195a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 804195c:	697b      	ldr	r3, [r7, #20]
 804195e:	69ba      	ldr	r2, [r7, #24]
 8041960:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8041962:	697b      	ldr	r3, [r7, #20]
 8041964:	681b      	ldr	r3, [r3, #0]
 8041966:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041968:	693b      	ldr	r3, [r7, #16]
 804196a:	43db      	mvns	r3, r3
 804196c:	69ba      	ldr	r2, [r7, #24]
 804196e:	4013      	ands	r3, r2
 8041970:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8041972:	683b      	ldr	r3, [r7, #0]
 8041974:	685b      	ldr	r3, [r3, #4]
 8041976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 804197a:	2b00      	cmp	r3, #0
 804197c:	d003      	beq.n	8041986 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 804197e:	69ba      	ldr	r2, [r7, #24]
 8041980:	693b      	ldr	r3, [r7, #16]
 8041982:	4313      	orrs	r3, r2
 8041984:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8041986:	697b      	ldr	r3, [r7, #20]
 8041988:	69ba      	ldr	r2, [r7, #24]
 804198a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 804198c:	69fb      	ldr	r3, [r7, #28]
 804198e:	3301      	adds	r3, #1
 8041990:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8041992:	683b      	ldr	r3, [r7, #0]
 8041994:	681a      	ldr	r2, [r3, #0]
 8041996:	69fb      	ldr	r3, [r7, #28]
 8041998:	fa22 f303 	lsr.w	r3, r2, r3
 804199c:	2b00      	cmp	r3, #0
 804199e:	f47f ae63 	bne.w	8041668 <HAL_GPIO_Init+0x14>
  }
}
 80419a2:	bf00      	nop
 80419a4:	bf00      	nop
 80419a6:	3724      	adds	r7, #36	@ 0x24
 80419a8:	46bd      	mov	sp, r7
 80419aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419ae:	4770      	bx	lr
 80419b0:	58000400 	.word	0x58000400

080419b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80419b4:	b480      	push	{r7}
 80419b6:	b083      	sub	sp, #12
 80419b8:	af00      	add	r7, sp, #0
 80419ba:	6078      	str	r0, [r7, #4]
 80419bc:	460b      	mov	r3, r1
 80419be:	807b      	strh	r3, [r7, #2]
 80419c0:	4613      	mov	r3, r2
 80419c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80419c4:	787b      	ldrb	r3, [r7, #1]
 80419c6:	2b00      	cmp	r3, #0
 80419c8:	d003      	beq.n	80419d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80419ca:	887a      	ldrh	r2, [r7, #2]
 80419cc:	687b      	ldr	r3, [r7, #4]
 80419ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80419d0:	e003      	b.n	80419da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80419d2:	887b      	ldrh	r3, [r7, #2]
 80419d4:	041a      	lsls	r2, r3, #16
 80419d6:	687b      	ldr	r3, [r7, #4]
 80419d8:	619a      	str	r2, [r3, #24]
}
 80419da:	bf00      	nop
 80419dc:	370c      	adds	r7, #12
 80419de:	46bd      	mov	sp, r7
 80419e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419e4:	4770      	bx	lr

080419e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80419e6:	b480      	push	{r7}
 80419e8:	b085      	sub	sp, #20
 80419ea:	af00      	add	r7, sp, #0
 80419ec:	6078      	str	r0, [r7, #4]
 80419ee:	460b      	mov	r3, r1
 80419f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80419f2:	687b      	ldr	r3, [r7, #4]
 80419f4:	695b      	ldr	r3, [r3, #20]
 80419f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80419f8:	887a      	ldrh	r2, [r7, #2]
 80419fa:	68fb      	ldr	r3, [r7, #12]
 80419fc:	4013      	ands	r3, r2
 80419fe:	041a      	lsls	r2, r3, #16
 8041a00:	68fb      	ldr	r3, [r7, #12]
 8041a02:	43d9      	mvns	r1, r3
 8041a04:	887b      	ldrh	r3, [r7, #2]
 8041a06:	400b      	ands	r3, r1
 8041a08:	431a      	orrs	r2, r3
 8041a0a:	687b      	ldr	r3, [r7, #4]
 8041a0c:	619a      	str	r2, [r3, #24]
}
 8041a0e:	bf00      	nop
 8041a10:	3714      	adds	r7, #20
 8041a12:	46bd      	mov	sp, r7
 8041a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a18:	4770      	bx	lr

08041a1a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8041a1a:	b580      	push	{r7, lr}
 8041a1c:	b082      	sub	sp, #8
 8041a1e:	af00      	add	r7, sp, #0
 8041a20:	4603      	mov	r3, r0
 8041a22:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8041a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8041a28:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8041a2c:	88fb      	ldrh	r3, [r7, #6]
 8041a2e:	4013      	ands	r3, r2
 8041a30:	2b00      	cmp	r3, #0
 8041a32:	d008      	beq.n	8041a46 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8041a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8041a38:	88fb      	ldrh	r3, [r7, #6]
 8041a3a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8041a3e:	88fb      	ldrh	r3, [r7, #6]
 8041a40:	4618      	mov	r0, r3
 8041a42:	f7fe fefd 	bl	8040840 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8041a46:	bf00      	nop
 8041a48:	3708      	adds	r7, #8
 8041a4a:	46bd      	mov	sp, r7
 8041a4c:	bd80      	pop	{r7, pc}
	...

08041a50 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8041a50:	b480      	push	{r7}
 8041a52:	b083      	sub	sp, #12
 8041a54:	af00      	add	r7, sp, #0
 8041a56:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8041a58:	4a08      	ldr	r2, [pc, #32]	@ (8041a7c <HAL_HSEM_FastTake+0x2c>)
 8041a5a:	687b      	ldr	r3, [r7, #4]
 8041a5c:	3320      	adds	r3, #32
 8041a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041a62:	4a07      	ldr	r2, [pc, #28]	@ (8041a80 <HAL_HSEM_FastTake+0x30>)
 8041a64:	4293      	cmp	r3, r2
 8041a66:	d101      	bne.n	8041a6c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8041a68:	2300      	movs	r3, #0
 8041a6a:	e000      	b.n	8041a6e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8041a6c:	2301      	movs	r3, #1
}
 8041a6e:	4618      	mov	r0, r3
 8041a70:	370c      	adds	r7, #12
 8041a72:	46bd      	mov	sp, r7
 8041a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a78:	4770      	bx	lr
 8041a7a:	bf00      	nop
 8041a7c:	58026400 	.word	0x58026400
 8041a80:	80000300 	.word	0x80000300

08041a84 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8041a84:	b480      	push	{r7}
 8041a86:	b083      	sub	sp, #12
 8041a88:	af00      	add	r7, sp, #0
 8041a8a:	6078      	str	r0, [r7, #4]
 8041a8c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8041a8e:	4906      	ldr	r1, [pc, #24]	@ (8041aa8 <HAL_HSEM_Release+0x24>)
 8041a90:	683b      	ldr	r3, [r7, #0]
 8041a92:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8041a96:	687b      	ldr	r3, [r7, #4]
 8041a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8041a9c:	bf00      	nop
 8041a9e:	370c      	adds	r7, #12
 8041aa0:	46bd      	mov	sp, r7
 8041aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041aa6:	4770      	bx	lr
 8041aa8:	58026400 	.word	0x58026400

08041aac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8041aac:	b580      	push	{r7, lr}
 8041aae:	b086      	sub	sp, #24
 8041ab0:	af02      	add	r7, sp, #8
 8041ab2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8041ab4:	687b      	ldr	r3, [r7, #4]
 8041ab6:	2b00      	cmp	r3, #0
 8041ab8:	d101      	bne.n	8041abe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8041aba:	2301      	movs	r3, #1
 8041abc:	e0fe      	b.n	8041cbc <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8041abe:	687b      	ldr	r3, [r7, #4]
 8041ac0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8041ac4:	b2db      	uxtb	r3, r3
 8041ac6:	2b00      	cmp	r3, #0
 8041ac8:	d106      	bne.n	8041ad8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8041aca:	687b      	ldr	r3, [r7, #4]
 8041acc:	2200      	movs	r2, #0
 8041ace:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8041ad2:	6878      	ldr	r0, [r7, #4]
 8041ad4:	f008 fc3e 	bl	804a354 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8041ad8:	687b      	ldr	r3, [r7, #4]
 8041ada:	2203      	movs	r2, #3
 8041adc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8041ae0:	687b      	ldr	r3, [r7, #4]
 8041ae2:	681b      	ldr	r3, [r3, #0]
 8041ae4:	4618      	mov	r0, r3
 8041ae6:	f005 fb90 	bl	804720a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8041aea:	687b      	ldr	r3, [r7, #4]
 8041aec:	6818      	ldr	r0, [r3, #0]
 8041aee:	687b      	ldr	r3, [r7, #4]
 8041af0:	7c1a      	ldrb	r2, [r3, #16]
 8041af2:	f88d 2000 	strb.w	r2, [sp]
 8041af6:	3304      	adds	r3, #4
 8041af8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8041afa:	f005 fa61 	bl	8046fc0 <USB_CoreInit>
 8041afe:	4603      	mov	r3, r0
 8041b00:	2b00      	cmp	r3, #0
 8041b02:	d005      	beq.n	8041b10 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8041b04:	687b      	ldr	r3, [r7, #4]
 8041b06:	2202      	movs	r2, #2
 8041b08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8041b0c:	2301      	movs	r3, #1
 8041b0e:	e0d5      	b.n	8041cbc <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8041b10:	687b      	ldr	r3, [r7, #4]
 8041b12:	681b      	ldr	r3, [r3, #0]
 8041b14:	2100      	movs	r1, #0
 8041b16:	4618      	mov	r0, r3
 8041b18:	f005 fb88 	bl	804722c <USB_SetCurrentMode>
 8041b1c:	4603      	mov	r3, r0
 8041b1e:	2b00      	cmp	r3, #0
 8041b20:	d005      	beq.n	8041b2e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8041b22:	687b      	ldr	r3, [r7, #4]
 8041b24:	2202      	movs	r2, #2
 8041b26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8041b2a:	2301      	movs	r3, #1
 8041b2c:	e0c6      	b.n	8041cbc <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041b2e:	2300      	movs	r3, #0
 8041b30:	73fb      	strb	r3, [r7, #15]
 8041b32:	e04a      	b.n	8041bca <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8041b34:	7bfa      	ldrb	r2, [r7, #15]
 8041b36:	6879      	ldr	r1, [r7, #4]
 8041b38:	4613      	mov	r3, r2
 8041b3a:	00db      	lsls	r3, r3, #3
 8041b3c:	4413      	add	r3, r2
 8041b3e:	009b      	lsls	r3, r3, #2
 8041b40:	440b      	add	r3, r1
 8041b42:	3315      	adds	r3, #21
 8041b44:	2201      	movs	r2, #1
 8041b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8041b48:	7bfa      	ldrb	r2, [r7, #15]
 8041b4a:	6879      	ldr	r1, [r7, #4]
 8041b4c:	4613      	mov	r3, r2
 8041b4e:	00db      	lsls	r3, r3, #3
 8041b50:	4413      	add	r3, r2
 8041b52:	009b      	lsls	r3, r3, #2
 8041b54:	440b      	add	r3, r1
 8041b56:	3314      	adds	r3, #20
 8041b58:	7bfa      	ldrb	r2, [r7, #15]
 8041b5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8041b5c:	7bfa      	ldrb	r2, [r7, #15]
 8041b5e:	7bfb      	ldrb	r3, [r7, #15]
 8041b60:	b298      	uxth	r0, r3
 8041b62:	6879      	ldr	r1, [r7, #4]
 8041b64:	4613      	mov	r3, r2
 8041b66:	00db      	lsls	r3, r3, #3
 8041b68:	4413      	add	r3, r2
 8041b6a:	009b      	lsls	r3, r3, #2
 8041b6c:	440b      	add	r3, r1
 8041b6e:	332e      	adds	r3, #46	@ 0x2e
 8041b70:	4602      	mov	r2, r0
 8041b72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8041b74:	7bfa      	ldrb	r2, [r7, #15]
 8041b76:	6879      	ldr	r1, [r7, #4]
 8041b78:	4613      	mov	r3, r2
 8041b7a:	00db      	lsls	r3, r3, #3
 8041b7c:	4413      	add	r3, r2
 8041b7e:	009b      	lsls	r3, r3, #2
 8041b80:	440b      	add	r3, r1
 8041b82:	3318      	adds	r3, #24
 8041b84:	2200      	movs	r2, #0
 8041b86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8041b88:	7bfa      	ldrb	r2, [r7, #15]
 8041b8a:	6879      	ldr	r1, [r7, #4]
 8041b8c:	4613      	mov	r3, r2
 8041b8e:	00db      	lsls	r3, r3, #3
 8041b90:	4413      	add	r3, r2
 8041b92:	009b      	lsls	r3, r3, #2
 8041b94:	440b      	add	r3, r1
 8041b96:	331c      	adds	r3, #28
 8041b98:	2200      	movs	r2, #0
 8041b9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8041b9c:	7bfa      	ldrb	r2, [r7, #15]
 8041b9e:	6879      	ldr	r1, [r7, #4]
 8041ba0:	4613      	mov	r3, r2
 8041ba2:	00db      	lsls	r3, r3, #3
 8041ba4:	4413      	add	r3, r2
 8041ba6:	009b      	lsls	r3, r3, #2
 8041ba8:	440b      	add	r3, r1
 8041baa:	3320      	adds	r3, #32
 8041bac:	2200      	movs	r2, #0
 8041bae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8041bb0:	7bfa      	ldrb	r2, [r7, #15]
 8041bb2:	6879      	ldr	r1, [r7, #4]
 8041bb4:	4613      	mov	r3, r2
 8041bb6:	00db      	lsls	r3, r3, #3
 8041bb8:	4413      	add	r3, r2
 8041bba:	009b      	lsls	r3, r3, #2
 8041bbc:	440b      	add	r3, r1
 8041bbe:	3324      	adds	r3, #36	@ 0x24
 8041bc0:	2200      	movs	r2, #0
 8041bc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041bc4:	7bfb      	ldrb	r3, [r7, #15]
 8041bc6:	3301      	adds	r3, #1
 8041bc8:	73fb      	strb	r3, [r7, #15]
 8041bca:	687b      	ldr	r3, [r7, #4]
 8041bcc:	791b      	ldrb	r3, [r3, #4]
 8041bce:	7bfa      	ldrb	r2, [r7, #15]
 8041bd0:	429a      	cmp	r2, r3
 8041bd2:	d3af      	bcc.n	8041b34 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041bd4:	2300      	movs	r3, #0
 8041bd6:	73fb      	strb	r3, [r7, #15]
 8041bd8:	e044      	b.n	8041c64 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8041bda:	7bfa      	ldrb	r2, [r7, #15]
 8041bdc:	6879      	ldr	r1, [r7, #4]
 8041bde:	4613      	mov	r3, r2
 8041be0:	00db      	lsls	r3, r3, #3
 8041be2:	4413      	add	r3, r2
 8041be4:	009b      	lsls	r3, r3, #2
 8041be6:	440b      	add	r3, r1
 8041be8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8041bec:	2200      	movs	r2, #0
 8041bee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8041bf0:	7bfa      	ldrb	r2, [r7, #15]
 8041bf2:	6879      	ldr	r1, [r7, #4]
 8041bf4:	4613      	mov	r3, r2
 8041bf6:	00db      	lsls	r3, r3, #3
 8041bf8:	4413      	add	r3, r2
 8041bfa:	009b      	lsls	r3, r3, #2
 8041bfc:	440b      	add	r3, r1
 8041bfe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8041c02:	7bfa      	ldrb	r2, [r7, #15]
 8041c04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8041c06:	7bfa      	ldrb	r2, [r7, #15]
 8041c08:	6879      	ldr	r1, [r7, #4]
 8041c0a:	4613      	mov	r3, r2
 8041c0c:	00db      	lsls	r3, r3, #3
 8041c0e:	4413      	add	r3, r2
 8041c10:	009b      	lsls	r3, r3, #2
 8041c12:	440b      	add	r3, r1
 8041c14:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8041c18:	2200      	movs	r2, #0
 8041c1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8041c1c:	7bfa      	ldrb	r2, [r7, #15]
 8041c1e:	6879      	ldr	r1, [r7, #4]
 8041c20:	4613      	mov	r3, r2
 8041c22:	00db      	lsls	r3, r3, #3
 8041c24:	4413      	add	r3, r2
 8041c26:	009b      	lsls	r3, r3, #2
 8041c28:	440b      	add	r3, r1
 8041c2a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8041c2e:	2200      	movs	r2, #0
 8041c30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8041c32:	7bfa      	ldrb	r2, [r7, #15]
 8041c34:	6879      	ldr	r1, [r7, #4]
 8041c36:	4613      	mov	r3, r2
 8041c38:	00db      	lsls	r3, r3, #3
 8041c3a:	4413      	add	r3, r2
 8041c3c:	009b      	lsls	r3, r3, #2
 8041c3e:	440b      	add	r3, r1
 8041c40:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8041c44:	2200      	movs	r2, #0
 8041c46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8041c48:	7bfa      	ldrb	r2, [r7, #15]
 8041c4a:	6879      	ldr	r1, [r7, #4]
 8041c4c:	4613      	mov	r3, r2
 8041c4e:	00db      	lsls	r3, r3, #3
 8041c50:	4413      	add	r3, r2
 8041c52:	009b      	lsls	r3, r3, #2
 8041c54:	440b      	add	r3, r1
 8041c56:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8041c5a:	2200      	movs	r2, #0
 8041c5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041c5e:	7bfb      	ldrb	r3, [r7, #15]
 8041c60:	3301      	adds	r3, #1
 8041c62:	73fb      	strb	r3, [r7, #15]
 8041c64:	687b      	ldr	r3, [r7, #4]
 8041c66:	791b      	ldrb	r3, [r3, #4]
 8041c68:	7bfa      	ldrb	r2, [r7, #15]
 8041c6a:	429a      	cmp	r2, r3
 8041c6c:	d3b5      	bcc.n	8041bda <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8041c6e:	687b      	ldr	r3, [r7, #4]
 8041c70:	6818      	ldr	r0, [r3, #0]
 8041c72:	687b      	ldr	r3, [r7, #4]
 8041c74:	7c1a      	ldrb	r2, [r3, #16]
 8041c76:	f88d 2000 	strb.w	r2, [sp]
 8041c7a:	3304      	adds	r3, #4
 8041c7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8041c7e:	f005 fb21 	bl	80472c4 <USB_DevInit>
 8041c82:	4603      	mov	r3, r0
 8041c84:	2b00      	cmp	r3, #0
 8041c86:	d005      	beq.n	8041c94 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8041c88:	687b      	ldr	r3, [r7, #4]
 8041c8a:	2202      	movs	r2, #2
 8041c8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8041c90:	2301      	movs	r3, #1
 8041c92:	e013      	b.n	8041cbc <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8041c94:	687b      	ldr	r3, [r7, #4]
 8041c96:	2200      	movs	r2, #0
 8041c98:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8041c9a:	687b      	ldr	r3, [r7, #4]
 8041c9c:	2201      	movs	r2, #1
 8041c9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8041ca2:	687b      	ldr	r3, [r7, #4]
 8041ca4:	7b1b      	ldrb	r3, [r3, #12]
 8041ca6:	2b01      	cmp	r3, #1
 8041ca8:	d102      	bne.n	8041cb0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8041caa:	6878      	ldr	r0, [r7, #4]
 8041cac:	f001 f956 	bl	8042f5c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8041cb0:	687b      	ldr	r3, [r7, #4]
 8041cb2:	681b      	ldr	r3, [r3, #0]
 8041cb4:	4618      	mov	r0, r3
 8041cb6:	f006 fb64 	bl	8048382 <USB_DevDisconnect>

  return HAL_OK;
 8041cba:	2300      	movs	r3, #0
}
 8041cbc:	4618      	mov	r0, r3
 8041cbe:	3710      	adds	r7, #16
 8041cc0:	46bd      	mov	sp, r7
 8041cc2:	bd80      	pop	{r7, pc}

08041cc4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8041cc4:	b580      	push	{r7, lr}
 8041cc6:	b084      	sub	sp, #16
 8041cc8:	af00      	add	r7, sp, #0
 8041cca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8041ccc:	687b      	ldr	r3, [r7, #4]
 8041cce:	681b      	ldr	r3, [r3, #0]
 8041cd0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8041cd2:	687b      	ldr	r3, [r7, #4]
 8041cd4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8041cd8:	2b01      	cmp	r3, #1
 8041cda:	d101      	bne.n	8041ce0 <HAL_PCD_Start+0x1c>
 8041cdc:	2302      	movs	r3, #2
 8041cde:	e022      	b.n	8041d26 <HAL_PCD_Start+0x62>
 8041ce0:	687b      	ldr	r3, [r7, #4]
 8041ce2:	2201      	movs	r2, #1
 8041ce4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8041ce8:	68fb      	ldr	r3, [r7, #12]
 8041cea:	68db      	ldr	r3, [r3, #12]
 8041cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8041cf0:	2b00      	cmp	r3, #0
 8041cf2:	d009      	beq.n	8041d08 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8041cf4:	687b      	ldr	r3, [r7, #4]
 8041cf6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8041cf8:	2b01      	cmp	r3, #1
 8041cfa:	d105      	bne.n	8041d08 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8041cfc:	68fb      	ldr	r3, [r7, #12]
 8041cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8041d00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8041d04:	68fb      	ldr	r3, [r7, #12]
 8041d06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8041d08:	687b      	ldr	r3, [r7, #4]
 8041d0a:	681b      	ldr	r3, [r3, #0]
 8041d0c:	4618      	mov	r0, r3
 8041d0e:	f005 fa6b 	bl	80471e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8041d12:	687b      	ldr	r3, [r7, #4]
 8041d14:	681b      	ldr	r3, [r3, #0]
 8041d16:	4618      	mov	r0, r3
 8041d18:	f006 fb12 	bl	8048340 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8041d1c:	687b      	ldr	r3, [r7, #4]
 8041d1e:	2200      	movs	r2, #0
 8041d20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8041d24:	2300      	movs	r3, #0
}
 8041d26:	4618      	mov	r0, r3
 8041d28:	3710      	adds	r7, #16
 8041d2a:	46bd      	mov	sp, r7
 8041d2c:	bd80      	pop	{r7, pc}

08041d2e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8041d2e:	b590      	push	{r4, r7, lr}
 8041d30:	b08d      	sub	sp, #52	@ 0x34
 8041d32:	af00      	add	r7, sp, #0
 8041d34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8041d36:	687b      	ldr	r3, [r7, #4]
 8041d38:	681b      	ldr	r3, [r3, #0]
 8041d3a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8041d3c:	6a3b      	ldr	r3, [r7, #32]
 8041d3e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8041d40:	687b      	ldr	r3, [r7, #4]
 8041d42:	681b      	ldr	r3, [r3, #0]
 8041d44:	4618      	mov	r0, r3
 8041d46:	f006 fbd0 	bl	80484ea <USB_GetMode>
 8041d4a:	4603      	mov	r3, r0
 8041d4c:	2b00      	cmp	r3, #0
 8041d4e:	f040 84b9 	bne.w	80426c4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8041d52:	687b      	ldr	r3, [r7, #4]
 8041d54:	681b      	ldr	r3, [r3, #0]
 8041d56:	4618      	mov	r0, r3
 8041d58:	f006 fb34 	bl	80483c4 <USB_ReadInterrupts>
 8041d5c:	4603      	mov	r3, r0
 8041d5e:	2b00      	cmp	r3, #0
 8041d60:	f000 84af 	beq.w	80426c2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8041d64:	69fb      	ldr	r3, [r7, #28]
 8041d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041d6a:	689b      	ldr	r3, [r3, #8]
 8041d6c:	0a1b      	lsrs	r3, r3, #8
 8041d6e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8041d72:	687b      	ldr	r3, [r7, #4]
 8041d74:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8041d78:	687b      	ldr	r3, [r7, #4]
 8041d7a:	681b      	ldr	r3, [r3, #0]
 8041d7c:	4618      	mov	r0, r3
 8041d7e:	f006 fb21 	bl	80483c4 <USB_ReadInterrupts>
 8041d82:	4603      	mov	r3, r0
 8041d84:	f003 0302 	and.w	r3, r3, #2
 8041d88:	2b02      	cmp	r3, #2
 8041d8a:	d107      	bne.n	8041d9c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8041d8c:	687b      	ldr	r3, [r7, #4]
 8041d8e:	681b      	ldr	r3, [r3, #0]
 8041d90:	695a      	ldr	r2, [r3, #20]
 8041d92:	687b      	ldr	r3, [r7, #4]
 8041d94:	681b      	ldr	r3, [r3, #0]
 8041d96:	f002 0202 	and.w	r2, r2, #2
 8041d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8041d9c:	687b      	ldr	r3, [r7, #4]
 8041d9e:	681b      	ldr	r3, [r3, #0]
 8041da0:	4618      	mov	r0, r3
 8041da2:	f006 fb0f 	bl	80483c4 <USB_ReadInterrupts>
 8041da6:	4603      	mov	r3, r0
 8041da8:	f003 0310 	and.w	r3, r3, #16
 8041dac:	2b10      	cmp	r3, #16
 8041dae:	d161      	bne.n	8041e74 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8041db0:	687b      	ldr	r3, [r7, #4]
 8041db2:	681b      	ldr	r3, [r3, #0]
 8041db4:	699a      	ldr	r2, [r3, #24]
 8041db6:	687b      	ldr	r3, [r7, #4]
 8041db8:	681b      	ldr	r3, [r3, #0]
 8041dba:	f022 0210 	bic.w	r2, r2, #16
 8041dbe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8041dc0:	6a3b      	ldr	r3, [r7, #32]
 8041dc2:	6a1b      	ldr	r3, [r3, #32]
 8041dc4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8041dc6:	69bb      	ldr	r3, [r7, #24]
 8041dc8:	f003 020f 	and.w	r2, r3, #15
 8041dcc:	4613      	mov	r3, r2
 8041dce:	00db      	lsls	r3, r3, #3
 8041dd0:	4413      	add	r3, r2
 8041dd2:	009b      	lsls	r3, r3, #2
 8041dd4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8041dd8:	687a      	ldr	r2, [r7, #4]
 8041dda:	4413      	add	r3, r2
 8041ddc:	3304      	adds	r3, #4
 8041dde:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8041de0:	69bb      	ldr	r3, [r7, #24]
 8041de2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8041de6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8041dea:	d124      	bne.n	8041e36 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8041dec:	69ba      	ldr	r2, [r7, #24]
 8041dee:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8041df2:	4013      	ands	r3, r2
 8041df4:	2b00      	cmp	r3, #0
 8041df6:	d035      	beq.n	8041e64 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8041df8:	697b      	ldr	r3, [r7, #20]
 8041dfa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8041dfc:	69bb      	ldr	r3, [r7, #24]
 8041dfe:	091b      	lsrs	r3, r3, #4
 8041e00:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8041e02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041e06:	b29b      	uxth	r3, r3
 8041e08:	461a      	mov	r2, r3
 8041e0a:	6a38      	ldr	r0, [r7, #32]
 8041e0c:	f006 f946 	bl	804809c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8041e10:	697b      	ldr	r3, [r7, #20]
 8041e12:	68da      	ldr	r2, [r3, #12]
 8041e14:	69bb      	ldr	r3, [r7, #24]
 8041e16:	091b      	lsrs	r3, r3, #4
 8041e18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041e1c:	441a      	add	r2, r3
 8041e1e:	697b      	ldr	r3, [r7, #20]
 8041e20:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8041e22:	697b      	ldr	r3, [r7, #20]
 8041e24:	695a      	ldr	r2, [r3, #20]
 8041e26:	69bb      	ldr	r3, [r7, #24]
 8041e28:	091b      	lsrs	r3, r3, #4
 8041e2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041e2e:	441a      	add	r2, r3
 8041e30:	697b      	ldr	r3, [r7, #20]
 8041e32:	615a      	str	r2, [r3, #20]
 8041e34:	e016      	b.n	8041e64 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8041e36:	69bb      	ldr	r3, [r7, #24]
 8041e38:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8041e3c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8041e40:	d110      	bne.n	8041e64 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8041e42:	687b      	ldr	r3, [r7, #4]
 8041e44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8041e48:	2208      	movs	r2, #8
 8041e4a:	4619      	mov	r1, r3
 8041e4c:	6a38      	ldr	r0, [r7, #32]
 8041e4e:	f006 f925 	bl	804809c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8041e52:	697b      	ldr	r3, [r7, #20]
 8041e54:	695a      	ldr	r2, [r3, #20]
 8041e56:	69bb      	ldr	r3, [r7, #24]
 8041e58:	091b      	lsrs	r3, r3, #4
 8041e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041e5e:	441a      	add	r2, r3
 8041e60:	697b      	ldr	r3, [r7, #20]
 8041e62:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8041e64:	687b      	ldr	r3, [r7, #4]
 8041e66:	681b      	ldr	r3, [r3, #0]
 8041e68:	699a      	ldr	r2, [r3, #24]
 8041e6a:	687b      	ldr	r3, [r7, #4]
 8041e6c:	681b      	ldr	r3, [r3, #0]
 8041e6e:	f042 0210 	orr.w	r2, r2, #16
 8041e72:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8041e74:	687b      	ldr	r3, [r7, #4]
 8041e76:	681b      	ldr	r3, [r3, #0]
 8041e78:	4618      	mov	r0, r3
 8041e7a:	f006 faa3 	bl	80483c4 <USB_ReadInterrupts>
 8041e7e:	4603      	mov	r3, r0
 8041e80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8041e84:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8041e88:	f040 80a7 	bne.w	8041fda <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8041e8c:	2300      	movs	r3, #0
 8041e8e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8041e90:	687b      	ldr	r3, [r7, #4]
 8041e92:	681b      	ldr	r3, [r3, #0]
 8041e94:	4618      	mov	r0, r3
 8041e96:	f006 faa8 	bl	80483ea <USB_ReadDevAllOutEpInterrupt>
 8041e9a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8041e9c:	e099      	b.n	8041fd2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8041e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041ea0:	f003 0301 	and.w	r3, r3, #1
 8041ea4:	2b00      	cmp	r3, #0
 8041ea6:	f000 808e 	beq.w	8041fc6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8041eaa:	687b      	ldr	r3, [r7, #4]
 8041eac:	681b      	ldr	r3, [r3, #0]
 8041eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041eb0:	b2d2      	uxtb	r2, r2
 8041eb2:	4611      	mov	r1, r2
 8041eb4:	4618      	mov	r0, r3
 8041eb6:	f006 facc 	bl	8048452 <USB_ReadDevOutEPInterrupt>
 8041eba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8041ebc:	693b      	ldr	r3, [r7, #16]
 8041ebe:	f003 0301 	and.w	r3, r3, #1
 8041ec2:	2b00      	cmp	r3, #0
 8041ec4:	d00c      	beq.n	8041ee0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8041ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041ec8:	015a      	lsls	r2, r3, #5
 8041eca:	69fb      	ldr	r3, [r7, #28]
 8041ecc:	4413      	add	r3, r2
 8041ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041ed2:	461a      	mov	r2, r3
 8041ed4:	2301      	movs	r3, #1
 8041ed6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8041ed8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8041eda:	6878      	ldr	r0, [r7, #4]
 8041edc:	f000 feb8 	bl	8042c50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8041ee0:	693b      	ldr	r3, [r7, #16]
 8041ee2:	f003 0308 	and.w	r3, r3, #8
 8041ee6:	2b00      	cmp	r3, #0
 8041ee8:	d00c      	beq.n	8041f04 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8041eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041eec:	015a      	lsls	r2, r3, #5
 8041eee:	69fb      	ldr	r3, [r7, #28]
 8041ef0:	4413      	add	r3, r2
 8041ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041ef6:	461a      	mov	r2, r3
 8041ef8:	2308      	movs	r3, #8
 8041efa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8041efc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8041efe:	6878      	ldr	r0, [r7, #4]
 8041f00:	f000 ff8e 	bl	8042e20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8041f04:	693b      	ldr	r3, [r7, #16]
 8041f06:	f003 0310 	and.w	r3, r3, #16
 8041f0a:	2b00      	cmp	r3, #0
 8041f0c:	d008      	beq.n	8041f20 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8041f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041f10:	015a      	lsls	r2, r3, #5
 8041f12:	69fb      	ldr	r3, [r7, #28]
 8041f14:	4413      	add	r3, r2
 8041f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041f1a:	461a      	mov	r2, r3
 8041f1c:	2310      	movs	r3, #16
 8041f1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8041f20:	693b      	ldr	r3, [r7, #16]
 8041f22:	f003 0302 	and.w	r3, r3, #2
 8041f26:	2b00      	cmp	r3, #0
 8041f28:	d030      	beq.n	8041f8c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8041f2a:	6a3b      	ldr	r3, [r7, #32]
 8041f2c:	695b      	ldr	r3, [r3, #20]
 8041f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8041f32:	2b80      	cmp	r3, #128	@ 0x80
 8041f34:	d109      	bne.n	8041f4a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8041f36:	69fb      	ldr	r3, [r7, #28]
 8041f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041f3c:	685b      	ldr	r3, [r3, #4]
 8041f3e:	69fa      	ldr	r2, [r7, #28]
 8041f40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8041f44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8041f48:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8041f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041f4c:	4613      	mov	r3, r2
 8041f4e:	00db      	lsls	r3, r3, #3
 8041f50:	4413      	add	r3, r2
 8041f52:	009b      	lsls	r3, r3, #2
 8041f54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8041f58:	687a      	ldr	r2, [r7, #4]
 8041f5a:	4413      	add	r3, r2
 8041f5c:	3304      	adds	r3, #4
 8041f5e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8041f60:	697b      	ldr	r3, [r7, #20]
 8041f62:	78db      	ldrb	r3, [r3, #3]
 8041f64:	2b01      	cmp	r3, #1
 8041f66:	d108      	bne.n	8041f7a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8041f68:	697b      	ldr	r3, [r7, #20]
 8041f6a:	2200      	movs	r2, #0
 8041f6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8041f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041f70:	b2db      	uxtb	r3, r3
 8041f72:	4619      	mov	r1, r3
 8041f74:	6878      	ldr	r0, [r7, #4]
 8041f76:	f008 fbc5 	bl	804a704 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8041f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041f7c:	015a      	lsls	r2, r3, #5
 8041f7e:	69fb      	ldr	r3, [r7, #28]
 8041f80:	4413      	add	r3, r2
 8041f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041f86:	461a      	mov	r2, r3
 8041f88:	2302      	movs	r3, #2
 8041f8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8041f8c:	693b      	ldr	r3, [r7, #16]
 8041f8e:	f003 0320 	and.w	r3, r3, #32
 8041f92:	2b00      	cmp	r3, #0
 8041f94:	d008      	beq.n	8041fa8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8041f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041f98:	015a      	lsls	r2, r3, #5
 8041f9a:	69fb      	ldr	r3, [r7, #28]
 8041f9c:	4413      	add	r3, r2
 8041f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041fa2:	461a      	mov	r2, r3
 8041fa4:	2320      	movs	r3, #32
 8041fa6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8041fa8:	693b      	ldr	r3, [r7, #16]
 8041faa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8041fae:	2b00      	cmp	r3, #0
 8041fb0:	d009      	beq.n	8041fc6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8041fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041fb4:	015a      	lsls	r2, r3, #5
 8041fb6:	69fb      	ldr	r3, [r7, #28]
 8041fb8:	4413      	add	r3, r2
 8041fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041fbe:	461a      	mov	r2, r3
 8041fc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8041fc4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8041fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041fc8:	3301      	adds	r3, #1
 8041fca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8041fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041fce:	085b      	lsrs	r3, r3, #1
 8041fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8041fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041fd4:	2b00      	cmp	r3, #0
 8041fd6:	f47f af62 	bne.w	8041e9e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8041fda:	687b      	ldr	r3, [r7, #4]
 8041fdc:	681b      	ldr	r3, [r3, #0]
 8041fde:	4618      	mov	r0, r3
 8041fe0:	f006 f9f0 	bl	80483c4 <USB_ReadInterrupts>
 8041fe4:	4603      	mov	r3, r0
 8041fe6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8041fea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8041fee:	f040 80db 	bne.w	80421a8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8041ff2:	687b      	ldr	r3, [r7, #4]
 8041ff4:	681b      	ldr	r3, [r3, #0]
 8041ff6:	4618      	mov	r0, r3
 8041ff8:	f006 fa11 	bl	804841e <USB_ReadDevAllInEpInterrupt>
 8041ffc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8041ffe:	2300      	movs	r3, #0
 8042000:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8042002:	e0cd      	b.n	80421a0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8042004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8042006:	f003 0301 	and.w	r3, r3, #1
 804200a:	2b00      	cmp	r3, #0
 804200c:	f000 80c2 	beq.w	8042194 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8042010:	687b      	ldr	r3, [r7, #4]
 8042012:	681b      	ldr	r3, [r3, #0]
 8042014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042016:	b2d2      	uxtb	r2, r2
 8042018:	4611      	mov	r1, r2
 804201a:	4618      	mov	r0, r3
 804201c:	f006 fa37 	bl	804848e <USB_ReadDevInEPInterrupt>
 8042020:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8042022:	693b      	ldr	r3, [r7, #16]
 8042024:	f003 0301 	and.w	r3, r3, #1
 8042028:	2b00      	cmp	r3, #0
 804202a:	d057      	beq.n	80420dc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 804202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804202e:	f003 030f 	and.w	r3, r3, #15
 8042032:	2201      	movs	r2, #1
 8042034:	fa02 f303 	lsl.w	r3, r2, r3
 8042038:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 804203a:	69fb      	ldr	r3, [r7, #28]
 804203c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042040:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8042042:	68fb      	ldr	r3, [r7, #12]
 8042044:	43db      	mvns	r3, r3
 8042046:	69f9      	ldr	r1, [r7, #28]
 8042048:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 804204c:	4013      	ands	r3, r2
 804204e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8042050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042052:	015a      	lsls	r2, r3, #5
 8042054:	69fb      	ldr	r3, [r7, #28]
 8042056:	4413      	add	r3, r2
 8042058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804205c:	461a      	mov	r2, r3
 804205e:	2301      	movs	r3, #1
 8042060:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8042062:	687b      	ldr	r3, [r7, #4]
 8042064:	799b      	ldrb	r3, [r3, #6]
 8042066:	2b01      	cmp	r3, #1
 8042068:	d132      	bne.n	80420d0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 804206a:	6879      	ldr	r1, [r7, #4]
 804206c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 804206e:	4613      	mov	r3, r2
 8042070:	00db      	lsls	r3, r3, #3
 8042072:	4413      	add	r3, r2
 8042074:	009b      	lsls	r3, r3, #2
 8042076:	440b      	add	r3, r1
 8042078:	3320      	adds	r3, #32
 804207a:	6819      	ldr	r1, [r3, #0]
 804207c:	6878      	ldr	r0, [r7, #4]
 804207e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042080:	4613      	mov	r3, r2
 8042082:	00db      	lsls	r3, r3, #3
 8042084:	4413      	add	r3, r2
 8042086:	009b      	lsls	r3, r3, #2
 8042088:	4403      	add	r3, r0
 804208a:	331c      	adds	r3, #28
 804208c:	681b      	ldr	r3, [r3, #0]
 804208e:	4419      	add	r1, r3
 8042090:	6878      	ldr	r0, [r7, #4]
 8042092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042094:	4613      	mov	r3, r2
 8042096:	00db      	lsls	r3, r3, #3
 8042098:	4413      	add	r3, r2
 804209a:	009b      	lsls	r3, r3, #2
 804209c:	4403      	add	r3, r0
 804209e:	3320      	adds	r3, #32
 80420a0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80420a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80420a4:	2b00      	cmp	r3, #0
 80420a6:	d113      	bne.n	80420d0 <HAL_PCD_IRQHandler+0x3a2>
 80420a8:	6879      	ldr	r1, [r7, #4]
 80420aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80420ac:	4613      	mov	r3, r2
 80420ae:	00db      	lsls	r3, r3, #3
 80420b0:	4413      	add	r3, r2
 80420b2:	009b      	lsls	r3, r3, #2
 80420b4:	440b      	add	r3, r1
 80420b6:	3324      	adds	r3, #36	@ 0x24
 80420b8:	681b      	ldr	r3, [r3, #0]
 80420ba:	2b00      	cmp	r3, #0
 80420bc:	d108      	bne.n	80420d0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80420be:	687b      	ldr	r3, [r7, #4]
 80420c0:	6818      	ldr	r0, [r3, #0]
 80420c2:	687b      	ldr	r3, [r7, #4]
 80420c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80420c8:	461a      	mov	r2, r3
 80420ca:	2101      	movs	r1, #1
 80420cc:	f006 fa40 	bl	8048550 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80420d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80420d2:	b2db      	uxtb	r3, r3
 80420d4:	4619      	mov	r1, r3
 80420d6:	6878      	ldr	r0, [r7, #4]
 80420d8:	f008 fa8f 	bl	804a5fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80420dc:	693b      	ldr	r3, [r7, #16]
 80420de:	f003 0308 	and.w	r3, r3, #8
 80420e2:	2b00      	cmp	r3, #0
 80420e4:	d008      	beq.n	80420f8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80420e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80420e8:	015a      	lsls	r2, r3, #5
 80420ea:	69fb      	ldr	r3, [r7, #28]
 80420ec:	4413      	add	r3, r2
 80420ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80420f2:	461a      	mov	r2, r3
 80420f4:	2308      	movs	r3, #8
 80420f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80420f8:	693b      	ldr	r3, [r7, #16]
 80420fa:	f003 0310 	and.w	r3, r3, #16
 80420fe:	2b00      	cmp	r3, #0
 8042100:	d008      	beq.n	8042114 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8042102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042104:	015a      	lsls	r2, r3, #5
 8042106:	69fb      	ldr	r3, [r7, #28]
 8042108:	4413      	add	r3, r2
 804210a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804210e:	461a      	mov	r2, r3
 8042110:	2310      	movs	r3, #16
 8042112:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8042114:	693b      	ldr	r3, [r7, #16]
 8042116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 804211a:	2b00      	cmp	r3, #0
 804211c:	d008      	beq.n	8042130 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 804211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042120:	015a      	lsls	r2, r3, #5
 8042122:	69fb      	ldr	r3, [r7, #28]
 8042124:	4413      	add	r3, r2
 8042126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804212a:	461a      	mov	r2, r3
 804212c:	2340      	movs	r3, #64	@ 0x40
 804212e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8042130:	693b      	ldr	r3, [r7, #16]
 8042132:	f003 0302 	and.w	r3, r3, #2
 8042136:	2b00      	cmp	r3, #0
 8042138:	d023      	beq.n	8042182 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 804213a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 804213c:	6a38      	ldr	r0, [r7, #32]
 804213e:	f005 fa1f 	bl	8047580 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8042142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042144:	4613      	mov	r3, r2
 8042146:	00db      	lsls	r3, r3, #3
 8042148:	4413      	add	r3, r2
 804214a:	009b      	lsls	r3, r3, #2
 804214c:	3310      	adds	r3, #16
 804214e:	687a      	ldr	r2, [r7, #4]
 8042150:	4413      	add	r3, r2
 8042152:	3304      	adds	r3, #4
 8042154:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8042156:	697b      	ldr	r3, [r7, #20]
 8042158:	78db      	ldrb	r3, [r3, #3]
 804215a:	2b01      	cmp	r3, #1
 804215c:	d108      	bne.n	8042170 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 804215e:	697b      	ldr	r3, [r7, #20]
 8042160:	2200      	movs	r2, #0
 8042162:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8042164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042166:	b2db      	uxtb	r3, r3
 8042168:	4619      	mov	r1, r3
 804216a:	6878      	ldr	r0, [r7, #4]
 804216c:	f008 fadc 	bl	804a728 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8042170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042172:	015a      	lsls	r2, r3, #5
 8042174:	69fb      	ldr	r3, [r7, #28]
 8042176:	4413      	add	r3, r2
 8042178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804217c:	461a      	mov	r2, r3
 804217e:	2302      	movs	r3, #2
 8042180:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8042182:	693b      	ldr	r3, [r7, #16]
 8042184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8042188:	2b00      	cmp	r3, #0
 804218a:	d003      	beq.n	8042194 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 804218c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 804218e:	6878      	ldr	r0, [r7, #4]
 8042190:	f000 fcd2 	bl	8042b38 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8042194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042196:	3301      	adds	r3, #1
 8042198:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 804219a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804219c:	085b      	lsrs	r3, r3, #1
 804219e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80421a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80421a2:	2b00      	cmp	r3, #0
 80421a4:	f47f af2e 	bne.w	8042004 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80421a8:	687b      	ldr	r3, [r7, #4]
 80421aa:	681b      	ldr	r3, [r3, #0]
 80421ac:	4618      	mov	r0, r3
 80421ae:	f006 f909 	bl	80483c4 <USB_ReadInterrupts>
 80421b2:	4603      	mov	r3, r0
 80421b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80421b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80421bc:	d122      	bne.n	8042204 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80421be:	69fb      	ldr	r3, [r7, #28]
 80421c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80421c4:	685b      	ldr	r3, [r3, #4]
 80421c6:	69fa      	ldr	r2, [r7, #28]
 80421c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80421cc:	f023 0301 	bic.w	r3, r3, #1
 80421d0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80421d2:	687b      	ldr	r3, [r7, #4]
 80421d4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80421d8:	2b01      	cmp	r3, #1
 80421da:	d108      	bne.n	80421ee <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80421dc:	687b      	ldr	r3, [r7, #4]
 80421de:	2200      	movs	r2, #0
 80421e0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80421e4:	2100      	movs	r1, #0
 80421e6:	6878      	ldr	r0, [r7, #4]
 80421e8:	f000 fedc 	bl	8042fa4 <HAL_PCDEx_LPM_Callback>
 80421ec:	e002      	b.n	80421f4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80421ee:	6878      	ldr	r0, [r7, #4]
 80421f0:	f008 fa7a 	bl	804a6e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80421f4:	687b      	ldr	r3, [r7, #4]
 80421f6:	681b      	ldr	r3, [r3, #0]
 80421f8:	695a      	ldr	r2, [r3, #20]
 80421fa:	687b      	ldr	r3, [r7, #4]
 80421fc:	681b      	ldr	r3, [r3, #0]
 80421fe:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8042202:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8042204:	687b      	ldr	r3, [r7, #4]
 8042206:	681b      	ldr	r3, [r3, #0]
 8042208:	4618      	mov	r0, r3
 804220a:	f006 f8db 	bl	80483c4 <USB_ReadInterrupts>
 804220e:	4603      	mov	r3, r0
 8042210:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8042214:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8042218:	d112      	bne.n	8042240 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 804221a:	69fb      	ldr	r3, [r7, #28]
 804221c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042220:	689b      	ldr	r3, [r3, #8]
 8042222:	f003 0301 	and.w	r3, r3, #1
 8042226:	2b01      	cmp	r3, #1
 8042228:	d102      	bne.n	8042230 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 804222a:	6878      	ldr	r0, [r7, #4]
 804222c:	f008 fa36 	bl	804a69c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8042230:	687b      	ldr	r3, [r7, #4]
 8042232:	681b      	ldr	r3, [r3, #0]
 8042234:	695a      	ldr	r2, [r3, #20]
 8042236:	687b      	ldr	r3, [r7, #4]
 8042238:	681b      	ldr	r3, [r3, #0]
 804223a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 804223e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8042240:	687b      	ldr	r3, [r7, #4]
 8042242:	681b      	ldr	r3, [r3, #0]
 8042244:	4618      	mov	r0, r3
 8042246:	f006 f8bd 	bl	80483c4 <USB_ReadInterrupts>
 804224a:	4603      	mov	r3, r0
 804224c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8042250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8042254:	d121      	bne.n	804229a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8042256:	687b      	ldr	r3, [r7, #4]
 8042258:	681b      	ldr	r3, [r3, #0]
 804225a:	695a      	ldr	r2, [r3, #20]
 804225c:	687b      	ldr	r3, [r7, #4]
 804225e:	681b      	ldr	r3, [r3, #0]
 8042260:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8042264:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8042266:	687b      	ldr	r3, [r7, #4]
 8042268:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 804226c:	2b00      	cmp	r3, #0
 804226e:	d111      	bne.n	8042294 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8042270:	687b      	ldr	r3, [r7, #4]
 8042272:	2201      	movs	r2, #1
 8042274:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8042278:	687b      	ldr	r3, [r7, #4]
 804227a:	681b      	ldr	r3, [r3, #0]
 804227c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804227e:	089b      	lsrs	r3, r3, #2
 8042280:	f003 020f 	and.w	r2, r3, #15
 8042284:	687b      	ldr	r3, [r7, #4]
 8042286:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 804228a:	2101      	movs	r1, #1
 804228c:	6878      	ldr	r0, [r7, #4]
 804228e:	f000 fe89 	bl	8042fa4 <HAL_PCDEx_LPM_Callback>
 8042292:	e002      	b.n	804229a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8042294:	6878      	ldr	r0, [r7, #4]
 8042296:	f008 fa01 	bl	804a69c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 804229a:	687b      	ldr	r3, [r7, #4]
 804229c:	681b      	ldr	r3, [r3, #0]
 804229e:	4618      	mov	r0, r3
 80422a0:	f006 f890 	bl	80483c4 <USB_ReadInterrupts>
 80422a4:	4603      	mov	r3, r0
 80422a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80422aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80422ae:	f040 80b7 	bne.w	8042420 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80422b2:	69fb      	ldr	r3, [r7, #28]
 80422b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80422b8:	685b      	ldr	r3, [r3, #4]
 80422ba:	69fa      	ldr	r2, [r7, #28]
 80422bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80422c0:	f023 0301 	bic.w	r3, r3, #1
 80422c4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80422c6:	687b      	ldr	r3, [r7, #4]
 80422c8:	681b      	ldr	r3, [r3, #0]
 80422ca:	2110      	movs	r1, #16
 80422cc:	4618      	mov	r0, r3
 80422ce:	f005 f957 	bl	8047580 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80422d2:	2300      	movs	r3, #0
 80422d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80422d6:	e046      	b.n	8042366 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80422d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80422da:	015a      	lsls	r2, r3, #5
 80422dc:	69fb      	ldr	r3, [r7, #28]
 80422de:	4413      	add	r3, r2
 80422e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80422e4:	461a      	mov	r2, r3
 80422e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80422ea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80422ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80422ee:	015a      	lsls	r2, r3, #5
 80422f0:	69fb      	ldr	r3, [r7, #28]
 80422f2:	4413      	add	r3, r2
 80422f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80422f8:	681b      	ldr	r3, [r3, #0]
 80422fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80422fc:	0151      	lsls	r1, r2, #5
 80422fe:	69fa      	ldr	r2, [r7, #28]
 8042300:	440a      	add	r2, r1
 8042302:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8042306:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 804230a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 804230c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804230e:	015a      	lsls	r2, r3, #5
 8042310:	69fb      	ldr	r3, [r7, #28]
 8042312:	4413      	add	r3, r2
 8042314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042318:	461a      	mov	r2, r3
 804231a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 804231e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8042320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8042322:	015a      	lsls	r2, r3, #5
 8042324:	69fb      	ldr	r3, [r7, #28]
 8042326:	4413      	add	r3, r2
 8042328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804232c:	681b      	ldr	r3, [r3, #0]
 804232e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8042330:	0151      	lsls	r1, r2, #5
 8042332:	69fa      	ldr	r2, [r7, #28]
 8042334:	440a      	add	r2, r1
 8042336:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 804233a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 804233e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8042340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8042342:	015a      	lsls	r2, r3, #5
 8042344:	69fb      	ldr	r3, [r7, #28]
 8042346:	4413      	add	r3, r2
 8042348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804234c:	681b      	ldr	r3, [r3, #0]
 804234e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8042350:	0151      	lsls	r1, r2, #5
 8042352:	69fa      	ldr	r2, [r7, #28]
 8042354:	440a      	add	r2, r1
 8042356:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 804235a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 804235e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8042360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8042362:	3301      	adds	r3, #1
 8042364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8042366:	687b      	ldr	r3, [r7, #4]
 8042368:	791b      	ldrb	r3, [r3, #4]
 804236a:	461a      	mov	r2, r3
 804236c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804236e:	4293      	cmp	r3, r2
 8042370:	d3b2      	bcc.n	80422d8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8042372:	69fb      	ldr	r3, [r7, #28]
 8042374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042378:	69db      	ldr	r3, [r3, #28]
 804237a:	69fa      	ldr	r2, [r7, #28]
 804237c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8042380:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8042384:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8042386:	687b      	ldr	r3, [r7, #4]
 8042388:	7bdb      	ldrb	r3, [r3, #15]
 804238a:	2b00      	cmp	r3, #0
 804238c:	d016      	beq.n	80423bc <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 804238e:	69fb      	ldr	r3, [r7, #28]
 8042390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8042398:	69fa      	ldr	r2, [r7, #28]
 804239a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804239e:	f043 030b 	orr.w	r3, r3, #11
 80423a2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80423a6:	69fb      	ldr	r3, [r7, #28]
 80423a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80423ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80423ae:	69fa      	ldr	r2, [r7, #28]
 80423b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80423b4:	f043 030b 	orr.w	r3, r3, #11
 80423b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80423ba:	e015      	b.n	80423e8 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80423bc:	69fb      	ldr	r3, [r7, #28]
 80423be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80423c2:	695a      	ldr	r2, [r3, #20]
 80423c4:	69fb      	ldr	r3, [r7, #28]
 80423c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80423ca:	4619      	mov	r1, r3
 80423cc:	f242 032b 	movw	r3, #8235	@ 0x202b
 80423d0:	4313      	orrs	r3, r2
 80423d2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80423d4:	69fb      	ldr	r3, [r7, #28]
 80423d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80423da:	691b      	ldr	r3, [r3, #16]
 80423dc:	69fa      	ldr	r2, [r7, #28]
 80423de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80423e2:	f043 030b 	orr.w	r3, r3, #11
 80423e6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80423e8:	69fb      	ldr	r3, [r7, #28]
 80423ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80423ee:	681b      	ldr	r3, [r3, #0]
 80423f0:	69fa      	ldr	r2, [r7, #28]
 80423f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80423f6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80423fa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80423fc:	687b      	ldr	r3, [r7, #4]
 80423fe:	6818      	ldr	r0, [r3, #0]
 8042400:	687b      	ldr	r3, [r7, #4]
 8042402:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8042404:	687b      	ldr	r3, [r7, #4]
 8042406:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 804240a:	461a      	mov	r2, r3
 804240c:	f006 f8a0 	bl	8048550 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8042410:	687b      	ldr	r3, [r7, #4]
 8042412:	681b      	ldr	r3, [r3, #0]
 8042414:	695a      	ldr	r2, [r3, #20]
 8042416:	687b      	ldr	r3, [r7, #4]
 8042418:	681b      	ldr	r3, [r3, #0]
 804241a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 804241e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8042420:	687b      	ldr	r3, [r7, #4]
 8042422:	681b      	ldr	r3, [r3, #0]
 8042424:	4618      	mov	r0, r3
 8042426:	f005 ffcd 	bl	80483c4 <USB_ReadInterrupts>
 804242a:	4603      	mov	r3, r0
 804242c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8042430:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8042434:	d123      	bne.n	804247e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8042436:	687b      	ldr	r3, [r7, #4]
 8042438:	681b      	ldr	r3, [r3, #0]
 804243a:	4618      	mov	r0, r3
 804243c:	f006 f864 	bl	8048508 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8042440:	687b      	ldr	r3, [r7, #4]
 8042442:	681b      	ldr	r3, [r3, #0]
 8042444:	4618      	mov	r0, r3
 8042446:	f005 f914 	bl	8047672 <USB_GetDevSpeed>
 804244a:	4603      	mov	r3, r0
 804244c:	461a      	mov	r2, r3
 804244e:	687b      	ldr	r3, [r7, #4]
 8042450:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8042452:	687b      	ldr	r3, [r7, #4]
 8042454:	681c      	ldr	r4, [r3, #0]
 8042456:	f001 fe0f 	bl	8044078 <HAL_RCC_GetHCLKFreq>
 804245a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 804245c:	687b      	ldr	r3, [r7, #4]
 804245e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8042460:	461a      	mov	r2, r3
 8042462:	4620      	mov	r0, r4
 8042464:	f004 fe1e 	bl	80470a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8042468:	6878      	ldr	r0, [r7, #4]
 804246a:	f008 f8ee 	bl	804a64a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 804246e:	687b      	ldr	r3, [r7, #4]
 8042470:	681b      	ldr	r3, [r3, #0]
 8042472:	695a      	ldr	r2, [r3, #20]
 8042474:	687b      	ldr	r3, [r7, #4]
 8042476:	681b      	ldr	r3, [r3, #0]
 8042478:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 804247c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 804247e:	687b      	ldr	r3, [r7, #4]
 8042480:	681b      	ldr	r3, [r3, #0]
 8042482:	4618      	mov	r0, r3
 8042484:	f005 ff9e 	bl	80483c4 <USB_ReadInterrupts>
 8042488:	4603      	mov	r3, r0
 804248a:	f003 0308 	and.w	r3, r3, #8
 804248e:	2b08      	cmp	r3, #8
 8042490:	d10a      	bne.n	80424a8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8042492:	6878      	ldr	r0, [r7, #4]
 8042494:	f008 f8cb 	bl	804a62e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8042498:	687b      	ldr	r3, [r7, #4]
 804249a:	681b      	ldr	r3, [r3, #0]
 804249c:	695a      	ldr	r2, [r3, #20]
 804249e:	687b      	ldr	r3, [r7, #4]
 80424a0:	681b      	ldr	r3, [r3, #0]
 80424a2:	f002 0208 	and.w	r2, r2, #8
 80424a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80424a8:	687b      	ldr	r3, [r7, #4]
 80424aa:	681b      	ldr	r3, [r3, #0]
 80424ac:	4618      	mov	r0, r3
 80424ae:	f005 ff89 	bl	80483c4 <USB_ReadInterrupts>
 80424b2:	4603      	mov	r3, r0
 80424b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80424b8:	2b80      	cmp	r3, #128	@ 0x80
 80424ba:	d123      	bne.n	8042504 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80424bc:	6a3b      	ldr	r3, [r7, #32]
 80424be:	699b      	ldr	r3, [r3, #24]
 80424c0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80424c4:	6a3b      	ldr	r3, [r7, #32]
 80424c6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80424c8:	2301      	movs	r3, #1
 80424ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80424cc:	e014      	b.n	80424f8 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80424ce:	6879      	ldr	r1, [r7, #4]
 80424d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80424d2:	4613      	mov	r3, r2
 80424d4:	00db      	lsls	r3, r3, #3
 80424d6:	4413      	add	r3, r2
 80424d8:	009b      	lsls	r3, r3, #2
 80424da:	440b      	add	r3, r1
 80424dc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80424e0:	781b      	ldrb	r3, [r3, #0]
 80424e2:	2b01      	cmp	r3, #1
 80424e4:	d105      	bne.n	80424f2 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80424e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80424e8:	b2db      	uxtb	r3, r3
 80424ea:	4619      	mov	r1, r3
 80424ec:	6878      	ldr	r0, [r7, #4]
 80424ee:	f000 faf2 	bl	8042ad6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80424f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80424f4:	3301      	adds	r3, #1
 80424f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80424f8:	687b      	ldr	r3, [r7, #4]
 80424fa:	791b      	ldrb	r3, [r3, #4]
 80424fc:	461a      	mov	r2, r3
 80424fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042500:	4293      	cmp	r3, r2
 8042502:	d3e4      	bcc.n	80424ce <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8042504:	687b      	ldr	r3, [r7, #4]
 8042506:	681b      	ldr	r3, [r3, #0]
 8042508:	4618      	mov	r0, r3
 804250a:	f005 ff5b 	bl	80483c4 <USB_ReadInterrupts>
 804250e:	4603      	mov	r3, r0
 8042510:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8042514:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8042518:	d13c      	bne.n	8042594 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 804251a:	2301      	movs	r3, #1
 804251c:	627b      	str	r3, [r7, #36]	@ 0x24
 804251e:	e02b      	b.n	8042578 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8042520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042522:	015a      	lsls	r2, r3, #5
 8042524:	69fb      	ldr	r3, [r7, #28]
 8042526:	4413      	add	r3, r2
 8042528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804252c:	681b      	ldr	r3, [r3, #0]
 804252e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8042530:	6879      	ldr	r1, [r7, #4]
 8042532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042534:	4613      	mov	r3, r2
 8042536:	00db      	lsls	r3, r3, #3
 8042538:	4413      	add	r3, r2
 804253a:	009b      	lsls	r3, r3, #2
 804253c:	440b      	add	r3, r1
 804253e:	3318      	adds	r3, #24
 8042540:	781b      	ldrb	r3, [r3, #0]
 8042542:	2b01      	cmp	r3, #1
 8042544:	d115      	bne.n	8042572 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8042546:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8042548:	2b00      	cmp	r3, #0
 804254a:	da12      	bge.n	8042572 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 804254c:	6879      	ldr	r1, [r7, #4]
 804254e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042550:	4613      	mov	r3, r2
 8042552:	00db      	lsls	r3, r3, #3
 8042554:	4413      	add	r3, r2
 8042556:	009b      	lsls	r3, r3, #2
 8042558:	440b      	add	r3, r1
 804255a:	3317      	adds	r3, #23
 804255c:	2201      	movs	r2, #1
 804255e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8042560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042562:	b2db      	uxtb	r3, r3
 8042564:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8042568:	b2db      	uxtb	r3, r3
 804256a:	4619      	mov	r1, r3
 804256c:	6878      	ldr	r0, [r7, #4]
 804256e:	f000 fab2 	bl	8042ad6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8042572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042574:	3301      	adds	r3, #1
 8042576:	627b      	str	r3, [r7, #36]	@ 0x24
 8042578:	687b      	ldr	r3, [r7, #4]
 804257a:	791b      	ldrb	r3, [r3, #4]
 804257c:	461a      	mov	r2, r3
 804257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042580:	4293      	cmp	r3, r2
 8042582:	d3cd      	bcc.n	8042520 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8042584:	687b      	ldr	r3, [r7, #4]
 8042586:	681b      	ldr	r3, [r3, #0]
 8042588:	695a      	ldr	r2, [r3, #20]
 804258a:	687b      	ldr	r3, [r7, #4]
 804258c:	681b      	ldr	r3, [r3, #0]
 804258e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8042592:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8042594:	687b      	ldr	r3, [r7, #4]
 8042596:	681b      	ldr	r3, [r3, #0]
 8042598:	4618      	mov	r0, r3
 804259a:	f005 ff13 	bl	80483c4 <USB_ReadInterrupts>
 804259e:	4603      	mov	r3, r0
 80425a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80425a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80425a8:	d156      	bne.n	8042658 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80425aa:	2301      	movs	r3, #1
 80425ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80425ae:	e045      	b.n	804263c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80425b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80425b2:	015a      	lsls	r2, r3, #5
 80425b4:	69fb      	ldr	r3, [r7, #28]
 80425b6:	4413      	add	r3, r2
 80425b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80425bc:	681b      	ldr	r3, [r3, #0]
 80425be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80425c0:	6879      	ldr	r1, [r7, #4]
 80425c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80425c4:	4613      	mov	r3, r2
 80425c6:	00db      	lsls	r3, r3, #3
 80425c8:	4413      	add	r3, r2
 80425ca:	009b      	lsls	r3, r3, #2
 80425cc:	440b      	add	r3, r1
 80425ce:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80425d2:	781b      	ldrb	r3, [r3, #0]
 80425d4:	2b01      	cmp	r3, #1
 80425d6:	d12e      	bne.n	8042636 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80425d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80425da:	2b00      	cmp	r3, #0
 80425dc:	da2b      	bge.n	8042636 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80425de:	69bb      	ldr	r3, [r7, #24]
 80425e0:	0c1a      	lsrs	r2, r3, #16
 80425e2:	687b      	ldr	r3, [r7, #4]
 80425e4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80425e8:	4053      	eors	r3, r2
 80425ea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80425ee:	2b00      	cmp	r3, #0
 80425f0:	d121      	bne.n	8042636 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80425f2:	6879      	ldr	r1, [r7, #4]
 80425f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80425f6:	4613      	mov	r3, r2
 80425f8:	00db      	lsls	r3, r3, #3
 80425fa:	4413      	add	r3, r2
 80425fc:	009b      	lsls	r3, r3, #2
 80425fe:	440b      	add	r3, r1
 8042600:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8042604:	2201      	movs	r2, #1
 8042606:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8042608:	6a3b      	ldr	r3, [r7, #32]
 804260a:	699b      	ldr	r3, [r3, #24]
 804260c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8042610:	6a3b      	ldr	r3, [r7, #32]
 8042612:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8042614:	6a3b      	ldr	r3, [r7, #32]
 8042616:	695b      	ldr	r3, [r3, #20]
 8042618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 804261c:	2b00      	cmp	r3, #0
 804261e:	d10a      	bne.n	8042636 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8042620:	69fb      	ldr	r3, [r7, #28]
 8042622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042626:	685b      	ldr	r3, [r3, #4]
 8042628:	69fa      	ldr	r2, [r7, #28]
 804262a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804262e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8042632:	6053      	str	r3, [r2, #4]
            break;
 8042634:	e008      	b.n	8042648 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8042636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042638:	3301      	adds	r3, #1
 804263a:	627b      	str	r3, [r7, #36]	@ 0x24
 804263c:	687b      	ldr	r3, [r7, #4]
 804263e:	791b      	ldrb	r3, [r3, #4]
 8042640:	461a      	mov	r2, r3
 8042642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042644:	4293      	cmp	r3, r2
 8042646:	d3b3      	bcc.n	80425b0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8042648:	687b      	ldr	r3, [r7, #4]
 804264a:	681b      	ldr	r3, [r3, #0]
 804264c:	695a      	ldr	r2, [r3, #20]
 804264e:	687b      	ldr	r3, [r7, #4]
 8042650:	681b      	ldr	r3, [r3, #0]
 8042652:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8042656:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8042658:	687b      	ldr	r3, [r7, #4]
 804265a:	681b      	ldr	r3, [r3, #0]
 804265c:	4618      	mov	r0, r3
 804265e:	f005 feb1 	bl	80483c4 <USB_ReadInterrupts>
 8042662:	4603      	mov	r3, r0
 8042664:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8042668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 804266c:	d10a      	bne.n	8042684 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 804266e:	6878      	ldr	r0, [r7, #4]
 8042670:	f008 f86c 	bl	804a74c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8042674:	687b      	ldr	r3, [r7, #4]
 8042676:	681b      	ldr	r3, [r3, #0]
 8042678:	695a      	ldr	r2, [r3, #20]
 804267a:	687b      	ldr	r3, [r7, #4]
 804267c:	681b      	ldr	r3, [r3, #0]
 804267e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8042682:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8042684:	687b      	ldr	r3, [r7, #4]
 8042686:	681b      	ldr	r3, [r3, #0]
 8042688:	4618      	mov	r0, r3
 804268a:	f005 fe9b 	bl	80483c4 <USB_ReadInterrupts>
 804268e:	4603      	mov	r3, r0
 8042690:	f003 0304 	and.w	r3, r3, #4
 8042694:	2b04      	cmp	r3, #4
 8042696:	d115      	bne.n	80426c4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8042698:	687b      	ldr	r3, [r7, #4]
 804269a:	681b      	ldr	r3, [r3, #0]
 804269c:	685b      	ldr	r3, [r3, #4]
 804269e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80426a0:	69bb      	ldr	r3, [r7, #24]
 80426a2:	f003 0304 	and.w	r3, r3, #4
 80426a6:	2b00      	cmp	r3, #0
 80426a8:	d002      	beq.n	80426b0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80426aa:	6878      	ldr	r0, [r7, #4]
 80426ac:	f008 f85c 	bl	804a768 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80426b0:	687b      	ldr	r3, [r7, #4]
 80426b2:	681b      	ldr	r3, [r3, #0]
 80426b4:	6859      	ldr	r1, [r3, #4]
 80426b6:	687b      	ldr	r3, [r7, #4]
 80426b8:	681b      	ldr	r3, [r3, #0]
 80426ba:	69ba      	ldr	r2, [r7, #24]
 80426bc:	430a      	orrs	r2, r1
 80426be:	605a      	str	r2, [r3, #4]
 80426c0:	e000      	b.n	80426c4 <HAL_PCD_IRQHandler+0x996>
      return;
 80426c2:	bf00      	nop
    }
  }
}
 80426c4:	3734      	adds	r7, #52	@ 0x34
 80426c6:	46bd      	mov	sp, r7
 80426c8:	bd90      	pop	{r4, r7, pc}

080426ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80426ca:	b580      	push	{r7, lr}
 80426cc:	b082      	sub	sp, #8
 80426ce:	af00      	add	r7, sp, #0
 80426d0:	6078      	str	r0, [r7, #4]
 80426d2:	460b      	mov	r3, r1
 80426d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80426d6:	687b      	ldr	r3, [r7, #4]
 80426d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80426dc:	2b01      	cmp	r3, #1
 80426de:	d101      	bne.n	80426e4 <HAL_PCD_SetAddress+0x1a>
 80426e0:	2302      	movs	r3, #2
 80426e2:	e012      	b.n	804270a <HAL_PCD_SetAddress+0x40>
 80426e4:	687b      	ldr	r3, [r7, #4]
 80426e6:	2201      	movs	r2, #1
 80426e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80426ec:	687b      	ldr	r3, [r7, #4]
 80426ee:	78fa      	ldrb	r2, [r7, #3]
 80426f0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80426f2:	687b      	ldr	r3, [r7, #4]
 80426f4:	681b      	ldr	r3, [r3, #0]
 80426f6:	78fa      	ldrb	r2, [r7, #3]
 80426f8:	4611      	mov	r1, r2
 80426fa:	4618      	mov	r0, r3
 80426fc:	f005 fdfa 	bl	80482f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8042700:	687b      	ldr	r3, [r7, #4]
 8042702:	2200      	movs	r2, #0
 8042704:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8042708:	2300      	movs	r3, #0
}
 804270a:	4618      	mov	r0, r3
 804270c:	3708      	adds	r7, #8
 804270e:	46bd      	mov	sp, r7
 8042710:	bd80      	pop	{r7, pc}

08042712 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8042712:	b580      	push	{r7, lr}
 8042714:	b084      	sub	sp, #16
 8042716:	af00      	add	r7, sp, #0
 8042718:	6078      	str	r0, [r7, #4]
 804271a:	4608      	mov	r0, r1
 804271c:	4611      	mov	r1, r2
 804271e:	461a      	mov	r2, r3
 8042720:	4603      	mov	r3, r0
 8042722:	70fb      	strb	r3, [r7, #3]
 8042724:	460b      	mov	r3, r1
 8042726:	803b      	strh	r3, [r7, #0]
 8042728:	4613      	mov	r3, r2
 804272a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 804272c:	2300      	movs	r3, #0
 804272e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8042730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8042734:	2b00      	cmp	r3, #0
 8042736:	da0f      	bge.n	8042758 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8042738:	78fb      	ldrb	r3, [r7, #3]
 804273a:	f003 020f 	and.w	r2, r3, #15
 804273e:	4613      	mov	r3, r2
 8042740:	00db      	lsls	r3, r3, #3
 8042742:	4413      	add	r3, r2
 8042744:	009b      	lsls	r3, r3, #2
 8042746:	3310      	adds	r3, #16
 8042748:	687a      	ldr	r2, [r7, #4]
 804274a:	4413      	add	r3, r2
 804274c:	3304      	adds	r3, #4
 804274e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8042750:	68fb      	ldr	r3, [r7, #12]
 8042752:	2201      	movs	r2, #1
 8042754:	705a      	strb	r2, [r3, #1]
 8042756:	e00f      	b.n	8042778 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8042758:	78fb      	ldrb	r3, [r7, #3]
 804275a:	f003 020f 	and.w	r2, r3, #15
 804275e:	4613      	mov	r3, r2
 8042760:	00db      	lsls	r3, r3, #3
 8042762:	4413      	add	r3, r2
 8042764:	009b      	lsls	r3, r3, #2
 8042766:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 804276a:	687a      	ldr	r2, [r7, #4]
 804276c:	4413      	add	r3, r2
 804276e:	3304      	adds	r3, #4
 8042770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8042772:	68fb      	ldr	r3, [r7, #12]
 8042774:	2200      	movs	r2, #0
 8042776:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8042778:	78fb      	ldrb	r3, [r7, #3]
 804277a:	f003 030f 	and.w	r3, r3, #15
 804277e:	b2da      	uxtb	r2, r3
 8042780:	68fb      	ldr	r3, [r7, #12]
 8042782:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8042784:	883b      	ldrh	r3, [r7, #0]
 8042786:	f3c3 020a 	ubfx	r2, r3, #0, #11
 804278a:	68fb      	ldr	r3, [r7, #12]
 804278c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 804278e:	68fb      	ldr	r3, [r7, #12]
 8042790:	78ba      	ldrb	r2, [r7, #2]
 8042792:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8042794:	68fb      	ldr	r3, [r7, #12]
 8042796:	785b      	ldrb	r3, [r3, #1]
 8042798:	2b00      	cmp	r3, #0
 804279a:	d004      	beq.n	80427a6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 804279c:	68fb      	ldr	r3, [r7, #12]
 804279e:	781b      	ldrb	r3, [r3, #0]
 80427a0:	461a      	mov	r2, r3
 80427a2:	68fb      	ldr	r3, [r7, #12]
 80427a4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80427a6:	78bb      	ldrb	r3, [r7, #2]
 80427a8:	2b02      	cmp	r3, #2
 80427aa:	d102      	bne.n	80427b2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80427ac:	68fb      	ldr	r3, [r7, #12]
 80427ae:	2200      	movs	r2, #0
 80427b0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80427b2:	687b      	ldr	r3, [r7, #4]
 80427b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80427b8:	2b01      	cmp	r3, #1
 80427ba:	d101      	bne.n	80427c0 <HAL_PCD_EP_Open+0xae>
 80427bc:	2302      	movs	r3, #2
 80427be:	e00e      	b.n	80427de <HAL_PCD_EP_Open+0xcc>
 80427c0:	687b      	ldr	r3, [r7, #4]
 80427c2:	2201      	movs	r2, #1
 80427c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80427c8:	687b      	ldr	r3, [r7, #4]
 80427ca:	681b      	ldr	r3, [r3, #0]
 80427cc:	68f9      	ldr	r1, [r7, #12]
 80427ce:	4618      	mov	r0, r3
 80427d0:	f004 ff74 	bl	80476bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80427d4:	687b      	ldr	r3, [r7, #4]
 80427d6:	2200      	movs	r2, #0
 80427d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80427dc:	7afb      	ldrb	r3, [r7, #11]
}
 80427de:	4618      	mov	r0, r3
 80427e0:	3710      	adds	r7, #16
 80427e2:	46bd      	mov	sp, r7
 80427e4:	bd80      	pop	{r7, pc}

080427e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80427e6:	b580      	push	{r7, lr}
 80427e8:	b084      	sub	sp, #16
 80427ea:	af00      	add	r7, sp, #0
 80427ec:	6078      	str	r0, [r7, #4]
 80427ee:	460b      	mov	r3, r1
 80427f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80427f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80427f6:	2b00      	cmp	r3, #0
 80427f8:	da0f      	bge.n	804281a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80427fa:	78fb      	ldrb	r3, [r7, #3]
 80427fc:	f003 020f 	and.w	r2, r3, #15
 8042800:	4613      	mov	r3, r2
 8042802:	00db      	lsls	r3, r3, #3
 8042804:	4413      	add	r3, r2
 8042806:	009b      	lsls	r3, r3, #2
 8042808:	3310      	adds	r3, #16
 804280a:	687a      	ldr	r2, [r7, #4]
 804280c:	4413      	add	r3, r2
 804280e:	3304      	adds	r3, #4
 8042810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8042812:	68fb      	ldr	r3, [r7, #12]
 8042814:	2201      	movs	r2, #1
 8042816:	705a      	strb	r2, [r3, #1]
 8042818:	e00f      	b.n	804283a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 804281a:	78fb      	ldrb	r3, [r7, #3]
 804281c:	f003 020f 	and.w	r2, r3, #15
 8042820:	4613      	mov	r3, r2
 8042822:	00db      	lsls	r3, r3, #3
 8042824:	4413      	add	r3, r2
 8042826:	009b      	lsls	r3, r3, #2
 8042828:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 804282c:	687a      	ldr	r2, [r7, #4]
 804282e:	4413      	add	r3, r2
 8042830:	3304      	adds	r3, #4
 8042832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8042834:	68fb      	ldr	r3, [r7, #12]
 8042836:	2200      	movs	r2, #0
 8042838:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 804283a:	78fb      	ldrb	r3, [r7, #3]
 804283c:	f003 030f 	and.w	r3, r3, #15
 8042840:	b2da      	uxtb	r2, r3
 8042842:	68fb      	ldr	r3, [r7, #12]
 8042844:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8042846:	687b      	ldr	r3, [r7, #4]
 8042848:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 804284c:	2b01      	cmp	r3, #1
 804284e:	d101      	bne.n	8042854 <HAL_PCD_EP_Close+0x6e>
 8042850:	2302      	movs	r3, #2
 8042852:	e00e      	b.n	8042872 <HAL_PCD_EP_Close+0x8c>
 8042854:	687b      	ldr	r3, [r7, #4]
 8042856:	2201      	movs	r2, #1
 8042858:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 804285c:	687b      	ldr	r3, [r7, #4]
 804285e:	681b      	ldr	r3, [r3, #0]
 8042860:	68f9      	ldr	r1, [r7, #12]
 8042862:	4618      	mov	r0, r3
 8042864:	f004 ffb2 	bl	80477cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8042868:	687b      	ldr	r3, [r7, #4]
 804286a:	2200      	movs	r2, #0
 804286c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8042870:	2300      	movs	r3, #0
}
 8042872:	4618      	mov	r0, r3
 8042874:	3710      	adds	r7, #16
 8042876:	46bd      	mov	sp, r7
 8042878:	bd80      	pop	{r7, pc}

0804287a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 804287a:	b580      	push	{r7, lr}
 804287c:	b086      	sub	sp, #24
 804287e:	af00      	add	r7, sp, #0
 8042880:	60f8      	str	r0, [r7, #12]
 8042882:	607a      	str	r2, [r7, #4]
 8042884:	603b      	str	r3, [r7, #0]
 8042886:	460b      	mov	r3, r1
 8042888:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 804288a:	7afb      	ldrb	r3, [r7, #11]
 804288c:	f003 020f 	and.w	r2, r3, #15
 8042890:	4613      	mov	r3, r2
 8042892:	00db      	lsls	r3, r3, #3
 8042894:	4413      	add	r3, r2
 8042896:	009b      	lsls	r3, r3, #2
 8042898:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 804289c:	68fa      	ldr	r2, [r7, #12]
 804289e:	4413      	add	r3, r2
 80428a0:	3304      	adds	r3, #4
 80428a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80428a4:	697b      	ldr	r3, [r7, #20]
 80428a6:	687a      	ldr	r2, [r7, #4]
 80428a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80428aa:	697b      	ldr	r3, [r7, #20]
 80428ac:	683a      	ldr	r2, [r7, #0]
 80428ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80428b0:	697b      	ldr	r3, [r7, #20]
 80428b2:	2200      	movs	r2, #0
 80428b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80428b6:	697b      	ldr	r3, [r7, #20]
 80428b8:	2200      	movs	r2, #0
 80428ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80428bc:	7afb      	ldrb	r3, [r7, #11]
 80428be:	f003 030f 	and.w	r3, r3, #15
 80428c2:	b2da      	uxtb	r2, r3
 80428c4:	697b      	ldr	r3, [r7, #20]
 80428c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80428c8:	68fb      	ldr	r3, [r7, #12]
 80428ca:	799b      	ldrb	r3, [r3, #6]
 80428cc:	2b01      	cmp	r3, #1
 80428ce:	d102      	bne.n	80428d6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80428d0:	687a      	ldr	r2, [r7, #4]
 80428d2:	697b      	ldr	r3, [r7, #20]
 80428d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80428d6:	68fb      	ldr	r3, [r7, #12]
 80428d8:	6818      	ldr	r0, [r3, #0]
 80428da:	68fb      	ldr	r3, [r7, #12]
 80428dc:	799b      	ldrb	r3, [r3, #6]
 80428de:	461a      	mov	r2, r3
 80428e0:	6979      	ldr	r1, [r7, #20]
 80428e2:	f005 f84f 	bl	8047984 <USB_EPStartXfer>

  return HAL_OK;
 80428e6:	2300      	movs	r3, #0
}
 80428e8:	4618      	mov	r0, r3
 80428ea:	3718      	adds	r7, #24
 80428ec:	46bd      	mov	sp, r7
 80428ee:	bd80      	pop	{r7, pc}

080428f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80428f0:	b580      	push	{r7, lr}
 80428f2:	b086      	sub	sp, #24
 80428f4:	af00      	add	r7, sp, #0
 80428f6:	60f8      	str	r0, [r7, #12]
 80428f8:	607a      	str	r2, [r7, #4]
 80428fa:	603b      	str	r3, [r7, #0]
 80428fc:	460b      	mov	r3, r1
 80428fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8042900:	7afb      	ldrb	r3, [r7, #11]
 8042902:	f003 020f 	and.w	r2, r3, #15
 8042906:	4613      	mov	r3, r2
 8042908:	00db      	lsls	r3, r3, #3
 804290a:	4413      	add	r3, r2
 804290c:	009b      	lsls	r3, r3, #2
 804290e:	3310      	adds	r3, #16
 8042910:	68fa      	ldr	r2, [r7, #12]
 8042912:	4413      	add	r3, r2
 8042914:	3304      	adds	r3, #4
 8042916:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8042918:	697b      	ldr	r3, [r7, #20]
 804291a:	687a      	ldr	r2, [r7, #4]
 804291c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 804291e:	697b      	ldr	r3, [r7, #20]
 8042920:	683a      	ldr	r2, [r7, #0]
 8042922:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8042924:	697b      	ldr	r3, [r7, #20]
 8042926:	2200      	movs	r2, #0
 8042928:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 804292a:	697b      	ldr	r3, [r7, #20]
 804292c:	2201      	movs	r2, #1
 804292e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8042930:	7afb      	ldrb	r3, [r7, #11]
 8042932:	f003 030f 	and.w	r3, r3, #15
 8042936:	b2da      	uxtb	r2, r3
 8042938:	697b      	ldr	r3, [r7, #20]
 804293a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 804293c:	68fb      	ldr	r3, [r7, #12]
 804293e:	799b      	ldrb	r3, [r3, #6]
 8042940:	2b01      	cmp	r3, #1
 8042942:	d102      	bne.n	804294a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8042944:	687a      	ldr	r2, [r7, #4]
 8042946:	697b      	ldr	r3, [r7, #20]
 8042948:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 804294a:	68fb      	ldr	r3, [r7, #12]
 804294c:	6818      	ldr	r0, [r3, #0]
 804294e:	68fb      	ldr	r3, [r7, #12]
 8042950:	799b      	ldrb	r3, [r3, #6]
 8042952:	461a      	mov	r2, r3
 8042954:	6979      	ldr	r1, [r7, #20]
 8042956:	f005 f815 	bl	8047984 <USB_EPStartXfer>

  return HAL_OK;
 804295a:	2300      	movs	r3, #0
}
 804295c:	4618      	mov	r0, r3
 804295e:	3718      	adds	r7, #24
 8042960:	46bd      	mov	sp, r7
 8042962:	bd80      	pop	{r7, pc}

08042964 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8042964:	b580      	push	{r7, lr}
 8042966:	b084      	sub	sp, #16
 8042968:	af00      	add	r7, sp, #0
 804296a:	6078      	str	r0, [r7, #4]
 804296c:	460b      	mov	r3, r1
 804296e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8042970:	78fb      	ldrb	r3, [r7, #3]
 8042972:	f003 030f 	and.w	r3, r3, #15
 8042976:	687a      	ldr	r2, [r7, #4]
 8042978:	7912      	ldrb	r2, [r2, #4]
 804297a:	4293      	cmp	r3, r2
 804297c:	d901      	bls.n	8042982 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 804297e:	2301      	movs	r3, #1
 8042980:	e04f      	b.n	8042a22 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8042982:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8042986:	2b00      	cmp	r3, #0
 8042988:	da0f      	bge.n	80429aa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 804298a:	78fb      	ldrb	r3, [r7, #3]
 804298c:	f003 020f 	and.w	r2, r3, #15
 8042990:	4613      	mov	r3, r2
 8042992:	00db      	lsls	r3, r3, #3
 8042994:	4413      	add	r3, r2
 8042996:	009b      	lsls	r3, r3, #2
 8042998:	3310      	adds	r3, #16
 804299a:	687a      	ldr	r2, [r7, #4]
 804299c:	4413      	add	r3, r2
 804299e:	3304      	adds	r3, #4
 80429a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80429a2:	68fb      	ldr	r3, [r7, #12]
 80429a4:	2201      	movs	r2, #1
 80429a6:	705a      	strb	r2, [r3, #1]
 80429a8:	e00d      	b.n	80429c6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80429aa:	78fa      	ldrb	r2, [r7, #3]
 80429ac:	4613      	mov	r3, r2
 80429ae:	00db      	lsls	r3, r3, #3
 80429b0:	4413      	add	r3, r2
 80429b2:	009b      	lsls	r3, r3, #2
 80429b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80429b8:	687a      	ldr	r2, [r7, #4]
 80429ba:	4413      	add	r3, r2
 80429bc:	3304      	adds	r3, #4
 80429be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80429c0:	68fb      	ldr	r3, [r7, #12]
 80429c2:	2200      	movs	r2, #0
 80429c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80429c6:	68fb      	ldr	r3, [r7, #12]
 80429c8:	2201      	movs	r2, #1
 80429ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80429cc:	78fb      	ldrb	r3, [r7, #3]
 80429ce:	f003 030f 	and.w	r3, r3, #15
 80429d2:	b2da      	uxtb	r2, r3
 80429d4:	68fb      	ldr	r3, [r7, #12]
 80429d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80429d8:	687b      	ldr	r3, [r7, #4]
 80429da:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80429de:	2b01      	cmp	r3, #1
 80429e0:	d101      	bne.n	80429e6 <HAL_PCD_EP_SetStall+0x82>
 80429e2:	2302      	movs	r3, #2
 80429e4:	e01d      	b.n	8042a22 <HAL_PCD_EP_SetStall+0xbe>
 80429e6:	687b      	ldr	r3, [r7, #4]
 80429e8:	2201      	movs	r2, #1
 80429ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80429ee:	687b      	ldr	r3, [r7, #4]
 80429f0:	681b      	ldr	r3, [r3, #0]
 80429f2:	68f9      	ldr	r1, [r7, #12]
 80429f4:	4618      	mov	r0, r3
 80429f6:	f005 fba9 	bl	804814c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80429fa:	78fb      	ldrb	r3, [r7, #3]
 80429fc:	f003 030f 	and.w	r3, r3, #15
 8042a00:	2b00      	cmp	r3, #0
 8042a02:	d109      	bne.n	8042a18 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8042a04:	687b      	ldr	r3, [r7, #4]
 8042a06:	6818      	ldr	r0, [r3, #0]
 8042a08:	687b      	ldr	r3, [r7, #4]
 8042a0a:	7999      	ldrb	r1, [r3, #6]
 8042a0c:	687b      	ldr	r3, [r7, #4]
 8042a0e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8042a12:	461a      	mov	r2, r3
 8042a14:	f005 fd9c 	bl	8048550 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8042a18:	687b      	ldr	r3, [r7, #4]
 8042a1a:	2200      	movs	r2, #0
 8042a1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8042a20:	2300      	movs	r3, #0
}
 8042a22:	4618      	mov	r0, r3
 8042a24:	3710      	adds	r7, #16
 8042a26:	46bd      	mov	sp, r7
 8042a28:	bd80      	pop	{r7, pc}

08042a2a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8042a2a:	b580      	push	{r7, lr}
 8042a2c:	b084      	sub	sp, #16
 8042a2e:	af00      	add	r7, sp, #0
 8042a30:	6078      	str	r0, [r7, #4]
 8042a32:	460b      	mov	r3, r1
 8042a34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8042a36:	78fb      	ldrb	r3, [r7, #3]
 8042a38:	f003 030f 	and.w	r3, r3, #15
 8042a3c:	687a      	ldr	r2, [r7, #4]
 8042a3e:	7912      	ldrb	r2, [r2, #4]
 8042a40:	4293      	cmp	r3, r2
 8042a42:	d901      	bls.n	8042a48 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8042a44:	2301      	movs	r3, #1
 8042a46:	e042      	b.n	8042ace <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8042a48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8042a4c:	2b00      	cmp	r3, #0
 8042a4e:	da0f      	bge.n	8042a70 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8042a50:	78fb      	ldrb	r3, [r7, #3]
 8042a52:	f003 020f 	and.w	r2, r3, #15
 8042a56:	4613      	mov	r3, r2
 8042a58:	00db      	lsls	r3, r3, #3
 8042a5a:	4413      	add	r3, r2
 8042a5c:	009b      	lsls	r3, r3, #2
 8042a5e:	3310      	adds	r3, #16
 8042a60:	687a      	ldr	r2, [r7, #4]
 8042a62:	4413      	add	r3, r2
 8042a64:	3304      	adds	r3, #4
 8042a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8042a68:	68fb      	ldr	r3, [r7, #12]
 8042a6a:	2201      	movs	r2, #1
 8042a6c:	705a      	strb	r2, [r3, #1]
 8042a6e:	e00f      	b.n	8042a90 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8042a70:	78fb      	ldrb	r3, [r7, #3]
 8042a72:	f003 020f 	and.w	r2, r3, #15
 8042a76:	4613      	mov	r3, r2
 8042a78:	00db      	lsls	r3, r3, #3
 8042a7a:	4413      	add	r3, r2
 8042a7c:	009b      	lsls	r3, r3, #2
 8042a7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8042a82:	687a      	ldr	r2, [r7, #4]
 8042a84:	4413      	add	r3, r2
 8042a86:	3304      	adds	r3, #4
 8042a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8042a8a:	68fb      	ldr	r3, [r7, #12]
 8042a8c:	2200      	movs	r2, #0
 8042a8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8042a90:	68fb      	ldr	r3, [r7, #12]
 8042a92:	2200      	movs	r2, #0
 8042a94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8042a96:	78fb      	ldrb	r3, [r7, #3]
 8042a98:	f003 030f 	and.w	r3, r3, #15
 8042a9c:	b2da      	uxtb	r2, r3
 8042a9e:	68fb      	ldr	r3, [r7, #12]
 8042aa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8042aa2:	687b      	ldr	r3, [r7, #4]
 8042aa4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8042aa8:	2b01      	cmp	r3, #1
 8042aaa:	d101      	bne.n	8042ab0 <HAL_PCD_EP_ClrStall+0x86>
 8042aac:	2302      	movs	r3, #2
 8042aae:	e00e      	b.n	8042ace <HAL_PCD_EP_ClrStall+0xa4>
 8042ab0:	687b      	ldr	r3, [r7, #4]
 8042ab2:	2201      	movs	r2, #1
 8042ab4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8042ab8:	687b      	ldr	r3, [r7, #4]
 8042aba:	681b      	ldr	r3, [r3, #0]
 8042abc:	68f9      	ldr	r1, [r7, #12]
 8042abe:	4618      	mov	r0, r3
 8042ac0:	f005 fbb2 	bl	8048228 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8042ac4:	687b      	ldr	r3, [r7, #4]
 8042ac6:	2200      	movs	r2, #0
 8042ac8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8042acc:	2300      	movs	r3, #0
}
 8042ace:	4618      	mov	r0, r3
 8042ad0:	3710      	adds	r7, #16
 8042ad2:	46bd      	mov	sp, r7
 8042ad4:	bd80      	pop	{r7, pc}

08042ad6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8042ad6:	b580      	push	{r7, lr}
 8042ad8:	b084      	sub	sp, #16
 8042ada:	af00      	add	r7, sp, #0
 8042adc:	6078      	str	r0, [r7, #4]
 8042ade:	460b      	mov	r3, r1
 8042ae0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8042ae2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8042ae6:	2b00      	cmp	r3, #0
 8042ae8:	da0c      	bge.n	8042b04 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8042aea:	78fb      	ldrb	r3, [r7, #3]
 8042aec:	f003 020f 	and.w	r2, r3, #15
 8042af0:	4613      	mov	r3, r2
 8042af2:	00db      	lsls	r3, r3, #3
 8042af4:	4413      	add	r3, r2
 8042af6:	009b      	lsls	r3, r3, #2
 8042af8:	3310      	adds	r3, #16
 8042afa:	687a      	ldr	r2, [r7, #4]
 8042afc:	4413      	add	r3, r2
 8042afe:	3304      	adds	r3, #4
 8042b00:	60fb      	str	r3, [r7, #12]
 8042b02:	e00c      	b.n	8042b1e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8042b04:	78fb      	ldrb	r3, [r7, #3]
 8042b06:	f003 020f 	and.w	r2, r3, #15
 8042b0a:	4613      	mov	r3, r2
 8042b0c:	00db      	lsls	r3, r3, #3
 8042b0e:	4413      	add	r3, r2
 8042b10:	009b      	lsls	r3, r3, #2
 8042b12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8042b16:	687a      	ldr	r2, [r7, #4]
 8042b18:	4413      	add	r3, r2
 8042b1a:	3304      	adds	r3, #4
 8042b1c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8042b1e:	687b      	ldr	r3, [r7, #4]
 8042b20:	681b      	ldr	r3, [r3, #0]
 8042b22:	68f9      	ldr	r1, [r7, #12]
 8042b24:	4618      	mov	r0, r3
 8042b26:	f005 f9d1 	bl	8047ecc <USB_EPStopXfer>
 8042b2a:	4603      	mov	r3, r0
 8042b2c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8042b2e:	7afb      	ldrb	r3, [r7, #11]
}
 8042b30:	4618      	mov	r0, r3
 8042b32:	3710      	adds	r7, #16
 8042b34:	46bd      	mov	sp, r7
 8042b36:	bd80      	pop	{r7, pc}

08042b38 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8042b38:	b580      	push	{r7, lr}
 8042b3a:	b08a      	sub	sp, #40	@ 0x28
 8042b3c:	af02      	add	r7, sp, #8
 8042b3e:	6078      	str	r0, [r7, #4]
 8042b40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8042b42:	687b      	ldr	r3, [r7, #4]
 8042b44:	681b      	ldr	r3, [r3, #0]
 8042b46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042b48:	697b      	ldr	r3, [r7, #20]
 8042b4a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8042b4c:	683a      	ldr	r2, [r7, #0]
 8042b4e:	4613      	mov	r3, r2
 8042b50:	00db      	lsls	r3, r3, #3
 8042b52:	4413      	add	r3, r2
 8042b54:	009b      	lsls	r3, r3, #2
 8042b56:	3310      	adds	r3, #16
 8042b58:	687a      	ldr	r2, [r7, #4]
 8042b5a:	4413      	add	r3, r2
 8042b5c:	3304      	adds	r3, #4
 8042b5e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8042b60:	68fb      	ldr	r3, [r7, #12]
 8042b62:	695a      	ldr	r2, [r3, #20]
 8042b64:	68fb      	ldr	r3, [r7, #12]
 8042b66:	691b      	ldr	r3, [r3, #16]
 8042b68:	429a      	cmp	r2, r3
 8042b6a:	d901      	bls.n	8042b70 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8042b6c:	2301      	movs	r3, #1
 8042b6e:	e06b      	b.n	8042c48 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8042b70:	68fb      	ldr	r3, [r7, #12]
 8042b72:	691a      	ldr	r2, [r3, #16]
 8042b74:	68fb      	ldr	r3, [r7, #12]
 8042b76:	695b      	ldr	r3, [r3, #20]
 8042b78:	1ad3      	subs	r3, r2, r3
 8042b7a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8042b7c:	68fb      	ldr	r3, [r7, #12]
 8042b7e:	689b      	ldr	r3, [r3, #8]
 8042b80:	69fa      	ldr	r2, [r7, #28]
 8042b82:	429a      	cmp	r2, r3
 8042b84:	d902      	bls.n	8042b8c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8042b86:	68fb      	ldr	r3, [r7, #12]
 8042b88:	689b      	ldr	r3, [r3, #8]
 8042b8a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8042b8c:	69fb      	ldr	r3, [r7, #28]
 8042b8e:	3303      	adds	r3, #3
 8042b90:	089b      	lsrs	r3, r3, #2
 8042b92:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8042b94:	e02a      	b.n	8042bec <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8042b96:	68fb      	ldr	r3, [r7, #12]
 8042b98:	691a      	ldr	r2, [r3, #16]
 8042b9a:	68fb      	ldr	r3, [r7, #12]
 8042b9c:	695b      	ldr	r3, [r3, #20]
 8042b9e:	1ad3      	subs	r3, r2, r3
 8042ba0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8042ba2:	68fb      	ldr	r3, [r7, #12]
 8042ba4:	689b      	ldr	r3, [r3, #8]
 8042ba6:	69fa      	ldr	r2, [r7, #28]
 8042ba8:	429a      	cmp	r2, r3
 8042baa:	d902      	bls.n	8042bb2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8042bac:	68fb      	ldr	r3, [r7, #12]
 8042bae:	689b      	ldr	r3, [r3, #8]
 8042bb0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8042bb2:	69fb      	ldr	r3, [r7, #28]
 8042bb4:	3303      	adds	r3, #3
 8042bb6:	089b      	lsrs	r3, r3, #2
 8042bb8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8042bba:	68fb      	ldr	r3, [r7, #12]
 8042bbc:	68d9      	ldr	r1, [r3, #12]
 8042bbe:	683b      	ldr	r3, [r7, #0]
 8042bc0:	b2da      	uxtb	r2, r3
 8042bc2:	69fb      	ldr	r3, [r7, #28]
 8042bc4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8042bc6:	687b      	ldr	r3, [r7, #4]
 8042bc8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8042bca:	9300      	str	r3, [sp, #0]
 8042bcc:	4603      	mov	r3, r0
 8042bce:	6978      	ldr	r0, [r7, #20]
 8042bd0:	f005 fa26 	bl	8048020 <USB_WritePacket>

    ep->xfer_buff  += len;
 8042bd4:	68fb      	ldr	r3, [r7, #12]
 8042bd6:	68da      	ldr	r2, [r3, #12]
 8042bd8:	69fb      	ldr	r3, [r7, #28]
 8042bda:	441a      	add	r2, r3
 8042bdc:	68fb      	ldr	r3, [r7, #12]
 8042bde:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8042be0:	68fb      	ldr	r3, [r7, #12]
 8042be2:	695a      	ldr	r2, [r3, #20]
 8042be4:	69fb      	ldr	r3, [r7, #28]
 8042be6:	441a      	add	r2, r3
 8042be8:	68fb      	ldr	r3, [r7, #12]
 8042bea:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8042bec:	683b      	ldr	r3, [r7, #0]
 8042bee:	015a      	lsls	r2, r3, #5
 8042bf0:	693b      	ldr	r3, [r7, #16]
 8042bf2:	4413      	add	r3, r2
 8042bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8042bf8:	699b      	ldr	r3, [r3, #24]
 8042bfa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8042bfc:	69ba      	ldr	r2, [r7, #24]
 8042bfe:	429a      	cmp	r2, r3
 8042c00:	d809      	bhi.n	8042c16 <PCD_WriteEmptyTxFifo+0xde>
 8042c02:	68fb      	ldr	r3, [r7, #12]
 8042c04:	695a      	ldr	r2, [r3, #20]
 8042c06:	68fb      	ldr	r3, [r7, #12]
 8042c08:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8042c0a:	429a      	cmp	r2, r3
 8042c0c:	d203      	bcs.n	8042c16 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8042c0e:	68fb      	ldr	r3, [r7, #12]
 8042c10:	691b      	ldr	r3, [r3, #16]
 8042c12:	2b00      	cmp	r3, #0
 8042c14:	d1bf      	bne.n	8042b96 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8042c16:	68fb      	ldr	r3, [r7, #12]
 8042c18:	691a      	ldr	r2, [r3, #16]
 8042c1a:	68fb      	ldr	r3, [r7, #12]
 8042c1c:	695b      	ldr	r3, [r3, #20]
 8042c1e:	429a      	cmp	r2, r3
 8042c20:	d811      	bhi.n	8042c46 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8042c22:	683b      	ldr	r3, [r7, #0]
 8042c24:	f003 030f 	and.w	r3, r3, #15
 8042c28:	2201      	movs	r2, #1
 8042c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8042c2e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8042c30:	693b      	ldr	r3, [r7, #16]
 8042c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042c36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8042c38:	68bb      	ldr	r3, [r7, #8]
 8042c3a:	43db      	mvns	r3, r3
 8042c3c:	6939      	ldr	r1, [r7, #16]
 8042c3e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8042c42:	4013      	ands	r3, r2
 8042c44:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8042c46:	2300      	movs	r3, #0
}
 8042c48:	4618      	mov	r0, r3
 8042c4a:	3720      	adds	r7, #32
 8042c4c:	46bd      	mov	sp, r7
 8042c4e:	bd80      	pop	{r7, pc}

08042c50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8042c50:	b580      	push	{r7, lr}
 8042c52:	b088      	sub	sp, #32
 8042c54:	af00      	add	r7, sp, #0
 8042c56:	6078      	str	r0, [r7, #4]
 8042c58:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8042c5a:	687b      	ldr	r3, [r7, #4]
 8042c5c:	681b      	ldr	r3, [r3, #0]
 8042c5e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042c60:	69fb      	ldr	r3, [r7, #28]
 8042c62:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8042c64:	69fb      	ldr	r3, [r7, #28]
 8042c66:	333c      	adds	r3, #60	@ 0x3c
 8042c68:	3304      	adds	r3, #4
 8042c6a:	681b      	ldr	r3, [r3, #0]
 8042c6c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8042c6e:	683b      	ldr	r3, [r7, #0]
 8042c70:	015a      	lsls	r2, r3, #5
 8042c72:	69bb      	ldr	r3, [r7, #24]
 8042c74:	4413      	add	r3, r2
 8042c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042c7a:	689b      	ldr	r3, [r3, #8]
 8042c7c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8042c7e:	687b      	ldr	r3, [r7, #4]
 8042c80:	799b      	ldrb	r3, [r3, #6]
 8042c82:	2b01      	cmp	r3, #1
 8042c84:	d17b      	bne.n	8042d7e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8042c86:	693b      	ldr	r3, [r7, #16]
 8042c88:	f003 0308 	and.w	r3, r3, #8
 8042c8c:	2b00      	cmp	r3, #0
 8042c8e:	d015      	beq.n	8042cbc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042c90:	697b      	ldr	r3, [r7, #20]
 8042c92:	4a61      	ldr	r2, [pc, #388]	@ (8042e18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8042c94:	4293      	cmp	r3, r2
 8042c96:	f240 80b9 	bls.w	8042e0c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8042c9a:	693b      	ldr	r3, [r7, #16]
 8042c9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042ca0:	2b00      	cmp	r3, #0
 8042ca2:	f000 80b3 	beq.w	8042e0c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042ca6:	683b      	ldr	r3, [r7, #0]
 8042ca8:	015a      	lsls	r2, r3, #5
 8042caa:	69bb      	ldr	r3, [r7, #24]
 8042cac:	4413      	add	r3, r2
 8042cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042cb2:	461a      	mov	r2, r3
 8042cb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042cb8:	6093      	str	r3, [r2, #8]
 8042cba:	e0a7      	b.n	8042e0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8042cbc:	693b      	ldr	r3, [r7, #16]
 8042cbe:	f003 0320 	and.w	r3, r3, #32
 8042cc2:	2b00      	cmp	r3, #0
 8042cc4:	d009      	beq.n	8042cda <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8042cc6:	683b      	ldr	r3, [r7, #0]
 8042cc8:	015a      	lsls	r2, r3, #5
 8042cca:	69bb      	ldr	r3, [r7, #24]
 8042ccc:	4413      	add	r3, r2
 8042cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042cd2:	461a      	mov	r2, r3
 8042cd4:	2320      	movs	r3, #32
 8042cd6:	6093      	str	r3, [r2, #8]
 8042cd8:	e098      	b.n	8042e0c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8042cda:	693b      	ldr	r3, [r7, #16]
 8042cdc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8042ce0:	2b00      	cmp	r3, #0
 8042ce2:	f040 8093 	bne.w	8042e0c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042ce6:	697b      	ldr	r3, [r7, #20]
 8042ce8:	4a4b      	ldr	r2, [pc, #300]	@ (8042e18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8042cea:	4293      	cmp	r3, r2
 8042cec:	d90f      	bls.n	8042d0e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8042cee:	693b      	ldr	r3, [r7, #16]
 8042cf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042cf4:	2b00      	cmp	r3, #0
 8042cf6:	d00a      	beq.n	8042d0e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042cf8:	683b      	ldr	r3, [r7, #0]
 8042cfa:	015a      	lsls	r2, r3, #5
 8042cfc:	69bb      	ldr	r3, [r7, #24]
 8042cfe:	4413      	add	r3, r2
 8042d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042d04:	461a      	mov	r2, r3
 8042d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042d0a:	6093      	str	r3, [r2, #8]
 8042d0c:	e07e      	b.n	8042e0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8042d0e:	683a      	ldr	r2, [r7, #0]
 8042d10:	4613      	mov	r3, r2
 8042d12:	00db      	lsls	r3, r3, #3
 8042d14:	4413      	add	r3, r2
 8042d16:	009b      	lsls	r3, r3, #2
 8042d18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8042d1c:	687a      	ldr	r2, [r7, #4]
 8042d1e:	4413      	add	r3, r2
 8042d20:	3304      	adds	r3, #4
 8042d22:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8042d24:	68fb      	ldr	r3, [r7, #12]
 8042d26:	6a1a      	ldr	r2, [r3, #32]
 8042d28:	683b      	ldr	r3, [r7, #0]
 8042d2a:	0159      	lsls	r1, r3, #5
 8042d2c:	69bb      	ldr	r3, [r7, #24]
 8042d2e:	440b      	add	r3, r1
 8042d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042d34:	691b      	ldr	r3, [r3, #16]
 8042d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8042d3a:	1ad2      	subs	r2, r2, r3
 8042d3c:	68fb      	ldr	r3, [r7, #12]
 8042d3e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8042d40:	683b      	ldr	r3, [r7, #0]
 8042d42:	2b00      	cmp	r3, #0
 8042d44:	d114      	bne.n	8042d70 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8042d46:	68fb      	ldr	r3, [r7, #12]
 8042d48:	691b      	ldr	r3, [r3, #16]
 8042d4a:	2b00      	cmp	r3, #0
 8042d4c:	d109      	bne.n	8042d62 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8042d4e:	687b      	ldr	r3, [r7, #4]
 8042d50:	6818      	ldr	r0, [r3, #0]
 8042d52:	687b      	ldr	r3, [r7, #4]
 8042d54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8042d58:	461a      	mov	r2, r3
 8042d5a:	2101      	movs	r1, #1
 8042d5c:	f005 fbf8 	bl	8048550 <USB_EP0_OutStart>
 8042d60:	e006      	b.n	8042d70 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8042d62:	68fb      	ldr	r3, [r7, #12]
 8042d64:	68da      	ldr	r2, [r3, #12]
 8042d66:	68fb      	ldr	r3, [r7, #12]
 8042d68:	695b      	ldr	r3, [r3, #20]
 8042d6a:	441a      	add	r2, r3
 8042d6c:	68fb      	ldr	r3, [r7, #12]
 8042d6e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8042d70:	683b      	ldr	r3, [r7, #0]
 8042d72:	b2db      	uxtb	r3, r3
 8042d74:	4619      	mov	r1, r3
 8042d76:	6878      	ldr	r0, [r7, #4]
 8042d78:	f007 fc24 	bl	804a5c4 <HAL_PCD_DataOutStageCallback>
 8042d7c:	e046      	b.n	8042e0c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8042d7e:	697b      	ldr	r3, [r7, #20]
 8042d80:	4a26      	ldr	r2, [pc, #152]	@ (8042e1c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8042d82:	4293      	cmp	r3, r2
 8042d84:	d124      	bne.n	8042dd0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8042d86:	693b      	ldr	r3, [r7, #16]
 8042d88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8042d8c:	2b00      	cmp	r3, #0
 8042d8e:	d00a      	beq.n	8042da6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042d90:	683b      	ldr	r3, [r7, #0]
 8042d92:	015a      	lsls	r2, r3, #5
 8042d94:	69bb      	ldr	r3, [r7, #24]
 8042d96:	4413      	add	r3, r2
 8042d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042d9c:	461a      	mov	r2, r3
 8042d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042da2:	6093      	str	r3, [r2, #8]
 8042da4:	e032      	b.n	8042e0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8042da6:	693b      	ldr	r3, [r7, #16]
 8042da8:	f003 0320 	and.w	r3, r3, #32
 8042dac:	2b00      	cmp	r3, #0
 8042dae:	d008      	beq.n	8042dc2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8042db0:	683b      	ldr	r3, [r7, #0]
 8042db2:	015a      	lsls	r2, r3, #5
 8042db4:	69bb      	ldr	r3, [r7, #24]
 8042db6:	4413      	add	r3, r2
 8042db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042dbc:	461a      	mov	r2, r3
 8042dbe:	2320      	movs	r3, #32
 8042dc0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8042dc2:	683b      	ldr	r3, [r7, #0]
 8042dc4:	b2db      	uxtb	r3, r3
 8042dc6:	4619      	mov	r1, r3
 8042dc8:	6878      	ldr	r0, [r7, #4]
 8042dca:	f007 fbfb 	bl	804a5c4 <HAL_PCD_DataOutStageCallback>
 8042dce:	e01d      	b.n	8042e0c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8042dd0:	683b      	ldr	r3, [r7, #0]
 8042dd2:	2b00      	cmp	r3, #0
 8042dd4:	d114      	bne.n	8042e00 <PCD_EP_OutXfrComplete_int+0x1b0>
 8042dd6:	6879      	ldr	r1, [r7, #4]
 8042dd8:	683a      	ldr	r2, [r7, #0]
 8042dda:	4613      	mov	r3, r2
 8042ddc:	00db      	lsls	r3, r3, #3
 8042dde:	4413      	add	r3, r2
 8042de0:	009b      	lsls	r3, r3, #2
 8042de2:	440b      	add	r3, r1
 8042de4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8042de8:	681b      	ldr	r3, [r3, #0]
 8042dea:	2b00      	cmp	r3, #0
 8042dec:	d108      	bne.n	8042e00 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8042dee:	687b      	ldr	r3, [r7, #4]
 8042df0:	6818      	ldr	r0, [r3, #0]
 8042df2:	687b      	ldr	r3, [r7, #4]
 8042df4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8042df8:	461a      	mov	r2, r3
 8042dfa:	2100      	movs	r1, #0
 8042dfc:	f005 fba8 	bl	8048550 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8042e00:	683b      	ldr	r3, [r7, #0]
 8042e02:	b2db      	uxtb	r3, r3
 8042e04:	4619      	mov	r1, r3
 8042e06:	6878      	ldr	r0, [r7, #4]
 8042e08:	f007 fbdc 	bl	804a5c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8042e0c:	2300      	movs	r3, #0
}
 8042e0e:	4618      	mov	r0, r3
 8042e10:	3720      	adds	r7, #32
 8042e12:	46bd      	mov	sp, r7
 8042e14:	bd80      	pop	{r7, pc}
 8042e16:	bf00      	nop
 8042e18:	4f54300a 	.word	0x4f54300a
 8042e1c:	4f54310a 	.word	0x4f54310a

08042e20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8042e20:	b580      	push	{r7, lr}
 8042e22:	b086      	sub	sp, #24
 8042e24:	af00      	add	r7, sp, #0
 8042e26:	6078      	str	r0, [r7, #4]
 8042e28:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8042e2a:	687b      	ldr	r3, [r7, #4]
 8042e2c:	681b      	ldr	r3, [r3, #0]
 8042e2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042e30:	697b      	ldr	r3, [r7, #20]
 8042e32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8042e34:	697b      	ldr	r3, [r7, #20]
 8042e36:	333c      	adds	r3, #60	@ 0x3c
 8042e38:	3304      	adds	r3, #4
 8042e3a:	681b      	ldr	r3, [r3, #0]
 8042e3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8042e3e:	683b      	ldr	r3, [r7, #0]
 8042e40:	015a      	lsls	r2, r3, #5
 8042e42:	693b      	ldr	r3, [r7, #16]
 8042e44:	4413      	add	r3, r2
 8042e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042e4a:	689b      	ldr	r3, [r3, #8]
 8042e4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042e4e:	68fb      	ldr	r3, [r7, #12]
 8042e50:	4a15      	ldr	r2, [pc, #84]	@ (8042ea8 <PCD_EP_OutSetupPacket_int+0x88>)
 8042e52:	4293      	cmp	r3, r2
 8042e54:	d90e      	bls.n	8042e74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8042e56:	68bb      	ldr	r3, [r7, #8]
 8042e58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042e5c:	2b00      	cmp	r3, #0
 8042e5e:	d009      	beq.n	8042e74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042e60:	683b      	ldr	r3, [r7, #0]
 8042e62:	015a      	lsls	r2, r3, #5
 8042e64:	693b      	ldr	r3, [r7, #16]
 8042e66:	4413      	add	r3, r2
 8042e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042e6c:	461a      	mov	r2, r3
 8042e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042e72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8042e74:	6878      	ldr	r0, [r7, #4]
 8042e76:	f007 fb93 	bl	804a5a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8042e7a:	68fb      	ldr	r3, [r7, #12]
 8042e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8042ea8 <PCD_EP_OutSetupPacket_int+0x88>)
 8042e7e:	4293      	cmp	r3, r2
 8042e80:	d90c      	bls.n	8042e9c <PCD_EP_OutSetupPacket_int+0x7c>
 8042e82:	687b      	ldr	r3, [r7, #4]
 8042e84:	799b      	ldrb	r3, [r3, #6]
 8042e86:	2b01      	cmp	r3, #1
 8042e88:	d108      	bne.n	8042e9c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8042e8a:	687b      	ldr	r3, [r7, #4]
 8042e8c:	6818      	ldr	r0, [r3, #0]
 8042e8e:	687b      	ldr	r3, [r7, #4]
 8042e90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8042e94:	461a      	mov	r2, r3
 8042e96:	2101      	movs	r1, #1
 8042e98:	f005 fb5a 	bl	8048550 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8042e9c:	2300      	movs	r3, #0
}
 8042e9e:	4618      	mov	r0, r3
 8042ea0:	3718      	adds	r7, #24
 8042ea2:	46bd      	mov	sp, r7
 8042ea4:	bd80      	pop	{r7, pc}
 8042ea6:	bf00      	nop
 8042ea8:	4f54300a 	.word	0x4f54300a

08042eac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8042eac:	b480      	push	{r7}
 8042eae:	b085      	sub	sp, #20
 8042eb0:	af00      	add	r7, sp, #0
 8042eb2:	6078      	str	r0, [r7, #4]
 8042eb4:	460b      	mov	r3, r1
 8042eb6:	70fb      	strb	r3, [r7, #3]
 8042eb8:	4613      	mov	r3, r2
 8042eba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8042ebc:	687b      	ldr	r3, [r7, #4]
 8042ebe:	681b      	ldr	r3, [r3, #0]
 8042ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042ec2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8042ec4:	78fb      	ldrb	r3, [r7, #3]
 8042ec6:	2b00      	cmp	r3, #0
 8042ec8:	d107      	bne.n	8042eda <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8042eca:	883b      	ldrh	r3, [r7, #0]
 8042ecc:	0419      	lsls	r1, r3, #16
 8042ece:	687b      	ldr	r3, [r7, #4]
 8042ed0:	681b      	ldr	r3, [r3, #0]
 8042ed2:	68ba      	ldr	r2, [r7, #8]
 8042ed4:	430a      	orrs	r2, r1
 8042ed6:	629a      	str	r2, [r3, #40]	@ 0x28
 8042ed8:	e028      	b.n	8042f2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8042eda:	687b      	ldr	r3, [r7, #4]
 8042edc:	681b      	ldr	r3, [r3, #0]
 8042ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8042ee0:	0c1b      	lsrs	r3, r3, #16
 8042ee2:	68ba      	ldr	r2, [r7, #8]
 8042ee4:	4413      	add	r3, r2
 8042ee6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8042ee8:	2300      	movs	r3, #0
 8042eea:	73fb      	strb	r3, [r7, #15]
 8042eec:	e00d      	b.n	8042f0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8042eee:	687b      	ldr	r3, [r7, #4]
 8042ef0:	681a      	ldr	r2, [r3, #0]
 8042ef2:	7bfb      	ldrb	r3, [r7, #15]
 8042ef4:	3340      	adds	r3, #64	@ 0x40
 8042ef6:	009b      	lsls	r3, r3, #2
 8042ef8:	4413      	add	r3, r2
 8042efa:	685b      	ldr	r3, [r3, #4]
 8042efc:	0c1b      	lsrs	r3, r3, #16
 8042efe:	68ba      	ldr	r2, [r7, #8]
 8042f00:	4413      	add	r3, r2
 8042f02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8042f04:	7bfb      	ldrb	r3, [r7, #15]
 8042f06:	3301      	adds	r3, #1
 8042f08:	73fb      	strb	r3, [r7, #15]
 8042f0a:	7bfa      	ldrb	r2, [r7, #15]
 8042f0c:	78fb      	ldrb	r3, [r7, #3]
 8042f0e:	3b01      	subs	r3, #1
 8042f10:	429a      	cmp	r2, r3
 8042f12:	d3ec      	bcc.n	8042eee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8042f14:	883b      	ldrh	r3, [r7, #0]
 8042f16:	0418      	lsls	r0, r3, #16
 8042f18:	687b      	ldr	r3, [r7, #4]
 8042f1a:	6819      	ldr	r1, [r3, #0]
 8042f1c:	78fb      	ldrb	r3, [r7, #3]
 8042f1e:	3b01      	subs	r3, #1
 8042f20:	68ba      	ldr	r2, [r7, #8]
 8042f22:	4302      	orrs	r2, r0
 8042f24:	3340      	adds	r3, #64	@ 0x40
 8042f26:	009b      	lsls	r3, r3, #2
 8042f28:	440b      	add	r3, r1
 8042f2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8042f2c:	2300      	movs	r3, #0
}
 8042f2e:	4618      	mov	r0, r3
 8042f30:	3714      	adds	r7, #20
 8042f32:	46bd      	mov	sp, r7
 8042f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f38:	4770      	bx	lr

08042f3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8042f3a:	b480      	push	{r7}
 8042f3c:	b083      	sub	sp, #12
 8042f3e:	af00      	add	r7, sp, #0
 8042f40:	6078      	str	r0, [r7, #4]
 8042f42:	460b      	mov	r3, r1
 8042f44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8042f46:	687b      	ldr	r3, [r7, #4]
 8042f48:	681b      	ldr	r3, [r3, #0]
 8042f4a:	887a      	ldrh	r2, [r7, #2]
 8042f4c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8042f4e:	2300      	movs	r3, #0
}
 8042f50:	4618      	mov	r0, r3
 8042f52:	370c      	adds	r7, #12
 8042f54:	46bd      	mov	sp, r7
 8042f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f5a:	4770      	bx	lr

08042f5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8042f5c:	b480      	push	{r7}
 8042f5e:	b085      	sub	sp, #20
 8042f60:	af00      	add	r7, sp, #0
 8042f62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8042f64:	687b      	ldr	r3, [r7, #4]
 8042f66:	681b      	ldr	r3, [r3, #0]
 8042f68:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8042f6a:	687b      	ldr	r3, [r7, #4]
 8042f6c:	2201      	movs	r2, #1
 8042f6e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8042f72:	687b      	ldr	r3, [r7, #4]
 8042f74:	2200      	movs	r2, #0
 8042f76:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8042f7a:	68fb      	ldr	r3, [r7, #12]
 8042f7c:	699b      	ldr	r3, [r3, #24]
 8042f7e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8042f82:	68fb      	ldr	r3, [r7, #12]
 8042f84:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8042f86:	68fb      	ldr	r3, [r7, #12]
 8042f88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8042f8a:	4b05      	ldr	r3, [pc, #20]	@ (8042fa0 <HAL_PCDEx_ActivateLPM+0x44>)
 8042f8c:	4313      	orrs	r3, r2
 8042f8e:	68fa      	ldr	r2, [r7, #12]
 8042f90:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8042f92:	2300      	movs	r3, #0
}
 8042f94:	4618      	mov	r0, r3
 8042f96:	3714      	adds	r7, #20
 8042f98:	46bd      	mov	sp, r7
 8042f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f9e:	4770      	bx	lr
 8042fa0:	10000003 	.word	0x10000003

08042fa4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8042fa4:	b480      	push	{r7}
 8042fa6:	b083      	sub	sp, #12
 8042fa8:	af00      	add	r7, sp, #0
 8042faa:	6078      	str	r0, [r7, #4]
 8042fac:	460b      	mov	r3, r1
 8042fae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8042fb0:	bf00      	nop
 8042fb2:	370c      	adds	r7, #12
 8042fb4:	46bd      	mov	sp, r7
 8042fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042fba:	4770      	bx	lr

08042fbc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8042fbc:	b580      	push	{r7, lr}
 8042fbe:	b084      	sub	sp, #16
 8042fc0:	af00      	add	r7, sp, #0
 8042fc2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8042fc4:	4b29      	ldr	r3, [pc, #164]	@ (804306c <HAL_PWREx_ConfigSupply+0xb0>)
 8042fc6:	68db      	ldr	r3, [r3, #12]
 8042fc8:	f003 0307 	and.w	r3, r3, #7
 8042fcc:	2b06      	cmp	r3, #6
 8042fce:	d00a      	beq.n	8042fe6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8042fd0:	4b26      	ldr	r3, [pc, #152]	@ (804306c <HAL_PWREx_ConfigSupply+0xb0>)
 8042fd2:	68db      	ldr	r3, [r3, #12]
 8042fd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8042fd8:	687a      	ldr	r2, [r7, #4]
 8042fda:	429a      	cmp	r2, r3
 8042fdc:	d001      	beq.n	8042fe2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8042fde:	2301      	movs	r3, #1
 8042fe0:	e040      	b.n	8043064 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8042fe2:	2300      	movs	r3, #0
 8042fe4:	e03e      	b.n	8043064 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8042fe6:	4b21      	ldr	r3, [pc, #132]	@ (804306c <HAL_PWREx_ConfigSupply+0xb0>)
 8042fe8:	68db      	ldr	r3, [r3, #12]
 8042fea:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8042fee:	491f      	ldr	r1, [pc, #124]	@ (804306c <HAL_PWREx_ConfigSupply+0xb0>)
 8042ff0:	687b      	ldr	r3, [r7, #4]
 8042ff2:	4313      	orrs	r3, r2
 8042ff4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8042ff6:	f7fe f8ef 	bl	80411d8 <HAL_GetTick>
 8042ffa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8042ffc:	e009      	b.n	8043012 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8042ffe:	f7fe f8eb 	bl	80411d8 <HAL_GetTick>
 8043002:	4602      	mov	r2, r0
 8043004:	68fb      	ldr	r3, [r7, #12]
 8043006:	1ad3      	subs	r3, r2, r3
 8043008:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 804300c:	d901      	bls.n	8043012 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 804300e:	2301      	movs	r3, #1
 8043010:	e028      	b.n	8043064 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8043012:	4b16      	ldr	r3, [pc, #88]	@ (804306c <HAL_PWREx_ConfigSupply+0xb0>)
 8043014:	685b      	ldr	r3, [r3, #4]
 8043016:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 804301a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 804301e:	d1ee      	bne.n	8042ffe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8043020:	687b      	ldr	r3, [r7, #4]
 8043022:	2b1e      	cmp	r3, #30
 8043024:	d008      	beq.n	8043038 <HAL_PWREx_ConfigSupply+0x7c>
 8043026:	687b      	ldr	r3, [r7, #4]
 8043028:	2b2e      	cmp	r3, #46	@ 0x2e
 804302a:	d005      	beq.n	8043038 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 804302c:	687b      	ldr	r3, [r7, #4]
 804302e:	2b1d      	cmp	r3, #29
 8043030:	d002      	beq.n	8043038 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8043032:	687b      	ldr	r3, [r7, #4]
 8043034:	2b2d      	cmp	r3, #45	@ 0x2d
 8043036:	d114      	bne.n	8043062 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8043038:	f7fe f8ce 	bl	80411d8 <HAL_GetTick>
 804303c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 804303e:	e009      	b.n	8043054 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8043040:	f7fe f8ca 	bl	80411d8 <HAL_GetTick>
 8043044:	4602      	mov	r2, r0
 8043046:	68fb      	ldr	r3, [r7, #12]
 8043048:	1ad3      	subs	r3, r2, r3
 804304a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 804304e:	d901      	bls.n	8043054 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8043050:	2301      	movs	r3, #1
 8043052:	e007      	b.n	8043064 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8043054:	4b05      	ldr	r3, [pc, #20]	@ (804306c <HAL_PWREx_ConfigSupply+0xb0>)
 8043056:	68db      	ldr	r3, [r3, #12]
 8043058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 804305c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8043060:	d1ee      	bne.n	8043040 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8043062:	2300      	movs	r3, #0
}
 8043064:	4618      	mov	r0, r3
 8043066:	3710      	adds	r7, #16
 8043068:	46bd      	mov	sp, r7
 804306a:	bd80      	pop	{r7, pc}
 804306c:	58024800 	.word	0x58024800

08043070 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8043070:	b480      	push	{r7}
 8043072:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8043074:	4b05      	ldr	r3, [pc, #20]	@ (804308c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8043076:	68db      	ldr	r3, [r3, #12]
 8043078:	4a04      	ldr	r2, [pc, #16]	@ (804308c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 804307a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 804307e:	60d3      	str	r3, [r2, #12]
}
 8043080:	bf00      	nop
 8043082:	46bd      	mov	sp, r7
 8043084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043088:	4770      	bx	lr
 804308a:	bf00      	nop
 804308c:	58024800 	.word	0x58024800

08043090 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8043090:	b580      	push	{r7, lr}
 8043092:	b08c      	sub	sp, #48	@ 0x30
 8043094:	af00      	add	r7, sp, #0
 8043096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8043098:	687b      	ldr	r3, [r7, #4]
 804309a:	2b00      	cmp	r3, #0
 804309c:	d102      	bne.n	80430a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 804309e:	2301      	movs	r3, #1
 80430a0:	f000 bc48 	b.w	8043934 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80430a4:	687b      	ldr	r3, [r7, #4]
 80430a6:	681b      	ldr	r3, [r3, #0]
 80430a8:	f003 0301 	and.w	r3, r3, #1
 80430ac:	2b00      	cmp	r3, #0
 80430ae:	f000 8088 	beq.w	80431c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80430b2:	4b99      	ldr	r3, [pc, #612]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 80430b4:	691b      	ldr	r3, [r3, #16]
 80430b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80430ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80430bc:	4b96      	ldr	r3, [pc, #600]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 80430be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80430c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80430c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80430c4:	2b10      	cmp	r3, #16
 80430c6:	d007      	beq.n	80430d8 <HAL_RCC_OscConfig+0x48>
 80430c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80430ca:	2b18      	cmp	r3, #24
 80430cc:	d111      	bne.n	80430f2 <HAL_RCC_OscConfig+0x62>
 80430ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80430d0:	f003 0303 	and.w	r3, r3, #3
 80430d4:	2b02      	cmp	r3, #2
 80430d6:	d10c      	bne.n	80430f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80430d8:	4b8f      	ldr	r3, [pc, #572]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 80430da:	681b      	ldr	r3, [r3, #0]
 80430dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80430e0:	2b00      	cmp	r3, #0
 80430e2:	d06d      	beq.n	80431c0 <HAL_RCC_OscConfig+0x130>
 80430e4:	687b      	ldr	r3, [r7, #4]
 80430e6:	685b      	ldr	r3, [r3, #4]
 80430e8:	2b00      	cmp	r3, #0
 80430ea:	d169      	bne.n	80431c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80430ec:	2301      	movs	r3, #1
 80430ee:	f000 bc21 	b.w	8043934 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80430f2:	687b      	ldr	r3, [r7, #4]
 80430f4:	685b      	ldr	r3, [r3, #4]
 80430f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80430fa:	d106      	bne.n	804310a <HAL_RCC_OscConfig+0x7a>
 80430fc:	4b86      	ldr	r3, [pc, #536]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 80430fe:	681b      	ldr	r3, [r3, #0]
 8043100:	4a85      	ldr	r2, [pc, #532]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8043106:	6013      	str	r3, [r2, #0]
 8043108:	e02e      	b.n	8043168 <HAL_RCC_OscConfig+0xd8>
 804310a:	687b      	ldr	r3, [r7, #4]
 804310c:	685b      	ldr	r3, [r3, #4]
 804310e:	2b00      	cmp	r3, #0
 8043110:	d10c      	bne.n	804312c <HAL_RCC_OscConfig+0x9c>
 8043112:	4b81      	ldr	r3, [pc, #516]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043114:	681b      	ldr	r3, [r3, #0]
 8043116:	4a80      	ldr	r2, [pc, #512]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 804311c:	6013      	str	r3, [r2, #0]
 804311e:	4b7e      	ldr	r3, [pc, #504]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043120:	681b      	ldr	r3, [r3, #0]
 8043122:	4a7d      	ldr	r2, [pc, #500]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043124:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8043128:	6013      	str	r3, [r2, #0]
 804312a:	e01d      	b.n	8043168 <HAL_RCC_OscConfig+0xd8>
 804312c:	687b      	ldr	r3, [r7, #4]
 804312e:	685b      	ldr	r3, [r3, #4]
 8043130:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8043134:	d10c      	bne.n	8043150 <HAL_RCC_OscConfig+0xc0>
 8043136:	4b78      	ldr	r3, [pc, #480]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043138:	681b      	ldr	r3, [r3, #0]
 804313a:	4a77      	ldr	r2, [pc, #476]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 804313c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8043140:	6013      	str	r3, [r2, #0]
 8043142:	4b75      	ldr	r3, [pc, #468]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043144:	681b      	ldr	r3, [r3, #0]
 8043146:	4a74      	ldr	r2, [pc, #464]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 804314c:	6013      	str	r3, [r2, #0]
 804314e:	e00b      	b.n	8043168 <HAL_RCC_OscConfig+0xd8>
 8043150:	4b71      	ldr	r3, [pc, #452]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043152:	681b      	ldr	r3, [r3, #0]
 8043154:	4a70      	ldr	r2, [pc, #448]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 804315a:	6013      	str	r3, [r2, #0]
 804315c:	4b6e      	ldr	r3, [pc, #440]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 804315e:	681b      	ldr	r3, [r3, #0]
 8043160:	4a6d      	ldr	r2, [pc, #436]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043162:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8043166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8043168:	687b      	ldr	r3, [r7, #4]
 804316a:	685b      	ldr	r3, [r3, #4]
 804316c:	2b00      	cmp	r3, #0
 804316e:	d013      	beq.n	8043198 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043170:	f7fe f832 	bl	80411d8 <HAL_GetTick>
 8043174:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8043176:	e008      	b.n	804318a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8043178:	f7fe f82e 	bl	80411d8 <HAL_GetTick>
 804317c:	4602      	mov	r2, r0
 804317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043180:	1ad3      	subs	r3, r2, r3
 8043182:	2b64      	cmp	r3, #100	@ 0x64
 8043184:	d901      	bls.n	804318a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8043186:	2303      	movs	r3, #3
 8043188:	e3d4      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 804318a:	4b63      	ldr	r3, [pc, #396]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 804318c:	681b      	ldr	r3, [r3, #0]
 804318e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8043192:	2b00      	cmp	r3, #0
 8043194:	d0f0      	beq.n	8043178 <HAL_RCC_OscConfig+0xe8>
 8043196:	e014      	b.n	80431c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043198:	f7fe f81e 	bl	80411d8 <HAL_GetTick>
 804319c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 804319e:	e008      	b.n	80431b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80431a0:	f7fe f81a 	bl	80411d8 <HAL_GetTick>
 80431a4:	4602      	mov	r2, r0
 80431a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80431a8:	1ad3      	subs	r3, r2, r3
 80431aa:	2b64      	cmp	r3, #100	@ 0x64
 80431ac:	d901      	bls.n	80431b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80431ae:	2303      	movs	r3, #3
 80431b0:	e3c0      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80431b2:	4b59      	ldr	r3, [pc, #356]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 80431b4:	681b      	ldr	r3, [r3, #0]
 80431b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80431ba:	2b00      	cmp	r3, #0
 80431bc:	d1f0      	bne.n	80431a0 <HAL_RCC_OscConfig+0x110>
 80431be:	e000      	b.n	80431c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80431c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80431c2:	687b      	ldr	r3, [r7, #4]
 80431c4:	681b      	ldr	r3, [r3, #0]
 80431c6:	f003 0302 	and.w	r3, r3, #2
 80431ca:	2b00      	cmp	r3, #0
 80431cc:	f000 80ca 	beq.w	8043364 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80431d0:	4b51      	ldr	r3, [pc, #324]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 80431d2:	691b      	ldr	r3, [r3, #16]
 80431d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80431d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80431da:	4b4f      	ldr	r3, [pc, #316]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 80431dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80431de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80431e0:	6a3b      	ldr	r3, [r7, #32]
 80431e2:	2b00      	cmp	r3, #0
 80431e4:	d007      	beq.n	80431f6 <HAL_RCC_OscConfig+0x166>
 80431e6:	6a3b      	ldr	r3, [r7, #32]
 80431e8:	2b18      	cmp	r3, #24
 80431ea:	d156      	bne.n	804329a <HAL_RCC_OscConfig+0x20a>
 80431ec:	69fb      	ldr	r3, [r7, #28]
 80431ee:	f003 0303 	and.w	r3, r3, #3
 80431f2:	2b00      	cmp	r3, #0
 80431f4:	d151      	bne.n	804329a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80431f6:	4b48      	ldr	r3, [pc, #288]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 80431f8:	681b      	ldr	r3, [r3, #0]
 80431fa:	f003 0304 	and.w	r3, r3, #4
 80431fe:	2b00      	cmp	r3, #0
 8043200:	d005      	beq.n	804320e <HAL_RCC_OscConfig+0x17e>
 8043202:	687b      	ldr	r3, [r7, #4]
 8043204:	68db      	ldr	r3, [r3, #12]
 8043206:	2b00      	cmp	r3, #0
 8043208:	d101      	bne.n	804320e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 804320a:	2301      	movs	r3, #1
 804320c:	e392      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 804320e:	4b42      	ldr	r3, [pc, #264]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043210:	681b      	ldr	r3, [r3, #0]
 8043212:	f023 0219 	bic.w	r2, r3, #25
 8043216:	687b      	ldr	r3, [r7, #4]
 8043218:	68db      	ldr	r3, [r3, #12]
 804321a:	493f      	ldr	r1, [pc, #252]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 804321c:	4313      	orrs	r3, r2
 804321e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043220:	f7fd ffda 	bl	80411d8 <HAL_GetTick>
 8043224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8043226:	e008      	b.n	804323a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8043228:	f7fd ffd6 	bl	80411d8 <HAL_GetTick>
 804322c:	4602      	mov	r2, r0
 804322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043230:	1ad3      	subs	r3, r2, r3
 8043232:	2b02      	cmp	r3, #2
 8043234:	d901      	bls.n	804323a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8043236:	2303      	movs	r3, #3
 8043238:	e37c      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 804323a:	4b37      	ldr	r3, [pc, #220]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 804323c:	681b      	ldr	r3, [r3, #0]
 804323e:	f003 0304 	and.w	r3, r3, #4
 8043242:	2b00      	cmp	r3, #0
 8043244:	d0f0      	beq.n	8043228 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043246:	f7fd fff7 	bl	8041238 <HAL_GetREVID>
 804324a:	4603      	mov	r3, r0
 804324c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8043250:	4293      	cmp	r3, r2
 8043252:	d817      	bhi.n	8043284 <HAL_RCC_OscConfig+0x1f4>
 8043254:	687b      	ldr	r3, [r7, #4]
 8043256:	691b      	ldr	r3, [r3, #16]
 8043258:	2b40      	cmp	r3, #64	@ 0x40
 804325a:	d108      	bne.n	804326e <HAL_RCC_OscConfig+0x1de>
 804325c:	4b2e      	ldr	r3, [pc, #184]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 804325e:	685b      	ldr	r3, [r3, #4]
 8043260:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8043264:	4a2c      	ldr	r2, [pc, #176]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 804326a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 804326c:	e07a      	b.n	8043364 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804326e:	4b2a      	ldr	r3, [pc, #168]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043270:	685b      	ldr	r3, [r3, #4]
 8043272:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8043276:	687b      	ldr	r3, [r7, #4]
 8043278:	691b      	ldr	r3, [r3, #16]
 804327a:	031b      	lsls	r3, r3, #12
 804327c:	4926      	ldr	r1, [pc, #152]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 804327e:	4313      	orrs	r3, r2
 8043280:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8043282:	e06f      	b.n	8043364 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043284:	4b24      	ldr	r3, [pc, #144]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043286:	685b      	ldr	r3, [r3, #4]
 8043288:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 804328c:	687b      	ldr	r3, [r7, #4]
 804328e:	691b      	ldr	r3, [r3, #16]
 8043290:	061b      	lsls	r3, r3, #24
 8043292:	4921      	ldr	r1, [pc, #132]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043294:	4313      	orrs	r3, r2
 8043296:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8043298:	e064      	b.n	8043364 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 804329a:	687b      	ldr	r3, [r7, #4]
 804329c:	68db      	ldr	r3, [r3, #12]
 804329e:	2b00      	cmp	r3, #0
 80432a0:	d047      	beq.n	8043332 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80432a2:	4b1d      	ldr	r3, [pc, #116]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 80432a4:	681b      	ldr	r3, [r3, #0]
 80432a6:	f023 0219 	bic.w	r2, r3, #25
 80432aa:	687b      	ldr	r3, [r7, #4]
 80432ac:	68db      	ldr	r3, [r3, #12]
 80432ae:	491a      	ldr	r1, [pc, #104]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 80432b0:	4313      	orrs	r3, r2
 80432b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80432b4:	f7fd ff90 	bl	80411d8 <HAL_GetTick>
 80432b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80432ba:	e008      	b.n	80432ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80432bc:	f7fd ff8c 	bl	80411d8 <HAL_GetTick>
 80432c0:	4602      	mov	r2, r0
 80432c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80432c4:	1ad3      	subs	r3, r2, r3
 80432c6:	2b02      	cmp	r3, #2
 80432c8:	d901      	bls.n	80432ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80432ca:	2303      	movs	r3, #3
 80432cc:	e332      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80432ce:	4b12      	ldr	r3, [pc, #72]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 80432d0:	681b      	ldr	r3, [r3, #0]
 80432d2:	f003 0304 	and.w	r3, r3, #4
 80432d6:	2b00      	cmp	r3, #0
 80432d8:	d0f0      	beq.n	80432bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80432da:	f7fd ffad 	bl	8041238 <HAL_GetREVID>
 80432de:	4603      	mov	r3, r0
 80432e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80432e4:	4293      	cmp	r3, r2
 80432e6:	d819      	bhi.n	804331c <HAL_RCC_OscConfig+0x28c>
 80432e8:	687b      	ldr	r3, [r7, #4]
 80432ea:	691b      	ldr	r3, [r3, #16]
 80432ec:	2b40      	cmp	r3, #64	@ 0x40
 80432ee:	d108      	bne.n	8043302 <HAL_RCC_OscConfig+0x272>
 80432f0:	4b09      	ldr	r3, [pc, #36]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 80432f2:	685b      	ldr	r3, [r3, #4]
 80432f4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80432f8:	4a07      	ldr	r2, [pc, #28]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 80432fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80432fe:	6053      	str	r3, [r2, #4]
 8043300:	e030      	b.n	8043364 <HAL_RCC_OscConfig+0x2d4>
 8043302:	4b05      	ldr	r3, [pc, #20]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043304:	685b      	ldr	r3, [r3, #4]
 8043306:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 804330a:	687b      	ldr	r3, [r7, #4]
 804330c:	691b      	ldr	r3, [r3, #16]
 804330e:	031b      	lsls	r3, r3, #12
 8043310:	4901      	ldr	r1, [pc, #4]	@ (8043318 <HAL_RCC_OscConfig+0x288>)
 8043312:	4313      	orrs	r3, r2
 8043314:	604b      	str	r3, [r1, #4]
 8043316:	e025      	b.n	8043364 <HAL_RCC_OscConfig+0x2d4>
 8043318:	58024400 	.word	0x58024400
 804331c:	4b9a      	ldr	r3, [pc, #616]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 804331e:	685b      	ldr	r3, [r3, #4]
 8043320:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8043324:	687b      	ldr	r3, [r7, #4]
 8043326:	691b      	ldr	r3, [r3, #16]
 8043328:	061b      	lsls	r3, r3, #24
 804332a:	4997      	ldr	r1, [pc, #604]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 804332c:	4313      	orrs	r3, r2
 804332e:	604b      	str	r3, [r1, #4]
 8043330:	e018      	b.n	8043364 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8043332:	4b95      	ldr	r3, [pc, #596]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 8043334:	681b      	ldr	r3, [r3, #0]
 8043336:	4a94      	ldr	r2, [pc, #592]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 8043338:	f023 0301 	bic.w	r3, r3, #1
 804333c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804333e:	f7fd ff4b 	bl	80411d8 <HAL_GetTick>
 8043342:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8043344:	e008      	b.n	8043358 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8043346:	f7fd ff47 	bl	80411d8 <HAL_GetTick>
 804334a:	4602      	mov	r2, r0
 804334c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804334e:	1ad3      	subs	r3, r2, r3
 8043350:	2b02      	cmp	r3, #2
 8043352:	d901      	bls.n	8043358 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8043354:	2303      	movs	r3, #3
 8043356:	e2ed      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8043358:	4b8b      	ldr	r3, [pc, #556]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 804335a:	681b      	ldr	r3, [r3, #0]
 804335c:	f003 0304 	and.w	r3, r3, #4
 8043360:	2b00      	cmp	r3, #0
 8043362:	d1f0      	bne.n	8043346 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8043364:	687b      	ldr	r3, [r7, #4]
 8043366:	681b      	ldr	r3, [r3, #0]
 8043368:	f003 0310 	and.w	r3, r3, #16
 804336c:	2b00      	cmp	r3, #0
 804336e:	f000 80a9 	beq.w	80434c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8043372:	4b85      	ldr	r3, [pc, #532]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 8043374:	691b      	ldr	r3, [r3, #16]
 8043376:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 804337a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 804337c:	4b82      	ldr	r3, [pc, #520]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 804337e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043380:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8043382:	69bb      	ldr	r3, [r7, #24]
 8043384:	2b08      	cmp	r3, #8
 8043386:	d007      	beq.n	8043398 <HAL_RCC_OscConfig+0x308>
 8043388:	69bb      	ldr	r3, [r7, #24]
 804338a:	2b18      	cmp	r3, #24
 804338c:	d13a      	bne.n	8043404 <HAL_RCC_OscConfig+0x374>
 804338e:	697b      	ldr	r3, [r7, #20]
 8043390:	f003 0303 	and.w	r3, r3, #3
 8043394:	2b01      	cmp	r3, #1
 8043396:	d135      	bne.n	8043404 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8043398:	4b7b      	ldr	r3, [pc, #492]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 804339a:	681b      	ldr	r3, [r3, #0]
 804339c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80433a0:	2b00      	cmp	r3, #0
 80433a2:	d005      	beq.n	80433b0 <HAL_RCC_OscConfig+0x320>
 80433a4:	687b      	ldr	r3, [r7, #4]
 80433a6:	69db      	ldr	r3, [r3, #28]
 80433a8:	2b80      	cmp	r3, #128	@ 0x80
 80433aa:	d001      	beq.n	80433b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80433ac:	2301      	movs	r3, #1
 80433ae:	e2c1      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80433b0:	f7fd ff42 	bl	8041238 <HAL_GetREVID>
 80433b4:	4603      	mov	r3, r0
 80433b6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80433ba:	4293      	cmp	r3, r2
 80433bc:	d817      	bhi.n	80433ee <HAL_RCC_OscConfig+0x35e>
 80433be:	687b      	ldr	r3, [r7, #4]
 80433c0:	6a1b      	ldr	r3, [r3, #32]
 80433c2:	2b20      	cmp	r3, #32
 80433c4:	d108      	bne.n	80433d8 <HAL_RCC_OscConfig+0x348>
 80433c6:	4b70      	ldr	r3, [pc, #448]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 80433c8:	685b      	ldr	r3, [r3, #4]
 80433ca:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80433ce:	4a6e      	ldr	r2, [pc, #440]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 80433d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80433d4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80433d6:	e075      	b.n	80434c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80433d8:	4b6b      	ldr	r3, [pc, #428]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 80433da:	685b      	ldr	r3, [r3, #4]
 80433dc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80433e0:	687b      	ldr	r3, [r7, #4]
 80433e2:	6a1b      	ldr	r3, [r3, #32]
 80433e4:	069b      	lsls	r3, r3, #26
 80433e6:	4968      	ldr	r1, [pc, #416]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 80433e8:	4313      	orrs	r3, r2
 80433ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80433ec:	e06a      	b.n	80434c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80433ee:	4b66      	ldr	r3, [pc, #408]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 80433f0:	68db      	ldr	r3, [r3, #12]
 80433f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80433f6:	687b      	ldr	r3, [r7, #4]
 80433f8:	6a1b      	ldr	r3, [r3, #32]
 80433fa:	061b      	lsls	r3, r3, #24
 80433fc:	4962      	ldr	r1, [pc, #392]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 80433fe:	4313      	orrs	r3, r2
 8043400:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8043402:	e05f      	b.n	80434c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8043404:	687b      	ldr	r3, [r7, #4]
 8043406:	69db      	ldr	r3, [r3, #28]
 8043408:	2b00      	cmp	r3, #0
 804340a:	d042      	beq.n	8043492 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 804340c:	4b5e      	ldr	r3, [pc, #376]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 804340e:	681b      	ldr	r3, [r3, #0]
 8043410:	4a5d      	ldr	r2, [pc, #372]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 8043412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8043416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043418:	f7fd fede 	bl	80411d8 <HAL_GetTick>
 804341c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 804341e:	e008      	b.n	8043432 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8043420:	f7fd feda 	bl	80411d8 <HAL_GetTick>
 8043424:	4602      	mov	r2, r0
 8043426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043428:	1ad3      	subs	r3, r2, r3
 804342a:	2b02      	cmp	r3, #2
 804342c:	d901      	bls.n	8043432 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 804342e:	2303      	movs	r3, #3
 8043430:	e280      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8043432:	4b55      	ldr	r3, [pc, #340]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 8043434:	681b      	ldr	r3, [r3, #0]
 8043436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804343a:	2b00      	cmp	r3, #0
 804343c:	d0f0      	beq.n	8043420 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 804343e:	f7fd fefb 	bl	8041238 <HAL_GetREVID>
 8043442:	4603      	mov	r3, r0
 8043444:	f241 0203 	movw	r2, #4099	@ 0x1003
 8043448:	4293      	cmp	r3, r2
 804344a:	d817      	bhi.n	804347c <HAL_RCC_OscConfig+0x3ec>
 804344c:	687b      	ldr	r3, [r7, #4]
 804344e:	6a1b      	ldr	r3, [r3, #32]
 8043450:	2b20      	cmp	r3, #32
 8043452:	d108      	bne.n	8043466 <HAL_RCC_OscConfig+0x3d6>
 8043454:	4b4c      	ldr	r3, [pc, #304]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 8043456:	685b      	ldr	r3, [r3, #4]
 8043458:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 804345c:	4a4a      	ldr	r2, [pc, #296]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 804345e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8043462:	6053      	str	r3, [r2, #4]
 8043464:	e02e      	b.n	80434c4 <HAL_RCC_OscConfig+0x434>
 8043466:	4b48      	ldr	r3, [pc, #288]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 8043468:	685b      	ldr	r3, [r3, #4]
 804346a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 804346e:	687b      	ldr	r3, [r7, #4]
 8043470:	6a1b      	ldr	r3, [r3, #32]
 8043472:	069b      	lsls	r3, r3, #26
 8043474:	4944      	ldr	r1, [pc, #272]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 8043476:	4313      	orrs	r3, r2
 8043478:	604b      	str	r3, [r1, #4]
 804347a:	e023      	b.n	80434c4 <HAL_RCC_OscConfig+0x434>
 804347c:	4b42      	ldr	r3, [pc, #264]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 804347e:	68db      	ldr	r3, [r3, #12]
 8043480:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8043484:	687b      	ldr	r3, [r7, #4]
 8043486:	6a1b      	ldr	r3, [r3, #32]
 8043488:	061b      	lsls	r3, r3, #24
 804348a:	493f      	ldr	r1, [pc, #252]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 804348c:	4313      	orrs	r3, r2
 804348e:	60cb      	str	r3, [r1, #12]
 8043490:	e018      	b.n	80434c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8043492:	4b3d      	ldr	r3, [pc, #244]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 8043494:	681b      	ldr	r3, [r3, #0]
 8043496:	4a3c      	ldr	r2, [pc, #240]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 8043498:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 804349c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804349e:	f7fd fe9b 	bl	80411d8 <HAL_GetTick>
 80434a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80434a4:	e008      	b.n	80434b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80434a6:	f7fd fe97 	bl	80411d8 <HAL_GetTick>
 80434aa:	4602      	mov	r2, r0
 80434ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80434ae:	1ad3      	subs	r3, r2, r3
 80434b0:	2b02      	cmp	r3, #2
 80434b2:	d901      	bls.n	80434b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80434b4:	2303      	movs	r3, #3
 80434b6:	e23d      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80434b8:	4b33      	ldr	r3, [pc, #204]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 80434ba:	681b      	ldr	r3, [r3, #0]
 80434bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80434c0:	2b00      	cmp	r3, #0
 80434c2:	d1f0      	bne.n	80434a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80434c4:	687b      	ldr	r3, [r7, #4]
 80434c6:	681b      	ldr	r3, [r3, #0]
 80434c8:	f003 0308 	and.w	r3, r3, #8
 80434cc:	2b00      	cmp	r3, #0
 80434ce:	d036      	beq.n	804353e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80434d0:	687b      	ldr	r3, [r7, #4]
 80434d2:	695b      	ldr	r3, [r3, #20]
 80434d4:	2b00      	cmp	r3, #0
 80434d6:	d019      	beq.n	804350c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80434d8:	4b2b      	ldr	r3, [pc, #172]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 80434da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80434dc:	4a2a      	ldr	r2, [pc, #168]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 80434de:	f043 0301 	orr.w	r3, r3, #1
 80434e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80434e4:	f7fd fe78 	bl	80411d8 <HAL_GetTick>
 80434e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80434ea:	e008      	b.n	80434fe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80434ec:	f7fd fe74 	bl	80411d8 <HAL_GetTick>
 80434f0:	4602      	mov	r2, r0
 80434f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80434f4:	1ad3      	subs	r3, r2, r3
 80434f6:	2b02      	cmp	r3, #2
 80434f8:	d901      	bls.n	80434fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80434fa:	2303      	movs	r3, #3
 80434fc:	e21a      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80434fe:	4b22      	ldr	r3, [pc, #136]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 8043500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8043502:	f003 0302 	and.w	r3, r3, #2
 8043506:	2b00      	cmp	r3, #0
 8043508:	d0f0      	beq.n	80434ec <HAL_RCC_OscConfig+0x45c>
 804350a:	e018      	b.n	804353e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 804350c:	4b1e      	ldr	r3, [pc, #120]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 804350e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8043510:	4a1d      	ldr	r2, [pc, #116]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 8043512:	f023 0301 	bic.w	r3, r3, #1
 8043516:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043518:	f7fd fe5e 	bl	80411d8 <HAL_GetTick>
 804351c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 804351e:	e008      	b.n	8043532 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8043520:	f7fd fe5a 	bl	80411d8 <HAL_GetTick>
 8043524:	4602      	mov	r2, r0
 8043526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043528:	1ad3      	subs	r3, r2, r3
 804352a:	2b02      	cmp	r3, #2
 804352c:	d901      	bls.n	8043532 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 804352e:	2303      	movs	r3, #3
 8043530:	e200      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8043532:	4b15      	ldr	r3, [pc, #84]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 8043534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8043536:	f003 0302 	and.w	r3, r3, #2
 804353a:	2b00      	cmp	r3, #0
 804353c:	d1f0      	bne.n	8043520 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 804353e:	687b      	ldr	r3, [r7, #4]
 8043540:	681b      	ldr	r3, [r3, #0]
 8043542:	f003 0320 	and.w	r3, r3, #32
 8043546:	2b00      	cmp	r3, #0
 8043548:	d039      	beq.n	80435be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 804354a:	687b      	ldr	r3, [r7, #4]
 804354c:	699b      	ldr	r3, [r3, #24]
 804354e:	2b00      	cmp	r3, #0
 8043550:	d01c      	beq.n	804358c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8043552:	4b0d      	ldr	r3, [pc, #52]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 8043554:	681b      	ldr	r3, [r3, #0]
 8043556:	4a0c      	ldr	r2, [pc, #48]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 8043558:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 804355c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 804355e:	f7fd fe3b 	bl	80411d8 <HAL_GetTick>
 8043562:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8043564:	e008      	b.n	8043578 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8043566:	f7fd fe37 	bl	80411d8 <HAL_GetTick>
 804356a:	4602      	mov	r2, r0
 804356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804356e:	1ad3      	subs	r3, r2, r3
 8043570:	2b02      	cmp	r3, #2
 8043572:	d901      	bls.n	8043578 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8043574:	2303      	movs	r3, #3
 8043576:	e1dd      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8043578:	4b03      	ldr	r3, [pc, #12]	@ (8043588 <HAL_RCC_OscConfig+0x4f8>)
 804357a:	681b      	ldr	r3, [r3, #0]
 804357c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8043580:	2b00      	cmp	r3, #0
 8043582:	d0f0      	beq.n	8043566 <HAL_RCC_OscConfig+0x4d6>
 8043584:	e01b      	b.n	80435be <HAL_RCC_OscConfig+0x52e>
 8043586:	bf00      	nop
 8043588:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 804358c:	4b9b      	ldr	r3, [pc, #620]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 804358e:	681b      	ldr	r3, [r3, #0]
 8043590:	4a9a      	ldr	r2, [pc, #616]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 8043592:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8043596:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8043598:	f7fd fe1e 	bl	80411d8 <HAL_GetTick>
 804359c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 804359e:	e008      	b.n	80435b2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80435a0:	f7fd fe1a 	bl	80411d8 <HAL_GetTick>
 80435a4:	4602      	mov	r2, r0
 80435a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80435a8:	1ad3      	subs	r3, r2, r3
 80435aa:	2b02      	cmp	r3, #2
 80435ac:	d901      	bls.n	80435b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80435ae:	2303      	movs	r3, #3
 80435b0:	e1c0      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80435b2:	4b92      	ldr	r3, [pc, #584]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80435b4:	681b      	ldr	r3, [r3, #0]
 80435b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80435ba:	2b00      	cmp	r3, #0
 80435bc:	d1f0      	bne.n	80435a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80435be:	687b      	ldr	r3, [r7, #4]
 80435c0:	681b      	ldr	r3, [r3, #0]
 80435c2:	f003 0304 	and.w	r3, r3, #4
 80435c6:	2b00      	cmp	r3, #0
 80435c8:	f000 8081 	beq.w	80436ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80435cc:	4b8c      	ldr	r3, [pc, #560]	@ (8043800 <HAL_RCC_OscConfig+0x770>)
 80435ce:	681b      	ldr	r3, [r3, #0]
 80435d0:	4a8b      	ldr	r2, [pc, #556]	@ (8043800 <HAL_RCC_OscConfig+0x770>)
 80435d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80435d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80435d8:	f7fd fdfe 	bl	80411d8 <HAL_GetTick>
 80435dc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80435de:	e008      	b.n	80435f2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80435e0:	f7fd fdfa 	bl	80411d8 <HAL_GetTick>
 80435e4:	4602      	mov	r2, r0
 80435e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80435e8:	1ad3      	subs	r3, r2, r3
 80435ea:	2b64      	cmp	r3, #100	@ 0x64
 80435ec:	d901      	bls.n	80435f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80435ee:	2303      	movs	r3, #3
 80435f0:	e1a0      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80435f2:	4b83      	ldr	r3, [pc, #524]	@ (8043800 <HAL_RCC_OscConfig+0x770>)
 80435f4:	681b      	ldr	r3, [r3, #0]
 80435f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80435fa:	2b00      	cmp	r3, #0
 80435fc:	d0f0      	beq.n	80435e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80435fe:	687b      	ldr	r3, [r7, #4]
 8043600:	689b      	ldr	r3, [r3, #8]
 8043602:	2b01      	cmp	r3, #1
 8043604:	d106      	bne.n	8043614 <HAL_RCC_OscConfig+0x584>
 8043606:	4b7d      	ldr	r3, [pc, #500]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 8043608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804360a:	4a7c      	ldr	r2, [pc, #496]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 804360c:	f043 0301 	orr.w	r3, r3, #1
 8043610:	6713      	str	r3, [r2, #112]	@ 0x70
 8043612:	e02d      	b.n	8043670 <HAL_RCC_OscConfig+0x5e0>
 8043614:	687b      	ldr	r3, [r7, #4]
 8043616:	689b      	ldr	r3, [r3, #8]
 8043618:	2b00      	cmp	r3, #0
 804361a:	d10c      	bne.n	8043636 <HAL_RCC_OscConfig+0x5a6>
 804361c:	4b77      	ldr	r3, [pc, #476]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 804361e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043620:	4a76      	ldr	r2, [pc, #472]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 8043622:	f023 0301 	bic.w	r3, r3, #1
 8043626:	6713      	str	r3, [r2, #112]	@ 0x70
 8043628:	4b74      	ldr	r3, [pc, #464]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 804362a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804362c:	4a73      	ldr	r2, [pc, #460]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 804362e:	f023 0304 	bic.w	r3, r3, #4
 8043632:	6713      	str	r3, [r2, #112]	@ 0x70
 8043634:	e01c      	b.n	8043670 <HAL_RCC_OscConfig+0x5e0>
 8043636:	687b      	ldr	r3, [r7, #4]
 8043638:	689b      	ldr	r3, [r3, #8]
 804363a:	2b05      	cmp	r3, #5
 804363c:	d10c      	bne.n	8043658 <HAL_RCC_OscConfig+0x5c8>
 804363e:	4b6f      	ldr	r3, [pc, #444]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 8043640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043642:	4a6e      	ldr	r2, [pc, #440]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 8043644:	f043 0304 	orr.w	r3, r3, #4
 8043648:	6713      	str	r3, [r2, #112]	@ 0x70
 804364a:	4b6c      	ldr	r3, [pc, #432]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 804364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804364e:	4a6b      	ldr	r2, [pc, #428]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 8043650:	f043 0301 	orr.w	r3, r3, #1
 8043654:	6713      	str	r3, [r2, #112]	@ 0x70
 8043656:	e00b      	b.n	8043670 <HAL_RCC_OscConfig+0x5e0>
 8043658:	4b68      	ldr	r3, [pc, #416]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 804365a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804365c:	4a67      	ldr	r2, [pc, #412]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 804365e:	f023 0301 	bic.w	r3, r3, #1
 8043662:	6713      	str	r3, [r2, #112]	@ 0x70
 8043664:	4b65      	ldr	r3, [pc, #404]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 8043666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043668:	4a64      	ldr	r2, [pc, #400]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 804366a:	f023 0304 	bic.w	r3, r3, #4
 804366e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8043670:	687b      	ldr	r3, [r7, #4]
 8043672:	689b      	ldr	r3, [r3, #8]
 8043674:	2b00      	cmp	r3, #0
 8043676:	d015      	beq.n	80436a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043678:	f7fd fdae 	bl	80411d8 <HAL_GetTick>
 804367c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 804367e:	e00a      	b.n	8043696 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8043680:	f7fd fdaa 	bl	80411d8 <HAL_GetTick>
 8043684:	4602      	mov	r2, r0
 8043686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043688:	1ad3      	subs	r3, r2, r3
 804368a:	f241 3288 	movw	r2, #5000	@ 0x1388
 804368e:	4293      	cmp	r3, r2
 8043690:	d901      	bls.n	8043696 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8043692:	2303      	movs	r3, #3
 8043694:	e14e      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8043696:	4b59      	ldr	r3, [pc, #356]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 8043698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804369a:	f003 0302 	and.w	r3, r3, #2
 804369e:	2b00      	cmp	r3, #0
 80436a0:	d0ee      	beq.n	8043680 <HAL_RCC_OscConfig+0x5f0>
 80436a2:	e014      	b.n	80436ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80436a4:	f7fd fd98 	bl	80411d8 <HAL_GetTick>
 80436a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80436aa:	e00a      	b.n	80436c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80436ac:	f7fd fd94 	bl	80411d8 <HAL_GetTick>
 80436b0:	4602      	mov	r2, r0
 80436b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80436b4:	1ad3      	subs	r3, r2, r3
 80436b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80436ba:	4293      	cmp	r3, r2
 80436bc:	d901      	bls.n	80436c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80436be:	2303      	movs	r3, #3
 80436c0:	e138      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80436c2:	4b4e      	ldr	r3, [pc, #312]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80436c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80436c6:	f003 0302 	and.w	r3, r3, #2
 80436ca:	2b00      	cmp	r3, #0
 80436cc:	d1ee      	bne.n	80436ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80436ce:	687b      	ldr	r3, [r7, #4]
 80436d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80436d2:	2b00      	cmp	r3, #0
 80436d4:	f000 812d 	beq.w	8043932 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80436d8:	4b48      	ldr	r3, [pc, #288]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80436da:	691b      	ldr	r3, [r3, #16]
 80436dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80436e0:	2b18      	cmp	r3, #24
 80436e2:	f000 80bd 	beq.w	8043860 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80436e6:	687b      	ldr	r3, [r7, #4]
 80436e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80436ea:	2b02      	cmp	r3, #2
 80436ec:	f040 809e 	bne.w	804382c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80436f0:	4b42      	ldr	r3, [pc, #264]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80436f2:	681b      	ldr	r3, [r3, #0]
 80436f4:	4a41      	ldr	r2, [pc, #260]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80436f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80436fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80436fc:	f7fd fd6c 	bl	80411d8 <HAL_GetTick>
 8043700:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8043702:	e008      	b.n	8043716 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8043704:	f7fd fd68 	bl	80411d8 <HAL_GetTick>
 8043708:	4602      	mov	r2, r0
 804370a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804370c:	1ad3      	subs	r3, r2, r3
 804370e:	2b02      	cmp	r3, #2
 8043710:	d901      	bls.n	8043716 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8043712:	2303      	movs	r3, #3
 8043714:	e10e      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8043716:	4b39      	ldr	r3, [pc, #228]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 8043718:	681b      	ldr	r3, [r3, #0]
 804371a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804371e:	2b00      	cmp	r3, #0
 8043720:	d1f0      	bne.n	8043704 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8043722:	4b36      	ldr	r3, [pc, #216]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 8043724:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8043726:	4b37      	ldr	r3, [pc, #220]	@ (8043804 <HAL_RCC_OscConfig+0x774>)
 8043728:	4013      	ands	r3, r2
 804372a:	687a      	ldr	r2, [r7, #4]
 804372c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 804372e:	687a      	ldr	r2, [r7, #4]
 8043730:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8043732:	0112      	lsls	r2, r2, #4
 8043734:	430a      	orrs	r2, r1
 8043736:	4931      	ldr	r1, [pc, #196]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 8043738:	4313      	orrs	r3, r2
 804373a:	628b      	str	r3, [r1, #40]	@ 0x28
 804373c:	687b      	ldr	r3, [r7, #4]
 804373e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043740:	3b01      	subs	r3, #1
 8043742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8043746:	687b      	ldr	r3, [r7, #4]
 8043748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 804374a:	3b01      	subs	r3, #1
 804374c:	025b      	lsls	r3, r3, #9
 804374e:	b29b      	uxth	r3, r3
 8043750:	431a      	orrs	r2, r3
 8043752:	687b      	ldr	r3, [r7, #4]
 8043754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8043756:	3b01      	subs	r3, #1
 8043758:	041b      	lsls	r3, r3, #16
 804375a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 804375e:	431a      	orrs	r2, r3
 8043760:	687b      	ldr	r3, [r7, #4]
 8043762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8043764:	3b01      	subs	r3, #1
 8043766:	061b      	lsls	r3, r3, #24
 8043768:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 804376c:	4923      	ldr	r1, [pc, #140]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 804376e:	4313      	orrs	r3, r2
 8043770:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8043772:	4b22      	ldr	r3, [pc, #136]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 8043774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043776:	4a21      	ldr	r2, [pc, #132]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 8043778:	f023 0301 	bic.w	r3, r3, #1
 804377c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 804377e:	4b1f      	ldr	r3, [pc, #124]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 8043780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8043782:	4b21      	ldr	r3, [pc, #132]	@ (8043808 <HAL_RCC_OscConfig+0x778>)
 8043784:	4013      	ands	r3, r2
 8043786:	687a      	ldr	r2, [r7, #4]
 8043788:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 804378a:	00d2      	lsls	r2, r2, #3
 804378c:	491b      	ldr	r1, [pc, #108]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 804378e:	4313      	orrs	r3, r2
 8043790:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8043792:	4b1a      	ldr	r3, [pc, #104]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 8043794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043796:	f023 020c 	bic.w	r2, r3, #12
 804379a:	687b      	ldr	r3, [r7, #4]
 804379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804379e:	4917      	ldr	r1, [pc, #92]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80437a0:	4313      	orrs	r3, r2
 80437a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80437a4:	4b15      	ldr	r3, [pc, #84]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80437a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80437a8:	f023 0202 	bic.w	r2, r3, #2
 80437ac:	687b      	ldr	r3, [r7, #4]
 80437ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80437b0:	4912      	ldr	r1, [pc, #72]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80437b2:	4313      	orrs	r3, r2
 80437b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80437b6:	4b11      	ldr	r3, [pc, #68]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80437b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80437ba:	4a10      	ldr	r2, [pc, #64]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80437bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80437c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80437c2:	4b0e      	ldr	r3, [pc, #56]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80437c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80437c6:	4a0d      	ldr	r2, [pc, #52]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80437c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80437cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80437ce:	4b0b      	ldr	r3, [pc, #44]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80437d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80437d2:	4a0a      	ldr	r2, [pc, #40]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80437d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80437d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80437da:	4b08      	ldr	r3, [pc, #32]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80437dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80437de:	4a07      	ldr	r2, [pc, #28]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80437e0:	f043 0301 	orr.w	r3, r3, #1
 80437e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80437e6:	4b05      	ldr	r3, [pc, #20]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80437e8:	681b      	ldr	r3, [r3, #0]
 80437ea:	4a04      	ldr	r2, [pc, #16]	@ (80437fc <HAL_RCC_OscConfig+0x76c>)
 80437ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80437f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80437f2:	f7fd fcf1 	bl	80411d8 <HAL_GetTick>
 80437f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80437f8:	e011      	b.n	804381e <HAL_RCC_OscConfig+0x78e>
 80437fa:	bf00      	nop
 80437fc:	58024400 	.word	0x58024400
 8043800:	58024800 	.word	0x58024800
 8043804:	fffffc0c 	.word	0xfffffc0c
 8043808:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 804380c:	f7fd fce4 	bl	80411d8 <HAL_GetTick>
 8043810:	4602      	mov	r2, r0
 8043812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043814:	1ad3      	subs	r3, r2, r3
 8043816:	2b02      	cmp	r3, #2
 8043818:	d901      	bls.n	804381e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 804381a:	2303      	movs	r3, #3
 804381c:	e08a      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 804381e:	4b47      	ldr	r3, [pc, #284]	@ (804393c <HAL_RCC_OscConfig+0x8ac>)
 8043820:	681b      	ldr	r3, [r3, #0]
 8043822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8043826:	2b00      	cmp	r3, #0
 8043828:	d0f0      	beq.n	804380c <HAL_RCC_OscConfig+0x77c>
 804382a:	e082      	b.n	8043932 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804382c:	4b43      	ldr	r3, [pc, #268]	@ (804393c <HAL_RCC_OscConfig+0x8ac>)
 804382e:	681b      	ldr	r3, [r3, #0]
 8043830:	4a42      	ldr	r2, [pc, #264]	@ (804393c <HAL_RCC_OscConfig+0x8ac>)
 8043832:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8043836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043838:	f7fd fcce 	bl	80411d8 <HAL_GetTick>
 804383c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 804383e:	e008      	b.n	8043852 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8043840:	f7fd fcca 	bl	80411d8 <HAL_GetTick>
 8043844:	4602      	mov	r2, r0
 8043846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043848:	1ad3      	subs	r3, r2, r3
 804384a:	2b02      	cmp	r3, #2
 804384c:	d901      	bls.n	8043852 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 804384e:	2303      	movs	r3, #3
 8043850:	e070      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8043852:	4b3a      	ldr	r3, [pc, #232]	@ (804393c <HAL_RCC_OscConfig+0x8ac>)
 8043854:	681b      	ldr	r3, [r3, #0]
 8043856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804385a:	2b00      	cmp	r3, #0
 804385c:	d1f0      	bne.n	8043840 <HAL_RCC_OscConfig+0x7b0>
 804385e:	e068      	b.n	8043932 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8043860:	4b36      	ldr	r3, [pc, #216]	@ (804393c <HAL_RCC_OscConfig+0x8ac>)
 8043862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043864:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8043866:	4b35      	ldr	r3, [pc, #212]	@ (804393c <HAL_RCC_OscConfig+0x8ac>)
 8043868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804386a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804386c:	687b      	ldr	r3, [r7, #4]
 804386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8043870:	2b01      	cmp	r3, #1
 8043872:	d031      	beq.n	80438d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8043874:	693b      	ldr	r3, [r7, #16]
 8043876:	f003 0203 	and.w	r2, r3, #3
 804387a:	687b      	ldr	r3, [r7, #4]
 804387c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804387e:	429a      	cmp	r2, r3
 8043880:	d12a      	bne.n	80438d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8043882:	693b      	ldr	r3, [r7, #16]
 8043884:	091b      	lsrs	r3, r3, #4
 8043886:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 804388a:	687b      	ldr	r3, [r7, #4]
 804388c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804388e:	429a      	cmp	r2, r3
 8043890:	d122      	bne.n	80438d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8043892:	68fb      	ldr	r3, [r7, #12]
 8043894:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8043898:	687b      	ldr	r3, [r7, #4]
 804389a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804389c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 804389e:	429a      	cmp	r2, r3
 80438a0:	d11a      	bne.n	80438d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80438a2:	68fb      	ldr	r3, [r7, #12]
 80438a4:	0a5b      	lsrs	r3, r3, #9
 80438a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80438aa:	687b      	ldr	r3, [r7, #4]
 80438ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80438ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80438b0:	429a      	cmp	r2, r3
 80438b2:	d111      	bne.n	80438d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80438b4:	68fb      	ldr	r3, [r7, #12]
 80438b6:	0c1b      	lsrs	r3, r3, #16
 80438b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80438bc:	687b      	ldr	r3, [r7, #4]
 80438be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80438c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80438c2:	429a      	cmp	r2, r3
 80438c4:	d108      	bne.n	80438d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80438c6:	68fb      	ldr	r3, [r7, #12]
 80438c8:	0e1b      	lsrs	r3, r3, #24
 80438ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80438ce:	687b      	ldr	r3, [r7, #4]
 80438d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80438d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80438d4:	429a      	cmp	r2, r3
 80438d6:	d001      	beq.n	80438dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80438d8:	2301      	movs	r3, #1
 80438da:	e02b      	b.n	8043934 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80438dc:	4b17      	ldr	r3, [pc, #92]	@ (804393c <HAL_RCC_OscConfig+0x8ac>)
 80438de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80438e0:	08db      	lsrs	r3, r3, #3
 80438e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80438e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80438e8:	687b      	ldr	r3, [r7, #4]
 80438ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80438ec:	693a      	ldr	r2, [r7, #16]
 80438ee:	429a      	cmp	r2, r3
 80438f0:	d01f      	beq.n	8043932 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80438f2:	4b12      	ldr	r3, [pc, #72]	@ (804393c <HAL_RCC_OscConfig+0x8ac>)
 80438f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80438f6:	4a11      	ldr	r2, [pc, #68]	@ (804393c <HAL_RCC_OscConfig+0x8ac>)
 80438f8:	f023 0301 	bic.w	r3, r3, #1
 80438fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80438fe:	f7fd fc6b 	bl	80411d8 <HAL_GetTick>
 8043902:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8043904:	bf00      	nop
 8043906:	f7fd fc67 	bl	80411d8 <HAL_GetTick>
 804390a:	4602      	mov	r2, r0
 804390c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804390e:	4293      	cmp	r3, r2
 8043910:	d0f9      	beq.n	8043906 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8043912:	4b0a      	ldr	r3, [pc, #40]	@ (804393c <HAL_RCC_OscConfig+0x8ac>)
 8043914:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8043916:	4b0a      	ldr	r3, [pc, #40]	@ (8043940 <HAL_RCC_OscConfig+0x8b0>)
 8043918:	4013      	ands	r3, r2
 804391a:	687a      	ldr	r2, [r7, #4]
 804391c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 804391e:	00d2      	lsls	r2, r2, #3
 8043920:	4906      	ldr	r1, [pc, #24]	@ (804393c <HAL_RCC_OscConfig+0x8ac>)
 8043922:	4313      	orrs	r3, r2
 8043924:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8043926:	4b05      	ldr	r3, [pc, #20]	@ (804393c <HAL_RCC_OscConfig+0x8ac>)
 8043928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804392a:	4a04      	ldr	r2, [pc, #16]	@ (804393c <HAL_RCC_OscConfig+0x8ac>)
 804392c:	f043 0301 	orr.w	r3, r3, #1
 8043930:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8043932:	2300      	movs	r3, #0
}
 8043934:	4618      	mov	r0, r3
 8043936:	3730      	adds	r7, #48	@ 0x30
 8043938:	46bd      	mov	sp, r7
 804393a:	bd80      	pop	{r7, pc}
 804393c:	58024400 	.word	0x58024400
 8043940:	ffff0007 	.word	0xffff0007

08043944 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8043944:	b580      	push	{r7, lr}
 8043946:	b086      	sub	sp, #24
 8043948:	af00      	add	r7, sp, #0
 804394a:	6078      	str	r0, [r7, #4]
 804394c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 804394e:	687b      	ldr	r3, [r7, #4]
 8043950:	2b00      	cmp	r3, #0
 8043952:	d101      	bne.n	8043958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8043954:	2301      	movs	r3, #1
 8043956:	e19c      	b.n	8043c92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8043958:	4b8a      	ldr	r3, [pc, #552]	@ (8043b84 <HAL_RCC_ClockConfig+0x240>)
 804395a:	681b      	ldr	r3, [r3, #0]
 804395c:	f003 030f 	and.w	r3, r3, #15
 8043960:	683a      	ldr	r2, [r7, #0]
 8043962:	429a      	cmp	r2, r3
 8043964:	d910      	bls.n	8043988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8043966:	4b87      	ldr	r3, [pc, #540]	@ (8043b84 <HAL_RCC_ClockConfig+0x240>)
 8043968:	681b      	ldr	r3, [r3, #0]
 804396a:	f023 020f 	bic.w	r2, r3, #15
 804396e:	4985      	ldr	r1, [pc, #532]	@ (8043b84 <HAL_RCC_ClockConfig+0x240>)
 8043970:	683b      	ldr	r3, [r7, #0]
 8043972:	4313      	orrs	r3, r2
 8043974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8043976:	4b83      	ldr	r3, [pc, #524]	@ (8043b84 <HAL_RCC_ClockConfig+0x240>)
 8043978:	681b      	ldr	r3, [r3, #0]
 804397a:	f003 030f 	and.w	r3, r3, #15
 804397e:	683a      	ldr	r2, [r7, #0]
 8043980:	429a      	cmp	r2, r3
 8043982:	d001      	beq.n	8043988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8043984:	2301      	movs	r3, #1
 8043986:	e184      	b.n	8043c92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8043988:	687b      	ldr	r3, [r7, #4]
 804398a:	681b      	ldr	r3, [r3, #0]
 804398c:	f003 0304 	and.w	r3, r3, #4
 8043990:	2b00      	cmp	r3, #0
 8043992:	d010      	beq.n	80439b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8043994:	687b      	ldr	r3, [r7, #4]
 8043996:	691a      	ldr	r2, [r3, #16]
 8043998:	4b7b      	ldr	r3, [pc, #492]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 804399a:	699b      	ldr	r3, [r3, #24]
 804399c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80439a0:	429a      	cmp	r2, r3
 80439a2:	d908      	bls.n	80439b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80439a4:	4b78      	ldr	r3, [pc, #480]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 80439a6:	699b      	ldr	r3, [r3, #24]
 80439a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80439ac:	687b      	ldr	r3, [r7, #4]
 80439ae:	691b      	ldr	r3, [r3, #16]
 80439b0:	4975      	ldr	r1, [pc, #468]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 80439b2:	4313      	orrs	r3, r2
 80439b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80439b6:	687b      	ldr	r3, [r7, #4]
 80439b8:	681b      	ldr	r3, [r3, #0]
 80439ba:	f003 0308 	and.w	r3, r3, #8
 80439be:	2b00      	cmp	r3, #0
 80439c0:	d010      	beq.n	80439e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80439c2:	687b      	ldr	r3, [r7, #4]
 80439c4:	695a      	ldr	r2, [r3, #20]
 80439c6:	4b70      	ldr	r3, [pc, #448]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 80439c8:	69db      	ldr	r3, [r3, #28]
 80439ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80439ce:	429a      	cmp	r2, r3
 80439d0:	d908      	bls.n	80439e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80439d2:	4b6d      	ldr	r3, [pc, #436]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 80439d4:	69db      	ldr	r3, [r3, #28]
 80439d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80439da:	687b      	ldr	r3, [r7, #4]
 80439dc:	695b      	ldr	r3, [r3, #20]
 80439de:	496a      	ldr	r1, [pc, #424]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 80439e0:	4313      	orrs	r3, r2
 80439e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80439e4:	687b      	ldr	r3, [r7, #4]
 80439e6:	681b      	ldr	r3, [r3, #0]
 80439e8:	f003 0310 	and.w	r3, r3, #16
 80439ec:	2b00      	cmp	r3, #0
 80439ee:	d010      	beq.n	8043a12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80439f0:	687b      	ldr	r3, [r7, #4]
 80439f2:	699a      	ldr	r2, [r3, #24]
 80439f4:	4b64      	ldr	r3, [pc, #400]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 80439f6:	69db      	ldr	r3, [r3, #28]
 80439f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80439fc:	429a      	cmp	r2, r3
 80439fe:	d908      	bls.n	8043a12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8043a00:	4b61      	ldr	r3, [pc, #388]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043a02:	69db      	ldr	r3, [r3, #28]
 8043a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8043a08:	687b      	ldr	r3, [r7, #4]
 8043a0a:	699b      	ldr	r3, [r3, #24]
 8043a0c:	495e      	ldr	r1, [pc, #376]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043a0e:	4313      	orrs	r3, r2
 8043a10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8043a12:	687b      	ldr	r3, [r7, #4]
 8043a14:	681b      	ldr	r3, [r3, #0]
 8043a16:	f003 0320 	and.w	r3, r3, #32
 8043a1a:	2b00      	cmp	r3, #0
 8043a1c:	d010      	beq.n	8043a40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8043a1e:	687b      	ldr	r3, [r7, #4]
 8043a20:	69da      	ldr	r2, [r3, #28]
 8043a22:	4b59      	ldr	r3, [pc, #356]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043a24:	6a1b      	ldr	r3, [r3, #32]
 8043a26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8043a2a:	429a      	cmp	r2, r3
 8043a2c:	d908      	bls.n	8043a40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8043a2e:	4b56      	ldr	r3, [pc, #344]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043a30:	6a1b      	ldr	r3, [r3, #32]
 8043a32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8043a36:	687b      	ldr	r3, [r7, #4]
 8043a38:	69db      	ldr	r3, [r3, #28]
 8043a3a:	4953      	ldr	r1, [pc, #332]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043a3c:	4313      	orrs	r3, r2
 8043a3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8043a40:	687b      	ldr	r3, [r7, #4]
 8043a42:	681b      	ldr	r3, [r3, #0]
 8043a44:	f003 0302 	and.w	r3, r3, #2
 8043a48:	2b00      	cmp	r3, #0
 8043a4a:	d010      	beq.n	8043a6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8043a4c:	687b      	ldr	r3, [r7, #4]
 8043a4e:	68da      	ldr	r2, [r3, #12]
 8043a50:	4b4d      	ldr	r3, [pc, #308]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043a52:	699b      	ldr	r3, [r3, #24]
 8043a54:	f003 030f 	and.w	r3, r3, #15
 8043a58:	429a      	cmp	r2, r3
 8043a5a:	d908      	bls.n	8043a6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8043a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043a5e:	699b      	ldr	r3, [r3, #24]
 8043a60:	f023 020f 	bic.w	r2, r3, #15
 8043a64:	687b      	ldr	r3, [r7, #4]
 8043a66:	68db      	ldr	r3, [r3, #12]
 8043a68:	4947      	ldr	r1, [pc, #284]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043a6a:	4313      	orrs	r3, r2
 8043a6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8043a6e:	687b      	ldr	r3, [r7, #4]
 8043a70:	681b      	ldr	r3, [r3, #0]
 8043a72:	f003 0301 	and.w	r3, r3, #1
 8043a76:	2b00      	cmp	r3, #0
 8043a78:	d055      	beq.n	8043b26 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8043a7a:	4b43      	ldr	r3, [pc, #268]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043a7c:	699b      	ldr	r3, [r3, #24]
 8043a7e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8043a82:	687b      	ldr	r3, [r7, #4]
 8043a84:	689b      	ldr	r3, [r3, #8]
 8043a86:	4940      	ldr	r1, [pc, #256]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043a88:	4313      	orrs	r3, r2
 8043a8a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8043a8c:	687b      	ldr	r3, [r7, #4]
 8043a8e:	685b      	ldr	r3, [r3, #4]
 8043a90:	2b02      	cmp	r3, #2
 8043a92:	d107      	bne.n	8043aa4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8043a94:	4b3c      	ldr	r3, [pc, #240]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043a96:	681b      	ldr	r3, [r3, #0]
 8043a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8043a9c:	2b00      	cmp	r3, #0
 8043a9e:	d121      	bne.n	8043ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8043aa0:	2301      	movs	r3, #1
 8043aa2:	e0f6      	b.n	8043c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8043aa4:	687b      	ldr	r3, [r7, #4]
 8043aa6:	685b      	ldr	r3, [r3, #4]
 8043aa8:	2b03      	cmp	r3, #3
 8043aaa:	d107      	bne.n	8043abc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8043aac:	4b36      	ldr	r3, [pc, #216]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043aae:	681b      	ldr	r3, [r3, #0]
 8043ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8043ab4:	2b00      	cmp	r3, #0
 8043ab6:	d115      	bne.n	8043ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8043ab8:	2301      	movs	r3, #1
 8043aba:	e0ea      	b.n	8043c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8043abc:	687b      	ldr	r3, [r7, #4]
 8043abe:	685b      	ldr	r3, [r3, #4]
 8043ac0:	2b01      	cmp	r3, #1
 8043ac2:	d107      	bne.n	8043ad4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8043ac4:	4b30      	ldr	r3, [pc, #192]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043ac6:	681b      	ldr	r3, [r3, #0]
 8043ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8043acc:	2b00      	cmp	r3, #0
 8043ace:	d109      	bne.n	8043ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8043ad0:	2301      	movs	r3, #1
 8043ad2:	e0de      	b.n	8043c92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8043ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043ad6:	681b      	ldr	r3, [r3, #0]
 8043ad8:	f003 0304 	and.w	r3, r3, #4
 8043adc:	2b00      	cmp	r3, #0
 8043ade:	d101      	bne.n	8043ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8043ae0:	2301      	movs	r3, #1
 8043ae2:	e0d6      	b.n	8043c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8043ae4:	4b28      	ldr	r3, [pc, #160]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043ae6:	691b      	ldr	r3, [r3, #16]
 8043ae8:	f023 0207 	bic.w	r2, r3, #7
 8043aec:	687b      	ldr	r3, [r7, #4]
 8043aee:	685b      	ldr	r3, [r3, #4]
 8043af0:	4925      	ldr	r1, [pc, #148]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043af2:	4313      	orrs	r3, r2
 8043af4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8043af6:	f7fd fb6f 	bl	80411d8 <HAL_GetTick>
 8043afa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8043afc:	e00a      	b.n	8043b14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8043afe:	f7fd fb6b 	bl	80411d8 <HAL_GetTick>
 8043b02:	4602      	mov	r2, r0
 8043b04:	697b      	ldr	r3, [r7, #20]
 8043b06:	1ad3      	subs	r3, r2, r3
 8043b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8043b0c:	4293      	cmp	r3, r2
 8043b0e:	d901      	bls.n	8043b14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8043b10:	2303      	movs	r3, #3
 8043b12:	e0be      	b.n	8043c92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8043b14:	4b1c      	ldr	r3, [pc, #112]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043b16:	691b      	ldr	r3, [r3, #16]
 8043b18:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8043b1c:	687b      	ldr	r3, [r7, #4]
 8043b1e:	685b      	ldr	r3, [r3, #4]
 8043b20:	00db      	lsls	r3, r3, #3
 8043b22:	429a      	cmp	r2, r3
 8043b24:	d1eb      	bne.n	8043afe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8043b26:	687b      	ldr	r3, [r7, #4]
 8043b28:	681b      	ldr	r3, [r3, #0]
 8043b2a:	f003 0302 	and.w	r3, r3, #2
 8043b2e:	2b00      	cmp	r3, #0
 8043b30:	d010      	beq.n	8043b54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8043b32:	687b      	ldr	r3, [r7, #4]
 8043b34:	68da      	ldr	r2, [r3, #12]
 8043b36:	4b14      	ldr	r3, [pc, #80]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043b38:	699b      	ldr	r3, [r3, #24]
 8043b3a:	f003 030f 	and.w	r3, r3, #15
 8043b3e:	429a      	cmp	r2, r3
 8043b40:	d208      	bcs.n	8043b54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8043b42:	4b11      	ldr	r3, [pc, #68]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043b44:	699b      	ldr	r3, [r3, #24]
 8043b46:	f023 020f 	bic.w	r2, r3, #15
 8043b4a:	687b      	ldr	r3, [r7, #4]
 8043b4c:	68db      	ldr	r3, [r3, #12]
 8043b4e:	490e      	ldr	r1, [pc, #56]	@ (8043b88 <HAL_RCC_ClockConfig+0x244>)
 8043b50:	4313      	orrs	r3, r2
 8043b52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8043b54:	4b0b      	ldr	r3, [pc, #44]	@ (8043b84 <HAL_RCC_ClockConfig+0x240>)
 8043b56:	681b      	ldr	r3, [r3, #0]
 8043b58:	f003 030f 	and.w	r3, r3, #15
 8043b5c:	683a      	ldr	r2, [r7, #0]
 8043b5e:	429a      	cmp	r2, r3
 8043b60:	d214      	bcs.n	8043b8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8043b62:	4b08      	ldr	r3, [pc, #32]	@ (8043b84 <HAL_RCC_ClockConfig+0x240>)
 8043b64:	681b      	ldr	r3, [r3, #0]
 8043b66:	f023 020f 	bic.w	r2, r3, #15
 8043b6a:	4906      	ldr	r1, [pc, #24]	@ (8043b84 <HAL_RCC_ClockConfig+0x240>)
 8043b6c:	683b      	ldr	r3, [r7, #0]
 8043b6e:	4313      	orrs	r3, r2
 8043b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8043b72:	4b04      	ldr	r3, [pc, #16]	@ (8043b84 <HAL_RCC_ClockConfig+0x240>)
 8043b74:	681b      	ldr	r3, [r3, #0]
 8043b76:	f003 030f 	and.w	r3, r3, #15
 8043b7a:	683a      	ldr	r2, [r7, #0]
 8043b7c:	429a      	cmp	r2, r3
 8043b7e:	d005      	beq.n	8043b8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8043b80:	2301      	movs	r3, #1
 8043b82:	e086      	b.n	8043c92 <HAL_RCC_ClockConfig+0x34e>
 8043b84:	52002000 	.word	0x52002000
 8043b88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8043b8c:	687b      	ldr	r3, [r7, #4]
 8043b8e:	681b      	ldr	r3, [r3, #0]
 8043b90:	f003 0304 	and.w	r3, r3, #4
 8043b94:	2b00      	cmp	r3, #0
 8043b96:	d010      	beq.n	8043bba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8043b98:	687b      	ldr	r3, [r7, #4]
 8043b9a:	691a      	ldr	r2, [r3, #16]
 8043b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8043c9c <HAL_RCC_ClockConfig+0x358>)
 8043b9e:	699b      	ldr	r3, [r3, #24]
 8043ba0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8043ba4:	429a      	cmp	r2, r3
 8043ba6:	d208      	bcs.n	8043bba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8043ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8043c9c <HAL_RCC_ClockConfig+0x358>)
 8043baa:	699b      	ldr	r3, [r3, #24]
 8043bac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8043bb0:	687b      	ldr	r3, [r7, #4]
 8043bb2:	691b      	ldr	r3, [r3, #16]
 8043bb4:	4939      	ldr	r1, [pc, #228]	@ (8043c9c <HAL_RCC_ClockConfig+0x358>)
 8043bb6:	4313      	orrs	r3, r2
 8043bb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8043bba:	687b      	ldr	r3, [r7, #4]
 8043bbc:	681b      	ldr	r3, [r3, #0]
 8043bbe:	f003 0308 	and.w	r3, r3, #8
 8043bc2:	2b00      	cmp	r3, #0
 8043bc4:	d010      	beq.n	8043be8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8043bc6:	687b      	ldr	r3, [r7, #4]
 8043bc8:	695a      	ldr	r2, [r3, #20]
 8043bca:	4b34      	ldr	r3, [pc, #208]	@ (8043c9c <HAL_RCC_ClockConfig+0x358>)
 8043bcc:	69db      	ldr	r3, [r3, #28]
 8043bce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8043bd2:	429a      	cmp	r2, r3
 8043bd4:	d208      	bcs.n	8043be8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8043bd6:	4b31      	ldr	r3, [pc, #196]	@ (8043c9c <HAL_RCC_ClockConfig+0x358>)
 8043bd8:	69db      	ldr	r3, [r3, #28]
 8043bda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8043bde:	687b      	ldr	r3, [r7, #4]
 8043be0:	695b      	ldr	r3, [r3, #20]
 8043be2:	492e      	ldr	r1, [pc, #184]	@ (8043c9c <HAL_RCC_ClockConfig+0x358>)
 8043be4:	4313      	orrs	r3, r2
 8043be6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8043be8:	687b      	ldr	r3, [r7, #4]
 8043bea:	681b      	ldr	r3, [r3, #0]
 8043bec:	f003 0310 	and.w	r3, r3, #16
 8043bf0:	2b00      	cmp	r3, #0
 8043bf2:	d010      	beq.n	8043c16 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8043bf4:	687b      	ldr	r3, [r7, #4]
 8043bf6:	699a      	ldr	r2, [r3, #24]
 8043bf8:	4b28      	ldr	r3, [pc, #160]	@ (8043c9c <HAL_RCC_ClockConfig+0x358>)
 8043bfa:	69db      	ldr	r3, [r3, #28]
 8043bfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8043c00:	429a      	cmp	r2, r3
 8043c02:	d208      	bcs.n	8043c16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8043c04:	4b25      	ldr	r3, [pc, #148]	@ (8043c9c <HAL_RCC_ClockConfig+0x358>)
 8043c06:	69db      	ldr	r3, [r3, #28]
 8043c08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8043c0c:	687b      	ldr	r3, [r7, #4]
 8043c0e:	699b      	ldr	r3, [r3, #24]
 8043c10:	4922      	ldr	r1, [pc, #136]	@ (8043c9c <HAL_RCC_ClockConfig+0x358>)
 8043c12:	4313      	orrs	r3, r2
 8043c14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8043c16:	687b      	ldr	r3, [r7, #4]
 8043c18:	681b      	ldr	r3, [r3, #0]
 8043c1a:	f003 0320 	and.w	r3, r3, #32
 8043c1e:	2b00      	cmp	r3, #0
 8043c20:	d010      	beq.n	8043c44 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8043c22:	687b      	ldr	r3, [r7, #4]
 8043c24:	69da      	ldr	r2, [r3, #28]
 8043c26:	4b1d      	ldr	r3, [pc, #116]	@ (8043c9c <HAL_RCC_ClockConfig+0x358>)
 8043c28:	6a1b      	ldr	r3, [r3, #32]
 8043c2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8043c2e:	429a      	cmp	r2, r3
 8043c30:	d208      	bcs.n	8043c44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8043c32:	4b1a      	ldr	r3, [pc, #104]	@ (8043c9c <HAL_RCC_ClockConfig+0x358>)
 8043c34:	6a1b      	ldr	r3, [r3, #32]
 8043c36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8043c3a:	687b      	ldr	r3, [r7, #4]
 8043c3c:	69db      	ldr	r3, [r3, #28]
 8043c3e:	4917      	ldr	r1, [pc, #92]	@ (8043c9c <HAL_RCC_ClockConfig+0x358>)
 8043c40:	4313      	orrs	r3, r2
 8043c42:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8043c44:	f000 f89e 	bl	8043d84 <HAL_RCC_GetSysClockFreq>
 8043c48:	4602      	mov	r2, r0
 8043c4a:	4b14      	ldr	r3, [pc, #80]	@ (8043c9c <HAL_RCC_ClockConfig+0x358>)
 8043c4c:	699b      	ldr	r3, [r3, #24]
 8043c4e:	0a1b      	lsrs	r3, r3, #8
 8043c50:	f003 030f 	and.w	r3, r3, #15
 8043c54:	4912      	ldr	r1, [pc, #72]	@ (8043ca0 <HAL_RCC_ClockConfig+0x35c>)
 8043c56:	5ccb      	ldrb	r3, [r1, r3]
 8043c58:	f003 031f 	and.w	r3, r3, #31
 8043c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8043c60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8043c62:	4b0e      	ldr	r3, [pc, #56]	@ (8043c9c <HAL_RCC_ClockConfig+0x358>)
 8043c64:	699b      	ldr	r3, [r3, #24]
 8043c66:	f003 030f 	and.w	r3, r3, #15
 8043c6a:	4a0d      	ldr	r2, [pc, #52]	@ (8043ca0 <HAL_RCC_ClockConfig+0x35c>)
 8043c6c:	5cd3      	ldrb	r3, [r2, r3]
 8043c6e:	f003 031f 	and.w	r3, r3, #31
 8043c72:	693a      	ldr	r2, [r7, #16]
 8043c74:	fa22 f303 	lsr.w	r3, r2, r3
 8043c78:	4a0a      	ldr	r2, [pc, #40]	@ (8043ca4 <HAL_RCC_ClockConfig+0x360>)
 8043c7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8043c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8043ca8 <HAL_RCC_ClockConfig+0x364>)
 8043c7e:	693b      	ldr	r3, [r7, #16]
 8043c80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8043c82:	4b0a      	ldr	r3, [pc, #40]	@ (8043cac <HAL_RCC_ClockConfig+0x368>)
 8043c84:	681b      	ldr	r3, [r3, #0]
 8043c86:	4618      	mov	r0, r3
 8043c88:	f7fd fa5c 	bl	8041144 <HAL_InitTick>
 8043c8c:	4603      	mov	r3, r0
 8043c8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8043c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8043c92:	4618      	mov	r0, r3
 8043c94:	3718      	adds	r7, #24
 8043c96:	46bd      	mov	sp, r7
 8043c98:	bd80      	pop	{r7, pc}
 8043c9a:	bf00      	nop
 8043c9c:	58024400 	.word	0x58024400
 8043ca0:	0804ba30 	.word	0x0804ba30
 8043ca4:	24000004 	.word	0x24000004
 8043ca8:	24000000 	.word	0x24000000
 8043cac:	24000008 	.word	0x24000008

08043cb0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8043cb0:	b580      	push	{r7, lr}
 8043cb2:	b08c      	sub	sp, #48	@ 0x30
 8043cb4:	af00      	add	r7, sp, #0
 8043cb6:	60f8      	str	r0, [r7, #12]
 8043cb8:	60b9      	str	r1, [r7, #8]
 8043cba:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8043cbc:	68fb      	ldr	r3, [r7, #12]
 8043cbe:	2b00      	cmp	r3, #0
 8043cc0:	d12a      	bne.n	8043d18 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8043cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8043d78 <HAL_RCC_MCOConfig+0xc8>)
 8043cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8043cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8043d78 <HAL_RCC_MCOConfig+0xc8>)
 8043cca:	f043 0301 	orr.w	r3, r3, #1
 8043cce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8043cd2:	4b29      	ldr	r3, [pc, #164]	@ (8043d78 <HAL_RCC_MCOConfig+0xc8>)
 8043cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8043cd8:	f003 0301 	and.w	r3, r3, #1
 8043cdc:	61bb      	str	r3, [r7, #24]
 8043cde:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8043ce0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8043ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8043ce6:	2302      	movs	r3, #2
 8043ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8043cea:	2303      	movs	r3, #3
 8043cec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043cee:	2300      	movs	r3, #0
 8043cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8043cf2:	2300      	movs	r3, #0
 8043cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8043cf6:	f107 031c 	add.w	r3, r7, #28
 8043cfa:	4619      	mov	r1, r3
 8043cfc:	481f      	ldr	r0, [pc, #124]	@ (8043d7c <HAL_RCC_MCOConfig+0xcc>)
 8043cfe:	f7fd fca9 	bl	8041654 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8043d02:	4b1d      	ldr	r3, [pc, #116]	@ (8043d78 <HAL_RCC_MCOConfig+0xc8>)
 8043d04:	691b      	ldr	r3, [r3, #16]
 8043d06:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8043d0a:	68b9      	ldr	r1, [r7, #8]
 8043d0c:	687b      	ldr	r3, [r7, #4]
 8043d0e:	430b      	orrs	r3, r1
 8043d10:	4919      	ldr	r1, [pc, #100]	@ (8043d78 <HAL_RCC_MCOConfig+0xc8>)
 8043d12:	4313      	orrs	r3, r2
 8043d14:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8043d16:	e02a      	b.n	8043d6e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8043d18:	4b17      	ldr	r3, [pc, #92]	@ (8043d78 <HAL_RCC_MCOConfig+0xc8>)
 8043d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8043d1e:	4a16      	ldr	r2, [pc, #88]	@ (8043d78 <HAL_RCC_MCOConfig+0xc8>)
 8043d20:	f043 0304 	orr.w	r3, r3, #4
 8043d24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8043d28:	4b13      	ldr	r3, [pc, #76]	@ (8043d78 <HAL_RCC_MCOConfig+0xc8>)
 8043d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8043d2e:	f003 0304 	and.w	r3, r3, #4
 8043d32:	617b      	str	r3, [r7, #20]
 8043d34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8043d36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8043d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8043d3c:	2302      	movs	r3, #2
 8043d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8043d40:	2303      	movs	r3, #3
 8043d42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043d44:	2300      	movs	r3, #0
 8043d46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8043d48:	2300      	movs	r3, #0
 8043d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8043d4c:	f107 031c 	add.w	r3, r7, #28
 8043d50:	4619      	mov	r1, r3
 8043d52:	480b      	ldr	r0, [pc, #44]	@ (8043d80 <HAL_RCC_MCOConfig+0xd0>)
 8043d54:	f7fd fc7e 	bl	8041654 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8043d58:	4b07      	ldr	r3, [pc, #28]	@ (8043d78 <HAL_RCC_MCOConfig+0xc8>)
 8043d5a:	691b      	ldr	r3, [r3, #16]
 8043d5c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8043d60:	687b      	ldr	r3, [r7, #4]
 8043d62:	01d9      	lsls	r1, r3, #7
 8043d64:	68bb      	ldr	r3, [r7, #8]
 8043d66:	430b      	orrs	r3, r1
 8043d68:	4903      	ldr	r1, [pc, #12]	@ (8043d78 <HAL_RCC_MCOConfig+0xc8>)
 8043d6a:	4313      	orrs	r3, r2
 8043d6c:	610b      	str	r3, [r1, #16]
}
 8043d6e:	bf00      	nop
 8043d70:	3730      	adds	r7, #48	@ 0x30
 8043d72:	46bd      	mov	sp, r7
 8043d74:	bd80      	pop	{r7, pc}
 8043d76:	bf00      	nop
 8043d78:	58024400 	.word	0x58024400
 8043d7c:	58020000 	.word	0x58020000
 8043d80:	58020800 	.word	0x58020800

08043d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8043d84:	b480      	push	{r7}
 8043d86:	b089      	sub	sp, #36	@ 0x24
 8043d88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8043d8a:	4bb3      	ldr	r3, [pc, #716]	@ (8044058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d8c:	691b      	ldr	r3, [r3, #16]
 8043d8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8043d92:	2b18      	cmp	r3, #24
 8043d94:	f200 8155 	bhi.w	8044042 <HAL_RCC_GetSysClockFreq+0x2be>
 8043d98:	a201      	add	r2, pc, #4	@ (adr r2, 8043da0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8043d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043d9e:	bf00      	nop
 8043da0:	08043e05 	.word	0x08043e05
 8043da4:	08044043 	.word	0x08044043
 8043da8:	08044043 	.word	0x08044043
 8043dac:	08044043 	.word	0x08044043
 8043db0:	08044043 	.word	0x08044043
 8043db4:	08044043 	.word	0x08044043
 8043db8:	08044043 	.word	0x08044043
 8043dbc:	08044043 	.word	0x08044043
 8043dc0:	08043e2b 	.word	0x08043e2b
 8043dc4:	08044043 	.word	0x08044043
 8043dc8:	08044043 	.word	0x08044043
 8043dcc:	08044043 	.word	0x08044043
 8043dd0:	08044043 	.word	0x08044043
 8043dd4:	08044043 	.word	0x08044043
 8043dd8:	08044043 	.word	0x08044043
 8043ddc:	08044043 	.word	0x08044043
 8043de0:	08043e31 	.word	0x08043e31
 8043de4:	08044043 	.word	0x08044043
 8043de8:	08044043 	.word	0x08044043
 8043dec:	08044043 	.word	0x08044043
 8043df0:	08044043 	.word	0x08044043
 8043df4:	08044043 	.word	0x08044043
 8043df8:	08044043 	.word	0x08044043
 8043dfc:	08044043 	.word	0x08044043
 8043e00:	08043e37 	.word	0x08043e37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8043e04:	4b94      	ldr	r3, [pc, #592]	@ (8044058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043e06:	681b      	ldr	r3, [r3, #0]
 8043e08:	f003 0320 	and.w	r3, r3, #32
 8043e0c:	2b00      	cmp	r3, #0
 8043e0e:	d009      	beq.n	8043e24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8043e10:	4b91      	ldr	r3, [pc, #580]	@ (8044058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043e12:	681b      	ldr	r3, [r3, #0]
 8043e14:	08db      	lsrs	r3, r3, #3
 8043e16:	f003 0303 	and.w	r3, r3, #3
 8043e1a:	4a90      	ldr	r2, [pc, #576]	@ (804405c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8043e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8043e20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8043e22:	e111      	b.n	8044048 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8043e24:	4b8d      	ldr	r3, [pc, #564]	@ (804405c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8043e26:	61bb      	str	r3, [r7, #24]
      break;
 8043e28:	e10e      	b.n	8044048 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8043e2a:	4b8d      	ldr	r3, [pc, #564]	@ (8044060 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8043e2c:	61bb      	str	r3, [r7, #24]
      break;
 8043e2e:	e10b      	b.n	8044048 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8043e30:	4b8c      	ldr	r3, [pc, #560]	@ (8044064 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8043e32:	61bb      	str	r3, [r7, #24]
      break;
 8043e34:	e108      	b.n	8044048 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8043e36:	4b88      	ldr	r3, [pc, #544]	@ (8044058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043e3a:	f003 0303 	and.w	r3, r3, #3
 8043e3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8043e40:	4b85      	ldr	r3, [pc, #532]	@ (8044058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043e44:	091b      	lsrs	r3, r3, #4
 8043e46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8043e4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8043e4c:	4b82      	ldr	r3, [pc, #520]	@ (8044058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043e50:	f003 0301 	and.w	r3, r3, #1
 8043e54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8043e56:	4b80      	ldr	r3, [pc, #512]	@ (8044058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8043e5a:	08db      	lsrs	r3, r3, #3
 8043e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8043e60:	68fa      	ldr	r2, [r7, #12]
 8043e62:	fb02 f303 	mul.w	r3, r2, r3
 8043e66:	ee07 3a90 	vmov	s15, r3
 8043e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043e6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8043e72:	693b      	ldr	r3, [r7, #16]
 8043e74:	2b00      	cmp	r3, #0
 8043e76:	f000 80e1 	beq.w	804403c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8043e7a:	697b      	ldr	r3, [r7, #20]
 8043e7c:	2b02      	cmp	r3, #2
 8043e7e:	f000 8083 	beq.w	8043f88 <HAL_RCC_GetSysClockFreq+0x204>
 8043e82:	697b      	ldr	r3, [r7, #20]
 8043e84:	2b02      	cmp	r3, #2
 8043e86:	f200 80a1 	bhi.w	8043fcc <HAL_RCC_GetSysClockFreq+0x248>
 8043e8a:	697b      	ldr	r3, [r7, #20]
 8043e8c:	2b00      	cmp	r3, #0
 8043e8e:	d003      	beq.n	8043e98 <HAL_RCC_GetSysClockFreq+0x114>
 8043e90:	697b      	ldr	r3, [r7, #20]
 8043e92:	2b01      	cmp	r3, #1
 8043e94:	d056      	beq.n	8043f44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8043e96:	e099      	b.n	8043fcc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8043e98:	4b6f      	ldr	r3, [pc, #444]	@ (8044058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043e9a:	681b      	ldr	r3, [r3, #0]
 8043e9c:	f003 0320 	and.w	r3, r3, #32
 8043ea0:	2b00      	cmp	r3, #0
 8043ea2:	d02d      	beq.n	8043f00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8043ea4:	4b6c      	ldr	r3, [pc, #432]	@ (8044058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043ea6:	681b      	ldr	r3, [r3, #0]
 8043ea8:	08db      	lsrs	r3, r3, #3
 8043eaa:	f003 0303 	and.w	r3, r3, #3
 8043eae:	4a6b      	ldr	r2, [pc, #428]	@ (804405c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8043eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8043eb4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043eb6:	687b      	ldr	r3, [r7, #4]
 8043eb8:	ee07 3a90 	vmov	s15, r3
 8043ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043ec0:	693b      	ldr	r3, [r7, #16]
 8043ec2:	ee07 3a90 	vmov	s15, r3
 8043ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043ece:	4b62      	ldr	r3, [pc, #392]	@ (8044058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043ed6:	ee07 3a90 	vmov	s15, r3
 8043eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8043ee2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8044068 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043efa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8043efe:	e087      	b.n	8044010 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043f00:	693b      	ldr	r3, [r7, #16]
 8043f02:	ee07 3a90 	vmov	s15, r3
 8043f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043f0a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 804406c <HAL_RCC_GetSysClockFreq+0x2e8>
 8043f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043f12:	4b51      	ldr	r3, [pc, #324]	@ (8044058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043f1a:	ee07 3a90 	vmov	s15, r3
 8043f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8043f26:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8044068 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043f32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043f3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8043f42:	e065      	b.n	8044010 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043f44:	693b      	ldr	r3, [r7, #16]
 8043f46:	ee07 3a90 	vmov	s15, r3
 8043f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043f4e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8044070 <HAL_RCC_GetSysClockFreq+0x2ec>
 8043f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043f56:	4b40      	ldr	r3, [pc, #256]	@ (8044058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043f5e:	ee07 3a90 	vmov	s15, r3
 8043f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8043f6a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8044068 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043f82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8043f86:	e043      	b.n	8044010 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043f88:	693b      	ldr	r3, [r7, #16]
 8043f8a:	ee07 3a90 	vmov	s15, r3
 8043f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043f92:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8044074 <HAL_RCC_GetSysClockFreq+0x2f0>
 8043f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8044058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043fa2:	ee07 3a90 	vmov	s15, r3
 8043fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8043fae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8044068 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8043fca:	e021      	b.n	8044010 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043fcc:	693b      	ldr	r3, [r7, #16]
 8043fce:	ee07 3a90 	vmov	s15, r3
 8043fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043fd6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8044070 <HAL_RCC_GetSysClockFreq+0x2ec>
 8043fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043fde:	4b1e      	ldr	r3, [pc, #120]	@ (8044058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043fe6:	ee07 3a90 	vmov	s15, r3
 8043fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8043ff2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8044068 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8044002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8044006:	ee67 7a27 	vmul.f32	s15, s14, s15
 804400a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 804400e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8044010:	4b11      	ldr	r3, [pc, #68]	@ (8044058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8044012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8044014:	0a5b      	lsrs	r3, r3, #9
 8044016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 804401a:	3301      	adds	r3, #1
 804401c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 804401e:	683b      	ldr	r3, [r7, #0]
 8044020:	ee07 3a90 	vmov	s15, r3
 8044024:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8044028:	edd7 6a07 	vldr	s13, [r7, #28]
 804402c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8044030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8044034:	ee17 3a90 	vmov	r3, s15
 8044038:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 804403a:	e005      	b.n	8044048 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 804403c:	2300      	movs	r3, #0
 804403e:	61bb      	str	r3, [r7, #24]
      break;
 8044040:	e002      	b.n	8044048 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8044042:	4b07      	ldr	r3, [pc, #28]	@ (8044060 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8044044:	61bb      	str	r3, [r7, #24]
      break;
 8044046:	bf00      	nop
  }

  return sysclockfreq;
 8044048:	69bb      	ldr	r3, [r7, #24]
}
 804404a:	4618      	mov	r0, r3
 804404c:	3724      	adds	r7, #36	@ 0x24
 804404e:	46bd      	mov	sp, r7
 8044050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044054:	4770      	bx	lr
 8044056:	bf00      	nop
 8044058:	58024400 	.word	0x58024400
 804405c:	03d09000 	.word	0x03d09000
 8044060:	003d0900 	.word	0x003d0900
 8044064:	017d7840 	.word	0x017d7840
 8044068:	46000000 	.word	0x46000000
 804406c:	4c742400 	.word	0x4c742400
 8044070:	4a742400 	.word	0x4a742400
 8044074:	4bbebc20 	.word	0x4bbebc20

08044078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8044078:	b580      	push	{r7, lr}
 804407a:	b082      	sub	sp, #8
 804407c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 804407e:	f7ff fe81 	bl	8043d84 <HAL_RCC_GetSysClockFreq>
 8044082:	4602      	mov	r2, r0
 8044084:	4b10      	ldr	r3, [pc, #64]	@ (80440c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8044086:	699b      	ldr	r3, [r3, #24]
 8044088:	0a1b      	lsrs	r3, r3, #8
 804408a:	f003 030f 	and.w	r3, r3, #15
 804408e:	490f      	ldr	r1, [pc, #60]	@ (80440cc <HAL_RCC_GetHCLKFreq+0x54>)
 8044090:	5ccb      	ldrb	r3, [r1, r3]
 8044092:	f003 031f 	and.w	r3, r3, #31
 8044096:	fa22 f303 	lsr.w	r3, r2, r3
 804409a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 804409c:	4b0a      	ldr	r3, [pc, #40]	@ (80440c8 <HAL_RCC_GetHCLKFreq+0x50>)
 804409e:	699b      	ldr	r3, [r3, #24]
 80440a0:	f003 030f 	and.w	r3, r3, #15
 80440a4:	4a09      	ldr	r2, [pc, #36]	@ (80440cc <HAL_RCC_GetHCLKFreq+0x54>)
 80440a6:	5cd3      	ldrb	r3, [r2, r3]
 80440a8:	f003 031f 	and.w	r3, r3, #31
 80440ac:	687a      	ldr	r2, [r7, #4]
 80440ae:	fa22 f303 	lsr.w	r3, r2, r3
 80440b2:	4a07      	ldr	r2, [pc, #28]	@ (80440d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80440b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80440b6:	4a07      	ldr	r2, [pc, #28]	@ (80440d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80440b8:	687b      	ldr	r3, [r7, #4]
 80440ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80440bc:	4b04      	ldr	r3, [pc, #16]	@ (80440d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80440be:	681b      	ldr	r3, [r3, #0]
}
 80440c0:	4618      	mov	r0, r3
 80440c2:	3708      	adds	r7, #8
 80440c4:	46bd      	mov	sp, r7
 80440c6:	bd80      	pop	{r7, pc}
 80440c8:	58024400 	.word	0x58024400
 80440cc:	0804ba30 	.word	0x0804ba30
 80440d0:	24000004 	.word	0x24000004
 80440d4:	24000000 	.word	0x24000000

080440d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80440d8:	b580      	push	{r7, lr}
 80440da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80440dc:	f7ff ffcc 	bl	8044078 <HAL_RCC_GetHCLKFreq>
 80440e0:	4602      	mov	r2, r0
 80440e2:	4b06      	ldr	r3, [pc, #24]	@ (80440fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80440e4:	69db      	ldr	r3, [r3, #28]
 80440e6:	091b      	lsrs	r3, r3, #4
 80440e8:	f003 0307 	and.w	r3, r3, #7
 80440ec:	4904      	ldr	r1, [pc, #16]	@ (8044100 <HAL_RCC_GetPCLK1Freq+0x28>)
 80440ee:	5ccb      	ldrb	r3, [r1, r3]
 80440f0:	f003 031f 	and.w	r3, r3, #31
 80440f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80440f8:	4618      	mov	r0, r3
 80440fa:	bd80      	pop	{r7, pc}
 80440fc:	58024400 	.word	0x58024400
 8044100:	0804ba30 	.word	0x0804ba30

08044104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8044104:	b580      	push	{r7, lr}
 8044106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8044108:	f7ff ffb6 	bl	8044078 <HAL_RCC_GetHCLKFreq>
 804410c:	4602      	mov	r2, r0
 804410e:	4b06      	ldr	r3, [pc, #24]	@ (8044128 <HAL_RCC_GetPCLK2Freq+0x24>)
 8044110:	69db      	ldr	r3, [r3, #28]
 8044112:	0a1b      	lsrs	r3, r3, #8
 8044114:	f003 0307 	and.w	r3, r3, #7
 8044118:	4904      	ldr	r1, [pc, #16]	@ (804412c <HAL_RCC_GetPCLK2Freq+0x28>)
 804411a:	5ccb      	ldrb	r3, [r1, r3]
 804411c:	f003 031f 	and.w	r3, r3, #31
 8044120:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8044124:	4618      	mov	r0, r3
 8044126:	bd80      	pop	{r7, pc}
 8044128:	58024400 	.word	0x58024400
 804412c:	0804ba30 	.word	0x0804ba30

08044130 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8044130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8044134:	b0cc      	sub	sp, #304	@ 0x130
 8044136:	af00      	add	r7, sp, #0
 8044138:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 804413c:	2300      	movs	r3, #0
 804413e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8044142:	2300      	movs	r3, #0
 8044144:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8044148:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044150:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8044154:	2500      	movs	r5, #0
 8044156:	ea54 0305 	orrs.w	r3, r4, r5
 804415a:	d049      	beq.n	80441f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 804415c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8044162:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8044166:	d02f      	beq.n	80441c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8044168:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 804416c:	d828      	bhi.n	80441c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 804416e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8044172:	d01a      	beq.n	80441aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8044174:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8044178:	d822      	bhi.n	80441c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 804417a:	2b00      	cmp	r3, #0
 804417c:	d003      	beq.n	8044186 <HAL_RCCEx_PeriphCLKConfig+0x56>
 804417e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8044182:	d007      	beq.n	8044194 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8044184:	e01c      	b.n	80441c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8044186:	4bb8      	ldr	r3, [pc, #736]	@ (8044468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804418a:	4ab7      	ldr	r2, [pc, #732]	@ (8044468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804418c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044190:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8044192:	e01a      	b.n	80441ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8044194:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044198:	3308      	adds	r3, #8
 804419a:	2102      	movs	r1, #2
 804419c:	4618      	mov	r0, r3
 804419e:	f001 fccf 	bl	8045b40 <RCCEx_PLL2_Config>
 80441a2:	4603      	mov	r3, r0
 80441a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80441a8:	e00f      	b.n	80441ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80441aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80441ae:	3328      	adds	r3, #40	@ 0x28
 80441b0:	2102      	movs	r1, #2
 80441b2:	4618      	mov	r0, r3
 80441b4:	f001 fd76 	bl	8045ca4 <RCCEx_PLL3_Config>
 80441b8:	4603      	mov	r3, r0
 80441ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80441be:	e004      	b.n	80441ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80441c0:	2301      	movs	r3, #1
 80441c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80441c6:	e000      	b.n	80441ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80441c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80441ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80441ce:	2b00      	cmp	r3, #0
 80441d0:	d10a      	bne.n	80441e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80441d2:	4ba5      	ldr	r3, [pc, #660]	@ (8044468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80441d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80441d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80441da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80441de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80441e0:	4aa1      	ldr	r2, [pc, #644]	@ (8044468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80441e2:	430b      	orrs	r3, r1
 80441e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80441e6:	e003      	b.n	80441f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80441e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80441ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80441f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80441f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80441f8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80441fc:	f04f 0900 	mov.w	r9, #0
 8044200:	ea58 0309 	orrs.w	r3, r8, r9
 8044204:	d047      	beq.n	8044296 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8044206:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804420a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 804420c:	2b04      	cmp	r3, #4
 804420e:	d82a      	bhi.n	8044266 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8044210:	a201      	add	r2, pc, #4	@ (adr r2, 8044218 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8044212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044216:	bf00      	nop
 8044218:	0804422d 	.word	0x0804422d
 804421c:	0804423b 	.word	0x0804423b
 8044220:	08044251 	.word	0x08044251
 8044224:	0804426f 	.word	0x0804426f
 8044228:	0804426f 	.word	0x0804426f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804422c:	4b8e      	ldr	r3, [pc, #568]	@ (8044468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044230:	4a8d      	ldr	r2, [pc, #564]	@ (8044468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8044238:	e01a      	b.n	8044270 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804423a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804423e:	3308      	adds	r3, #8
 8044240:	2100      	movs	r1, #0
 8044242:	4618      	mov	r0, r3
 8044244:	f001 fc7c 	bl	8045b40 <RCCEx_PLL2_Config>
 8044248:	4603      	mov	r3, r0
 804424a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 804424e:	e00f      	b.n	8044270 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8044250:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044254:	3328      	adds	r3, #40	@ 0x28
 8044256:	2100      	movs	r1, #0
 8044258:	4618      	mov	r0, r3
 804425a:	f001 fd23 	bl	8045ca4 <RCCEx_PLL3_Config>
 804425e:	4603      	mov	r3, r0
 8044260:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8044264:	e004      	b.n	8044270 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044266:	2301      	movs	r3, #1
 8044268:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 804426c:	e000      	b.n	8044270 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 804426e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044270:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044274:	2b00      	cmp	r3, #0
 8044276:	d10a      	bne.n	804428e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8044278:	4b7b      	ldr	r3, [pc, #492]	@ (8044468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804427a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804427c:	f023 0107 	bic.w	r1, r3, #7
 8044280:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8044286:	4a78      	ldr	r2, [pc, #480]	@ (8044468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044288:	430b      	orrs	r3, r1
 804428a:	6513      	str	r3, [r2, #80]	@ 0x50
 804428c:	e003      	b.n	8044296 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804428e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044292:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8044296:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804429e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80442a2:	f04f 0b00 	mov.w	fp, #0
 80442a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80442aa:	d04c      	beq.n	8044346 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80442ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80442b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80442b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80442b6:	d030      	beq.n	804431a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80442b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80442bc:	d829      	bhi.n	8044312 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80442be:	2bc0      	cmp	r3, #192	@ 0xc0
 80442c0:	d02d      	beq.n	804431e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80442c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80442c4:	d825      	bhi.n	8044312 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80442c6:	2b80      	cmp	r3, #128	@ 0x80
 80442c8:	d018      	beq.n	80442fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80442ca:	2b80      	cmp	r3, #128	@ 0x80
 80442cc:	d821      	bhi.n	8044312 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80442ce:	2b00      	cmp	r3, #0
 80442d0:	d002      	beq.n	80442d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80442d2:	2b40      	cmp	r3, #64	@ 0x40
 80442d4:	d007      	beq.n	80442e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80442d6:	e01c      	b.n	8044312 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80442d8:	4b63      	ldr	r3, [pc, #396]	@ (8044468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80442da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80442dc:	4a62      	ldr	r2, [pc, #392]	@ (8044468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80442de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80442e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80442e4:	e01c      	b.n	8044320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80442e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80442ea:	3308      	adds	r3, #8
 80442ec:	2100      	movs	r1, #0
 80442ee:	4618      	mov	r0, r3
 80442f0:	f001 fc26 	bl	8045b40 <RCCEx_PLL2_Config>
 80442f4:	4603      	mov	r3, r0
 80442f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80442fa:	e011      	b.n	8044320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80442fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044300:	3328      	adds	r3, #40	@ 0x28
 8044302:	2100      	movs	r1, #0
 8044304:	4618      	mov	r0, r3
 8044306:	f001 fccd 	bl	8045ca4 <RCCEx_PLL3_Config>
 804430a:	4603      	mov	r3, r0
 804430c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8044310:	e006      	b.n	8044320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044312:	2301      	movs	r3, #1
 8044314:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044318:	e002      	b.n	8044320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 804431a:	bf00      	nop
 804431c:	e000      	b.n	8044320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 804431e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044320:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044324:	2b00      	cmp	r3, #0
 8044326:	d10a      	bne.n	804433e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8044328:	4b4f      	ldr	r3, [pc, #316]	@ (8044468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804432a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804432c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8044330:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8044336:	4a4c      	ldr	r2, [pc, #304]	@ (8044468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044338:	430b      	orrs	r3, r1
 804433a:	6513      	str	r3, [r2, #80]	@ 0x50
 804433c:	e003      	b.n	8044346 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804433e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044342:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8044346:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804434e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8044352:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8044356:	2300      	movs	r3, #0
 8044358:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 804435c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8044360:	460b      	mov	r3, r1
 8044362:	4313      	orrs	r3, r2
 8044364:	d053      	beq.n	804440e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8044366:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804436a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 804436e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8044372:	d035      	beq.n	80443e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8044374:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8044378:	d82e      	bhi.n	80443d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 804437a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 804437e:	d031      	beq.n	80443e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8044380:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8044384:	d828      	bhi.n	80443d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8044386:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 804438a:	d01a      	beq.n	80443c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 804438c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8044390:	d822      	bhi.n	80443d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8044392:	2b00      	cmp	r3, #0
 8044394:	d003      	beq.n	804439e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8044396:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 804439a:	d007      	beq.n	80443ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 804439c:	e01c      	b.n	80443d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804439e:	4b32      	ldr	r3, [pc, #200]	@ (8044468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80443a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80443a2:	4a31      	ldr	r2, [pc, #196]	@ (8044468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80443a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80443a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80443aa:	e01c      	b.n	80443e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80443ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80443b0:	3308      	adds	r3, #8
 80443b2:	2100      	movs	r1, #0
 80443b4:	4618      	mov	r0, r3
 80443b6:	f001 fbc3 	bl	8045b40 <RCCEx_PLL2_Config>
 80443ba:	4603      	mov	r3, r0
 80443bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80443c0:	e011      	b.n	80443e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80443c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80443c6:	3328      	adds	r3, #40	@ 0x28
 80443c8:	2100      	movs	r1, #0
 80443ca:	4618      	mov	r0, r3
 80443cc:	f001 fc6a 	bl	8045ca4 <RCCEx_PLL3_Config>
 80443d0:	4603      	mov	r3, r0
 80443d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80443d6:	e006      	b.n	80443e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80443d8:	2301      	movs	r3, #1
 80443da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80443de:	e002      	b.n	80443e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80443e0:	bf00      	nop
 80443e2:	e000      	b.n	80443e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80443e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80443e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80443ea:	2b00      	cmp	r3, #0
 80443ec:	d10b      	bne.n	8044406 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80443ee:	4b1e      	ldr	r3, [pc, #120]	@ (8044468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80443f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80443f2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80443f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80443fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80443fe:	4a1a      	ldr	r2, [pc, #104]	@ (8044468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044400:	430b      	orrs	r3, r1
 8044402:	6593      	str	r3, [r2, #88]	@ 0x58
 8044404:	e003      	b.n	804440e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044406:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804440a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 804440e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044416:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 804441a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 804441e:	2300      	movs	r3, #0
 8044420:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8044424:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8044428:	460b      	mov	r3, r1
 804442a:	4313      	orrs	r3, r2
 804442c:	d056      	beq.n	80444dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 804442e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044432:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8044436:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 804443a:	d038      	beq.n	80444ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 804443c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8044440:	d831      	bhi.n	80444a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8044442:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8044446:	d034      	beq.n	80444b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8044448:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 804444c:	d82b      	bhi.n	80444a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 804444e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8044452:	d01d      	beq.n	8044490 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8044454:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8044458:	d825      	bhi.n	80444a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 804445a:	2b00      	cmp	r3, #0
 804445c:	d006      	beq.n	804446c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 804445e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8044462:	d00a      	beq.n	804447a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8044464:	e01f      	b.n	80444a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8044466:	bf00      	nop
 8044468:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804446c:	4ba2      	ldr	r3, [pc, #648]	@ (80446f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044470:	4aa1      	ldr	r2, [pc, #644]	@ (80446f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8044478:	e01c      	b.n	80444b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804447a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804447e:	3308      	adds	r3, #8
 8044480:	2100      	movs	r1, #0
 8044482:	4618      	mov	r0, r3
 8044484:	f001 fb5c 	bl	8045b40 <RCCEx_PLL2_Config>
 8044488:	4603      	mov	r3, r0
 804448a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 804448e:	e011      	b.n	80444b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8044490:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044494:	3328      	adds	r3, #40	@ 0x28
 8044496:	2100      	movs	r1, #0
 8044498:	4618      	mov	r0, r3
 804449a:	f001 fc03 	bl	8045ca4 <RCCEx_PLL3_Config>
 804449e:	4603      	mov	r3, r0
 80444a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80444a4:	e006      	b.n	80444b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80444a6:	2301      	movs	r3, #1
 80444a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80444ac:	e002      	b.n	80444b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80444ae:	bf00      	nop
 80444b0:	e000      	b.n	80444b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80444b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80444b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80444b8:	2b00      	cmp	r3, #0
 80444ba:	d10b      	bne.n	80444d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80444bc:	4b8e      	ldr	r3, [pc, #568]	@ (80446f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80444be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80444c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80444c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80444c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80444cc:	4a8a      	ldr	r2, [pc, #552]	@ (80446f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80444ce:	430b      	orrs	r3, r1
 80444d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80444d2:	e003      	b.n	80444dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80444d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80444d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80444dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80444e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80444e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80444e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80444ec:	2300      	movs	r3, #0
 80444ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80444f2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80444f6:	460b      	mov	r3, r1
 80444f8:	4313      	orrs	r3, r2
 80444fa:	d03a      	beq.n	8044572 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80444fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8044502:	2b30      	cmp	r3, #48	@ 0x30
 8044504:	d01f      	beq.n	8044546 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8044506:	2b30      	cmp	r3, #48	@ 0x30
 8044508:	d819      	bhi.n	804453e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 804450a:	2b20      	cmp	r3, #32
 804450c:	d00c      	beq.n	8044528 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 804450e:	2b20      	cmp	r3, #32
 8044510:	d815      	bhi.n	804453e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8044512:	2b00      	cmp	r3, #0
 8044514:	d019      	beq.n	804454a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8044516:	2b10      	cmp	r3, #16
 8044518:	d111      	bne.n	804453e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804451a:	4b77      	ldr	r3, [pc, #476]	@ (80446f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804451c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804451e:	4a76      	ldr	r2, [pc, #472]	@ (80446f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044524:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8044526:	e011      	b.n	804454c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8044528:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804452c:	3308      	adds	r3, #8
 804452e:	2102      	movs	r1, #2
 8044530:	4618      	mov	r0, r3
 8044532:	f001 fb05 	bl	8045b40 <RCCEx_PLL2_Config>
 8044536:	4603      	mov	r3, r0
 8044538:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 804453c:	e006      	b.n	804454c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 804453e:	2301      	movs	r3, #1
 8044540:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044544:	e002      	b.n	804454c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8044546:	bf00      	nop
 8044548:	e000      	b.n	804454c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 804454a:	bf00      	nop
    }

    if (ret == HAL_OK)
 804454c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044550:	2b00      	cmp	r3, #0
 8044552:	d10a      	bne.n	804456a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8044554:	4b68      	ldr	r3, [pc, #416]	@ (80446f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8044558:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 804455c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8044562:	4a65      	ldr	r2, [pc, #404]	@ (80446f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044564:	430b      	orrs	r3, r1
 8044566:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8044568:	e003      	b.n	8044572 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804456a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804456e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8044572:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044576:	e9d3 2300 	ldrd	r2, r3, [r3]
 804457a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 804457e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8044582:	2300      	movs	r3, #0
 8044584:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8044588:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 804458c:	460b      	mov	r3, r1
 804458e:	4313      	orrs	r3, r2
 8044590:	d051      	beq.n	8044636 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8044592:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8044598:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 804459c:	d035      	beq.n	804460a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 804459e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80445a2:	d82e      	bhi.n	8044602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80445a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80445a8:	d031      	beq.n	804460e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80445aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80445ae:	d828      	bhi.n	8044602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80445b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80445b4:	d01a      	beq.n	80445ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80445b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80445ba:	d822      	bhi.n	8044602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80445bc:	2b00      	cmp	r3, #0
 80445be:	d003      	beq.n	80445c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80445c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80445c4:	d007      	beq.n	80445d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80445c6:	e01c      	b.n	8044602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80445c8:	4b4b      	ldr	r3, [pc, #300]	@ (80446f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80445ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80445cc:	4a4a      	ldr	r2, [pc, #296]	@ (80446f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80445ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80445d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80445d4:	e01c      	b.n	8044610 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80445d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80445da:	3308      	adds	r3, #8
 80445dc:	2100      	movs	r1, #0
 80445de:	4618      	mov	r0, r3
 80445e0:	f001 faae 	bl	8045b40 <RCCEx_PLL2_Config>
 80445e4:	4603      	mov	r3, r0
 80445e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80445ea:	e011      	b.n	8044610 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80445ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80445f0:	3328      	adds	r3, #40	@ 0x28
 80445f2:	2100      	movs	r1, #0
 80445f4:	4618      	mov	r0, r3
 80445f6:	f001 fb55 	bl	8045ca4 <RCCEx_PLL3_Config>
 80445fa:	4603      	mov	r3, r0
 80445fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8044600:	e006      	b.n	8044610 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044602:	2301      	movs	r3, #1
 8044604:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044608:	e002      	b.n	8044610 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 804460a:	bf00      	nop
 804460c:	e000      	b.n	8044610 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 804460e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044610:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044614:	2b00      	cmp	r3, #0
 8044616:	d10a      	bne.n	804462e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8044618:	4b37      	ldr	r3, [pc, #220]	@ (80446f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804461a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804461c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8044620:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044624:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8044626:	4a34      	ldr	r2, [pc, #208]	@ (80446f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044628:	430b      	orrs	r3, r1
 804462a:	6513      	str	r3, [r2, #80]	@ 0x50
 804462c:	e003      	b.n	8044636 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804462e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044632:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8044636:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804463e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8044642:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8044646:	2300      	movs	r3, #0
 8044648:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 804464c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8044650:	460b      	mov	r3, r1
 8044652:	4313      	orrs	r3, r2
 8044654:	d056      	beq.n	8044704 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8044656:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804465a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 804465c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8044660:	d033      	beq.n	80446ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8044662:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8044666:	d82c      	bhi.n	80446c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8044668:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 804466c:	d02f      	beq.n	80446ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 804466e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8044672:	d826      	bhi.n	80446c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8044674:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8044678:	d02b      	beq.n	80446d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 804467a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 804467e:	d820      	bhi.n	80446c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8044680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8044684:	d012      	beq.n	80446ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8044686:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 804468a:	d81a      	bhi.n	80446c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 804468c:	2b00      	cmp	r3, #0
 804468e:	d022      	beq.n	80446d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8044690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8044694:	d115      	bne.n	80446c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044696:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804469a:	3308      	adds	r3, #8
 804469c:	2101      	movs	r1, #1
 804469e:	4618      	mov	r0, r3
 80446a0:	f001 fa4e 	bl	8045b40 <RCCEx_PLL2_Config>
 80446a4:	4603      	mov	r3, r0
 80446a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80446aa:	e015      	b.n	80446d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80446ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80446b0:	3328      	adds	r3, #40	@ 0x28
 80446b2:	2101      	movs	r1, #1
 80446b4:	4618      	mov	r0, r3
 80446b6:	f001 faf5 	bl	8045ca4 <RCCEx_PLL3_Config>
 80446ba:	4603      	mov	r3, r0
 80446bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80446c0:	e00a      	b.n	80446d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80446c2:	2301      	movs	r3, #1
 80446c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80446c8:	e006      	b.n	80446d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80446ca:	bf00      	nop
 80446cc:	e004      	b.n	80446d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80446ce:	bf00      	nop
 80446d0:	e002      	b.n	80446d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80446d2:	bf00      	nop
 80446d4:	e000      	b.n	80446d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80446d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80446d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80446dc:	2b00      	cmp	r3, #0
 80446de:	d10d      	bne.n	80446fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80446e0:	4b05      	ldr	r3, [pc, #20]	@ (80446f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80446e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80446e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80446e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80446ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80446ee:	4a02      	ldr	r2, [pc, #8]	@ (80446f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80446f0:	430b      	orrs	r3, r1
 80446f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80446f4:	e006      	b.n	8044704 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80446f6:	bf00      	nop
 80446f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80446fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044700:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8044704:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044708:	e9d3 2300 	ldrd	r2, r3, [r3]
 804470c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8044710:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8044714:	2300      	movs	r3, #0
 8044716:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 804471a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 804471e:	460b      	mov	r3, r1
 8044720:	4313      	orrs	r3, r2
 8044722:	d055      	beq.n	80447d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8044724:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044728:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 804472c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8044730:	d033      	beq.n	804479a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8044732:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8044736:	d82c      	bhi.n	8044792 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8044738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 804473c:	d02f      	beq.n	804479e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 804473e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8044742:	d826      	bhi.n	8044792 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8044744:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8044748:	d02b      	beq.n	80447a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 804474a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 804474e:	d820      	bhi.n	8044792 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8044750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044754:	d012      	beq.n	804477c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8044756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 804475a:	d81a      	bhi.n	8044792 <HAL_RCCEx_PeriphCLKConfig+0x662>
 804475c:	2b00      	cmp	r3, #0
 804475e:	d022      	beq.n	80447a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8044760:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8044764:	d115      	bne.n	8044792 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044766:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804476a:	3308      	adds	r3, #8
 804476c:	2101      	movs	r1, #1
 804476e:	4618      	mov	r0, r3
 8044770:	f001 f9e6 	bl	8045b40 <RCCEx_PLL2_Config>
 8044774:	4603      	mov	r3, r0
 8044776:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 804477a:	e015      	b.n	80447a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 804477c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044780:	3328      	adds	r3, #40	@ 0x28
 8044782:	2101      	movs	r1, #1
 8044784:	4618      	mov	r0, r3
 8044786:	f001 fa8d 	bl	8045ca4 <RCCEx_PLL3_Config>
 804478a:	4603      	mov	r3, r0
 804478c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8044790:	e00a      	b.n	80447a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8044792:	2301      	movs	r3, #1
 8044794:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044798:	e006      	b.n	80447a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 804479a:	bf00      	nop
 804479c:	e004      	b.n	80447a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 804479e:	bf00      	nop
 80447a0:	e002      	b.n	80447a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80447a2:	bf00      	nop
 80447a4:	e000      	b.n	80447a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80447a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80447a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80447ac:	2b00      	cmp	r3, #0
 80447ae:	d10b      	bne.n	80447c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80447b0:	4bb6      	ldr	r3, [pc, #728]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80447b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80447b4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80447b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80447bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80447c0:	4ab2      	ldr	r2, [pc, #712]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80447c2:	430b      	orrs	r3, r1
 80447c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80447c6:	e003      	b.n	80447d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80447c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80447cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80447d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80447d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80447d8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80447dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80447e0:	2300      	movs	r3, #0
 80447e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80447e6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80447ea:	460b      	mov	r3, r1
 80447ec:	4313      	orrs	r3, r2
 80447ee:	d02a      	beq.n	8044846 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80447f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80447f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80447f6:	2b00      	cmp	r3, #0
 80447f8:	d011      	beq.n	804481e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80447fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80447fe:	d10a      	bne.n	8044816 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044800:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044804:	3308      	adds	r3, #8
 8044806:	2101      	movs	r1, #1
 8044808:	4618      	mov	r0, r3
 804480a:	f001 f999 	bl	8045b40 <RCCEx_PLL2_Config>
 804480e:	4603      	mov	r3, r0
 8044810:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8044814:	e004      	b.n	8044820 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044816:	2301      	movs	r3, #1
 8044818:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 804481c:	e000      	b.n	8044820 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 804481e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044820:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044824:	2b00      	cmp	r3, #0
 8044826:	d10a      	bne.n	804483e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8044828:	4b98      	ldr	r3, [pc, #608]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804482a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 804482c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8044830:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8044836:	4a95      	ldr	r2, [pc, #596]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044838:	430b      	orrs	r3, r1
 804483a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 804483c:	e003      	b.n	8044846 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804483e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044842:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8044846:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804484e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8044852:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8044856:	2300      	movs	r3, #0
 8044858:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 804485c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8044860:	460b      	mov	r3, r1
 8044862:	4313      	orrs	r3, r2
 8044864:	d037      	beq.n	80448d6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8044866:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804486a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 804486c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044870:	d00e      	beq.n	8044890 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8044872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044876:	d816      	bhi.n	80448a6 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8044878:	2b00      	cmp	r3, #0
 804487a:	d018      	beq.n	80448ae <HAL_RCCEx_PeriphCLKConfig+0x77e>
 804487c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8044880:	d111      	bne.n	80448a6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8044882:	4b82      	ldr	r3, [pc, #520]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044886:	4a81      	ldr	r2, [pc, #516]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 804488c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 804488e:	e00f      	b.n	80448b0 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044890:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044894:	3308      	adds	r3, #8
 8044896:	2101      	movs	r1, #1
 8044898:	4618      	mov	r0, r3
 804489a:	f001 f951 	bl	8045b40 <RCCEx_PLL2_Config>
 804489e:	4603      	mov	r3, r0
 80448a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80448a4:	e004      	b.n	80448b0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80448a6:	2301      	movs	r3, #1
 80448a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80448ac:	e000      	b.n	80448b0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80448ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80448b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80448b4:	2b00      	cmp	r3, #0
 80448b6:	d10a      	bne.n	80448ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80448b8:	4b74      	ldr	r3, [pc, #464]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80448bc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80448c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80448c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80448c6:	4a71      	ldr	r2, [pc, #452]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448c8:	430b      	orrs	r3, r1
 80448ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80448cc:	e003      	b.n	80448d6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80448ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80448d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80448d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80448da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80448de:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80448e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80448e6:	2300      	movs	r3, #0
 80448e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80448ec:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80448f0:	460b      	mov	r3, r1
 80448f2:	4313      	orrs	r3, r2
 80448f4:	d03a      	beq.n	804496c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80448f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80448fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80448fc:	2b03      	cmp	r3, #3
 80448fe:	d81d      	bhi.n	804493c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8044900:	a201      	add	r2, pc, #4	@ (adr r2, 8044908 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8044902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044906:	bf00      	nop
 8044908:	08044945 	.word	0x08044945
 804490c:	08044919 	.word	0x08044919
 8044910:	08044927 	.word	0x08044927
 8044914:	08044945 	.word	0x08044945
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8044918:	4b5c      	ldr	r3, [pc, #368]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804491a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804491c:	4a5b      	ldr	r2, [pc, #364]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804491e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8044924:	e00f      	b.n	8044946 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8044926:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804492a:	3308      	adds	r3, #8
 804492c:	2102      	movs	r1, #2
 804492e:	4618      	mov	r0, r3
 8044930:	f001 f906 	bl	8045b40 <RCCEx_PLL2_Config>
 8044934:	4603      	mov	r3, r0
 8044936:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 804493a:	e004      	b.n	8044946 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 804493c:	2301      	movs	r3, #1
 804493e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044942:	e000      	b.n	8044946 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8044944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044946:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804494a:	2b00      	cmp	r3, #0
 804494c:	d10a      	bne.n	8044964 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 804494e:	4b4f      	ldr	r3, [pc, #316]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8044952:	f023 0103 	bic.w	r1, r3, #3
 8044956:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804495a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 804495c:	4a4b      	ldr	r2, [pc, #300]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804495e:	430b      	orrs	r3, r1
 8044960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8044962:	e003      	b.n	804496c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044964:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044968:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 804496c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044974:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8044978:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 804497c:	2300      	movs	r3, #0
 804497e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8044982:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8044986:	460b      	mov	r3, r1
 8044988:	4313      	orrs	r3, r2
 804498a:	f000 80a0 	beq.w	8044ace <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 804498e:	4b40      	ldr	r3, [pc, #256]	@ (8044a90 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8044990:	681b      	ldr	r3, [r3, #0]
 8044992:	4a3f      	ldr	r2, [pc, #252]	@ (8044a90 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8044994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8044998:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 804499a:	f7fc fc1d 	bl	80411d8 <HAL_GetTick>
 804499e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80449a2:	e00b      	b.n	80449bc <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80449a4:	f7fc fc18 	bl	80411d8 <HAL_GetTick>
 80449a8:	4602      	mov	r2, r0
 80449aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80449ae:	1ad3      	subs	r3, r2, r3
 80449b0:	2b64      	cmp	r3, #100	@ 0x64
 80449b2:	d903      	bls.n	80449bc <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80449b4:	2303      	movs	r3, #3
 80449b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80449ba:	e005      	b.n	80449c8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80449bc:	4b34      	ldr	r3, [pc, #208]	@ (8044a90 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80449be:	681b      	ldr	r3, [r3, #0]
 80449c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80449c4:	2b00      	cmp	r3, #0
 80449c6:	d0ed      	beq.n	80449a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80449c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80449cc:	2b00      	cmp	r3, #0
 80449ce:	d17a      	bne.n	8044ac6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80449d0:	4b2e      	ldr	r3, [pc, #184]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80449d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80449d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80449d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80449dc:	4053      	eors	r3, r2
 80449de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80449e2:	2b00      	cmp	r3, #0
 80449e4:	d015      	beq.n	8044a12 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80449e6:	4b29      	ldr	r3, [pc, #164]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80449e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80449ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80449ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80449f2:	4b26      	ldr	r3, [pc, #152]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80449f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80449f6:	4a25      	ldr	r2, [pc, #148]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80449f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80449fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80449fe:	4b23      	ldr	r3, [pc, #140]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8044a02:	4a22      	ldr	r2, [pc, #136]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044a04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8044a08:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8044a0a:	4a20      	ldr	r2, [pc, #128]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044a0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8044a10:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8044a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044a16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8044a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8044a1e:	d118      	bne.n	8044a52 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8044a20:	f7fc fbda 	bl	80411d8 <HAL_GetTick>
 8044a24:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8044a28:	e00d      	b.n	8044a46 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8044a2a:	f7fc fbd5 	bl	80411d8 <HAL_GetTick>
 8044a2e:	4602      	mov	r2, r0
 8044a30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8044a34:	1ad2      	subs	r2, r2, r3
 8044a36:	f241 3388 	movw	r3, #5000	@ 0x1388
 8044a3a:	429a      	cmp	r2, r3
 8044a3c:	d903      	bls.n	8044a46 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8044a3e:	2303      	movs	r3, #3
 8044a40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8044a44:	e005      	b.n	8044a52 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8044a46:	4b11      	ldr	r3, [pc, #68]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8044a4a:	f003 0302 	and.w	r3, r3, #2
 8044a4e:	2b00      	cmp	r3, #0
 8044a50:	d0eb      	beq.n	8044a2a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8044a52:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044a56:	2b00      	cmp	r3, #0
 8044a58:	d130      	bne.n	8044abc <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8044a5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044a5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8044a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8044a66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8044a6a:	d115      	bne.n	8044a98 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8044a6c:	4b07      	ldr	r3, [pc, #28]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044a6e:	691b      	ldr	r3, [r3, #16]
 8044a70:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8044a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044a78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8044a7c:	091a      	lsrs	r2, r3, #4
 8044a7e:	4b05      	ldr	r3, [pc, #20]	@ (8044a94 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8044a80:	4013      	ands	r3, r2
 8044a82:	4a02      	ldr	r2, [pc, #8]	@ (8044a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044a84:	430b      	orrs	r3, r1
 8044a86:	6113      	str	r3, [r2, #16]
 8044a88:	e00c      	b.n	8044aa4 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8044a8a:	bf00      	nop
 8044a8c:	58024400 	.word	0x58024400
 8044a90:	58024800 	.word	0x58024800
 8044a94:	00ffffcf 	.word	0x00ffffcf
 8044a98:	4bd4      	ldr	r3, [pc, #848]	@ (8044dec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044a9a:	691b      	ldr	r3, [r3, #16]
 8044a9c:	4ad3      	ldr	r2, [pc, #844]	@ (8044dec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044a9e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8044aa2:	6113      	str	r3, [r2, #16]
 8044aa4:	4bd1      	ldr	r3, [pc, #836]	@ (8044dec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044aa6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8044aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044aac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8044ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044ab4:	4acd      	ldr	r2, [pc, #820]	@ (8044dec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044ab6:	430b      	orrs	r3, r1
 8044ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8044aba:	e008      	b.n	8044ace <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8044abc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044ac0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8044ac4:	e003      	b.n	8044ace <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044ac6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044aca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8044ace:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044ad6:	f002 0301 	and.w	r3, r2, #1
 8044ada:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8044ade:	2300      	movs	r3, #0
 8044ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8044ae4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8044ae8:	460b      	mov	r3, r1
 8044aea:	4313      	orrs	r3, r2
 8044aec:	f000 808b 	beq.w	8044c06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8044af0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8044af8:	2b28      	cmp	r3, #40	@ 0x28
 8044afa:	d86b      	bhi.n	8044bd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8044afc:	a201      	add	r2, pc, #4	@ (adr r2, 8044b04 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8044afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044b02:	bf00      	nop
 8044b04:	08044bdd 	.word	0x08044bdd
 8044b08:	08044bd5 	.word	0x08044bd5
 8044b0c:	08044bd5 	.word	0x08044bd5
 8044b10:	08044bd5 	.word	0x08044bd5
 8044b14:	08044bd5 	.word	0x08044bd5
 8044b18:	08044bd5 	.word	0x08044bd5
 8044b1c:	08044bd5 	.word	0x08044bd5
 8044b20:	08044bd5 	.word	0x08044bd5
 8044b24:	08044ba9 	.word	0x08044ba9
 8044b28:	08044bd5 	.word	0x08044bd5
 8044b2c:	08044bd5 	.word	0x08044bd5
 8044b30:	08044bd5 	.word	0x08044bd5
 8044b34:	08044bd5 	.word	0x08044bd5
 8044b38:	08044bd5 	.word	0x08044bd5
 8044b3c:	08044bd5 	.word	0x08044bd5
 8044b40:	08044bd5 	.word	0x08044bd5
 8044b44:	08044bbf 	.word	0x08044bbf
 8044b48:	08044bd5 	.word	0x08044bd5
 8044b4c:	08044bd5 	.word	0x08044bd5
 8044b50:	08044bd5 	.word	0x08044bd5
 8044b54:	08044bd5 	.word	0x08044bd5
 8044b58:	08044bd5 	.word	0x08044bd5
 8044b5c:	08044bd5 	.word	0x08044bd5
 8044b60:	08044bd5 	.word	0x08044bd5
 8044b64:	08044bdd 	.word	0x08044bdd
 8044b68:	08044bd5 	.word	0x08044bd5
 8044b6c:	08044bd5 	.word	0x08044bd5
 8044b70:	08044bd5 	.word	0x08044bd5
 8044b74:	08044bd5 	.word	0x08044bd5
 8044b78:	08044bd5 	.word	0x08044bd5
 8044b7c:	08044bd5 	.word	0x08044bd5
 8044b80:	08044bd5 	.word	0x08044bd5
 8044b84:	08044bdd 	.word	0x08044bdd
 8044b88:	08044bd5 	.word	0x08044bd5
 8044b8c:	08044bd5 	.word	0x08044bd5
 8044b90:	08044bd5 	.word	0x08044bd5
 8044b94:	08044bd5 	.word	0x08044bd5
 8044b98:	08044bd5 	.word	0x08044bd5
 8044b9c:	08044bd5 	.word	0x08044bd5
 8044ba0:	08044bd5 	.word	0x08044bd5
 8044ba4:	08044bdd 	.word	0x08044bdd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044ba8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044bac:	3308      	adds	r3, #8
 8044bae:	2101      	movs	r1, #1
 8044bb0:	4618      	mov	r0, r3
 8044bb2:	f000 ffc5 	bl	8045b40 <RCCEx_PLL2_Config>
 8044bb6:	4603      	mov	r3, r0
 8044bb8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8044bbc:	e00f      	b.n	8044bde <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8044bbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044bc2:	3328      	adds	r3, #40	@ 0x28
 8044bc4:	2101      	movs	r1, #1
 8044bc6:	4618      	mov	r0, r3
 8044bc8:	f001 f86c 	bl	8045ca4 <RCCEx_PLL3_Config>
 8044bcc:	4603      	mov	r3, r0
 8044bce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8044bd2:	e004      	b.n	8044bde <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044bd4:	2301      	movs	r3, #1
 8044bd6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044bda:	e000      	b.n	8044bde <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8044bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044bde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044be2:	2b00      	cmp	r3, #0
 8044be4:	d10b      	bne.n	8044bfe <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8044be6:	4b81      	ldr	r3, [pc, #516]	@ (8044dec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8044bea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8044bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8044bf6:	4a7d      	ldr	r2, [pc, #500]	@ (8044dec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044bf8:	430b      	orrs	r3, r1
 8044bfa:	6553      	str	r3, [r2, #84]	@ 0x54
 8044bfc:	e003      	b.n	8044c06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044bfe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044c02:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8044c06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044c0e:	f002 0302 	and.w	r3, r2, #2
 8044c12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8044c16:	2300      	movs	r3, #0
 8044c18:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8044c1c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8044c20:	460b      	mov	r3, r1
 8044c22:	4313      	orrs	r3, r2
 8044c24:	d042      	beq.n	8044cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8044c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8044c2c:	2b05      	cmp	r3, #5
 8044c2e:	d825      	bhi.n	8044c7c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8044c30:	a201      	add	r2, pc, #4	@ (adr r2, 8044c38 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8044c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044c36:	bf00      	nop
 8044c38:	08044c85 	.word	0x08044c85
 8044c3c:	08044c51 	.word	0x08044c51
 8044c40:	08044c67 	.word	0x08044c67
 8044c44:	08044c85 	.word	0x08044c85
 8044c48:	08044c85 	.word	0x08044c85
 8044c4c:	08044c85 	.word	0x08044c85
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044c50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c54:	3308      	adds	r3, #8
 8044c56:	2101      	movs	r1, #1
 8044c58:	4618      	mov	r0, r3
 8044c5a:	f000 ff71 	bl	8045b40 <RCCEx_PLL2_Config>
 8044c5e:	4603      	mov	r3, r0
 8044c60:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8044c64:	e00f      	b.n	8044c86 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8044c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c6a:	3328      	adds	r3, #40	@ 0x28
 8044c6c:	2101      	movs	r1, #1
 8044c6e:	4618      	mov	r0, r3
 8044c70:	f001 f818 	bl	8045ca4 <RCCEx_PLL3_Config>
 8044c74:	4603      	mov	r3, r0
 8044c76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8044c7a:	e004      	b.n	8044c86 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044c7c:	2301      	movs	r3, #1
 8044c7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044c82:	e000      	b.n	8044c86 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8044c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044c86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044c8a:	2b00      	cmp	r3, #0
 8044c8c:	d10a      	bne.n	8044ca4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8044c8e:	4b57      	ldr	r3, [pc, #348]	@ (8044dec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8044c92:	f023 0107 	bic.w	r1, r3, #7
 8044c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8044c9c:	4a53      	ldr	r2, [pc, #332]	@ (8044dec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044c9e:	430b      	orrs	r3, r1
 8044ca0:	6553      	str	r3, [r2, #84]	@ 0x54
 8044ca2:	e003      	b.n	8044cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044ca4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044ca8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8044cac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044cb4:	f002 0304 	and.w	r3, r2, #4
 8044cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8044cbc:	2300      	movs	r3, #0
 8044cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8044cc2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8044cc6:	460b      	mov	r3, r1
 8044cc8:	4313      	orrs	r3, r2
 8044cca:	d044      	beq.n	8044d56 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8044ccc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8044cd4:	2b05      	cmp	r3, #5
 8044cd6:	d825      	bhi.n	8044d24 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8044cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8044ce0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8044cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044cde:	bf00      	nop
 8044ce0:	08044d2d 	.word	0x08044d2d
 8044ce4:	08044cf9 	.word	0x08044cf9
 8044ce8:	08044d0f 	.word	0x08044d0f
 8044cec:	08044d2d 	.word	0x08044d2d
 8044cf0:	08044d2d 	.word	0x08044d2d
 8044cf4:	08044d2d 	.word	0x08044d2d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044cf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044cfc:	3308      	adds	r3, #8
 8044cfe:	2101      	movs	r1, #1
 8044d00:	4618      	mov	r0, r3
 8044d02:	f000 ff1d 	bl	8045b40 <RCCEx_PLL2_Config>
 8044d06:	4603      	mov	r3, r0
 8044d08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8044d0c:	e00f      	b.n	8044d2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8044d0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044d12:	3328      	adds	r3, #40	@ 0x28
 8044d14:	2101      	movs	r1, #1
 8044d16:	4618      	mov	r0, r3
 8044d18:	f000 ffc4 	bl	8045ca4 <RCCEx_PLL3_Config>
 8044d1c:	4603      	mov	r3, r0
 8044d1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8044d22:	e004      	b.n	8044d2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044d24:	2301      	movs	r3, #1
 8044d26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044d2a:	e000      	b.n	8044d2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8044d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044d2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044d32:	2b00      	cmp	r3, #0
 8044d34:	d10b      	bne.n	8044d4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8044d36:	4b2d      	ldr	r3, [pc, #180]	@ (8044dec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044d3a:	f023 0107 	bic.w	r1, r3, #7
 8044d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044d42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8044d46:	4a29      	ldr	r2, [pc, #164]	@ (8044dec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044d48:	430b      	orrs	r3, r1
 8044d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8044d4c:	e003      	b.n	8044d56 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044d4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044d52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8044d56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044d5e:	f002 0320 	and.w	r3, r2, #32
 8044d62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8044d66:	2300      	movs	r3, #0
 8044d68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8044d6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8044d70:	460b      	mov	r3, r1
 8044d72:	4313      	orrs	r3, r2
 8044d74:	d057      	beq.n	8044e26 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8044d76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8044d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8044d82:	d035      	beq.n	8044df0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8044d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8044d88:	d82c      	bhi.n	8044de4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8044d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8044d8e:	d031      	beq.n	8044df4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8044d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8044d94:	d826      	bhi.n	8044de4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8044d96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8044d9a:	d02d      	beq.n	8044df8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8044d9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8044da0:	d820      	bhi.n	8044de4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8044da2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044da6:	d012      	beq.n	8044dce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8044da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044dac:	d81a      	bhi.n	8044de4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8044dae:	2b00      	cmp	r3, #0
 8044db0:	d024      	beq.n	8044dfc <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8044db2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8044db6:	d115      	bne.n	8044de4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044db8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044dbc:	3308      	adds	r3, #8
 8044dbe:	2100      	movs	r1, #0
 8044dc0:	4618      	mov	r0, r3
 8044dc2:	f000 febd 	bl	8045b40 <RCCEx_PLL2_Config>
 8044dc6:	4603      	mov	r3, r0
 8044dc8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8044dcc:	e017      	b.n	8044dfe <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044dce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044dd2:	3328      	adds	r3, #40	@ 0x28
 8044dd4:	2102      	movs	r1, #2
 8044dd6:	4618      	mov	r0, r3
 8044dd8:	f000 ff64 	bl	8045ca4 <RCCEx_PLL3_Config>
 8044ddc:	4603      	mov	r3, r0
 8044dde:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8044de2:	e00c      	b.n	8044dfe <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044de4:	2301      	movs	r3, #1
 8044de6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044dea:	e008      	b.n	8044dfe <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8044dec:	58024400 	.word	0x58024400
        break;
 8044df0:	bf00      	nop
 8044df2:	e004      	b.n	8044dfe <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8044df4:	bf00      	nop
 8044df6:	e002      	b.n	8044dfe <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8044df8:	bf00      	nop
 8044dfa:	e000      	b.n	8044dfe <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8044dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044dfe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044e02:	2b00      	cmp	r3, #0
 8044e04:	d10b      	bne.n	8044e1e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8044e06:	4bc2      	ldr	r3, [pc, #776]	@ (8045110 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8044e0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8044e0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8044e16:	4abe      	ldr	r2, [pc, #760]	@ (8045110 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044e18:	430b      	orrs	r3, r1
 8044e1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8044e1c:	e003      	b.n	8044e26 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044e1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044e22:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8044e26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044e2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8044e32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8044e36:	2300      	movs	r3, #0
 8044e38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8044e3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8044e40:	460b      	mov	r3, r1
 8044e42:	4313      	orrs	r3, r2
 8044e44:	d055      	beq.n	8044ef2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8044e46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044e4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8044e4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8044e52:	d033      	beq.n	8044ebc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8044e54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8044e58:	d82c      	bhi.n	8044eb4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8044e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8044e5e:	d02f      	beq.n	8044ec0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8044e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8044e64:	d826      	bhi.n	8044eb4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8044e66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8044e6a:	d02b      	beq.n	8044ec4 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8044e6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8044e70:	d820      	bhi.n	8044eb4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8044e72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8044e76:	d012      	beq.n	8044e9e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8044e78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8044e7c:	d81a      	bhi.n	8044eb4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8044e7e:	2b00      	cmp	r3, #0
 8044e80:	d022      	beq.n	8044ec8 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8044e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8044e86:	d115      	bne.n	8044eb4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044e88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044e8c:	3308      	adds	r3, #8
 8044e8e:	2100      	movs	r1, #0
 8044e90:	4618      	mov	r0, r3
 8044e92:	f000 fe55 	bl	8045b40 <RCCEx_PLL2_Config>
 8044e96:	4603      	mov	r3, r0
 8044e98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8044e9c:	e015      	b.n	8044eca <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044e9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ea2:	3328      	adds	r3, #40	@ 0x28
 8044ea4:	2102      	movs	r1, #2
 8044ea6:	4618      	mov	r0, r3
 8044ea8:	f000 fefc 	bl	8045ca4 <RCCEx_PLL3_Config>
 8044eac:	4603      	mov	r3, r0
 8044eae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8044eb2:	e00a      	b.n	8044eca <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044eb4:	2301      	movs	r3, #1
 8044eb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044eba:	e006      	b.n	8044eca <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8044ebc:	bf00      	nop
 8044ebe:	e004      	b.n	8044eca <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8044ec0:	bf00      	nop
 8044ec2:	e002      	b.n	8044eca <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8044ec4:	bf00      	nop
 8044ec6:	e000      	b.n	8044eca <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8044ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044eca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044ece:	2b00      	cmp	r3, #0
 8044ed0:	d10b      	bne.n	8044eea <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8044ed2:	4b8f      	ldr	r3, [pc, #572]	@ (8045110 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044ed6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8044eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ede:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8044ee2:	4a8b      	ldr	r2, [pc, #556]	@ (8045110 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044ee4:	430b      	orrs	r3, r1
 8044ee6:	6593      	str	r3, [r2, #88]	@ 0x58
 8044ee8:	e003      	b.n	8044ef2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044eea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044eee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8044ef2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044efa:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8044efe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8044f02:	2300      	movs	r3, #0
 8044f04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8044f08:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8044f0c:	460b      	mov	r3, r1
 8044f0e:	4313      	orrs	r3, r2
 8044f10:	d055      	beq.n	8044fbe <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8044f12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8044f1a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8044f1e:	d033      	beq.n	8044f88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8044f20:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8044f24:	d82c      	bhi.n	8044f80 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8044f26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8044f2a:	d02f      	beq.n	8044f8c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8044f2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8044f30:	d826      	bhi.n	8044f80 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8044f32:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8044f36:	d02b      	beq.n	8044f90 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8044f38:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8044f3c:	d820      	bhi.n	8044f80 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8044f3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8044f42:	d012      	beq.n	8044f6a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8044f44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8044f48:	d81a      	bhi.n	8044f80 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8044f4a:	2b00      	cmp	r3, #0
 8044f4c:	d022      	beq.n	8044f94 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8044f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8044f52:	d115      	bne.n	8044f80 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044f54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f58:	3308      	adds	r3, #8
 8044f5a:	2100      	movs	r1, #0
 8044f5c:	4618      	mov	r0, r3
 8044f5e:	f000 fdef 	bl	8045b40 <RCCEx_PLL2_Config>
 8044f62:	4603      	mov	r3, r0
 8044f64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8044f68:	e015      	b.n	8044f96 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044f6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f6e:	3328      	adds	r3, #40	@ 0x28
 8044f70:	2102      	movs	r1, #2
 8044f72:	4618      	mov	r0, r3
 8044f74:	f000 fe96 	bl	8045ca4 <RCCEx_PLL3_Config>
 8044f78:	4603      	mov	r3, r0
 8044f7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8044f7e:	e00a      	b.n	8044f96 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044f80:	2301      	movs	r3, #1
 8044f82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044f86:	e006      	b.n	8044f96 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8044f88:	bf00      	nop
 8044f8a:	e004      	b.n	8044f96 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8044f8c:	bf00      	nop
 8044f8e:	e002      	b.n	8044f96 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8044f90:	bf00      	nop
 8044f92:	e000      	b.n	8044f96 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8044f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044f96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044f9a:	2b00      	cmp	r3, #0
 8044f9c:	d10b      	bne.n	8044fb6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8044f9e:	4b5c      	ldr	r3, [pc, #368]	@ (8045110 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044fa2:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8044fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044faa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8044fae:	4a58      	ldr	r2, [pc, #352]	@ (8045110 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044fb0:	430b      	orrs	r3, r1
 8044fb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8044fb4:	e003      	b.n	8044fbe <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044fb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044fba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8044fbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044fc6:	f002 0308 	and.w	r3, r2, #8
 8044fca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8044fce:	2300      	movs	r3, #0
 8044fd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8044fd4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8044fd8:	460b      	mov	r3, r1
 8044fda:	4313      	orrs	r3, r2
 8044fdc:	d01e      	beq.n	804501c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8044fde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8044fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8044fea:	d10c      	bne.n	8045006 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8044fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ff0:	3328      	adds	r3, #40	@ 0x28
 8044ff2:	2102      	movs	r1, #2
 8044ff4:	4618      	mov	r0, r3
 8044ff6:	f000 fe55 	bl	8045ca4 <RCCEx_PLL3_Config>
 8044ffa:	4603      	mov	r3, r0
 8044ffc:	2b00      	cmp	r3, #0
 8044ffe:	d002      	beq.n	8045006 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8045000:	2301      	movs	r3, #1
 8045002:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8045006:	4b42      	ldr	r3, [pc, #264]	@ (8045110 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8045008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804500a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 804500e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8045016:	4a3e      	ldr	r2, [pc, #248]	@ (8045110 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8045018:	430b      	orrs	r3, r1
 804501a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 804501c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045024:	f002 0310 	and.w	r3, r2, #16
 8045028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 804502c:	2300      	movs	r3, #0
 804502e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8045032:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8045036:	460b      	mov	r3, r1
 8045038:	4313      	orrs	r3, r2
 804503a:	d01e      	beq.n	804507a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 804503c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045040:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8045044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8045048:	d10c      	bne.n	8045064 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 804504a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804504e:	3328      	adds	r3, #40	@ 0x28
 8045050:	2102      	movs	r1, #2
 8045052:	4618      	mov	r0, r3
 8045054:	f000 fe26 	bl	8045ca4 <RCCEx_PLL3_Config>
 8045058:	4603      	mov	r3, r0
 804505a:	2b00      	cmp	r3, #0
 804505c:	d002      	beq.n	8045064 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 804505e:	2301      	movs	r3, #1
 8045060:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8045064:	4b2a      	ldr	r3, [pc, #168]	@ (8045110 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8045066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8045068:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 804506c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045070:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8045074:	4a26      	ldr	r2, [pc, #152]	@ (8045110 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8045076:	430b      	orrs	r3, r1
 8045078:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 804507a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045082:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8045086:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 804508a:	2300      	movs	r3, #0
 804508c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8045090:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8045094:	460b      	mov	r3, r1
 8045096:	4313      	orrs	r3, r2
 8045098:	d040      	beq.n	804511c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 804509a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804509e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80450a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80450a6:	d022      	beq.n	80450ee <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80450a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80450ac:	d81b      	bhi.n	80450e6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80450ae:	2b00      	cmp	r3, #0
 80450b0:	d003      	beq.n	80450ba <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80450b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80450b6:	d00b      	beq.n	80450d0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80450b8:	e015      	b.n	80450e6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80450ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80450be:	3308      	adds	r3, #8
 80450c0:	2100      	movs	r1, #0
 80450c2:	4618      	mov	r0, r3
 80450c4:	f000 fd3c 	bl	8045b40 <RCCEx_PLL2_Config>
 80450c8:	4603      	mov	r3, r0
 80450ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80450ce:	e00f      	b.n	80450f0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80450d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80450d4:	3328      	adds	r3, #40	@ 0x28
 80450d6:	2102      	movs	r1, #2
 80450d8:	4618      	mov	r0, r3
 80450da:	f000 fde3 	bl	8045ca4 <RCCEx_PLL3_Config>
 80450de:	4603      	mov	r3, r0
 80450e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80450e4:	e004      	b.n	80450f0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80450e6:	2301      	movs	r3, #1
 80450e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80450ec:	e000      	b.n	80450f0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80450ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80450f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80450f4:	2b00      	cmp	r3, #0
 80450f6:	d10d      	bne.n	8045114 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80450f8:	4b05      	ldr	r3, [pc, #20]	@ (8045110 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80450fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80450fc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8045100:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045104:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8045108:	4a01      	ldr	r2, [pc, #4]	@ (8045110 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 804510a:	430b      	orrs	r3, r1
 804510c:	6593      	str	r3, [r2, #88]	@ 0x58
 804510e:	e005      	b.n	804511c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8045110:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8045114:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045118:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 804511c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045124:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8045128:	67bb      	str	r3, [r7, #120]	@ 0x78
 804512a:	2300      	movs	r3, #0
 804512c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 804512e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8045132:	460b      	mov	r3, r1
 8045134:	4313      	orrs	r3, r2
 8045136:	d03b      	beq.n	80451b0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8045138:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804513c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8045140:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8045144:	d01f      	beq.n	8045186 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8045146:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 804514a:	d818      	bhi.n	804517e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 804514c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8045150:	d003      	beq.n	804515a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8045152:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8045156:	d007      	beq.n	8045168 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8045158:	e011      	b.n	804517e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804515a:	4b64      	ldr	r3, [pc, #400]	@ (80452ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 804515c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804515e:	4a63      	ldr	r2, [pc, #396]	@ (80452ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8045164:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8045166:	e00f      	b.n	8045188 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8045168:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804516c:	3328      	adds	r3, #40	@ 0x28
 804516e:	2101      	movs	r1, #1
 8045170:	4618      	mov	r0, r3
 8045172:	f000 fd97 	bl	8045ca4 <RCCEx_PLL3_Config>
 8045176:	4603      	mov	r3, r0
 8045178:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 804517c:	e004      	b.n	8045188 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804517e:	2301      	movs	r3, #1
 8045180:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8045184:	e000      	b.n	8045188 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8045186:	bf00      	nop
    }

    if (ret == HAL_OK)
 8045188:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804518c:	2b00      	cmp	r3, #0
 804518e:	d10b      	bne.n	80451a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8045190:	4b56      	ldr	r3, [pc, #344]	@ (80452ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045194:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8045198:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804519c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80451a0:	4a52      	ldr	r2, [pc, #328]	@ (80452ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80451a2:	430b      	orrs	r3, r1
 80451a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80451a6:	e003      	b.n	80451b0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80451a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80451ac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80451b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80451b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80451b8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80451bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80451be:	2300      	movs	r3, #0
 80451c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80451c2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80451c6:	460b      	mov	r3, r1
 80451c8:	4313      	orrs	r3, r2
 80451ca:	d031      	beq.n	8045230 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80451cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80451d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80451d2:	2b00      	cmp	r3, #0
 80451d4:	d003      	beq.n	80451de <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80451d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80451da:	d007      	beq.n	80451ec <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80451dc:	e011      	b.n	8045202 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80451de:	4b43      	ldr	r3, [pc, #268]	@ (80452ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80451e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80451e2:	4a42      	ldr	r2, [pc, #264]	@ (80452ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80451e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80451e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80451ea:	e00e      	b.n	804520a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80451ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80451f0:	3308      	adds	r3, #8
 80451f2:	2102      	movs	r1, #2
 80451f4:	4618      	mov	r0, r3
 80451f6:	f000 fca3 	bl	8045b40 <RCCEx_PLL2_Config>
 80451fa:	4603      	mov	r3, r0
 80451fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8045200:	e003      	b.n	804520a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8045202:	2301      	movs	r3, #1
 8045204:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8045208:	bf00      	nop
    }

    if (ret == HAL_OK)
 804520a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804520e:	2b00      	cmp	r3, #0
 8045210:	d10a      	bne.n	8045228 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8045212:	4b36      	ldr	r3, [pc, #216]	@ (80452ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8045216:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 804521a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804521e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045220:	4a32      	ldr	r2, [pc, #200]	@ (80452ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045222:	430b      	orrs	r3, r1
 8045224:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8045226:	e003      	b.n	8045230 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8045228:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804522c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8045230:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045238:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 804523c:	66bb      	str	r3, [r7, #104]	@ 0x68
 804523e:	2300      	movs	r3, #0
 8045240:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8045242:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8045246:	460b      	mov	r3, r1
 8045248:	4313      	orrs	r3, r2
 804524a:	d00c      	beq.n	8045266 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 804524c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045250:	3328      	adds	r3, #40	@ 0x28
 8045252:	2102      	movs	r1, #2
 8045254:	4618      	mov	r0, r3
 8045256:	f000 fd25 	bl	8045ca4 <RCCEx_PLL3_Config>
 804525a:	4603      	mov	r3, r0
 804525c:	2b00      	cmp	r3, #0
 804525e:	d002      	beq.n	8045266 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8045260:	2301      	movs	r3, #1
 8045262:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8045266:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804526e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8045272:	663b      	str	r3, [r7, #96]	@ 0x60
 8045274:	2300      	movs	r3, #0
 8045276:	667b      	str	r3, [r7, #100]	@ 0x64
 8045278:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 804527c:	460b      	mov	r3, r1
 804527e:	4313      	orrs	r3, r2
 8045280:	d03a      	beq.n	80452f8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8045282:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 804528a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 804528e:	d018      	beq.n	80452c2 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8045290:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8045294:	d811      	bhi.n	80452ba <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8045296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 804529a:	d014      	beq.n	80452c6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 804529c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80452a0:	d80b      	bhi.n	80452ba <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80452a2:	2b00      	cmp	r3, #0
 80452a4:	d011      	beq.n	80452ca <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80452a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80452aa:	d106      	bne.n	80452ba <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80452ac:	4b0f      	ldr	r3, [pc, #60]	@ (80452ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80452ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80452b0:	4a0e      	ldr	r2, [pc, #56]	@ (80452ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80452b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80452b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80452b8:	e008      	b.n	80452cc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80452ba:	2301      	movs	r3, #1
 80452bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80452c0:	e004      	b.n	80452cc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80452c2:	bf00      	nop
 80452c4:	e002      	b.n	80452cc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80452c6:	bf00      	nop
 80452c8:	e000      	b.n	80452cc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80452ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80452cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80452d0:	2b00      	cmp	r3, #0
 80452d2:	d10d      	bne.n	80452f0 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80452d4:	4b05      	ldr	r3, [pc, #20]	@ (80452ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80452d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80452d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80452dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80452e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80452e4:	4a01      	ldr	r2, [pc, #4]	@ (80452ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80452e6:	430b      	orrs	r3, r1
 80452e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80452ea:	e005      	b.n	80452f8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80452ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80452f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80452f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80452f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80452fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045300:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8045304:	65bb      	str	r3, [r7, #88]	@ 0x58
 8045306:	2300      	movs	r3, #0
 8045308:	65fb      	str	r3, [r7, #92]	@ 0x5c
 804530a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 804530e:	460b      	mov	r3, r1
 8045310:	4313      	orrs	r3, r2
 8045312:	d009      	beq.n	8045328 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8045314:	4baa      	ldr	r3, [pc, #680]	@ (80455c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8045318:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 804531c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8045322:	4aa7      	ldr	r2, [pc, #668]	@ (80455c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045324:	430b      	orrs	r3, r1
 8045326:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8045328:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045330:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8045334:	653b      	str	r3, [r7, #80]	@ 0x50
 8045336:	2300      	movs	r3, #0
 8045338:	657b      	str	r3, [r7, #84]	@ 0x54
 804533a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 804533e:	460b      	mov	r3, r1
 8045340:	4313      	orrs	r3, r2
 8045342:	d00a      	beq.n	804535a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8045344:	4b9e      	ldr	r3, [pc, #632]	@ (80455c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045346:	691b      	ldr	r3, [r3, #16]
 8045348:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 804534c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045350:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8045354:	4a9a      	ldr	r2, [pc, #616]	@ (80455c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045356:	430b      	orrs	r3, r1
 8045358:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 804535a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045362:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8045366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8045368:	2300      	movs	r3, #0
 804536a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 804536c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8045370:	460b      	mov	r3, r1
 8045372:	4313      	orrs	r3, r2
 8045374:	d009      	beq.n	804538a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8045376:	4b92      	ldr	r3, [pc, #584]	@ (80455c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804537a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 804537e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8045384:	4a8e      	ldr	r2, [pc, #568]	@ (80455c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045386:	430b      	orrs	r3, r1
 8045388:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 804538a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045392:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8045396:	643b      	str	r3, [r7, #64]	@ 0x40
 8045398:	2300      	movs	r3, #0
 804539a:	647b      	str	r3, [r7, #68]	@ 0x44
 804539c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80453a0:	460b      	mov	r3, r1
 80453a2:	4313      	orrs	r3, r2
 80453a4:	d00e      	beq.n	80453c4 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80453a6:	4b86      	ldr	r3, [pc, #536]	@ (80455c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80453a8:	691b      	ldr	r3, [r3, #16]
 80453aa:	4a85      	ldr	r2, [pc, #532]	@ (80455c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80453ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80453b0:	6113      	str	r3, [r2, #16]
 80453b2:	4b83      	ldr	r3, [pc, #524]	@ (80455c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80453b4:	6919      	ldr	r1, [r3, #16]
 80453b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80453ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80453be:	4a80      	ldr	r2, [pc, #512]	@ (80455c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80453c0:	430b      	orrs	r3, r1
 80453c2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80453c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80453c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80453cc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80453d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80453d2:	2300      	movs	r3, #0
 80453d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80453d6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80453da:	460b      	mov	r3, r1
 80453dc:	4313      	orrs	r3, r2
 80453de:	d009      	beq.n	80453f4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80453e0:	4b77      	ldr	r3, [pc, #476]	@ (80455c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80453e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80453e4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80453e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80453ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80453ee:	4a74      	ldr	r2, [pc, #464]	@ (80455c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80453f0:	430b      	orrs	r3, r1
 80453f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80453f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80453f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80453fc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8045400:	633b      	str	r3, [r7, #48]	@ 0x30
 8045402:	2300      	movs	r3, #0
 8045404:	637b      	str	r3, [r7, #52]	@ 0x34
 8045406:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 804540a:	460b      	mov	r3, r1
 804540c:	4313      	orrs	r3, r2
 804540e:	d00a      	beq.n	8045426 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8045410:	4b6b      	ldr	r3, [pc, #428]	@ (80455c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045414:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8045418:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804541c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8045420:	4a67      	ldr	r2, [pc, #412]	@ (80455c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045422:	430b      	orrs	r3, r1
 8045424:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8045426:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804542e:	2100      	movs	r1, #0
 8045430:	62b9      	str	r1, [r7, #40]	@ 0x28
 8045432:	f003 0301 	and.w	r3, r3, #1
 8045436:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8045438:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 804543c:	460b      	mov	r3, r1
 804543e:	4313      	orrs	r3, r2
 8045440:	d011      	beq.n	8045466 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8045442:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045446:	3308      	adds	r3, #8
 8045448:	2100      	movs	r1, #0
 804544a:	4618      	mov	r0, r3
 804544c:	f000 fb78 	bl	8045b40 <RCCEx_PLL2_Config>
 8045450:	4603      	mov	r3, r0
 8045452:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045456:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804545a:	2b00      	cmp	r3, #0
 804545c:	d003      	beq.n	8045466 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804545e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045462:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8045466:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804546a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804546e:	2100      	movs	r1, #0
 8045470:	6239      	str	r1, [r7, #32]
 8045472:	f003 0302 	and.w	r3, r3, #2
 8045476:	627b      	str	r3, [r7, #36]	@ 0x24
 8045478:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 804547c:	460b      	mov	r3, r1
 804547e:	4313      	orrs	r3, r2
 8045480:	d011      	beq.n	80454a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8045482:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045486:	3308      	adds	r3, #8
 8045488:	2101      	movs	r1, #1
 804548a:	4618      	mov	r0, r3
 804548c:	f000 fb58 	bl	8045b40 <RCCEx_PLL2_Config>
 8045490:	4603      	mov	r3, r0
 8045492:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045496:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804549a:	2b00      	cmp	r3, #0
 804549c:	d003      	beq.n	80454a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804549e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80454a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80454a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80454aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80454ae:	2100      	movs	r1, #0
 80454b0:	61b9      	str	r1, [r7, #24]
 80454b2:	f003 0304 	and.w	r3, r3, #4
 80454b6:	61fb      	str	r3, [r7, #28]
 80454b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80454bc:	460b      	mov	r3, r1
 80454be:	4313      	orrs	r3, r2
 80454c0:	d011      	beq.n	80454e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80454c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80454c6:	3308      	adds	r3, #8
 80454c8:	2102      	movs	r1, #2
 80454ca:	4618      	mov	r0, r3
 80454cc:	f000 fb38 	bl	8045b40 <RCCEx_PLL2_Config>
 80454d0:	4603      	mov	r3, r0
 80454d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80454d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80454da:	2b00      	cmp	r3, #0
 80454dc:	d003      	beq.n	80454e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80454de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80454e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80454e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80454ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80454ee:	2100      	movs	r1, #0
 80454f0:	6139      	str	r1, [r7, #16]
 80454f2:	f003 0308 	and.w	r3, r3, #8
 80454f6:	617b      	str	r3, [r7, #20]
 80454f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80454fc:	460b      	mov	r3, r1
 80454fe:	4313      	orrs	r3, r2
 8045500:	d011      	beq.n	8045526 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8045502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045506:	3328      	adds	r3, #40	@ 0x28
 8045508:	2100      	movs	r1, #0
 804550a:	4618      	mov	r0, r3
 804550c:	f000 fbca 	bl	8045ca4 <RCCEx_PLL3_Config>
 8045510:	4603      	mov	r3, r0
 8045512:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8045516:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804551a:	2b00      	cmp	r3, #0
 804551c:	d003      	beq.n	8045526 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804551e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045522:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8045526:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804552e:	2100      	movs	r1, #0
 8045530:	60b9      	str	r1, [r7, #8]
 8045532:	f003 0310 	and.w	r3, r3, #16
 8045536:	60fb      	str	r3, [r7, #12]
 8045538:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 804553c:	460b      	mov	r3, r1
 804553e:	4313      	orrs	r3, r2
 8045540:	d011      	beq.n	8045566 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8045542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045546:	3328      	adds	r3, #40	@ 0x28
 8045548:	2101      	movs	r1, #1
 804554a:	4618      	mov	r0, r3
 804554c:	f000 fbaa 	bl	8045ca4 <RCCEx_PLL3_Config>
 8045550:	4603      	mov	r3, r0
 8045552:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045556:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804555a:	2b00      	cmp	r3, #0
 804555c:	d003      	beq.n	8045566 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804555e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045562:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8045566:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804556e:	2100      	movs	r1, #0
 8045570:	6039      	str	r1, [r7, #0]
 8045572:	f003 0320 	and.w	r3, r3, #32
 8045576:	607b      	str	r3, [r7, #4]
 8045578:	e9d7 1200 	ldrd	r1, r2, [r7]
 804557c:	460b      	mov	r3, r1
 804557e:	4313      	orrs	r3, r2
 8045580:	d011      	beq.n	80455a6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8045582:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045586:	3328      	adds	r3, #40	@ 0x28
 8045588:	2102      	movs	r1, #2
 804558a:	4618      	mov	r0, r3
 804558c:	f000 fb8a 	bl	8045ca4 <RCCEx_PLL3_Config>
 8045590:	4603      	mov	r3, r0
 8045592:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045596:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804559a:	2b00      	cmp	r3, #0
 804559c:	d003      	beq.n	80455a6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804559e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80455a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80455a6:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80455aa:	2b00      	cmp	r3, #0
 80455ac:	d101      	bne.n	80455b2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80455ae:	2300      	movs	r3, #0
 80455b0:	e000      	b.n	80455b4 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80455b2:	2301      	movs	r3, #1
}
 80455b4:	4618      	mov	r0, r3
 80455b6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80455ba:	46bd      	mov	sp, r7
 80455bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80455c0:	58024400 	.word	0x58024400

080455c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80455c4:	b580      	push	{r7, lr}
 80455c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80455c8:	f7fe fd56 	bl	8044078 <HAL_RCC_GetHCLKFreq>
 80455cc:	4602      	mov	r2, r0
 80455ce:	4b06      	ldr	r3, [pc, #24]	@ (80455e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80455d0:	6a1b      	ldr	r3, [r3, #32]
 80455d2:	091b      	lsrs	r3, r3, #4
 80455d4:	f003 0307 	and.w	r3, r3, #7
 80455d8:	4904      	ldr	r1, [pc, #16]	@ (80455ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80455da:	5ccb      	ldrb	r3, [r1, r3]
 80455dc:	f003 031f 	and.w	r3, r3, #31
 80455e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80455e4:	4618      	mov	r0, r3
 80455e6:	bd80      	pop	{r7, pc}
 80455e8:	58024400 	.word	0x58024400
 80455ec:	0804ba30 	.word	0x0804ba30

080455f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80455f0:	b480      	push	{r7}
 80455f2:	b089      	sub	sp, #36	@ 0x24
 80455f4:	af00      	add	r7, sp, #0
 80455f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80455f8:	4ba1      	ldr	r3, [pc, #644]	@ (8045880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80455fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80455fc:	f003 0303 	and.w	r3, r3, #3
 8045600:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8045602:	4b9f      	ldr	r3, [pc, #636]	@ (8045880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045606:	0b1b      	lsrs	r3, r3, #12
 8045608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 804560c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 804560e:	4b9c      	ldr	r3, [pc, #624]	@ (8045880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045612:	091b      	lsrs	r3, r3, #4
 8045614:	f003 0301 	and.w	r3, r3, #1
 8045618:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 804561a:	4b99      	ldr	r3, [pc, #612]	@ (8045880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 804561c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 804561e:	08db      	lsrs	r3, r3, #3
 8045620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8045624:	693a      	ldr	r2, [r7, #16]
 8045626:	fb02 f303 	mul.w	r3, r2, r3
 804562a:	ee07 3a90 	vmov	s15, r3
 804562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045632:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8045636:	697b      	ldr	r3, [r7, #20]
 8045638:	2b00      	cmp	r3, #0
 804563a:	f000 8111 	beq.w	8045860 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 804563e:	69bb      	ldr	r3, [r7, #24]
 8045640:	2b02      	cmp	r3, #2
 8045642:	f000 8083 	beq.w	804574c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8045646:	69bb      	ldr	r3, [r7, #24]
 8045648:	2b02      	cmp	r3, #2
 804564a:	f200 80a1 	bhi.w	8045790 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 804564e:	69bb      	ldr	r3, [r7, #24]
 8045650:	2b00      	cmp	r3, #0
 8045652:	d003      	beq.n	804565c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8045654:	69bb      	ldr	r3, [r7, #24]
 8045656:	2b01      	cmp	r3, #1
 8045658:	d056      	beq.n	8045708 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 804565a:	e099      	b.n	8045790 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 804565c:	4b88      	ldr	r3, [pc, #544]	@ (8045880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 804565e:	681b      	ldr	r3, [r3, #0]
 8045660:	f003 0320 	and.w	r3, r3, #32
 8045664:	2b00      	cmp	r3, #0
 8045666:	d02d      	beq.n	80456c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8045668:	4b85      	ldr	r3, [pc, #532]	@ (8045880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 804566a:	681b      	ldr	r3, [r3, #0]
 804566c:	08db      	lsrs	r3, r3, #3
 804566e:	f003 0303 	and.w	r3, r3, #3
 8045672:	4a84      	ldr	r2, [pc, #528]	@ (8045884 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8045674:	fa22 f303 	lsr.w	r3, r2, r3
 8045678:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 804567a:	68bb      	ldr	r3, [r7, #8]
 804567c:	ee07 3a90 	vmov	s15, r3
 8045680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8045684:	697b      	ldr	r3, [r7, #20]
 8045686:	ee07 3a90 	vmov	s15, r3
 804568a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804568e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8045692:	4b7b      	ldr	r3, [pc, #492]	@ (8045880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804569a:	ee07 3a90 	vmov	s15, r3
 804569e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80456a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80456a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8045888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80456aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80456ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80456b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80456b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80456ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80456be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80456c2:	e087      	b.n	80457d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80456c4:	697b      	ldr	r3, [r7, #20]
 80456c6:	ee07 3a90 	vmov	s15, r3
 80456ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80456ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 804588c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80456d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80456d6:	4b6a      	ldr	r3, [pc, #424]	@ (8045880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80456d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80456da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80456de:	ee07 3a90 	vmov	s15, r3
 80456e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80456e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80456ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8045888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80456ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80456f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80456f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80456fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80456fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8045706:	e065      	b.n	80457d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8045708:	697b      	ldr	r3, [r7, #20]
 804570a:	ee07 3a90 	vmov	s15, r3
 804570e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045712:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8045890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8045716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804571a:	4b59      	ldr	r3, [pc, #356]	@ (8045880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 804571c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804571e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045722:	ee07 3a90 	vmov	s15, r3
 8045726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804572a:	ed97 6a03 	vldr	s12, [r7, #12]
 804572e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8045888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8045732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8045736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804573a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 804573e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 804574a:	e043      	b.n	80457d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 804574c:	697b      	ldr	r3, [r7, #20]
 804574e:	ee07 3a90 	vmov	s15, r3
 8045752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045756:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8045894 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 804575a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804575e:	4b48      	ldr	r3, [pc, #288]	@ (8045880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045766:	ee07 3a90 	vmov	s15, r3
 804576a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804576e:	ed97 6a03 	vldr	s12, [r7, #12]
 8045772:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8045888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8045776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804577a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804577e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8045782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045786:	ee67 7a27 	vmul.f32	s15, s14, s15
 804578a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 804578e:	e021      	b.n	80457d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8045790:	697b      	ldr	r3, [r7, #20]
 8045792:	ee07 3a90 	vmov	s15, r3
 8045796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804579a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8045890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 804579e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80457a2:	4b37      	ldr	r3, [pc, #220]	@ (8045880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80457a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80457a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80457aa:	ee07 3a90 	vmov	s15, r3
 80457ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80457b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80457b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8045888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80457ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80457be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80457c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80457c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80457ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80457ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80457d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80457d4:	4b2a      	ldr	r3, [pc, #168]	@ (8045880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80457d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80457d8:	0a5b      	lsrs	r3, r3, #9
 80457da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80457de:	ee07 3a90 	vmov	s15, r3
 80457e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80457e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80457ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80457ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80457f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80457f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80457fa:	ee17 2a90 	vmov	r2, s15
 80457fe:	687b      	ldr	r3, [r7, #4]
 8045800:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8045802:	4b1f      	ldr	r3, [pc, #124]	@ (8045880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045806:	0c1b      	lsrs	r3, r3, #16
 8045808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 804580c:	ee07 3a90 	vmov	s15, r3
 8045810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045814:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8045818:	ee37 7a87 	vadd.f32	s14, s15, s14
 804581c:	edd7 6a07 	vldr	s13, [r7, #28]
 8045820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8045824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8045828:	ee17 2a90 	vmov	r2, s15
 804582c:	687b      	ldr	r3, [r7, #4]
 804582e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8045830:	4b13      	ldr	r3, [pc, #76]	@ (8045880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045834:	0e1b      	lsrs	r3, r3, #24
 8045836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 804583a:	ee07 3a90 	vmov	s15, r3
 804583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045842:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8045846:	ee37 7a87 	vadd.f32	s14, s15, s14
 804584a:	edd7 6a07 	vldr	s13, [r7, #28]
 804584e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8045852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8045856:	ee17 2a90 	vmov	r2, s15
 804585a:	687b      	ldr	r3, [r7, #4]
 804585c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 804585e:	e008      	b.n	8045872 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8045860:	687b      	ldr	r3, [r7, #4]
 8045862:	2200      	movs	r2, #0
 8045864:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8045866:	687b      	ldr	r3, [r7, #4]
 8045868:	2200      	movs	r2, #0
 804586a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 804586c:	687b      	ldr	r3, [r7, #4]
 804586e:	2200      	movs	r2, #0
 8045870:	609a      	str	r2, [r3, #8]
}
 8045872:	bf00      	nop
 8045874:	3724      	adds	r7, #36	@ 0x24
 8045876:	46bd      	mov	sp, r7
 8045878:	f85d 7b04 	ldr.w	r7, [sp], #4
 804587c:	4770      	bx	lr
 804587e:	bf00      	nop
 8045880:	58024400 	.word	0x58024400
 8045884:	03d09000 	.word	0x03d09000
 8045888:	46000000 	.word	0x46000000
 804588c:	4c742400 	.word	0x4c742400
 8045890:	4a742400 	.word	0x4a742400
 8045894:	4bbebc20 	.word	0x4bbebc20

08045898 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8045898:	b480      	push	{r7}
 804589a:	b089      	sub	sp, #36	@ 0x24
 804589c:	af00      	add	r7, sp, #0
 804589e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80458a0:	4ba1      	ldr	r3, [pc, #644]	@ (8045b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80458a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80458a4:	f003 0303 	and.w	r3, r3, #3
 80458a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80458aa:	4b9f      	ldr	r3, [pc, #636]	@ (8045b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80458ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80458ae:	0d1b      	lsrs	r3, r3, #20
 80458b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80458b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80458b6:	4b9c      	ldr	r3, [pc, #624]	@ (8045b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80458b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80458ba:	0a1b      	lsrs	r3, r3, #8
 80458bc:	f003 0301 	and.w	r3, r3, #1
 80458c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80458c2:	4b99      	ldr	r3, [pc, #612]	@ (8045b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80458c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80458c6:	08db      	lsrs	r3, r3, #3
 80458c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80458cc:	693a      	ldr	r2, [r7, #16]
 80458ce:	fb02 f303 	mul.w	r3, r2, r3
 80458d2:	ee07 3a90 	vmov	s15, r3
 80458d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80458da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80458de:	697b      	ldr	r3, [r7, #20]
 80458e0:	2b00      	cmp	r3, #0
 80458e2:	f000 8111 	beq.w	8045b08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80458e6:	69bb      	ldr	r3, [r7, #24]
 80458e8:	2b02      	cmp	r3, #2
 80458ea:	f000 8083 	beq.w	80459f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80458ee:	69bb      	ldr	r3, [r7, #24]
 80458f0:	2b02      	cmp	r3, #2
 80458f2:	f200 80a1 	bhi.w	8045a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80458f6:	69bb      	ldr	r3, [r7, #24]
 80458f8:	2b00      	cmp	r3, #0
 80458fa:	d003      	beq.n	8045904 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80458fc:	69bb      	ldr	r3, [r7, #24]
 80458fe:	2b01      	cmp	r3, #1
 8045900:	d056      	beq.n	80459b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8045902:	e099      	b.n	8045a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8045904:	4b88      	ldr	r3, [pc, #544]	@ (8045b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045906:	681b      	ldr	r3, [r3, #0]
 8045908:	f003 0320 	and.w	r3, r3, #32
 804590c:	2b00      	cmp	r3, #0
 804590e:	d02d      	beq.n	804596c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8045910:	4b85      	ldr	r3, [pc, #532]	@ (8045b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045912:	681b      	ldr	r3, [r3, #0]
 8045914:	08db      	lsrs	r3, r3, #3
 8045916:	f003 0303 	and.w	r3, r3, #3
 804591a:	4a84      	ldr	r2, [pc, #528]	@ (8045b2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 804591c:	fa22 f303 	lsr.w	r3, r2, r3
 8045920:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8045922:	68bb      	ldr	r3, [r7, #8]
 8045924:	ee07 3a90 	vmov	s15, r3
 8045928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804592c:	697b      	ldr	r3, [r7, #20]
 804592e:	ee07 3a90 	vmov	s15, r3
 8045932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804593a:	4b7b      	ldr	r3, [pc, #492]	@ (8045b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 804593c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804593e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045942:	ee07 3a90 	vmov	s15, r3
 8045946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804594a:	ed97 6a03 	vldr	s12, [r7, #12]
 804594e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8045b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8045952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8045956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804595a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 804595e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045966:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 804596a:	e087      	b.n	8045a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 804596c:	697b      	ldr	r3, [r7, #20]
 804596e:	ee07 3a90 	vmov	s15, r3
 8045972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045976:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8045b34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 804597a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804597e:	4b6a      	ldr	r3, [pc, #424]	@ (8045b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8045982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045986:	ee07 3a90 	vmov	s15, r3
 804598a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804598e:	ed97 6a03 	vldr	s12, [r7, #12]
 8045992:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8045b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8045996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804599a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804599e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80459a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80459a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80459aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80459ae:	e065      	b.n	8045a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80459b0:	697b      	ldr	r3, [r7, #20]
 80459b2:	ee07 3a90 	vmov	s15, r3
 80459b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80459ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8045b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80459be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80459c2:	4b59      	ldr	r3, [pc, #356]	@ (8045b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80459c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80459c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80459ca:	ee07 3a90 	vmov	s15, r3
 80459ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80459d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80459d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8045b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80459da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80459de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80459e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80459e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80459ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80459ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80459f2:	e043      	b.n	8045a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80459f4:	697b      	ldr	r3, [r7, #20]
 80459f6:	ee07 3a90 	vmov	s15, r3
 80459fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80459fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8045b3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8045a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8045a06:	4b48      	ldr	r3, [pc, #288]	@ (8045b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8045a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045a0e:	ee07 3a90 	vmov	s15, r3
 8045a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8045a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8045a1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8045b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8045a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8045a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8045a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8045a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8045a36:	e021      	b.n	8045a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8045a38:	697b      	ldr	r3, [r7, #20]
 8045a3a:	ee07 3a90 	vmov	s15, r3
 8045a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045a42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8045b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8045a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8045a4a:	4b37      	ldr	r3, [pc, #220]	@ (8045b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8045a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045a52:	ee07 3a90 	vmov	s15, r3
 8045a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8045a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8045a5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8045b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8045a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8045a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8045a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8045a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8045a7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8045a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8045b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8045a80:	0a5b      	lsrs	r3, r3, #9
 8045a82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8045a86:	ee07 3a90 	vmov	s15, r3
 8045a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045a8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8045a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8045a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8045a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8045a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8045aa2:	ee17 2a90 	vmov	r2, s15
 8045aa6:	687b      	ldr	r3, [r7, #4]
 8045aa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8045aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8045b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8045aae:	0c1b      	lsrs	r3, r3, #16
 8045ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8045ab4:	ee07 3a90 	vmov	s15, r3
 8045ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045abc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8045ac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8045ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8045ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8045acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8045ad0:	ee17 2a90 	vmov	r2, s15
 8045ad4:	687b      	ldr	r3, [r7, #4]
 8045ad6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8045ad8:	4b13      	ldr	r3, [pc, #76]	@ (8045b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8045adc:	0e1b      	lsrs	r3, r3, #24
 8045ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8045ae2:	ee07 3a90 	vmov	s15, r3
 8045ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045aea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8045aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8045af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8045af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8045afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8045afe:	ee17 2a90 	vmov	r2, s15
 8045b02:	687b      	ldr	r3, [r7, #4]
 8045b04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8045b06:	e008      	b.n	8045b1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8045b08:	687b      	ldr	r3, [r7, #4]
 8045b0a:	2200      	movs	r2, #0
 8045b0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8045b0e:	687b      	ldr	r3, [r7, #4]
 8045b10:	2200      	movs	r2, #0
 8045b12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8045b14:	687b      	ldr	r3, [r7, #4]
 8045b16:	2200      	movs	r2, #0
 8045b18:	609a      	str	r2, [r3, #8]
}
 8045b1a:	bf00      	nop
 8045b1c:	3724      	adds	r7, #36	@ 0x24
 8045b1e:	46bd      	mov	sp, r7
 8045b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045b24:	4770      	bx	lr
 8045b26:	bf00      	nop
 8045b28:	58024400 	.word	0x58024400
 8045b2c:	03d09000 	.word	0x03d09000
 8045b30:	46000000 	.word	0x46000000
 8045b34:	4c742400 	.word	0x4c742400
 8045b38:	4a742400 	.word	0x4a742400
 8045b3c:	4bbebc20 	.word	0x4bbebc20

08045b40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8045b40:	b580      	push	{r7, lr}
 8045b42:	b084      	sub	sp, #16
 8045b44:	af00      	add	r7, sp, #0
 8045b46:	6078      	str	r0, [r7, #4]
 8045b48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8045b4a:	2300      	movs	r3, #0
 8045b4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8045b4e:	4b53      	ldr	r3, [pc, #332]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045b52:	f003 0303 	and.w	r3, r3, #3
 8045b56:	2b03      	cmp	r3, #3
 8045b58:	d101      	bne.n	8045b5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8045b5a:	2301      	movs	r3, #1
 8045b5c:	e099      	b.n	8045c92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8045b5e:	4b4f      	ldr	r3, [pc, #316]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045b60:	681b      	ldr	r3, [r3, #0]
 8045b62:	4a4e      	ldr	r2, [pc, #312]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045b64:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8045b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045b6a:	f7fb fb35 	bl	80411d8 <HAL_GetTick>
 8045b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8045b70:	e008      	b.n	8045b84 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8045b72:	f7fb fb31 	bl	80411d8 <HAL_GetTick>
 8045b76:	4602      	mov	r2, r0
 8045b78:	68bb      	ldr	r3, [r7, #8]
 8045b7a:	1ad3      	subs	r3, r2, r3
 8045b7c:	2b02      	cmp	r3, #2
 8045b7e:	d901      	bls.n	8045b84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8045b80:	2303      	movs	r3, #3
 8045b82:	e086      	b.n	8045c92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8045b84:	4b45      	ldr	r3, [pc, #276]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045b86:	681b      	ldr	r3, [r3, #0]
 8045b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8045b8c:	2b00      	cmp	r3, #0
 8045b8e:	d1f0      	bne.n	8045b72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8045b90:	4b42      	ldr	r3, [pc, #264]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045b94:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8045b98:	687b      	ldr	r3, [r7, #4]
 8045b9a:	681b      	ldr	r3, [r3, #0]
 8045b9c:	031b      	lsls	r3, r3, #12
 8045b9e:	493f      	ldr	r1, [pc, #252]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045ba0:	4313      	orrs	r3, r2
 8045ba2:	628b      	str	r3, [r1, #40]	@ 0x28
 8045ba4:	687b      	ldr	r3, [r7, #4]
 8045ba6:	685b      	ldr	r3, [r3, #4]
 8045ba8:	3b01      	subs	r3, #1
 8045baa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8045bae:	687b      	ldr	r3, [r7, #4]
 8045bb0:	689b      	ldr	r3, [r3, #8]
 8045bb2:	3b01      	subs	r3, #1
 8045bb4:	025b      	lsls	r3, r3, #9
 8045bb6:	b29b      	uxth	r3, r3
 8045bb8:	431a      	orrs	r2, r3
 8045bba:	687b      	ldr	r3, [r7, #4]
 8045bbc:	68db      	ldr	r3, [r3, #12]
 8045bbe:	3b01      	subs	r3, #1
 8045bc0:	041b      	lsls	r3, r3, #16
 8045bc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8045bc6:	431a      	orrs	r2, r3
 8045bc8:	687b      	ldr	r3, [r7, #4]
 8045bca:	691b      	ldr	r3, [r3, #16]
 8045bcc:	3b01      	subs	r3, #1
 8045bce:	061b      	lsls	r3, r3, #24
 8045bd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8045bd4:	4931      	ldr	r1, [pc, #196]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045bd6:	4313      	orrs	r3, r2
 8045bd8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8045bda:	4b30      	ldr	r3, [pc, #192]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045bde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8045be2:	687b      	ldr	r3, [r7, #4]
 8045be4:	695b      	ldr	r3, [r3, #20]
 8045be6:	492d      	ldr	r1, [pc, #180]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045be8:	4313      	orrs	r3, r2
 8045bea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8045bec:	4b2b      	ldr	r3, [pc, #172]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045bf0:	f023 0220 	bic.w	r2, r3, #32
 8045bf4:	687b      	ldr	r3, [r7, #4]
 8045bf6:	699b      	ldr	r3, [r3, #24]
 8045bf8:	4928      	ldr	r1, [pc, #160]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045bfa:	4313      	orrs	r3, r2
 8045bfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8045bfe:	4b27      	ldr	r3, [pc, #156]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c02:	4a26      	ldr	r2, [pc, #152]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045c04:	f023 0310 	bic.w	r3, r3, #16
 8045c08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8045c0a:	4b24      	ldr	r3, [pc, #144]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045c0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8045c0e:	4b24      	ldr	r3, [pc, #144]	@ (8045ca0 <RCCEx_PLL2_Config+0x160>)
 8045c10:	4013      	ands	r3, r2
 8045c12:	687a      	ldr	r2, [r7, #4]
 8045c14:	69d2      	ldr	r2, [r2, #28]
 8045c16:	00d2      	lsls	r2, r2, #3
 8045c18:	4920      	ldr	r1, [pc, #128]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045c1a:	4313      	orrs	r3, r2
 8045c1c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8045c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c22:	4a1e      	ldr	r2, [pc, #120]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045c24:	f043 0310 	orr.w	r3, r3, #16
 8045c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8045c2a:	683b      	ldr	r3, [r7, #0]
 8045c2c:	2b00      	cmp	r3, #0
 8045c2e:	d106      	bne.n	8045c3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8045c30:	4b1a      	ldr	r3, [pc, #104]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c34:	4a19      	ldr	r2, [pc, #100]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045c36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8045c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8045c3c:	e00f      	b.n	8045c5e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8045c3e:	683b      	ldr	r3, [r7, #0]
 8045c40:	2b01      	cmp	r3, #1
 8045c42:	d106      	bne.n	8045c52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8045c44:	4b15      	ldr	r3, [pc, #84]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c48:	4a14      	ldr	r2, [pc, #80]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8045c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8045c50:	e005      	b.n	8045c5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8045c52:	4b12      	ldr	r3, [pc, #72]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c56:	4a11      	ldr	r2, [pc, #68]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045c58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8045c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8045c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045c60:	681b      	ldr	r3, [r3, #0]
 8045c62:	4a0e      	ldr	r2, [pc, #56]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045c64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8045c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045c6a:	f7fb fab5 	bl	80411d8 <HAL_GetTick>
 8045c6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8045c70:	e008      	b.n	8045c84 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8045c72:	f7fb fab1 	bl	80411d8 <HAL_GetTick>
 8045c76:	4602      	mov	r2, r0
 8045c78:	68bb      	ldr	r3, [r7, #8]
 8045c7a:	1ad3      	subs	r3, r2, r3
 8045c7c:	2b02      	cmp	r3, #2
 8045c7e:	d901      	bls.n	8045c84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8045c80:	2303      	movs	r3, #3
 8045c82:	e006      	b.n	8045c92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8045c84:	4b05      	ldr	r3, [pc, #20]	@ (8045c9c <RCCEx_PLL2_Config+0x15c>)
 8045c86:	681b      	ldr	r3, [r3, #0]
 8045c88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8045c8c:	2b00      	cmp	r3, #0
 8045c8e:	d0f0      	beq.n	8045c72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8045c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8045c92:	4618      	mov	r0, r3
 8045c94:	3710      	adds	r7, #16
 8045c96:	46bd      	mov	sp, r7
 8045c98:	bd80      	pop	{r7, pc}
 8045c9a:	bf00      	nop
 8045c9c:	58024400 	.word	0x58024400
 8045ca0:	ffff0007 	.word	0xffff0007

08045ca4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8045ca4:	b580      	push	{r7, lr}
 8045ca6:	b084      	sub	sp, #16
 8045ca8:	af00      	add	r7, sp, #0
 8045caa:	6078      	str	r0, [r7, #4]
 8045cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8045cae:	2300      	movs	r3, #0
 8045cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8045cb2:	4b53      	ldr	r3, [pc, #332]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045cb6:	f003 0303 	and.w	r3, r3, #3
 8045cba:	2b03      	cmp	r3, #3
 8045cbc:	d101      	bne.n	8045cc2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8045cbe:	2301      	movs	r3, #1
 8045cc0:	e099      	b.n	8045df6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8045cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045cc4:	681b      	ldr	r3, [r3, #0]
 8045cc6:	4a4e      	ldr	r2, [pc, #312]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045cc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8045ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045cce:	f7fb fa83 	bl	80411d8 <HAL_GetTick>
 8045cd2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8045cd4:	e008      	b.n	8045ce8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8045cd6:	f7fb fa7f 	bl	80411d8 <HAL_GetTick>
 8045cda:	4602      	mov	r2, r0
 8045cdc:	68bb      	ldr	r3, [r7, #8]
 8045cde:	1ad3      	subs	r3, r2, r3
 8045ce0:	2b02      	cmp	r3, #2
 8045ce2:	d901      	bls.n	8045ce8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8045ce4:	2303      	movs	r3, #3
 8045ce6:	e086      	b.n	8045df6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8045ce8:	4b45      	ldr	r3, [pc, #276]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045cea:	681b      	ldr	r3, [r3, #0]
 8045cec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8045cf0:	2b00      	cmp	r3, #0
 8045cf2:	d1f0      	bne.n	8045cd6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8045cf4:	4b42      	ldr	r3, [pc, #264]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045cf8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8045cfc:	687b      	ldr	r3, [r7, #4]
 8045cfe:	681b      	ldr	r3, [r3, #0]
 8045d00:	051b      	lsls	r3, r3, #20
 8045d02:	493f      	ldr	r1, [pc, #252]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045d04:	4313      	orrs	r3, r2
 8045d06:	628b      	str	r3, [r1, #40]	@ 0x28
 8045d08:	687b      	ldr	r3, [r7, #4]
 8045d0a:	685b      	ldr	r3, [r3, #4]
 8045d0c:	3b01      	subs	r3, #1
 8045d0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8045d12:	687b      	ldr	r3, [r7, #4]
 8045d14:	689b      	ldr	r3, [r3, #8]
 8045d16:	3b01      	subs	r3, #1
 8045d18:	025b      	lsls	r3, r3, #9
 8045d1a:	b29b      	uxth	r3, r3
 8045d1c:	431a      	orrs	r2, r3
 8045d1e:	687b      	ldr	r3, [r7, #4]
 8045d20:	68db      	ldr	r3, [r3, #12]
 8045d22:	3b01      	subs	r3, #1
 8045d24:	041b      	lsls	r3, r3, #16
 8045d26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8045d2a:	431a      	orrs	r2, r3
 8045d2c:	687b      	ldr	r3, [r7, #4]
 8045d2e:	691b      	ldr	r3, [r3, #16]
 8045d30:	3b01      	subs	r3, #1
 8045d32:	061b      	lsls	r3, r3, #24
 8045d34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8045d38:	4931      	ldr	r1, [pc, #196]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045d3a:	4313      	orrs	r3, r2
 8045d3c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8045d3e:	4b30      	ldr	r3, [pc, #192]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045d42:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8045d46:	687b      	ldr	r3, [r7, #4]
 8045d48:	695b      	ldr	r3, [r3, #20]
 8045d4a:	492d      	ldr	r1, [pc, #180]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045d4c:	4313      	orrs	r3, r2
 8045d4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8045d50:	4b2b      	ldr	r3, [pc, #172]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045d54:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8045d58:	687b      	ldr	r3, [r7, #4]
 8045d5a:	699b      	ldr	r3, [r3, #24]
 8045d5c:	4928      	ldr	r1, [pc, #160]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045d5e:	4313      	orrs	r3, r2
 8045d60:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8045d62:	4b27      	ldr	r3, [pc, #156]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045d66:	4a26      	ldr	r2, [pc, #152]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8045d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8045d6e:	4b24      	ldr	r3, [pc, #144]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045d70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8045d72:	4b24      	ldr	r3, [pc, #144]	@ (8045e04 <RCCEx_PLL3_Config+0x160>)
 8045d74:	4013      	ands	r3, r2
 8045d76:	687a      	ldr	r2, [r7, #4]
 8045d78:	69d2      	ldr	r2, [r2, #28]
 8045d7a:	00d2      	lsls	r2, r2, #3
 8045d7c:	4920      	ldr	r1, [pc, #128]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045d7e:	4313      	orrs	r3, r2
 8045d80:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8045d82:	4b1f      	ldr	r3, [pc, #124]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045d86:	4a1e      	ldr	r2, [pc, #120]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8045d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8045d8e:	683b      	ldr	r3, [r7, #0]
 8045d90:	2b00      	cmp	r3, #0
 8045d92:	d106      	bne.n	8045da2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8045d94:	4b1a      	ldr	r3, [pc, #104]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045d98:	4a19      	ldr	r2, [pc, #100]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045d9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8045d9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8045da0:	e00f      	b.n	8045dc2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8045da2:	683b      	ldr	r3, [r7, #0]
 8045da4:	2b01      	cmp	r3, #1
 8045da6:	d106      	bne.n	8045db6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8045da8:	4b15      	ldr	r3, [pc, #84]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045dac:	4a14      	ldr	r2, [pc, #80]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045dae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8045db2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8045db4:	e005      	b.n	8045dc2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8045db6:	4b12      	ldr	r3, [pc, #72]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045dba:	4a11      	ldr	r2, [pc, #68]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045dbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8045dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8045dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045dc4:	681b      	ldr	r3, [r3, #0]
 8045dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8045dcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045dce:	f7fb fa03 	bl	80411d8 <HAL_GetTick>
 8045dd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8045dd4:	e008      	b.n	8045de8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8045dd6:	f7fb f9ff 	bl	80411d8 <HAL_GetTick>
 8045dda:	4602      	mov	r2, r0
 8045ddc:	68bb      	ldr	r3, [r7, #8]
 8045dde:	1ad3      	subs	r3, r2, r3
 8045de0:	2b02      	cmp	r3, #2
 8045de2:	d901      	bls.n	8045de8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8045de4:	2303      	movs	r3, #3
 8045de6:	e006      	b.n	8045df6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8045de8:	4b05      	ldr	r3, [pc, #20]	@ (8045e00 <RCCEx_PLL3_Config+0x15c>)
 8045dea:	681b      	ldr	r3, [r3, #0]
 8045dec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8045df0:	2b00      	cmp	r3, #0
 8045df2:	d0f0      	beq.n	8045dd6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8045df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8045df6:	4618      	mov	r0, r3
 8045df8:	3710      	adds	r7, #16
 8045dfa:	46bd      	mov	sp, r7
 8045dfc:	bd80      	pop	{r7, pc}
 8045dfe:	bf00      	nop
 8045e00:	58024400 	.word	0x58024400
 8045e04:	ffff0007 	.word	0xffff0007

08045e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8045e08:	b580      	push	{r7, lr}
 8045e0a:	b082      	sub	sp, #8
 8045e0c:	af00      	add	r7, sp, #0
 8045e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8045e10:	687b      	ldr	r3, [r7, #4]
 8045e12:	2b00      	cmp	r3, #0
 8045e14:	d101      	bne.n	8045e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8045e16:	2301      	movs	r3, #1
 8045e18:	e042      	b.n	8045ea0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8045e1a:	687b      	ldr	r3, [r7, #4]
 8045e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8045e20:	2b00      	cmp	r3, #0
 8045e22:	d106      	bne.n	8045e32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8045e24:	687b      	ldr	r3, [r7, #4]
 8045e26:	2200      	movs	r2, #0
 8045e28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8045e2c:	6878      	ldr	r0, [r7, #4]
 8045e2e:	f7fa ffa9 	bl	8040d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8045e32:	687b      	ldr	r3, [r7, #4]
 8045e34:	2224      	movs	r2, #36	@ 0x24
 8045e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8045e3a:	687b      	ldr	r3, [r7, #4]
 8045e3c:	681b      	ldr	r3, [r3, #0]
 8045e3e:	681a      	ldr	r2, [r3, #0]
 8045e40:	687b      	ldr	r3, [r7, #4]
 8045e42:	681b      	ldr	r3, [r3, #0]
 8045e44:	f022 0201 	bic.w	r2, r2, #1
 8045e48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8045e4a:	687b      	ldr	r3, [r7, #4]
 8045e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045e4e:	2b00      	cmp	r3, #0
 8045e50:	d002      	beq.n	8045e58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8045e52:	6878      	ldr	r0, [r7, #4]
 8045e54:	f000 fd90 	bl	8046978 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8045e58:	6878      	ldr	r0, [r7, #4]
 8045e5a:	f000 f825 	bl	8045ea8 <UART_SetConfig>
 8045e5e:	4603      	mov	r3, r0
 8045e60:	2b01      	cmp	r3, #1
 8045e62:	d101      	bne.n	8045e68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8045e64:	2301      	movs	r3, #1
 8045e66:	e01b      	b.n	8045ea0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8045e68:	687b      	ldr	r3, [r7, #4]
 8045e6a:	681b      	ldr	r3, [r3, #0]
 8045e6c:	685a      	ldr	r2, [r3, #4]
 8045e6e:	687b      	ldr	r3, [r7, #4]
 8045e70:	681b      	ldr	r3, [r3, #0]
 8045e72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8045e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8045e78:	687b      	ldr	r3, [r7, #4]
 8045e7a:	681b      	ldr	r3, [r3, #0]
 8045e7c:	689a      	ldr	r2, [r3, #8]
 8045e7e:	687b      	ldr	r3, [r7, #4]
 8045e80:	681b      	ldr	r3, [r3, #0]
 8045e82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8045e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8045e88:	687b      	ldr	r3, [r7, #4]
 8045e8a:	681b      	ldr	r3, [r3, #0]
 8045e8c:	681a      	ldr	r2, [r3, #0]
 8045e8e:	687b      	ldr	r3, [r7, #4]
 8045e90:	681b      	ldr	r3, [r3, #0]
 8045e92:	f042 0201 	orr.w	r2, r2, #1
 8045e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8045e98:	6878      	ldr	r0, [r7, #4]
 8045e9a:	f000 fe0f 	bl	8046abc <UART_CheckIdleState>
 8045e9e:	4603      	mov	r3, r0
}
 8045ea0:	4618      	mov	r0, r3
 8045ea2:	3708      	adds	r7, #8
 8045ea4:	46bd      	mov	sp, r7
 8045ea6:	bd80      	pop	{r7, pc}

08045ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8045ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8045eac:	b092      	sub	sp, #72	@ 0x48
 8045eae:	af00      	add	r7, sp, #0
 8045eb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8045eb2:	2300      	movs	r3, #0
 8045eb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8045eb8:	697b      	ldr	r3, [r7, #20]
 8045eba:	689a      	ldr	r2, [r3, #8]
 8045ebc:	697b      	ldr	r3, [r7, #20]
 8045ebe:	691b      	ldr	r3, [r3, #16]
 8045ec0:	431a      	orrs	r2, r3
 8045ec2:	697b      	ldr	r3, [r7, #20]
 8045ec4:	695b      	ldr	r3, [r3, #20]
 8045ec6:	431a      	orrs	r2, r3
 8045ec8:	697b      	ldr	r3, [r7, #20]
 8045eca:	69db      	ldr	r3, [r3, #28]
 8045ecc:	4313      	orrs	r3, r2
 8045ece:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8045ed0:	697b      	ldr	r3, [r7, #20]
 8045ed2:	681b      	ldr	r3, [r3, #0]
 8045ed4:	681a      	ldr	r2, [r3, #0]
 8045ed6:	4bbe      	ldr	r3, [pc, #760]	@ (80461d0 <UART_SetConfig+0x328>)
 8045ed8:	4013      	ands	r3, r2
 8045eda:	697a      	ldr	r2, [r7, #20]
 8045edc:	6812      	ldr	r2, [r2, #0]
 8045ede:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8045ee0:	430b      	orrs	r3, r1
 8045ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8045ee4:	697b      	ldr	r3, [r7, #20]
 8045ee6:	681b      	ldr	r3, [r3, #0]
 8045ee8:	685b      	ldr	r3, [r3, #4]
 8045eea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8045eee:	697b      	ldr	r3, [r7, #20]
 8045ef0:	68da      	ldr	r2, [r3, #12]
 8045ef2:	697b      	ldr	r3, [r7, #20]
 8045ef4:	681b      	ldr	r3, [r3, #0]
 8045ef6:	430a      	orrs	r2, r1
 8045ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8045efa:	697b      	ldr	r3, [r7, #20]
 8045efc:	699b      	ldr	r3, [r3, #24]
 8045efe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8045f00:	697b      	ldr	r3, [r7, #20]
 8045f02:	681b      	ldr	r3, [r3, #0]
 8045f04:	4ab3      	ldr	r2, [pc, #716]	@ (80461d4 <UART_SetConfig+0x32c>)
 8045f06:	4293      	cmp	r3, r2
 8045f08:	d004      	beq.n	8045f14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8045f0a:	697b      	ldr	r3, [r7, #20]
 8045f0c:	6a1b      	ldr	r3, [r3, #32]
 8045f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8045f10:	4313      	orrs	r3, r2
 8045f12:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8045f14:	697b      	ldr	r3, [r7, #20]
 8045f16:	681b      	ldr	r3, [r3, #0]
 8045f18:	689a      	ldr	r2, [r3, #8]
 8045f1a:	4baf      	ldr	r3, [pc, #700]	@ (80461d8 <UART_SetConfig+0x330>)
 8045f1c:	4013      	ands	r3, r2
 8045f1e:	697a      	ldr	r2, [r7, #20]
 8045f20:	6812      	ldr	r2, [r2, #0]
 8045f22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8045f24:	430b      	orrs	r3, r1
 8045f26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8045f28:	697b      	ldr	r3, [r7, #20]
 8045f2a:	681b      	ldr	r3, [r3, #0]
 8045f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045f2e:	f023 010f 	bic.w	r1, r3, #15
 8045f32:	697b      	ldr	r3, [r7, #20]
 8045f34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8045f36:	697b      	ldr	r3, [r7, #20]
 8045f38:	681b      	ldr	r3, [r3, #0]
 8045f3a:	430a      	orrs	r2, r1
 8045f3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8045f3e:	697b      	ldr	r3, [r7, #20]
 8045f40:	681b      	ldr	r3, [r3, #0]
 8045f42:	4aa6      	ldr	r2, [pc, #664]	@ (80461dc <UART_SetConfig+0x334>)
 8045f44:	4293      	cmp	r3, r2
 8045f46:	d177      	bne.n	8046038 <UART_SetConfig+0x190>
 8045f48:	4ba5      	ldr	r3, [pc, #660]	@ (80461e0 <UART_SetConfig+0x338>)
 8045f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045f4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8045f50:	2b28      	cmp	r3, #40	@ 0x28
 8045f52:	d86d      	bhi.n	8046030 <UART_SetConfig+0x188>
 8045f54:	a201      	add	r2, pc, #4	@ (adr r2, 8045f5c <UART_SetConfig+0xb4>)
 8045f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045f5a:	bf00      	nop
 8045f5c:	08046001 	.word	0x08046001
 8045f60:	08046031 	.word	0x08046031
 8045f64:	08046031 	.word	0x08046031
 8045f68:	08046031 	.word	0x08046031
 8045f6c:	08046031 	.word	0x08046031
 8045f70:	08046031 	.word	0x08046031
 8045f74:	08046031 	.word	0x08046031
 8045f78:	08046031 	.word	0x08046031
 8045f7c:	08046009 	.word	0x08046009
 8045f80:	08046031 	.word	0x08046031
 8045f84:	08046031 	.word	0x08046031
 8045f88:	08046031 	.word	0x08046031
 8045f8c:	08046031 	.word	0x08046031
 8045f90:	08046031 	.word	0x08046031
 8045f94:	08046031 	.word	0x08046031
 8045f98:	08046031 	.word	0x08046031
 8045f9c:	08046011 	.word	0x08046011
 8045fa0:	08046031 	.word	0x08046031
 8045fa4:	08046031 	.word	0x08046031
 8045fa8:	08046031 	.word	0x08046031
 8045fac:	08046031 	.word	0x08046031
 8045fb0:	08046031 	.word	0x08046031
 8045fb4:	08046031 	.word	0x08046031
 8045fb8:	08046031 	.word	0x08046031
 8045fbc:	08046019 	.word	0x08046019
 8045fc0:	08046031 	.word	0x08046031
 8045fc4:	08046031 	.word	0x08046031
 8045fc8:	08046031 	.word	0x08046031
 8045fcc:	08046031 	.word	0x08046031
 8045fd0:	08046031 	.word	0x08046031
 8045fd4:	08046031 	.word	0x08046031
 8045fd8:	08046031 	.word	0x08046031
 8045fdc:	08046021 	.word	0x08046021
 8045fe0:	08046031 	.word	0x08046031
 8045fe4:	08046031 	.word	0x08046031
 8045fe8:	08046031 	.word	0x08046031
 8045fec:	08046031 	.word	0x08046031
 8045ff0:	08046031 	.word	0x08046031
 8045ff4:	08046031 	.word	0x08046031
 8045ff8:	08046031 	.word	0x08046031
 8045ffc:	08046029 	.word	0x08046029
 8046000:	2301      	movs	r3, #1
 8046002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046006:	e222      	b.n	804644e <UART_SetConfig+0x5a6>
 8046008:	2304      	movs	r3, #4
 804600a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804600e:	e21e      	b.n	804644e <UART_SetConfig+0x5a6>
 8046010:	2308      	movs	r3, #8
 8046012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046016:	e21a      	b.n	804644e <UART_SetConfig+0x5a6>
 8046018:	2310      	movs	r3, #16
 804601a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804601e:	e216      	b.n	804644e <UART_SetConfig+0x5a6>
 8046020:	2320      	movs	r3, #32
 8046022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046026:	e212      	b.n	804644e <UART_SetConfig+0x5a6>
 8046028:	2340      	movs	r3, #64	@ 0x40
 804602a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804602e:	e20e      	b.n	804644e <UART_SetConfig+0x5a6>
 8046030:	2380      	movs	r3, #128	@ 0x80
 8046032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046036:	e20a      	b.n	804644e <UART_SetConfig+0x5a6>
 8046038:	697b      	ldr	r3, [r7, #20]
 804603a:	681b      	ldr	r3, [r3, #0]
 804603c:	4a69      	ldr	r2, [pc, #420]	@ (80461e4 <UART_SetConfig+0x33c>)
 804603e:	4293      	cmp	r3, r2
 8046040:	d130      	bne.n	80460a4 <UART_SetConfig+0x1fc>
 8046042:	4b67      	ldr	r3, [pc, #412]	@ (80461e0 <UART_SetConfig+0x338>)
 8046044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8046046:	f003 0307 	and.w	r3, r3, #7
 804604a:	2b05      	cmp	r3, #5
 804604c:	d826      	bhi.n	804609c <UART_SetConfig+0x1f4>
 804604e:	a201      	add	r2, pc, #4	@ (adr r2, 8046054 <UART_SetConfig+0x1ac>)
 8046050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046054:	0804606d 	.word	0x0804606d
 8046058:	08046075 	.word	0x08046075
 804605c:	0804607d 	.word	0x0804607d
 8046060:	08046085 	.word	0x08046085
 8046064:	0804608d 	.word	0x0804608d
 8046068:	08046095 	.word	0x08046095
 804606c:	2300      	movs	r3, #0
 804606e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046072:	e1ec      	b.n	804644e <UART_SetConfig+0x5a6>
 8046074:	2304      	movs	r3, #4
 8046076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804607a:	e1e8      	b.n	804644e <UART_SetConfig+0x5a6>
 804607c:	2308      	movs	r3, #8
 804607e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046082:	e1e4      	b.n	804644e <UART_SetConfig+0x5a6>
 8046084:	2310      	movs	r3, #16
 8046086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804608a:	e1e0      	b.n	804644e <UART_SetConfig+0x5a6>
 804608c:	2320      	movs	r3, #32
 804608e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046092:	e1dc      	b.n	804644e <UART_SetConfig+0x5a6>
 8046094:	2340      	movs	r3, #64	@ 0x40
 8046096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804609a:	e1d8      	b.n	804644e <UART_SetConfig+0x5a6>
 804609c:	2380      	movs	r3, #128	@ 0x80
 804609e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460a2:	e1d4      	b.n	804644e <UART_SetConfig+0x5a6>
 80460a4:	697b      	ldr	r3, [r7, #20]
 80460a6:	681b      	ldr	r3, [r3, #0]
 80460a8:	4a4f      	ldr	r2, [pc, #316]	@ (80461e8 <UART_SetConfig+0x340>)
 80460aa:	4293      	cmp	r3, r2
 80460ac:	d130      	bne.n	8046110 <UART_SetConfig+0x268>
 80460ae:	4b4c      	ldr	r3, [pc, #304]	@ (80461e0 <UART_SetConfig+0x338>)
 80460b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80460b2:	f003 0307 	and.w	r3, r3, #7
 80460b6:	2b05      	cmp	r3, #5
 80460b8:	d826      	bhi.n	8046108 <UART_SetConfig+0x260>
 80460ba:	a201      	add	r2, pc, #4	@ (adr r2, 80460c0 <UART_SetConfig+0x218>)
 80460bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80460c0:	080460d9 	.word	0x080460d9
 80460c4:	080460e1 	.word	0x080460e1
 80460c8:	080460e9 	.word	0x080460e9
 80460cc:	080460f1 	.word	0x080460f1
 80460d0:	080460f9 	.word	0x080460f9
 80460d4:	08046101 	.word	0x08046101
 80460d8:	2300      	movs	r3, #0
 80460da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460de:	e1b6      	b.n	804644e <UART_SetConfig+0x5a6>
 80460e0:	2304      	movs	r3, #4
 80460e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460e6:	e1b2      	b.n	804644e <UART_SetConfig+0x5a6>
 80460e8:	2308      	movs	r3, #8
 80460ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460ee:	e1ae      	b.n	804644e <UART_SetConfig+0x5a6>
 80460f0:	2310      	movs	r3, #16
 80460f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460f6:	e1aa      	b.n	804644e <UART_SetConfig+0x5a6>
 80460f8:	2320      	movs	r3, #32
 80460fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460fe:	e1a6      	b.n	804644e <UART_SetConfig+0x5a6>
 8046100:	2340      	movs	r3, #64	@ 0x40
 8046102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046106:	e1a2      	b.n	804644e <UART_SetConfig+0x5a6>
 8046108:	2380      	movs	r3, #128	@ 0x80
 804610a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804610e:	e19e      	b.n	804644e <UART_SetConfig+0x5a6>
 8046110:	697b      	ldr	r3, [r7, #20]
 8046112:	681b      	ldr	r3, [r3, #0]
 8046114:	4a35      	ldr	r2, [pc, #212]	@ (80461ec <UART_SetConfig+0x344>)
 8046116:	4293      	cmp	r3, r2
 8046118:	d130      	bne.n	804617c <UART_SetConfig+0x2d4>
 804611a:	4b31      	ldr	r3, [pc, #196]	@ (80461e0 <UART_SetConfig+0x338>)
 804611c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804611e:	f003 0307 	and.w	r3, r3, #7
 8046122:	2b05      	cmp	r3, #5
 8046124:	d826      	bhi.n	8046174 <UART_SetConfig+0x2cc>
 8046126:	a201      	add	r2, pc, #4	@ (adr r2, 804612c <UART_SetConfig+0x284>)
 8046128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804612c:	08046145 	.word	0x08046145
 8046130:	0804614d 	.word	0x0804614d
 8046134:	08046155 	.word	0x08046155
 8046138:	0804615d 	.word	0x0804615d
 804613c:	08046165 	.word	0x08046165
 8046140:	0804616d 	.word	0x0804616d
 8046144:	2300      	movs	r3, #0
 8046146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804614a:	e180      	b.n	804644e <UART_SetConfig+0x5a6>
 804614c:	2304      	movs	r3, #4
 804614e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046152:	e17c      	b.n	804644e <UART_SetConfig+0x5a6>
 8046154:	2308      	movs	r3, #8
 8046156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804615a:	e178      	b.n	804644e <UART_SetConfig+0x5a6>
 804615c:	2310      	movs	r3, #16
 804615e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046162:	e174      	b.n	804644e <UART_SetConfig+0x5a6>
 8046164:	2320      	movs	r3, #32
 8046166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804616a:	e170      	b.n	804644e <UART_SetConfig+0x5a6>
 804616c:	2340      	movs	r3, #64	@ 0x40
 804616e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046172:	e16c      	b.n	804644e <UART_SetConfig+0x5a6>
 8046174:	2380      	movs	r3, #128	@ 0x80
 8046176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804617a:	e168      	b.n	804644e <UART_SetConfig+0x5a6>
 804617c:	697b      	ldr	r3, [r7, #20]
 804617e:	681b      	ldr	r3, [r3, #0]
 8046180:	4a1b      	ldr	r2, [pc, #108]	@ (80461f0 <UART_SetConfig+0x348>)
 8046182:	4293      	cmp	r3, r2
 8046184:	d142      	bne.n	804620c <UART_SetConfig+0x364>
 8046186:	4b16      	ldr	r3, [pc, #88]	@ (80461e0 <UART_SetConfig+0x338>)
 8046188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804618a:	f003 0307 	and.w	r3, r3, #7
 804618e:	2b05      	cmp	r3, #5
 8046190:	d838      	bhi.n	8046204 <UART_SetConfig+0x35c>
 8046192:	a201      	add	r2, pc, #4	@ (adr r2, 8046198 <UART_SetConfig+0x2f0>)
 8046194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046198:	080461b1 	.word	0x080461b1
 804619c:	080461b9 	.word	0x080461b9
 80461a0:	080461c1 	.word	0x080461c1
 80461a4:	080461c9 	.word	0x080461c9
 80461a8:	080461f5 	.word	0x080461f5
 80461ac:	080461fd 	.word	0x080461fd
 80461b0:	2300      	movs	r3, #0
 80461b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461b6:	e14a      	b.n	804644e <UART_SetConfig+0x5a6>
 80461b8:	2304      	movs	r3, #4
 80461ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461be:	e146      	b.n	804644e <UART_SetConfig+0x5a6>
 80461c0:	2308      	movs	r3, #8
 80461c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461c6:	e142      	b.n	804644e <UART_SetConfig+0x5a6>
 80461c8:	2310      	movs	r3, #16
 80461ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461ce:	e13e      	b.n	804644e <UART_SetConfig+0x5a6>
 80461d0:	cfff69f3 	.word	0xcfff69f3
 80461d4:	58000c00 	.word	0x58000c00
 80461d8:	11fff4ff 	.word	0x11fff4ff
 80461dc:	40011000 	.word	0x40011000
 80461e0:	58024400 	.word	0x58024400
 80461e4:	40004400 	.word	0x40004400
 80461e8:	40004800 	.word	0x40004800
 80461ec:	40004c00 	.word	0x40004c00
 80461f0:	40005000 	.word	0x40005000
 80461f4:	2320      	movs	r3, #32
 80461f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461fa:	e128      	b.n	804644e <UART_SetConfig+0x5a6>
 80461fc:	2340      	movs	r3, #64	@ 0x40
 80461fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046202:	e124      	b.n	804644e <UART_SetConfig+0x5a6>
 8046204:	2380      	movs	r3, #128	@ 0x80
 8046206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804620a:	e120      	b.n	804644e <UART_SetConfig+0x5a6>
 804620c:	697b      	ldr	r3, [r7, #20]
 804620e:	681b      	ldr	r3, [r3, #0]
 8046210:	4acb      	ldr	r2, [pc, #812]	@ (8046540 <UART_SetConfig+0x698>)
 8046212:	4293      	cmp	r3, r2
 8046214:	d176      	bne.n	8046304 <UART_SetConfig+0x45c>
 8046216:	4bcb      	ldr	r3, [pc, #812]	@ (8046544 <UART_SetConfig+0x69c>)
 8046218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804621a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 804621e:	2b28      	cmp	r3, #40	@ 0x28
 8046220:	d86c      	bhi.n	80462fc <UART_SetConfig+0x454>
 8046222:	a201      	add	r2, pc, #4	@ (adr r2, 8046228 <UART_SetConfig+0x380>)
 8046224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046228:	080462cd 	.word	0x080462cd
 804622c:	080462fd 	.word	0x080462fd
 8046230:	080462fd 	.word	0x080462fd
 8046234:	080462fd 	.word	0x080462fd
 8046238:	080462fd 	.word	0x080462fd
 804623c:	080462fd 	.word	0x080462fd
 8046240:	080462fd 	.word	0x080462fd
 8046244:	080462fd 	.word	0x080462fd
 8046248:	080462d5 	.word	0x080462d5
 804624c:	080462fd 	.word	0x080462fd
 8046250:	080462fd 	.word	0x080462fd
 8046254:	080462fd 	.word	0x080462fd
 8046258:	080462fd 	.word	0x080462fd
 804625c:	080462fd 	.word	0x080462fd
 8046260:	080462fd 	.word	0x080462fd
 8046264:	080462fd 	.word	0x080462fd
 8046268:	080462dd 	.word	0x080462dd
 804626c:	080462fd 	.word	0x080462fd
 8046270:	080462fd 	.word	0x080462fd
 8046274:	080462fd 	.word	0x080462fd
 8046278:	080462fd 	.word	0x080462fd
 804627c:	080462fd 	.word	0x080462fd
 8046280:	080462fd 	.word	0x080462fd
 8046284:	080462fd 	.word	0x080462fd
 8046288:	080462e5 	.word	0x080462e5
 804628c:	080462fd 	.word	0x080462fd
 8046290:	080462fd 	.word	0x080462fd
 8046294:	080462fd 	.word	0x080462fd
 8046298:	080462fd 	.word	0x080462fd
 804629c:	080462fd 	.word	0x080462fd
 80462a0:	080462fd 	.word	0x080462fd
 80462a4:	080462fd 	.word	0x080462fd
 80462a8:	080462ed 	.word	0x080462ed
 80462ac:	080462fd 	.word	0x080462fd
 80462b0:	080462fd 	.word	0x080462fd
 80462b4:	080462fd 	.word	0x080462fd
 80462b8:	080462fd 	.word	0x080462fd
 80462bc:	080462fd 	.word	0x080462fd
 80462c0:	080462fd 	.word	0x080462fd
 80462c4:	080462fd 	.word	0x080462fd
 80462c8:	080462f5 	.word	0x080462f5
 80462cc:	2301      	movs	r3, #1
 80462ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462d2:	e0bc      	b.n	804644e <UART_SetConfig+0x5a6>
 80462d4:	2304      	movs	r3, #4
 80462d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462da:	e0b8      	b.n	804644e <UART_SetConfig+0x5a6>
 80462dc:	2308      	movs	r3, #8
 80462de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462e2:	e0b4      	b.n	804644e <UART_SetConfig+0x5a6>
 80462e4:	2310      	movs	r3, #16
 80462e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462ea:	e0b0      	b.n	804644e <UART_SetConfig+0x5a6>
 80462ec:	2320      	movs	r3, #32
 80462ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462f2:	e0ac      	b.n	804644e <UART_SetConfig+0x5a6>
 80462f4:	2340      	movs	r3, #64	@ 0x40
 80462f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462fa:	e0a8      	b.n	804644e <UART_SetConfig+0x5a6>
 80462fc:	2380      	movs	r3, #128	@ 0x80
 80462fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046302:	e0a4      	b.n	804644e <UART_SetConfig+0x5a6>
 8046304:	697b      	ldr	r3, [r7, #20]
 8046306:	681b      	ldr	r3, [r3, #0]
 8046308:	4a8f      	ldr	r2, [pc, #572]	@ (8046548 <UART_SetConfig+0x6a0>)
 804630a:	4293      	cmp	r3, r2
 804630c:	d130      	bne.n	8046370 <UART_SetConfig+0x4c8>
 804630e:	4b8d      	ldr	r3, [pc, #564]	@ (8046544 <UART_SetConfig+0x69c>)
 8046310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8046312:	f003 0307 	and.w	r3, r3, #7
 8046316:	2b05      	cmp	r3, #5
 8046318:	d826      	bhi.n	8046368 <UART_SetConfig+0x4c0>
 804631a:	a201      	add	r2, pc, #4	@ (adr r2, 8046320 <UART_SetConfig+0x478>)
 804631c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046320:	08046339 	.word	0x08046339
 8046324:	08046341 	.word	0x08046341
 8046328:	08046349 	.word	0x08046349
 804632c:	08046351 	.word	0x08046351
 8046330:	08046359 	.word	0x08046359
 8046334:	08046361 	.word	0x08046361
 8046338:	2300      	movs	r3, #0
 804633a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804633e:	e086      	b.n	804644e <UART_SetConfig+0x5a6>
 8046340:	2304      	movs	r3, #4
 8046342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046346:	e082      	b.n	804644e <UART_SetConfig+0x5a6>
 8046348:	2308      	movs	r3, #8
 804634a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804634e:	e07e      	b.n	804644e <UART_SetConfig+0x5a6>
 8046350:	2310      	movs	r3, #16
 8046352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046356:	e07a      	b.n	804644e <UART_SetConfig+0x5a6>
 8046358:	2320      	movs	r3, #32
 804635a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804635e:	e076      	b.n	804644e <UART_SetConfig+0x5a6>
 8046360:	2340      	movs	r3, #64	@ 0x40
 8046362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046366:	e072      	b.n	804644e <UART_SetConfig+0x5a6>
 8046368:	2380      	movs	r3, #128	@ 0x80
 804636a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804636e:	e06e      	b.n	804644e <UART_SetConfig+0x5a6>
 8046370:	697b      	ldr	r3, [r7, #20]
 8046372:	681b      	ldr	r3, [r3, #0]
 8046374:	4a75      	ldr	r2, [pc, #468]	@ (804654c <UART_SetConfig+0x6a4>)
 8046376:	4293      	cmp	r3, r2
 8046378:	d130      	bne.n	80463dc <UART_SetConfig+0x534>
 804637a:	4b72      	ldr	r3, [pc, #456]	@ (8046544 <UART_SetConfig+0x69c>)
 804637c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804637e:	f003 0307 	and.w	r3, r3, #7
 8046382:	2b05      	cmp	r3, #5
 8046384:	d826      	bhi.n	80463d4 <UART_SetConfig+0x52c>
 8046386:	a201      	add	r2, pc, #4	@ (adr r2, 804638c <UART_SetConfig+0x4e4>)
 8046388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804638c:	080463a5 	.word	0x080463a5
 8046390:	080463ad 	.word	0x080463ad
 8046394:	080463b5 	.word	0x080463b5
 8046398:	080463bd 	.word	0x080463bd
 804639c:	080463c5 	.word	0x080463c5
 80463a0:	080463cd 	.word	0x080463cd
 80463a4:	2300      	movs	r3, #0
 80463a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80463aa:	e050      	b.n	804644e <UART_SetConfig+0x5a6>
 80463ac:	2304      	movs	r3, #4
 80463ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80463b2:	e04c      	b.n	804644e <UART_SetConfig+0x5a6>
 80463b4:	2308      	movs	r3, #8
 80463b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80463ba:	e048      	b.n	804644e <UART_SetConfig+0x5a6>
 80463bc:	2310      	movs	r3, #16
 80463be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80463c2:	e044      	b.n	804644e <UART_SetConfig+0x5a6>
 80463c4:	2320      	movs	r3, #32
 80463c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80463ca:	e040      	b.n	804644e <UART_SetConfig+0x5a6>
 80463cc:	2340      	movs	r3, #64	@ 0x40
 80463ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80463d2:	e03c      	b.n	804644e <UART_SetConfig+0x5a6>
 80463d4:	2380      	movs	r3, #128	@ 0x80
 80463d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80463da:	e038      	b.n	804644e <UART_SetConfig+0x5a6>
 80463dc:	697b      	ldr	r3, [r7, #20]
 80463de:	681b      	ldr	r3, [r3, #0]
 80463e0:	4a5b      	ldr	r2, [pc, #364]	@ (8046550 <UART_SetConfig+0x6a8>)
 80463e2:	4293      	cmp	r3, r2
 80463e4:	d130      	bne.n	8046448 <UART_SetConfig+0x5a0>
 80463e6:	4b57      	ldr	r3, [pc, #348]	@ (8046544 <UART_SetConfig+0x69c>)
 80463e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80463ea:	f003 0307 	and.w	r3, r3, #7
 80463ee:	2b05      	cmp	r3, #5
 80463f0:	d826      	bhi.n	8046440 <UART_SetConfig+0x598>
 80463f2:	a201      	add	r2, pc, #4	@ (adr r2, 80463f8 <UART_SetConfig+0x550>)
 80463f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80463f8:	08046411 	.word	0x08046411
 80463fc:	08046419 	.word	0x08046419
 8046400:	08046421 	.word	0x08046421
 8046404:	08046429 	.word	0x08046429
 8046408:	08046431 	.word	0x08046431
 804640c:	08046439 	.word	0x08046439
 8046410:	2302      	movs	r3, #2
 8046412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046416:	e01a      	b.n	804644e <UART_SetConfig+0x5a6>
 8046418:	2304      	movs	r3, #4
 804641a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804641e:	e016      	b.n	804644e <UART_SetConfig+0x5a6>
 8046420:	2308      	movs	r3, #8
 8046422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046426:	e012      	b.n	804644e <UART_SetConfig+0x5a6>
 8046428:	2310      	movs	r3, #16
 804642a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804642e:	e00e      	b.n	804644e <UART_SetConfig+0x5a6>
 8046430:	2320      	movs	r3, #32
 8046432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046436:	e00a      	b.n	804644e <UART_SetConfig+0x5a6>
 8046438:	2340      	movs	r3, #64	@ 0x40
 804643a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804643e:	e006      	b.n	804644e <UART_SetConfig+0x5a6>
 8046440:	2380      	movs	r3, #128	@ 0x80
 8046442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046446:	e002      	b.n	804644e <UART_SetConfig+0x5a6>
 8046448:	2380      	movs	r3, #128	@ 0x80
 804644a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 804644e:	697b      	ldr	r3, [r7, #20]
 8046450:	681b      	ldr	r3, [r3, #0]
 8046452:	4a3f      	ldr	r2, [pc, #252]	@ (8046550 <UART_SetConfig+0x6a8>)
 8046454:	4293      	cmp	r3, r2
 8046456:	f040 80f8 	bne.w	804664a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 804645a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 804645e:	2b20      	cmp	r3, #32
 8046460:	dc46      	bgt.n	80464f0 <UART_SetConfig+0x648>
 8046462:	2b02      	cmp	r3, #2
 8046464:	f2c0 8082 	blt.w	804656c <UART_SetConfig+0x6c4>
 8046468:	3b02      	subs	r3, #2
 804646a:	2b1e      	cmp	r3, #30
 804646c:	d87e      	bhi.n	804656c <UART_SetConfig+0x6c4>
 804646e:	a201      	add	r2, pc, #4	@ (adr r2, 8046474 <UART_SetConfig+0x5cc>)
 8046470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046474:	080464f7 	.word	0x080464f7
 8046478:	0804656d 	.word	0x0804656d
 804647c:	080464ff 	.word	0x080464ff
 8046480:	0804656d 	.word	0x0804656d
 8046484:	0804656d 	.word	0x0804656d
 8046488:	0804656d 	.word	0x0804656d
 804648c:	0804650f 	.word	0x0804650f
 8046490:	0804656d 	.word	0x0804656d
 8046494:	0804656d 	.word	0x0804656d
 8046498:	0804656d 	.word	0x0804656d
 804649c:	0804656d 	.word	0x0804656d
 80464a0:	0804656d 	.word	0x0804656d
 80464a4:	0804656d 	.word	0x0804656d
 80464a8:	0804656d 	.word	0x0804656d
 80464ac:	0804651f 	.word	0x0804651f
 80464b0:	0804656d 	.word	0x0804656d
 80464b4:	0804656d 	.word	0x0804656d
 80464b8:	0804656d 	.word	0x0804656d
 80464bc:	0804656d 	.word	0x0804656d
 80464c0:	0804656d 	.word	0x0804656d
 80464c4:	0804656d 	.word	0x0804656d
 80464c8:	0804656d 	.word	0x0804656d
 80464cc:	0804656d 	.word	0x0804656d
 80464d0:	0804656d 	.word	0x0804656d
 80464d4:	0804656d 	.word	0x0804656d
 80464d8:	0804656d 	.word	0x0804656d
 80464dc:	0804656d 	.word	0x0804656d
 80464e0:	0804656d 	.word	0x0804656d
 80464e4:	0804656d 	.word	0x0804656d
 80464e8:	0804656d 	.word	0x0804656d
 80464ec:	0804655f 	.word	0x0804655f
 80464f0:	2b40      	cmp	r3, #64	@ 0x40
 80464f2:	d037      	beq.n	8046564 <UART_SetConfig+0x6bc>
 80464f4:	e03a      	b.n	804656c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80464f6:	f7ff f865 	bl	80455c4 <HAL_RCCEx_GetD3PCLK1Freq>
 80464fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80464fc:	e03c      	b.n	8046578 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80464fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8046502:	4618      	mov	r0, r3
 8046504:	f7ff f874 	bl	80455f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8046508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804650a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804650c:	e034      	b.n	8046578 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 804650e:	f107 0318 	add.w	r3, r7, #24
 8046512:	4618      	mov	r0, r3
 8046514:	f7ff f9c0 	bl	8045898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8046518:	69fb      	ldr	r3, [r7, #28]
 804651a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804651c:	e02c      	b.n	8046578 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 804651e:	4b09      	ldr	r3, [pc, #36]	@ (8046544 <UART_SetConfig+0x69c>)
 8046520:	681b      	ldr	r3, [r3, #0]
 8046522:	f003 0320 	and.w	r3, r3, #32
 8046526:	2b00      	cmp	r3, #0
 8046528:	d016      	beq.n	8046558 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 804652a:	4b06      	ldr	r3, [pc, #24]	@ (8046544 <UART_SetConfig+0x69c>)
 804652c:	681b      	ldr	r3, [r3, #0]
 804652e:	08db      	lsrs	r3, r3, #3
 8046530:	f003 0303 	and.w	r3, r3, #3
 8046534:	4a07      	ldr	r2, [pc, #28]	@ (8046554 <UART_SetConfig+0x6ac>)
 8046536:	fa22 f303 	lsr.w	r3, r2, r3
 804653a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 804653c:	e01c      	b.n	8046578 <UART_SetConfig+0x6d0>
 804653e:	bf00      	nop
 8046540:	40011400 	.word	0x40011400
 8046544:	58024400 	.word	0x58024400
 8046548:	40007800 	.word	0x40007800
 804654c:	40007c00 	.word	0x40007c00
 8046550:	58000c00 	.word	0x58000c00
 8046554:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8046558:	4b9d      	ldr	r3, [pc, #628]	@ (80467d0 <UART_SetConfig+0x928>)
 804655a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804655c:	e00c      	b.n	8046578 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 804655e:	4b9d      	ldr	r3, [pc, #628]	@ (80467d4 <UART_SetConfig+0x92c>)
 8046560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046562:	e009      	b.n	8046578 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8046564:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8046568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804656a:	e005      	b.n	8046578 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 804656c:	2300      	movs	r3, #0
 804656e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8046570:	2301      	movs	r3, #1
 8046572:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8046576:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8046578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804657a:	2b00      	cmp	r3, #0
 804657c:	f000 81de 	beq.w	804693c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8046580:	697b      	ldr	r3, [r7, #20]
 8046582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8046584:	4a94      	ldr	r2, [pc, #592]	@ (80467d8 <UART_SetConfig+0x930>)
 8046586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804658a:	461a      	mov	r2, r3
 804658c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804658e:	fbb3 f3f2 	udiv	r3, r3, r2
 8046592:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8046594:	697b      	ldr	r3, [r7, #20]
 8046596:	685a      	ldr	r2, [r3, #4]
 8046598:	4613      	mov	r3, r2
 804659a:	005b      	lsls	r3, r3, #1
 804659c:	4413      	add	r3, r2
 804659e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80465a0:	429a      	cmp	r2, r3
 80465a2:	d305      	bcc.n	80465b0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80465a4:	697b      	ldr	r3, [r7, #20]
 80465a6:	685b      	ldr	r3, [r3, #4]
 80465a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80465aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80465ac:	429a      	cmp	r2, r3
 80465ae:	d903      	bls.n	80465b8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80465b0:	2301      	movs	r3, #1
 80465b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80465b6:	e1c1      	b.n	804693c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80465b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80465ba:	2200      	movs	r2, #0
 80465bc:	60bb      	str	r3, [r7, #8]
 80465be:	60fa      	str	r2, [r7, #12]
 80465c0:	697b      	ldr	r3, [r7, #20]
 80465c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80465c4:	4a84      	ldr	r2, [pc, #528]	@ (80467d8 <UART_SetConfig+0x930>)
 80465c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80465ca:	b29b      	uxth	r3, r3
 80465cc:	2200      	movs	r2, #0
 80465ce:	603b      	str	r3, [r7, #0]
 80465d0:	607a      	str	r2, [r7, #4]
 80465d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80465d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80465da:	f7f9 fed1 	bl	8040380 <__aeabi_uldivmod>
 80465de:	4602      	mov	r2, r0
 80465e0:	460b      	mov	r3, r1
 80465e2:	4610      	mov	r0, r2
 80465e4:	4619      	mov	r1, r3
 80465e6:	f04f 0200 	mov.w	r2, #0
 80465ea:	f04f 0300 	mov.w	r3, #0
 80465ee:	020b      	lsls	r3, r1, #8
 80465f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80465f4:	0202      	lsls	r2, r0, #8
 80465f6:	6979      	ldr	r1, [r7, #20]
 80465f8:	6849      	ldr	r1, [r1, #4]
 80465fa:	0849      	lsrs	r1, r1, #1
 80465fc:	2000      	movs	r0, #0
 80465fe:	460c      	mov	r4, r1
 8046600:	4605      	mov	r5, r0
 8046602:	eb12 0804 	adds.w	r8, r2, r4
 8046606:	eb43 0905 	adc.w	r9, r3, r5
 804660a:	697b      	ldr	r3, [r7, #20]
 804660c:	685b      	ldr	r3, [r3, #4]
 804660e:	2200      	movs	r2, #0
 8046610:	469a      	mov	sl, r3
 8046612:	4693      	mov	fp, r2
 8046614:	4652      	mov	r2, sl
 8046616:	465b      	mov	r3, fp
 8046618:	4640      	mov	r0, r8
 804661a:	4649      	mov	r1, r9
 804661c:	f7f9 feb0 	bl	8040380 <__aeabi_uldivmod>
 8046620:	4602      	mov	r2, r0
 8046622:	460b      	mov	r3, r1
 8046624:	4613      	mov	r3, r2
 8046626:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8046628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804662a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 804662e:	d308      	bcc.n	8046642 <UART_SetConfig+0x79a>
 8046630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8046636:	d204      	bcs.n	8046642 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8046638:	697b      	ldr	r3, [r7, #20]
 804663a:	681b      	ldr	r3, [r3, #0]
 804663c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 804663e:	60da      	str	r2, [r3, #12]
 8046640:	e17c      	b.n	804693c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8046642:	2301      	movs	r3, #1
 8046644:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8046648:	e178      	b.n	804693c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 804664a:	697b      	ldr	r3, [r7, #20]
 804664c:	69db      	ldr	r3, [r3, #28]
 804664e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8046652:	f040 80c5 	bne.w	80467e0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8046656:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 804665a:	2b20      	cmp	r3, #32
 804665c:	dc48      	bgt.n	80466f0 <UART_SetConfig+0x848>
 804665e:	2b00      	cmp	r3, #0
 8046660:	db7b      	blt.n	804675a <UART_SetConfig+0x8b2>
 8046662:	2b20      	cmp	r3, #32
 8046664:	d879      	bhi.n	804675a <UART_SetConfig+0x8b2>
 8046666:	a201      	add	r2, pc, #4	@ (adr r2, 804666c <UART_SetConfig+0x7c4>)
 8046668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804666c:	080466f7 	.word	0x080466f7
 8046670:	080466ff 	.word	0x080466ff
 8046674:	0804675b 	.word	0x0804675b
 8046678:	0804675b 	.word	0x0804675b
 804667c:	08046707 	.word	0x08046707
 8046680:	0804675b 	.word	0x0804675b
 8046684:	0804675b 	.word	0x0804675b
 8046688:	0804675b 	.word	0x0804675b
 804668c:	08046717 	.word	0x08046717
 8046690:	0804675b 	.word	0x0804675b
 8046694:	0804675b 	.word	0x0804675b
 8046698:	0804675b 	.word	0x0804675b
 804669c:	0804675b 	.word	0x0804675b
 80466a0:	0804675b 	.word	0x0804675b
 80466a4:	0804675b 	.word	0x0804675b
 80466a8:	0804675b 	.word	0x0804675b
 80466ac:	08046727 	.word	0x08046727
 80466b0:	0804675b 	.word	0x0804675b
 80466b4:	0804675b 	.word	0x0804675b
 80466b8:	0804675b 	.word	0x0804675b
 80466bc:	0804675b 	.word	0x0804675b
 80466c0:	0804675b 	.word	0x0804675b
 80466c4:	0804675b 	.word	0x0804675b
 80466c8:	0804675b 	.word	0x0804675b
 80466cc:	0804675b 	.word	0x0804675b
 80466d0:	0804675b 	.word	0x0804675b
 80466d4:	0804675b 	.word	0x0804675b
 80466d8:	0804675b 	.word	0x0804675b
 80466dc:	0804675b 	.word	0x0804675b
 80466e0:	0804675b 	.word	0x0804675b
 80466e4:	0804675b 	.word	0x0804675b
 80466e8:	0804675b 	.word	0x0804675b
 80466ec:	0804674d 	.word	0x0804674d
 80466f0:	2b40      	cmp	r3, #64	@ 0x40
 80466f2:	d02e      	beq.n	8046752 <UART_SetConfig+0x8aa>
 80466f4:	e031      	b.n	804675a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80466f6:	f7fd fcef 	bl	80440d8 <HAL_RCC_GetPCLK1Freq>
 80466fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80466fc:	e033      	b.n	8046766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80466fe:	f7fd fd01 	bl	8044104 <HAL_RCC_GetPCLK2Freq>
 8046702:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8046704:	e02f      	b.n	8046766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8046706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 804670a:	4618      	mov	r0, r3
 804670c:	f7fe ff70 	bl	80455f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8046710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046714:	e027      	b.n	8046766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8046716:	f107 0318 	add.w	r3, r7, #24
 804671a:	4618      	mov	r0, r3
 804671c:	f7ff f8bc 	bl	8045898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8046720:	69fb      	ldr	r3, [r7, #28]
 8046722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046724:	e01f      	b.n	8046766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8046726:	4b2d      	ldr	r3, [pc, #180]	@ (80467dc <UART_SetConfig+0x934>)
 8046728:	681b      	ldr	r3, [r3, #0]
 804672a:	f003 0320 	and.w	r3, r3, #32
 804672e:	2b00      	cmp	r3, #0
 8046730:	d009      	beq.n	8046746 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8046732:	4b2a      	ldr	r3, [pc, #168]	@ (80467dc <UART_SetConfig+0x934>)
 8046734:	681b      	ldr	r3, [r3, #0]
 8046736:	08db      	lsrs	r3, r3, #3
 8046738:	f003 0303 	and.w	r3, r3, #3
 804673c:	4a24      	ldr	r2, [pc, #144]	@ (80467d0 <UART_SetConfig+0x928>)
 804673e:	fa22 f303 	lsr.w	r3, r2, r3
 8046742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8046744:	e00f      	b.n	8046766 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8046746:	4b22      	ldr	r3, [pc, #136]	@ (80467d0 <UART_SetConfig+0x928>)
 8046748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804674a:	e00c      	b.n	8046766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 804674c:	4b21      	ldr	r3, [pc, #132]	@ (80467d4 <UART_SetConfig+0x92c>)
 804674e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046750:	e009      	b.n	8046766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8046752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8046756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046758:	e005      	b.n	8046766 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 804675a:	2300      	movs	r3, #0
 804675c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 804675e:	2301      	movs	r3, #1
 8046760:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8046764:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8046766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8046768:	2b00      	cmp	r3, #0
 804676a:	f000 80e7 	beq.w	804693c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804676e:	697b      	ldr	r3, [r7, #20]
 8046770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8046772:	4a19      	ldr	r2, [pc, #100]	@ (80467d8 <UART_SetConfig+0x930>)
 8046774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8046778:	461a      	mov	r2, r3
 804677a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804677c:	fbb3 f3f2 	udiv	r3, r3, r2
 8046780:	005a      	lsls	r2, r3, #1
 8046782:	697b      	ldr	r3, [r7, #20]
 8046784:	685b      	ldr	r3, [r3, #4]
 8046786:	085b      	lsrs	r3, r3, #1
 8046788:	441a      	add	r2, r3
 804678a:	697b      	ldr	r3, [r7, #20]
 804678c:	685b      	ldr	r3, [r3, #4]
 804678e:	fbb2 f3f3 	udiv	r3, r2, r3
 8046792:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8046794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046796:	2b0f      	cmp	r3, #15
 8046798:	d916      	bls.n	80467c8 <UART_SetConfig+0x920>
 804679a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804679c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80467a0:	d212      	bcs.n	80467c8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80467a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80467a4:	b29b      	uxth	r3, r3
 80467a6:	f023 030f 	bic.w	r3, r3, #15
 80467aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80467ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80467ae:	085b      	lsrs	r3, r3, #1
 80467b0:	b29b      	uxth	r3, r3
 80467b2:	f003 0307 	and.w	r3, r3, #7
 80467b6:	b29a      	uxth	r2, r3
 80467b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80467ba:	4313      	orrs	r3, r2
 80467bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80467be:	697b      	ldr	r3, [r7, #20]
 80467c0:	681b      	ldr	r3, [r3, #0]
 80467c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80467c4:	60da      	str	r2, [r3, #12]
 80467c6:	e0b9      	b.n	804693c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80467c8:	2301      	movs	r3, #1
 80467ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80467ce:	e0b5      	b.n	804693c <UART_SetConfig+0xa94>
 80467d0:	03d09000 	.word	0x03d09000
 80467d4:	003d0900 	.word	0x003d0900
 80467d8:	0804ba40 	.word	0x0804ba40
 80467dc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80467e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80467e4:	2b20      	cmp	r3, #32
 80467e6:	dc49      	bgt.n	804687c <UART_SetConfig+0x9d4>
 80467e8:	2b00      	cmp	r3, #0
 80467ea:	db7c      	blt.n	80468e6 <UART_SetConfig+0xa3e>
 80467ec:	2b20      	cmp	r3, #32
 80467ee:	d87a      	bhi.n	80468e6 <UART_SetConfig+0xa3e>
 80467f0:	a201      	add	r2, pc, #4	@ (adr r2, 80467f8 <UART_SetConfig+0x950>)
 80467f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80467f6:	bf00      	nop
 80467f8:	08046883 	.word	0x08046883
 80467fc:	0804688b 	.word	0x0804688b
 8046800:	080468e7 	.word	0x080468e7
 8046804:	080468e7 	.word	0x080468e7
 8046808:	08046893 	.word	0x08046893
 804680c:	080468e7 	.word	0x080468e7
 8046810:	080468e7 	.word	0x080468e7
 8046814:	080468e7 	.word	0x080468e7
 8046818:	080468a3 	.word	0x080468a3
 804681c:	080468e7 	.word	0x080468e7
 8046820:	080468e7 	.word	0x080468e7
 8046824:	080468e7 	.word	0x080468e7
 8046828:	080468e7 	.word	0x080468e7
 804682c:	080468e7 	.word	0x080468e7
 8046830:	080468e7 	.word	0x080468e7
 8046834:	080468e7 	.word	0x080468e7
 8046838:	080468b3 	.word	0x080468b3
 804683c:	080468e7 	.word	0x080468e7
 8046840:	080468e7 	.word	0x080468e7
 8046844:	080468e7 	.word	0x080468e7
 8046848:	080468e7 	.word	0x080468e7
 804684c:	080468e7 	.word	0x080468e7
 8046850:	080468e7 	.word	0x080468e7
 8046854:	080468e7 	.word	0x080468e7
 8046858:	080468e7 	.word	0x080468e7
 804685c:	080468e7 	.word	0x080468e7
 8046860:	080468e7 	.word	0x080468e7
 8046864:	080468e7 	.word	0x080468e7
 8046868:	080468e7 	.word	0x080468e7
 804686c:	080468e7 	.word	0x080468e7
 8046870:	080468e7 	.word	0x080468e7
 8046874:	080468e7 	.word	0x080468e7
 8046878:	080468d9 	.word	0x080468d9
 804687c:	2b40      	cmp	r3, #64	@ 0x40
 804687e:	d02e      	beq.n	80468de <UART_SetConfig+0xa36>
 8046880:	e031      	b.n	80468e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8046882:	f7fd fc29 	bl	80440d8 <HAL_RCC_GetPCLK1Freq>
 8046886:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8046888:	e033      	b.n	80468f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804688a:	f7fd fc3b 	bl	8044104 <HAL_RCC_GetPCLK2Freq>
 804688e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8046890:	e02f      	b.n	80468f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8046892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8046896:	4618      	mov	r0, r3
 8046898:	f7fe feaa 	bl	80455f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 804689c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804689e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80468a0:	e027      	b.n	80468f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80468a2:	f107 0318 	add.w	r3, r7, #24
 80468a6:	4618      	mov	r0, r3
 80468a8:	f7fe fff6 	bl	8045898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80468ac:	69fb      	ldr	r3, [r7, #28]
 80468ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80468b0:	e01f      	b.n	80468f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80468b2:	4b2d      	ldr	r3, [pc, #180]	@ (8046968 <UART_SetConfig+0xac0>)
 80468b4:	681b      	ldr	r3, [r3, #0]
 80468b6:	f003 0320 	and.w	r3, r3, #32
 80468ba:	2b00      	cmp	r3, #0
 80468bc:	d009      	beq.n	80468d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80468be:	4b2a      	ldr	r3, [pc, #168]	@ (8046968 <UART_SetConfig+0xac0>)
 80468c0:	681b      	ldr	r3, [r3, #0]
 80468c2:	08db      	lsrs	r3, r3, #3
 80468c4:	f003 0303 	and.w	r3, r3, #3
 80468c8:	4a28      	ldr	r2, [pc, #160]	@ (804696c <UART_SetConfig+0xac4>)
 80468ca:	fa22 f303 	lsr.w	r3, r2, r3
 80468ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80468d0:	e00f      	b.n	80468f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80468d2:	4b26      	ldr	r3, [pc, #152]	@ (804696c <UART_SetConfig+0xac4>)
 80468d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80468d6:	e00c      	b.n	80468f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80468d8:	4b25      	ldr	r3, [pc, #148]	@ (8046970 <UART_SetConfig+0xac8>)
 80468da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80468dc:	e009      	b.n	80468f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80468de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80468e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80468e4:	e005      	b.n	80468f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80468e6:	2300      	movs	r3, #0
 80468e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80468ea:	2301      	movs	r3, #1
 80468ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80468f0:	bf00      	nop
    }

    if (pclk != 0U)
 80468f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80468f4:	2b00      	cmp	r3, #0
 80468f6:	d021      	beq.n	804693c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80468f8:	697b      	ldr	r3, [r7, #20]
 80468fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80468fc:	4a1d      	ldr	r2, [pc, #116]	@ (8046974 <UART_SetConfig+0xacc>)
 80468fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8046902:	461a      	mov	r2, r3
 8046904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8046906:	fbb3 f2f2 	udiv	r2, r3, r2
 804690a:	697b      	ldr	r3, [r7, #20]
 804690c:	685b      	ldr	r3, [r3, #4]
 804690e:	085b      	lsrs	r3, r3, #1
 8046910:	441a      	add	r2, r3
 8046912:	697b      	ldr	r3, [r7, #20]
 8046914:	685b      	ldr	r3, [r3, #4]
 8046916:	fbb2 f3f3 	udiv	r3, r2, r3
 804691a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804691c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804691e:	2b0f      	cmp	r3, #15
 8046920:	d909      	bls.n	8046936 <UART_SetConfig+0xa8e>
 8046922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8046928:	d205      	bcs.n	8046936 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 804692a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804692c:	b29a      	uxth	r2, r3
 804692e:	697b      	ldr	r3, [r7, #20]
 8046930:	681b      	ldr	r3, [r3, #0]
 8046932:	60da      	str	r2, [r3, #12]
 8046934:	e002      	b.n	804693c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8046936:	2301      	movs	r3, #1
 8046938:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 804693c:	697b      	ldr	r3, [r7, #20]
 804693e:	2201      	movs	r2, #1
 8046940:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8046944:	697b      	ldr	r3, [r7, #20]
 8046946:	2201      	movs	r2, #1
 8046948:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 804694c:	697b      	ldr	r3, [r7, #20]
 804694e:	2200      	movs	r2, #0
 8046950:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8046952:	697b      	ldr	r3, [r7, #20]
 8046954:	2200      	movs	r2, #0
 8046956:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8046958:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 804695c:	4618      	mov	r0, r3
 804695e:	3748      	adds	r7, #72	@ 0x48
 8046960:	46bd      	mov	sp, r7
 8046962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8046966:	bf00      	nop
 8046968:	58024400 	.word	0x58024400
 804696c:	03d09000 	.word	0x03d09000
 8046970:	003d0900 	.word	0x003d0900
 8046974:	0804ba40 	.word	0x0804ba40

08046978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8046978:	b480      	push	{r7}
 804697a:	b083      	sub	sp, #12
 804697c:	af00      	add	r7, sp, #0
 804697e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8046980:	687b      	ldr	r3, [r7, #4]
 8046982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046984:	f003 0308 	and.w	r3, r3, #8
 8046988:	2b00      	cmp	r3, #0
 804698a:	d00a      	beq.n	80469a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 804698c:	687b      	ldr	r3, [r7, #4]
 804698e:	681b      	ldr	r3, [r3, #0]
 8046990:	685b      	ldr	r3, [r3, #4]
 8046992:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8046996:	687b      	ldr	r3, [r7, #4]
 8046998:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 804699a:	687b      	ldr	r3, [r7, #4]
 804699c:	681b      	ldr	r3, [r3, #0]
 804699e:	430a      	orrs	r2, r1
 80469a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80469a2:	687b      	ldr	r3, [r7, #4]
 80469a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80469a6:	f003 0301 	and.w	r3, r3, #1
 80469aa:	2b00      	cmp	r3, #0
 80469ac:	d00a      	beq.n	80469c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80469ae:	687b      	ldr	r3, [r7, #4]
 80469b0:	681b      	ldr	r3, [r3, #0]
 80469b2:	685b      	ldr	r3, [r3, #4]
 80469b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80469b8:	687b      	ldr	r3, [r7, #4]
 80469ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80469bc:	687b      	ldr	r3, [r7, #4]
 80469be:	681b      	ldr	r3, [r3, #0]
 80469c0:	430a      	orrs	r2, r1
 80469c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80469c4:	687b      	ldr	r3, [r7, #4]
 80469c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80469c8:	f003 0302 	and.w	r3, r3, #2
 80469cc:	2b00      	cmp	r3, #0
 80469ce:	d00a      	beq.n	80469e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80469d0:	687b      	ldr	r3, [r7, #4]
 80469d2:	681b      	ldr	r3, [r3, #0]
 80469d4:	685b      	ldr	r3, [r3, #4]
 80469d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80469da:	687b      	ldr	r3, [r7, #4]
 80469dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80469de:	687b      	ldr	r3, [r7, #4]
 80469e0:	681b      	ldr	r3, [r3, #0]
 80469e2:	430a      	orrs	r2, r1
 80469e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80469e6:	687b      	ldr	r3, [r7, #4]
 80469e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80469ea:	f003 0304 	and.w	r3, r3, #4
 80469ee:	2b00      	cmp	r3, #0
 80469f0:	d00a      	beq.n	8046a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80469f2:	687b      	ldr	r3, [r7, #4]
 80469f4:	681b      	ldr	r3, [r3, #0]
 80469f6:	685b      	ldr	r3, [r3, #4]
 80469f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80469fc:	687b      	ldr	r3, [r7, #4]
 80469fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8046a00:	687b      	ldr	r3, [r7, #4]
 8046a02:	681b      	ldr	r3, [r3, #0]
 8046a04:	430a      	orrs	r2, r1
 8046a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8046a08:	687b      	ldr	r3, [r7, #4]
 8046a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046a0c:	f003 0310 	and.w	r3, r3, #16
 8046a10:	2b00      	cmp	r3, #0
 8046a12:	d00a      	beq.n	8046a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8046a14:	687b      	ldr	r3, [r7, #4]
 8046a16:	681b      	ldr	r3, [r3, #0]
 8046a18:	689b      	ldr	r3, [r3, #8]
 8046a1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8046a1e:	687b      	ldr	r3, [r7, #4]
 8046a20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8046a22:	687b      	ldr	r3, [r7, #4]
 8046a24:	681b      	ldr	r3, [r3, #0]
 8046a26:	430a      	orrs	r2, r1
 8046a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8046a2a:	687b      	ldr	r3, [r7, #4]
 8046a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046a2e:	f003 0320 	and.w	r3, r3, #32
 8046a32:	2b00      	cmp	r3, #0
 8046a34:	d00a      	beq.n	8046a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8046a36:	687b      	ldr	r3, [r7, #4]
 8046a38:	681b      	ldr	r3, [r3, #0]
 8046a3a:	689b      	ldr	r3, [r3, #8]
 8046a3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8046a40:	687b      	ldr	r3, [r7, #4]
 8046a42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8046a44:	687b      	ldr	r3, [r7, #4]
 8046a46:	681b      	ldr	r3, [r3, #0]
 8046a48:	430a      	orrs	r2, r1
 8046a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8046a4c:	687b      	ldr	r3, [r7, #4]
 8046a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8046a54:	2b00      	cmp	r3, #0
 8046a56:	d01a      	beq.n	8046a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8046a58:	687b      	ldr	r3, [r7, #4]
 8046a5a:	681b      	ldr	r3, [r3, #0]
 8046a5c:	685b      	ldr	r3, [r3, #4]
 8046a5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8046a62:	687b      	ldr	r3, [r7, #4]
 8046a64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8046a66:	687b      	ldr	r3, [r7, #4]
 8046a68:	681b      	ldr	r3, [r3, #0]
 8046a6a:	430a      	orrs	r2, r1
 8046a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8046a6e:	687b      	ldr	r3, [r7, #4]
 8046a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8046a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8046a76:	d10a      	bne.n	8046a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8046a78:	687b      	ldr	r3, [r7, #4]
 8046a7a:	681b      	ldr	r3, [r3, #0]
 8046a7c:	685b      	ldr	r3, [r3, #4]
 8046a7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8046a82:	687b      	ldr	r3, [r7, #4]
 8046a84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8046a86:	687b      	ldr	r3, [r7, #4]
 8046a88:	681b      	ldr	r3, [r3, #0]
 8046a8a:	430a      	orrs	r2, r1
 8046a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8046a8e:	687b      	ldr	r3, [r7, #4]
 8046a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8046a96:	2b00      	cmp	r3, #0
 8046a98:	d00a      	beq.n	8046ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8046a9a:	687b      	ldr	r3, [r7, #4]
 8046a9c:	681b      	ldr	r3, [r3, #0]
 8046a9e:	685b      	ldr	r3, [r3, #4]
 8046aa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8046aa4:	687b      	ldr	r3, [r7, #4]
 8046aa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8046aa8:	687b      	ldr	r3, [r7, #4]
 8046aaa:	681b      	ldr	r3, [r3, #0]
 8046aac:	430a      	orrs	r2, r1
 8046aae:	605a      	str	r2, [r3, #4]
  }
}
 8046ab0:	bf00      	nop
 8046ab2:	370c      	adds	r7, #12
 8046ab4:	46bd      	mov	sp, r7
 8046ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046aba:	4770      	bx	lr

08046abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8046abc:	b580      	push	{r7, lr}
 8046abe:	b098      	sub	sp, #96	@ 0x60
 8046ac0:	af02      	add	r7, sp, #8
 8046ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8046ac4:	687b      	ldr	r3, [r7, #4]
 8046ac6:	2200      	movs	r2, #0
 8046ac8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8046acc:	f7fa fb84 	bl	80411d8 <HAL_GetTick>
 8046ad0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8046ad2:	687b      	ldr	r3, [r7, #4]
 8046ad4:	681b      	ldr	r3, [r3, #0]
 8046ad6:	681b      	ldr	r3, [r3, #0]
 8046ad8:	f003 0308 	and.w	r3, r3, #8
 8046adc:	2b08      	cmp	r3, #8
 8046ade:	d12f      	bne.n	8046b40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8046ae0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8046ae4:	9300      	str	r3, [sp, #0]
 8046ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8046ae8:	2200      	movs	r2, #0
 8046aea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8046aee:	6878      	ldr	r0, [r7, #4]
 8046af0:	f000 f88e 	bl	8046c10 <UART_WaitOnFlagUntilTimeout>
 8046af4:	4603      	mov	r3, r0
 8046af6:	2b00      	cmp	r3, #0
 8046af8:	d022      	beq.n	8046b40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8046afa:	687b      	ldr	r3, [r7, #4]
 8046afc:	681b      	ldr	r3, [r3, #0]
 8046afe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046b02:	e853 3f00 	ldrex	r3, [r3]
 8046b06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8046b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8046b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8046b0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8046b10:	687b      	ldr	r3, [r7, #4]
 8046b12:	681b      	ldr	r3, [r3, #0]
 8046b14:	461a      	mov	r2, r3
 8046b16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8046b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8046b1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046b1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8046b1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8046b20:	e841 2300 	strex	r3, r2, [r1]
 8046b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8046b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8046b28:	2b00      	cmp	r3, #0
 8046b2a:	d1e6      	bne.n	8046afa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8046b2c:	687b      	ldr	r3, [r7, #4]
 8046b2e:	2220      	movs	r2, #32
 8046b30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8046b34:	687b      	ldr	r3, [r7, #4]
 8046b36:	2200      	movs	r2, #0
 8046b38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8046b3c:	2303      	movs	r3, #3
 8046b3e:	e063      	b.n	8046c08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8046b40:	687b      	ldr	r3, [r7, #4]
 8046b42:	681b      	ldr	r3, [r3, #0]
 8046b44:	681b      	ldr	r3, [r3, #0]
 8046b46:	f003 0304 	and.w	r3, r3, #4
 8046b4a:	2b04      	cmp	r3, #4
 8046b4c:	d149      	bne.n	8046be2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8046b4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8046b52:	9300      	str	r3, [sp, #0]
 8046b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8046b56:	2200      	movs	r2, #0
 8046b58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8046b5c:	6878      	ldr	r0, [r7, #4]
 8046b5e:	f000 f857 	bl	8046c10 <UART_WaitOnFlagUntilTimeout>
 8046b62:	4603      	mov	r3, r0
 8046b64:	2b00      	cmp	r3, #0
 8046b66:	d03c      	beq.n	8046be2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8046b68:	687b      	ldr	r3, [r7, #4]
 8046b6a:	681b      	ldr	r3, [r3, #0]
 8046b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8046b70:	e853 3f00 	ldrex	r3, [r3]
 8046b74:	623b      	str	r3, [r7, #32]
   return(result);
 8046b76:	6a3b      	ldr	r3, [r7, #32]
 8046b78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8046b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8046b7e:	687b      	ldr	r3, [r7, #4]
 8046b80:	681b      	ldr	r3, [r3, #0]
 8046b82:	461a      	mov	r2, r3
 8046b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8046b86:	633b      	str	r3, [r7, #48]	@ 0x30
 8046b88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046b8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8046b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8046b8e:	e841 2300 	strex	r3, r2, [r1]
 8046b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8046b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046b96:	2b00      	cmp	r3, #0
 8046b98:	d1e6      	bne.n	8046b68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8046b9a:	687b      	ldr	r3, [r7, #4]
 8046b9c:	681b      	ldr	r3, [r3, #0]
 8046b9e:	3308      	adds	r3, #8
 8046ba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046ba2:	693b      	ldr	r3, [r7, #16]
 8046ba4:	e853 3f00 	ldrex	r3, [r3]
 8046ba8:	60fb      	str	r3, [r7, #12]
   return(result);
 8046baa:	68fb      	ldr	r3, [r7, #12]
 8046bac:	f023 0301 	bic.w	r3, r3, #1
 8046bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8046bb2:	687b      	ldr	r3, [r7, #4]
 8046bb4:	681b      	ldr	r3, [r3, #0]
 8046bb6:	3308      	adds	r3, #8
 8046bb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8046bba:	61fa      	str	r2, [r7, #28]
 8046bbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046bbe:	69b9      	ldr	r1, [r7, #24]
 8046bc0:	69fa      	ldr	r2, [r7, #28]
 8046bc2:	e841 2300 	strex	r3, r2, [r1]
 8046bc6:	617b      	str	r3, [r7, #20]
   return(result);
 8046bc8:	697b      	ldr	r3, [r7, #20]
 8046bca:	2b00      	cmp	r3, #0
 8046bcc:	d1e5      	bne.n	8046b9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8046bce:	687b      	ldr	r3, [r7, #4]
 8046bd0:	2220      	movs	r2, #32
 8046bd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8046bd6:	687b      	ldr	r3, [r7, #4]
 8046bd8:	2200      	movs	r2, #0
 8046bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8046bde:	2303      	movs	r3, #3
 8046be0:	e012      	b.n	8046c08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8046be2:	687b      	ldr	r3, [r7, #4]
 8046be4:	2220      	movs	r2, #32
 8046be6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8046bea:	687b      	ldr	r3, [r7, #4]
 8046bec:	2220      	movs	r2, #32
 8046bee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8046bf2:	687b      	ldr	r3, [r7, #4]
 8046bf4:	2200      	movs	r2, #0
 8046bf6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8046bf8:	687b      	ldr	r3, [r7, #4]
 8046bfa:	2200      	movs	r2, #0
 8046bfc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8046bfe:	687b      	ldr	r3, [r7, #4]
 8046c00:	2200      	movs	r2, #0
 8046c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8046c06:	2300      	movs	r3, #0
}
 8046c08:	4618      	mov	r0, r3
 8046c0a:	3758      	adds	r7, #88	@ 0x58
 8046c0c:	46bd      	mov	sp, r7
 8046c0e:	bd80      	pop	{r7, pc}

08046c10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8046c10:	b580      	push	{r7, lr}
 8046c12:	b084      	sub	sp, #16
 8046c14:	af00      	add	r7, sp, #0
 8046c16:	60f8      	str	r0, [r7, #12]
 8046c18:	60b9      	str	r1, [r7, #8]
 8046c1a:	603b      	str	r3, [r7, #0]
 8046c1c:	4613      	mov	r3, r2
 8046c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8046c20:	e04f      	b.n	8046cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8046c22:	69bb      	ldr	r3, [r7, #24]
 8046c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046c28:	d04b      	beq.n	8046cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8046c2a:	f7fa fad5 	bl	80411d8 <HAL_GetTick>
 8046c2e:	4602      	mov	r2, r0
 8046c30:	683b      	ldr	r3, [r7, #0]
 8046c32:	1ad3      	subs	r3, r2, r3
 8046c34:	69ba      	ldr	r2, [r7, #24]
 8046c36:	429a      	cmp	r2, r3
 8046c38:	d302      	bcc.n	8046c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8046c3a:	69bb      	ldr	r3, [r7, #24]
 8046c3c:	2b00      	cmp	r3, #0
 8046c3e:	d101      	bne.n	8046c44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8046c40:	2303      	movs	r3, #3
 8046c42:	e04e      	b.n	8046ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8046c44:	68fb      	ldr	r3, [r7, #12]
 8046c46:	681b      	ldr	r3, [r3, #0]
 8046c48:	681b      	ldr	r3, [r3, #0]
 8046c4a:	f003 0304 	and.w	r3, r3, #4
 8046c4e:	2b00      	cmp	r3, #0
 8046c50:	d037      	beq.n	8046cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8046c52:	68bb      	ldr	r3, [r7, #8]
 8046c54:	2b80      	cmp	r3, #128	@ 0x80
 8046c56:	d034      	beq.n	8046cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8046c58:	68bb      	ldr	r3, [r7, #8]
 8046c5a:	2b40      	cmp	r3, #64	@ 0x40
 8046c5c:	d031      	beq.n	8046cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8046c5e:	68fb      	ldr	r3, [r7, #12]
 8046c60:	681b      	ldr	r3, [r3, #0]
 8046c62:	69db      	ldr	r3, [r3, #28]
 8046c64:	f003 0308 	and.w	r3, r3, #8
 8046c68:	2b08      	cmp	r3, #8
 8046c6a:	d110      	bne.n	8046c8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8046c6c:	68fb      	ldr	r3, [r7, #12]
 8046c6e:	681b      	ldr	r3, [r3, #0]
 8046c70:	2208      	movs	r2, #8
 8046c72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8046c74:	68f8      	ldr	r0, [r7, #12]
 8046c76:	f000 f839 	bl	8046cec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8046c7a:	68fb      	ldr	r3, [r7, #12]
 8046c7c:	2208      	movs	r2, #8
 8046c7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8046c82:	68fb      	ldr	r3, [r7, #12]
 8046c84:	2200      	movs	r2, #0
 8046c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8046c8a:	2301      	movs	r3, #1
 8046c8c:	e029      	b.n	8046ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8046c8e:	68fb      	ldr	r3, [r7, #12]
 8046c90:	681b      	ldr	r3, [r3, #0]
 8046c92:	69db      	ldr	r3, [r3, #28]
 8046c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8046c98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8046c9c:	d111      	bne.n	8046cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8046c9e:	68fb      	ldr	r3, [r7, #12]
 8046ca0:	681b      	ldr	r3, [r3, #0]
 8046ca2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8046ca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8046ca8:	68f8      	ldr	r0, [r7, #12]
 8046caa:	f000 f81f 	bl	8046cec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8046cae:	68fb      	ldr	r3, [r7, #12]
 8046cb0:	2220      	movs	r2, #32
 8046cb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8046cb6:	68fb      	ldr	r3, [r7, #12]
 8046cb8:	2200      	movs	r2, #0
 8046cba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8046cbe:	2303      	movs	r3, #3
 8046cc0:	e00f      	b.n	8046ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8046cc2:	68fb      	ldr	r3, [r7, #12]
 8046cc4:	681b      	ldr	r3, [r3, #0]
 8046cc6:	69da      	ldr	r2, [r3, #28]
 8046cc8:	68bb      	ldr	r3, [r7, #8]
 8046cca:	4013      	ands	r3, r2
 8046ccc:	68ba      	ldr	r2, [r7, #8]
 8046cce:	429a      	cmp	r2, r3
 8046cd0:	bf0c      	ite	eq
 8046cd2:	2301      	moveq	r3, #1
 8046cd4:	2300      	movne	r3, #0
 8046cd6:	b2db      	uxtb	r3, r3
 8046cd8:	461a      	mov	r2, r3
 8046cda:	79fb      	ldrb	r3, [r7, #7]
 8046cdc:	429a      	cmp	r2, r3
 8046cde:	d0a0      	beq.n	8046c22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8046ce0:	2300      	movs	r3, #0
}
 8046ce2:	4618      	mov	r0, r3
 8046ce4:	3710      	adds	r7, #16
 8046ce6:	46bd      	mov	sp, r7
 8046ce8:	bd80      	pop	{r7, pc}
	...

08046cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8046cec:	b480      	push	{r7}
 8046cee:	b095      	sub	sp, #84	@ 0x54
 8046cf0:	af00      	add	r7, sp, #0
 8046cf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8046cf4:	687b      	ldr	r3, [r7, #4]
 8046cf6:	681b      	ldr	r3, [r3, #0]
 8046cf8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8046cfc:	e853 3f00 	ldrex	r3, [r3]
 8046d00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8046d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8046d04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8046d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8046d0a:	687b      	ldr	r3, [r7, #4]
 8046d0c:	681b      	ldr	r3, [r3, #0]
 8046d0e:	461a      	mov	r2, r3
 8046d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8046d12:	643b      	str	r3, [r7, #64]	@ 0x40
 8046d14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046d16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8046d18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8046d1a:	e841 2300 	strex	r3, r2, [r1]
 8046d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8046d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046d22:	2b00      	cmp	r3, #0
 8046d24:	d1e6      	bne.n	8046cf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8046d26:	687b      	ldr	r3, [r7, #4]
 8046d28:	681b      	ldr	r3, [r3, #0]
 8046d2a:	3308      	adds	r3, #8
 8046d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046d2e:	6a3b      	ldr	r3, [r7, #32]
 8046d30:	e853 3f00 	ldrex	r3, [r3]
 8046d34:	61fb      	str	r3, [r7, #28]
   return(result);
 8046d36:	69fa      	ldr	r2, [r7, #28]
 8046d38:	4b1e      	ldr	r3, [pc, #120]	@ (8046db4 <UART_EndRxTransfer+0xc8>)
 8046d3a:	4013      	ands	r3, r2
 8046d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8046d3e:	687b      	ldr	r3, [r7, #4]
 8046d40:	681b      	ldr	r3, [r3, #0]
 8046d42:	3308      	adds	r3, #8
 8046d44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8046d46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8046d48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046d4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8046d4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8046d4e:	e841 2300 	strex	r3, r2, [r1]
 8046d52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8046d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8046d56:	2b00      	cmp	r3, #0
 8046d58:	d1e5      	bne.n	8046d26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8046d5a:	687b      	ldr	r3, [r7, #4]
 8046d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8046d5e:	2b01      	cmp	r3, #1
 8046d60:	d118      	bne.n	8046d94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8046d62:	687b      	ldr	r3, [r7, #4]
 8046d64:	681b      	ldr	r3, [r3, #0]
 8046d66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046d68:	68fb      	ldr	r3, [r7, #12]
 8046d6a:	e853 3f00 	ldrex	r3, [r3]
 8046d6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8046d70:	68bb      	ldr	r3, [r7, #8]
 8046d72:	f023 0310 	bic.w	r3, r3, #16
 8046d76:	647b      	str	r3, [r7, #68]	@ 0x44
 8046d78:	687b      	ldr	r3, [r7, #4]
 8046d7a:	681b      	ldr	r3, [r3, #0]
 8046d7c:	461a      	mov	r2, r3
 8046d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8046d80:	61bb      	str	r3, [r7, #24]
 8046d82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046d84:	6979      	ldr	r1, [r7, #20]
 8046d86:	69ba      	ldr	r2, [r7, #24]
 8046d88:	e841 2300 	strex	r3, r2, [r1]
 8046d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8046d8e:	693b      	ldr	r3, [r7, #16]
 8046d90:	2b00      	cmp	r3, #0
 8046d92:	d1e6      	bne.n	8046d62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8046d94:	687b      	ldr	r3, [r7, #4]
 8046d96:	2220      	movs	r2, #32
 8046d98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8046d9c:	687b      	ldr	r3, [r7, #4]
 8046d9e:	2200      	movs	r2, #0
 8046da0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8046da2:	687b      	ldr	r3, [r7, #4]
 8046da4:	2200      	movs	r2, #0
 8046da6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8046da8:	bf00      	nop
 8046daa:	3754      	adds	r7, #84	@ 0x54
 8046dac:	46bd      	mov	sp, r7
 8046dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046db2:	4770      	bx	lr
 8046db4:	effffffe 	.word	0xeffffffe

08046db8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8046db8:	b480      	push	{r7}
 8046dba:	b085      	sub	sp, #20
 8046dbc:	af00      	add	r7, sp, #0
 8046dbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8046dc0:	687b      	ldr	r3, [r7, #4]
 8046dc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8046dc6:	2b01      	cmp	r3, #1
 8046dc8:	d101      	bne.n	8046dce <HAL_UARTEx_DisableFifoMode+0x16>
 8046dca:	2302      	movs	r3, #2
 8046dcc:	e027      	b.n	8046e1e <HAL_UARTEx_DisableFifoMode+0x66>
 8046dce:	687b      	ldr	r3, [r7, #4]
 8046dd0:	2201      	movs	r2, #1
 8046dd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8046dd6:	687b      	ldr	r3, [r7, #4]
 8046dd8:	2224      	movs	r2, #36	@ 0x24
 8046dda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8046dde:	687b      	ldr	r3, [r7, #4]
 8046de0:	681b      	ldr	r3, [r3, #0]
 8046de2:	681b      	ldr	r3, [r3, #0]
 8046de4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8046de6:	687b      	ldr	r3, [r7, #4]
 8046de8:	681b      	ldr	r3, [r3, #0]
 8046dea:	681a      	ldr	r2, [r3, #0]
 8046dec:	687b      	ldr	r3, [r7, #4]
 8046dee:	681b      	ldr	r3, [r3, #0]
 8046df0:	f022 0201 	bic.w	r2, r2, #1
 8046df4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8046df6:	68fb      	ldr	r3, [r7, #12]
 8046df8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8046dfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8046dfe:	687b      	ldr	r3, [r7, #4]
 8046e00:	2200      	movs	r2, #0
 8046e02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8046e04:	687b      	ldr	r3, [r7, #4]
 8046e06:	681b      	ldr	r3, [r3, #0]
 8046e08:	68fa      	ldr	r2, [r7, #12]
 8046e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8046e0c:	687b      	ldr	r3, [r7, #4]
 8046e0e:	2220      	movs	r2, #32
 8046e10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8046e14:	687b      	ldr	r3, [r7, #4]
 8046e16:	2200      	movs	r2, #0
 8046e18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8046e1c:	2300      	movs	r3, #0
}
 8046e1e:	4618      	mov	r0, r3
 8046e20:	3714      	adds	r7, #20
 8046e22:	46bd      	mov	sp, r7
 8046e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046e28:	4770      	bx	lr

08046e2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8046e2a:	b580      	push	{r7, lr}
 8046e2c:	b084      	sub	sp, #16
 8046e2e:	af00      	add	r7, sp, #0
 8046e30:	6078      	str	r0, [r7, #4]
 8046e32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8046e34:	687b      	ldr	r3, [r7, #4]
 8046e36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8046e3a:	2b01      	cmp	r3, #1
 8046e3c:	d101      	bne.n	8046e42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8046e3e:	2302      	movs	r3, #2
 8046e40:	e02d      	b.n	8046e9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8046e42:	687b      	ldr	r3, [r7, #4]
 8046e44:	2201      	movs	r2, #1
 8046e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8046e4a:	687b      	ldr	r3, [r7, #4]
 8046e4c:	2224      	movs	r2, #36	@ 0x24
 8046e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8046e52:	687b      	ldr	r3, [r7, #4]
 8046e54:	681b      	ldr	r3, [r3, #0]
 8046e56:	681b      	ldr	r3, [r3, #0]
 8046e58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8046e5a:	687b      	ldr	r3, [r7, #4]
 8046e5c:	681b      	ldr	r3, [r3, #0]
 8046e5e:	681a      	ldr	r2, [r3, #0]
 8046e60:	687b      	ldr	r3, [r7, #4]
 8046e62:	681b      	ldr	r3, [r3, #0]
 8046e64:	f022 0201 	bic.w	r2, r2, #1
 8046e68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8046e6a:	687b      	ldr	r3, [r7, #4]
 8046e6c:	681b      	ldr	r3, [r3, #0]
 8046e6e:	689b      	ldr	r3, [r3, #8]
 8046e70:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8046e74:	687b      	ldr	r3, [r7, #4]
 8046e76:	681b      	ldr	r3, [r3, #0]
 8046e78:	683a      	ldr	r2, [r7, #0]
 8046e7a:	430a      	orrs	r2, r1
 8046e7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8046e7e:	6878      	ldr	r0, [r7, #4]
 8046e80:	f000 f850 	bl	8046f24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8046e84:	687b      	ldr	r3, [r7, #4]
 8046e86:	681b      	ldr	r3, [r3, #0]
 8046e88:	68fa      	ldr	r2, [r7, #12]
 8046e8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8046e8c:	687b      	ldr	r3, [r7, #4]
 8046e8e:	2220      	movs	r2, #32
 8046e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8046e94:	687b      	ldr	r3, [r7, #4]
 8046e96:	2200      	movs	r2, #0
 8046e98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8046e9c:	2300      	movs	r3, #0
}
 8046e9e:	4618      	mov	r0, r3
 8046ea0:	3710      	adds	r7, #16
 8046ea2:	46bd      	mov	sp, r7
 8046ea4:	bd80      	pop	{r7, pc}

08046ea6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8046ea6:	b580      	push	{r7, lr}
 8046ea8:	b084      	sub	sp, #16
 8046eaa:	af00      	add	r7, sp, #0
 8046eac:	6078      	str	r0, [r7, #4]
 8046eae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8046eb0:	687b      	ldr	r3, [r7, #4]
 8046eb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8046eb6:	2b01      	cmp	r3, #1
 8046eb8:	d101      	bne.n	8046ebe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8046eba:	2302      	movs	r3, #2
 8046ebc:	e02d      	b.n	8046f1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8046ebe:	687b      	ldr	r3, [r7, #4]
 8046ec0:	2201      	movs	r2, #1
 8046ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8046ec6:	687b      	ldr	r3, [r7, #4]
 8046ec8:	2224      	movs	r2, #36	@ 0x24
 8046eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8046ece:	687b      	ldr	r3, [r7, #4]
 8046ed0:	681b      	ldr	r3, [r3, #0]
 8046ed2:	681b      	ldr	r3, [r3, #0]
 8046ed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8046ed6:	687b      	ldr	r3, [r7, #4]
 8046ed8:	681b      	ldr	r3, [r3, #0]
 8046eda:	681a      	ldr	r2, [r3, #0]
 8046edc:	687b      	ldr	r3, [r7, #4]
 8046ede:	681b      	ldr	r3, [r3, #0]
 8046ee0:	f022 0201 	bic.w	r2, r2, #1
 8046ee4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8046ee6:	687b      	ldr	r3, [r7, #4]
 8046ee8:	681b      	ldr	r3, [r3, #0]
 8046eea:	689b      	ldr	r3, [r3, #8]
 8046eec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8046ef0:	687b      	ldr	r3, [r7, #4]
 8046ef2:	681b      	ldr	r3, [r3, #0]
 8046ef4:	683a      	ldr	r2, [r7, #0]
 8046ef6:	430a      	orrs	r2, r1
 8046ef8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8046efa:	6878      	ldr	r0, [r7, #4]
 8046efc:	f000 f812 	bl	8046f24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8046f00:	687b      	ldr	r3, [r7, #4]
 8046f02:	681b      	ldr	r3, [r3, #0]
 8046f04:	68fa      	ldr	r2, [r7, #12]
 8046f06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8046f08:	687b      	ldr	r3, [r7, #4]
 8046f0a:	2220      	movs	r2, #32
 8046f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8046f10:	687b      	ldr	r3, [r7, #4]
 8046f12:	2200      	movs	r2, #0
 8046f14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8046f18:	2300      	movs	r3, #0
}
 8046f1a:	4618      	mov	r0, r3
 8046f1c:	3710      	adds	r7, #16
 8046f1e:	46bd      	mov	sp, r7
 8046f20:	bd80      	pop	{r7, pc}
	...

08046f24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8046f24:	b480      	push	{r7}
 8046f26:	b085      	sub	sp, #20
 8046f28:	af00      	add	r7, sp, #0
 8046f2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8046f2c:	687b      	ldr	r3, [r7, #4]
 8046f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8046f30:	2b00      	cmp	r3, #0
 8046f32:	d108      	bne.n	8046f46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8046f34:	687b      	ldr	r3, [r7, #4]
 8046f36:	2201      	movs	r2, #1
 8046f38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8046f3c:	687b      	ldr	r3, [r7, #4]
 8046f3e:	2201      	movs	r2, #1
 8046f40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8046f44:	e031      	b.n	8046faa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8046f46:	2310      	movs	r3, #16
 8046f48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8046f4a:	2310      	movs	r3, #16
 8046f4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8046f4e:	687b      	ldr	r3, [r7, #4]
 8046f50:	681b      	ldr	r3, [r3, #0]
 8046f52:	689b      	ldr	r3, [r3, #8]
 8046f54:	0e5b      	lsrs	r3, r3, #25
 8046f56:	b2db      	uxtb	r3, r3
 8046f58:	f003 0307 	and.w	r3, r3, #7
 8046f5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8046f5e:	687b      	ldr	r3, [r7, #4]
 8046f60:	681b      	ldr	r3, [r3, #0]
 8046f62:	689b      	ldr	r3, [r3, #8]
 8046f64:	0f5b      	lsrs	r3, r3, #29
 8046f66:	b2db      	uxtb	r3, r3
 8046f68:	f003 0307 	and.w	r3, r3, #7
 8046f6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8046f6e:	7bbb      	ldrb	r3, [r7, #14]
 8046f70:	7b3a      	ldrb	r2, [r7, #12]
 8046f72:	4911      	ldr	r1, [pc, #68]	@ (8046fb8 <UARTEx_SetNbDataToProcess+0x94>)
 8046f74:	5c8a      	ldrb	r2, [r1, r2]
 8046f76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8046f7a:	7b3a      	ldrb	r2, [r7, #12]
 8046f7c:	490f      	ldr	r1, [pc, #60]	@ (8046fbc <UARTEx_SetNbDataToProcess+0x98>)
 8046f7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8046f80:	fb93 f3f2 	sdiv	r3, r3, r2
 8046f84:	b29a      	uxth	r2, r3
 8046f86:	687b      	ldr	r3, [r7, #4]
 8046f88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8046f8c:	7bfb      	ldrb	r3, [r7, #15]
 8046f8e:	7b7a      	ldrb	r2, [r7, #13]
 8046f90:	4909      	ldr	r1, [pc, #36]	@ (8046fb8 <UARTEx_SetNbDataToProcess+0x94>)
 8046f92:	5c8a      	ldrb	r2, [r1, r2]
 8046f94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8046f98:	7b7a      	ldrb	r2, [r7, #13]
 8046f9a:	4908      	ldr	r1, [pc, #32]	@ (8046fbc <UARTEx_SetNbDataToProcess+0x98>)
 8046f9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8046f9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8046fa2:	b29a      	uxth	r2, r3
 8046fa4:	687b      	ldr	r3, [r7, #4]
 8046fa6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8046faa:	bf00      	nop
 8046fac:	3714      	adds	r7, #20
 8046fae:	46bd      	mov	sp, r7
 8046fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046fb4:	4770      	bx	lr
 8046fb6:	bf00      	nop
 8046fb8:	0804ba58 	.word	0x0804ba58
 8046fbc:	0804ba60 	.word	0x0804ba60

08046fc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8046fc0:	b084      	sub	sp, #16
 8046fc2:	b580      	push	{r7, lr}
 8046fc4:	b084      	sub	sp, #16
 8046fc6:	af00      	add	r7, sp, #0
 8046fc8:	6078      	str	r0, [r7, #4]
 8046fca:	f107 001c 	add.w	r0, r7, #28
 8046fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8046fd2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8046fd6:	2b01      	cmp	r3, #1
 8046fd8:	d121      	bne.n	804701e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8046fda:	687b      	ldr	r3, [r7, #4]
 8046fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8046fde:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8046fe2:	687b      	ldr	r3, [r7, #4]
 8046fe4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8046fe6:	687b      	ldr	r3, [r7, #4]
 8046fe8:	68da      	ldr	r2, [r3, #12]
 8046fea:	4b2c      	ldr	r3, [pc, #176]	@ (804709c <USB_CoreInit+0xdc>)
 8046fec:	4013      	ands	r3, r2
 8046fee:	687a      	ldr	r2, [r7, #4]
 8046ff0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8046ff2:	687b      	ldr	r3, [r7, #4]
 8046ff4:	68db      	ldr	r3, [r3, #12]
 8046ff6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8046ffa:	687b      	ldr	r3, [r7, #4]
 8046ffc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8046ffe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8047002:	2b01      	cmp	r3, #1
 8047004:	d105      	bne.n	8047012 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8047006:	687b      	ldr	r3, [r7, #4]
 8047008:	68db      	ldr	r3, [r3, #12]
 804700a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 804700e:	687b      	ldr	r3, [r7, #4]
 8047010:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8047012:	6878      	ldr	r0, [r7, #4]
 8047014:	f001 fafa 	bl	804860c <USB_CoreReset>
 8047018:	4603      	mov	r3, r0
 804701a:	73fb      	strb	r3, [r7, #15]
 804701c:	e01b      	b.n	8047056 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 804701e:	687b      	ldr	r3, [r7, #4]
 8047020:	68db      	ldr	r3, [r3, #12]
 8047022:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8047026:	687b      	ldr	r3, [r7, #4]
 8047028:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 804702a:	6878      	ldr	r0, [r7, #4]
 804702c:	f001 faee 	bl	804860c <USB_CoreReset>
 8047030:	4603      	mov	r3, r0
 8047032:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8047034:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8047038:	2b00      	cmp	r3, #0
 804703a:	d106      	bne.n	804704a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 804703c:	687b      	ldr	r3, [r7, #4]
 804703e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8047040:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8047044:	687b      	ldr	r3, [r7, #4]
 8047046:	639a      	str	r2, [r3, #56]	@ 0x38
 8047048:	e005      	b.n	8047056 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 804704a:	687b      	ldr	r3, [r7, #4]
 804704c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804704e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8047052:	687b      	ldr	r3, [r7, #4]
 8047054:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8047056:	7fbb      	ldrb	r3, [r7, #30]
 8047058:	2b01      	cmp	r3, #1
 804705a:	d116      	bne.n	804708a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 804705c:	687b      	ldr	r3, [r7, #4]
 804705e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8047060:	b29a      	uxth	r2, r3
 8047062:	687b      	ldr	r3, [r7, #4]
 8047064:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8047066:	687b      	ldr	r3, [r7, #4]
 8047068:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 804706a:	4b0d      	ldr	r3, [pc, #52]	@ (80470a0 <USB_CoreInit+0xe0>)
 804706c:	4313      	orrs	r3, r2
 804706e:	687a      	ldr	r2, [r7, #4]
 8047070:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8047072:	687b      	ldr	r3, [r7, #4]
 8047074:	689b      	ldr	r3, [r3, #8]
 8047076:	f043 0206 	orr.w	r2, r3, #6
 804707a:	687b      	ldr	r3, [r7, #4]
 804707c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 804707e:	687b      	ldr	r3, [r7, #4]
 8047080:	689b      	ldr	r3, [r3, #8]
 8047082:	f043 0220 	orr.w	r2, r3, #32
 8047086:	687b      	ldr	r3, [r7, #4]
 8047088:	609a      	str	r2, [r3, #8]
  }

  return ret;
 804708a:	7bfb      	ldrb	r3, [r7, #15]
}
 804708c:	4618      	mov	r0, r3
 804708e:	3710      	adds	r7, #16
 8047090:	46bd      	mov	sp, r7
 8047092:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8047096:	b004      	add	sp, #16
 8047098:	4770      	bx	lr
 804709a:	bf00      	nop
 804709c:	ffbdffbf 	.word	0xffbdffbf
 80470a0:	03ee0000 	.word	0x03ee0000

080470a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80470a4:	b480      	push	{r7}
 80470a6:	b087      	sub	sp, #28
 80470a8:	af00      	add	r7, sp, #0
 80470aa:	60f8      	str	r0, [r7, #12]
 80470ac:	60b9      	str	r1, [r7, #8]
 80470ae:	4613      	mov	r3, r2
 80470b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80470b2:	79fb      	ldrb	r3, [r7, #7]
 80470b4:	2b02      	cmp	r3, #2
 80470b6:	d165      	bne.n	8047184 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80470b8:	68bb      	ldr	r3, [r7, #8]
 80470ba:	4a41      	ldr	r2, [pc, #260]	@ (80471c0 <USB_SetTurnaroundTime+0x11c>)
 80470bc:	4293      	cmp	r3, r2
 80470be:	d906      	bls.n	80470ce <USB_SetTurnaroundTime+0x2a>
 80470c0:	68bb      	ldr	r3, [r7, #8]
 80470c2:	4a40      	ldr	r2, [pc, #256]	@ (80471c4 <USB_SetTurnaroundTime+0x120>)
 80470c4:	4293      	cmp	r3, r2
 80470c6:	d202      	bcs.n	80470ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80470c8:	230f      	movs	r3, #15
 80470ca:	617b      	str	r3, [r7, #20]
 80470cc:	e062      	b.n	8047194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80470ce:	68bb      	ldr	r3, [r7, #8]
 80470d0:	4a3c      	ldr	r2, [pc, #240]	@ (80471c4 <USB_SetTurnaroundTime+0x120>)
 80470d2:	4293      	cmp	r3, r2
 80470d4:	d306      	bcc.n	80470e4 <USB_SetTurnaroundTime+0x40>
 80470d6:	68bb      	ldr	r3, [r7, #8]
 80470d8:	4a3b      	ldr	r2, [pc, #236]	@ (80471c8 <USB_SetTurnaroundTime+0x124>)
 80470da:	4293      	cmp	r3, r2
 80470dc:	d202      	bcs.n	80470e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80470de:	230e      	movs	r3, #14
 80470e0:	617b      	str	r3, [r7, #20]
 80470e2:	e057      	b.n	8047194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80470e4:	68bb      	ldr	r3, [r7, #8]
 80470e6:	4a38      	ldr	r2, [pc, #224]	@ (80471c8 <USB_SetTurnaroundTime+0x124>)
 80470e8:	4293      	cmp	r3, r2
 80470ea:	d306      	bcc.n	80470fa <USB_SetTurnaroundTime+0x56>
 80470ec:	68bb      	ldr	r3, [r7, #8]
 80470ee:	4a37      	ldr	r2, [pc, #220]	@ (80471cc <USB_SetTurnaroundTime+0x128>)
 80470f0:	4293      	cmp	r3, r2
 80470f2:	d202      	bcs.n	80470fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80470f4:	230d      	movs	r3, #13
 80470f6:	617b      	str	r3, [r7, #20]
 80470f8:	e04c      	b.n	8047194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80470fa:	68bb      	ldr	r3, [r7, #8]
 80470fc:	4a33      	ldr	r2, [pc, #204]	@ (80471cc <USB_SetTurnaroundTime+0x128>)
 80470fe:	4293      	cmp	r3, r2
 8047100:	d306      	bcc.n	8047110 <USB_SetTurnaroundTime+0x6c>
 8047102:	68bb      	ldr	r3, [r7, #8]
 8047104:	4a32      	ldr	r2, [pc, #200]	@ (80471d0 <USB_SetTurnaroundTime+0x12c>)
 8047106:	4293      	cmp	r3, r2
 8047108:	d802      	bhi.n	8047110 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 804710a:	230c      	movs	r3, #12
 804710c:	617b      	str	r3, [r7, #20]
 804710e:	e041      	b.n	8047194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8047110:	68bb      	ldr	r3, [r7, #8]
 8047112:	4a2f      	ldr	r2, [pc, #188]	@ (80471d0 <USB_SetTurnaroundTime+0x12c>)
 8047114:	4293      	cmp	r3, r2
 8047116:	d906      	bls.n	8047126 <USB_SetTurnaroundTime+0x82>
 8047118:	68bb      	ldr	r3, [r7, #8]
 804711a:	4a2e      	ldr	r2, [pc, #184]	@ (80471d4 <USB_SetTurnaroundTime+0x130>)
 804711c:	4293      	cmp	r3, r2
 804711e:	d802      	bhi.n	8047126 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8047120:	230b      	movs	r3, #11
 8047122:	617b      	str	r3, [r7, #20]
 8047124:	e036      	b.n	8047194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8047126:	68bb      	ldr	r3, [r7, #8]
 8047128:	4a2a      	ldr	r2, [pc, #168]	@ (80471d4 <USB_SetTurnaroundTime+0x130>)
 804712a:	4293      	cmp	r3, r2
 804712c:	d906      	bls.n	804713c <USB_SetTurnaroundTime+0x98>
 804712e:	68bb      	ldr	r3, [r7, #8]
 8047130:	4a29      	ldr	r2, [pc, #164]	@ (80471d8 <USB_SetTurnaroundTime+0x134>)
 8047132:	4293      	cmp	r3, r2
 8047134:	d802      	bhi.n	804713c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8047136:	230a      	movs	r3, #10
 8047138:	617b      	str	r3, [r7, #20]
 804713a:	e02b      	b.n	8047194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 804713c:	68bb      	ldr	r3, [r7, #8]
 804713e:	4a26      	ldr	r2, [pc, #152]	@ (80471d8 <USB_SetTurnaroundTime+0x134>)
 8047140:	4293      	cmp	r3, r2
 8047142:	d906      	bls.n	8047152 <USB_SetTurnaroundTime+0xae>
 8047144:	68bb      	ldr	r3, [r7, #8]
 8047146:	4a25      	ldr	r2, [pc, #148]	@ (80471dc <USB_SetTurnaroundTime+0x138>)
 8047148:	4293      	cmp	r3, r2
 804714a:	d202      	bcs.n	8047152 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 804714c:	2309      	movs	r3, #9
 804714e:	617b      	str	r3, [r7, #20]
 8047150:	e020      	b.n	8047194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8047152:	68bb      	ldr	r3, [r7, #8]
 8047154:	4a21      	ldr	r2, [pc, #132]	@ (80471dc <USB_SetTurnaroundTime+0x138>)
 8047156:	4293      	cmp	r3, r2
 8047158:	d306      	bcc.n	8047168 <USB_SetTurnaroundTime+0xc4>
 804715a:	68bb      	ldr	r3, [r7, #8]
 804715c:	4a20      	ldr	r2, [pc, #128]	@ (80471e0 <USB_SetTurnaroundTime+0x13c>)
 804715e:	4293      	cmp	r3, r2
 8047160:	d802      	bhi.n	8047168 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8047162:	2308      	movs	r3, #8
 8047164:	617b      	str	r3, [r7, #20]
 8047166:	e015      	b.n	8047194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8047168:	68bb      	ldr	r3, [r7, #8]
 804716a:	4a1d      	ldr	r2, [pc, #116]	@ (80471e0 <USB_SetTurnaroundTime+0x13c>)
 804716c:	4293      	cmp	r3, r2
 804716e:	d906      	bls.n	804717e <USB_SetTurnaroundTime+0xda>
 8047170:	68bb      	ldr	r3, [r7, #8]
 8047172:	4a1c      	ldr	r2, [pc, #112]	@ (80471e4 <USB_SetTurnaroundTime+0x140>)
 8047174:	4293      	cmp	r3, r2
 8047176:	d202      	bcs.n	804717e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8047178:	2307      	movs	r3, #7
 804717a:	617b      	str	r3, [r7, #20]
 804717c:	e00a      	b.n	8047194 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 804717e:	2306      	movs	r3, #6
 8047180:	617b      	str	r3, [r7, #20]
 8047182:	e007      	b.n	8047194 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8047184:	79fb      	ldrb	r3, [r7, #7]
 8047186:	2b00      	cmp	r3, #0
 8047188:	d102      	bne.n	8047190 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 804718a:	2309      	movs	r3, #9
 804718c:	617b      	str	r3, [r7, #20]
 804718e:	e001      	b.n	8047194 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8047190:	2309      	movs	r3, #9
 8047192:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8047194:	68fb      	ldr	r3, [r7, #12]
 8047196:	68db      	ldr	r3, [r3, #12]
 8047198:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 804719c:	68fb      	ldr	r3, [r7, #12]
 804719e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80471a0:	68fb      	ldr	r3, [r7, #12]
 80471a2:	68da      	ldr	r2, [r3, #12]
 80471a4:	697b      	ldr	r3, [r7, #20]
 80471a6:	029b      	lsls	r3, r3, #10
 80471a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80471ac:	431a      	orrs	r2, r3
 80471ae:	68fb      	ldr	r3, [r7, #12]
 80471b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80471b2:	2300      	movs	r3, #0
}
 80471b4:	4618      	mov	r0, r3
 80471b6:	371c      	adds	r7, #28
 80471b8:	46bd      	mov	sp, r7
 80471ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80471be:	4770      	bx	lr
 80471c0:	00d8acbf 	.word	0x00d8acbf
 80471c4:	00e4e1c0 	.word	0x00e4e1c0
 80471c8:	00f42400 	.word	0x00f42400
 80471cc:	01067380 	.word	0x01067380
 80471d0:	011a499f 	.word	0x011a499f
 80471d4:	01312cff 	.word	0x01312cff
 80471d8:	014ca43f 	.word	0x014ca43f
 80471dc:	016e3600 	.word	0x016e3600
 80471e0:	01a6ab1f 	.word	0x01a6ab1f
 80471e4:	01e84800 	.word	0x01e84800

080471e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80471e8:	b480      	push	{r7}
 80471ea:	b083      	sub	sp, #12
 80471ec:	af00      	add	r7, sp, #0
 80471ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80471f0:	687b      	ldr	r3, [r7, #4]
 80471f2:	689b      	ldr	r3, [r3, #8]
 80471f4:	f043 0201 	orr.w	r2, r3, #1
 80471f8:	687b      	ldr	r3, [r7, #4]
 80471fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80471fc:	2300      	movs	r3, #0
}
 80471fe:	4618      	mov	r0, r3
 8047200:	370c      	adds	r7, #12
 8047202:	46bd      	mov	sp, r7
 8047204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047208:	4770      	bx	lr

0804720a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 804720a:	b480      	push	{r7}
 804720c:	b083      	sub	sp, #12
 804720e:	af00      	add	r7, sp, #0
 8047210:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8047212:	687b      	ldr	r3, [r7, #4]
 8047214:	689b      	ldr	r3, [r3, #8]
 8047216:	f023 0201 	bic.w	r2, r3, #1
 804721a:	687b      	ldr	r3, [r7, #4]
 804721c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 804721e:	2300      	movs	r3, #0
}
 8047220:	4618      	mov	r0, r3
 8047222:	370c      	adds	r7, #12
 8047224:	46bd      	mov	sp, r7
 8047226:	f85d 7b04 	ldr.w	r7, [sp], #4
 804722a:	4770      	bx	lr

0804722c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 804722c:	b580      	push	{r7, lr}
 804722e:	b084      	sub	sp, #16
 8047230:	af00      	add	r7, sp, #0
 8047232:	6078      	str	r0, [r7, #4]
 8047234:	460b      	mov	r3, r1
 8047236:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8047238:	2300      	movs	r3, #0
 804723a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 804723c:	687b      	ldr	r3, [r7, #4]
 804723e:	68db      	ldr	r3, [r3, #12]
 8047240:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8047244:	687b      	ldr	r3, [r7, #4]
 8047246:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8047248:	78fb      	ldrb	r3, [r7, #3]
 804724a:	2b01      	cmp	r3, #1
 804724c:	d115      	bne.n	804727a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 804724e:	687b      	ldr	r3, [r7, #4]
 8047250:	68db      	ldr	r3, [r3, #12]
 8047252:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8047256:	687b      	ldr	r3, [r7, #4]
 8047258:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 804725a:	200a      	movs	r0, #10
 804725c:	f7f9 ffc8 	bl	80411f0 <HAL_Delay>
      ms += 10U;
 8047260:	68fb      	ldr	r3, [r7, #12]
 8047262:	330a      	adds	r3, #10
 8047264:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8047266:	6878      	ldr	r0, [r7, #4]
 8047268:	f001 f93f 	bl	80484ea <USB_GetMode>
 804726c:	4603      	mov	r3, r0
 804726e:	2b01      	cmp	r3, #1
 8047270:	d01e      	beq.n	80472b0 <USB_SetCurrentMode+0x84>
 8047272:	68fb      	ldr	r3, [r7, #12]
 8047274:	2bc7      	cmp	r3, #199	@ 0xc7
 8047276:	d9f0      	bls.n	804725a <USB_SetCurrentMode+0x2e>
 8047278:	e01a      	b.n	80472b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 804727a:	78fb      	ldrb	r3, [r7, #3]
 804727c:	2b00      	cmp	r3, #0
 804727e:	d115      	bne.n	80472ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8047280:	687b      	ldr	r3, [r7, #4]
 8047282:	68db      	ldr	r3, [r3, #12]
 8047284:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8047288:	687b      	ldr	r3, [r7, #4]
 804728a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 804728c:	200a      	movs	r0, #10
 804728e:	f7f9 ffaf 	bl	80411f0 <HAL_Delay>
      ms += 10U;
 8047292:	68fb      	ldr	r3, [r7, #12]
 8047294:	330a      	adds	r3, #10
 8047296:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8047298:	6878      	ldr	r0, [r7, #4]
 804729a:	f001 f926 	bl	80484ea <USB_GetMode>
 804729e:	4603      	mov	r3, r0
 80472a0:	2b00      	cmp	r3, #0
 80472a2:	d005      	beq.n	80472b0 <USB_SetCurrentMode+0x84>
 80472a4:	68fb      	ldr	r3, [r7, #12]
 80472a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80472a8:	d9f0      	bls.n	804728c <USB_SetCurrentMode+0x60>
 80472aa:	e001      	b.n	80472b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80472ac:	2301      	movs	r3, #1
 80472ae:	e005      	b.n	80472bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80472b0:	68fb      	ldr	r3, [r7, #12]
 80472b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80472b4:	d101      	bne.n	80472ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80472b6:	2301      	movs	r3, #1
 80472b8:	e000      	b.n	80472bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80472ba:	2300      	movs	r3, #0
}
 80472bc:	4618      	mov	r0, r3
 80472be:	3710      	adds	r7, #16
 80472c0:	46bd      	mov	sp, r7
 80472c2:	bd80      	pop	{r7, pc}

080472c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80472c4:	b084      	sub	sp, #16
 80472c6:	b580      	push	{r7, lr}
 80472c8:	b086      	sub	sp, #24
 80472ca:	af00      	add	r7, sp, #0
 80472cc:	6078      	str	r0, [r7, #4]
 80472ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80472d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80472d6:	2300      	movs	r3, #0
 80472d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80472da:	687b      	ldr	r3, [r7, #4]
 80472dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80472de:	2300      	movs	r3, #0
 80472e0:	613b      	str	r3, [r7, #16]
 80472e2:	e009      	b.n	80472f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80472e4:	687a      	ldr	r2, [r7, #4]
 80472e6:	693b      	ldr	r3, [r7, #16]
 80472e8:	3340      	adds	r3, #64	@ 0x40
 80472ea:	009b      	lsls	r3, r3, #2
 80472ec:	4413      	add	r3, r2
 80472ee:	2200      	movs	r2, #0
 80472f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80472f2:	693b      	ldr	r3, [r7, #16]
 80472f4:	3301      	adds	r3, #1
 80472f6:	613b      	str	r3, [r7, #16]
 80472f8:	693b      	ldr	r3, [r7, #16]
 80472fa:	2b0e      	cmp	r3, #14
 80472fc:	d9f2      	bls.n	80472e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80472fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8047302:	2b00      	cmp	r3, #0
 8047304:	d11c      	bne.n	8047340 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8047306:	68fb      	ldr	r3, [r7, #12]
 8047308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804730c:	685b      	ldr	r3, [r3, #4]
 804730e:	68fa      	ldr	r2, [r7, #12]
 8047310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8047314:	f043 0302 	orr.w	r3, r3, #2
 8047318:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 804731a:	687b      	ldr	r3, [r7, #4]
 804731c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804731e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8047322:	687b      	ldr	r3, [r7, #4]
 8047324:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8047326:	687b      	ldr	r3, [r7, #4]
 8047328:	681b      	ldr	r3, [r3, #0]
 804732a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 804732e:	687b      	ldr	r3, [r7, #4]
 8047330:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8047332:	687b      	ldr	r3, [r7, #4]
 8047334:	681b      	ldr	r3, [r3, #0]
 8047336:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 804733a:	687b      	ldr	r3, [r7, #4]
 804733c:	601a      	str	r2, [r3, #0]
 804733e:	e005      	b.n	804734c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8047340:	687b      	ldr	r3, [r7, #4]
 8047342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8047344:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8047348:	687b      	ldr	r3, [r7, #4]
 804734a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 804734c:	68fb      	ldr	r3, [r7, #12]
 804734e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8047352:	461a      	mov	r2, r3
 8047354:	2300      	movs	r3, #0
 8047356:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8047358:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 804735c:	2b01      	cmp	r3, #1
 804735e:	d10d      	bne.n	804737c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8047360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8047364:	2b00      	cmp	r3, #0
 8047366:	d104      	bne.n	8047372 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8047368:	2100      	movs	r1, #0
 804736a:	6878      	ldr	r0, [r7, #4]
 804736c:	f000 f968 	bl	8047640 <USB_SetDevSpeed>
 8047370:	e008      	b.n	8047384 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8047372:	2101      	movs	r1, #1
 8047374:	6878      	ldr	r0, [r7, #4]
 8047376:	f000 f963 	bl	8047640 <USB_SetDevSpeed>
 804737a:	e003      	b.n	8047384 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 804737c:	2103      	movs	r1, #3
 804737e:	6878      	ldr	r0, [r7, #4]
 8047380:	f000 f95e 	bl	8047640 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8047384:	2110      	movs	r1, #16
 8047386:	6878      	ldr	r0, [r7, #4]
 8047388:	f000 f8fa 	bl	8047580 <USB_FlushTxFifo>
 804738c:	4603      	mov	r3, r0
 804738e:	2b00      	cmp	r3, #0
 8047390:	d001      	beq.n	8047396 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8047392:	2301      	movs	r3, #1
 8047394:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8047396:	6878      	ldr	r0, [r7, #4]
 8047398:	f000 f924 	bl	80475e4 <USB_FlushRxFifo>
 804739c:	4603      	mov	r3, r0
 804739e:	2b00      	cmp	r3, #0
 80473a0:	d001      	beq.n	80473a6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80473a2:	2301      	movs	r3, #1
 80473a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80473a6:	68fb      	ldr	r3, [r7, #12]
 80473a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80473ac:	461a      	mov	r2, r3
 80473ae:	2300      	movs	r3, #0
 80473b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80473b2:	68fb      	ldr	r3, [r7, #12]
 80473b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80473b8:	461a      	mov	r2, r3
 80473ba:	2300      	movs	r3, #0
 80473bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80473be:	68fb      	ldr	r3, [r7, #12]
 80473c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80473c4:	461a      	mov	r2, r3
 80473c6:	2300      	movs	r3, #0
 80473c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80473ca:	2300      	movs	r3, #0
 80473cc:	613b      	str	r3, [r7, #16]
 80473ce:	e043      	b.n	8047458 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80473d0:	693b      	ldr	r3, [r7, #16]
 80473d2:	015a      	lsls	r2, r3, #5
 80473d4:	68fb      	ldr	r3, [r7, #12]
 80473d6:	4413      	add	r3, r2
 80473d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80473dc:	681b      	ldr	r3, [r3, #0]
 80473de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80473e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80473e6:	d118      	bne.n	804741a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80473e8:	693b      	ldr	r3, [r7, #16]
 80473ea:	2b00      	cmp	r3, #0
 80473ec:	d10a      	bne.n	8047404 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80473ee:	693b      	ldr	r3, [r7, #16]
 80473f0:	015a      	lsls	r2, r3, #5
 80473f2:	68fb      	ldr	r3, [r7, #12]
 80473f4:	4413      	add	r3, r2
 80473f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80473fa:	461a      	mov	r2, r3
 80473fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8047400:	6013      	str	r3, [r2, #0]
 8047402:	e013      	b.n	804742c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8047404:	693b      	ldr	r3, [r7, #16]
 8047406:	015a      	lsls	r2, r3, #5
 8047408:	68fb      	ldr	r3, [r7, #12]
 804740a:	4413      	add	r3, r2
 804740c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047410:	461a      	mov	r2, r3
 8047412:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8047416:	6013      	str	r3, [r2, #0]
 8047418:	e008      	b.n	804742c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 804741a:	693b      	ldr	r3, [r7, #16]
 804741c:	015a      	lsls	r2, r3, #5
 804741e:	68fb      	ldr	r3, [r7, #12]
 8047420:	4413      	add	r3, r2
 8047422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047426:	461a      	mov	r2, r3
 8047428:	2300      	movs	r3, #0
 804742a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 804742c:	693b      	ldr	r3, [r7, #16]
 804742e:	015a      	lsls	r2, r3, #5
 8047430:	68fb      	ldr	r3, [r7, #12]
 8047432:	4413      	add	r3, r2
 8047434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047438:	461a      	mov	r2, r3
 804743a:	2300      	movs	r3, #0
 804743c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 804743e:	693b      	ldr	r3, [r7, #16]
 8047440:	015a      	lsls	r2, r3, #5
 8047442:	68fb      	ldr	r3, [r7, #12]
 8047444:	4413      	add	r3, r2
 8047446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804744a:	461a      	mov	r2, r3
 804744c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8047450:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8047452:	693b      	ldr	r3, [r7, #16]
 8047454:	3301      	adds	r3, #1
 8047456:	613b      	str	r3, [r7, #16]
 8047458:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 804745c:	461a      	mov	r2, r3
 804745e:	693b      	ldr	r3, [r7, #16]
 8047460:	4293      	cmp	r3, r2
 8047462:	d3b5      	bcc.n	80473d0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8047464:	2300      	movs	r3, #0
 8047466:	613b      	str	r3, [r7, #16]
 8047468:	e043      	b.n	80474f2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 804746a:	693b      	ldr	r3, [r7, #16]
 804746c:	015a      	lsls	r2, r3, #5
 804746e:	68fb      	ldr	r3, [r7, #12]
 8047470:	4413      	add	r3, r2
 8047472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047476:	681b      	ldr	r3, [r3, #0]
 8047478:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 804747c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047480:	d118      	bne.n	80474b4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8047482:	693b      	ldr	r3, [r7, #16]
 8047484:	2b00      	cmp	r3, #0
 8047486:	d10a      	bne.n	804749e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8047488:	693b      	ldr	r3, [r7, #16]
 804748a:	015a      	lsls	r2, r3, #5
 804748c:	68fb      	ldr	r3, [r7, #12]
 804748e:	4413      	add	r3, r2
 8047490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047494:	461a      	mov	r2, r3
 8047496:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 804749a:	6013      	str	r3, [r2, #0]
 804749c:	e013      	b.n	80474c6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 804749e:	693b      	ldr	r3, [r7, #16]
 80474a0:	015a      	lsls	r2, r3, #5
 80474a2:	68fb      	ldr	r3, [r7, #12]
 80474a4:	4413      	add	r3, r2
 80474a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80474aa:	461a      	mov	r2, r3
 80474ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80474b0:	6013      	str	r3, [r2, #0]
 80474b2:	e008      	b.n	80474c6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80474b4:	693b      	ldr	r3, [r7, #16]
 80474b6:	015a      	lsls	r2, r3, #5
 80474b8:	68fb      	ldr	r3, [r7, #12]
 80474ba:	4413      	add	r3, r2
 80474bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80474c0:	461a      	mov	r2, r3
 80474c2:	2300      	movs	r3, #0
 80474c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80474c6:	693b      	ldr	r3, [r7, #16]
 80474c8:	015a      	lsls	r2, r3, #5
 80474ca:	68fb      	ldr	r3, [r7, #12]
 80474cc:	4413      	add	r3, r2
 80474ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80474d2:	461a      	mov	r2, r3
 80474d4:	2300      	movs	r3, #0
 80474d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80474d8:	693b      	ldr	r3, [r7, #16]
 80474da:	015a      	lsls	r2, r3, #5
 80474dc:	68fb      	ldr	r3, [r7, #12]
 80474de:	4413      	add	r3, r2
 80474e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80474e4:	461a      	mov	r2, r3
 80474e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80474ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80474ec:	693b      	ldr	r3, [r7, #16]
 80474ee:	3301      	adds	r3, #1
 80474f0:	613b      	str	r3, [r7, #16]
 80474f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80474f6:	461a      	mov	r2, r3
 80474f8:	693b      	ldr	r3, [r7, #16]
 80474fa:	4293      	cmp	r3, r2
 80474fc:	d3b5      	bcc.n	804746a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80474fe:	68fb      	ldr	r3, [r7, #12]
 8047500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047504:	691b      	ldr	r3, [r3, #16]
 8047506:	68fa      	ldr	r2, [r7, #12]
 8047508:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804750c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8047510:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8047512:	687b      	ldr	r3, [r7, #4]
 8047514:	2200      	movs	r2, #0
 8047516:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8047518:	687b      	ldr	r3, [r7, #4]
 804751a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 804751e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8047520:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8047524:	2b00      	cmp	r3, #0
 8047526:	d105      	bne.n	8047534 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8047528:	687b      	ldr	r3, [r7, #4]
 804752a:	699b      	ldr	r3, [r3, #24]
 804752c:	f043 0210 	orr.w	r2, r3, #16
 8047530:	687b      	ldr	r3, [r7, #4]
 8047532:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8047534:	687b      	ldr	r3, [r7, #4]
 8047536:	699a      	ldr	r2, [r3, #24]
 8047538:	4b0f      	ldr	r3, [pc, #60]	@ (8047578 <USB_DevInit+0x2b4>)
 804753a:	4313      	orrs	r3, r2
 804753c:	687a      	ldr	r2, [r7, #4]
 804753e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8047540:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8047544:	2b00      	cmp	r3, #0
 8047546:	d005      	beq.n	8047554 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8047548:	687b      	ldr	r3, [r7, #4]
 804754a:	699b      	ldr	r3, [r3, #24]
 804754c:	f043 0208 	orr.w	r2, r3, #8
 8047550:	687b      	ldr	r3, [r7, #4]
 8047552:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8047554:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8047558:	2b01      	cmp	r3, #1
 804755a:	d105      	bne.n	8047568 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 804755c:	687b      	ldr	r3, [r7, #4]
 804755e:	699a      	ldr	r2, [r3, #24]
 8047560:	4b06      	ldr	r3, [pc, #24]	@ (804757c <USB_DevInit+0x2b8>)
 8047562:	4313      	orrs	r3, r2
 8047564:	687a      	ldr	r2, [r7, #4]
 8047566:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8047568:	7dfb      	ldrb	r3, [r7, #23]
}
 804756a:	4618      	mov	r0, r3
 804756c:	3718      	adds	r7, #24
 804756e:	46bd      	mov	sp, r7
 8047570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8047574:	b004      	add	sp, #16
 8047576:	4770      	bx	lr
 8047578:	803c3800 	.word	0x803c3800
 804757c:	40000004 	.word	0x40000004

08047580 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8047580:	b480      	push	{r7}
 8047582:	b085      	sub	sp, #20
 8047584:	af00      	add	r7, sp, #0
 8047586:	6078      	str	r0, [r7, #4]
 8047588:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 804758a:	2300      	movs	r3, #0
 804758c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 804758e:	68fb      	ldr	r3, [r7, #12]
 8047590:	3301      	adds	r3, #1
 8047592:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8047594:	68fb      	ldr	r3, [r7, #12]
 8047596:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 804759a:	d901      	bls.n	80475a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 804759c:	2303      	movs	r3, #3
 804759e:	e01b      	b.n	80475d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80475a0:	687b      	ldr	r3, [r7, #4]
 80475a2:	691b      	ldr	r3, [r3, #16]
 80475a4:	2b00      	cmp	r3, #0
 80475a6:	daf2      	bge.n	804758e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80475a8:	2300      	movs	r3, #0
 80475aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80475ac:	683b      	ldr	r3, [r7, #0]
 80475ae:	019b      	lsls	r3, r3, #6
 80475b0:	f043 0220 	orr.w	r2, r3, #32
 80475b4:	687b      	ldr	r3, [r7, #4]
 80475b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80475b8:	68fb      	ldr	r3, [r7, #12]
 80475ba:	3301      	adds	r3, #1
 80475bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80475be:	68fb      	ldr	r3, [r7, #12]
 80475c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80475c4:	d901      	bls.n	80475ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80475c6:	2303      	movs	r3, #3
 80475c8:	e006      	b.n	80475d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80475ca:	687b      	ldr	r3, [r7, #4]
 80475cc:	691b      	ldr	r3, [r3, #16]
 80475ce:	f003 0320 	and.w	r3, r3, #32
 80475d2:	2b20      	cmp	r3, #32
 80475d4:	d0f0      	beq.n	80475b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80475d6:	2300      	movs	r3, #0
}
 80475d8:	4618      	mov	r0, r3
 80475da:	3714      	adds	r7, #20
 80475dc:	46bd      	mov	sp, r7
 80475de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80475e2:	4770      	bx	lr

080475e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80475e4:	b480      	push	{r7}
 80475e6:	b085      	sub	sp, #20
 80475e8:	af00      	add	r7, sp, #0
 80475ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80475ec:	2300      	movs	r3, #0
 80475ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80475f0:	68fb      	ldr	r3, [r7, #12]
 80475f2:	3301      	adds	r3, #1
 80475f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80475f6:	68fb      	ldr	r3, [r7, #12]
 80475f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80475fc:	d901      	bls.n	8047602 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80475fe:	2303      	movs	r3, #3
 8047600:	e018      	b.n	8047634 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8047602:	687b      	ldr	r3, [r7, #4]
 8047604:	691b      	ldr	r3, [r3, #16]
 8047606:	2b00      	cmp	r3, #0
 8047608:	daf2      	bge.n	80475f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 804760a:	2300      	movs	r3, #0
 804760c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 804760e:	687b      	ldr	r3, [r7, #4]
 8047610:	2210      	movs	r2, #16
 8047612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8047614:	68fb      	ldr	r3, [r7, #12]
 8047616:	3301      	adds	r3, #1
 8047618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 804761a:	68fb      	ldr	r3, [r7, #12]
 804761c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8047620:	d901      	bls.n	8047626 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8047622:	2303      	movs	r3, #3
 8047624:	e006      	b.n	8047634 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8047626:	687b      	ldr	r3, [r7, #4]
 8047628:	691b      	ldr	r3, [r3, #16]
 804762a:	f003 0310 	and.w	r3, r3, #16
 804762e:	2b10      	cmp	r3, #16
 8047630:	d0f0      	beq.n	8047614 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8047632:	2300      	movs	r3, #0
}
 8047634:	4618      	mov	r0, r3
 8047636:	3714      	adds	r7, #20
 8047638:	46bd      	mov	sp, r7
 804763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804763e:	4770      	bx	lr

08047640 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8047640:	b480      	push	{r7}
 8047642:	b085      	sub	sp, #20
 8047644:	af00      	add	r7, sp, #0
 8047646:	6078      	str	r0, [r7, #4]
 8047648:	460b      	mov	r3, r1
 804764a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804764c:	687b      	ldr	r3, [r7, #4]
 804764e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8047650:	68fb      	ldr	r3, [r7, #12]
 8047652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047656:	681a      	ldr	r2, [r3, #0]
 8047658:	78fb      	ldrb	r3, [r7, #3]
 804765a:	68f9      	ldr	r1, [r7, #12]
 804765c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8047660:	4313      	orrs	r3, r2
 8047662:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8047664:	2300      	movs	r3, #0
}
 8047666:	4618      	mov	r0, r3
 8047668:	3714      	adds	r7, #20
 804766a:	46bd      	mov	sp, r7
 804766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047670:	4770      	bx	lr

08047672 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8047672:	b480      	push	{r7}
 8047674:	b087      	sub	sp, #28
 8047676:	af00      	add	r7, sp, #0
 8047678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804767a:	687b      	ldr	r3, [r7, #4]
 804767c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 804767e:	693b      	ldr	r3, [r7, #16]
 8047680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047684:	689b      	ldr	r3, [r3, #8]
 8047686:	f003 0306 	and.w	r3, r3, #6
 804768a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 804768c:	68fb      	ldr	r3, [r7, #12]
 804768e:	2b00      	cmp	r3, #0
 8047690:	d102      	bne.n	8047698 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8047692:	2300      	movs	r3, #0
 8047694:	75fb      	strb	r3, [r7, #23]
 8047696:	e00a      	b.n	80476ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8047698:	68fb      	ldr	r3, [r7, #12]
 804769a:	2b02      	cmp	r3, #2
 804769c:	d002      	beq.n	80476a4 <USB_GetDevSpeed+0x32>
 804769e:	68fb      	ldr	r3, [r7, #12]
 80476a0:	2b06      	cmp	r3, #6
 80476a2:	d102      	bne.n	80476aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80476a4:	2302      	movs	r3, #2
 80476a6:	75fb      	strb	r3, [r7, #23]
 80476a8:	e001      	b.n	80476ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80476aa:	230f      	movs	r3, #15
 80476ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80476ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80476b0:	4618      	mov	r0, r3
 80476b2:	371c      	adds	r7, #28
 80476b4:	46bd      	mov	sp, r7
 80476b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80476ba:	4770      	bx	lr

080476bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80476bc:	b480      	push	{r7}
 80476be:	b085      	sub	sp, #20
 80476c0:	af00      	add	r7, sp, #0
 80476c2:	6078      	str	r0, [r7, #4]
 80476c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80476c6:	687b      	ldr	r3, [r7, #4]
 80476c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80476ca:	683b      	ldr	r3, [r7, #0]
 80476cc:	781b      	ldrb	r3, [r3, #0]
 80476ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80476d0:	683b      	ldr	r3, [r7, #0]
 80476d2:	785b      	ldrb	r3, [r3, #1]
 80476d4:	2b01      	cmp	r3, #1
 80476d6:	d139      	bne.n	804774c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80476d8:	68fb      	ldr	r3, [r7, #12]
 80476da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80476de:	69da      	ldr	r2, [r3, #28]
 80476e0:	683b      	ldr	r3, [r7, #0]
 80476e2:	781b      	ldrb	r3, [r3, #0]
 80476e4:	f003 030f 	and.w	r3, r3, #15
 80476e8:	2101      	movs	r1, #1
 80476ea:	fa01 f303 	lsl.w	r3, r1, r3
 80476ee:	b29b      	uxth	r3, r3
 80476f0:	68f9      	ldr	r1, [r7, #12]
 80476f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80476f6:	4313      	orrs	r3, r2
 80476f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80476fa:	68bb      	ldr	r3, [r7, #8]
 80476fc:	015a      	lsls	r2, r3, #5
 80476fe:	68fb      	ldr	r3, [r7, #12]
 8047700:	4413      	add	r3, r2
 8047702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047706:	681b      	ldr	r3, [r3, #0]
 8047708:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 804770c:	2b00      	cmp	r3, #0
 804770e:	d153      	bne.n	80477b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8047710:	68bb      	ldr	r3, [r7, #8]
 8047712:	015a      	lsls	r2, r3, #5
 8047714:	68fb      	ldr	r3, [r7, #12]
 8047716:	4413      	add	r3, r2
 8047718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804771c:	681a      	ldr	r2, [r3, #0]
 804771e:	683b      	ldr	r3, [r7, #0]
 8047720:	689b      	ldr	r3, [r3, #8]
 8047722:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8047726:	683b      	ldr	r3, [r7, #0]
 8047728:	791b      	ldrb	r3, [r3, #4]
 804772a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 804772c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 804772e:	68bb      	ldr	r3, [r7, #8]
 8047730:	059b      	lsls	r3, r3, #22
 8047732:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8047734:	431a      	orrs	r2, r3
 8047736:	68bb      	ldr	r3, [r7, #8]
 8047738:	0159      	lsls	r1, r3, #5
 804773a:	68fb      	ldr	r3, [r7, #12]
 804773c:	440b      	add	r3, r1
 804773e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047742:	4619      	mov	r1, r3
 8047744:	4b20      	ldr	r3, [pc, #128]	@ (80477c8 <USB_ActivateEndpoint+0x10c>)
 8047746:	4313      	orrs	r3, r2
 8047748:	600b      	str	r3, [r1, #0]
 804774a:	e035      	b.n	80477b8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 804774c:	68fb      	ldr	r3, [r7, #12]
 804774e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047752:	69da      	ldr	r2, [r3, #28]
 8047754:	683b      	ldr	r3, [r7, #0]
 8047756:	781b      	ldrb	r3, [r3, #0]
 8047758:	f003 030f 	and.w	r3, r3, #15
 804775c:	2101      	movs	r1, #1
 804775e:	fa01 f303 	lsl.w	r3, r1, r3
 8047762:	041b      	lsls	r3, r3, #16
 8047764:	68f9      	ldr	r1, [r7, #12]
 8047766:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 804776a:	4313      	orrs	r3, r2
 804776c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 804776e:	68bb      	ldr	r3, [r7, #8]
 8047770:	015a      	lsls	r2, r3, #5
 8047772:	68fb      	ldr	r3, [r7, #12]
 8047774:	4413      	add	r3, r2
 8047776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804777a:	681b      	ldr	r3, [r3, #0]
 804777c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8047780:	2b00      	cmp	r3, #0
 8047782:	d119      	bne.n	80477b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8047784:	68bb      	ldr	r3, [r7, #8]
 8047786:	015a      	lsls	r2, r3, #5
 8047788:	68fb      	ldr	r3, [r7, #12]
 804778a:	4413      	add	r3, r2
 804778c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047790:	681a      	ldr	r2, [r3, #0]
 8047792:	683b      	ldr	r3, [r7, #0]
 8047794:	689b      	ldr	r3, [r3, #8]
 8047796:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 804779a:	683b      	ldr	r3, [r7, #0]
 804779c:	791b      	ldrb	r3, [r3, #4]
 804779e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80477a0:	430b      	orrs	r3, r1
 80477a2:	431a      	orrs	r2, r3
 80477a4:	68bb      	ldr	r3, [r7, #8]
 80477a6:	0159      	lsls	r1, r3, #5
 80477a8:	68fb      	ldr	r3, [r7, #12]
 80477aa:	440b      	add	r3, r1
 80477ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80477b0:	4619      	mov	r1, r3
 80477b2:	4b05      	ldr	r3, [pc, #20]	@ (80477c8 <USB_ActivateEndpoint+0x10c>)
 80477b4:	4313      	orrs	r3, r2
 80477b6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80477b8:	2300      	movs	r3, #0
}
 80477ba:	4618      	mov	r0, r3
 80477bc:	3714      	adds	r7, #20
 80477be:	46bd      	mov	sp, r7
 80477c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80477c4:	4770      	bx	lr
 80477c6:	bf00      	nop
 80477c8:	10008000 	.word	0x10008000

080477cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80477cc:	b480      	push	{r7}
 80477ce:	b085      	sub	sp, #20
 80477d0:	af00      	add	r7, sp, #0
 80477d2:	6078      	str	r0, [r7, #4]
 80477d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80477d6:	687b      	ldr	r3, [r7, #4]
 80477d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80477da:	683b      	ldr	r3, [r7, #0]
 80477dc:	781b      	ldrb	r3, [r3, #0]
 80477de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80477e0:	683b      	ldr	r3, [r7, #0]
 80477e2:	785b      	ldrb	r3, [r3, #1]
 80477e4:	2b01      	cmp	r3, #1
 80477e6:	d161      	bne.n	80478ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80477e8:	68bb      	ldr	r3, [r7, #8]
 80477ea:	015a      	lsls	r2, r3, #5
 80477ec:	68fb      	ldr	r3, [r7, #12]
 80477ee:	4413      	add	r3, r2
 80477f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80477f4:	681b      	ldr	r3, [r3, #0]
 80477f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80477fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80477fe:	d11f      	bne.n	8047840 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8047800:	68bb      	ldr	r3, [r7, #8]
 8047802:	015a      	lsls	r2, r3, #5
 8047804:	68fb      	ldr	r3, [r7, #12]
 8047806:	4413      	add	r3, r2
 8047808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804780c:	681b      	ldr	r3, [r3, #0]
 804780e:	68ba      	ldr	r2, [r7, #8]
 8047810:	0151      	lsls	r1, r2, #5
 8047812:	68fa      	ldr	r2, [r7, #12]
 8047814:	440a      	add	r2, r1
 8047816:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 804781a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 804781e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8047820:	68bb      	ldr	r3, [r7, #8]
 8047822:	015a      	lsls	r2, r3, #5
 8047824:	68fb      	ldr	r3, [r7, #12]
 8047826:	4413      	add	r3, r2
 8047828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804782c:	681b      	ldr	r3, [r3, #0]
 804782e:	68ba      	ldr	r2, [r7, #8]
 8047830:	0151      	lsls	r1, r2, #5
 8047832:	68fa      	ldr	r2, [r7, #12]
 8047834:	440a      	add	r2, r1
 8047836:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 804783a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 804783e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8047840:	68fb      	ldr	r3, [r7, #12]
 8047842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047846:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8047848:	683b      	ldr	r3, [r7, #0]
 804784a:	781b      	ldrb	r3, [r3, #0]
 804784c:	f003 030f 	and.w	r3, r3, #15
 8047850:	2101      	movs	r1, #1
 8047852:	fa01 f303 	lsl.w	r3, r1, r3
 8047856:	b29b      	uxth	r3, r3
 8047858:	43db      	mvns	r3, r3
 804785a:	68f9      	ldr	r1, [r7, #12]
 804785c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8047860:	4013      	ands	r3, r2
 8047862:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8047864:	68fb      	ldr	r3, [r7, #12]
 8047866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804786a:	69da      	ldr	r2, [r3, #28]
 804786c:	683b      	ldr	r3, [r7, #0]
 804786e:	781b      	ldrb	r3, [r3, #0]
 8047870:	f003 030f 	and.w	r3, r3, #15
 8047874:	2101      	movs	r1, #1
 8047876:	fa01 f303 	lsl.w	r3, r1, r3
 804787a:	b29b      	uxth	r3, r3
 804787c:	43db      	mvns	r3, r3
 804787e:	68f9      	ldr	r1, [r7, #12]
 8047880:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8047884:	4013      	ands	r3, r2
 8047886:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8047888:	68bb      	ldr	r3, [r7, #8]
 804788a:	015a      	lsls	r2, r3, #5
 804788c:	68fb      	ldr	r3, [r7, #12]
 804788e:	4413      	add	r3, r2
 8047890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047894:	681a      	ldr	r2, [r3, #0]
 8047896:	68bb      	ldr	r3, [r7, #8]
 8047898:	0159      	lsls	r1, r3, #5
 804789a:	68fb      	ldr	r3, [r7, #12]
 804789c:	440b      	add	r3, r1
 804789e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80478a2:	4619      	mov	r1, r3
 80478a4:	4b35      	ldr	r3, [pc, #212]	@ (804797c <USB_DeactivateEndpoint+0x1b0>)
 80478a6:	4013      	ands	r3, r2
 80478a8:	600b      	str	r3, [r1, #0]
 80478aa:	e060      	b.n	804796e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80478ac:	68bb      	ldr	r3, [r7, #8]
 80478ae:	015a      	lsls	r2, r3, #5
 80478b0:	68fb      	ldr	r3, [r7, #12]
 80478b2:	4413      	add	r3, r2
 80478b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80478b8:	681b      	ldr	r3, [r3, #0]
 80478ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80478be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80478c2:	d11f      	bne.n	8047904 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80478c4:	68bb      	ldr	r3, [r7, #8]
 80478c6:	015a      	lsls	r2, r3, #5
 80478c8:	68fb      	ldr	r3, [r7, #12]
 80478ca:	4413      	add	r3, r2
 80478cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80478d0:	681b      	ldr	r3, [r3, #0]
 80478d2:	68ba      	ldr	r2, [r7, #8]
 80478d4:	0151      	lsls	r1, r2, #5
 80478d6:	68fa      	ldr	r2, [r7, #12]
 80478d8:	440a      	add	r2, r1
 80478da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80478de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80478e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80478e4:	68bb      	ldr	r3, [r7, #8]
 80478e6:	015a      	lsls	r2, r3, #5
 80478e8:	68fb      	ldr	r3, [r7, #12]
 80478ea:	4413      	add	r3, r2
 80478ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80478f0:	681b      	ldr	r3, [r3, #0]
 80478f2:	68ba      	ldr	r2, [r7, #8]
 80478f4:	0151      	lsls	r1, r2, #5
 80478f6:	68fa      	ldr	r2, [r7, #12]
 80478f8:	440a      	add	r2, r1
 80478fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80478fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8047902:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8047904:	68fb      	ldr	r3, [r7, #12]
 8047906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804790a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 804790c:	683b      	ldr	r3, [r7, #0]
 804790e:	781b      	ldrb	r3, [r3, #0]
 8047910:	f003 030f 	and.w	r3, r3, #15
 8047914:	2101      	movs	r1, #1
 8047916:	fa01 f303 	lsl.w	r3, r1, r3
 804791a:	041b      	lsls	r3, r3, #16
 804791c:	43db      	mvns	r3, r3
 804791e:	68f9      	ldr	r1, [r7, #12]
 8047920:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8047924:	4013      	ands	r3, r2
 8047926:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8047928:	68fb      	ldr	r3, [r7, #12]
 804792a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804792e:	69da      	ldr	r2, [r3, #28]
 8047930:	683b      	ldr	r3, [r7, #0]
 8047932:	781b      	ldrb	r3, [r3, #0]
 8047934:	f003 030f 	and.w	r3, r3, #15
 8047938:	2101      	movs	r1, #1
 804793a:	fa01 f303 	lsl.w	r3, r1, r3
 804793e:	041b      	lsls	r3, r3, #16
 8047940:	43db      	mvns	r3, r3
 8047942:	68f9      	ldr	r1, [r7, #12]
 8047944:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8047948:	4013      	ands	r3, r2
 804794a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 804794c:	68bb      	ldr	r3, [r7, #8]
 804794e:	015a      	lsls	r2, r3, #5
 8047950:	68fb      	ldr	r3, [r7, #12]
 8047952:	4413      	add	r3, r2
 8047954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047958:	681a      	ldr	r2, [r3, #0]
 804795a:	68bb      	ldr	r3, [r7, #8]
 804795c:	0159      	lsls	r1, r3, #5
 804795e:	68fb      	ldr	r3, [r7, #12]
 8047960:	440b      	add	r3, r1
 8047962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047966:	4619      	mov	r1, r3
 8047968:	4b05      	ldr	r3, [pc, #20]	@ (8047980 <USB_DeactivateEndpoint+0x1b4>)
 804796a:	4013      	ands	r3, r2
 804796c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 804796e:	2300      	movs	r3, #0
}
 8047970:	4618      	mov	r0, r3
 8047972:	3714      	adds	r7, #20
 8047974:	46bd      	mov	sp, r7
 8047976:	f85d 7b04 	ldr.w	r7, [sp], #4
 804797a:	4770      	bx	lr
 804797c:	ec337800 	.word	0xec337800
 8047980:	eff37800 	.word	0xeff37800

08047984 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8047984:	b580      	push	{r7, lr}
 8047986:	b08a      	sub	sp, #40	@ 0x28
 8047988:	af02      	add	r7, sp, #8
 804798a:	60f8      	str	r0, [r7, #12]
 804798c:	60b9      	str	r1, [r7, #8]
 804798e:	4613      	mov	r3, r2
 8047990:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047992:	68fb      	ldr	r3, [r7, #12]
 8047994:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8047996:	68bb      	ldr	r3, [r7, #8]
 8047998:	781b      	ldrb	r3, [r3, #0]
 804799a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 804799c:	68bb      	ldr	r3, [r7, #8]
 804799e:	785b      	ldrb	r3, [r3, #1]
 80479a0:	2b01      	cmp	r3, #1
 80479a2:	f040 8185 	bne.w	8047cb0 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80479a6:	68bb      	ldr	r3, [r7, #8]
 80479a8:	691b      	ldr	r3, [r3, #16]
 80479aa:	2b00      	cmp	r3, #0
 80479ac:	d132      	bne.n	8047a14 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80479ae:	69bb      	ldr	r3, [r7, #24]
 80479b0:	015a      	lsls	r2, r3, #5
 80479b2:	69fb      	ldr	r3, [r7, #28]
 80479b4:	4413      	add	r3, r2
 80479b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80479ba:	691a      	ldr	r2, [r3, #16]
 80479bc:	69bb      	ldr	r3, [r7, #24]
 80479be:	0159      	lsls	r1, r3, #5
 80479c0:	69fb      	ldr	r3, [r7, #28]
 80479c2:	440b      	add	r3, r1
 80479c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80479c8:	4619      	mov	r1, r3
 80479ca:	4ba7      	ldr	r3, [pc, #668]	@ (8047c68 <USB_EPStartXfer+0x2e4>)
 80479cc:	4013      	ands	r3, r2
 80479ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80479d0:	69bb      	ldr	r3, [r7, #24]
 80479d2:	015a      	lsls	r2, r3, #5
 80479d4:	69fb      	ldr	r3, [r7, #28]
 80479d6:	4413      	add	r3, r2
 80479d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80479dc:	691b      	ldr	r3, [r3, #16]
 80479de:	69ba      	ldr	r2, [r7, #24]
 80479e0:	0151      	lsls	r1, r2, #5
 80479e2:	69fa      	ldr	r2, [r7, #28]
 80479e4:	440a      	add	r2, r1
 80479e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80479ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80479ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80479f0:	69bb      	ldr	r3, [r7, #24]
 80479f2:	015a      	lsls	r2, r3, #5
 80479f4:	69fb      	ldr	r3, [r7, #28]
 80479f6:	4413      	add	r3, r2
 80479f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80479fc:	691a      	ldr	r2, [r3, #16]
 80479fe:	69bb      	ldr	r3, [r7, #24]
 8047a00:	0159      	lsls	r1, r3, #5
 8047a02:	69fb      	ldr	r3, [r7, #28]
 8047a04:	440b      	add	r3, r1
 8047a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047a0a:	4619      	mov	r1, r3
 8047a0c:	4b97      	ldr	r3, [pc, #604]	@ (8047c6c <USB_EPStartXfer+0x2e8>)
 8047a0e:	4013      	ands	r3, r2
 8047a10:	610b      	str	r3, [r1, #16]
 8047a12:	e097      	b.n	8047b44 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8047a14:	69bb      	ldr	r3, [r7, #24]
 8047a16:	015a      	lsls	r2, r3, #5
 8047a18:	69fb      	ldr	r3, [r7, #28]
 8047a1a:	4413      	add	r3, r2
 8047a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047a20:	691a      	ldr	r2, [r3, #16]
 8047a22:	69bb      	ldr	r3, [r7, #24]
 8047a24:	0159      	lsls	r1, r3, #5
 8047a26:	69fb      	ldr	r3, [r7, #28]
 8047a28:	440b      	add	r3, r1
 8047a2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047a2e:	4619      	mov	r1, r3
 8047a30:	4b8e      	ldr	r3, [pc, #568]	@ (8047c6c <USB_EPStartXfer+0x2e8>)
 8047a32:	4013      	ands	r3, r2
 8047a34:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8047a36:	69bb      	ldr	r3, [r7, #24]
 8047a38:	015a      	lsls	r2, r3, #5
 8047a3a:	69fb      	ldr	r3, [r7, #28]
 8047a3c:	4413      	add	r3, r2
 8047a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047a42:	691a      	ldr	r2, [r3, #16]
 8047a44:	69bb      	ldr	r3, [r7, #24]
 8047a46:	0159      	lsls	r1, r3, #5
 8047a48:	69fb      	ldr	r3, [r7, #28]
 8047a4a:	440b      	add	r3, r1
 8047a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047a50:	4619      	mov	r1, r3
 8047a52:	4b85      	ldr	r3, [pc, #532]	@ (8047c68 <USB_EPStartXfer+0x2e4>)
 8047a54:	4013      	ands	r3, r2
 8047a56:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8047a58:	69bb      	ldr	r3, [r7, #24]
 8047a5a:	2b00      	cmp	r3, #0
 8047a5c:	d11a      	bne.n	8047a94 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8047a5e:	68bb      	ldr	r3, [r7, #8]
 8047a60:	691a      	ldr	r2, [r3, #16]
 8047a62:	68bb      	ldr	r3, [r7, #8]
 8047a64:	689b      	ldr	r3, [r3, #8]
 8047a66:	429a      	cmp	r2, r3
 8047a68:	d903      	bls.n	8047a72 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8047a6a:	68bb      	ldr	r3, [r7, #8]
 8047a6c:	689a      	ldr	r2, [r3, #8]
 8047a6e:	68bb      	ldr	r3, [r7, #8]
 8047a70:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8047a72:	69bb      	ldr	r3, [r7, #24]
 8047a74:	015a      	lsls	r2, r3, #5
 8047a76:	69fb      	ldr	r3, [r7, #28]
 8047a78:	4413      	add	r3, r2
 8047a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047a7e:	691b      	ldr	r3, [r3, #16]
 8047a80:	69ba      	ldr	r2, [r7, #24]
 8047a82:	0151      	lsls	r1, r2, #5
 8047a84:	69fa      	ldr	r2, [r7, #28]
 8047a86:	440a      	add	r2, r1
 8047a88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047a8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8047a90:	6113      	str	r3, [r2, #16]
 8047a92:	e044      	b.n	8047b1e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8047a94:	68bb      	ldr	r3, [r7, #8]
 8047a96:	691a      	ldr	r2, [r3, #16]
 8047a98:	68bb      	ldr	r3, [r7, #8]
 8047a9a:	689b      	ldr	r3, [r3, #8]
 8047a9c:	4413      	add	r3, r2
 8047a9e:	1e5a      	subs	r2, r3, #1
 8047aa0:	68bb      	ldr	r3, [r7, #8]
 8047aa2:	689b      	ldr	r3, [r3, #8]
 8047aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8047aa8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8047aaa:	69bb      	ldr	r3, [r7, #24]
 8047aac:	015a      	lsls	r2, r3, #5
 8047aae:	69fb      	ldr	r3, [r7, #28]
 8047ab0:	4413      	add	r3, r2
 8047ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047ab6:	691a      	ldr	r2, [r3, #16]
 8047ab8:	8afb      	ldrh	r3, [r7, #22]
 8047aba:	04d9      	lsls	r1, r3, #19
 8047abc:	4b6c      	ldr	r3, [pc, #432]	@ (8047c70 <USB_EPStartXfer+0x2ec>)
 8047abe:	400b      	ands	r3, r1
 8047ac0:	69b9      	ldr	r1, [r7, #24]
 8047ac2:	0148      	lsls	r0, r1, #5
 8047ac4:	69f9      	ldr	r1, [r7, #28]
 8047ac6:	4401      	add	r1, r0
 8047ac8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8047acc:	4313      	orrs	r3, r2
 8047ace:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8047ad0:	68bb      	ldr	r3, [r7, #8]
 8047ad2:	791b      	ldrb	r3, [r3, #4]
 8047ad4:	2b01      	cmp	r3, #1
 8047ad6:	d122      	bne.n	8047b1e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8047ad8:	69bb      	ldr	r3, [r7, #24]
 8047ada:	015a      	lsls	r2, r3, #5
 8047adc:	69fb      	ldr	r3, [r7, #28]
 8047ade:	4413      	add	r3, r2
 8047ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047ae4:	691b      	ldr	r3, [r3, #16]
 8047ae6:	69ba      	ldr	r2, [r7, #24]
 8047ae8:	0151      	lsls	r1, r2, #5
 8047aea:	69fa      	ldr	r2, [r7, #28]
 8047aec:	440a      	add	r2, r1
 8047aee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047af2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8047af6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8047af8:	69bb      	ldr	r3, [r7, #24]
 8047afa:	015a      	lsls	r2, r3, #5
 8047afc:	69fb      	ldr	r3, [r7, #28]
 8047afe:	4413      	add	r3, r2
 8047b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047b04:	691a      	ldr	r2, [r3, #16]
 8047b06:	8afb      	ldrh	r3, [r7, #22]
 8047b08:	075b      	lsls	r3, r3, #29
 8047b0a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8047b0e:	69b9      	ldr	r1, [r7, #24]
 8047b10:	0148      	lsls	r0, r1, #5
 8047b12:	69f9      	ldr	r1, [r7, #28]
 8047b14:	4401      	add	r1, r0
 8047b16:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8047b1a:	4313      	orrs	r3, r2
 8047b1c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8047b1e:	69bb      	ldr	r3, [r7, #24]
 8047b20:	015a      	lsls	r2, r3, #5
 8047b22:	69fb      	ldr	r3, [r7, #28]
 8047b24:	4413      	add	r3, r2
 8047b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047b2a:	691a      	ldr	r2, [r3, #16]
 8047b2c:	68bb      	ldr	r3, [r7, #8]
 8047b2e:	691b      	ldr	r3, [r3, #16]
 8047b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047b34:	69b9      	ldr	r1, [r7, #24]
 8047b36:	0148      	lsls	r0, r1, #5
 8047b38:	69f9      	ldr	r1, [r7, #28]
 8047b3a:	4401      	add	r1, r0
 8047b3c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8047b40:	4313      	orrs	r3, r2
 8047b42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8047b44:	79fb      	ldrb	r3, [r7, #7]
 8047b46:	2b01      	cmp	r3, #1
 8047b48:	d14b      	bne.n	8047be2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8047b4a:	68bb      	ldr	r3, [r7, #8]
 8047b4c:	69db      	ldr	r3, [r3, #28]
 8047b4e:	2b00      	cmp	r3, #0
 8047b50:	d009      	beq.n	8047b66 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8047b52:	69bb      	ldr	r3, [r7, #24]
 8047b54:	015a      	lsls	r2, r3, #5
 8047b56:	69fb      	ldr	r3, [r7, #28]
 8047b58:	4413      	add	r3, r2
 8047b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047b5e:	461a      	mov	r2, r3
 8047b60:	68bb      	ldr	r3, [r7, #8]
 8047b62:	69db      	ldr	r3, [r3, #28]
 8047b64:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8047b66:	68bb      	ldr	r3, [r7, #8]
 8047b68:	791b      	ldrb	r3, [r3, #4]
 8047b6a:	2b01      	cmp	r3, #1
 8047b6c:	d128      	bne.n	8047bc0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8047b6e:	69fb      	ldr	r3, [r7, #28]
 8047b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047b74:	689b      	ldr	r3, [r3, #8]
 8047b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8047b7a:	2b00      	cmp	r3, #0
 8047b7c:	d110      	bne.n	8047ba0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8047b7e:	69bb      	ldr	r3, [r7, #24]
 8047b80:	015a      	lsls	r2, r3, #5
 8047b82:	69fb      	ldr	r3, [r7, #28]
 8047b84:	4413      	add	r3, r2
 8047b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047b8a:	681b      	ldr	r3, [r3, #0]
 8047b8c:	69ba      	ldr	r2, [r7, #24]
 8047b8e:	0151      	lsls	r1, r2, #5
 8047b90:	69fa      	ldr	r2, [r7, #28]
 8047b92:	440a      	add	r2, r1
 8047b94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047b98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8047b9c:	6013      	str	r3, [r2, #0]
 8047b9e:	e00f      	b.n	8047bc0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8047ba0:	69bb      	ldr	r3, [r7, #24]
 8047ba2:	015a      	lsls	r2, r3, #5
 8047ba4:	69fb      	ldr	r3, [r7, #28]
 8047ba6:	4413      	add	r3, r2
 8047ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047bac:	681b      	ldr	r3, [r3, #0]
 8047bae:	69ba      	ldr	r2, [r7, #24]
 8047bb0:	0151      	lsls	r1, r2, #5
 8047bb2:	69fa      	ldr	r2, [r7, #28]
 8047bb4:	440a      	add	r2, r1
 8047bb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8047bbe:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8047bc0:	69bb      	ldr	r3, [r7, #24]
 8047bc2:	015a      	lsls	r2, r3, #5
 8047bc4:	69fb      	ldr	r3, [r7, #28]
 8047bc6:	4413      	add	r3, r2
 8047bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047bcc:	681b      	ldr	r3, [r3, #0]
 8047bce:	69ba      	ldr	r2, [r7, #24]
 8047bd0:	0151      	lsls	r1, r2, #5
 8047bd2:	69fa      	ldr	r2, [r7, #28]
 8047bd4:	440a      	add	r2, r1
 8047bd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047bda:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8047bde:	6013      	str	r3, [r2, #0]
 8047be0:	e169      	b.n	8047eb6 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8047be2:	69bb      	ldr	r3, [r7, #24]
 8047be4:	015a      	lsls	r2, r3, #5
 8047be6:	69fb      	ldr	r3, [r7, #28]
 8047be8:	4413      	add	r3, r2
 8047bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047bee:	681b      	ldr	r3, [r3, #0]
 8047bf0:	69ba      	ldr	r2, [r7, #24]
 8047bf2:	0151      	lsls	r1, r2, #5
 8047bf4:	69fa      	ldr	r2, [r7, #28]
 8047bf6:	440a      	add	r2, r1
 8047bf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047bfc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8047c00:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8047c02:	68bb      	ldr	r3, [r7, #8]
 8047c04:	791b      	ldrb	r3, [r3, #4]
 8047c06:	2b01      	cmp	r3, #1
 8047c08:	d015      	beq.n	8047c36 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8047c0a:	68bb      	ldr	r3, [r7, #8]
 8047c0c:	691b      	ldr	r3, [r3, #16]
 8047c0e:	2b00      	cmp	r3, #0
 8047c10:	f000 8151 	beq.w	8047eb6 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8047c14:	69fb      	ldr	r3, [r7, #28]
 8047c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047c1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8047c1c:	68bb      	ldr	r3, [r7, #8]
 8047c1e:	781b      	ldrb	r3, [r3, #0]
 8047c20:	f003 030f 	and.w	r3, r3, #15
 8047c24:	2101      	movs	r1, #1
 8047c26:	fa01 f303 	lsl.w	r3, r1, r3
 8047c2a:	69f9      	ldr	r1, [r7, #28]
 8047c2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8047c30:	4313      	orrs	r3, r2
 8047c32:	634b      	str	r3, [r1, #52]	@ 0x34
 8047c34:	e13f      	b.n	8047eb6 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8047c36:	69fb      	ldr	r3, [r7, #28]
 8047c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047c3c:	689b      	ldr	r3, [r3, #8]
 8047c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8047c42:	2b00      	cmp	r3, #0
 8047c44:	d116      	bne.n	8047c74 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8047c46:	69bb      	ldr	r3, [r7, #24]
 8047c48:	015a      	lsls	r2, r3, #5
 8047c4a:	69fb      	ldr	r3, [r7, #28]
 8047c4c:	4413      	add	r3, r2
 8047c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047c52:	681b      	ldr	r3, [r3, #0]
 8047c54:	69ba      	ldr	r2, [r7, #24]
 8047c56:	0151      	lsls	r1, r2, #5
 8047c58:	69fa      	ldr	r2, [r7, #28]
 8047c5a:	440a      	add	r2, r1
 8047c5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047c60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8047c64:	6013      	str	r3, [r2, #0]
 8047c66:	e015      	b.n	8047c94 <USB_EPStartXfer+0x310>
 8047c68:	e007ffff 	.word	0xe007ffff
 8047c6c:	fff80000 	.word	0xfff80000
 8047c70:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8047c74:	69bb      	ldr	r3, [r7, #24]
 8047c76:	015a      	lsls	r2, r3, #5
 8047c78:	69fb      	ldr	r3, [r7, #28]
 8047c7a:	4413      	add	r3, r2
 8047c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047c80:	681b      	ldr	r3, [r3, #0]
 8047c82:	69ba      	ldr	r2, [r7, #24]
 8047c84:	0151      	lsls	r1, r2, #5
 8047c86:	69fa      	ldr	r2, [r7, #28]
 8047c88:	440a      	add	r2, r1
 8047c8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8047c92:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8047c94:	68bb      	ldr	r3, [r7, #8]
 8047c96:	68d9      	ldr	r1, [r3, #12]
 8047c98:	68bb      	ldr	r3, [r7, #8]
 8047c9a:	781a      	ldrb	r2, [r3, #0]
 8047c9c:	68bb      	ldr	r3, [r7, #8]
 8047c9e:	691b      	ldr	r3, [r3, #16]
 8047ca0:	b298      	uxth	r0, r3
 8047ca2:	79fb      	ldrb	r3, [r7, #7]
 8047ca4:	9300      	str	r3, [sp, #0]
 8047ca6:	4603      	mov	r3, r0
 8047ca8:	68f8      	ldr	r0, [r7, #12]
 8047caa:	f000 f9b9 	bl	8048020 <USB_WritePacket>
 8047cae:	e102      	b.n	8047eb6 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8047cb0:	69bb      	ldr	r3, [r7, #24]
 8047cb2:	015a      	lsls	r2, r3, #5
 8047cb4:	69fb      	ldr	r3, [r7, #28]
 8047cb6:	4413      	add	r3, r2
 8047cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047cbc:	691a      	ldr	r2, [r3, #16]
 8047cbe:	69bb      	ldr	r3, [r7, #24]
 8047cc0:	0159      	lsls	r1, r3, #5
 8047cc2:	69fb      	ldr	r3, [r7, #28]
 8047cc4:	440b      	add	r3, r1
 8047cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047cca:	4619      	mov	r1, r3
 8047ccc:	4b7c      	ldr	r3, [pc, #496]	@ (8047ec0 <USB_EPStartXfer+0x53c>)
 8047cce:	4013      	ands	r3, r2
 8047cd0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8047cd2:	69bb      	ldr	r3, [r7, #24]
 8047cd4:	015a      	lsls	r2, r3, #5
 8047cd6:	69fb      	ldr	r3, [r7, #28]
 8047cd8:	4413      	add	r3, r2
 8047cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047cde:	691a      	ldr	r2, [r3, #16]
 8047ce0:	69bb      	ldr	r3, [r7, #24]
 8047ce2:	0159      	lsls	r1, r3, #5
 8047ce4:	69fb      	ldr	r3, [r7, #28]
 8047ce6:	440b      	add	r3, r1
 8047ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047cec:	4619      	mov	r1, r3
 8047cee:	4b75      	ldr	r3, [pc, #468]	@ (8047ec4 <USB_EPStartXfer+0x540>)
 8047cf0:	4013      	ands	r3, r2
 8047cf2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8047cf4:	69bb      	ldr	r3, [r7, #24]
 8047cf6:	2b00      	cmp	r3, #0
 8047cf8:	d12f      	bne.n	8047d5a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8047cfa:	68bb      	ldr	r3, [r7, #8]
 8047cfc:	691b      	ldr	r3, [r3, #16]
 8047cfe:	2b00      	cmp	r3, #0
 8047d00:	d003      	beq.n	8047d0a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8047d02:	68bb      	ldr	r3, [r7, #8]
 8047d04:	689a      	ldr	r2, [r3, #8]
 8047d06:	68bb      	ldr	r3, [r7, #8]
 8047d08:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8047d0a:	68bb      	ldr	r3, [r7, #8]
 8047d0c:	689a      	ldr	r2, [r3, #8]
 8047d0e:	68bb      	ldr	r3, [r7, #8]
 8047d10:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8047d12:	69bb      	ldr	r3, [r7, #24]
 8047d14:	015a      	lsls	r2, r3, #5
 8047d16:	69fb      	ldr	r3, [r7, #28]
 8047d18:	4413      	add	r3, r2
 8047d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047d1e:	691a      	ldr	r2, [r3, #16]
 8047d20:	68bb      	ldr	r3, [r7, #8]
 8047d22:	6a1b      	ldr	r3, [r3, #32]
 8047d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047d28:	69b9      	ldr	r1, [r7, #24]
 8047d2a:	0148      	lsls	r0, r1, #5
 8047d2c:	69f9      	ldr	r1, [r7, #28]
 8047d2e:	4401      	add	r1, r0
 8047d30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8047d34:	4313      	orrs	r3, r2
 8047d36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8047d38:	69bb      	ldr	r3, [r7, #24]
 8047d3a:	015a      	lsls	r2, r3, #5
 8047d3c:	69fb      	ldr	r3, [r7, #28]
 8047d3e:	4413      	add	r3, r2
 8047d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047d44:	691b      	ldr	r3, [r3, #16]
 8047d46:	69ba      	ldr	r2, [r7, #24]
 8047d48:	0151      	lsls	r1, r2, #5
 8047d4a:	69fa      	ldr	r2, [r7, #28]
 8047d4c:	440a      	add	r2, r1
 8047d4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047d52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8047d56:	6113      	str	r3, [r2, #16]
 8047d58:	e05f      	b.n	8047e1a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8047d5a:	68bb      	ldr	r3, [r7, #8]
 8047d5c:	691b      	ldr	r3, [r3, #16]
 8047d5e:	2b00      	cmp	r3, #0
 8047d60:	d123      	bne.n	8047daa <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8047d62:	69bb      	ldr	r3, [r7, #24]
 8047d64:	015a      	lsls	r2, r3, #5
 8047d66:	69fb      	ldr	r3, [r7, #28]
 8047d68:	4413      	add	r3, r2
 8047d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047d6e:	691a      	ldr	r2, [r3, #16]
 8047d70:	68bb      	ldr	r3, [r7, #8]
 8047d72:	689b      	ldr	r3, [r3, #8]
 8047d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047d78:	69b9      	ldr	r1, [r7, #24]
 8047d7a:	0148      	lsls	r0, r1, #5
 8047d7c:	69f9      	ldr	r1, [r7, #28]
 8047d7e:	4401      	add	r1, r0
 8047d80:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8047d84:	4313      	orrs	r3, r2
 8047d86:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8047d88:	69bb      	ldr	r3, [r7, #24]
 8047d8a:	015a      	lsls	r2, r3, #5
 8047d8c:	69fb      	ldr	r3, [r7, #28]
 8047d8e:	4413      	add	r3, r2
 8047d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047d94:	691b      	ldr	r3, [r3, #16]
 8047d96:	69ba      	ldr	r2, [r7, #24]
 8047d98:	0151      	lsls	r1, r2, #5
 8047d9a:	69fa      	ldr	r2, [r7, #28]
 8047d9c:	440a      	add	r2, r1
 8047d9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047da2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8047da6:	6113      	str	r3, [r2, #16]
 8047da8:	e037      	b.n	8047e1a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8047daa:	68bb      	ldr	r3, [r7, #8]
 8047dac:	691a      	ldr	r2, [r3, #16]
 8047dae:	68bb      	ldr	r3, [r7, #8]
 8047db0:	689b      	ldr	r3, [r3, #8]
 8047db2:	4413      	add	r3, r2
 8047db4:	1e5a      	subs	r2, r3, #1
 8047db6:	68bb      	ldr	r3, [r7, #8]
 8047db8:	689b      	ldr	r3, [r3, #8]
 8047dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8047dbe:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8047dc0:	68bb      	ldr	r3, [r7, #8]
 8047dc2:	689b      	ldr	r3, [r3, #8]
 8047dc4:	8afa      	ldrh	r2, [r7, #22]
 8047dc6:	fb03 f202 	mul.w	r2, r3, r2
 8047dca:	68bb      	ldr	r3, [r7, #8]
 8047dcc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8047dce:	69bb      	ldr	r3, [r7, #24]
 8047dd0:	015a      	lsls	r2, r3, #5
 8047dd2:	69fb      	ldr	r3, [r7, #28]
 8047dd4:	4413      	add	r3, r2
 8047dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047dda:	691a      	ldr	r2, [r3, #16]
 8047ddc:	8afb      	ldrh	r3, [r7, #22]
 8047dde:	04d9      	lsls	r1, r3, #19
 8047de0:	4b39      	ldr	r3, [pc, #228]	@ (8047ec8 <USB_EPStartXfer+0x544>)
 8047de2:	400b      	ands	r3, r1
 8047de4:	69b9      	ldr	r1, [r7, #24]
 8047de6:	0148      	lsls	r0, r1, #5
 8047de8:	69f9      	ldr	r1, [r7, #28]
 8047dea:	4401      	add	r1, r0
 8047dec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8047df0:	4313      	orrs	r3, r2
 8047df2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8047df4:	69bb      	ldr	r3, [r7, #24]
 8047df6:	015a      	lsls	r2, r3, #5
 8047df8:	69fb      	ldr	r3, [r7, #28]
 8047dfa:	4413      	add	r3, r2
 8047dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047e00:	691a      	ldr	r2, [r3, #16]
 8047e02:	68bb      	ldr	r3, [r7, #8]
 8047e04:	6a1b      	ldr	r3, [r3, #32]
 8047e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047e0a:	69b9      	ldr	r1, [r7, #24]
 8047e0c:	0148      	lsls	r0, r1, #5
 8047e0e:	69f9      	ldr	r1, [r7, #28]
 8047e10:	4401      	add	r1, r0
 8047e12:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8047e16:	4313      	orrs	r3, r2
 8047e18:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8047e1a:	79fb      	ldrb	r3, [r7, #7]
 8047e1c:	2b01      	cmp	r3, #1
 8047e1e:	d10d      	bne.n	8047e3c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8047e20:	68bb      	ldr	r3, [r7, #8]
 8047e22:	68db      	ldr	r3, [r3, #12]
 8047e24:	2b00      	cmp	r3, #0
 8047e26:	d009      	beq.n	8047e3c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8047e28:	68bb      	ldr	r3, [r7, #8]
 8047e2a:	68d9      	ldr	r1, [r3, #12]
 8047e2c:	69bb      	ldr	r3, [r7, #24]
 8047e2e:	015a      	lsls	r2, r3, #5
 8047e30:	69fb      	ldr	r3, [r7, #28]
 8047e32:	4413      	add	r3, r2
 8047e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047e38:	460a      	mov	r2, r1
 8047e3a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8047e3c:	68bb      	ldr	r3, [r7, #8]
 8047e3e:	791b      	ldrb	r3, [r3, #4]
 8047e40:	2b01      	cmp	r3, #1
 8047e42:	d128      	bne.n	8047e96 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8047e44:	69fb      	ldr	r3, [r7, #28]
 8047e46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047e4a:	689b      	ldr	r3, [r3, #8]
 8047e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8047e50:	2b00      	cmp	r3, #0
 8047e52:	d110      	bne.n	8047e76 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8047e54:	69bb      	ldr	r3, [r7, #24]
 8047e56:	015a      	lsls	r2, r3, #5
 8047e58:	69fb      	ldr	r3, [r7, #28]
 8047e5a:	4413      	add	r3, r2
 8047e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047e60:	681b      	ldr	r3, [r3, #0]
 8047e62:	69ba      	ldr	r2, [r7, #24]
 8047e64:	0151      	lsls	r1, r2, #5
 8047e66:	69fa      	ldr	r2, [r7, #28]
 8047e68:	440a      	add	r2, r1
 8047e6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047e6e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8047e72:	6013      	str	r3, [r2, #0]
 8047e74:	e00f      	b.n	8047e96 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8047e76:	69bb      	ldr	r3, [r7, #24]
 8047e78:	015a      	lsls	r2, r3, #5
 8047e7a:	69fb      	ldr	r3, [r7, #28]
 8047e7c:	4413      	add	r3, r2
 8047e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047e82:	681b      	ldr	r3, [r3, #0]
 8047e84:	69ba      	ldr	r2, [r7, #24]
 8047e86:	0151      	lsls	r1, r2, #5
 8047e88:	69fa      	ldr	r2, [r7, #28]
 8047e8a:	440a      	add	r2, r1
 8047e8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8047e94:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8047e96:	69bb      	ldr	r3, [r7, #24]
 8047e98:	015a      	lsls	r2, r3, #5
 8047e9a:	69fb      	ldr	r3, [r7, #28]
 8047e9c:	4413      	add	r3, r2
 8047e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047ea2:	681b      	ldr	r3, [r3, #0]
 8047ea4:	69ba      	ldr	r2, [r7, #24]
 8047ea6:	0151      	lsls	r1, r2, #5
 8047ea8:	69fa      	ldr	r2, [r7, #28]
 8047eaa:	440a      	add	r2, r1
 8047eac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047eb0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8047eb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8047eb6:	2300      	movs	r3, #0
}
 8047eb8:	4618      	mov	r0, r3
 8047eba:	3720      	adds	r7, #32
 8047ebc:	46bd      	mov	sp, r7
 8047ebe:	bd80      	pop	{r7, pc}
 8047ec0:	fff80000 	.word	0xfff80000
 8047ec4:	e007ffff 	.word	0xe007ffff
 8047ec8:	1ff80000 	.word	0x1ff80000

08047ecc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8047ecc:	b480      	push	{r7}
 8047ece:	b087      	sub	sp, #28
 8047ed0:	af00      	add	r7, sp, #0
 8047ed2:	6078      	str	r0, [r7, #4]
 8047ed4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8047ed6:	2300      	movs	r3, #0
 8047ed8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8047eda:	2300      	movs	r3, #0
 8047edc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047ede:	687b      	ldr	r3, [r7, #4]
 8047ee0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8047ee2:	683b      	ldr	r3, [r7, #0]
 8047ee4:	785b      	ldrb	r3, [r3, #1]
 8047ee6:	2b01      	cmp	r3, #1
 8047ee8:	d14a      	bne.n	8047f80 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8047eea:	683b      	ldr	r3, [r7, #0]
 8047eec:	781b      	ldrb	r3, [r3, #0]
 8047eee:	015a      	lsls	r2, r3, #5
 8047ef0:	693b      	ldr	r3, [r7, #16]
 8047ef2:	4413      	add	r3, r2
 8047ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047ef8:	681b      	ldr	r3, [r3, #0]
 8047efa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047efe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047f02:	f040 8086 	bne.w	8048012 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8047f06:	683b      	ldr	r3, [r7, #0]
 8047f08:	781b      	ldrb	r3, [r3, #0]
 8047f0a:	015a      	lsls	r2, r3, #5
 8047f0c:	693b      	ldr	r3, [r7, #16]
 8047f0e:	4413      	add	r3, r2
 8047f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047f14:	681b      	ldr	r3, [r3, #0]
 8047f16:	683a      	ldr	r2, [r7, #0]
 8047f18:	7812      	ldrb	r2, [r2, #0]
 8047f1a:	0151      	lsls	r1, r2, #5
 8047f1c:	693a      	ldr	r2, [r7, #16]
 8047f1e:	440a      	add	r2, r1
 8047f20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047f24:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8047f28:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8047f2a:	683b      	ldr	r3, [r7, #0]
 8047f2c:	781b      	ldrb	r3, [r3, #0]
 8047f2e:	015a      	lsls	r2, r3, #5
 8047f30:	693b      	ldr	r3, [r7, #16]
 8047f32:	4413      	add	r3, r2
 8047f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047f38:	681b      	ldr	r3, [r3, #0]
 8047f3a:	683a      	ldr	r2, [r7, #0]
 8047f3c:	7812      	ldrb	r2, [r2, #0]
 8047f3e:	0151      	lsls	r1, r2, #5
 8047f40:	693a      	ldr	r2, [r7, #16]
 8047f42:	440a      	add	r2, r1
 8047f44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047f48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8047f4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8047f4e:	68fb      	ldr	r3, [r7, #12]
 8047f50:	3301      	adds	r3, #1
 8047f52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8047f54:	68fb      	ldr	r3, [r7, #12]
 8047f56:	f242 7210 	movw	r2, #10000	@ 0x2710
 8047f5a:	4293      	cmp	r3, r2
 8047f5c:	d902      	bls.n	8047f64 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8047f5e:	2301      	movs	r3, #1
 8047f60:	75fb      	strb	r3, [r7, #23]
          break;
 8047f62:	e056      	b.n	8048012 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8047f64:	683b      	ldr	r3, [r7, #0]
 8047f66:	781b      	ldrb	r3, [r3, #0]
 8047f68:	015a      	lsls	r2, r3, #5
 8047f6a:	693b      	ldr	r3, [r7, #16]
 8047f6c:	4413      	add	r3, r2
 8047f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047f72:	681b      	ldr	r3, [r3, #0]
 8047f74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047f78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047f7c:	d0e7      	beq.n	8047f4e <USB_EPStopXfer+0x82>
 8047f7e:	e048      	b.n	8048012 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8047f80:	683b      	ldr	r3, [r7, #0]
 8047f82:	781b      	ldrb	r3, [r3, #0]
 8047f84:	015a      	lsls	r2, r3, #5
 8047f86:	693b      	ldr	r3, [r7, #16]
 8047f88:	4413      	add	r3, r2
 8047f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047f8e:	681b      	ldr	r3, [r3, #0]
 8047f90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047f94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047f98:	d13b      	bne.n	8048012 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8047f9a:	683b      	ldr	r3, [r7, #0]
 8047f9c:	781b      	ldrb	r3, [r3, #0]
 8047f9e:	015a      	lsls	r2, r3, #5
 8047fa0:	693b      	ldr	r3, [r7, #16]
 8047fa2:	4413      	add	r3, r2
 8047fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047fa8:	681b      	ldr	r3, [r3, #0]
 8047faa:	683a      	ldr	r2, [r7, #0]
 8047fac:	7812      	ldrb	r2, [r2, #0]
 8047fae:	0151      	lsls	r1, r2, #5
 8047fb0:	693a      	ldr	r2, [r7, #16]
 8047fb2:	440a      	add	r2, r1
 8047fb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047fb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8047fbc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8047fbe:	683b      	ldr	r3, [r7, #0]
 8047fc0:	781b      	ldrb	r3, [r3, #0]
 8047fc2:	015a      	lsls	r2, r3, #5
 8047fc4:	693b      	ldr	r3, [r7, #16]
 8047fc6:	4413      	add	r3, r2
 8047fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047fcc:	681b      	ldr	r3, [r3, #0]
 8047fce:	683a      	ldr	r2, [r7, #0]
 8047fd0:	7812      	ldrb	r2, [r2, #0]
 8047fd2:	0151      	lsls	r1, r2, #5
 8047fd4:	693a      	ldr	r2, [r7, #16]
 8047fd6:	440a      	add	r2, r1
 8047fd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047fdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8047fe0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8047fe2:	68fb      	ldr	r3, [r7, #12]
 8047fe4:	3301      	adds	r3, #1
 8047fe6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8047fe8:	68fb      	ldr	r3, [r7, #12]
 8047fea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8047fee:	4293      	cmp	r3, r2
 8047ff0:	d902      	bls.n	8047ff8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8047ff2:	2301      	movs	r3, #1
 8047ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8047ff6:	e00c      	b.n	8048012 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8047ff8:	683b      	ldr	r3, [r7, #0]
 8047ffa:	781b      	ldrb	r3, [r3, #0]
 8047ffc:	015a      	lsls	r2, r3, #5
 8047ffe:	693b      	ldr	r3, [r7, #16]
 8048000:	4413      	add	r3, r2
 8048002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8048006:	681b      	ldr	r3, [r3, #0]
 8048008:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 804800c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8048010:	d0e7      	beq.n	8047fe2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8048012:	7dfb      	ldrb	r3, [r7, #23]
}
 8048014:	4618      	mov	r0, r3
 8048016:	371c      	adds	r7, #28
 8048018:	46bd      	mov	sp, r7
 804801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804801e:	4770      	bx	lr

08048020 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8048020:	b480      	push	{r7}
 8048022:	b089      	sub	sp, #36	@ 0x24
 8048024:	af00      	add	r7, sp, #0
 8048026:	60f8      	str	r0, [r7, #12]
 8048028:	60b9      	str	r1, [r7, #8]
 804802a:	4611      	mov	r1, r2
 804802c:	461a      	mov	r2, r3
 804802e:	460b      	mov	r3, r1
 8048030:	71fb      	strb	r3, [r7, #7]
 8048032:	4613      	mov	r3, r2
 8048034:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048036:	68fb      	ldr	r3, [r7, #12]
 8048038:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 804803a:	68bb      	ldr	r3, [r7, #8]
 804803c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 804803e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8048042:	2b00      	cmp	r3, #0
 8048044:	d123      	bne.n	804808e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8048046:	88bb      	ldrh	r3, [r7, #4]
 8048048:	3303      	adds	r3, #3
 804804a:	089b      	lsrs	r3, r3, #2
 804804c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 804804e:	2300      	movs	r3, #0
 8048050:	61bb      	str	r3, [r7, #24]
 8048052:	e018      	b.n	8048086 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8048054:	79fb      	ldrb	r3, [r7, #7]
 8048056:	031a      	lsls	r2, r3, #12
 8048058:	697b      	ldr	r3, [r7, #20]
 804805a:	4413      	add	r3, r2
 804805c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8048060:	461a      	mov	r2, r3
 8048062:	69fb      	ldr	r3, [r7, #28]
 8048064:	681b      	ldr	r3, [r3, #0]
 8048066:	6013      	str	r3, [r2, #0]
      pSrc++;
 8048068:	69fb      	ldr	r3, [r7, #28]
 804806a:	3301      	adds	r3, #1
 804806c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 804806e:	69fb      	ldr	r3, [r7, #28]
 8048070:	3301      	adds	r3, #1
 8048072:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8048074:	69fb      	ldr	r3, [r7, #28]
 8048076:	3301      	adds	r3, #1
 8048078:	61fb      	str	r3, [r7, #28]
      pSrc++;
 804807a:	69fb      	ldr	r3, [r7, #28]
 804807c:	3301      	adds	r3, #1
 804807e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8048080:	69bb      	ldr	r3, [r7, #24]
 8048082:	3301      	adds	r3, #1
 8048084:	61bb      	str	r3, [r7, #24]
 8048086:	69ba      	ldr	r2, [r7, #24]
 8048088:	693b      	ldr	r3, [r7, #16]
 804808a:	429a      	cmp	r2, r3
 804808c:	d3e2      	bcc.n	8048054 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 804808e:	2300      	movs	r3, #0
}
 8048090:	4618      	mov	r0, r3
 8048092:	3724      	adds	r7, #36	@ 0x24
 8048094:	46bd      	mov	sp, r7
 8048096:	f85d 7b04 	ldr.w	r7, [sp], #4
 804809a:	4770      	bx	lr

0804809c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 804809c:	b480      	push	{r7}
 804809e:	b08b      	sub	sp, #44	@ 0x2c
 80480a0:	af00      	add	r7, sp, #0
 80480a2:	60f8      	str	r0, [r7, #12]
 80480a4:	60b9      	str	r1, [r7, #8]
 80480a6:	4613      	mov	r3, r2
 80480a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80480aa:	68fb      	ldr	r3, [r7, #12]
 80480ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80480ae:	68bb      	ldr	r3, [r7, #8]
 80480b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80480b2:	88fb      	ldrh	r3, [r7, #6]
 80480b4:	089b      	lsrs	r3, r3, #2
 80480b6:	b29b      	uxth	r3, r3
 80480b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80480ba:	88fb      	ldrh	r3, [r7, #6]
 80480bc:	f003 0303 	and.w	r3, r3, #3
 80480c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80480c2:	2300      	movs	r3, #0
 80480c4:	623b      	str	r3, [r7, #32]
 80480c6:	e014      	b.n	80480f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80480c8:	69bb      	ldr	r3, [r7, #24]
 80480ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80480ce:	681a      	ldr	r2, [r3, #0]
 80480d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80480d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80480d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80480d6:	3301      	adds	r3, #1
 80480d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80480da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80480dc:	3301      	adds	r3, #1
 80480de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80480e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80480e2:	3301      	adds	r3, #1
 80480e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80480e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80480e8:	3301      	adds	r3, #1
 80480ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80480ec:	6a3b      	ldr	r3, [r7, #32]
 80480ee:	3301      	adds	r3, #1
 80480f0:	623b      	str	r3, [r7, #32]
 80480f2:	6a3a      	ldr	r2, [r7, #32]
 80480f4:	697b      	ldr	r3, [r7, #20]
 80480f6:	429a      	cmp	r2, r3
 80480f8:	d3e6      	bcc.n	80480c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80480fa:	8bfb      	ldrh	r3, [r7, #30]
 80480fc:	2b00      	cmp	r3, #0
 80480fe:	d01e      	beq.n	804813e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8048100:	2300      	movs	r3, #0
 8048102:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8048104:	69bb      	ldr	r3, [r7, #24]
 8048106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 804810a:	461a      	mov	r2, r3
 804810c:	f107 0310 	add.w	r3, r7, #16
 8048110:	6812      	ldr	r2, [r2, #0]
 8048112:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8048114:	693a      	ldr	r2, [r7, #16]
 8048116:	6a3b      	ldr	r3, [r7, #32]
 8048118:	b2db      	uxtb	r3, r3
 804811a:	00db      	lsls	r3, r3, #3
 804811c:	fa22 f303 	lsr.w	r3, r2, r3
 8048120:	b2da      	uxtb	r2, r3
 8048122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8048124:	701a      	strb	r2, [r3, #0]
      i++;
 8048126:	6a3b      	ldr	r3, [r7, #32]
 8048128:	3301      	adds	r3, #1
 804812a:	623b      	str	r3, [r7, #32]
      pDest++;
 804812c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804812e:	3301      	adds	r3, #1
 8048130:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8048132:	8bfb      	ldrh	r3, [r7, #30]
 8048134:	3b01      	subs	r3, #1
 8048136:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8048138:	8bfb      	ldrh	r3, [r7, #30]
 804813a:	2b00      	cmp	r3, #0
 804813c:	d1ea      	bne.n	8048114 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 804813e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8048140:	4618      	mov	r0, r3
 8048142:	372c      	adds	r7, #44	@ 0x2c
 8048144:	46bd      	mov	sp, r7
 8048146:	f85d 7b04 	ldr.w	r7, [sp], #4
 804814a:	4770      	bx	lr

0804814c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 804814c:	b480      	push	{r7}
 804814e:	b085      	sub	sp, #20
 8048150:	af00      	add	r7, sp, #0
 8048152:	6078      	str	r0, [r7, #4]
 8048154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048156:	687b      	ldr	r3, [r7, #4]
 8048158:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 804815a:	683b      	ldr	r3, [r7, #0]
 804815c:	781b      	ldrb	r3, [r3, #0]
 804815e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8048160:	683b      	ldr	r3, [r7, #0]
 8048162:	785b      	ldrb	r3, [r3, #1]
 8048164:	2b01      	cmp	r3, #1
 8048166:	d12c      	bne.n	80481c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8048168:	68bb      	ldr	r3, [r7, #8]
 804816a:	015a      	lsls	r2, r3, #5
 804816c:	68fb      	ldr	r3, [r7, #12]
 804816e:	4413      	add	r3, r2
 8048170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8048174:	681b      	ldr	r3, [r3, #0]
 8048176:	2b00      	cmp	r3, #0
 8048178:	db12      	blt.n	80481a0 <USB_EPSetStall+0x54>
 804817a:	68bb      	ldr	r3, [r7, #8]
 804817c:	2b00      	cmp	r3, #0
 804817e:	d00f      	beq.n	80481a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8048180:	68bb      	ldr	r3, [r7, #8]
 8048182:	015a      	lsls	r2, r3, #5
 8048184:	68fb      	ldr	r3, [r7, #12]
 8048186:	4413      	add	r3, r2
 8048188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804818c:	681b      	ldr	r3, [r3, #0]
 804818e:	68ba      	ldr	r2, [r7, #8]
 8048190:	0151      	lsls	r1, r2, #5
 8048192:	68fa      	ldr	r2, [r7, #12]
 8048194:	440a      	add	r2, r1
 8048196:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 804819a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 804819e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80481a0:	68bb      	ldr	r3, [r7, #8]
 80481a2:	015a      	lsls	r2, r3, #5
 80481a4:	68fb      	ldr	r3, [r7, #12]
 80481a6:	4413      	add	r3, r2
 80481a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80481ac:	681b      	ldr	r3, [r3, #0]
 80481ae:	68ba      	ldr	r2, [r7, #8]
 80481b0:	0151      	lsls	r1, r2, #5
 80481b2:	68fa      	ldr	r2, [r7, #12]
 80481b4:	440a      	add	r2, r1
 80481b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80481ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80481be:	6013      	str	r3, [r2, #0]
 80481c0:	e02b      	b.n	804821a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80481c2:	68bb      	ldr	r3, [r7, #8]
 80481c4:	015a      	lsls	r2, r3, #5
 80481c6:	68fb      	ldr	r3, [r7, #12]
 80481c8:	4413      	add	r3, r2
 80481ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80481ce:	681b      	ldr	r3, [r3, #0]
 80481d0:	2b00      	cmp	r3, #0
 80481d2:	db12      	blt.n	80481fa <USB_EPSetStall+0xae>
 80481d4:	68bb      	ldr	r3, [r7, #8]
 80481d6:	2b00      	cmp	r3, #0
 80481d8:	d00f      	beq.n	80481fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80481da:	68bb      	ldr	r3, [r7, #8]
 80481dc:	015a      	lsls	r2, r3, #5
 80481de:	68fb      	ldr	r3, [r7, #12]
 80481e0:	4413      	add	r3, r2
 80481e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80481e6:	681b      	ldr	r3, [r3, #0]
 80481e8:	68ba      	ldr	r2, [r7, #8]
 80481ea:	0151      	lsls	r1, r2, #5
 80481ec:	68fa      	ldr	r2, [r7, #12]
 80481ee:	440a      	add	r2, r1
 80481f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80481f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80481f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80481fa:	68bb      	ldr	r3, [r7, #8]
 80481fc:	015a      	lsls	r2, r3, #5
 80481fe:	68fb      	ldr	r3, [r7, #12]
 8048200:	4413      	add	r3, r2
 8048202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8048206:	681b      	ldr	r3, [r3, #0]
 8048208:	68ba      	ldr	r2, [r7, #8]
 804820a:	0151      	lsls	r1, r2, #5
 804820c:	68fa      	ldr	r2, [r7, #12]
 804820e:	440a      	add	r2, r1
 8048210:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8048214:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8048218:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 804821a:	2300      	movs	r3, #0
}
 804821c:	4618      	mov	r0, r3
 804821e:	3714      	adds	r7, #20
 8048220:	46bd      	mov	sp, r7
 8048222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048226:	4770      	bx	lr

08048228 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8048228:	b480      	push	{r7}
 804822a:	b085      	sub	sp, #20
 804822c:	af00      	add	r7, sp, #0
 804822e:	6078      	str	r0, [r7, #4]
 8048230:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048232:	687b      	ldr	r3, [r7, #4]
 8048234:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8048236:	683b      	ldr	r3, [r7, #0]
 8048238:	781b      	ldrb	r3, [r3, #0]
 804823a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 804823c:	683b      	ldr	r3, [r7, #0]
 804823e:	785b      	ldrb	r3, [r3, #1]
 8048240:	2b01      	cmp	r3, #1
 8048242:	d128      	bne.n	8048296 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8048244:	68bb      	ldr	r3, [r7, #8]
 8048246:	015a      	lsls	r2, r3, #5
 8048248:	68fb      	ldr	r3, [r7, #12]
 804824a:	4413      	add	r3, r2
 804824c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8048250:	681b      	ldr	r3, [r3, #0]
 8048252:	68ba      	ldr	r2, [r7, #8]
 8048254:	0151      	lsls	r1, r2, #5
 8048256:	68fa      	ldr	r2, [r7, #12]
 8048258:	440a      	add	r2, r1
 804825a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 804825e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8048262:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8048264:	683b      	ldr	r3, [r7, #0]
 8048266:	791b      	ldrb	r3, [r3, #4]
 8048268:	2b03      	cmp	r3, #3
 804826a:	d003      	beq.n	8048274 <USB_EPClearStall+0x4c>
 804826c:	683b      	ldr	r3, [r7, #0]
 804826e:	791b      	ldrb	r3, [r3, #4]
 8048270:	2b02      	cmp	r3, #2
 8048272:	d138      	bne.n	80482e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8048274:	68bb      	ldr	r3, [r7, #8]
 8048276:	015a      	lsls	r2, r3, #5
 8048278:	68fb      	ldr	r3, [r7, #12]
 804827a:	4413      	add	r3, r2
 804827c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8048280:	681b      	ldr	r3, [r3, #0]
 8048282:	68ba      	ldr	r2, [r7, #8]
 8048284:	0151      	lsls	r1, r2, #5
 8048286:	68fa      	ldr	r2, [r7, #12]
 8048288:	440a      	add	r2, r1
 804828a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 804828e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8048292:	6013      	str	r3, [r2, #0]
 8048294:	e027      	b.n	80482e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8048296:	68bb      	ldr	r3, [r7, #8]
 8048298:	015a      	lsls	r2, r3, #5
 804829a:	68fb      	ldr	r3, [r7, #12]
 804829c:	4413      	add	r3, r2
 804829e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80482a2:	681b      	ldr	r3, [r3, #0]
 80482a4:	68ba      	ldr	r2, [r7, #8]
 80482a6:	0151      	lsls	r1, r2, #5
 80482a8:	68fa      	ldr	r2, [r7, #12]
 80482aa:	440a      	add	r2, r1
 80482ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80482b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80482b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80482b6:	683b      	ldr	r3, [r7, #0]
 80482b8:	791b      	ldrb	r3, [r3, #4]
 80482ba:	2b03      	cmp	r3, #3
 80482bc:	d003      	beq.n	80482c6 <USB_EPClearStall+0x9e>
 80482be:	683b      	ldr	r3, [r7, #0]
 80482c0:	791b      	ldrb	r3, [r3, #4]
 80482c2:	2b02      	cmp	r3, #2
 80482c4:	d10f      	bne.n	80482e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80482c6:	68bb      	ldr	r3, [r7, #8]
 80482c8:	015a      	lsls	r2, r3, #5
 80482ca:	68fb      	ldr	r3, [r7, #12]
 80482cc:	4413      	add	r3, r2
 80482ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80482d2:	681b      	ldr	r3, [r3, #0]
 80482d4:	68ba      	ldr	r2, [r7, #8]
 80482d6:	0151      	lsls	r1, r2, #5
 80482d8:	68fa      	ldr	r2, [r7, #12]
 80482da:	440a      	add	r2, r1
 80482dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80482e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80482e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80482e6:	2300      	movs	r3, #0
}
 80482e8:	4618      	mov	r0, r3
 80482ea:	3714      	adds	r7, #20
 80482ec:	46bd      	mov	sp, r7
 80482ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80482f2:	4770      	bx	lr

080482f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80482f4:	b480      	push	{r7}
 80482f6:	b085      	sub	sp, #20
 80482f8:	af00      	add	r7, sp, #0
 80482fa:	6078      	str	r0, [r7, #4]
 80482fc:	460b      	mov	r3, r1
 80482fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048300:	687b      	ldr	r3, [r7, #4]
 8048302:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8048304:	68fb      	ldr	r3, [r7, #12]
 8048306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804830a:	681b      	ldr	r3, [r3, #0]
 804830c:	68fa      	ldr	r2, [r7, #12]
 804830e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8048312:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8048316:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8048318:	68fb      	ldr	r3, [r7, #12]
 804831a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804831e:	681a      	ldr	r2, [r3, #0]
 8048320:	78fb      	ldrb	r3, [r7, #3]
 8048322:	011b      	lsls	r3, r3, #4
 8048324:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8048328:	68f9      	ldr	r1, [r7, #12]
 804832a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 804832e:	4313      	orrs	r3, r2
 8048330:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8048332:	2300      	movs	r3, #0
}
 8048334:	4618      	mov	r0, r3
 8048336:	3714      	adds	r7, #20
 8048338:	46bd      	mov	sp, r7
 804833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804833e:	4770      	bx	lr

08048340 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8048340:	b480      	push	{r7}
 8048342:	b085      	sub	sp, #20
 8048344:	af00      	add	r7, sp, #0
 8048346:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048348:	687b      	ldr	r3, [r7, #4]
 804834a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 804834c:	68fb      	ldr	r3, [r7, #12]
 804834e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8048352:	681b      	ldr	r3, [r3, #0]
 8048354:	68fa      	ldr	r2, [r7, #12]
 8048356:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 804835a:	f023 0303 	bic.w	r3, r3, #3
 804835e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8048360:	68fb      	ldr	r3, [r7, #12]
 8048362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048366:	685b      	ldr	r3, [r3, #4]
 8048368:	68fa      	ldr	r2, [r7, #12]
 804836a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804836e:	f023 0302 	bic.w	r3, r3, #2
 8048372:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8048374:	2300      	movs	r3, #0
}
 8048376:	4618      	mov	r0, r3
 8048378:	3714      	adds	r7, #20
 804837a:	46bd      	mov	sp, r7
 804837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048380:	4770      	bx	lr

08048382 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8048382:	b480      	push	{r7}
 8048384:	b085      	sub	sp, #20
 8048386:	af00      	add	r7, sp, #0
 8048388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804838a:	687b      	ldr	r3, [r7, #4]
 804838c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 804838e:	68fb      	ldr	r3, [r7, #12]
 8048390:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8048394:	681b      	ldr	r3, [r3, #0]
 8048396:	68fa      	ldr	r2, [r7, #12]
 8048398:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 804839c:	f023 0303 	bic.w	r3, r3, #3
 80483a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80483a2:	68fb      	ldr	r3, [r7, #12]
 80483a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80483a8:	685b      	ldr	r3, [r3, #4]
 80483aa:	68fa      	ldr	r2, [r7, #12]
 80483ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80483b0:	f043 0302 	orr.w	r3, r3, #2
 80483b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80483b6:	2300      	movs	r3, #0
}
 80483b8:	4618      	mov	r0, r3
 80483ba:	3714      	adds	r7, #20
 80483bc:	46bd      	mov	sp, r7
 80483be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80483c2:	4770      	bx	lr

080483c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80483c4:	b480      	push	{r7}
 80483c6:	b085      	sub	sp, #20
 80483c8:	af00      	add	r7, sp, #0
 80483ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80483cc:	687b      	ldr	r3, [r7, #4]
 80483ce:	695b      	ldr	r3, [r3, #20]
 80483d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80483d2:	687b      	ldr	r3, [r7, #4]
 80483d4:	699b      	ldr	r3, [r3, #24]
 80483d6:	68fa      	ldr	r2, [r7, #12]
 80483d8:	4013      	ands	r3, r2
 80483da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80483dc:	68fb      	ldr	r3, [r7, #12]
}
 80483de:	4618      	mov	r0, r3
 80483e0:	3714      	adds	r7, #20
 80483e2:	46bd      	mov	sp, r7
 80483e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80483e8:	4770      	bx	lr

080483ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80483ea:	b480      	push	{r7}
 80483ec:	b085      	sub	sp, #20
 80483ee:	af00      	add	r7, sp, #0
 80483f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80483f2:	687b      	ldr	r3, [r7, #4]
 80483f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80483f6:	68fb      	ldr	r3, [r7, #12]
 80483f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80483fc:	699b      	ldr	r3, [r3, #24]
 80483fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8048400:	68fb      	ldr	r3, [r7, #12]
 8048402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048406:	69db      	ldr	r3, [r3, #28]
 8048408:	68ba      	ldr	r2, [r7, #8]
 804840a:	4013      	ands	r3, r2
 804840c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 804840e:	68bb      	ldr	r3, [r7, #8]
 8048410:	0c1b      	lsrs	r3, r3, #16
}
 8048412:	4618      	mov	r0, r3
 8048414:	3714      	adds	r7, #20
 8048416:	46bd      	mov	sp, r7
 8048418:	f85d 7b04 	ldr.w	r7, [sp], #4
 804841c:	4770      	bx	lr

0804841e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 804841e:	b480      	push	{r7}
 8048420:	b085      	sub	sp, #20
 8048422:	af00      	add	r7, sp, #0
 8048424:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048426:	687b      	ldr	r3, [r7, #4]
 8048428:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 804842a:	68fb      	ldr	r3, [r7, #12]
 804842c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048430:	699b      	ldr	r3, [r3, #24]
 8048432:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8048434:	68fb      	ldr	r3, [r7, #12]
 8048436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804843a:	69db      	ldr	r3, [r3, #28]
 804843c:	68ba      	ldr	r2, [r7, #8]
 804843e:	4013      	ands	r3, r2
 8048440:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8048442:	68bb      	ldr	r3, [r7, #8]
 8048444:	b29b      	uxth	r3, r3
}
 8048446:	4618      	mov	r0, r3
 8048448:	3714      	adds	r7, #20
 804844a:	46bd      	mov	sp, r7
 804844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048450:	4770      	bx	lr

08048452 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8048452:	b480      	push	{r7}
 8048454:	b085      	sub	sp, #20
 8048456:	af00      	add	r7, sp, #0
 8048458:	6078      	str	r0, [r7, #4]
 804845a:	460b      	mov	r3, r1
 804845c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804845e:	687b      	ldr	r3, [r7, #4]
 8048460:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8048462:	78fb      	ldrb	r3, [r7, #3]
 8048464:	015a      	lsls	r2, r3, #5
 8048466:	68fb      	ldr	r3, [r7, #12]
 8048468:	4413      	add	r3, r2
 804846a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804846e:	689b      	ldr	r3, [r3, #8]
 8048470:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8048472:	68fb      	ldr	r3, [r7, #12]
 8048474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048478:	695b      	ldr	r3, [r3, #20]
 804847a:	68ba      	ldr	r2, [r7, #8]
 804847c:	4013      	ands	r3, r2
 804847e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8048480:	68bb      	ldr	r3, [r7, #8]
}
 8048482:	4618      	mov	r0, r3
 8048484:	3714      	adds	r7, #20
 8048486:	46bd      	mov	sp, r7
 8048488:	f85d 7b04 	ldr.w	r7, [sp], #4
 804848c:	4770      	bx	lr

0804848e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 804848e:	b480      	push	{r7}
 8048490:	b087      	sub	sp, #28
 8048492:	af00      	add	r7, sp, #0
 8048494:	6078      	str	r0, [r7, #4]
 8048496:	460b      	mov	r3, r1
 8048498:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804849a:	687b      	ldr	r3, [r7, #4]
 804849c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 804849e:	697b      	ldr	r3, [r7, #20]
 80484a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80484a4:	691b      	ldr	r3, [r3, #16]
 80484a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80484a8:	697b      	ldr	r3, [r7, #20]
 80484aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80484ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80484b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80484b2:	78fb      	ldrb	r3, [r7, #3]
 80484b4:	f003 030f 	and.w	r3, r3, #15
 80484b8:	68fa      	ldr	r2, [r7, #12]
 80484ba:	fa22 f303 	lsr.w	r3, r2, r3
 80484be:	01db      	lsls	r3, r3, #7
 80484c0:	b2db      	uxtb	r3, r3
 80484c2:	693a      	ldr	r2, [r7, #16]
 80484c4:	4313      	orrs	r3, r2
 80484c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80484c8:	78fb      	ldrb	r3, [r7, #3]
 80484ca:	015a      	lsls	r2, r3, #5
 80484cc:	697b      	ldr	r3, [r7, #20]
 80484ce:	4413      	add	r3, r2
 80484d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80484d4:	689b      	ldr	r3, [r3, #8]
 80484d6:	693a      	ldr	r2, [r7, #16]
 80484d8:	4013      	ands	r3, r2
 80484da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80484dc:	68bb      	ldr	r3, [r7, #8]
}
 80484de:	4618      	mov	r0, r3
 80484e0:	371c      	adds	r7, #28
 80484e2:	46bd      	mov	sp, r7
 80484e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80484e8:	4770      	bx	lr

080484ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80484ea:	b480      	push	{r7}
 80484ec:	b083      	sub	sp, #12
 80484ee:	af00      	add	r7, sp, #0
 80484f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80484f2:	687b      	ldr	r3, [r7, #4]
 80484f4:	695b      	ldr	r3, [r3, #20]
 80484f6:	f003 0301 	and.w	r3, r3, #1
}
 80484fa:	4618      	mov	r0, r3
 80484fc:	370c      	adds	r7, #12
 80484fe:	46bd      	mov	sp, r7
 8048500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048504:	4770      	bx	lr
	...

08048508 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8048508:	b480      	push	{r7}
 804850a:	b085      	sub	sp, #20
 804850c:	af00      	add	r7, sp, #0
 804850e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048510:	687b      	ldr	r3, [r7, #4]
 8048512:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8048514:	68fb      	ldr	r3, [r7, #12]
 8048516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804851a:	681a      	ldr	r2, [r3, #0]
 804851c:	68fb      	ldr	r3, [r7, #12]
 804851e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8048522:	4619      	mov	r1, r3
 8048524:	4b09      	ldr	r3, [pc, #36]	@ (804854c <USB_ActivateSetup+0x44>)
 8048526:	4013      	ands	r3, r2
 8048528:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 804852a:	68fb      	ldr	r3, [r7, #12]
 804852c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048530:	685b      	ldr	r3, [r3, #4]
 8048532:	68fa      	ldr	r2, [r7, #12]
 8048534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8048538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 804853c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 804853e:	2300      	movs	r3, #0
}
 8048540:	4618      	mov	r0, r3
 8048542:	3714      	adds	r7, #20
 8048544:	46bd      	mov	sp, r7
 8048546:	f85d 7b04 	ldr.w	r7, [sp], #4
 804854a:	4770      	bx	lr
 804854c:	fffff800 	.word	0xfffff800

08048550 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8048550:	b480      	push	{r7}
 8048552:	b087      	sub	sp, #28
 8048554:	af00      	add	r7, sp, #0
 8048556:	60f8      	str	r0, [r7, #12]
 8048558:	460b      	mov	r3, r1
 804855a:	607a      	str	r2, [r7, #4]
 804855c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804855e:	68fb      	ldr	r3, [r7, #12]
 8048560:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8048562:	68fb      	ldr	r3, [r7, #12]
 8048564:	333c      	adds	r3, #60	@ 0x3c
 8048566:	3304      	adds	r3, #4
 8048568:	681b      	ldr	r3, [r3, #0]
 804856a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 804856c:	693b      	ldr	r3, [r7, #16]
 804856e:	4a26      	ldr	r2, [pc, #152]	@ (8048608 <USB_EP0_OutStart+0xb8>)
 8048570:	4293      	cmp	r3, r2
 8048572:	d90a      	bls.n	804858a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8048574:	697b      	ldr	r3, [r7, #20]
 8048576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804857a:	681b      	ldr	r3, [r3, #0]
 804857c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8048580:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8048584:	d101      	bne.n	804858a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8048586:	2300      	movs	r3, #0
 8048588:	e037      	b.n	80485fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 804858a:	697b      	ldr	r3, [r7, #20]
 804858c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8048590:	461a      	mov	r2, r3
 8048592:	2300      	movs	r3, #0
 8048594:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8048596:	697b      	ldr	r3, [r7, #20]
 8048598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804859c:	691b      	ldr	r3, [r3, #16]
 804859e:	697a      	ldr	r2, [r7, #20]
 80485a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80485a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80485a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80485aa:	697b      	ldr	r3, [r7, #20]
 80485ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80485b0:	691b      	ldr	r3, [r3, #16]
 80485b2:	697a      	ldr	r2, [r7, #20]
 80485b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80485b8:	f043 0318 	orr.w	r3, r3, #24
 80485bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80485be:	697b      	ldr	r3, [r7, #20]
 80485c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80485c4:	691b      	ldr	r3, [r3, #16]
 80485c6:	697a      	ldr	r2, [r7, #20]
 80485c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80485cc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80485d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80485d2:	7afb      	ldrb	r3, [r7, #11]
 80485d4:	2b01      	cmp	r3, #1
 80485d6:	d10f      	bne.n	80485f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80485d8:	697b      	ldr	r3, [r7, #20]
 80485da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80485de:	461a      	mov	r2, r3
 80485e0:	687b      	ldr	r3, [r7, #4]
 80485e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80485e4:	697b      	ldr	r3, [r7, #20]
 80485e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80485ea:	681b      	ldr	r3, [r3, #0]
 80485ec:	697a      	ldr	r2, [r7, #20]
 80485ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80485f2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80485f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80485f8:	2300      	movs	r3, #0
}
 80485fa:	4618      	mov	r0, r3
 80485fc:	371c      	adds	r7, #28
 80485fe:	46bd      	mov	sp, r7
 8048600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048604:	4770      	bx	lr
 8048606:	bf00      	nop
 8048608:	4f54300a 	.word	0x4f54300a

0804860c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 804860c:	b480      	push	{r7}
 804860e:	b085      	sub	sp, #20
 8048610:	af00      	add	r7, sp, #0
 8048612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8048614:	2300      	movs	r3, #0
 8048616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8048618:	68fb      	ldr	r3, [r7, #12]
 804861a:	3301      	adds	r3, #1
 804861c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 804861e:	68fb      	ldr	r3, [r7, #12]
 8048620:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8048624:	d901      	bls.n	804862a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8048626:	2303      	movs	r3, #3
 8048628:	e01b      	b.n	8048662 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 804862a:	687b      	ldr	r3, [r7, #4]
 804862c:	691b      	ldr	r3, [r3, #16]
 804862e:	2b00      	cmp	r3, #0
 8048630:	daf2      	bge.n	8048618 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8048632:	2300      	movs	r3, #0
 8048634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8048636:	687b      	ldr	r3, [r7, #4]
 8048638:	691b      	ldr	r3, [r3, #16]
 804863a:	f043 0201 	orr.w	r2, r3, #1
 804863e:	687b      	ldr	r3, [r7, #4]
 8048640:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8048642:	68fb      	ldr	r3, [r7, #12]
 8048644:	3301      	adds	r3, #1
 8048646:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8048648:	68fb      	ldr	r3, [r7, #12]
 804864a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 804864e:	d901      	bls.n	8048654 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8048650:	2303      	movs	r3, #3
 8048652:	e006      	b.n	8048662 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8048654:	687b      	ldr	r3, [r7, #4]
 8048656:	691b      	ldr	r3, [r3, #16]
 8048658:	f003 0301 	and.w	r3, r3, #1
 804865c:	2b01      	cmp	r3, #1
 804865e:	d0f0      	beq.n	8048642 <USB_CoreReset+0x36>

  return HAL_OK;
 8048660:	2300      	movs	r3, #0
}
 8048662:	4618      	mov	r0, r3
 8048664:	3714      	adds	r7, #20
 8048666:	46bd      	mov	sp, r7
 8048668:	f85d 7b04 	ldr.w	r7, [sp], #4
 804866c:	4770      	bx	lr

0804866e <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 804866e:	b580      	push	{r7, lr}
 8048670:	b086      	sub	sp, #24
 8048672:	af00      	add	r7, sp, #0
 8048674:	60f8      	str	r0, [r7, #12]
 8048676:	60b9      	str	r1, [r7, #8]
 8048678:	4613      	mov	r3, r2
 804867a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 804867c:	68fb      	ldr	r3, [r7, #12]
 804867e:	2b00      	cmp	r3, #0
 8048680:	d101      	bne.n	8048686 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8048682:	2303      	movs	r3, #3
 8048684:	e01f      	b.n	80486c6 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8048686:	68fb      	ldr	r3, [r7, #12]
 8048688:	2200      	movs	r2, #0
 804868a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 804868e:	68fb      	ldr	r3, [r7, #12]
 8048690:	2200      	movs	r2, #0
 8048692:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8048696:	68fb      	ldr	r3, [r7, #12]
 8048698:	2200      	movs	r2, #0
 804869a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 804869e:	68bb      	ldr	r3, [r7, #8]
 80486a0:	2b00      	cmp	r3, #0
 80486a2:	d003      	beq.n	80486ac <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80486a4:	68fb      	ldr	r3, [r7, #12]
 80486a6:	68ba      	ldr	r2, [r7, #8]
 80486a8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80486ac:	68fb      	ldr	r3, [r7, #12]
 80486ae:	2201      	movs	r2, #1
 80486b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80486b4:	68fb      	ldr	r3, [r7, #12]
 80486b6:	79fa      	ldrb	r2, [r7, #7]
 80486b8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80486ba:	68f8      	ldr	r0, [r7, #12]
 80486bc:	f002 f862 	bl	804a784 <USBD_LL_Init>
 80486c0:	4603      	mov	r3, r0
 80486c2:	75fb      	strb	r3, [r7, #23]

  return ret;
 80486c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80486c6:	4618      	mov	r0, r3
 80486c8:	3718      	adds	r7, #24
 80486ca:	46bd      	mov	sp, r7
 80486cc:	bd80      	pop	{r7, pc}

080486ce <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80486ce:	b580      	push	{r7, lr}
 80486d0:	b084      	sub	sp, #16
 80486d2:	af00      	add	r7, sp, #0
 80486d4:	6078      	str	r0, [r7, #4]
 80486d6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80486d8:	2300      	movs	r3, #0
 80486da:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80486dc:	683b      	ldr	r3, [r7, #0]
 80486de:	2b00      	cmp	r3, #0
 80486e0:	d101      	bne.n	80486e6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80486e2:	2303      	movs	r3, #3
 80486e4:	e025      	b.n	8048732 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80486e6:	687b      	ldr	r3, [r7, #4]
 80486e8:	683a      	ldr	r2, [r7, #0]
 80486ea:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80486ee:	687b      	ldr	r3, [r7, #4]
 80486f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80486f4:	687b      	ldr	r3, [r7, #4]
 80486f6:	32ae      	adds	r2, #174	@ 0xae
 80486f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80486fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80486fe:	2b00      	cmp	r3, #0
 8048700:	d00f      	beq.n	8048722 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8048702:	687b      	ldr	r3, [r7, #4]
 8048704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048708:	687b      	ldr	r3, [r7, #4]
 804870a:	32ae      	adds	r2, #174	@ 0xae
 804870c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8048712:	f107 020e 	add.w	r2, r7, #14
 8048716:	4610      	mov	r0, r2
 8048718:	4798      	blx	r3
 804871a:	4602      	mov	r2, r0
 804871c:	687b      	ldr	r3, [r7, #4]
 804871e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8048722:	687b      	ldr	r3, [r7, #4]
 8048724:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8048728:	1c5a      	adds	r2, r3, #1
 804872a:	687b      	ldr	r3, [r7, #4]
 804872c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8048730:	2300      	movs	r3, #0
}
 8048732:	4618      	mov	r0, r3
 8048734:	3710      	adds	r7, #16
 8048736:	46bd      	mov	sp, r7
 8048738:	bd80      	pop	{r7, pc}

0804873a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 804873a:	b580      	push	{r7, lr}
 804873c:	b082      	sub	sp, #8
 804873e:	af00      	add	r7, sp, #0
 8048740:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8048742:	6878      	ldr	r0, [r7, #4]
 8048744:	f002 f870 	bl	804a828 <USBD_LL_Start>
 8048748:	4603      	mov	r3, r0
}
 804874a:	4618      	mov	r0, r3
 804874c:	3708      	adds	r7, #8
 804874e:	46bd      	mov	sp, r7
 8048750:	bd80      	pop	{r7, pc}

08048752 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8048752:	b480      	push	{r7}
 8048754:	b083      	sub	sp, #12
 8048756:	af00      	add	r7, sp, #0
 8048758:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 804875a:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 804875c:	4618      	mov	r0, r3
 804875e:	370c      	adds	r7, #12
 8048760:	46bd      	mov	sp, r7
 8048762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048766:	4770      	bx	lr

08048768 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8048768:	b580      	push	{r7, lr}
 804876a:	b084      	sub	sp, #16
 804876c:	af00      	add	r7, sp, #0
 804876e:	6078      	str	r0, [r7, #4]
 8048770:	460b      	mov	r3, r1
 8048772:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8048774:	2300      	movs	r3, #0
 8048776:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8048778:	687b      	ldr	r3, [r7, #4]
 804877a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 804877e:	2b00      	cmp	r3, #0
 8048780:	d009      	beq.n	8048796 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8048782:	687b      	ldr	r3, [r7, #4]
 8048784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048788:	681b      	ldr	r3, [r3, #0]
 804878a:	78fa      	ldrb	r2, [r7, #3]
 804878c:	4611      	mov	r1, r2
 804878e:	6878      	ldr	r0, [r7, #4]
 8048790:	4798      	blx	r3
 8048792:	4603      	mov	r3, r0
 8048794:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8048796:	7bfb      	ldrb	r3, [r7, #15]
}
 8048798:	4618      	mov	r0, r3
 804879a:	3710      	adds	r7, #16
 804879c:	46bd      	mov	sp, r7
 804879e:	bd80      	pop	{r7, pc}

080487a0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80487a0:	b580      	push	{r7, lr}
 80487a2:	b084      	sub	sp, #16
 80487a4:	af00      	add	r7, sp, #0
 80487a6:	6078      	str	r0, [r7, #4]
 80487a8:	460b      	mov	r3, r1
 80487aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80487ac:	2300      	movs	r3, #0
 80487ae:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80487b0:	687b      	ldr	r3, [r7, #4]
 80487b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80487b6:	685b      	ldr	r3, [r3, #4]
 80487b8:	78fa      	ldrb	r2, [r7, #3]
 80487ba:	4611      	mov	r1, r2
 80487bc:	6878      	ldr	r0, [r7, #4]
 80487be:	4798      	blx	r3
 80487c0:	4603      	mov	r3, r0
 80487c2:	2b00      	cmp	r3, #0
 80487c4:	d001      	beq.n	80487ca <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80487c6:	2303      	movs	r3, #3
 80487c8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80487ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80487cc:	4618      	mov	r0, r3
 80487ce:	3710      	adds	r7, #16
 80487d0:	46bd      	mov	sp, r7
 80487d2:	bd80      	pop	{r7, pc}

080487d4 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80487d4:	b580      	push	{r7, lr}
 80487d6:	b084      	sub	sp, #16
 80487d8:	af00      	add	r7, sp, #0
 80487da:	6078      	str	r0, [r7, #4]
 80487dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80487de:	687b      	ldr	r3, [r7, #4]
 80487e0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80487e4:	6839      	ldr	r1, [r7, #0]
 80487e6:	4618      	mov	r0, r3
 80487e8:	f001 f937 	bl	8049a5a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80487ec:	687b      	ldr	r3, [r7, #4]
 80487ee:	2201      	movs	r2, #1
 80487f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80487f4:	687b      	ldr	r3, [r7, #4]
 80487f6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80487fa:	461a      	mov	r2, r3
 80487fc:	687b      	ldr	r3, [r7, #4]
 80487fe:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8048802:	687b      	ldr	r3, [r7, #4]
 8048804:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8048808:	f003 031f 	and.w	r3, r3, #31
 804880c:	2b02      	cmp	r3, #2
 804880e:	d01a      	beq.n	8048846 <USBD_LL_SetupStage+0x72>
 8048810:	2b02      	cmp	r3, #2
 8048812:	d822      	bhi.n	804885a <USBD_LL_SetupStage+0x86>
 8048814:	2b00      	cmp	r3, #0
 8048816:	d002      	beq.n	804881e <USBD_LL_SetupStage+0x4a>
 8048818:	2b01      	cmp	r3, #1
 804881a:	d00a      	beq.n	8048832 <USBD_LL_SetupStage+0x5e>
 804881c:	e01d      	b.n	804885a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 804881e:	687b      	ldr	r3, [r7, #4]
 8048820:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8048824:	4619      	mov	r1, r3
 8048826:	6878      	ldr	r0, [r7, #4]
 8048828:	f000 fb64 	bl	8048ef4 <USBD_StdDevReq>
 804882c:	4603      	mov	r3, r0
 804882e:	73fb      	strb	r3, [r7, #15]
      break;
 8048830:	e020      	b.n	8048874 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8048832:	687b      	ldr	r3, [r7, #4]
 8048834:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8048838:	4619      	mov	r1, r3
 804883a:	6878      	ldr	r0, [r7, #4]
 804883c:	f000 fbcc 	bl	8048fd8 <USBD_StdItfReq>
 8048840:	4603      	mov	r3, r0
 8048842:	73fb      	strb	r3, [r7, #15]
      break;
 8048844:	e016      	b.n	8048874 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8048846:	687b      	ldr	r3, [r7, #4]
 8048848:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 804884c:	4619      	mov	r1, r3
 804884e:	6878      	ldr	r0, [r7, #4]
 8048850:	f000 fc2e 	bl	80490b0 <USBD_StdEPReq>
 8048854:	4603      	mov	r3, r0
 8048856:	73fb      	strb	r3, [r7, #15]
      break;
 8048858:	e00c      	b.n	8048874 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 804885a:	687b      	ldr	r3, [r7, #4]
 804885c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8048860:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8048864:	b2db      	uxtb	r3, r3
 8048866:	4619      	mov	r1, r3
 8048868:	6878      	ldr	r0, [r7, #4]
 804886a:	f002 f83d 	bl	804a8e8 <USBD_LL_StallEP>
 804886e:	4603      	mov	r3, r0
 8048870:	73fb      	strb	r3, [r7, #15]
      break;
 8048872:	bf00      	nop
  }

  return ret;
 8048874:	7bfb      	ldrb	r3, [r7, #15]
}
 8048876:	4618      	mov	r0, r3
 8048878:	3710      	adds	r7, #16
 804887a:	46bd      	mov	sp, r7
 804887c:	bd80      	pop	{r7, pc}

0804887e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 804887e:	b580      	push	{r7, lr}
 8048880:	b086      	sub	sp, #24
 8048882:	af00      	add	r7, sp, #0
 8048884:	60f8      	str	r0, [r7, #12]
 8048886:	460b      	mov	r3, r1
 8048888:	607a      	str	r2, [r7, #4]
 804888a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 804888c:	2300      	movs	r3, #0
 804888e:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8048890:	7afb      	ldrb	r3, [r7, #11]
 8048892:	2b00      	cmp	r3, #0
 8048894:	d16e      	bne.n	8048974 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8048896:	68fb      	ldr	r3, [r7, #12]
 8048898:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 804889c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 804889e:	68fb      	ldr	r3, [r7, #12]
 80488a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80488a4:	2b03      	cmp	r3, #3
 80488a6:	f040 8098 	bne.w	80489da <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80488aa:	693b      	ldr	r3, [r7, #16]
 80488ac:	689a      	ldr	r2, [r3, #8]
 80488ae:	693b      	ldr	r3, [r7, #16]
 80488b0:	68db      	ldr	r3, [r3, #12]
 80488b2:	429a      	cmp	r2, r3
 80488b4:	d913      	bls.n	80488de <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80488b6:	693b      	ldr	r3, [r7, #16]
 80488b8:	689a      	ldr	r2, [r3, #8]
 80488ba:	693b      	ldr	r3, [r7, #16]
 80488bc:	68db      	ldr	r3, [r3, #12]
 80488be:	1ad2      	subs	r2, r2, r3
 80488c0:	693b      	ldr	r3, [r7, #16]
 80488c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80488c4:	693b      	ldr	r3, [r7, #16]
 80488c6:	68da      	ldr	r2, [r3, #12]
 80488c8:	693b      	ldr	r3, [r7, #16]
 80488ca:	689b      	ldr	r3, [r3, #8]
 80488cc:	4293      	cmp	r3, r2
 80488ce:	bf28      	it	cs
 80488d0:	4613      	movcs	r3, r2
 80488d2:	461a      	mov	r2, r3
 80488d4:	6879      	ldr	r1, [r7, #4]
 80488d6:	68f8      	ldr	r0, [r7, #12]
 80488d8:	f001 fbcc 	bl	804a074 <USBD_CtlContinueRx>
 80488dc:	e07d      	b.n	80489da <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80488de:	68fb      	ldr	r3, [r7, #12]
 80488e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80488e4:	f003 031f 	and.w	r3, r3, #31
 80488e8:	2b02      	cmp	r3, #2
 80488ea:	d014      	beq.n	8048916 <USBD_LL_DataOutStage+0x98>
 80488ec:	2b02      	cmp	r3, #2
 80488ee:	d81d      	bhi.n	804892c <USBD_LL_DataOutStage+0xae>
 80488f0:	2b00      	cmp	r3, #0
 80488f2:	d002      	beq.n	80488fa <USBD_LL_DataOutStage+0x7c>
 80488f4:	2b01      	cmp	r3, #1
 80488f6:	d003      	beq.n	8048900 <USBD_LL_DataOutStage+0x82>
 80488f8:	e018      	b.n	804892c <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80488fa:	2300      	movs	r3, #0
 80488fc:	75bb      	strb	r3, [r7, #22]
            break;
 80488fe:	e018      	b.n	8048932 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8048900:	68fb      	ldr	r3, [r7, #12]
 8048902:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8048906:	b2db      	uxtb	r3, r3
 8048908:	4619      	mov	r1, r3
 804890a:	68f8      	ldr	r0, [r7, #12]
 804890c:	f000 fa64 	bl	8048dd8 <USBD_CoreFindIF>
 8048910:	4603      	mov	r3, r0
 8048912:	75bb      	strb	r3, [r7, #22]
            break;
 8048914:	e00d      	b.n	8048932 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8048916:	68fb      	ldr	r3, [r7, #12]
 8048918:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 804891c:	b2db      	uxtb	r3, r3
 804891e:	4619      	mov	r1, r3
 8048920:	68f8      	ldr	r0, [r7, #12]
 8048922:	f000 fa66 	bl	8048df2 <USBD_CoreFindEP>
 8048926:	4603      	mov	r3, r0
 8048928:	75bb      	strb	r3, [r7, #22]
            break;
 804892a:	e002      	b.n	8048932 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 804892c:	2300      	movs	r3, #0
 804892e:	75bb      	strb	r3, [r7, #22]
            break;
 8048930:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8048932:	7dbb      	ldrb	r3, [r7, #22]
 8048934:	2b00      	cmp	r3, #0
 8048936:	d119      	bne.n	804896c <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048938:	68fb      	ldr	r3, [r7, #12]
 804893a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 804893e:	b2db      	uxtb	r3, r3
 8048940:	2b03      	cmp	r3, #3
 8048942:	d113      	bne.n	804896c <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8048944:	7dba      	ldrb	r2, [r7, #22]
 8048946:	68fb      	ldr	r3, [r7, #12]
 8048948:	32ae      	adds	r2, #174	@ 0xae
 804894a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804894e:	691b      	ldr	r3, [r3, #16]
 8048950:	2b00      	cmp	r3, #0
 8048952:	d00b      	beq.n	804896c <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8048954:	7dba      	ldrb	r2, [r7, #22]
 8048956:	68fb      	ldr	r3, [r7, #12]
 8048958:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 804895c:	7dba      	ldrb	r2, [r7, #22]
 804895e:	68fb      	ldr	r3, [r7, #12]
 8048960:	32ae      	adds	r2, #174	@ 0xae
 8048962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048966:	691b      	ldr	r3, [r3, #16]
 8048968:	68f8      	ldr	r0, [r7, #12]
 804896a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 804896c:	68f8      	ldr	r0, [r7, #12]
 804896e:	f001 fb92 	bl	804a096 <USBD_CtlSendStatus>
 8048972:	e032      	b.n	80489da <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8048974:	7afb      	ldrb	r3, [r7, #11]
 8048976:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 804897a:	b2db      	uxtb	r3, r3
 804897c:	4619      	mov	r1, r3
 804897e:	68f8      	ldr	r0, [r7, #12]
 8048980:	f000 fa37 	bl	8048df2 <USBD_CoreFindEP>
 8048984:	4603      	mov	r3, r0
 8048986:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8048988:	7dbb      	ldrb	r3, [r7, #22]
 804898a:	2bff      	cmp	r3, #255	@ 0xff
 804898c:	d025      	beq.n	80489da <USBD_LL_DataOutStage+0x15c>
 804898e:	7dbb      	ldrb	r3, [r7, #22]
 8048990:	2b00      	cmp	r3, #0
 8048992:	d122      	bne.n	80489da <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048994:	68fb      	ldr	r3, [r7, #12]
 8048996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 804899a:	b2db      	uxtb	r3, r3
 804899c:	2b03      	cmp	r3, #3
 804899e:	d117      	bne.n	80489d0 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80489a0:	7dba      	ldrb	r2, [r7, #22]
 80489a2:	68fb      	ldr	r3, [r7, #12]
 80489a4:	32ae      	adds	r2, #174	@ 0xae
 80489a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80489aa:	699b      	ldr	r3, [r3, #24]
 80489ac:	2b00      	cmp	r3, #0
 80489ae:	d00f      	beq.n	80489d0 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80489b0:	7dba      	ldrb	r2, [r7, #22]
 80489b2:	68fb      	ldr	r3, [r7, #12]
 80489b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80489b8:	7dba      	ldrb	r2, [r7, #22]
 80489ba:	68fb      	ldr	r3, [r7, #12]
 80489bc:	32ae      	adds	r2, #174	@ 0xae
 80489be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80489c2:	699b      	ldr	r3, [r3, #24]
 80489c4:	7afa      	ldrb	r2, [r7, #11]
 80489c6:	4611      	mov	r1, r2
 80489c8:	68f8      	ldr	r0, [r7, #12]
 80489ca:	4798      	blx	r3
 80489cc:	4603      	mov	r3, r0
 80489ce:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80489d0:	7dfb      	ldrb	r3, [r7, #23]
 80489d2:	2b00      	cmp	r3, #0
 80489d4:	d001      	beq.n	80489da <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80489d6:	7dfb      	ldrb	r3, [r7, #23]
 80489d8:	e000      	b.n	80489dc <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80489da:	2300      	movs	r3, #0
}
 80489dc:	4618      	mov	r0, r3
 80489de:	3718      	adds	r7, #24
 80489e0:	46bd      	mov	sp, r7
 80489e2:	bd80      	pop	{r7, pc}

080489e4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80489e4:	b580      	push	{r7, lr}
 80489e6:	b086      	sub	sp, #24
 80489e8:	af00      	add	r7, sp, #0
 80489ea:	60f8      	str	r0, [r7, #12]
 80489ec:	460b      	mov	r3, r1
 80489ee:	607a      	str	r2, [r7, #4]
 80489f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80489f2:	7afb      	ldrb	r3, [r7, #11]
 80489f4:	2b00      	cmp	r3, #0
 80489f6:	d16f      	bne.n	8048ad8 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80489f8:	68fb      	ldr	r3, [r7, #12]
 80489fa:	3314      	adds	r3, #20
 80489fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80489fe:	68fb      	ldr	r3, [r7, #12]
 8048a00:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8048a04:	2b02      	cmp	r3, #2
 8048a06:	d15a      	bne.n	8048abe <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8048a08:	693b      	ldr	r3, [r7, #16]
 8048a0a:	689a      	ldr	r2, [r3, #8]
 8048a0c:	693b      	ldr	r3, [r7, #16]
 8048a0e:	68db      	ldr	r3, [r3, #12]
 8048a10:	429a      	cmp	r2, r3
 8048a12:	d914      	bls.n	8048a3e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8048a14:	693b      	ldr	r3, [r7, #16]
 8048a16:	689a      	ldr	r2, [r3, #8]
 8048a18:	693b      	ldr	r3, [r7, #16]
 8048a1a:	68db      	ldr	r3, [r3, #12]
 8048a1c:	1ad2      	subs	r2, r2, r3
 8048a1e:	693b      	ldr	r3, [r7, #16]
 8048a20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8048a22:	693b      	ldr	r3, [r7, #16]
 8048a24:	689b      	ldr	r3, [r3, #8]
 8048a26:	461a      	mov	r2, r3
 8048a28:	6879      	ldr	r1, [r7, #4]
 8048a2a:	68f8      	ldr	r0, [r7, #12]
 8048a2c:	f001 fb11 	bl	804a052 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8048a30:	2300      	movs	r3, #0
 8048a32:	2200      	movs	r2, #0
 8048a34:	2100      	movs	r1, #0
 8048a36:	68f8      	ldr	r0, [r7, #12]
 8048a38:	f002 f800 	bl	804aa3c <USBD_LL_PrepareReceive>
 8048a3c:	e03f      	b.n	8048abe <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8048a3e:	693b      	ldr	r3, [r7, #16]
 8048a40:	68da      	ldr	r2, [r3, #12]
 8048a42:	693b      	ldr	r3, [r7, #16]
 8048a44:	689b      	ldr	r3, [r3, #8]
 8048a46:	429a      	cmp	r2, r3
 8048a48:	d11c      	bne.n	8048a84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8048a4a:	693b      	ldr	r3, [r7, #16]
 8048a4c:	685a      	ldr	r2, [r3, #4]
 8048a4e:	693b      	ldr	r3, [r7, #16]
 8048a50:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8048a52:	429a      	cmp	r2, r3
 8048a54:	d316      	bcc.n	8048a84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8048a56:	693b      	ldr	r3, [r7, #16]
 8048a58:	685a      	ldr	r2, [r3, #4]
 8048a5a:	68fb      	ldr	r3, [r7, #12]
 8048a5c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8048a60:	429a      	cmp	r2, r3
 8048a62:	d20f      	bcs.n	8048a84 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8048a64:	2200      	movs	r2, #0
 8048a66:	2100      	movs	r1, #0
 8048a68:	68f8      	ldr	r0, [r7, #12]
 8048a6a:	f001 faf2 	bl	804a052 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8048a6e:	68fb      	ldr	r3, [r7, #12]
 8048a70:	2200      	movs	r2, #0
 8048a72:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8048a76:	2300      	movs	r3, #0
 8048a78:	2200      	movs	r2, #0
 8048a7a:	2100      	movs	r1, #0
 8048a7c:	68f8      	ldr	r0, [r7, #12]
 8048a7e:	f001 ffdd 	bl	804aa3c <USBD_LL_PrepareReceive>
 8048a82:	e01c      	b.n	8048abe <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048a84:	68fb      	ldr	r3, [r7, #12]
 8048a86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048a8a:	b2db      	uxtb	r3, r3
 8048a8c:	2b03      	cmp	r3, #3
 8048a8e:	d10f      	bne.n	8048ab0 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8048a90:	68fb      	ldr	r3, [r7, #12]
 8048a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048a96:	68db      	ldr	r3, [r3, #12]
 8048a98:	2b00      	cmp	r3, #0
 8048a9a:	d009      	beq.n	8048ab0 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8048a9c:	68fb      	ldr	r3, [r7, #12]
 8048a9e:	2200      	movs	r2, #0
 8048aa0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8048aa4:	68fb      	ldr	r3, [r7, #12]
 8048aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048aaa:	68db      	ldr	r3, [r3, #12]
 8048aac:	68f8      	ldr	r0, [r7, #12]
 8048aae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8048ab0:	2180      	movs	r1, #128	@ 0x80
 8048ab2:	68f8      	ldr	r0, [r7, #12]
 8048ab4:	f001 ff18 	bl	804a8e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8048ab8:	68f8      	ldr	r0, [r7, #12]
 8048aba:	f001 faff 	bl	804a0bc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8048abe:	68fb      	ldr	r3, [r7, #12]
 8048ac0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8048ac4:	2b00      	cmp	r3, #0
 8048ac6:	d03a      	beq.n	8048b3e <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8048ac8:	68f8      	ldr	r0, [r7, #12]
 8048aca:	f7ff fe42 	bl	8048752 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8048ace:	68fb      	ldr	r3, [r7, #12]
 8048ad0:	2200      	movs	r2, #0
 8048ad2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8048ad6:	e032      	b.n	8048b3e <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8048ad8:	7afb      	ldrb	r3, [r7, #11]
 8048ada:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8048ade:	b2db      	uxtb	r3, r3
 8048ae0:	4619      	mov	r1, r3
 8048ae2:	68f8      	ldr	r0, [r7, #12]
 8048ae4:	f000 f985 	bl	8048df2 <USBD_CoreFindEP>
 8048ae8:	4603      	mov	r3, r0
 8048aea:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8048aec:	7dfb      	ldrb	r3, [r7, #23]
 8048aee:	2bff      	cmp	r3, #255	@ 0xff
 8048af0:	d025      	beq.n	8048b3e <USBD_LL_DataInStage+0x15a>
 8048af2:	7dfb      	ldrb	r3, [r7, #23]
 8048af4:	2b00      	cmp	r3, #0
 8048af6:	d122      	bne.n	8048b3e <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048af8:	68fb      	ldr	r3, [r7, #12]
 8048afa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048afe:	b2db      	uxtb	r3, r3
 8048b00:	2b03      	cmp	r3, #3
 8048b02:	d11c      	bne.n	8048b3e <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8048b04:	7dfa      	ldrb	r2, [r7, #23]
 8048b06:	68fb      	ldr	r3, [r7, #12]
 8048b08:	32ae      	adds	r2, #174	@ 0xae
 8048b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048b0e:	695b      	ldr	r3, [r3, #20]
 8048b10:	2b00      	cmp	r3, #0
 8048b12:	d014      	beq.n	8048b3e <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8048b14:	7dfa      	ldrb	r2, [r7, #23]
 8048b16:	68fb      	ldr	r3, [r7, #12]
 8048b18:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8048b1c:	7dfa      	ldrb	r2, [r7, #23]
 8048b1e:	68fb      	ldr	r3, [r7, #12]
 8048b20:	32ae      	adds	r2, #174	@ 0xae
 8048b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048b26:	695b      	ldr	r3, [r3, #20]
 8048b28:	7afa      	ldrb	r2, [r7, #11]
 8048b2a:	4611      	mov	r1, r2
 8048b2c:	68f8      	ldr	r0, [r7, #12]
 8048b2e:	4798      	blx	r3
 8048b30:	4603      	mov	r3, r0
 8048b32:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8048b34:	7dbb      	ldrb	r3, [r7, #22]
 8048b36:	2b00      	cmp	r3, #0
 8048b38:	d001      	beq.n	8048b3e <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8048b3a:	7dbb      	ldrb	r3, [r7, #22]
 8048b3c:	e000      	b.n	8048b40 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8048b3e:	2300      	movs	r3, #0
}
 8048b40:	4618      	mov	r0, r3
 8048b42:	3718      	adds	r7, #24
 8048b44:	46bd      	mov	sp, r7
 8048b46:	bd80      	pop	{r7, pc}

08048b48 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8048b48:	b580      	push	{r7, lr}
 8048b4a:	b084      	sub	sp, #16
 8048b4c:	af00      	add	r7, sp, #0
 8048b4e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8048b50:	2300      	movs	r3, #0
 8048b52:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8048b54:	687b      	ldr	r3, [r7, #4]
 8048b56:	2201      	movs	r2, #1
 8048b58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8048b5c:	687b      	ldr	r3, [r7, #4]
 8048b5e:	2200      	movs	r2, #0
 8048b60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8048b64:	687b      	ldr	r3, [r7, #4]
 8048b66:	2200      	movs	r2, #0
 8048b68:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8048b6a:	687b      	ldr	r3, [r7, #4]
 8048b6c:	2200      	movs	r2, #0
 8048b6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8048b72:	687b      	ldr	r3, [r7, #4]
 8048b74:	2200      	movs	r2, #0
 8048b76:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8048b7a:	687b      	ldr	r3, [r7, #4]
 8048b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048b80:	2b00      	cmp	r3, #0
 8048b82:	d014      	beq.n	8048bae <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8048b84:	687b      	ldr	r3, [r7, #4]
 8048b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048b8a:	685b      	ldr	r3, [r3, #4]
 8048b8c:	2b00      	cmp	r3, #0
 8048b8e:	d00e      	beq.n	8048bae <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8048b90:	687b      	ldr	r3, [r7, #4]
 8048b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048b96:	685b      	ldr	r3, [r3, #4]
 8048b98:	687a      	ldr	r2, [r7, #4]
 8048b9a:	6852      	ldr	r2, [r2, #4]
 8048b9c:	b2d2      	uxtb	r2, r2
 8048b9e:	4611      	mov	r1, r2
 8048ba0:	6878      	ldr	r0, [r7, #4]
 8048ba2:	4798      	blx	r3
 8048ba4:	4603      	mov	r3, r0
 8048ba6:	2b00      	cmp	r3, #0
 8048ba8:	d001      	beq.n	8048bae <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8048baa:	2303      	movs	r3, #3
 8048bac:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8048bae:	2340      	movs	r3, #64	@ 0x40
 8048bb0:	2200      	movs	r2, #0
 8048bb2:	2100      	movs	r1, #0
 8048bb4:	6878      	ldr	r0, [r7, #4]
 8048bb6:	f001 fe52 	bl	804a85e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8048bba:	687b      	ldr	r3, [r7, #4]
 8048bbc:	2201      	movs	r2, #1
 8048bbe:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8048bc2:	687b      	ldr	r3, [r7, #4]
 8048bc4:	2240      	movs	r2, #64	@ 0x40
 8048bc6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8048bca:	2340      	movs	r3, #64	@ 0x40
 8048bcc:	2200      	movs	r2, #0
 8048bce:	2180      	movs	r1, #128	@ 0x80
 8048bd0:	6878      	ldr	r0, [r7, #4]
 8048bd2:	f001 fe44 	bl	804a85e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8048bd6:	687b      	ldr	r3, [r7, #4]
 8048bd8:	2201      	movs	r2, #1
 8048bda:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8048bdc:	687b      	ldr	r3, [r7, #4]
 8048bde:	2240      	movs	r2, #64	@ 0x40
 8048be0:	621a      	str	r2, [r3, #32]

  return ret;
 8048be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8048be4:	4618      	mov	r0, r3
 8048be6:	3710      	adds	r7, #16
 8048be8:	46bd      	mov	sp, r7
 8048bea:	bd80      	pop	{r7, pc}

08048bec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8048bec:	b480      	push	{r7}
 8048bee:	b083      	sub	sp, #12
 8048bf0:	af00      	add	r7, sp, #0
 8048bf2:	6078      	str	r0, [r7, #4]
 8048bf4:	460b      	mov	r3, r1
 8048bf6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8048bf8:	687b      	ldr	r3, [r7, #4]
 8048bfa:	78fa      	ldrb	r2, [r7, #3]
 8048bfc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8048bfe:	2300      	movs	r3, #0
}
 8048c00:	4618      	mov	r0, r3
 8048c02:	370c      	adds	r7, #12
 8048c04:	46bd      	mov	sp, r7
 8048c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048c0a:	4770      	bx	lr

08048c0c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8048c0c:	b480      	push	{r7}
 8048c0e:	b083      	sub	sp, #12
 8048c10:	af00      	add	r7, sp, #0
 8048c12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8048c14:	687b      	ldr	r3, [r7, #4]
 8048c16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048c1a:	b2db      	uxtb	r3, r3
 8048c1c:	2b04      	cmp	r3, #4
 8048c1e:	d006      	beq.n	8048c2e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8048c20:	687b      	ldr	r3, [r7, #4]
 8048c22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048c26:	b2da      	uxtb	r2, r3
 8048c28:	687b      	ldr	r3, [r7, #4]
 8048c2a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8048c2e:	687b      	ldr	r3, [r7, #4]
 8048c30:	2204      	movs	r2, #4
 8048c32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8048c36:	2300      	movs	r3, #0
}
 8048c38:	4618      	mov	r0, r3
 8048c3a:	370c      	adds	r7, #12
 8048c3c:	46bd      	mov	sp, r7
 8048c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048c42:	4770      	bx	lr

08048c44 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8048c44:	b480      	push	{r7}
 8048c46:	b083      	sub	sp, #12
 8048c48:	af00      	add	r7, sp, #0
 8048c4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8048c4c:	687b      	ldr	r3, [r7, #4]
 8048c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048c52:	b2db      	uxtb	r3, r3
 8048c54:	2b04      	cmp	r3, #4
 8048c56:	d106      	bne.n	8048c66 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8048c58:	687b      	ldr	r3, [r7, #4]
 8048c5a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8048c5e:	b2da      	uxtb	r2, r3
 8048c60:	687b      	ldr	r3, [r7, #4]
 8048c62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8048c66:	2300      	movs	r3, #0
}
 8048c68:	4618      	mov	r0, r3
 8048c6a:	370c      	adds	r7, #12
 8048c6c:	46bd      	mov	sp, r7
 8048c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048c72:	4770      	bx	lr

08048c74 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8048c74:	b580      	push	{r7, lr}
 8048c76:	b082      	sub	sp, #8
 8048c78:	af00      	add	r7, sp, #0
 8048c7a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048c7c:	687b      	ldr	r3, [r7, #4]
 8048c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048c82:	b2db      	uxtb	r3, r3
 8048c84:	2b03      	cmp	r3, #3
 8048c86:	d110      	bne.n	8048caa <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8048c88:	687b      	ldr	r3, [r7, #4]
 8048c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048c8e:	2b00      	cmp	r3, #0
 8048c90:	d00b      	beq.n	8048caa <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8048c92:	687b      	ldr	r3, [r7, #4]
 8048c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048c98:	69db      	ldr	r3, [r3, #28]
 8048c9a:	2b00      	cmp	r3, #0
 8048c9c:	d005      	beq.n	8048caa <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8048c9e:	687b      	ldr	r3, [r7, #4]
 8048ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048ca4:	69db      	ldr	r3, [r3, #28]
 8048ca6:	6878      	ldr	r0, [r7, #4]
 8048ca8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8048caa:	2300      	movs	r3, #0
}
 8048cac:	4618      	mov	r0, r3
 8048cae:	3708      	adds	r7, #8
 8048cb0:	46bd      	mov	sp, r7
 8048cb2:	bd80      	pop	{r7, pc}

08048cb4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8048cb4:	b580      	push	{r7, lr}
 8048cb6:	b082      	sub	sp, #8
 8048cb8:	af00      	add	r7, sp, #0
 8048cba:	6078      	str	r0, [r7, #4]
 8048cbc:	460b      	mov	r3, r1
 8048cbe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8048cc0:	687b      	ldr	r3, [r7, #4]
 8048cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048cc6:	687b      	ldr	r3, [r7, #4]
 8048cc8:	32ae      	adds	r2, #174	@ 0xae
 8048cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048cce:	2b00      	cmp	r3, #0
 8048cd0:	d101      	bne.n	8048cd6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8048cd2:	2303      	movs	r3, #3
 8048cd4:	e01c      	b.n	8048d10 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048cd6:	687b      	ldr	r3, [r7, #4]
 8048cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048cdc:	b2db      	uxtb	r3, r3
 8048cde:	2b03      	cmp	r3, #3
 8048ce0:	d115      	bne.n	8048d0e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8048ce2:	687b      	ldr	r3, [r7, #4]
 8048ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048ce8:	687b      	ldr	r3, [r7, #4]
 8048cea:	32ae      	adds	r2, #174	@ 0xae
 8048cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048cf0:	6a1b      	ldr	r3, [r3, #32]
 8048cf2:	2b00      	cmp	r3, #0
 8048cf4:	d00b      	beq.n	8048d0e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8048cf6:	687b      	ldr	r3, [r7, #4]
 8048cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048cfc:	687b      	ldr	r3, [r7, #4]
 8048cfe:	32ae      	adds	r2, #174	@ 0xae
 8048d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048d04:	6a1b      	ldr	r3, [r3, #32]
 8048d06:	78fa      	ldrb	r2, [r7, #3]
 8048d08:	4611      	mov	r1, r2
 8048d0a:	6878      	ldr	r0, [r7, #4]
 8048d0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8048d0e:	2300      	movs	r3, #0
}
 8048d10:	4618      	mov	r0, r3
 8048d12:	3708      	adds	r7, #8
 8048d14:	46bd      	mov	sp, r7
 8048d16:	bd80      	pop	{r7, pc}

08048d18 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8048d18:	b580      	push	{r7, lr}
 8048d1a:	b082      	sub	sp, #8
 8048d1c:	af00      	add	r7, sp, #0
 8048d1e:	6078      	str	r0, [r7, #4]
 8048d20:	460b      	mov	r3, r1
 8048d22:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8048d24:	687b      	ldr	r3, [r7, #4]
 8048d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048d2a:	687b      	ldr	r3, [r7, #4]
 8048d2c:	32ae      	adds	r2, #174	@ 0xae
 8048d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048d32:	2b00      	cmp	r3, #0
 8048d34:	d101      	bne.n	8048d3a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8048d36:	2303      	movs	r3, #3
 8048d38:	e01c      	b.n	8048d74 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048d3a:	687b      	ldr	r3, [r7, #4]
 8048d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048d40:	b2db      	uxtb	r3, r3
 8048d42:	2b03      	cmp	r3, #3
 8048d44:	d115      	bne.n	8048d72 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8048d46:	687b      	ldr	r3, [r7, #4]
 8048d48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048d4c:	687b      	ldr	r3, [r7, #4]
 8048d4e:	32ae      	adds	r2, #174	@ 0xae
 8048d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8048d56:	2b00      	cmp	r3, #0
 8048d58:	d00b      	beq.n	8048d72 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8048d5a:	687b      	ldr	r3, [r7, #4]
 8048d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048d60:	687b      	ldr	r3, [r7, #4]
 8048d62:	32ae      	adds	r2, #174	@ 0xae
 8048d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8048d6a:	78fa      	ldrb	r2, [r7, #3]
 8048d6c:	4611      	mov	r1, r2
 8048d6e:	6878      	ldr	r0, [r7, #4]
 8048d70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8048d72:	2300      	movs	r3, #0
}
 8048d74:	4618      	mov	r0, r3
 8048d76:	3708      	adds	r7, #8
 8048d78:	46bd      	mov	sp, r7
 8048d7a:	bd80      	pop	{r7, pc}

08048d7c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8048d7c:	b480      	push	{r7}
 8048d7e:	b083      	sub	sp, #12
 8048d80:	af00      	add	r7, sp, #0
 8048d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8048d84:	2300      	movs	r3, #0
}
 8048d86:	4618      	mov	r0, r3
 8048d88:	370c      	adds	r7, #12
 8048d8a:	46bd      	mov	sp, r7
 8048d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048d90:	4770      	bx	lr

08048d92 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8048d92:	b580      	push	{r7, lr}
 8048d94:	b084      	sub	sp, #16
 8048d96:	af00      	add	r7, sp, #0
 8048d98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8048d9a:	2300      	movs	r3, #0
 8048d9c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8048d9e:	687b      	ldr	r3, [r7, #4]
 8048da0:	2201      	movs	r2, #1
 8048da2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8048da6:	687b      	ldr	r3, [r7, #4]
 8048da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048dac:	2b00      	cmp	r3, #0
 8048dae:	d00e      	beq.n	8048dce <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8048db0:	687b      	ldr	r3, [r7, #4]
 8048db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048db6:	685b      	ldr	r3, [r3, #4]
 8048db8:	687a      	ldr	r2, [r7, #4]
 8048dba:	6852      	ldr	r2, [r2, #4]
 8048dbc:	b2d2      	uxtb	r2, r2
 8048dbe:	4611      	mov	r1, r2
 8048dc0:	6878      	ldr	r0, [r7, #4]
 8048dc2:	4798      	blx	r3
 8048dc4:	4603      	mov	r3, r0
 8048dc6:	2b00      	cmp	r3, #0
 8048dc8:	d001      	beq.n	8048dce <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8048dca:	2303      	movs	r3, #3
 8048dcc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8048dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8048dd0:	4618      	mov	r0, r3
 8048dd2:	3710      	adds	r7, #16
 8048dd4:	46bd      	mov	sp, r7
 8048dd6:	bd80      	pop	{r7, pc}

08048dd8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8048dd8:	b480      	push	{r7}
 8048dda:	b083      	sub	sp, #12
 8048ddc:	af00      	add	r7, sp, #0
 8048dde:	6078      	str	r0, [r7, #4]
 8048de0:	460b      	mov	r3, r1
 8048de2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8048de4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8048de6:	4618      	mov	r0, r3
 8048de8:	370c      	adds	r7, #12
 8048dea:	46bd      	mov	sp, r7
 8048dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048df0:	4770      	bx	lr

08048df2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8048df2:	b480      	push	{r7}
 8048df4:	b083      	sub	sp, #12
 8048df6:	af00      	add	r7, sp, #0
 8048df8:	6078      	str	r0, [r7, #4]
 8048dfa:	460b      	mov	r3, r1
 8048dfc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8048dfe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8048e00:	4618      	mov	r0, r3
 8048e02:	370c      	adds	r7, #12
 8048e04:	46bd      	mov	sp, r7
 8048e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048e0a:	4770      	bx	lr

08048e0c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8048e0c:	b580      	push	{r7, lr}
 8048e0e:	b086      	sub	sp, #24
 8048e10:	af00      	add	r7, sp, #0
 8048e12:	6078      	str	r0, [r7, #4]
 8048e14:	460b      	mov	r3, r1
 8048e16:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8048e18:	687b      	ldr	r3, [r7, #4]
 8048e1a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8048e1c:	687b      	ldr	r3, [r7, #4]
 8048e1e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8048e20:	2300      	movs	r3, #0
 8048e22:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8048e24:	68fb      	ldr	r3, [r7, #12]
 8048e26:	885b      	ldrh	r3, [r3, #2]
 8048e28:	b29b      	uxth	r3, r3
 8048e2a:	68fa      	ldr	r2, [r7, #12]
 8048e2c:	7812      	ldrb	r2, [r2, #0]
 8048e2e:	4293      	cmp	r3, r2
 8048e30:	d91f      	bls.n	8048e72 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8048e32:	68fb      	ldr	r3, [r7, #12]
 8048e34:	781b      	ldrb	r3, [r3, #0]
 8048e36:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8048e38:	e013      	b.n	8048e62 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8048e3a:	f107 030a 	add.w	r3, r7, #10
 8048e3e:	4619      	mov	r1, r3
 8048e40:	6978      	ldr	r0, [r7, #20]
 8048e42:	f000 f81b 	bl	8048e7c <USBD_GetNextDesc>
 8048e46:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8048e48:	697b      	ldr	r3, [r7, #20]
 8048e4a:	785b      	ldrb	r3, [r3, #1]
 8048e4c:	2b05      	cmp	r3, #5
 8048e4e:	d108      	bne.n	8048e62 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8048e50:	697b      	ldr	r3, [r7, #20]
 8048e52:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8048e54:	693b      	ldr	r3, [r7, #16]
 8048e56:	789b      	ldrb	r3, [r3, #2]
 8048e58:	78fa      	ldrb	r2, [r7, #3]
 8048e5a:	429a      	cmp	r2, r3
 8048e5c:	d008      	beq.n	8048e70 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8048e5e:	2300      	movs	r3, #0
 8048e60:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8048e62:	68fb      	ldr	r3, [r7, #12]
 8048e64:	885b      	ldrh	r3, [r3, #2]
 8048e66:	b29a      	uxth	r2, r3
 8048e68:	897b      	ldrh	r3, [r7, #10]
 8048e6a:	429a      	cmp	r2, r3
 8048e6c:	d8e5      	bhi.n	8048e3a <USBD_GetEpDesc+0x2e>
 8048e6e:	e000      	b.n	8048e72 <USBD_GetEpDesc+0x66>
          break;
 8048e70:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8048e72:	693b      	ldr	r3, [r7, #16]
}
 8048e74:	4618      	mov	r0, r3
 8048e76:	3718      	adds	r7, #24
 8048e78:	46bd      	mov	sp, r7
 8048e7a:	bd80      	pop	{r7, pc}

08048e7c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8048e7c:	b480      	push	{r7}
 8048e7e:	b085      	sub	sp, #20
 8048e80:	af00      	add	r7, sp, #0
 8048e82:	6078      	str	r0, [r7, #4]
 8048e84:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8048e86:	687b      	ldr	r3, [r7, #4]
 8048e88:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8048e8a:	683b      	ldr	r3, [r7, #0]
 8048e8c:	881b      	ldrh	r3, [r3, #0]
 8048e8e:	68fa      	ldr	r2, [r7, #12]
 8048e90:	7812      	ldrb	r2, [r2, #0]
 8048e92:	4413      	add	r3, r2
 8048e94:	b29a      	uxth	r2, r3
 8048e96:	683b      	ldr	r3, [r7, #0]
 8048e98:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8048e9a:	68fb      	ldr	r3, [r7, #12]
 8048e9c:	781b      	ldrb	r3, [r3, #0]
 8048e9e:	461a      	mov	r2, r3
 8048ea0:	687b      	ldr	r3, [r7, #4]
 8048ea2:	4413      	add	r3, r2
 8048ea4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8048ea6:	68fb      	ldr	r3, [r7, #12]
}
 8048ea8:	4618      	mov	r0, r3
 8048eaa:	3714      	adds	r7, #20
 8048eac:	46bd      	mov	sp, r7
 8048eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048eb2:	4770      	bx	lr

08048eb4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8048eb4:	b480      	push	{r7}
 8048eb6:	b087      	sub	sp, #28
 8048eb8:	af00      	add	r7, sp, #0
 8048eba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8048ebc:	687b      	ldr	r3, [r7, #4]
 8048ebe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8048ec0:	697b      	ldr	r3, [r7, #20]
 8048ec2:	781b      	ldrb	r3, [r3, #0]
 8048ec4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8048ec6:	697b      	ldr	r3, [r7, #20]
 8048ec8:	3301      	adds	r3, #1
 8048eca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8048ecc:	697b      	ldr	r3, [r7, #20]
 8048ece:	781b      	ldrb	r3, [r3, #0]
 8048ed0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8048ed2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8048ed6:	021b      	lsls	r3, r3, #8
 8048ed8:	b21a      	sxth	r2, r3
 8048eda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8048ede:	4313      	orrs	r3, r2
 8048ee0:	b21b      	sxth	r3, r3
 8048ee2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8048ee4:	89fb      	ldrh	r3, [r7, #14]
}
 8048ee6:	4618      	mov	r0, r3
 8048ee8:	371c      	adds	r7, #28
 8048eea:	46bd      	mov	sp, r7
 8048eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048ef0:	4770      	bx	lr
	...

08048ef4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8048ef4:	b580      	push	{r7, lr}
 8048ef6:	b084      	sub	sp, #16
 8048ef8:	af00      	add	r7, sp, #0
 8048efa:	6078      	str	r0, [r7, #4]
 8048efc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8048efe:	2300      	movs	r3, #0
 8048f00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8048f02:	683b      	ldr	r3, [r7, #0]
 8048f04:	781b      	ldrb	r3, [r3, #0]
 8048f06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8048f0a:	2b40      	cmp	r3, #64	@ 0x40
 8048f0c:	d005      	beq.n	8048f1a <USBD_StdDevReq+0x26>
 8048f0e:	2b40      	cmp	r3, #64	@ 0x40
 8048f10:	d857      	bhi.n	8048fc2 <USBD_StdDevReq+0xce>
 8048f12:	2b00      	cmp	r3, #0
 8048f14:	d00f      	beq.n	8048f36 <USBD_StdDevReq+0x42>
 8048f16:	2b20      	cmp	r3, #32
 8048f18:	d153      	bne.n	8048fc2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8048f1a:	687b      	ldr	r3, [r7, #4]
 8048f1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048f20:	687b      	ldr	r3, [r7, #4]
 8048f22:	32ae      	adds	r2, #174	@ 0xae
 8048f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048f28:	689b      	ldr	r3, [r3, #8]
 8048f2a:	6839      	ldr	r1, [r7, #0]
 8048f2c:	6878      	ldr	r0, [r7, #4]
 8048f2e:	4798      	blx	r3
 8048f30:	4603      	mov	r3, r0
 8048f32:	73fb      	strb	r3, [r7, #15]
      break;
 8048f34:	e04a      	b.n	8048fcc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8048f36:	683b      	ldr	r3, [r7, #0]
 8048f38:	785b      	ldrb	r3, [r3, #1]
 8048f3a:	2b09      	cmp	r3, #9
 8048f3c:	d83b      	bhi.n	8048fb6 <USBD_StdDevReq+0xc2>
 8048f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8048f44 <USBD_StdDevReq+0x50>)
 8048f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8048f44:	08048f99 	.word	0x08048f99
 8048f48:	08048fad 	.word	0x08048fad
 8048f4c:	08048fb7 	.word	0x08048fb7
 8048f50:	08048fa3 	.word	0x08048fa3
 8048f54:	08048fb7 	.word	0x08048fb7
 8048f58:	08048f77 	.word	0x08048f77
 8048f5c:	08048f6d 	.word	0x08048f6d
 8048f60:	08048fb7 	.word	0x08048fb7
 8048f64:	08048f8f 	.word	0x08048f8f
 8048f68:	08048f81 	.word	0x08048f81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8048f6c:	6839      	ldr	r1, [r7, #0]
 8048f6e:	6878      	ldr	r0, [r7, #4]
 8048f70:	f000 fa3c 	bl	80493ec <USBD_GetDescriptor>
          break;
 8048f74:	e024      	b.n	8048fc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8048f76:	6839      	ldr	r1, [r7, #0]
 8048f78:	6878      	ldr	r0, [r7, #4]
 8048f7a:	f000 fbcb 	bl	8049714 <USBD_SetAddress>
          break;
 8048f7e:	e01f      	b.n	8048fc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8048f80:	6839      	ldr	r1, [r7, #0]
 8048f82:	6878      	ldr	r0, [r7, #4]
 8048f84:	f000 fc0a 	bl	804979c <USBD_SetConfig>
 8048f88:	4603      	mov	r3, r0
 8048f8a:	73fb      	strb	r3, [r7, #15]
          break;
 8048f8c:	e018      	b.n	8048fc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8048f8e:	6839      	ldr	r1, [r7, #0]
 8048f90:	6878      	ldr	r0, [r7, #4]
 8048f92:	f000 fcad 	bl	80498f0 <USBD_GetConfig>
          break;
 8048f96:	e013      	b.n	8048fc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8048f98:	6839      	ldr	r1, [r7, #0]
 8048f9a:	6878      	ldr	r0, [r7, #4]
 8048f9c:	f000 fcde 	bl	804995c <USBD_GetStatus>
          break;
 8048fa0:	e00e      	b.n	8048fc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8048fa2:	6839      	ldr	r1, [r7, #0]
 8048fa4:	6878      	ldr	r0, [r7, #4]
 8048fa6:	f000 fd0d 	bl	80499c4 <USBD_SetFeature>
          break;
 8048faa:	e009      	b.n	8048fc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8048fac:	6839      	ldr	r1, [r7, #0]
 8048fae:	6878      	ldr	r0, [r7, #4]
 8048fb0:	f000 fd31 	bl	8049a16 <USBD_ClrFeature>
          break;
 8048fb4:	e004      	b.n	8048fc0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8048fb6:	6839      	ldr	r1, [r7, #0]
 8048fb8:	6878      	ldr	r0, [r7, #4]
 8048fba:	f000 fd88 	bl	8049ace <USBD_CtlError>
          break;
 8048fbe:	bf00      	nop
      }
      break;
 8048fc0:	e004      	b.n	8048fcc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8048fc2:	6839      	ldr	r1, [r7, #0]
 8048fc4:	6878      	ldr	r0, [r7, #4]
 8048fc6:	f000 fd82 	bl	8049ace <USBD_CtlError>
      break;
 8048fca:	bf00      	nop
  }

  return ret;
 8048fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8048fce:	4618      	mov	r0, r3
 8048fd0:	3710      	adds	r7, #16
 8048fd2:	46bd      	mov	sp, r7
 8048fd4:	bd80      	pop	{r7, pc}
 8048fd6:	bf00      	nop

08048fd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8048fd8:	b580      	push	{r7, lr}
 8048fda:	b084      	sub	sp, #16
 8048fdc:	af00      	add	r7, sp, #0
 8048fde:	6078      	str	r0, [r7, #4]
 8048fe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8048fe2:	2300      	movs	r3, #0
 8048fe4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8048fe6:	683b      	ldr	r3, [r7, #0]
 8048fe8:	781b      	ldrb	r3, [r3, #0]
 8048fea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8048fee:	2b40      	cmp	r3, #64	@ 0x40
 8048ff0:	d005      	beq.n	8048ffe <USBD_StdItfReq+0x26>
 8048ff2:	2b40      	cmp	r3, #64	@ 0x40
 8048ff4:	d852      	bhi.n	804909c <USBD_StdItfReq+0xc4>
 8048ff6:	2b00      	cmp	r3, #0
 8048ff8:	d001      	beq.n	8048ffe <USBD_StdItfReq+0x26>
 8048ffa:	2b20      	cmp	r3, #32
 8048ffc:	d14e      	bne.n	804909c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8048ffe:	687b      	ldr	r3, [r7, #4]
 8049000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049004:	b2db      	uxtb	r3, r3
 8049006:	3b01      	subs	r3, #1
 8049008:	2b02      	cmp	r3, #2
 804900a:	d840      	bhi.n	804908e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 804900c:	683b      	ldr	r3, [r7, #0]
 804900e:	889b      	ldrh	r3, [r3, #4]
 8049010:	b2db      	uxtb	r3, r3
 8049012:	2b01      	cmp	r3, #1
 8049014:	d836      	bhi.n	8049084 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8049016:	683b      	ldr	r3, [r7, #0]
 8049018:	889b      	ldrh	r3, [r3, #4]
 804901a:	b2db      	uxtb	r3, r3
 804901c:	4619      	mov	r1, r3
 804901e:	6878      	ldr	r0, [r7, #4]
 8049020:	f7ff feda 	bl	8048dd8 <USBD_CoreFindIF>
 8049024:	4603      	mov	r3, r0
 8049026:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8049028:	7bbb      	ldrb	r3, [r7, #14]
 804902a:	2bff      	cmp	r3, #255	@ 0xff
 804902c:	d01d      	beq.n	804906a <USBD_StdItfReq+0x92>
 804902e:	7bbb      	ldrb	r3, [r7, #14]
 8049030:	2b00      	cmp	r3, #0
 8049032:	d11a      	bne.n	804906a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8049034:	7bba      	ldrb	r2, [r7, #14]
 8049036:	687b      	ldr	r3, [r7, #4]
 8049038:	32ae      	adds	r2, #174	@ 0xae
 804903a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804903e:	689b      	ldr	r3, [r3, #8]
 8049040:	2b00      	cmp	r3, #0
 8049042:	d00f      	beq.n	8049064 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8049044:	7bba      	ldrb	r2, [r7, #14]
 8049046:	687b      	ldr	r3, [r7, #4]
 8049048:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 804904c:	7bba      	ldrb	r2, [r7, #14]
 804904e:	687b      	ldr	r3, [r7, #4]
 8049050:	32ae      	adds	r2, #174	@ 0xae
 8049052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049056:	689b      	ldr	r3, [r3, #8]
 8049058:	6839      	ldr	r1, [r7, #0]
 804905a:	6878      	ldr	r0, [r7, #4]
 804905c:	4798      	blx	r3
 804905e:	4603      	mov	r3, r0
 8049060:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8049062:	e004      	b.n	804906e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8049064:	2303      	movs	r3, #3
 8049066:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8049068:	e001      	b.n	804906e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 804906a:	2303      	movs	r3, #3
 804906c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 804906e:	683b      	ldr	r3, [r7, #0]
 8049070:	88db      	ldrh	r3, [r3, #6]
 8049072:	2b00      	cmp	r3, #0
 8049074:	d110      	bne.n	8049098 <USBD_StdItfReq+0xc0>
 8049076:	7bfb      	ldrb	r3, [r7, #15]
 8049078:	2b00      	cmp	r3, #0
 804907a:	d10d      	bne.n	8049098 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 804907c:	6878      	ldr	r0, [r7, #4]
 804907e:	f001 f80a 	bl	804a096 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8049082:	e009      	b.n	8049098 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8049084:	6839      	ldr	r1, [r7, #0]
 8049086:	6878      	ldr	r0, [r7, #4]
 8049088:	f000 fd21 	bl	8049ace <USBD_CtlError>
          break;
 804908c:	e004      	b.n	8049098 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 804908e:	6839      	ldr	r1, [r7, #0]
 8049090:	6878      	ldr	r0, [r7, #4]
 8049092:	f000 fd1c 	bl	8049ace <USBD_CtlError>
          break;
 8049096:	e000      	b.n	804909a <USBD_StdItfReq+0xc2>
          break;
 8049098:	bf00      	nop
      }
      break;
 804909a:	e004      	b.n	80490a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 804909c:	6839      	ldr	r1, [r7, #0]
 804909e:	6878      	ldr	r0, [r7, #4]
 80490a0:	f000 fd15 	bl	8049ace <USBD_CtlError>
      break;
 80490a4:	bf00      	nop
  }

  return ret;
 80490a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80490a8:	4618      	mov	r0, r3
 80490aa:	3710      	adds	r7, #16
 80490ac:	46bd      	mov	sp, r7
 80490ae:	bd80      	pop	{r7, pc}

080490b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80490b0:	b580      	push	{r7, lr}
 80490b2:	b084      	sub	sp, #16
 80490b4:	af00      	add	r7, sp, #0
 80490b6:	6078      	str	r0, [r7, #4]
 80490b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80490ba:	2300      	movs	r3, #0
 80490bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80490be:	683b      	ldr	r3, [r7, #0]
 80490c0:	889b      	ldrh	r3, [r3, #4]
 80490c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80490c4:	683b      	ldr	r3, [r7, #0]
 80490c6:	781b      	ldrb	r3, [r3, #0]
 80490c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80490cc:	2b40      	cmp	r3, #64	@ 0x40
 80490ce:	d007      	beq.n	80490e0 <USBD_StdEPReq+0x30>
 80490d0:	2b40      	cmp	r3, #64	@ 0x40
 80490d2:	f200 817f 	bhi.w	80493d4 <USBD_StdEPReq+0x324>
 80490d6:	2b00      	cmp	r3, #0
 80490d8:	d02a      	beq.n	8049130 <USBD_StdEPReq+0x80>
 80490da:	2b20      	cmp	r3, #32
 80490dc:	f040 817a 	bne.w	80493d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80490e0:	7bbb      	ldrb	r3, [r7, #14]
 80490e2:	4619      	mov	r1, r3
 80490e4:	6878      	ldr	r0, [r7, #4]
 80490e6:	f7ff fe84 	bl	8048df2 <USBD_CoreFindEP>
 80490ea:	4603      	mov	r3, r0
 80490ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80490ee:	7b7b      	ldrb	r3, [r7, #13]
 80490f0:	2bff      	cmp	r3, #255	@ 0xff
 80490f2:	f000 8174 	beq.w	80493de <USBD_StdEPReq+0x32e>
 80490f6:	7b7b      	ldrb	r3, [r7, #13]
 80490f8:	2b00      	cmp	r3, #0
 80490fa:	f040 8170 	bne.w	80493de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80490fe:	7b7a      	ldrb	r2, [r7, #13]
 8049100:	687b      	ldr	r3, [r7, #4]
 8049102:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8049106:	7b7a      	ldrb	r2, [r7, #13]
 8049108:	687b      	ldr	r3, [r7, #4]
 804910a:	32ae      	adds	r2, #174	@ 0xae
 804910c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049110:	689b      	ldr	r3, [r3, #8]
 8049112:	2b00      	cmp	r3, #0
 8049114:	f000 8163 	beq.w	80493de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8049118:	7b7a      	ldrb	r2, [r7, #13]
 804911a:	687b      	ldr	r3, [r7, #4]
 804911c:	32ae      	adds	r2, #174	@ 0xae
 804911e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049122:	689b      	ldr	r3, [r3, #8]
 8049124:	6839      	ldr	r1, [r7, #0]
 8049126:	6878      	ldr	r0, [r7, #4]
 8049128:	4798      	blx	r3
 804912a:	4603      	mov	r3, r0
 804912c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 804912e:	e156      	b.n	80493de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8049130:	683b      	ldr	r3, [r7, #0]
 8049132:	785b      	ldrb	r3, [r3, #1]
 8049134:	2b03      	cmp	r3, #3
 8049136:	d008      	beq.n	804914a <USBD_StdEPReq+0x9a>
 8049138:	2b03      	cmp	r3, #3
 804913a:	f300 8145 	bgt.w	80493c8 <USBD_StdEPReq+0x318>
 804913e:	2b00      	cmp	r3, #0
 8049140:	f000 809b 	beq.w	804927a <USBD_StdEPReq+0x1ca>
 8049144:	2b01      	cmp	r3, #1
 8049146:	d03c      	beq.n	80491c2 <USBD_StdEPReq+0x112>
 8049148:	e13e      	b.n	80493c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 804914a:	687b      	ldr	r3, [r7, #4]
 804914c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049150:	b2db      	uxtb	r3, r3
 8049152:	2b02      	cmp	r3, #2
 8049154:	d002      	beq.n	804915c <USBD_StdEPReq+0xac>
 8049156:	2b03      	cmp	r3, #3
 8049158:	d016      	beq.n	8049188 <USBD_StdEPReq+0xd8>
 804915a:	e02c      	b.n	80491b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 804915c:	7bbb      	ldrb	r3, [r7, #14]
 804915e:	2b00      	cmp	r3, #0
 8049160:	d00d      	beq.n	804917e <USBD_StdEPReq+0xce>
 8049162:	7bbb      	ldrb	r3, [r7, #14]
 8049164:	2b80      	cmp	r3, #128	@ 0x80
 8049166:	d00a      	beq.n	804917e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8049168:	7bbb      	ldrb	r3, [r7, #14]
 804916a:	4619      	mov	r1, r3
 804916c:	6878      	ldr	r0, [r7, #4]
 804916e:	f001 fbbb 	bl	804a8e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8049172:	2180      	movs	r1, #128	@ 0x80
 8049174:	6878      	ldr	r0, [r7, #4]
 8049176:	f001 fbb7 	bl	804a8e8 <USBD_LL_StallEP>
 804917a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 804917c:	e020      	b.n	80491c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 804917e:	6839      	ldr	r1, [r7, #0]
 8049180:	6878      	ldr	r0, [r7, #4]
 8049182:	f000 fca4 	bl	8049ace <USBD_CtlError>
              break;
 8049186:	e01b      	b.n	80491c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8049188:	683b      	ldr	r3, [r7, #0]
 804918a:	885b      	ldrh	r3, [r3, #2]
 804918c:	2b00      	cmp	r3, #0
 804918e:	d10e      	bne.n	80491ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8049190:	7bbb      	ldrb	r3, [r7, #14]
 8049192:	2b00      	cmp	r3, #0
 8049194:	d00b      	beq.n	80491ae <USBD_StdEPReq+0xfe>
 8049196:	7bbb      	ldrb	r3, [r7, #14]
 8049198:	2b80      	cmp	r3, #128	@ 0x80
 804919a:	d008      	beq.n	80491ae <USBD_StdEPReq+0xfe>
 804919c:	683b      	ldr	r3, [r7, #0]
 804919e:	88db      	ldrh	r3, [r3, #6]
 80491a0:	2b00      	cmp	r3, #0
 80491a2:	d104      	bne.n	80491ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80491a4:	7bbb      	ldrb	r3, [r7, #14]
 80491a6:	4619      	mov	r1, r3
 80491a8:	6878      	ldr	r0, [r7, #4]
 80491aa:	f001 fb9d 	bl	804a8e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80491ae:	6878      	ldr	r0, [r7, #4]
 80491b0:	f000 ff71 	bl	804a096 <USBD_CtlSendStatus>

              break;
 80491b4:	e004      	b.n	80491c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80491b6:	6839      	ldr	r1, [r7, #0]
 80491b8:	6878      	ldr	r0, [r7, #4]
 80491ba:	f000 fc88 	bl	8049ace <USBD_CtlError>
              break;
 80491be:	bf00      	nop
          }
          break;
 80491c0:	e107      	b.n	80493d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80491c2:	687b      	ldr	r3, [r7, #4]
 80491c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80491c8:	b2db      	uxtb	r3, r3
 80491ca:	2b02      	cmp	r3, #2
 80491cc:	d002      	beq.n	80491d4 <USBD_StdEPReq+0x124>
 80491ce:	2b03      	cmp	r3, #3
 80491d0:	d016      	beq.n	8049200 <USBD_StdEPReq+0x150>
 80491d2:	e04b      	b.n	804926c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80491d4:	7bbb      	ldrb	r3, [r7, #14]
 80491d6:	2b00      	cmp	r3, #0
 80491d8:	d00d      	beq.n	80491f6 <USBD_StdEPReq+0x146>
 80491da:	7bbb      	ldrb	r3, [r7, #14]
 80491dc:	2b80      	cmp	r3, #128	@ 0x80
 80491de:	d00a      	beq.n	80491f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80491e0:	7bbb      	ldrb	r3, [r7, #14]
 80491e2:	4619      	mov	r1, r3
 80491e4:	6878      	ldr	r0, [r7, #4]
 80491e6:	f001 fb7f 	bl	804a8e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80491ea:	2180      	movs	r1, #128	@ 0x80
 80491ec:	6878      	ldr	r0, [r7, #4]
 80491ee:	f001 fb7b 	bl	804a8e8 <USBD_LL_StallEP>
 80491f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80491f4:	e040      	b.n	8049278 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80491f6:	6839      	ldr	r1, [r7, #0]
 80491f8:	6878      	ldr	r0, [r7, #4]
 80491fa:	f000 fc68 	bl	8049ace <USBD_CtlError>
              break;
 80491fe:	e03b      	b.n	8049278 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8049200:	683b      	ldr	r3, [r7, #0]
 8049202:	885b      	ldrh	r3, [r3, #2]
 8049204:	2b00      	cmp	r3, #0
 8049206:	d136      	bne.n	8049276 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8049208:	7bbb      	ldrb	r3, [r7, #14]
 804920a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 804920e:	2b00      	cmp	r3, #0
 8049210:	d004      	beq.n	804921c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8049212:	7bbb      	ldrb	r3, [r7, #14]
 8049214:	4619      	mov	r1, r3
 8049216:	6878      	ldr	r0, [r7, #4]
 8049218:	f001 fb85 	bl	804a926 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 804921c:	6878      	ldr	r0, [r7, #4]
 804921e:	f000 ff3a 	bl	804a096 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8049222:	7bbb      	ldrb	r3, [r7, #14]
 8049224:	4619      	mov	r1, r3
 8049226:	6878      	ldr	r0, [r7, #4]
 8049228:	f7ff fde3 	bl	8048df2 <USBD_CoreFindEP>
 804922c:	4603      	mov	r3, r0
 804922e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8049230:	7b7b      	ldrb	r3, [r7, #13]
 8049232:	2bff      	cmp	r3, #255	@ 0xff
 8049234:	d01f      	beq.n	8049276 <USBD_StdEPReq+0x1c6>
 8049236:	7b7b      	ldrb	r3, [r7, #13]
 8049238:	2b00      	cmp	r3, #0
 804923a:	d11c      	bne.n	8049276 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 804923c:	7b7a      	ldrb	r2, [r7, #13]
 804923e:	687b      	ldr	r3, [r7, #4]
 8049240:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8049244:	7b7a      	ldrb	r2, [r7, #13]
 8049246:	687b      	ldr	r3, [r7, #4]
 8049248:	32ae      	adds	r2, #174	@ 0xae
 804924a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804924e:	689b      	ldr	r3, [r3, #8]
 8049250:	2b00      	cmp	r3, #0
 8049252:	d010      	beq.n	8049276 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8049254:	7b7a      	ldrb	r2, [r7, #13]
 8049256:	687b      	ldr	r3, [r7, #4]
 8049258:	32ae      	adds	r2, #174	@ 0xae
 804925a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804925e:	689b      	ldr	r3, [r3, #8]
 8049260:	6839      	ldr	r1, [r7, #0]
 8049262:	6878      	ldr	r0, [r7, #4]
 8049264:	4798      	blx	r3
 8049266:	4603      	mov	r3, r0
 8049268:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 804926a:	e004      	b.n	8049276 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 804926c:	6839      	ldr	r1, [r7, #0]
 804926e:	6878      	ldr	r0, [r7, #4]
 8049270:	f000 fc2d 	bl	8049ace <USBD_CtlError>
              break;
 8049274:	e000      	b.n	8049278 <USBD_StdEPReq+0x1c8>
              break;
 8049276:	bf00      	nop
          }
          break;
 8049278:	e0ab      	b.n	80493d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 804927a:	687b      	ldr	r3, [r7, #4]
 804927c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049280:	b2db      	uxtb	r3, r3
 8049282:	2b02      	cmp	r3, #2
 8049284:	d002      	beq.n	804928c <USBD_StdEPReq+0x1dc>
 8049286:	2b03      	cmp	r3, #3
 8049288:	d032      	beq.n	80492f0 <USBD_StdEPReq+0x240>
 804928a:	e097      	b.n	80493bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 804928c:	7bbb      	ldrb	r3, [r7, #14]
 804928e:	2b00      	cmp	r3, #0
 8049290:	d007      	beq.n	80492a2 <USBD_StdEPReq+0x1f2>
 8049292:	7bbb      	ldrb	r3, [r7, #14]
 8049294:	2b80      	cmp	r3, #128	@ 0x80
 8049296:	d004      	beq.n	80492a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8049298:	6839      	ldr	r1, [r7, #0]
 804929a:	6878      	ldr	r0, [r7, #4]
 804929c:	f000 fc17 	bl	8049ace <USBD_CtlError>
                break;
 80492a0:	e091      	b.n	80493c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80492a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80492a6:	2b00      	cmp	r3, #0
 80492a8:	da0b      	bge.n	80492c2 <USBD_StdEPReq+0x212>
 80492aa:	7bbb      	ldrb	r3, [r7, #14]
 80492ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80492b0:	4613      	mov	r3, r2
 80492b2:	009b      	lsls	r3, r3, #2
 80492b4:	4413      	add	r3, r2
 80492b6:	009b      	lsls	r3, r3, #2
 80492b8:	3310      	adds	r3, #16
 80492ba:	687a      	ldr	r2, [r7, #4]
 80492bc:	4413      	add	r3, r2
 80492be:	3304      	adds	r3, #4
 80492c0:	e00b      	b.n	80492da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80492c2:	7bbb      	ldrb	r3, [r7, #14]
 80492c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80492c8:	4613      	mov	r3, r2
 80492ca:	009b      	lsls	r3, r3, #2
 80492cc:	4413      	add	r3, r2
 80492ce:	009b      	lsls	r3, r3, #2
 80492d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80492d4:	687a      	ldr	r2, [r7, #4]
 80492d6:	4413      	add	r3, r2
 80492d8:	3304      	adds	r3, #4
 80492da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80492dc:	68bb      	ldr	r3, [r7, #8]
 80492de:	2200      	movs	r2, #0
 80492e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80492e2:	68bb      	ldr	r3, [r7, #8]
 80492e4:	2202      	movs	r2, #2
 80492e6:	4619      	mov	r1, r3
 80492e8:	6878      	ldr	r0, [r7, #4]
 80492ea:	f000 fe97 	bl	804a01c <USBD_CtlSendData>
              break;
 80492ee:	e06a      	b.n	80493c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80492f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80492f4:	2b00      	cmp	r3, #0
 80492f6:	da11      	bge.n	804931c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80492f8:	7bbb      	ldrb	r3, [r7, #14]
 80492fa:	f003 020f 	and.w	r2, r3, #15
 80492fe:	6879      	ldr	r1, [r7, #4]
 8049300:	4613      	mov	r3, r2
 8049302:	009b      	lsls	r3, r3, #2
 8049304:	4413      	add	r3, r2
 8049306:	009b      	lsls	r3, r3, #2
 8049308:	440b      	add	r3, r1
 804930a:	3324      	adds	r3, #36	@ 0x24
 804930c:	881b      	ldrh	r3, [r3, #0]
 804930e:	2b00      	cmp	r3, #0
 8049310:	d117      	bne.n	8049342 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8049312:	6839      	ldr	r1, [r7, #0]
 8049314:	6878      	ldr	r0, [r7, #4]
 8049316:	f000 fbda 	bl	8049ace <USBD_CtlError>
                  break;
 804931a:	e054      	b.n	80493c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 804931c:	7bbb      	ldrb	r3, [r7, #14]
 804931e:	f003 020f 	and.w	r2, r3, #15
 8049322:	6879      	ldr	r1, [r7, #4]
 8049324:	4613      	mov	r3, r2
 8049326:	009b      	lsls	r3, r3, #2
 8049328:	4413      	add	r3, r2
 804932a:	009b      	lsls	r3, r3, #2
 804932c:	440b      	add	r3, r1
 804932e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8049332:	881b      	ldrh	r3, [r3, #0]
 8049334:	2b00      	cmp	r3, #0
 8049336:	d104      	bne.n	8049342 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8049338:	6839      	ldr	r1, [r7, #0]
 804933a:	6878      	ldr	r0, [r7, #4]
 804933c:	f000 fbc7 	bl	8049ace <USBD_CtlError>
                  break;
 8049340:	e041      	b.n	80493c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8049342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8049346:	2b00      	cmp	r3, #0
 8049348:	da0b      	bge.n	8049362 <USBD_StdEPReq+0x2b2>
 804934a:	7bbb      	ldrb	r3, [r7, #14]
 804934c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8049350:	4613      	mov	r3, r2
 8049352:	009b      	lsls	r3, r3, #2
 8049354:	4413      	add	r3, r2
 8049356:	009b      	lsls	r3, r3, #2
 8049358:	3310      	adds	r3, #16
 804935a:	687a      	ldr	r2, [r7, #4]
 804935c:	4413      	add	r3, r2
 804935e:	3304      	adds	r3, #4
 8049360:	e00b      	b.n	804937a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8049362:	7bbb      	ldrb	r3, [r7, #14]
 8049364:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8049368:	4613      	mov	r3, r2
 804936a:	009b      	lsls	r3, r3, #2
 804936c:	4413      	add	r3, r2
 804936e:	009b      	lsls	r3, r3, #2
 8049370:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8049374:	687a      	ldr	r2, [r7, #4]
 8049376:	4413      	add	r3, r2
 8049378:	3304      	adds	r3, #4
 804937a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 804937c:	7bbb      	ldrb	r3, [r7, #14]
 804937e:	2b00      	cmp	r3, #0
 8049380:	d002      	beq.n	8049388 <USBD_StdEPReq+0x2d8>
 8049382:	7bbb      	ldrb	r3, [r7, #14]
 8049384:	2b80      	cmp	r3, #128	@ 0x80
 8049386:	d103      	bne.n	8049390 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8049388:	68bb      	ldr	r3, [r7, #8]
 804938a:	2200      	movs	r2, #0
 804938c:	601a      	str	r2, [r3, #0]
 804938e:	e00e      	b.n	80493ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8049390:	7bbb      	ldrb	r3, [r7, #14]
 8049392:	4619      	mov	r1, r3
 8049394:	6878      	ldr	r0, [r7, #4]
 8049396:	f001 fae5 	bl	804a964 <USBD_LL_IsStallEP>
 804939a:	4603      	mov	r3, r0
 804939c:	2b00      	cmp	r3, #0
 804939e:	d003      	beq.n	80493a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80493a0:	68bb      	ldr	r3, [r7, #8]
 80493a2:	2201      	movs	r2, #1
 80493a4:	601a      	str	r2, [r3, #0]
 80493a6:	e002      	b.n	80493ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80493a8:	68bb      	ldr	r3, [r7, #8]
 80493aa:	2200      	movs	r2, #0
 80493ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80493ae:	68bb      	ldr	r3, [r7, #8]
 80493b0:	2202      	movs	r2, #2
 80493b2:	4619      	mov	r1, r3
 80493b4:	6878      	ldr	r0, [r7, #4]
 80493b6:	f000 fe31 	bl	804a01c <USBD_CtlSendData>
              break;
 80493ba:	e004      	b.n	80493c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80493bc:	6839      	ldr	r1, [r7, #0]
 80493be:	6878      	ldr	r0, [r7, #4]
 80493c0:	f000 fb85 	bl	8049ace <USBD_CtlError>
              break;
 80493c4:	bf00      	nop
          }
          break;
 80493c6:	e004      	b.n	80493d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80493c8:	6839      	ldr	r1, [r7, #0]
 80493ca:	6878      	ldr	r0, [r7, #4]
 80493cc:	f000 fb7f 	bl	8049ace <USBD_CtlError>
          break;
 80493d0:	bf00      	nop
      }
      break;
 80493d2:	e005      	b.n	80493e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80493d4:	6839      	ldr	r1, [r7, #0]
 80493d6:	6878      	ldr	r0, [r7, #4]
 80493d8:	f000 fb79 	bl	8049ace <USBD_CtlError>
      break;
 80493dc:	e000      	b.n	80493e0 <USBD_StdEPReq+0x330>
      break;
 80493de:	bf00      	nop
  }

  return ret;
 80493e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80493e2:	4618      	mov	r0, r3
 80493e4:	3710      	adds	r7, #16
 80493e6:	46bd      	mov	sp, r7
 80493e8:	bd80      	pop	{r7, pc}
	...

080493ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80493ec:	b580      	push	{r7, lr}
 80493ee:	b084      	sub	sp, #16
 80493f0:	af00      	add	r7, sp, #0
 80493f2:	6078      	str	r0, [r7, #4]
 80493f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80493f6:	2300      	movs	r3, #0
 80493f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80493fa:	2300      	movs	r3, #0
 80493fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80493fe:	2300      	movs	r3, #0
 8049400:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8049402:	683b      	ldr	r3, [r7, #0]
 8049404:	885b      	ldrh	r3, [r3, #2]
 8049406:	0a1b      	lsrs	r3, r3, #8
 8049408:	b29b      	uxth	r3, r3
 804940a:	3b01      	subs	r3, #1
 804940c:	2b0e      	cmp	r3, #14
 804940e:	f200 8152 	bhi.w	80496b6 <USBD_GetDescriptor+0x2ca>
 8049412:	a201      	add	r2, pc, #4	@ (adr r2, 8049418 <USBD_GetDescriptor+0x2c>)
 8049414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049418:	08049489 	.word	0x08049489
 804941c:	080494a1 	.word	0x080494a1
 8049420:	080494e1 	.word	0x080494e1
 8049424:	080496b7 	.word	0x080496b7
 8049428:	080496b7 	.word	0x080496b7
 804942c:	08049657 	.word	0x08049657
 8049430:	08049683 	.word	0x08049683
 8049434:	080496b7 	.word	0x080496b7
 8049438:	080496b7 	.word	0x080496b7
 804943c:	080496b7 	.word	0x080496b7
 8049440:	080496b7 	.word	0x080496b7
 8049444:	080496b7 	.word	0x080496b7
 8049448:	080496b7 	.word	0x080496b7
 804944c:	080496b7 	.word	0x080496b7
 8049450:	08049455 	.word	0x08049455
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8049454:	687b      	ldr	r3, [r7, #4]
 8049456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804945a:	69db      	ldr	r3, [r3, #28]
 804945c:	2b00      	cmp	r3, #0
 804945e:	d00b      	beq.n	8049478 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8049460:	687b      	ldr	r3, [r7, #4]
 8049462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049466:	69db      	ldr	r3, [r3, #28]
 8049468:	687a      	ldr	r2, [r7, #4]
 804946a:	7c12      	ldrb	r2, [r2, #16]
 804946c:	f107 0108 	add.w	r1, r7, #8
 8049470:	4610      	mov	r0, r2
 8049472:	4798      	blx	r3
 8049474:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8049476:	e126      	b.n	80496c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8049478:	6839      	ldr	r1, [r7, #0]
 804947a:	6878      	ldr	r0, [r7, #4]
 804947c:	f000 fb27 	bl	8049ace <USBD_CtlError>
        err++;
 8049480:	7afb      	ldrb	r3, [r7, #11]
 8049482:	3301      	adds	r3, #1
 8049484:	72fb      	strb	r3, [r7, #11]
      break;
 8049486:	e11e      	b.n	80496c6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8049488:	687b      	ldr	r3, [r7, #4]
 804948a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804948e:	681b      	ldr	r3, [r3, #0]
 8049490:	687a      	ldr	r2, [r7, #4]
 8049492:	7c12      	ldrb	r2, [r2, #16]
 8049494:	f107 0108 	add.w	r1, r7, #8
 8049498:	4610      	mov	r0, r2
 804949a:	4798      	blx	r3
 804949c:	60f8      	str	r0, [r7, #12]
      break;
 804949e:	e112      	b.n	80496c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80494a0:	687b      	ldr	r3, [r7, #4]
 80494a2:	7c1b      	ldrb	r3, [r3, #16]
 80494a4:	2b00      	cmp	r3, #0
 80494a6:	d10d      	bne.n	80494c4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80494a8:	687b      	ldr	r3, [r7, #4]
 80494aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80494ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80494b0:	f107 0208 	add.w	r2, r7, #8
 80494b4:	4610      	mov	r0, r2
 80494b6:	4798      	blx	r3
 80494b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80494ba:	68fb      	ldr	r3, [r7, #12]
 80494bc:	3301      	adds	r3, #1
 80494be:	2202      	movs	r2, #2
 80494c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80494c2:	e100      	b.n	80496c6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80494c4:	687b      	ldr	r3, [r7, #4]
 80494c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80494ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80494cc:	f107 0208 	add.w	r2, r7, #8
 80494d0:	4610      	mov	r0, r2
 80494d2:	4798      	blx	r3
 80494d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80494d6:	68fb      	ldr	r3, [r7, #12]
 80494d8:	3301      	adds	r3, #1
 80494da:	2202      	movs	r2, #2
 80494dc:	701a      	strb	r2, [r3, #0]
      break;
 80494de:	e0f2      	b.n	80496c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80494e0:	683b      	ldr	r3, [r7, #0]
 80494e2:	885b      	ldrh	r3, [r3, #2]
 80494e4:	b2db      	uxtb	r3, r3
 80494e6:	2b05      	cmp	r3, #5
 80494e8:	f200 80ac 	bhi.w	8049644 <USBD_GetDescriptor+0x258>
 80494ec:	a201      	add	r2, pc, #4	@ (adr r2, 80494f4 <USBD_GetDescriptor+0x108>)
 80494ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80494f2:	bf00      	nop
 80494f4:	0804950d 	.word	0x0804950d
 80494f8:	08049541 	.word	0x08049541
 80494fc:	08049575 	.word	0x08049575
 8049500:	080495a9 	.word	0x080495a9
 8049504:	080495dd 	.word	0x080495dd
 8049508:	08049611 	.word	0x08049611
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 804950c:	687b      	ldr	r3, [r7, #4]
 804950e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049512:	685b      	ldr	r3, [r3, #4]
 8049514:	2b00      	cmp	r3, #0
 8049516:	d00b      	beq.n	8049530 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8049518:	687b      	ldr	r3, [r7, #4]
 804951a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804951e:	685b      	ldr	r3, [r3, #4]
 8049520:	687a      	ldr	r2, [r7, #4]
 8049522:	7c12      	ldrb	r2, [r2, #16]
 8049524:	f107 0108 	add.w	r1, r7, #8
 8049528:	4610      	mov	r0, r2
 804952a:	4798      	blx	r3
 804952c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 804952e:	e091      	b.n	8049654 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8049530:	6839      	ldr	r1, [r7, #0]
 8049532:	6878      	ldr	r0, [r7, #4]
 8049534:	f000 facb 	bl	8049ace <USBD_CtlError>
            err++;
 8049538:	7afb      	ldrb	r3, [r7, #11]
 804953a:	3301      	adds	r3, #1
 804953c:	72fb      	strb	r3, [r7, #11]
          break;
 804953e:	e089      	b.n	8049654 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8049540:	687b      	ldr	r3, [r7, #4]
 8049542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049546:	689b      	ldr	r3, [r3, #8]
 8049548:	2b00      	cmp	r3, #0
 804954a:	d00b      	beq.n	8049564 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 804954c:	687b      	ldr	r3, [r7, #4]
 804954e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049552:	689b      	ldr	r3, [r3, #8]
 8049554:	687a      	ldr	r2, [r7, #4]
 8049556:	7c12      	ldrb	r2, [r2, #16]
 8049558:	f107 0108 	add.w	r1, r7, #8
 804955c:	4610      	mov	r0, r2
 804955e:	4798      	blx	r3
 8049560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8049562:	e077      	b.n	8049654 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8049564:	6839      	ldr	r1, [r7, #0]
 8049566:	6878      	ldr	r0, [r7, #4]
 8049568:	f000 fab1 	bl	8049ace <USBD_CtlError>
            err++;
 804956c:	7afb      	ldrb	r3, [r7, #11]
 804956e:	3301      	adds	r3, #1
 8049570:	72fb      	strb	r3, [r7, #11]
          break;
 8049572:	e06f      	b.n	8049654 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8049574:	687b      	ldr	r3, [r7, #4]
 8049576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804957a:	68db      	ldr	r3, [r3, #12]
 804957c:	2b00      	cmp	r3, #0
 804957e:	d00b      	beq.n	8049598 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8049580:	687b      	ldr	r3, [r7, #4]
 8049582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049586:	68db      	ldr	r3, [r3, #12]
 8049588:	687a      	ldr	r2, [r7, #4]
 804958a:	7c12      	ldrb	r2, [r2, #16]
 804958c:	f107 0108 	add.w	r1, r7, #8
 8049590:	4610      	mov	r0, r2
 8049592:	4798      	blx	r3
 8049594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8049596:	e05d      	b.n	8049654 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8049598:	6839      	ldr	r1, [r7, #0]
 804959a:	6878      	ldr	r0, [r7, #4]
 804959c:	f000 fa97 	bl	8049ace <USBD_CtlError>
            err++;
 80495a0:	7afb      	ldrb	r3, [r7, #11]
 80495a2:	3301      	adds	r3, #1
 80495a4:	72fb      	strb	r3, [r7, #11]
          break;
 80495a6:	e055      	b.n	8049654 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80495a8:	687b      	ldr	r3, [r7, #4]
 80495aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80495ae:	691b      	ldr	r3, [r3, #16]
 80495b0:	2b00      	cmp	r3, #0
 80495b2:	d00b      	beq.n	80495cc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80495b4:	687b      	ldr	r3, [r7, #4]
 80495b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80495ba:	691b      	ldr	r3, [r3, #16]
 80495bc:	687a      	ldr	r2, [r7, #4]
 80495be:	7c12      	ldrb	r2, [r2, #16]
 80495c0:	f107 0108 	add.w	r1, r7, #8
 80495c4:	4610      	mov	r0, r2
 80495c6:	4798      	blx	r3
 80495c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80495ca:	e043      	b.n	8049654 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80495cc:	6839      	ldr	r1, [r7, #0]
 80495ce:	6878      	ldr	r0, [r7, #4]
 80495d0:	f000 fa7d 	bl	8049ace <USBD_CtlError>
            err++;
 80495d4:	7afb      	ldrb	r3, [r7, #11]
 80495d6:	3301      	adds	r3, #1
 80495d8:	72fb      	strb	r3, [r7, #11]
          break;
 80495da:	e03b      	b.n	8049654 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80495dc:	687b      	ldr	r3, [r7, #4]
 80495de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80495e2:	695b      	ldr	r3, [r3, #20]
 80495e4:	2b00      	cmp	r3, #0
 80495e6:	d00b      	beq.n	8049600 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80495e8:	687b      	ldr	r3, [r7, #4]
 80495ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80495ee:	695b      	ldr	r3, [r3, #20]
 80495f0:	687a      	ldr	r2, [r7, #4]
 80495f2:	7c12      	ldrb	r2, [r2, #16]
 80495f4:	f107 0108 	add.w	r1, r7, #8
 80495f8:	4610      	mov	r0, r2
 80495fa:	4798      	blx	r3
 80495fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80495fe:	e029      	b.n	8049654 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8049600:	6839      	ldr	r1, [r7, #0]
 8049602:	6878      	ldr	r0, [r7, #4]
 8049604:	f000 fa63 	bl	8049ace <USBD_CtlError>
            err++;
 8049608:	7afb      	ldrb	r3, [r7, #11]
 804960a:	3301      	adds	r3, #1
 804960c:	72fb      	strb	r3, [r7, #11]
          break;
 804960e:	e021      	b.n	8049654 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8049610:	687b      	ldr	r3, [r7, #4]
 8049612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049616:	699b      	ldr	r3, [r3, #24]
 8049618:	2b00      	cmp	r3, #0
 804961a:	d00b      	beq.n	8049634 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 804961c:	687b      	ldr	r3, [r7, #4]
 804961e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049622:	699b      	ldr	r3, [r3, #24]
 8049624:	687a      	ldr	r2, [r7, #4]
 8049626:	7c12      	ldrb	r2, [r2, #16]
 8049628:	f107 0108 	add.w	r1, r7, #8
 804962c:	4610      	mov	r0, r2
 804962e:	4798      	blx	r3
 8049630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8049632:	e00f      	b.n	8049654 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8049634:	6839      	ldr	r1, [r7, #0]
 8049636:	6878      	ldr	r0, [r7, #4]
 8049638:	f000 fa49 	bl	8049ace <USBD_CtlError>
            err++;
 804963c:	7afb      	ldrb	r3, [r7, #11]
 804963e:	3301      	adds	r3, #1
 8049640:	72fb      	strb	r3, [r7, #11]
          break;
 8049642:	e007      	b.n	8049654 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8049644:	6839      	ldr	r1, [r7, #0]
 8049646:	6878      	ldr	r0, [r7, #4]
 8049648:	f000 fa41 	bl	8049ace <USBD_CtlError>
          err++;
 804964c:	7afb      	ldrb	r3, [r7, #11]
 804964e:	3301      	adds	r3, #1
 8049650:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8049652:	bf00      	nop
      }
      break;
 8049654:	e037      	b.n	80496c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8049656:	687b      	ldr	r3, [r7, #4]
 8049658:	7c1b      	ldrb	r3, [r3, #16]
 804965a:	2b00      	cmp	r3, #0
 804965c:	d109      	bne.n	8049672 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 804965e:	687b      	ldr	r3, [r7, #4]
 8049660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8049664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8049666:	f107 0208 	add.w	r2, r7, #8
 804966a:	4610      	mov	r0, r2
 804966c:	4798      	blx	r3
 804966e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8049670:	e029      	b.n	80496c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8049672:	6839      	ldr	r1, [r7, #0]
 8049674:	6878      	ldr	r0, [r7, #4]
 8049676:	f000 fa2a 	bl	8049ace <USBD_CtlError>
        err++;
 804967a:	7afb      	ldrb	r3, [r7, #11]
 804967c:	3301      	adds	r3, #1
 804967e:	72fb      	strb	r3, [r7, #11]
      break;
 8049680:	e021      	b.n	80496c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8049682:	687b      	ldr	r3, [r7, #4]
 8049684:	7c1b      	ldrb	r3, [r3, #16]
 8049686:	2b00      	cmp	r3, #0
 8049688:	d10d      	bne.n	80496a6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 804968a:	687b      	ldr	r3, [r7, #4]
 804968c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8049690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8049692:	f107 0208 	add.w	r2, r7, #8
 8049696:	4610      	mov	r0, r2
 8049698:	4798      	blx	r3
 804969a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 804969c:	68fb      	ldr	r3, [r7, #12]
 804969e:	3301      	adds	r3, #1
 80496a0:	2207      	movs	r2, #7
 80496a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80496a4:	e00f      	b.n	80496c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80496a6:	6839      	ldr	r1, [r7, #0]
 80496a8:	6878      	ldr	r0, [r7, #4]
 80496aa:	f000 fa10 	bl	8049ace <USBD_CtlError>
        err++;
 80496ae:	7afb      	ldrb	r3, [r7, #11]
 80496b0:	3301      	adds	r3, #1
 80496b2:	72fb      	strb	r3, [r7, #11]
      break;
 80496b4:	e007      	b.n	80496c6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80496b6:	6839      	ldr	r1, [r7, #0]
 80496b8:	6878      	ldr	r0, [r7, #4]
 80496ba:	f000 fa08 	bl	8049ace <USBD_CtlError>
      err++;
 80496be:	7afb      	ldrb	r3, [r7, #11]
 80496c0:	3301      	adds	r3, #1
 80496c2:	72fb      	strb	r3, [r7, #11]
      break;
 80496c4:	bf00      	nop
  }

  if (err != 0U)
 80496c6:	7afb      	ldrb	r3, [r7, #11]
 80496c8:	2b00      	cmp	r3, #0
 80496ca:	d11e      	bne.n	804970a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80496cc:	683b      	ldr	r3, [r7, #0]
 80496ce:	88db      	ldrh	r3, [r3, #6]
 80496d0:	2b00      	cmp	r3, #0
 80496d2:	d016      	beq.n	8049702 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80496d4:	893b      	ldrh	r3, [r7, #8]
 80496d6:	2b00      	cmp	r3, #0
 80496d8:	d00e      	beq.n	80496f8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80496da:	683b      	ldr	r3, [r7, #0]
 80496dc:	88da      	ldrh	r2, [r3, #6]
 80496de:	893b      	ldrh	r3, [r7, #8]
 80496e0:	4293      	cmp	r3, r2
 80496e2:	bf28      	it	cs
 80496e4:	4613      	movcs	r3, r2
 80496e6:	b29b      	uxth	r3, r3
 80496e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80496ea:	893b      	ldrh	r3, [r7, #8]
 80496ec:	461a      	mov	r2, r3
 80496ee:	68f9      	ldr	r1, [r7, #12]
 80496f0:	6878      	ldr	r0, [r7, #4]
 80496f2:	f000 fc93 	bl	804a01c <USBD_CtlSendData>
 80496f6:	e009      	b.n	804970c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80496f8:	6839      	ldr	r1, [r7, #0]
 80496fa:	6878      	ldr	r0, [r7, #4]
 80496fc:	f000 f9e7 	bl	8049ace <USBD_CtlError>
 8049700:	e004      	b.n	804970c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8049702:	6878      	ldr	r0, [r7, #4]
 8049704:	f000 fcc7 	bl	804a096 <USBD_CtlSendStatus>
 8049708:	e000      	b.n	804970c <USBD_GetDescriptor+0x320>
    return;
 804970a:	bf00      	nop
  }
}
 804970c:	3710      	adds	r7, #16
 804970e:	46bd      	mov	sp, r7
 8049710:	bd80      	pop	{r7, pc}
 8049712:	bf00      	nop

08049714 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8049714:	b580      	push	{r7, lr}
 8049716:	b084      	sub	sp, #16
 8049718:	af00      	add	r7, sp, #0
 804971a:	6078      	str	r0, [r7, #4]
 804971c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 804971e:	683b      	ldr	r3, [r7, #0]
 8049720:	889b      	ldrh	r3, [r3, #4]
 8049722:	2b00      	cmp	r3, #0
 8049724:	d131      	bne.n	804978a <USBD_SetAddress+0x76>
 8049726:	683b      	ldr	r3, [r7, #0]
 8049728:	88db      	ldrh	r3, [r3, #6]
 804972a:	2b00      	cmp	r3, #0
 804972c:	d12d      	bne.n	804978a <USBD_SetAddress+0x76>
 804972e:	683b      	ldr	r3, [r7, #0]
 8049730:	885b      	ldrh	r3, [r3, #2]
 8049732:	2b7f      	cmp	r3, #127	@ 0x7f
 8049734:	d829      	bhi.n	804978a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8049736:	683b      	ldr	r3, [r7, #0]
 8049738:	885b      	ldrh	r3, [r3, #2]
 804973a:	b2db      	uxtb	r3, r3
 804973c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8049740:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049742:	687b      	ldr	r3, [r7, #4]
 8049744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049748:	b2db      	uxtb	r3, r3
 804974a:	2b03      	cmp	r3, #3
 804974c:	d104      	bne.n	8049758 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 804974e:	6839      	ldr	r1, [r7, #0]
 8049750:	6878      	ldr	r0, [r7, #4]
 8049752:	f000 f9bc 	bl	8049ace <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049756:	e01d      	b.n	8049794 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8049758:	687b      	ldr	r3, [r7, #4]
 804975a:	7bfa      	ldrb	r2, [r7, #15]
 804975c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8049760:	7bfb      	ldrb	r3, [r7, #15]
 8049762:	4619      	mov	r1, r3
 8049764:	6878      	ldr	r0, [r7, #4]
 8049766:	f001 f929 	bl	804a9bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 804976a:	6878      	ldr	r0, [r7, #4]
 804976c:	f000 fc93 	bl	804a096 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8049770:	7bfb      	ldrb	r3, [r7, #15]
 8049772:	2b00      	cmp	r3, #0
 8049774:	d004      	beq.n	8049780 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8049776:	687b      	ldr	r3, [r7, #4]
 8049778:	2202      	movs	r2, #2
 804977a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 804977e:	e009      	b.n	8049794 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8049780:	687b      	ldr	r3, [r7, #4]
 8049782:	2201      	movs	r2, #1
 8049784:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049788:	e004      	b.n	8049794 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 804978a:	6839      	ldr	r1, [r7, #0]
 804978c:	6878      	ldr	r0, [r7, #4]
 804978e:	f000 f99e 	bl	8049ace <USBD_CtlError>
  }
}
 8049792:	bf00      	nop
 8049794:	bf00      	nop
 8049796:	3710      	adds	r7, #16
 8049798:	46bd      	mov	sp, r7
 804979a:	bd80      	pop	{r7, pc}

0804979c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 804979c:	b580      	push	{r7, lr}
 804979e:	b084      	sub	sp, #16
 80497a0:	af00      	add	r7, sp, #0
 80497a2:	6078      	str	r0, [r7, #4]
 80497a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80497a6:	2300      	movs	r3, #0
 80497a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80497aa:	683b      	ldr	r3, [r7, #0]
 80497ac:	885b      	ldrh	r3, [r3, #2]
 80497ae:	b2da      	uxtb	r2, r3
 80497b0:	4b4e      	ldr	r3, [pc, #312]	@ (80498ec <USBD_SetConfig+0x150>)
 80497b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80497b4:	4b4d      	ldr	r3, [pc, #308]	@ (80498ec <USBD_SetConfig+0x150>)
 80497b6:	781b      	ldrb	r3, [r3, #0]
 80497b8:	2b01      	cmp	r3, #1
 80497ba:	d905      	bls.n	80497c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80497bc:	6839      	ldr	r1, [r7, #0]
 80497be:	6878      	ldr	r0, [r7, #4]
 80497c0:	f000 f985 	bl	8049ace <USBD_CtlError>
    return USBD_FAIL;
 80497c4:	2303      	movs	r3, #3
 80497c6:	e08c      	b.n	80498e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80497c8:	687b      	ldr	r3, [r7, #4]
 80497ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80497ce:	b2db      	uxtb	r3, r3
 80497d0:	2b02      	cmp	r3, #2
 80497d2:	d002      	beq.n	80497da <USBD_SetConfig+0x3e>
 80497d4:	2b03      	cmp	r3, #3
 80497d6:	d029      	beq.n	804982c <USBD_SetConfig+0x90>
 80497d8:	e075      	b.n	80498c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80497da:	4b44      	ldr	r3, [pc, #272]	@ (80498ec <USBD_SetConfig+0x150>)
 80497dc:	781b      	ldrb	r3, [r3, #0]
 80497de:	2b00      	cmp	r3, #0
 80497e0:	d020      	beq.n	8049824 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80497e2:	4b42      	ldr	r3, [pc, #264]	@ (80498ec <USBD_SetConfig+0x150>)
 80497e4:	781b      	ldrb	r3, [r3, #0]
 80497e6:	461a      	mov	r2, r3
 80497e8:	687b      	ldr	r3, [r7, #4]
 80497ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80497ec:	4b3f      	ldr	r3, [pc, #252]	@ (80498ec <USBD_SetConfig+0x150>)
 80497ee:	781b      	ldrb	r3, [r3, #0]
 80497f0:	4619      	mov	r1, r3
 80497f2:	6878      	ldr	r0, [r7, #4]
 80497f4:	f7fe ffb8 	bl	8048768 <USBD_SetClassConfig>
 80497f8:	4603      	mov	r3, r0
 80497fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80497fc:	7bfb      	ldrb	r3, [r7, #15]
 80497fe:	2b00      	cmp	r3, #0
 8049800:	d008      	beq.n	8049814 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8049802:	6839      	ldr	r1, [r7, #0]
 8049804:	6878      	ldr	r0, [r7, #4]
 8049806:	f000 f962 	bl	8049ace <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 804980a:	687b      	ldr	r3, [r7, #4]
 804980c:	2202      	movs	r2, #2
 804980e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8049812:	e065      	b.n	80498e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8049814:	6878      	ldr	r0, [r7, #4]
 8049816:	f000 fc3e 	bl	804a096 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 804981a:	687b      	ldr	r3, [r7, #4]
 804981c:	2203      	movs	r2, #3
 804981e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8049822:	e05d      	b.n	80498e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8049824:	6878      	ldr	r0, [r7, #4]
 8049826:	f000 fc36 	bl	804a096 <USBD_CtlSendStatus>
      break;
 804982a:	e059      	b.n	80498e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 804982c:	4b2f      	ldr	r3, [pc, #188]	@ (80498ec <USBD_SetConfig+0x150>)
 804982e:	781b      	ldrb	r3, [r3, #0]
 8049830:	2b00      	cmp	r3, #0
 8049832:	d112      	bne.n	804985a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8049834:	687b      	ldr	r3, [r7, #4]
 8049836:	2202      	movs	r2, #2
 8049838:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 804983c:	4b2b      	ldr	r3, [pc, #172]	@ (80498ec <USBD_SetConfig+0x150>)
 804983e:	781b      	ldrb	r3, [r3, #0]
 8049840:	461a      	mov	r2, r3
 8049842:	687b      	ldr	r3, [r7, #4]
 8049844:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8049846:	4b29      	ldr	r3, [pc, #164]	@ (80498ec <USBD_SetConfig+0x150>)
 8049848:	781b      	ldrb	r3, [r3, #0]
 804984a:	4619      	mov	r1, r3
 804984c:	6878      	ldr	r0, [r7, #4]
 804984e:	f7fe ffa7 	bl	80487a0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8049852:	6878      	ldr	r0, [r7, #4]
 8049854:	f000 fc1f 	bl	804a096 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8049858:	e042      	b.n	80498e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 804985a:	4b24      	ldr	r3, [pc, #144]	@ (80498ec <USBD_SetConfig+0x150>)
 804985c:	781b      	ldrb	r3, [r3, #0]
 804985e:	461a      	mov	r2, r3
 8049860:	687b      	ldr	r3, [r7, #4]
 8049862:	685b      	ldr	r3, [r3, #4]
 8049864:	429a      	cmp	r2, r3
 8049866:	d02a      	beq.n	80498be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8049868:	687b      	ldr	r3, [r7, #4]
 804986a:	685b      	ldr	r3, [r3, #4]
 804986c:	b2db      	uxtb	r3, r3
 804986e:	4619      	mov	r1, r3
 8049870:	6878      	ldr	r0, [r7, #4]
 8049872:	f7fe ff95 	bl	80487a0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8049876:	4b1d      	ldr	r3, [pc, #116]	@ (80498ec <USBD_SetConfig+0x150>)
 8049878:	781b      	ldrb	r3, [r3, #0]
 804987a:	461a      	mov	r2, r3
 804987c:	687b      	ldr	r3, [r7, #4]
 804987e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8049880:	4b1a      	ldr	r3, [pc, #104]	@ (80498ec <USBD_SetConfig+0x150>)
 8049882:	781b      	ldrb	r3, [r3, #0]
 8049884:	4619      	mov	r1, r3
 8049886:	6878      	ldr	r0, [r7, #4]
 8049888:	f7fe ff6e 	bl	8048768 <USBD_SetClassConfig>
 804988c:	4603      	mov	r3, r0
 804988e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8049890:	7bfb      	ldrb	r3, [r7, #15]
 8049892:	2b00      	cmp	r3, #0
 8049894:	d00f      	beq.n	80498b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8049896:	6839      	ldr	r1, [r7, #0]
 8049898:	6878      	ldr	r0, [r7, #4]
 804989a:	f000 f918 	bl	8049ace <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 804989e:	687b      	ldr	r3, [r7, #4]
 80498a0:	685b      	ldr	r3, [r3, #4]
 80498a2:	b2db      	uxtb	r3, r3
 80498a4:	4619      	mov	r1, r3
 80498a6:	6878      	ldr	r0, [r7, #4]
 80498a8:	f7fe ff7a 	bl	80487a0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80498ac:	687b      	ldr	r3, [r7, #4]
 80498ae:	2202      	movs	r2, #2
 80498b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80498b4:	e014      	b.n	80498e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80498b6:	6878      	ldr	r0, [r7, #4]
 80498b8:	f000 fbed 	bl	804a096 <USBD_CtlSendStatus>
      break;
 80498bc:	e010      	b.n	80498e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80498be:	6878      	ldr	r0, [r7, #4]
 80498c0:	f000 fbe9 	bl	804a096 <USBD_CtlSendStatus>
      break;
 80498c4:	e00c      	b.n	80498e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80498c6:	6839      	ldr	r1, [r7, #0]
 80498c8:	6878      	ldr	r0, [r7, #4]
 80498ca:	f000 f900 	bl	8049ace <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80498ce:	4b07      	ldr	r3, [pc, #28]	@ (80498ec <USBD_SetConfig+0x150>)
 80498d0:	781b      	ldrb	r3, [r3, #0]
 80498d2:	4619      	mov	r1, r3
 80498d4:	6878      	ldr	r0, [r7, #4]
 80498d6:	f7fe ff63 	bl	80487a0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80498da:	2303      	movs	r3, #3
 80498dc:	73fb      	strb	r3, [r7, #15]
      break;
 80498de:	bf00      	nop
  }

  return ret;
 80498e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80498e2:	4618      	mov	r0, r3
 80498e4:	3710      	adds	r7, #16
 80498e6:	46bd      	mov	sp, r7
 80498e8:	bd80      	pop	{r7, pc}
 80498ea:	bf00      	nop
 80498ec:	24000270 	.word	0x24000270

080498f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80498f0:	b580      	push	{r7, lr}
 80498f2:	b082      	sub	sp, #8
 80498f4:	af00      	add	r7, sp, #0
 80498f6:	6078      	str	r0, [r7, #4]
 80498f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80498fa:	683b      	ldr	r3, [r7, #0]
 80498fc:	88db      	ldrh	r3, [r3, #6]
 80498fe:	2b01      	cmp	r3, #1
 8049900:	d004      	beq.n	804990c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8049902:	6839      	ldr	r1, [r7, #0]
 8049904:	6878      	ldr	r0, [r7, #4]
 8049906:	f000 f8e2 	bl	8049ace <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 804990a:	e023      	b.n	8049954 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 804990c:	687b      	ldr	r3, [r7, #4]
 804990e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049912:	b2db      	uxtb	r3, r3
 8049914:	2b02      	cmp	r3, #2
 8049916:	dc02      	bgt.n	804991e <USBD_GetConfig+0x2e>
 8049918:	2b00      	cmp	r3, #0
 804991a:	dc03      	bgt.n	8049924 <USBD_GetConfig+0x34>
 804991c:	e015      	b.n	804994a <USBD_GetConfig+0x5a>
 804991e:	2b03      	cmp	r3, #3
 8049920:	d00b      	beq.n	804993a <USBD_GetConfig+0x4a>
 8049922:	e012      	b.n	804994a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8049924:	687b      	ldr	r3, [r7, #4]
 8049926:	2200      	movs	r2, #0
 8049928:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 804992a:	687b      	ldr	r3, [r7, #4]
 804992c:	3308      	adds	r3, #8
 804992e:	2201      	movs	r2, #1
 8049930:	4619      	mov	r1, r3
 8049932:	6878      	ldr	r0, [r7, #4]
 8049934:	f000 fb72 	bl	804a01c <USBD_CtlSendData>
        break;
 8049938:	e00c      	b.n	8049954 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 804993a:	687b      	ldr	r3, [r7, #4]
 804993c:	3304      	adds	r3, #4
 804993e:	2201      	movs	r2, #1
 8049940:	4619      	mov	r1, r3
 8049942:	6878      	ldr	r0, [r7, #4]
 8049944:	f000 fb6a 	bl	804a01c <USBD_CtlSendData>
        break;
 8049948:	e004      	b.n	8049954 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 804994a:	6839      	ldr	r1, [r7, #0]
 804994c:	6878      	ldr	r0, [r7, #4]
 804994e:	f000 f8be 	bl	8049ace <USBD_CtlError>
        break;
 8049952:	bf00      	nop
}
 8049954:	bf00      	nop
 8049956:	3708      	adds	r7, #8
 8049958:	46bd      	mov	sp, r7
 804995a:	bd80      	pop	{r7, pc}

0804995c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 804995c:	b580      	push	{r7, lr}
 804995e:	b082      	sub	sp, #8
 8049960:	af00      	add	r7, sp, #0
 8049962:	6078      	str	r0, [r7, #4]
 8049964:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8049966:	687b      	ldr	r3, [r7, #4]
 8049968:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 804996c:	b2db      	uxtb	r3, r3
 804996e:	3b01      	subs	r3, #1
 8049970:	2b02      	cmp	r3, #2
 8049972:	d81e      	bhi.n	80499b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8049974:	683b      	ldr	r3, [r7, #0]
 8049976:	88db      	ldrh	r3, [r3, #6]
 8049978:	2b02      	cmp	r3, #2
 804997a:	d004      	beq.n	8049986 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 804997c:	6839      	ldr	r1, [r7, #0]
 804997e:	6878      	ldr	r0, [r7, #4]
 8049980:	f000 f8a5 	bl	8049ace <USBD_CtlError>
        break;
 8049984:	e01a      	b.n	80499bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8049986:	687b      	ldr	r3, [r7, #4]
 8049988:	2201      	movs	r2, #1
 804998a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 804998c:	687b      	ldr	r3, [r7, #4]
 804998e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8049992:	2b00      	cmp	r3, #0
 8049994:	d005      	beq.n	80499a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8049996:	687b      	ldr	r3, [r7, #4]
 8049998:	68db      	ldr	r3, [r3, #12]
 804999a:	f043 0202 	orr.w	r2, r3, #2
 804999e:	687b      	ldr	r3, [r7, #4]
 80499a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80499a2:	687b      	ldr	r3, [r7, #4]
 80499a4:	330c      	adds	r3, #12
 80499a6:	2202      	movs	r2, #2
 80499a8:	4619      	mov	r1, r3
 80499aa:	6878      	ldr	r0, [r7, #4]
 80499ac:	f000 fb36 	bl	804a01c <USBD_CtlSendData>
      break;
 80499b0:	e004      	b.n	80499bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80499b2:	6839      	ldr	r1, [r7, #0]
 80499b4:	6878      	ldr	r0, [r7, #4]
 80499b6:	f000 f88a 	bl	8049ace <USBD_CtlError>
      break;
 80499ba:	bf00      	nop
  }
}
 80499bc:	bf00      	nop
 80499be:	3708      	adds	r7, #8
 80499c0:	46bd      	mov	sp, r7
 80499c2:	bd80      	pop	{r7, pc}

080499c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80499c4:	b580      	push	{r7, lr}
 80499c6:	b082      	sub	sp, #8
 80499c8:	af00      	add	r7, sp, #0
 80499ca:	6078      	str	r0, [r7, #4]
 80499cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80499ce:	683b      	ldr	r3, [r7, #0]
 80499d0:	885b      	ldrh	r3, [r3, #2]
 80499d2:	2b01      	cmp	r3, #1
 80499d4:	d107      	bne.n	80499e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80499d6:	687b      	ldr	r3, [r7, #4]
 80499d8:	2201      	movs	r2, #1
 80499da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80499de:	6878      	ldr	r0, [r7, #4]
 80499e0:	f000 fb59 	bl	804a096 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80499e4:	e013      	b.n	8049a0e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80499e6:	683b      	ldr	r3, [r7, #0]
 80499e8:	885b      	ldrh	r3, [r3, #2]
 80499ea:	2b02      	cmp	r3, #2
 80499ec:	d10b      	bne.n	8049a06 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80499ee:	683b      	ldr	r3, [r7, #0]
 80499f0:	889b      	ldrh	r3, [r3, #4]
 80499f2:	0a1b      	lsrs	r3, r3, #8
 80499f4:	b29b      	uxth	r3, r3
 80499f6:	b2da      	uxtb	r2, r3
 80499f8:	687b      	ldr	r3, [r7, #4]
 80499fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80499fe:	6878      	ldr	r0, [r7, #4]
 8049a00:	f000 fb49 	bl	804a096 <USBD_CtlSendStatus>
}
 8049a04:	e003      	b.n	8049a0e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8049a06:	6839      	ldr	r1, [r7, #0]
 8049a08:	6878      	ldr	r0, [r7, #4]
 8049a0a:	f000 f860 	bl	8049ace <USBD_CtlError>
}
 8049a0e:	bf00      	nop
 8049a10:	3708      	adds	r7, #8
 8049a12:	46bd      	mov	sp, r7
 8049a14:	bd80      	pop	{r7, pc}

08049a16 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8049a16:	b580      	push	{r7, lr}
 8049a18:	b082      	sub	sp, #8
 8049a1a:	af00      	add	r7, sp, #0
 8049a1c:	6078      	str	r0, [r7, #4]
 8049a1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8049a20:	687b      	ldr	r3, [r7, #4]
 8049a22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049a26:	b2db      	uxtb	r3, r3
 8049a28:	3b01      	subs	r3, #1
 8049a2a:	2b02      	cmp	r3, #2
 8049a2c:	d80b      	bhi.n	8049a46 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8049a2e:	683b      	ldr	r3, [r7, #0]
 8049a30:	885b      	ldrh	r3, [r3, #2]
 8049a32:	2b01      	cmp	r3, #1
 8049a34:	d10c      	bne.n	8049a50 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8049a36:	687b      	ldr	r3, [r7, #4]
 8049a38:	2200      	movs	r2, #0
 8049a3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8049a3e:	6878      	ldr	r0, [r7, #4]
 8049a40:	f000 fb29 	bl	804a096 <USBD_CtlSendStatus>
      }
      break;
 8049a44:	e004      	b.n	8049a50 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8049a46:	6839      	ldr	r1, [r7, #0]
 8049a48:	6878      	ldr	r0, [r7, #4]
 8049a4a:	f000 f840 	bl	8049ace <USBD_CtlError>
      break;
 8049a4e:	e000      	b.n	8049a52 <USBD_ClrFeature+0x3c>
      break;
 8049a50:	bf00      	nop
  }
}
 8049a52:	bf00      	nop
 8049a54:	3708      	adds	r7, #8
 8049a56:	46bd      	mov	sp, r7
 8049a58:	bd80      	pop	{r7, pc}

08049a5a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8049a5a:	b580      	push	{r7, lr}
 8049a5c:	b084      	sub	sp, #16
 8049a5e:	af00      	add	r7, sp, #0
 8049a60:	6078      	str	r0, [r7, #4]
 8049a62:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8049a64:	683b      	ldr	r3, [r7, #0]
 8049a66:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8049a68:	68fb      	ldr	r3, [r7, #12]
 8049a6a:	781a      	ldrb	r2, [r3, #0]
 8049a6c:	687b      	ldr	r3, [r7, #4]
 8049a6e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8049a70:	68fb      	ldr	r3, [r7, #12]
 8049a72:	3301      	adds	r3, #1
 8049a74:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8049a76:	68fb      	ldr	r3, [r7, #12]
 8049a78:	781a      	ldrb	r2, [r3, #0]
 8049a7a:	687b      	ldr	r3, [r7, #4]
 8049a7c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8049a7e:	68fb      	ldr	r3, [r7, #12]
 8049a80:	3301      	adds	r3, #1
 8049a82:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8049a84:	68f8      	ldr	r0, [r7, #12]
 8049a86:	f7ff fa15 	bl	8048eb4 <SWAPBYTE>
 8049a8a:	4603      	mov	r3, r0
 8049a8c:	461a      	mov	r2, r3
 8049a8e:	687b      	ldr	r3, [r7, #4]
 8049a90:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8049a92:	68fb      	ldr	r3, [r7, #12]
 8049a94:	3301      	adds	r3, #1
 8049a96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8049a98:	68fb      	ldr	r3, [r7, #12]
 8049a9a:	3301      	adds	r3, #1
 8049a9c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8049a9e:	68f8      	ldr	r0, [r7, #12]
 8049aa0:	f7ff fa08 	bl	8048eb4 <SWAPBYTE>
 8049aa4:	4603      	mov	r3, r0
 8049aa6:	461a      	mov	r2, r3
 8049aa8:	687b      	ldr	r3, [r7, #4]
 8049aaa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8049aac:	68fb      	ldr	r3, [r7, #12]
 8049aae:	3301      	adds	r3, #1
 8049ab0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8049ab2:	68fb      	ldr	r3, [r7, #12]
 8049ab4:	3301      	adds	r3, #1
 8049ab6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8049ab8:	68f8      	ldr	r0, [r7, #12]
 8049aba:	f7ff f9fb 	bl	8048eb4 <SWAPBYTE>
 8049abe:	4603      	mov	r3, r0
 8049ac0:	461a      	mov	r2, r3
 8049ac2:	687b      	ldr	r3, [r7, #4]
 8049ac4:	80da      	strh	r2, [r3, #6]
}
 8049ac6:	bf00      	nop
 8049ac8:	3710      	adds	r7, #16
 8049aca:	46bd      	mov	sp, r7
 8049acc:	bd80      	pop	{r7, pc}

08049ace <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8049ace:	b580      	push	{r7, lr}
 8049ad0:	b082      	sub	sp, #8
 8049ad2:	af00      	add	r7, sp, #0
 8049ad4:	6078      	str	r0, [r7, #4]
 8049ad6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8049ad8:	2180      	movs	r1, #128	@ 0x80
 8049ada:	6878      	ldr	r0, [r7, #4]
 8049adc:	f000 ff04 	bl	804a8e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8049ae0:	2100      	movs	r1, #0
 8049ae2:	6878      	ldr	r0, [r7, #4]
 8049ae4:	f000 ff00 	bl	804a8e8 <USBD_LL_StallEP>
}
 8049ae8:	bf00      	nop
 8049aea:	3708      	adds	r7, #8
 8049aec:	46bd      	mov	sp, r7
 8049aee:	bd80      	pop	{r7, pc}

08049af0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8049af0:	b580      	push	{r7, lr}
 8049af2:	b086      	sub	sp, #24
 8049af4:	af00      	add	r7, sp, #0
 8049af6:	60f8      	str	r0, [r7, #12]
 8049af8:	60b9      	str	r1, [r7, #8]
 8049afa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8049afc:	2300      	movs	r3, #0
 8049afe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8049b00:	68fb      	ldr	r3, [r7, #12]
 8049b02:	2b00      	cmp	r3, #0
 8049b04:	d042      	beq.n	8049b8c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8049b06:	68fb      	ldr	r3, [r7, #12]
 8049b08:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8049b0a:	6938      	ldr	r0, [r7, #16]
 8049b0c:	f000 f842 	bl	8049b94 <USBD_GetLen>
 8049b10:	4603      	mov	r3, r0
 8049b12:	3301      	adds	r3, #1
 8049b14:	005b      	lsls	r3, r3, #1
 8049b16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8049b1a:	d808      	bhi.n	8049b2e <USBD_GetString+0x3e>
 8049b1c:	6938      	ldr	r0, [r7, #16]
 8049b1e:	f000 f839 	bl	8049b94 <USBD_GetLen>
 8049b22:	4603      	mov	r3, r0
 8049b24:	3301      	adds	r3, #1
 8049b26:	b29b      	uxth	r3, r3
 8049b28:	005b      	lsls	r3, r3, #1
 8049b2a:	b29a      	uxth	r2, r3
 8049b2c:	e001      	b.n	8049b32 <USBD_GetString+0x42>
 8049b2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8049b32:	687b      	ldr	r3, [r7, #4]
 8049b34:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8049b36:	7dfb      	ldrb	r3, [r7, #23]
 8049b38:	68ba      	ldr	r2, [r7, #8]
 8049b3a:	4413      	add	r3, r2
 8049b3c:	687a      	ldr	r2, [r7, #4]
 8049b3e:	7812      	ldrb	r2, [r2, #0]
 8049b40:	701a      	strb	r2, [r3, #0]
  idx++;
 8049b42:	7dfb      	ldrb	r3, [r7, #23]
 8049b44:	3301      	adds	r3, #1
 8049b46:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8049b48:	7dfb      	ldrb	r3, [r7, #23]
 8049b4a:	68ba      	ldr	r2, [r7, #8]
 8049b4c:	4413      	add	r3, r2
 8049b4e:	2203      	movs	r2, #3
 8049b50:	701a      	strb	r2, [r3, #0]
  idx++;
 8049b52:	7dfb      	ldrb	r3, [r7, #23]
 8049b54:	3301      	adds	r3, #1
 8049b56:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8049b58:	e013      	b.n	8049b82 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8049b5a:	7dfb      	ldrb	r3, [r7, #23]
 8049b5c:	68ba      	ldr	r2, [r7, #8]
 8049b5e:	4413      	add	r3, r2
 8049b60:	693a      	ldr	r2, [r7, #16]
 8049b62:	7812      	ldrb	r2, [r2, #0]
 8049b64:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8049b66:	693b      	ldr	r3, [r7, #16]
 8049b68:	3301      	adds	r3, #1
 8049b6a:	613b      	str	r3, [r7, #16]
    idx++;
 8049b6c:	7dfb      	ldrb	r3, [r7, #23]
 8049b6e:	3301      	adds	r3, #1
 8049b70:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8049b72:	7dfb      	ldrb	r3, [r7, #23]
 8049b74:	68ba      	ldr	r2, [r7, #8]
 8049b76:	4413      	add	r3, r2
 8049b78:	2200      	movs	r2, #0
 8049b7a:	701a      	strb	r2, [r3, #0]
    idx++;
 8049b7c:	7dfb      	ldrb	r3, [r7, #23]
 8049b7e:	3301      	adds	r3, #1
 8049b80:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8049b82:	693b      	ldr	r3, [r7, #16]
 8049b84:	781b      	ldrb	r3, [r3, #0]
 8049b86:	2b00      	cmp	r3, #0
 8049b88:	d1e7      	bne.n	8049b5a <USBD_GetString+0x6a>
 8049b8a:	e000      	b.n	8049b8e <USBD_GetString+0x9e>
    return;
 8049b8c:	bf00      	nop
  }
}
 8049b8e:	3718      	adds	r7, #24
 8049b90:	46bd      	mov	sp, r7
 8049b92:	bd80      	pop	{r7, pc}

08049b94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8049b94:	b480      	push	{r7}
 8049b96:	b085      	sub	sp, #20
 8049b98:	af00      	add	r7, sp, #0
 8049b9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8049b9c:	2300      	movs	r3, #0
 8049b9e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8049ba0:	687b      	ldr	r3, [r7, #4]
 8049ba2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8049ba4:	e005      	b.n	8049bb2 <USBD_GetLen+0x1e>
  {
    len++;
 8049ba6:	7bfb      	ldrb	r3, [r7, #15]
 8049ba8:	3301      	adds	r3, #1
 8049baa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8049bac:	68bb      	ldr	r3, [r7, #8]
 8049bae:	3301      	adds	r3, #1
 8049bb0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8049bb2:	68bb      	ldr	r3, [r7, #8]
 8049bb4:	781b      	ldrb	r3, [r3, #0]
 8049bb6:	2b00      	cmp	r3, #0
 8049bb8:	d1f5      	bne.n	8049ba6 <USBD_GetLen+0x12>
  }

  return len;
 8049bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8049bbc:	4618      	mov	r0, r3
 8049bbe:	3714      	adds	r7, #20
 8049bc0:	46bd      	mov	sp, r7
 8049bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049bc6:	4770      	bx	lr

08049bc8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8049bc8:	b580      	push	{r7, lr}
 8049bca:	b084      	sub	sp, #16
 8049bcc:	af00      	add	r7, sp, #0
 8049bce:	6078      	str	r0, [r7, #4]
 8049bd0:	460b      	mov	r3, r1
 8049bd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8049bd4:	2010      	movs	r0, #16
 8049bd6:	f000 ff53 	bl	804aa80 <USBD_static_malloc>
 8049bda:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8049bdc:	68fb      	ldr	r3, [r7, #12]
 8049bde:	2b00      	cmp	r3, #0
 8049be0:	d109      	bne.n	8049bf6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8049be2:	687b      	ldr	r3, [r7, #4]
 8049be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049be8:	687b      	ldr	r3, [r7, #4]
 8049bea:	32b0      	adds	r2, #176	@ 0xb0
 8049bec:	2100      	movs	r1, #0
 8049bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8049bf2:	2302      	movs	r3, #2
 8049bf4:	e048      	b.n	8049c88 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8049bf6:	687b      	ldr	r3, [r7, #4]
 8049bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049bfc:	687b      	ldr	r3, [r7, #4]
 8049bfe:	32b0      	adds	r2, #176	@ 0xb0
 8049c00:	68f9      	ldr	r1, [r7, #12]
 8049c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8049c06:	687b      	ldr	r3, [r7, #4]
 8049c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049c0c:	687b      	ldr	r3, [r7, #4]
 8049c0e:	32b0      	adds	r2, #176	@ 0xb0
 8049c10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8049c14:	687b      	ldr	r3, [r7, #4]
 8049c16:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8049c1a:	687b      	ldr	r3, [r7, #4]
 8049c1c:	7c1b      	ldrb	r3, [r3, #16]
 8049c1e:	2b00      	cmp	r3, #0
 8049c20:	d10d      	bne.n	8049c3e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8049c22:	4b1b      	ldr	r3, [pc, #108]	@ (8049c90 <USBD_HID_Init+0xc8>)
 8049c24:	781b      	ldrb	r3, [r3, #0]
 8049c26:	f003 020f 	and.w	r2, r3, #15
 8049c2a:	6879      	ldr	r1, [r7, #4]
 8049c2c:	4613      	mov	r3, r2
 8049c2e:	009b      	lsls	r3, r3, #2
 8049c30:	4413      	add	r3, r2
 8049c32:	009b      	lsls	r3, r3, #2
 8049c34:	440b      	add	r3, r1
 8049c36:	3326      	adds	r3, #38	@ 0x26
 8049c38:	2207      	movs	r2, #7
 8049c3a:	801a      	strh	r2, [r3, #0]
 8049c3c:	e00c      	b.n	8049c58 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8049c3e:	4b14      	ldr	r3, [pc, #80]	@ (8049c90 <USBD_HID_Init+0xc8>)
 8049c40:	781b      	ldrb	r3, [r3, #0]
 8049c42:	f003 020f 	and.w	r2, r3, #15
 8049c46:	6879      	ldr	r1, [r7, #4]
 8049c48:	4613      	mov	r3, r2
 8049c4a:	009b      	lsls	r3, r3, #2
 8049c4c:	4413      	add	r3, r2
 8049c4e:	009b      	lsls	r3, r3, #2
 8049c50:	440b      	add	r3, r1
 8049c52:	3326      	adds	r3, #38	@ 0x26
 8049c54:	220a      	movs	r2, #10
 8049c56:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8049c58:	4b0d      	ldr	r3, [pc, #52]	@ (8049c90 <USBD_HID_Init+0xc8>)
 8049c5a:	7819      	ldrb	r1, [r3, #0]
 8049c5c:	2304      	movs	r3, #4
 8049c5e:	2203      	movs	r2, #3
 8049c60:	6878      	ldr	r0, [r7, #4]
 8049c62:	f000 fdfc 	bl	804a85e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8049c66:	4b0a      	ldr	r3, [pc, #40]	@ (8049c90 <USBD_HID_Init+0xc8>)
 8049c68:	781b      	ldrb	r3, [r3, #0]
 8049c6a:	f003 020f 	and.w	r2, r3, #15
 8049c6e:	6879      	ldr	r1, [r7, #4]
 8049c70:	4613      	mov	r3, r2
 8049c72:	009b      	lsls	r3, r3, #2
 8049c74:	4413      	add	r3, r2
 8049c76:	009b      	lsls	r3, r3, #2
 8049c78:	440b      	add	r3, r1
 8049c7a:	3324      	adds	r3, #36	@ 0x24
 8049c7c:	2201      	movs	r2, #1
 8049c7e:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8049c80:	68fb      	ldr	r3, [r7, #12]
 8049c82:	2200      	movs	r2, #0
 8049c84:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8049c86:	2300      	movs	r3, #0
}
 8049c88:	4618      	mov	r0, r3
 8049c8a:	3710      	adds	r7, #16
 8049c8c:	46bd      	mov	sp, r7
 8049c8e:	bd80      	pop	{r7, pc}
 8049c90:	240000ce 	.word	0x240000ce

08049c94 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8049c94:	b580      	push	{r7, lr}
 8049c96:	b082      	sub	sp, #8
 8049c98:	af00      	add	r7, sp, #0
 8049c9a:	6078      	str	r0, [r7, #4]
 8049c9c:	460b      	mov	r3, r1
 8049c9e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8049ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8049d20 <USBD_HID_DeInit+0x8c>)
 8049ca2:	781b      	ldrb	r3, [r3, #0]
 8049ca4:	4619      	mov	r1, r3
 8049ca6:	6878      	ldr	r0, [r7, #4]
 8049ca8:	f000 fdff 	bl	804a8aa <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8049cac:	4b1c      	ldr	r3, [pc, #112]	@ (8049d20 <USBD_HID_DeInit+0x8c>)
 8049cae:	781b      	ldrb	r3, [r3, #0]
 8049cb0:	f003 020f 	and.w	r2, r3, #15
 8049cb4:	6879      	ldr	r1, [r7, #4]
 8049cb6:	4613      	mov	r3, r2
 8049cb8:	009b      	lsls	r3, r3, #2
 8049cba:	4413      	add	r3, r2
 8049cbc:	009b      	lsls	r3, r3, #2
 8049cbe:	440b      	add	r3, r1
 8049cc0:	3324      	adds	r3, #36	@ 0x24
 8049cc2:	2200      	movs	r2, #0
 8049cc4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8049cc6:	4b16      	ldr	r3, [pc, #88]	@ (8049d20 <USBD_HID_DeInit+0x8c>)
 8049cc8:	781b      	ldrb	r3, [r3, #0]
 8049cca:	f003 020f 	and.w	r2, r3, #15
 8049cce:	6879      	ldr	r1, [r7, #4]
 8049cd0:	4613      	mov	r3, r2
 8049cd2:	009b      	lsls	r3, r3, #2
 8049cd4:	4413      	add	r3, r2
 8049cd6:	009b      	lsls	r3, r3, #2
 8049cd8:	440b      	add	r3, r1
 8049cda:	3326      	adds	r3, #38	@ 0x26
 8049cdc:	2200      	movs	r2, #0
 8049cde:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8049ce0:	687b      	ldr	r3, [r7, #4]
 8049ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049ce6:	687b      	ldr	r3, [r7, #4]
 8049ce8:	32b0      	adds	r2, #176	@ 0xb0
 8049cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049cee:	2b00      	cmp	r3, #0
 8049cf0:	d011      	beq.n	8049d16 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8049cf2:	687b      	ldr	r3, [r7, #4]
 8049cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049cf8:	687b      	ldr	r3, [r7, #4]
 8049cfa:	32b0      	adds	r2, #176	@ 0xb0
 8049cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049d00:	4618      	mov	r0, r3
 8049d02:	f000 fecb 	bl	804aa9c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8049d06:	687b      	ldr	r3, [r7, #4]
 8049d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049d0c:	687b      	ldr	r3, [r7, #4]
 8049d0e:	32b0      	adds	r2, #176	@ 0xb0
 8049d10:	2100      	movs	r1, #0
 8049d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8049d16:	2300      	movs	r3, #0
}
 8049d18:	4618      	mov	r0, r3
 8049d1a:	3708      	adds	r7, #8
 8049d1c:	46bd      	mov	sp, r7
 8049d1e:	bd80      	pop	{r7, pc}
 8049d20:	240000ce 	.word	0x240000ce

08049d24 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8049d24:	b580      	push	{r7, lr}
 8049d26:	b086      	sub	sp, #24
 8049d28:	af00      	add	r7, sp, #0
 8049d2a:	6078      	str	r0, [r7, #4]
 8049d2c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8049d2e:	687b      	ldr	r3, [r7, #4]
 8049d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049d34:	687b      	ldr	r3, [r7, #4]
 8049d36:	32b0      	adds	r2, #176	@ 0xb0
 8049d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049d3c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8049d3e:	2300      	movs	r3, #0
 8049d40:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8049d42:	2300      	movs	r3, #0
 8049d44:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8049d46:	68fb      	ldr	r3, [r7, #12]
 8049d48:	2b00      	cmp	r3, #0
 8049d4a:	d101      	bne.n	8049d50 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8049d4c:	2303      	movs	r3, #3
 8049d4e:	e0e8      	b.n	8049f22 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8049d50:	683b      	ldr	r3, [r7, #0]
 8049d52:	781b      	ldrb	r3, [r3, #0]
 8049d54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8049d58:	2b00      	cmp	r3, #0
 8049d5a:	d046      	beq.n	8049dea <USBD_HID_Setup+0xc6>
 8049d5c:	2b20      	cmp	r3, #32
 8049d5e:	f040 80d8 	bne.w	8049f12 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8049d62:	683b      	ldr	r3, [r7, #0]
 8049d64:	785b      	ldrb	r3, [r3, #1]
 8049d66:	3b02      	subs	r3, #2
 8049d68:	2b09      	cmp	r3, #9
 8049d6a:	d836      	bhi.n	8049dda <USBD_HID_Setup+0xb6>
 8049d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8049d74 <USBD_HID_Setup+0x50>)
 8049d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049d72:	bf00      	nop
 8049d74:	08049dcb 	.word	0x08049dcb
 8049d78:	08049dab 	.word	0x08049dab
 8049d7c:	08049ddb 	.word	0x08049ddb
 8049d80:	08049ddb 	.word	0x08049ddb
 8049d84:	08049ddb 	.word	0x08049ddb
 8049d88:	08049ddb 	.word	0x08049ddb
 8049d8c:	08049ddb 	.word	0x08049ddb
 8049d90:	08049ddb 	.word	0x08049ddb
 8049d94:	08049db9 	.word	0x08049db9
 8049d98:	08049d9d 	.word	0x08049d9d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8049d9c:	683b      	ldr	r3, [r7, #0]
 8049d9e:	885b      	ldrh	r3, [r3, #2]
 8049da0:	b2db      	uxtb	r3, r3
 8049da2:	461a      	mov	r2, r3
 8049da4:	68fb      	ldr	r3, [r7, #12]
 8049da6:	601a      	str	r2, [r3, #0]
          break;
 8049da8:	e01e      	b.n	8049de8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8049daa:	68fb      	ldr	r3, [r7, #12]
 8049dac:	2201      	movs	r2, #1
 8049dae:	4619      	mov	r1, r3
 8049db0:	6878      	ldr	r0, [r7, #4]
 8049db2:	f000 f933 	bl	804a01c <USBD_CtlSendData>
          break;
 8049db6:	e017      	b.n	8049de8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8049db8:	683b      	ldr	r3, [r7, #0]
 8049dba:	885b      	ldrh	r3, [r3, #2]
 8049dbc:	0a1b      	lsrs	r3, r3, #8
 8049dbe:	b29b      	uxth	r3, r3
 8049dc0:	b2db      	uxtb	r3, r3
 8049dc2:	461a      	mov	r2, r3
 8049dc4:	68fb      	ldr	r3, [r7, #12]
 8049dc6:	605a      	str	r2, [r3, #4]
          break;
 8049dc8:	e00e      	b.n	8049de8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8049dca:	68fb      	ldr	r3, [r7, #12]
 8049dcc:	3304      	adds	r3, #4
 8049dce:	2201      	movs	r2, #1
 8049dd0:	4619      	mov	r1, r3
 8049dd2:	6878      	ldr	r0, [r7, #4]
 8049dd4:	f000 f922 	bl	804a01c <USBD_CtlSendData>
          break;
 8049dd8:	e006      	b.n	8049de8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8049dda:	6839      	ldr	r1, [r7, #0]
 8049ddc:	6878      	ldr	r0, [r7, #4]
 8049dde:	f7ff fe76 	bl	8049ace <USBD_CtlError>
          ret = USBD_FAIL;
 8049de2:	2303      	movs	r3, #3
 8049de4:	75fb      	strb	r3, [r7, #23]
          break;
 8049de6:	bf00      	nop
      }
      break;
 8049de8:	e09a      	b.n	8049f20 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8049dea:	683b      	ldr	r3, [r7, #0]
 8049dec:	785b      	ldrb	r3, [r3, #1]
 8049dee:	2b0b      	cmp	r3, #11
 8049df0:	f200 8086 	bhi.w	8049f00 <USBD_HID_Setup+0x1dc>
 8049df4:	a201      	add	r2, pc, #4	@ (adr r2, 8049dfc <USBD_HID_Setup+0xd8>)
 8049df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049dfa:	bf00      	nop
 8049dfc:	08049e2d 	.word	0x08049e2d
 8049e00:	08049f0f 	.word	0x08049f0f
 8049e04:	08049f01 	.word	0x08049f01
 8049e08:	08049f01 	.word	0x08049f01
 8049e0c:	08049f01 	.word	0x08049f01
 8049e10:	08049f01 	.word	0x08049f01
 8049e14:	08049e57 	.word	0x08049e57
 8049e18:	08049f01 	.word	0x08049f01
 8049e1c:	08049f01 	.word	0x08049f01
 8049e20:	08049f01 	.word	0x08049f01
 8049e24:	08049eaf 	.word	0x08049eaf
 8049e28:	08049ed9 	.word	0x08049ed9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049e2c:	687b      	ldr	r3, [r7, #4]
 8049e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049e32:	b2db      	uxtb	r3, r3
 8049e34:	2b03      	cmp	r3, #3
 8049e36:	d107      	bne.n	8049e48 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8049e38:	f107 030a 	add.w	r3, r7, #10
 8049e3c:	2202      	movs	r2, #2
 8049e3e:	4619      	mov	r1, r3
 8049e40:	6878      	ldr	r0, [r7, #4]
 8049e42:	f000 f8eb 	bl	804a01c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8049e46:	e063      	b.n	8049f10 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8049e48:	6839      	ldr	r1, [r7, #0]
 8049e4a:	6878      	ldr	r0, [r7, #4]
 8049e4c:	f7ff fe3f 	bl	8049ace <USBD_CtlError>
            ret = USBD_FAIL;
 8049e50:	2303      	movs	r3, #3
 8049e52:	75fb      	strb	r3, [r7, #23]
          break;
 8049e54:	e05c      	b.n	8049f10 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8049e56:	683b      	ldr	r3, [r7, #0]
 8049e58:	885b      	ldrh	r3, [r3, #2]
 8049e5a:	0a1b      	lsrs	r3, r3, #8
 8049e5c:	b29b      	uxth	r3, r3
 8049e5e:	2b22      	cmp	r3, #34	@ 0x22
 8049e60:	d108      	bne.n	8049e74 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8049e62:	683b      	ldr	r3, [r7, #0]
 8049e64:	88db      	ldrh	r3, [r3, #6]
 8049e66:	2b4a      	cmp	r3, #74	@ 0x4a
 8049e68:	bf28      	it	cs
 8049e6a:	234a      	movcs	r3, #74	@ 0x4a
 8049e6c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8049e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8049f2c <USBD_HID_Setup+0x208>)
 8049e70:	613b      	str	r3, [r7, #16]
 8049e72:	e015      	b.n	8049ea0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8049e74:	683b      	ldr	r3, [r7, #0]
 8049e76:	885b      	ldrh	r3, [r3, #2]
 8049e78:	0a1b      	lsrs	r3, r3, #8
 8049e7a:	b29b      	uxth	r3, r3
 8049e7c:	2b21      	cmp	r3, #33	@ 0x21
 8049e7e:	d108      	bne.n	8049e92 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8049e80:	4b2b      	ldr	r3, [pc, #172]	@ (8049f30 <USBD_HID_Setup+0x20c>)
 8049e82:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8049e84:	683b      	ldr	r3, [r7, #0]
 8049e86:	88db      	ldrh	r3, [r3, #6]
 8049e88:	2b09      	cmp	r3, #9
 8049e8a:	bf28      	it	cs
 8049e8c:	2309      	movcs	r3, #9
 8049e8e:	82bb      	strh	r3, [r7, #20]
 8049e90:	e006      	b.n	8049ea0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8049e92:	6839      	ldr	r1, [r7, #0]
 8049e94:	6878      	ldr	r0, [r7, #4]
 8049e96:	f7ff fe1a 	bl	8049ace <USBD_CtlError>
            ret = USBD_FAIL;
 8049e9a:	2303      	movs	r3, #3
 8049e9c:	75fb      	strb	r3, [r7, #23]
            break;
 8049e9e:	e037      	b.n	8049f10 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8049ea0:	8abb      	ldrh	r3, [r7, #20]
 8049ea2:	461a      	mov	r2, r3
 8049ea4:	6939      	ldr	r1, [r7, #16]
 8049ea6:	6878      	ldr	r0, [r7, #4]
 8049ea8:	f000 f8b8 	bl	804a01c <USBD_CtlSendData>
          break;
 8049eac:	e030      	b.n	8049f10 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049eae:	687b      	ldr	r3, [r7, #4]
 8049eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049eb4:	b2db      	uxtb	r3, r3
 8049eb6:	2b03      	cmp	r3, #3
 8049eb8:	d107      	bne.n	8049eca <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8049eba:	68fb      	ldr	r3, [r7, #12]
 8049ebc:	3308      	adds	r3, #8
 8049ebe:	2201      	movs	r2, #1
 8049ec0:	4619      	mov	r1, r3
 8049ec2:	6878      	ldr	r0, [r7, #4]
 8049ec4:	f000 f8aa 	bl	804a01c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8049ec8:	e022      	b.n	8049f10 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8049eca:	6839      	ldr	r1, [r7, #0]
 8049ecc:	6878      	ldr	r0, [r7, #4]
 8049ece:	f7ff fdfe 	bl	8049ace <USBD_CtlError>
            ret = USBD_FAIL;
 8049ed2:	2303      	movs	r3, #3
 8049ed4:	75fb      	strb	r3, [r7, #23]
          break;
 8049ed6:	e01b      	b.n	8049f10 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049ed8:	687b      	ldr	r3, [r7, #4]
 8049eda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049ede:	b2db      	uxtb	r3, r3
 8049ee0:	2b03      	cmp	r3, #3
 8049ee2:	d106      	bne.n	8049ef2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8049ee4:	683b      	ldr	r3, [r7, #0]
 8049ee6:	885b      	ldrh	r3, [r3, #2]
 8049ee8:	b2db      	uxtb	r3, r3
 8049eea:	461a      	mov	r2, r3
 8049eec:	68fb      	ldr	r3, [r7, #12]
 8049eee:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8049ef0:	e00e      	b.n	8049f10 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8049ef2:	6839      	ldr	r1, [r7, #0]
 8049ef4:	6878      	ldr	r0, [r7, #4]
 8049ef6:	f7ff fdea 	bl	8049ace <USBD_CtlError>
            ret = USBD_FAIL;
 8049efa:	2303      	movs	r3, #3
 8049efc:	75fb      	strb	r3, [r7, #23]
          break;
 8049efe:	e007      	b.n	8049f10 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8049f00:	6839      	ldr	r1, [r7, #0]
 8049f02:	6878      	ldr	r0, [r7, #4]
 8049f04:	f7ff fde3 	bl	8049ace <USBD_CtlError>
          ret = USBD_FAIL;
 8049f08:	2303      	movs	r3, #3
 8049f0a:	75fb      	strb	r3, [r7, #23]
          break;
 8049f0c:	e000      	b.n	8049f10 <USBD_HID_Setup+0x1ec>
          break;
 8049f0e:	bf00      	nop
      }
      break;
 8049f10:	e006      	b.n	8049f20 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8049f12:	6839      	ldr	r1, [r7, #0]
 8049f14:	6878      	ldr	r0, [r7, #4]
 8049f16:	f7ff fdda 	bl	8049ace <USBD_CtlError>
      ret = USBD_FAIL;
 8049f1a:	2303      	movs	r3, #3
 8049f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8049f1e:	bf00      	nop
  }

  return (uint8_t)ret;
 8049f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8049f22:	4618      	mov	r0, r3
 8049f24:	3718      	adds	r7, #24
 8049f26:	46bd      	mov	sp, r7
 8049f28:	bd80      	pop	{r7, pc}
 8049f2a:	bf00      	nop
 8049f2c:	24000084 	.word	0x24000084
 8049f30:	2400006c 	.word	0x2400006c

08049f34 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8049f34:	b580      	push	{r7, lr}
 8049f36:	b084      	sub	sp, #16
 8049f38:	af00      	add	r7, sp, #0
 8049f3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8049f3c:	2181      	movs	r1, #129	@ 0x81
 8049f3e:	4809      	ldr	r0, [pc, #36]	@ (8049f64 <USBD_HID_GetFSCfgDesc+0x30>)
 8049f40:	f7fe ff64 	bl	8048e0c <USBD_GetEpDesc>
 8049f44:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8049f46:	68fb      	ldr	r3, [r7, #12]
 8049f48:	2b00      	cmp	r3, #0
 8049f4a:	d002      	beq.n	8049f52 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8049f4c:	68fb      	ldr	r3, [r7, #12]
 8049f4e:	220a      	movs	r2, #10
 8049f50:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8049f52:	687b      	ldr	r3, [r7, #4]
 8049f54:	2222      	movs	r2, #34	@ 0x22
 8049f56:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8049f58:	4b02      	ldr	r3, [pc, #8]	@ (8049f64 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8049f5a:	4618      	mov	r0, r3
 8049f5c:	3710      	adds	r7, #16
 8049f5e:	46bd      	mov	sp, r7
 8049f60:	bd80      	pop	{r7, pc}
 8049f62:	bf00      	nop
 8049f64:	24000048 	.word	0x24000048

08049f68 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8049f68:	b580      	push	{r7, lr}
 8049f6a:	b084      	sub	sp, #16
 8049f6c:	af00      	add	r7, sp, #0
 8049f6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8049f70:	2181      	movs	r1, #129	@ 0x81
 8049f72:	4809      	ldr	r0, [pc, #36]	@ (8049f98 <USBD_HID_GetHSCfgDesc+0x30>)
 8049f74:	f7fe ff4a 	bl	8048e0c <USBD_GetEpDesc>
 8049f78:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8049f7a:	68fb      	ldr	r3, [r7, #12]
 8049f7c:	2b00      	cmp	r3, #0
 8049f7e:	d002      	beq.n	8049f86 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8049f80:	68fb      	ldr	r3, [r7, #12]
 8049f82:	2207      	movs	r2, #7
 8049f84:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8049f86:	687b      	ldr	r3, [r7, #4]
 8049f88:	2222      	movs	r2, #34	@ 0x22
 8049f8a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8049f8c:	4b02      	ldr	r3, [pc, #8]	@ (8049f98 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8049f8e:	4618      	mov	r0, r3
 8049f90:	3710      	adds	r7, #16
 8049f92:	46bd      	mov	sp, r7
 8049f94:	bd80      	pop	{r7, pc}
 8049f96:	bf00      	nop
 8049f98:	24000048 	.word	0x24000048

08049f9c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8049f9c:	b580      	push	{r7, lr}
 8049f9e:	b084      	sub	sp, #16
 8049fa0:	af00      	add	r7, sp, #0
 8049fa2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8049fa4:	2181      	movs	r1, #129	@ 0x81
 8049fa6:	4809      	ldr	r0, [pc, #36]	@ (8049fcc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8049fa8:	f7fe ff30 	bl	8048e0c <USBD_GetEpDesc>
 8049fac:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8049fae:	68fb      	ldr	r3, [r7, #12]
 8049fb0:	2b00      	cmp	r3, #0
 8049fb2:	d002      	beq.n	8049fba <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8049fb4:	68fb      	ldr	r3, [r7, #12]
 8049fb6:	220a      	movs	r2, #10
 8049fb8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8049fba:	687b      	ldr	r3, [r7, #4]
 8049fbc:	2222      	movs	r2, #34	@ 0x22
 8049fbe:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8049fc0:	4b02      	ldr	r3, [pc, #8]	@ (8049fcc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8049fc2:	4618      	mov	r0, r3
 8049fc4:	3710      	adds	r7, #16
 8049fc6:	46bd      	mov	sp, r7
 8049fc8:	bd80      	pop	{r7, pc}
 8049fca:	bf00      	nop
 8049fcc:	24000048 	.word	0x24000048

08049fd0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8049fd0:	b480      	push	{r7}
 8049fd2:	b083      	sub	sp, #12
 8049fd4:	af00      	add	r7, sp, #0
 8049fd6:	6078      	str	r0, [r7, #4]
 8049fd8:	460b      	mov	r3, r1
 8049fda:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8049fdc:	687b      	ldr	r3, [r7, #4]
 8049fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049fe2:	687b      	ldr	r3, [r7, #4]
 8049fe4:	32b0      	adds	r2, #176	@ 0xb0
 8049fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049fea:	2200      	movs	r2, #0
 8049fec:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8049fee:	2300      	movs	r3, #0
}
 8049ff0:	4618      	mov	r0, r3
 8049ff2:	370c      	adds	r7, #12
 8049ff4:	46bd      	mov	sp, r7
 8049ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049ffa:	4770      	bx	lr

08049ffc <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8049ffc:	b480      	push	{r7}
 8049ffe:	b083      	sub	sp, #12
 804a000:	af00      	add	r7, sp, #0
 804a002:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 804a004:	687b      	ldr	r3, [r7, #4]
 804a006:	220a      	movs	r2, #10
 804a008:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 804a00a:	4b03      	ldr	r3, [pc, #12]	@ (804a018 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 804a00c:	4618      	mov	r0, r3
 804a00e:	370c      	adds	r7, #12
 804a010:	46bd      	mov	sp, r7
 804a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a016:	4770      	bx	lr
 804a018:	24000078 	.word	0x24000078

0804a01c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 804a01c:	b580      	push	{r7, lr}
 804a01e:	b084      	sub	sp, #16
 804a020:	af00      	add	r7, sp, #0
 804a022:	60f8      	str	r0, [r7, #12]
 804a024:	60b9      	str	r1, [r7, #8]
 804a026:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 804a028:	68fb      	ldr	r3, [r7, #12]
 804a02a:	2202      	movs	r2, #2
 804a02c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 804a030:	68fb      	ldr	r3, [r7, #12]
 804a032:	687a      	ldr	r2, [r7, #4]
 804a034:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 804a036:	68fb      	ldr	r3, [r7, #12]
 804a038:	687a      	ldr	r2, [r7, #4]
 804a03a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 804a03c:	687b      	ldr	r3, [r7, #4]
 804a03e:	68ba      	ldr	r2, [r7, #8]
 804a040:	2100      	movs	r1, #0
 804a042:	68f8      	ldr	r0, [r7, #12]
 804a044:	f000 fcd9 	bl	804a9fa <USBD_LL_Transmit>

  return USBD_OK;
 804a048:	2300      	movs	r3, #0
}
 804a04a:	4618      	mov	r0, r3
 804a04c:	3710      	adds	r7, #16
 804a04e:	46bd      	mov	sp, r7
 804a050:	bd80      	pop	{r7, pc}

0804a052 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 804a052:	b580      	push	{r7, lr}
 804a054:	b084      	sub	sp, #16
 804a056:	af00      	add	r7, sp, #0
 804a058:	60f8      	str	r0, [r7, #12]
 804a05a:	60b9      	str	r1, [r7, #8]
 804a05c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 804a05e:	687b      	ldr	r3, [r7, #4]
 804a060:	68ba      	ldr	r2, [r7, #8]
 804a062:	2100      	movs	r1, #0
 804a064:	68f8      	ldr	r0, [r7, #12]
 804a066:	f000 fcc8 	bl	804a9fa <USBD_LL_Transmit>

  return USBD_OK;
 804a06a:	2300      	movs	r3, #0
}
 804a06c:	4618      	mov	r0, r3
 804a06e:	3710      	adds	r7, #16
 804a070:	46bd      	mov	sp, r7
 804a072:	bd80      	pop	{r7, pc}

0804a074 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 804a074:	b580      	push	{r7, lr}
 804a076:	b084      	sub	sp, #16
 804a078:	af00      	add	r7, sp, #0
 804a07a:	60f8      	str	r0, [r7, #12]
 804a07c:	60b9      	str	r1, [r7, #8]
 804a07e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 804a080:	687b      	ldr	r3, [r7, #4]
 804a082:	68ba      	ldr	r2, [r7, #8]
 804a084:	2100      	movs	r1, #0
 804a086:	68f8      	ldr	r0, [r7, #12]
 804a088:	f000 fcd8 	bl	804aa3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 804a08c:	2300      	movs	r3, #0
}
 804a08e:	4618      	mov	r0, r3
 804a090:	3710      	adds	r7, #16
 804a092:	46bd      	mov	sp, r7
 804a094:	bd80      	pop	{r7, pc}

0804a096 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 804a096:	b580      	push	{r7, lr}
 804a098:	b082      	sub	sp, #8
 804a09a:	af00      	add	r7, sp, #0
 804a09c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 804a09e:	687b      	ldr	r3, [r7, #4]
 804a0a0:	2204      	movs	r2, #4
 804a0a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 804a0a6:	2300      	movs	r3, #0
 804a0a8:	2200      	movs	r2, #0
 804a0aa:	2100      	movs	r1, #0
 804a0ac:	6878      	ldr	r0, [r7, #4]
 804a0ae:	f000 fca4 	bl	804a9fa <USBD_LL_Transmit>

  return USBD_OK;
 804a0b2:	2300      	movs	r3, #0
}
 804a0b4:	4618      	mov	r0, r3
 804a0b6:	3708      	adds	r7, #8
 804a0b8:	46bd      	mov	sp, r7
 804a0ba:	bd80      	pop	{r7, pc}

0804a0bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 804a0bc:	b580      	push	{r7, lr}
 804a0be:	b082      	sub	sp, #8
 804a0c0:	af00      	add	r7, sp, #0
 804a0c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 804a0c4:	687b      	ldr	r3, [r7, #4]
 804a0c6:	2205      	movs	r2, #5
 804a0c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 804a0cc:	2300      	movs	r3, #0
 804a0ce:	2200      	movs	r2, #0
 804a0d0:	2100      	movs	r1, #0
 804a0d2:	6878      	ldr	r0, [r7, #4]
 804a0d4:	f000 fcb2 	bl	804aa3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 804a0d8:	2300      	movs	r3, #0
}
 804a0da:	4618      	mov	r0, r3
 804a0dc:	3708      	adds	r7, #8
 804a0de:	46bd      	mov	sp, r7
 804a0e0:	bd80      	pop	{r7, pc}
	...

0804a0e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 804a0e4:	b580      	push	{r7, lr}
 804a0e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 804a0e8:	2201      	movs	r2, #1
 804a0ea:	490f      	ldr	r1, [pc, #60]	@ (804a128 <MX_USB_DEVICE_Init+0x44>)
 804a0ec:	480f      	ldr	r0, [pc, #60]	@ (804a12c <MX_USB_DEVICE_Init+0x48>)
 804a0ee:	f7fe fabe 	bl	804866e <USBD_Init>
 804a0f2:	4603      	mov	r3, r0
 804a0f4:	2b00      	cmp	r3, #0
 804a0f6:	d001      	beq.n	804a0fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 804a0f8:	f7f6 fe02 	bl	8040d00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 804a0fc:	490c      	ldr	r1, [pc, #48]	@ (804a130 <MX_USB_DEVICE_Init+0x4c>)
 804a0fe:	480b      	ldr	r0, [pc, #44]	@ (804a12c <MX_USB_DEVICE_Init+0x48>)
 804a100:	f7fe fae5 	bl	80486ce <USBD_RegisterClass>
 804a104:	4603      	mov	r3, r0
 804a106:	2b00      	cmp	r3, #0
 804a108:	d001      	beq.n	804a10e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 804a10a:	f7f6 fdf9 	bl	8040d00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 804a10e:	4807      	ldr	r0, [pc, #28]	@ (804a12c <MX_USB_DEVICE_Init+0x48>)
 804a110:	f7fe fb13 	bl	804873a <USBD_Start>
 804a114:	4603      	mov	r3, r0
 804a116:	2b00      	cmp	r3, #0
 804a118:	d001      	beq.n	804a11e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 804a11a:	f7f6 fdf1 	bl	8040d00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 804a11e:	f7f8 ffa7 	bl	8043070 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 804a122:	bf00      	nop
 804a124:	bd80      	pop	{r7, pc}
 804a126:	bf00      	nop
 804a128:	240000d0 	.word	0x240000d0
 804a12c:	24000274 	.word	0x24000274
 804a130:	24000010 	.word	0x24000010

0804a134 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a134:	b480      	push	{r7}
 804a136:	b083      	sub	sp, #12
 804a138:	af00      	add	r7, sp, #0
 804a13a:	4603      	mov	r3, r0
 804a13c:	6039      	str	r1, [r7, #0]
 804a13e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 804a140:	683b      	ldr	r3, [r7, #0]
 804a142:	2212      	movs	r2, #18
 804a144:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 804a146:	4b03      	ldr	r3, [pc, #12]	@ (804a154 <USBD_HS_DeviceDescriptor+0x20>)
}
 804a148:	4618      	mov	r0, r3
 804a14a:	370c      	adds	r7, #12
 804a14c:	46bd      	mov	sp, r7
 804a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a152:	4770      	bx	lr
 804a154:	240000f0 	.word	0x240000f0

0804a158 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a158:	b480      	push	{r7}
 804a15a:	b083      	sub	sp, #12
 804a15c:	af00      	add	r7, sp, #0
 804a15e:	4603      	mov	r3, r0
 804a160:	6039      	str	r1, [r7, #0]
 804a162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 804a164:	683b      	ldr	r3, [r7, #0]
 804a166:	2204      	movs	r2, #4
 804a168:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 804a16a:	4b03      	ldr	r3, [pc, #12]	@ (804a178 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 804a16c:	4618      	mov	r0, r3
 804a16e:	370c      	adds	r7, #12
 804a170:	46bd      	mov	sp, r7
 804a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a176:	4770      	bx	lr
 804a178:	24000104 	.word	0x24000104

0804a17c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a17c:	b580      	push	{r7, lr}
 804a17e:	b082      	sub	sp, #8
 804a180:	af00      	add	r7, sp, #0
 804a182:	4603      	mov	r3, r0
 804a184:	6039      	str	r1, [r7, #0]
 804a186:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 804a188:	79fb      	ldrb	r3, [r7, #7]
 804a18a:	2b00      	cmp	r3, #0
 804a18c:	d105      	bne.n	804a19a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 804a18e:	683a      	ldr	r2, [r7, #0]
 804a190:	4907      	ldr	r1, [pc, #28]	@ (804a1b0 <USBD_HS_ProductStrDescriptor+0x34>)
 804a192:	4808      	ldr	r0, [pc, #32]	@ (804a1b4 <USBD_HS_ProductStrDescriptor+0x38>)
 804a194:	f7ff fcac 	bl	8049af0 <USBD_GetString>
 804a198:	e004      	b.n	804a1a4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 804a19a:	683a      	ldr	r2, [r7, #0]
 804a19c:	4904      	ldr	r1, [pc, #16]	@ (804a1b0 <USBD_HS_ProductStrDescriptor+0x34>)
 804a19e:	4805      	ldr	r0, [pc, #20]	@ (804a1b4 <USBD_HS_ProductStrDescriptor+0x38>)
 804a1a0:	f7ff fca6 	bl	8049af0 <USBD_GetString>
  }
  return USBD_StrDesc;
 804a1a4:	4b02      	ldr	r3, [pc, #8]	@ (804a1b0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 804a1a6:	4618      	mov	r0, r3
 804a1a8:	3708      	adds	r7, #8
 804a1aa:	46bd      	mov	sp, r7
 804a1ac:	bd80      	pop	{r7, pc}
 804a1ae:	bf00      	nop
 804a1b0:	24000550 	.word	0x24000550
 804a1b4:	0804b9e8 	.word	0x0804b9e8

0804a1b8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a1b8:	b580      	push	{r7, lr}
 804a1ba:	b082      	sub	sp, #8
 804a1bc:	af00      	add	r7, sp, #0
 804a1be:	4603      	mov	r3, r0
 804a1c0:	6039      	str	r1, [r7, #0]
 804a1c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 804a1c4:	683a      	ldr	r2, [r7, #0]
 804a1c6:	4904      	ldr	r1, [pc, #16]	@ (804a1d8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 804a1c8:	4804      	ldr	r0, [pc, #16]	@ (804a1dc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 804a1ca:	f7ff fc91 	bl	8049af0 <USBD_GetString>
  return USBD_StrDesc;
 804a1ce:	4b02      	ldr	r3, [pc, #8]	@ (804a1d8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 804a1d0:	4618      	mov	r0, r3
 804a1d2:	3708      	adds	r7, #8
 804a1d4:	46bd      	mov	sp, r7
 804a1d6:	bd80      	pop	{r7, pc}
 804a1d8:	24000550 	.word	0x24000550
 804a1dc:	0804ba00 	.word	0x0804ba00

0804a1e0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a1e0:	b580      	push	{r7, lr}
 804a1e2:	b082      	sub	sp, #8
 804a1e4:	af00      	add	r7, sp, #0
 804a1e6:	4603      	mov	r3, r0
 804a1e8:	6039      	str	r1, [r7, #0]
 804a1ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 804a1ec:	683b      	ldr	r3, [r7, #0]
 804a1ee:	221a      	movs	r2, #26
 804a1f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 804a1f2:	f000 f843 	bl	804a27c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 804a1f6:	4b02      	ldr	r3, [pc, #8]	@ (804a200 <USBD_HS_SerialStrDescriptor+0x20>)
}
 804a1f8:	4618      	mov	r0, r3
 804a1fa:	3708      	adds	r7, #8
 804a1fc:	46bd      	mov	sp, r7
 804a1fe:	bd80      	pop	{r7, pc}
 804a200:	24000108 	.word	0x24000108

0804a204 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a204:	b580      	push	{r7, lr}
 804a206:	b082      	sub	sp, #8
 804a208:	af00      	add	r7, sp, #0
 804a20a:	4603      	mov	r3, r0
 804a20c:	6039      	str	r1, [r7, #0]
 804a20e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 804a210:	79fb      	ldrb	r3, [r7, #7]
 804a212:	2b00      	cmp	r3, #0
 804a214:	d105      	bne.n	804a222 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 804a216:	683a      	ldr	r2, [r7, #0]
 804a218:	4907      	ldr	r1, [pc, #28]	@ (804a238 <USBD_HS_ConfigStrDescriptor+0x34>)
 804a21a:	4808      	ldr	r0, [pc, #32]	@ (804a23c <USBD_HS_ConfigStrDescriptor+0x38>)
 804a21c:	f7ff fc68 	bl	8049af0 <USBD_GetString>
 804a220:	e004      	b.n	804a22c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 804a222:	683a      	ldr	r2, [r7, #0]
 804a224:	4904      	ldr	r1, [pc, #16]	@ (804a238 <USBD_HS_ConfigStrDescriptor+0x34>)
 804a226:	4805      	ldr	r0, [pc, #20]	@ (804a23c <USBD_HS_ConfigStrDescriptor+0x38>)
 804a228:	f7ff fc62 	bl	8049af0 <USBD_GetString>
  }
  return USBD_StrDesc;
 804a22c:	4b02      	ldr	r3, [pc, #8]	@ (804a238 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 804a22e:	4618      	mov	r0, r3
 804a230:	3708      	adds	r7, #8
 804a232:	46bd      	mov	sp, r7
 804a234:	bd80      	pop	{r7, pc}
 804a236:	bf00      	nop
 804a238:	24000550 	.word	0x24000550
 804a23c:	0804ba14 	.word	0x0804ba14

0804a240 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a240:	b580      	push	{r7, lr}
 804a242:	b082      	sub	sp, #8
 804a244:	af00      	add	r7, sp, #0
 804a246:	4603      	mov	r3, r0
 804a248:	6039      	str	r1, [r7, #0]
 804a24a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 804a24c:	79fb      	ldrb	r3, [r7, #7]
 804a24e:	2b00      	cmp	r3, #0
 804a250:	d105      	bne.n	804a25e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 804a252:	683a      	ldr	r2, [r7, #0]
 804a254:	4907      	ldr	r1, [pc, #28]	@ (804a274 <USBD_HS_InterfaceStrDescriptor+0x34>)
 804a256:	4808      	ldr	r0, [pc, #32]	@ (804a278 <USBD_HS_InterfaceStrDescriptor+0x38>)
 804a258:	f7ff fc4a 	bl	8049af0 <USBD_GetString>
 804a25c:	e004      	b.n	804a268 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 804a25e:	683a      	ldr	r2, [r7, #0]
 804a260:	4904      	ldr	r1, [pc, #16]	@ (804a274 <USBD_HS_InterfaceStrDescriptor+0x34>)
 804a262:	4805      	ldr	r0, [pc, #20]	@ (804a278 <USBD_HS_InterfaceStrDescriptor+0x38>)
 804a264:	f7ff fc44 	bl	8049af0 <USBD_GetString>
  }
  return USBD_StrDesc;
 804a268:	4b02      	ldr	r3, [pc, #8]	@ (804a274 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 804a26a:	4618      	mov	r0, r3
 804a26c:	3708      	adds	r7, #8
 804a26e:	46bd      	mov	sp, r7
 804a270:	bd80      	pop	{r7, pc}
 804a272:	bf00      	nop
 804a274:	24000550 	.word	0x24000550
 804a278:	0804ba20 	.word	0x0804ba20

0804a27c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 804a27c:	b580      	push	{r7, lr}
 804a27e:	b084      	sub	sp, #16
 804a280:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 804a282:	4b0f      	ldr	r3, [pc, #60]	@ (804a2c0 <Get_SerialNum+0x44>)
 804a284:	681b      	ldr	r3, [r3, #0]
 804a286:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 804a288:	4b0e      	ldr	r3, [pc, #56]	@ (804a2c4 <Get_SerialNum+0x48>)
 804a28a:	681b      	ldr	r3, [r3, #0]
 804a28c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 804a28e:	4b0e      	ldr	r3, [pc, #56]	@ (804a2c8 <Get_SerialNum+0x4c>)
 804a290:	681b      	ldr	r3, [r3, #0]
 804a292:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 804a294:	68fa      	ldr	r2, [r7, #12]
 804a296:	687b      	ldr	r3, [r7, #4]
 804a298:	4413      	add	r3, r2
 804a29a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 804a29c:	68fb      	ldr	r3, [r7, #12]
 804a29e:	2b00      	cmp	r3, #0
 804a2a0:	d009      	beq.n	804a2b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 804a2a2:	2208      	movs	r2, #8
 804a2a4:	4909      	ldr	r1, [pc, #36]	@ (804a2cc <Get_SerialNum+0x50>)
 804a2a6:	68f8      	ldr	r0, [r7, #12]
 804a2a8:	f000 f814 	bl	804a2d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 804a2ac:	2204      	movs	r2, #4
 804a2ae:	4908      	ldr	r1, [pc, #32]	@ (804a2d0 <Get_SerialNum+0x54>)
 804a2b0:	68b8      	ldr	r0, [r7, #8]
 804a2b2:	f000 f80f 	bl	804a2d4 <IntToUnicode>
  }
}
 804a2b6:	bf00      	nop
 804a2b8:	3710      	adds	r7, #16
 804a2ba:	46bd      	mov	sp, r7
 804a2bc:	bd80      	pop	{r7, pc}
 804a2be:	bf00      	nop
 804a2c0:	1ff1e800 	.word	0x1ff1e800
 804a2c4:	1ff1e804 	.word	0x1ff1e804
 804a2c8:	1ff1e808 	.word	0x1ff1e808
 804a2cc:	2400010a 	.word	0x2400010a
 804a2d0:	2400011a 	.word	0x2400011a

0804a2d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 804a2d4:	b480      	push	{r7}
 804a2d6:	b087      	sub	sp, #28
 804a2d8:	af00      	add	r7, sp, #0
 804a2da:	60f8      	str	r0, [r7, #12]
 804a2dc:	60b9      	str	r1, [r7, #8]
 804a2de:	4613      	mov	r3, r2
 804a2e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 804a2e2:	2300      	movs	r3, #0
 804a2e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 804a2e6:	2300      	movs	r3, #0
 804a2e8:	75fb      	strb	r3, [r7, #23]
 804a2ea:	e027      	b.n	804a33c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 804a2ec:	68fb      	ldr	r3, [r7, #12]
 804a2ee:	0f1b      	lsrs	r3, r3, #28
 804a2f0:	2b09      	cmp	r3, #9
 804a2f2:	d80b      	bhi.n	804a30c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 804a2f4:	68fb      	ldr	r3, [r7, #12]
 804a2f6:	0f1b      	lsrs	r3, r3, #28
 804a2f8:	b2da      	uxtb	r2, r3
 804a2fa:	7dfb      	ldrb	r3, [r7, #23]
 804a2fc:	005b      	lsls	r3, r3, #1
 804a2fe:	4619      	mov	r1, r3
 804a300:	68bb      	ldr	r3, [r7, #8]
 804a302:	440b      	add	r3, r1
 804a304:	3230      	adds	r2, #48	@ 0x30
 804a306:	b2d2      	uxtb	r2, r2
 804a308:	701a      	strb	r2, [r3, #0]
 804a30a:	e00a      	b.n	804a322 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 804a30c:	68fb      	ldr	r3, [r7, #12]
 804a30e:	0f1b      	lsrs	r3, r3, #28
 804a310:	b2da      	uxtb	r2, r3
 804a312:	7dfb      	ldrb	r3, [r7, #23]
 804a314:	005b      	lsls	r3, r3, #1
 804a316:	4619      	mov	r1, r3
 804a318:	68bb      	ldr	r3, [r7, #8]
 804a31a:	440b      	add	r3, r1
 804a31c:	3237      	adds	r2, #55	@ 0x37
 804a31e:	b2d2      	uxtb	r2, r2
 804a320:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 804a322:	68fb      	ldr	r3, [r7, #12]
 804a324:	011b      	lsls	r3, r3, #4
 804a326:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 804a328:	7dfb      	ldrb	r3, [r7, #23]
 804a32a:	005b      	lsls	r3, r3, #1
 804a32c:	3301      	adds	r3, #1
 804a32e:	68ba      	ldr	r2, [r7, #8]
 804a330:	4413      	add	r3, r2
 804a332:	2200      	movs	r2, #0
 804a334:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 804a336:	7dfb      	ldrb	r3, [r7, #23]
 804a338:	3301      	adds	r3, #1
 804a33a:	75fb      	strb	r3, [r7, #23]
 804a33c:	7dfa      	ldrb	r2, [r7, #23]
 804a33e:	79fb      	ldrb	r3, [r7, #7]
 804a340:	429a      	cmp	r2, r3
 804a342:	d3d3      	bcc.n	804a2ec <IntToUnicode+0x18>
  }
}
 804a344:	bf00      	nop
 804a346:	bf00      	nop
 804a348:	371c      	adds	r7, #28
 804a34a:	46bd      	mov	sp, r7
 804a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a350:	4770      	bx	lr
	...

0804a354 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 804a354:	b580      	push	{r7, lr}
 804a356:	b0c2      	sub	sp, #264	@ 0x108
 804a358:	af00      	add	r7, sp, #0
 804a35a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 804a35e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 804a362:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804a364:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804a368:	2200      	movs	r2, #0
 804a36a:	601a      	str	r2, [r3, #0]
 804a36c:	605a      	str	r2, [r3, #4]
 804a36e:	609a      	str	r2, [r3, #8]
 804a370:	60da      	str	r2, [r3, #12]
 804a372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 804a374:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 804a378:	22c8      	movs	r2, #200	@ 0xc8
 804a37a:	2100      	movs	r1, #0
 804a37c:	4618      	mov	r0, r3
 804a37e:	f000 fcda 	bl	804ad36 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 804a382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 804a386:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 804a38a:	681b      	ldr	r3, [r3, #0]
 804a38c:	681b      	ldr	r3, [r3, #0]
 804a38e:	4a7d      	ldr	r2, [pc, #500]	@ (804a584 <HAL_PCD_MspInit+0x230>)
 804a390:	4293      	cmp	r3, r2
 804a392:	f040 80f2 	bne.w	804a57a <HAL_PCD_MspInit+0x226>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 804a396:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 804a39a:	f04f 0300 	mov.w	r3, #0
 804a39e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 804a3a2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 804a3a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804a3aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 804a3ae:	4618      	mov	r0, r3
 804a3b0:	f7f9 febe 	bl	8044130 <HAL_RCCEx_PeriphCLKConfig>
 804a3b4:	4603      	mov	r3, r0
 804a3b6:	2b00      	cmp	r3, #0
 804a3b8:	d001      	beq.n	804a3be <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 804a3ba:	f7f6 fca1 	bl	8040d00 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 804a3be:	f7f8 fe57 	bl	8043070 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 804a3c2:	4b71      	ldr	r3, [pc, #452]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a3c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a3c8:	4a6f      	ldr	r2, [pc, #444]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a3ca:	f043 0302 	orr.w	r3, r3, #2
 804a3ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804a3d2:	4b6d      	ldr	r3, [pc, #436]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a3d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a3d8:	f003 0302 	and.w	r3, r3, #2
 804a3dc:	627b      	str	r3, [r7, #36]	@ 0x24
 804a3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 804a3e0:	4b69      	ldr	r3, [pc, #420]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a3e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a3e6:	4a68      	ldr	r2, [pc, #416]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a3e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 804a3ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804a3f0:	4b65      	ldr	r3, [pc, #404]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a3f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a3f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804a3fa:	623b      	str	r3, [r7, #32]
 804a3fc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804a3fe:	4b62      	ldr	r3, [pc, #392]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a404:	4a60      	ldr	r2, [pc, #384]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a406:	f043 0304 	orr.w	r3, r3, #4
 804a40a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804a40e:	4b5e      	ldr	r3, [pc, #376]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a414:	f003 0304 	and.w	r3, r3, #4
 804a418:	61fb      	str	r3, [r7, #28]
 804a41a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 804a41c:	4b5a      	ldr	r3, [pc, #360]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a41e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a422:	4a59      	ldr	r2, [pc, #356]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 804a428:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804a42c:	4b56      	ldr	r3, [pc, #344]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a42e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 804a436:	61bb      	str	r3, [r7, #24]
 804a438:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 804a43a:	4b53      	ldr	r3, [pc, #332]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a43c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a440:	4a51      	ldr	r2, [pc, #324]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a442:	f043 0301 	orr.w	r3, r3, #1
 804a446:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804a44a:	4b4f      	ldr	r3, [pc, #316]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a44c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a450:	f003 0301 	and.w	r3, r3, #1
 804a454:	617b      	str	r3, [r7, #20]
 804a456:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 804a458:	f643 4323 	movw	r3, #15395	@ 0x3c23
 804a45c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804a460:	2302      	movs	r3, #2
 804a462:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804a466:	2300      	movs	r3, #0
 804a468:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804a46c:	2302      	movs	r3, #2
 804a46e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804a472:	230a      	movs	r3, #10
 804a474:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804a478:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804a47c:	4619      	mov	r1, r3
 804a47e:	4843      	ldr	r0, [pc, #268]	@ (804a58c <HAL_PCD_MspInit+0x238>)
 804a480:	f7f7 f8e8 	bl	8041654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 804a484:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 804a488:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804a48c:	2302      	movs	r3, #2
 804a48e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804a492:	2300      	movs	r3, #0
 804a494:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804a498:	2302      	movs	r3, #2
 804a49a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804a49e:	230a      	movs	r3, #10
 804a4a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 804a4a4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804a4a8:	4619      	mov	r1, r3
 804a4aa:	4839      	ldr	r0, [pc, #228]	@ (804a590 <HAL_PCD_MspInit+0x23c>)
 804a4ac:	f7f7 f8d2 	bl	8041654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 804a4b0:	2301      	movs	r3, #1
 804a4b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804a4b6:	2302      	movs	r3, #2
 804a4b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804a4bc:	2300      	movs	r3, #0
 804a4be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804a4c2:	2302      	movs	r3, #2
 804a4c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804a4c8:	230a      	movs	r3, #10
 804a4ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 804a4ce:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804a4d2:	4619      	mov	r1, r3
 804a4d4:	482f      	ldr	r0, [pc, #188]	@ (804a594 <HAL_PCD_MspInit+0x240>)
 804a4d6:	f7f7 f8bd 	bl	8041654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 804a4da:	2310      	movs	r3, #16
 804a4dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804a4e0:	2302      	movs	r3, #2
 804a4e2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804a4e6:	2300      	movs	r3, #0
 804a4e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804a4ec:	2302      	movs	r3, #2
 804a4ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804a4f2:	230a      	movs	r3, #10
 804a4f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 804a4f8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804a4fc:	4619      	mov	r1, r3
 804a4fe:	4826      	ldr	r0, [pc, #152]	@ (804a598 <HAL_PCD_MspInit+0x244>)
 804a500:	f7f7 f8a8 	bl	8041654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 804a504:	2328      	movs	r3, #40	@ 0x28
 804a506:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804a50a:	2302      	movs	r3, #2
 804a50c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804a510:	2300      	movs	r3, #0
 804a512:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804a516:	2302      	movs	r3, #2
 804a518:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804a51c:	230a      	movs	r3, #10
 804a51e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804a522:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804a526:	4619      	mov	r1, r3
 804a528:	481c      	ldr	r0, [pc, #112]	@ (804a59c <HAL_PCD_MspInit+0x248>)
 804a52a:	f7f7 f893 	bl	8041654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 804a52e:	4b16      	ldr	r3, [pc, #88]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a530:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804a534:	4a14      	ldr	r2, [pc, #80]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a536:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 804a53a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 804a53e:	4b12      	ldr	r3, [pc, #72]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a540:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804a544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804a548:	613b      	str	r3, [r7, #16]
 804a54a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 804a54c:	4b0e      	ldr	r3, [pc, #56]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a54e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804a552:	4a0d      	ldr	r2, [pc, #52]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a554:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 804a558:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 804a55c:	4b0a      	ldr	r3, [pc, #40]	@ (804a588 <HAL_PCD_MspInit+0x234>)
 804a55e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804a562:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 804a566:	60fb      	str	r3, [r7, #12]
 804a568:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 804a56a:	2200      	movs	r2, #0
 804a56c:	2100      	movs	r1, #0
 804a56e:	204d      	movs	r0, #77	@ 0x4d
 804a570:	f7f6 ff49 	bl	8041406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 804a574:	204d      	movs	r0, #77	@ 0x4d
 804a576:	f7f6 ff60 	bl	804143a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 804a57a:	bf00      	nop
 804a57c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 804a580:	46bd      	mov	sp, r7
 804a582:	bd80      	pop	{r7, pc}
 804a584:	40040000 	.word	0x40040000
 804a588:	58024400 	.word	0x58024400
 804a58c:	58020400 	.word	0x58020400
 804a590:	58022000 	.word	0x58022000
 804a594:	58020800 	.word	0x58020800
 804a598:	58021c00 	.word	0x58021c00
 804a59c:	58020000 	.word	0x58020000

0804a5a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a5a0:	b580      	push	{r7, lr}
 804a5a2:	b082      	sub	sp, #8
 804a5a4:	af00      	add	r7, sp, #0
 804a5a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 804a5a8:	687b      	ldr	r3, [r7, #4]
 804a5aa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 804a5ae:	687b      	ldr	r3, [r7, #4]
 804a5b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 804a5b4:	4619      	mov	r1, r3
 804a5b6:	4610      	mov	r0, r2
 804a5b8:	f7fe f90c 	bl	80487d4 <USBD_LL_SetupStage>
}
 804a5bc:	bf00      	nop
 804a5be:	3708      	adds	r7, #8
 804a5c0:	46bd      	mov	sp, r7
 804a5c2:	bd80      	pop	{r7, pc}

0804a5c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a5c4:	b580      	push	{r7, lr}
 804a5c6:	b082      	sub	sp, #8
 804a5c8:	af00      	add	r7, sp, #0
 804a5ca:	6078      	str	r0, [r7, #4]
 804a5cc:	460b      	mov	r3, r1
 804a5ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 804a5d0:	687b      	ldr	r3, [r7, #4]
 804a5d2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 804a5d6:	78fa      	ldrb	r2, [r7, #3]
 804a5d8:	6879      	ldr	r1, [r7, #4]
 804a5da:	4613      	mov	r3, r2
 804a5dc:	00db      	lsls	r3, r3, #3
 804a5de:	4413      	add	r3, r2
 804a5e0:	009b      	lsls	r3, r3, #2
 804a5e2:	440b      	add	r3, r1
 804a5e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 804a5e8:	681a      	ldr	r2, [r3, #0]
 804a5ea:	78fb      	ldrb	r3, [r7, #3]
 804a5ec:	4619      	mov	r1, r3
 804a5ee:	f7fe f946 	bl	804887e <USBD_LL_DataOutStage>
}
 804a5f2:	bf00      	nop
 804a5f4:	3708      	adds	r7, #8
 804a5f6:	46bd      	mov	sp, r7
 804a5f8:	bd80      	pop	{r7, pc}

0804a5fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a5fa:	b580      	push	{r7, lr}
 804a5fc:	b082      	sub	sp, #8
 804a5fe:	af00      	add	r7, sp, #0
 804a600:	6078      	str	r0, [r7, #4]
 804a602:	460b      	mov	r3, r1
 804a604:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 804a606:	687b      	ldr	r3, [r7, #4]
 804a608:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 804a60c:	78fa      	ldrb	r2, [r7, #3]
 804a60e:	6879      	ldr	r1, [r7, #4]
 804a610:	4613      	mov	r3, r2
 804a612:	00db      	lsls	r3, r3, #3
 804a614:	4413      	add	r3, r2
 804a616:	009b      	lsls	r3, r3, #2
 804a618:	440b      	add	r3, r1
 804a61a:	3320      	adds	r3, #32
 804a61c:	681a      	ldr	r2, [r3, #0]
 804a61e:	78fb      	ldrb	r3, [r7, #3]
 804a620:	4619      	mov	r1, r3
 804a622:	f7fe f9df 	bl	80489e4 <USBD_LL_DataInStage>
}
 804a626:	bf00      	nop
 804a628:	3708      	adds	r7, #8
 804a62a:	46bd      	mov	sp, r7
 804a62c:	bd80      	pop	{r7, pc}

0804a62e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a62e:	b580      	push	{r7, lr}
 804a630:	b082      	sub	sp, #8
 804a632:	af00      	add	r7, sp, #0
 804a634:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 804a636:	687b      	ldr	r3, [r7, #4]
 804a638:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a63c:	4618      	mov	r0, r3
 804a63e:	f7fe fb19 	bl	8048c74 <USBD_LL_SOF>
}
 804a642:	bf00      	nop
 804a644:	3708      	adds	r7, #8
 804a646:	46bd      	mov	sp, r7
 804a648:	bd80      	pop	{r7, pc}

0804a64a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a64a:	b580      	push	{r7, lr}
 804a64c:	b084      	sub	sp, #16
 804a64e:	af00      	add	r7, sp, #0
 804a650:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 804a652:	2301      	movs	r3, #1
 804a654:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 804a656:	687b      	ldr	r3, [r7, #4]
 804a658:	79db      	ldrb	r3, [r3, #7]
 804a65a:	2b00      	cmp	r3, #0
 804a65c:	d102      	bne.n	804a664 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 804a65e:	2300      	movs	r3, #0
 804a660:	73fb      	strb	r3, [r7, #15]
 804a662:	e008      	b.n	804a676 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 804a664:	687b      	ldr	r3, [r7, #4]
 804a666:	79db      	ldrb	r3, [r3, #7]
 804a668:	2b02      	cmp	r3, #2
 804a66a:	d102      	bne.n	804a672 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 804a66c:	2301      	movs	r3, #1
 804a66e:	73fb      	strb	r3, [r7, #15]
 804a670:	e001      	b.n	804a676 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 804a672:	f7f6 fb45 	bl	8040d00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 804a676:	687b      	ldr	r3, [r7, #4]
 804a678:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a67c:	7bfa      	ldrb	r2, [r7, #15]
 804a67e:	4611      	mov	r1, r2
 804a680:	4618      	mov	r0, r3
 804a682:	f7fe fab3 	bl	8048bec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 804a686:	687b      	ldr	r3, [r7, #4]
 804a688:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a68c:	4618      	mov	r0, r3
 804a68e:	f7fe fa5b 	bl	8048b48 <USBD_LL_Reset>
}
 804a692:	bf00      	nop
 804a694:	3710      	adds	r7, #16
 804a696:	46bd      	mov	sp, r7
 804a698:	bd80      	pop	{r7, pc}
	...

0804a69c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a69c:	b580      	push	{r7, lr}
 804a69e:	b082      	sub	sp, #8
 804a6a0:	af00      	add	r7, sp, #0
 804a6a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 804a6a4:	687b      	ldr	r3, [r7, #4]
 804a6a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a6aa:	4618      	mov	r0, r3
 804a6ac:	f7fe faae 	bl	8048c0c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 804a6b0:	687b      	ldr	r3, [r7, #4]
 804a6b2:	681b      	ldr	r3, [r3, #0]
 804a6b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 804a6b8:	681b      	ldr	r3, [r3, #0]
 804a6ba:	687a      	ldr	r2, [r7, #4]
 804a6bc:	6812      	ldr	r2, [r2, #0]
 804a6be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 804a6c2:	f043 0301 	orr.w	r3, r3, #1
 804a6c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 804a6c8:	687b      	ldr	r3, [r7, #4]
 804a6ca:	7adb      	ldrb	r3, [r3, #11]
 804a6cc:	2b00      	cmp	r3, #0
 804a6ce:	d005      	beq.n	804a6dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 804a6d0:	4b04      	ldr	r3, [pc, #16]	@ (804a6e4 <HAL_PCD_SuspendCallback+0x48>)
 804a6d2:	691b      	ldr	r3, [r3, #16]
 804a6d4:	4a03      	ldr	r2, [pc, #12]	@ (804a6e4 <HAL_PCD_SuspendCallback+0x48>)
 804a6d6:	f043 0306 	orr.w	r3, r3, #6
 804a6da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 804a6dc:	bf00      	nop
 804a6de:	3708      	adds	r7, #8
 804a6e0:	46bd      	mov	sp, r7
 804a6e2:	bd80      	pop	{r7, pc}
 804a6e4:	e000ed00 	.word	0xe000ed00

0804a6e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a6e8:	b580      	push	{r7, lr}
 804a6ea:	b082      	sub	sp, #8
 804a6ec:	af00      	add	r7, sp, #0
 804a6ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 804a6f0:	687b      	ldr	r3, [r7, #4]
 804a6f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a6f6:	4618      	mov	r0, r3
 804a6f8:	f7fe faa4 	bl	8048c44 <USBD_LL_Resume>
}
 804a6fc:	bf00      	nop
 804a6fe:	3708      	adds	r7, #8
 804a700:	46bd      	mov	sp, r7
 804a702:	bd80      	pop	{r7, pc}

0804a704 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a704:	b580      	push	{r7, lr}
 804a706:	b082      	sub	sp, #8
 804a708:	af00      	add	r7, sp, #0
 804a70a:	6078      	str	r0, [r7, #4]
 804a70c:	460b      	mov	r3, r1
 804a70e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 804a710:	687b      	ldr	r3, [r7, #4]
 804a712:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a716:	78fa      	ldrb	r2, [r7, #3]
 804a718:	4611      	mov	r1, r2
 804a71a:	4618      	mov	r0, r3
 804a71c:	f7fe fafc 	bl	8048d18 <USBD_LL_IsoOUTIncomplete>
}
 804a720:	bf00      	nop
 804a722:	3708      	adds	r7, #8
 804a724:	46bd      	mov	sp, r7
 804a726:	bd80      	pop	{r7, pc}

0804a728 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a728:	b580      	push	{r7, lr}
 804a72a:	b082      	sub	sp, #8
 804a72c:	af00      	add	r7, sp, #0
 804a72e:	6078      	str	r0, [r7, #4]
 804a730:	460b      	mov	r3, r1
 804a732:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 804a734:	687b      	ldr	r3, [r7, #4]
 804a736:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a73a:	78fa      	ldrb	r2, [r7, #3]
 804a73c:	4611      	mov	r1, r2
 804a73e:	4618      	mov	r0, r3
 804a740:	f7fe fab8 	bl	8048cb4 <USBD_LL_IsoINIncomplete>
}
 804a744:	bf00      	nop
 804a746:	3708      	adds	r7, #8
 804a748:	46bd      	mov	sp, r7
 804a74a:	bd80      	pop	{r7, pc}

0804a74c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a74c:	b580      	push	{r7, lr}
 804a74e:	b082      	sub	sp, #8
 804a750:	af00      	add	r7, sp, #0
 804a752:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 804a754:	687b      	ldr	r3, [r7, #4]
 804a756:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a75a:	4618      	mov	r0, r3
 804a75c:	f7fe fb0e 	bl	8048d7c <USBD_LL_DevConnected>
}
 804a760:	bf00      	nop
 804a762:	3708      	adds	r7, #8
 804a764:	46bd      	mov	sp, r7
 804a766:	bd80      	pop	{r7, pc}

0804a768 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a768:	b580      	push	{r7, lr}
 804a76a:	b082      	sub	sp, #8
 804a76c:	af00      	add	r7, sp, #0
 804a76e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 804a770:	687b      	ldr	r3, [r7, #4]
 804a772:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a776:	4618      	mov	r0, r3
 804a778:	f7fe fb0b 	bl	8048d92 <USBD_LL_DevDisconnected>
}
 804a77c:	bf00      	nop
 804a77e:	3708      	adds	r7, #8
 804a780:	46bd      	mov	sp, r7
 804a782:	bd80      	pop	{r7, pc}

0804a784 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 804a784:	b580      	push	{r7, lr}
 804a786:	b082      	sub	sp, #8
 804a788:	af00      	add	r7, sp, #0
 804a78a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 804a78c:	687b      	ldr	r3, [r7, #4]
 804a78e:	781b      	ldrb	r3, [r3, #0]
 804a790:	2b01      	cmp	r3, #1
 804a792:	d140      	bne.n	804a816 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 804a794:	4a22      	ldr	r2, [pc, #136]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a796:	687b      	ldr	r3, [r7, #4]
 804a798:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 804a79c:	687b      	ldr	r3, [r7, #4]
 804a79e:	4a20      	ldr	r2, [pc, #128]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a7a0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 804a7a4:	4b1e      	ldr	r3, [pc, #120]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a7a6:	4a1f      	ldr	r2, [pc, #124]	@ (804a824 <USBD_LL_Init+0xa0>)
 804a7a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 804a7aa:	4b1d      	ldr	r3, [pc, #116]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a7ac:	2209      	movs	r2, #9
 804a7ae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 804a7b0:	4b1b      	ldr	r3, [pc, #108]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a7b2:	2200      	movs	r2, #0
 804a7b4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 804a7b6:	4b1a      	ldr	r3, [pc, #104]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a7b8:	2200      	movs	r2, #0
 804a7ba:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 804a7bc:	4b18      	ldr	r3, [pc, #96]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a7be:	2201      	movs	r2, #1
 804a7c0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 804a7c2:	4b17      	ldr	r3, [pc, #92]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a7c4:	2200      	movs	r2, #0
 804a7c6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 804a7c8:	4b15      	ldr	r3, [pc, #84]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a7ca:	2200      	movs	r2, #0
 804a7cc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 804a7ce:	4b14      	ldr	r3, [pc, #80]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a7d0:	2200      	movs	r2, #0
 804a7d2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 804a7d4:	4b12      	ldr	r3, [pc, #72]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a7d6:	2200      	movs	r2, #0
 804a7d8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 804a7da:	4b11      	ldr	r3, [pc, #68]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a7dc:	2200      	movs	r2, #0
 804a7de:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 804a7e0:	4b0f      	ldr	r3, [pc, #60]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a7e2:	2200      	movs	r2, #0
 804a7e4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 804a7e6:	480e      	ldr	r0, [pc, #56]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a7e8:	f7f7 f960 	bl	8041aac <HAL_PCD_Init>
 804a7ec:	4603      	mov	r3, r0
 804a7ee:	2b00      	cmp	r3, #0
 804a7f0:	d001      	beq.n	804a7f6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 804a7f2:	f7f6 fa85 	bl	8040d00 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 804a7f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 804a7fa:	4809      	ldr	r0, [pc, #36]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a7fc:	f7f8 fb9d 	bl	8042f3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 804a800:	2280      	movs	r2, #128	@ 0x80
 804a802:	2100      	movs	r1, #0
 804a804:	4806      	ldr	r0, [pc, #24]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a806:	f7f8 fb51 	bl	8042eac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 804a80a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 804a80e:	2101      	movs	r1, #1
 804a810:	4803      	ldr	r0, [pc, #12]	@ (804a820 <USBD_LL_Init+0x9c>)
 804a812:	f7f8 fb4b 	bl	8042eac <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 804a816:	2300      	movs	r3, #0
}
 804a818:	4618      	mov	r0, r3
 804a81a:	3708      	adds	r7, #8
 804a81c:	46bd      	mov	sp, r7
 804a81e:	bd80      	pop	{r7, pc}
 804a820:	24000750 	.word	0x24000750
 804a824:	40040000 	.word	0x40040000

0804a828 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 804a828:	b580      	push	{r7, lr}
 804a82a:	b084      	sub	sp, #16
 804a82c:	af00      	add	r7, sp, #0
 804a82e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804a830:	2300      	movs	r3, #0
 804a832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804a834:	2300      	movs	r3, #0
 804a836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 804a838:	687b      	ldr	r3, [r7, #4]
 804a83a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804a83e:	4618      	mov	r0, r3
 804a840:	f7f7 fa40 	bl	8041cc4 <HAL_PCD_Start>
 804a844:	4603      	mov	r3, r0
 804a846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804a848:	7bfb      	ldrb	r3, [r7, #15]
 804a84a:	4618      	mov	r0, r3
 804a84c:	f000 f930 	bl	804aab0 <USBD_Get_USB_Status>
 804a850:	4603      	mov	r3, r0
 804a852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804a854:	7bbb      	ldrb	r3, [r7, #14]
}
 804a856:	4618      	mov	r0, r3
 804a858:	3710      	adds	r7, #16
 804a85a:	46bd      	mov	sp, r7
 804a85c:	bd80      	pop	{r7, pc}

0804a85e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 804a85e:	b580      	push	{r7, lr}
 804a860:	b084      	sub	sp, #16
 804a862:	af00      	add	r7, sp, #0
 804a864:	6078      	str	r0, [r7, #4]
 804a866:	4608      	mov	r0, r1
 804a868:	4611      	mov	r1, r2
 804a86a:	461a      	mov	r2, r3
 804a86c:	4603      	mov	r3, r0
 804a86e:	70fb      	strb	r3, [r7, #3]
 804a870:	460b      	mov	r3, r1
 804a872:	70bb      	strb	r3, [r7, #2]
 804a874:	4613      	mov	r3, r2
 804a876:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804a878:	2300      	movs	r3, #0
 804a87a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804a87c:	2300      	movs	r3, #0
 804a87e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 804a880:	687b      	ldr	r3, [r7, #4]
 804a882:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 804a886:	78bb      	ldrb	r3, [r7, #2]
 804a888:	883a      	ldrh	r2, [r7, #0]
 804a88a:	78f9      	ldrb	r1, [r7, #3]
 804a88c:	f7f7 ff41 	bl	8042712 <HAL_PCD_EP_Open>
 804a890:	4603      	mov	r3, r0
 804a892:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804a894:	7bfb      	ldrb	r3, [r7, #15]
 804a896:	4618      	mov	r0, r3
 804a898:	f000 f90a 	bl	804aab0 <USBD_Get_USB_Status>
 804a89c:	4603      	mov	r3, r0
 804a89e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804a8a0:	7bbb      	ldrb	r3, [r7, #14]
}
 804a8a2:	4618      	mov	r0, r3
 804a8a4:	3710      	adds	r7, #16
 804a8a6:	46bd      	mov	sp, r7
 804a8a8:	bd80      	pop	{r7, pc}

0804a8aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804a8aa:	b580      	push	{r7, lr}
 804a8ac:	b084      	sub	sp, #16
 804a8ae:	af00      	add	r7, sp, #0
 804a8b0:	6078      	str	r0, [r7, #4]
 804a8b2:	460b      	mov	r3, r1
 804a8b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804a8b6:	2300      	movs	r3, #0
 804a8b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804a8ba:	2300      	movs	r3, #0
 804a8bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 804a8be:	687b      	ldr	r3, [r7, #4]
 804a8c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804a8c4:	78fa      	ldrb	r2, [r7, #3]
 804a8c6:	4611      	mov	r1, r2
 804a8c8:	4618      	mov	r0, r3
 804a8ca:	f7f7 ff8c 	bl	80427e6 <HAL_PCD_EP_Close>
 804a8ce:	4603      	mov	r3, r0
 804a8d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804a8d2:	7bfb      	ldrb	r3, [r7, #15]
 804a8d4:	4618      	mov	r0, r3
 804a8d6:	f000 f8eb 	bl	804aab0 <USBD_Get_USB_Status>
 804a8da:	4603      	mov	r3, r0
 804a8dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804a8de:	7bbb      	ldrb	r3, [r7, #14]
}
 804a8e0:	4618      	mov	r0, r3
 804a8e2:	3710      	adds	r7, #16
 804a8e4:	46bd      	mov	sp, r7
 804a8e6:	bd80      	pop	{r7, pc}

0804a8e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804a8e8:	b580      	push	{r7, lr}
 804a8ea:	b084      	sub	sp, #16
 804a8ec:	af00      	add	r7, sp, #0
 804a8ee:	6078      	str	r0, [r7, #4]
 804a8f0:	460b      	mov	r3, r1
 804a8f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804a8f4:	2300      	movs	r3, #0
 804a8f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804a8f8:	2300      	movs	r3, #0
 804a8fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 804a8fc:	687b      	ldr	r3, [r7, #4]
 804a8fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804a902:	78fa      	ldrb	r2, [r7, #3]
 804a904:	4611      	mov	r1, r2
 804a906:	4618      	mov	r0, r3
 804a908:	f7f8 f82c 	bl	8042964 <HAL_PCD_EP_SetStall>
 804a90c:	4603      	mov	r3, r0
 804a90e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804a910:	7bfb      	ldrb	r3, [r7, #15]
 804a912:	4618      	mov	r0, r3
 804a914:	f000 f8cc 	bl	804aab0 <USBD_Get_USB_Status>
 804a918:	4603      	mov	r3, r0
 804a91a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804a91c:	7bbb      	ldrb	r3, [r7, #14]
}
 804a91e:	4618      	mov	r0, r3
 804a920:	3710      	adds	r7, #16
 804a922:	46bd      	mov	sp, r7
 804a924:	bd80      	pop	{r7, pc}

0804a926 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804a926:	b580      	push	{r7, lr}
 804a928:	b084      	sub	sp, #16
 804a92a:	af00      	add	r7, sp, #0
 804a92c:	6078      	str	r0, [r7, #4]
 804a92e:	460b      	mov	r3, r1
 804a930:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804a932:	2300      	movs	r3, #0
 804a934:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804a936:	2300      	movs	r3, #0
 804a938:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 804a93a:	687b      	ldr	r3, [r7, #4]
 804a93c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804a940:	78fa      	ldrb	r2, [r7, #3]
 804a942:	4611      	mov	r1, r2
 804a944:	4618      	mov	r0, r3
 804a946:	f7f8 f870 	bl	8042a2a <HAL_PCD_EP_ClrStall>
 804a94a:	4603      	mov	r3, r0
 804a94c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804a94e:	7bfb      	ldrb	r3, [r7, #15]
 804a950:	4618      	mov	r0, r3
 804a952:	f000 f8ad 	bl	804aab0 <USBD_Get_USB_Status>
 804a956:	4603      	mov	r3, r0
 804a958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804a95a:	7bbb      	ldrb	r3, [r7, #14]
}
 804a95c:	4618      	mov	r0, r3
 804a95e:	3710      	adds	r7, #16
 804a960:	46bd      	mov	sp, r7
 804a962:	bd80      	pop	{r7, pc}

0804a964 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804a964:	b480      	push	{r7}
 804a966:	b085      	sub	sp, #20
 804a968:	af00      	add	r7, sp, #0
 804a96a:	6078      	str	r0, [r7, #4]
 804a96c:	460b      	mov	r3, r1
 804a96e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 804a970:	687b      	ldr	r3, [r7, #4]
 804a972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804a976:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 804a978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 804a97c:	2b00      	cmp	r3, #0
 804a97e:	da0b      	bge.n	804a998 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 804a980:	78fb      	ldrb	r3, [r7, #3]
 804a982:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804a986:	68f9      	ldr	r1, [r7, #12]
 804a988:	4613      	mov	r3, r2
 804a98a:	00db      	lsls	r3, r3, #3
 804a98c:	4413      	add	r3, r2
 804a98e:	009b      	lsls	r3, r3, #2
 804a990:	440b      	add	r3, r1
 804a992:	3316      	adds	r3, #22
 804a994:	781b      	ldrb	r3, [r3, #0]
 804a996:	e00b      	b.n	804a9b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 804a998:	78fb      	ldrb	r3, [r7, #3]
 804a99a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804a99e:	68f9      	ldr	r1, [r7, #12]
 804a9a0:	4613      	mov	r3, r2
 804a9a2:	00db      	lsls	r3, r3, #3
 804a9a4:	4413      	add	r3, r2
 804a9a6:	009b      	lsls	r3, r3, #2
 804a9a8:	440b      	add	r3, r1
 804a9aa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 804a9ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 804a9b0:	4618      	mov	r0, r3
 804a9b2:	3714      	adds	r7, #20
 804a9b4:	46bd      	mov	sp, r7
 804a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a9ba:	4770      	bx	lr

0804a9bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 804a9bc:	b580      	push	{r7, lr}
 804a9be:	b084      	sub	sp, #16
 804a9c0:	af00      	add	r7, sp, #0
 804a9c2:	6078      	str	r0, [r7, #4]
 804a9c4:	460b      	mov	r3, r1
 804a9c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804a9c8:	2300      	movs	r3, #0
 804a9ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804a9cc:	2300      	movs	r3, #0
 804a9ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 804a9d0:	687b      	ldr	r3, [r7, #4]
 804a9d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804a9d6:	78fa      	ldrb	r2, [r7, #3]
 804a9d8:	4611      	mov	r1, r2
 804a9da:	4618      	mov	r0, r3
 804a9dc:	f7f7 fe75 	bl	80426ca <HAL_PCD_SetAddress>
 804a9e0:	4603      	mov	r3, r0
 804a9e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804a9e4:	7bfb      	ldrb	r3, [r7, #15]
 804a9e6:	4618      	mov	r0, r3
 804a9e8:	f000 f862 	bl	804aab0 <USBD_Get_USB_Status>
 804a9ec:	4603      	mov	r3, r0
 804a9ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804a9f0:	7bbb      	ldrb	r3, [r7, #14]
}
 804a9f2:	4618      	mov	r0, r3
 804a9f4:	3710      	adds	r7, #16
 804a9f6:	46bd      	mov	sp, r7
 804a9f8:	bd80      	pop	{r7, pc}

0804a9fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 804a9fa:	b580      	push	{r7, lr}
 804a9fc:	b086      	sub	sp, #24
 804a9fe:	af00      	add	r7, sp, #0
 804aa00:	60f8      	str	r0, [r7, #12]
 804aa02:	607a      	str	r2, [r7, #4]
 804aa04:	603b      	str	r3, [r7, #0]
 804aa06:	460b      	mov	r3, r1
 804aa08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804aa0a:	2300      	movs	r3, #0
 804aa0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804aa0e:	2300      	movs	r3, #0
 804aa10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 804aa12:	68fb      	ldr	r3, [r7, #12]
 804aa14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 804aa18:	7af9      	ldrb	r1, [r7, #11]
 804aa1a:	683b      	ldr	r3, [r7, #0]
 804aa1c:	687a      	ldr	r2, [r7, #4]
 804aa1e:	f7f7 ff67 	bl	80428f0 <HAL_PCD_EP_Transmit>
 804aa22:	4603      	mov	r3, r0
 804aa24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804aa26:	7dfb      	ldrb	r3, [r7, #23]
 804aa28:	4618      	mov	r0, r3
 804aa2a:	f000 f841 	bl	804aab0 <USBD_Get_USB_Status>
 804aa2e:	4603      	mov	r3, r0
 804aa30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 804aa32:	7dbb      	ldrb	r3, [r7, #22]
}
 804aa34:	4618      	mov	r0, r3
 804aa36:	3718      	adds	r7, #24
 804aa38:	46bd      	mov	sp, r7
 804aa3a:	bd80      	pop	{r7, pc}

0804aa3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 804aa3c:	b580      	push	{r7, lr}
 804aa3e:	b086      	sub	sp, #24
 804aa40:	af00      	add	r7, sp, #0
 804aa42:	60f8      	str	r0, [r7, #12]
 804aa44:	607a      	str	r2, [r7, #4]
 804aa46:	603b      	str	r3, [r7, #0]
 804aa48:	460b      	mov	r3, r1
 804aa4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804aa4c:	2300      	movs	r3, #0
 804aa4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804aa50:	2300      	movs	r3, #0
 804aa52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 804aa54:	68fb      	ldr	r3, [r7, #12]
 804aa56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 804aa5a:	7af9      	ldrb	r1, [r7, #11]
 804aa5c:	683b      	ldr	r3, [r7, #0]
 804aa5e:	687a      	ldr	r2, [r7, #4]
 804aa60:	f7f7 ff0b 	bl	804287a <HAL_PCD_EP_Receive>
 804aa64:	4603      	mov	r3, r0
 804aa66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804aa68:	7dfb      	ldrb	r3, [r7, #23]
 804aa6a:	4618      	mov	r0, r3
 804aa6c:	f000 f820 	bl	804aab0 <USBD_Get_USB_Status>
 804aa70:	4603      	mov	r3, r0
 804aa72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 804aa74:	7dbb      	ldrb	r3, [r7, #22]
}
 804aa76:	4618      	mov	r0, r3
 804aa78:	3718      	adds	r7, #24
 804aa7a:	46bd      	mov	sp, r7
 804aa7c:	bd80      	pop	{r7, pc}
	...

0804aa80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 804aa80:	b480      	push	{r7}
 804aa82:	b083      	sub	sp, #12
 804aa84:	af00      	add	r7, sp, #0
 804aa86:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 804aa88:	4b03      	ldr	r3, [pc, #12]	@ (804aa98 <USBD_static_malloc+0x18>)
}
 804aa8a:	4618      	mov	r0, r3
 804aa8c:	370c      	adds	r7, #12
 804aa8e:	46bd      	mov	sp, r7
 804aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 804aa94:	4770      	bx	lr
 804aa96:	bf00      	nop
 804aa98:	24000c34 	.word	0x24000c34

0804aa9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 804aa9c:	b480      	push	{r7}
 804aa9e:	b083      	sub	sp, #12
 804aaa0:	af00      	add	r7, sp, #0
 804aaa2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 804aaa4:	bf00      	nop
 804aaa6:	370c      	adds	r7, #12
 804aaa8:	46bd      	mov	sp, r7
 804aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 804aaae:	4770      	bx	lr

0804aab0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 804aab0:	b480      	push	{r7}
 804aab2:	b085      	sub	sp, #20
 804aab4:	af00      	add	r7, sp, #0
 804aab6:	4603      	mov	r3, r0
 804aab8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804aaba:	2300      	movs	r3, #0
 804aabc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 804aabe:	79fb      	ldrb	r3, [r7, #7]
 804aac0:	2b03      	cmp	r3, #3
 804aac2:	d817      	bhi.n	804aaf4 <USBD_Get_USB_Status+0x44>
 804aac4:	a201      	add	r2, pc, #4	@ (adr r2, 804aacc <USBD_Get_USB_Status+0x1c>)
 804aac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804aaca:	bf00      	nop
 804aacc:	0804aadd 	.word	0x0804aadd
 804aad0:	0804aae3 	.word	0x0804aae3
 804aad4:	0804aae9 	.word	0x0804aae9
 804aad8:	0804aaef 	.word	0x0804aaef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 804aadc:	2300      	movs	r3, #0
 804aade:	73fb      	strb	r3, [r7, #15]
    break;
 804aae0:	e00b      	b.n	804aafa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 804aae2:	2303      	movs	r3, #3
 804aae4:	73fb      	strb	r3, [r7, #15]
    break;
 804aae6:	e008      	b.n	804aafa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 804aae8:	2301      	movs	r3, #1
 804aaea:	73fb      	strb	r3, [r7, #15]
    break;
 804aaec:	e005      	b.n	804aafa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 804aaee:	2303      	movs	r3, #3
 804aaf0:	73fb      	strb	r3, [r7, #15]
    break;
 804aaf2:	e002      	b.n	804aafa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 804aaf4:	2303      	movs	r3, #3
 804aaf6:	73fb      	strb	r3, [r7, #15]
    break;
 804aaf8:	bf00      	nop
  }
  return usb_status;
 804aafa:	7bfb      	ldrb	r3, [r7, #15]
}
 804aafc:	4618      	mov	r0, r3
 804aafe:	3714      	adds	r7, #20
 804ab00:	46bd      	mov	sp, r7
 804ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ab06:	4770      	bx	lr

0804ab08 <std>:
 804ab08:	2300      	movs	r3, #0
 804ab0a:	b510      	push	{r4, lr}
 804ab0c:	4604      	mov	r4, r0
 804ab0e:	e9c0 3300 	strd	r3, r3, [r0]
 804ab12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804ab16:	6083      	str	r3, [r0, #8]
 804ab18:	8181      	strh	r1, [r0, #12]
 804ab1a:	6643      	str	r3, [r0, #100]	@ 0x64
 804ab1c:	81c2      	strh	r2, [r0, #14]
 804ab1e:	6183      	str	r3, [r0, #24]
 804ab20:	4619      	mov	r1, r3
 804ab22:	2208      	movs	r2, #8
 804ab24:	305c      	adds	r0, #92	@ 0x5c
 804ab26:	f000 f906 	bl	804ad36 <memset>
 804ab2a:	4b0d      	ldr	r3, [pc, #52]	@ (804ab60 <std+0x58>)
 804ab2c:	6263      	str	r3, [r4, #36]	@ 0x24
 804ab2e:	4b0d      	ldr	r3, [pc, #52]	@ (804ab64 <std+0x5c>)
 804ab30:	62a3      	str	r3, [r4, #40]	@ 0x28
 804ab32:	4b0d      	ldr	r3, [pc, #52]	@ (804ab68 <std+0x60>)
 804ab34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 804ab36:	4b0d      	ldr	r3, [pc, #52]	@ (804ab6c <std+0x64>)
 804ab38:	6323      	str	r3, [r4, #48]	@ 0x30
 804ab3a:	4b0d      	ldr	r3, [pc, #52]	@ (804ab70 <std+0x68>)
 804ab3c:	6224      	str	r4, [r4, #32]
 804ab3e:	429c      	cmp	r4, r3
 804ab40:	d006      	beq.n	804ab50 <std+0x48>
 804ab42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 804ab46:	4294      	cmp	r4, r2
 804ab48:	d002      	beq.n	804ab50 <std+0x48>
 804ab4a:	33d0      	adds	r3, #208	@ 0xd0
 804ab4c:	429c      	cmp	r4, r3
 804ab4e:	d105      	bne.n	804ab5c <std+0x54>
 804ab50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 804ab54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804ab58:	f000 b966 	b.w	804ae28 <__retarget_lock_init_recursive>
 804ab5c:	bd10      	pop	{r4, pc}
 804ab5e:	bf00      	nop
 804ab60:	0804acb1 	.word	0x0804acb1
 804ab64:	0804acd3 	.word	0x0804acd3
 804ab68:	0804ad0b 	.word	0x0804ad0b
 804ab6c:	0804ad2f 	.word	0x0804ad2f
 804ab70:	24000c48 	.word	0x24000c48

0804ab74 <stdio_exit_handler>:
 804ab74:	4a02      	ldr	r2, [pc, #8]	@ (804ab80 <stdio_exit_handler+0xc>)
 804ab76:	4903      	ldr	r1, [pc, #12]	@ (804ab84 <stdio_exit_handler+0x10>)
 804ab78:	4803      	ldr	r0, [pc, #12]	@ (804ab88 <stdio_exit_handler+0x14>)
 804ab7a:	f000 b869 	b.w	804ac50 <_fwalk_sglue>
 804ab7e:	bf00      	nop
 804ab80:	24000124 	.word	0x24000124
 804ab84:	0804b6c5 	.word	0x0804b6c5
 804ab88:	24000134 	.word	0x24000134

0804ab8c <cleanup_stdio>:
 804ab8c:	6841      	ldr	r1, [r0, #4]
 804ab8e:	4b0c      	ldr	r3, [pc, #48]	@ (804abc0 <cleanup_stdio+0x34>)
 804ab90:	4299      	cmp	r1, r3
 804ab92:	b510      	push	{r4, lr}
 804ab94:	4604      	mov	r4, r0
 804ab96:	d001      	beq.n	804ab9c <cleanup_stdio+0x10>
 804ab98:	f000 fd94 	bl	804b6c4 <_fflush_r>
 804ab9c:	68a1      	ldr	r1, [r4, #8]
 804ab9e:	4b09      	ldr	r3, [pc, #36]	@ (804abc4 <cleanup_stdio+0x38>)
 804aba0:	4299      	cmp	r1, r3
 804aba2:	d002      	beq.n	804abaa <cleanup_stdio+0x1e>
 804aba4:	4620      	mov	r0, r4
 804aba6:	f000 fd8d 	bl	804b6c4 <_fflush_r>
 804abaa:	68e1      	ldr	r1, [r4, #12]
 804abac:	4b06      	ldr	r3, [pc, #24]	@ (804abc8 <cleanup_stdio+0x3c>)
 804abae:	4299      	cmp	r1, r3
 804abb0:	d004      	beq.n	804abbc <cleanup_stdio+0x30>
 804abb2:	4620      	mov	r0, r4
 804abb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804abb8:	f000 bd84 	b.w	804b6c4 <_fflush_r>
 804abbc:	bd10      	pop	{r4, pc}
 804abbe:	bf00      	nop
 804abc0:	24000c48 	.word	0x24000c48
 804abc4:	24000cb0 	.word	0x24000cb0
 804abc8:	24000d18 	.word	0x24000d18

0804abcc <global_stdio_init.part.0>:
 804abcc:	b510      	push	{r4, lr}
 804abce:	4b0b      	ldr	r3, [pc, #44]	@ (804abfc <global_stdio_init.part.0+0x30>)
 804abd0:	4c0b      	ldr	r4, [pc, #44]	@ (804ac00 <global_stdio_init.part.0+0x34>)
 804abd2:	4a0c      	ldr	r2, [pc, #48]	@ (804ac04 <global_stdio_init.part.0+0x38>)
 804abd4:	601a      	str	r2, [r3, #0]
 804abd6:	4620      	mov	r0, r4
 804abd8:	2200      	movs	r2, #0
 804abda:	2104      	movs	r1, #4
 804abdc:	f7ff ff94 	bl	804ab08 <std>
 804abe0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 804abe4:	2201      	movs	r2, #1
 804abe6:	2109      	movs	r1, #9
 804abe8:	f7ff ff8e 	bl	804ab08 <std>
 804abec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 804abf0:	2202      	movs	r2, #2
 804abf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804abf6:	2112      	movs	r1, #18
 804abf8:	f7ff bf86 	b.w	804ab08 <std>
 804abfc:	24000d80 	.word	0x24000d80
 804ac00:	24000c48 	.word	0x24000c48
 804ac04:	0804ab75 	.word	0x0804ab75

0804ac08 <__sfp_lock_acquire>:
 804ac08:	4801      	ldr	r0, [pc, #4]	@ (804ac10 <__sfp_lock_acquire+0x8>)
 804ac0a:	f000 b90e 	b.w	804ae2a <__retarget_lock_acquire_recursive>
 804ac0e:	bf00      	nop
 804ac10:	24000d89 	.word	0x24000d89

0804ac14 <__sfp_lock_release>:
 804ac14:	4801      	ldr	r0, [pc, #4]	@ (804ac1c <__sfp_lock_release+0x8>)
 804ac16:	f000 b909 	b.w	804ae2c <__retarget_lock_release_recursive>
 804ac1a:	bf00      	nop
 804ac1c:	24000d89 	.word	0x24000d89

0804ac20 <__sinit>:
 804ac20:	b510      	push	{r4, lr}
 804ac22:	4604      	mov	r4, r0
 804ac24:	f7ff fff0 	bl	804ac08 <__sfp_lock_acquire>
 804ac28:	6a23      	ldr	r3, [r4, #32]
 804ac2a:	b11b      	cbz	r3, 804ac34 <__sinit+0x14>
 804ac2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804ac30:	f7ff bff0 	b.w	804ac14 <__sfp_lock_release>
 804ac34:	4b04      	ldr	r3, [pc, #16]	@ (804ac48 <__sinit+0x28>)
 804ac36:	6223      	str	r3, [r4, #32]
 804ac38:	4b04      	ldr	r3, [pc, #16]	@ (804ac4c <__sinit+0x2c>)
 804ac3a:	681b      	ldr	r3, [r3, #0]
 804ac3c:	2b00      	cmp	r3, #0
 804ac3e:	d1f5      	bne.n	804ac2c <__sinit+0xc>
 804ac40:	f7ff ffc4 	bl	804abcc <global_stdio_init.part.0>
 804ac44:	e7f2      	b.n	804ac2c <__sinit+0xc>
 804ac46:	bf00      	nop
 804ac48:	0804ab8d 	.word	0x0804ab8d
 804ac4c:	24000d80 	.word	0x24000d80

0804ac50 <_fwalk_sglue>:
 804ac50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804ac54:	4607      	mov	r7, r0
 804ac56:	4688      	mov	r8, r1
 804ac58:	4614      	mov	r4, r2
 804ac5a:	2600      	movs	r6, #0
 804ac5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 804ac60:	f1b9 0901 	subs.w	r9, r9, #1
 804ac64:	d505      	bpl.n	804ac72 <_fwalk_sglue+0x22>
 804ac66:	6824      	ldr	r4, [r4, #0]
 804ac68:	2c00      	cmp	r4, #0
 804ac6a:	d1f7      	bne.n	804ac5c <_fwalk_sglue+0xc>
 804ac6c:	4630      	mov	r0, r6
 804ac6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804ac72:	89ab      	ldrh	r3, [r5, #12]
 804ac74:	2b01      	cmp	r3, #1
 804ac76:	d907      	bls.n	804ac88 <_fwalk_sglue+0x38>
 804ac78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804ac7c:	3301      	adds	r3, #1
 804ac7e:	d003      	beq.n	804ac88 <_fwalk_sglue+0x38>
 804ac80:	4629      	mov	r1, r5
 804ac82:	4638      	mov	r0, r7
 804ac84:	47c0      	blx	r8
 804ac86:	4306      	orrs	r6, r0
 804ac88:	3568      	adds	r5, #104	@ 0x68
 804ac8a:	e7e9      	b.n	804ac60 <_fwalk_sglue+0x10>

0804ac8c <iprintf>:
 804ac8c:	b40f      	push	{r0, r1, r2, r3}
 804ac8e:	b507      	push	{r0, r1, r2, lr}
 804ac90:	4906      	ldr	r1, [pc, #24]	@ (804acac <iprintf+0x20>)
 804ac92:	ab04      	add	r3, sp, #16
 804ac94:	6808      	ldr	r0, [r1, #0]
 804ac96:	f853 2b04 	ldr.w	r2, [r3], #4
 804ac9a:	6881      	ldr	r1, [r0, #8]
 804ac9c:	9301      	str	r3, [sp, #4]
 804ac9e:	f000 f9e9 	bl	804b074 <_vfiprintf_r>
 804aca2:	b003      	add	sp, #12
 804aca4:	f85d eb04 	ldr.w	lr, [sp], #4
 804aca8:	b004      	add	sp, #16
 804acaa:	4770      	bx	lr
 804acac:	24000130 	.word	0x24000130

0804acb0 <__sread>:
 804acb0:	b510      	push	{r4, lr}
 804acb2:	460c      	mov	r4, r1
 804acb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804acb8:	f000 f868 	bl	804ad8c <_read_r>
 804acbc:	2800      	cmp	r0, #0
 804acbe:	bfab      	itete	ge
 804acc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 804acc2:	89a3      	ldrhlt	r3, [r4, #12]
 804acc4:	181b      	addge	r3, r3, r0
 804acc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 804acca:	bfac      	ite	ge
 804accc:	6563      	strge	r3, [r4, #84]	@ 0x54
 804acce:	81a3      	strhlt	r3, [r4, #12]
 804acd0:	bd10      	pop	{r4, pc}

0804acd2 <__swrite>:
 804acd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804acd6:	461f      	mov	r7, r3
 804acd8:	898b      	ldrh	r3, [r1, #12]
 804acda:	05db      	lsls	r3, r3, #23
 804acdc:	4605      	mov	r5, r0
 804acde:	460c      	mov	r4, r1
 804ace0:	4616      	mov	r6, r2
 804ace2:	d505      	bpl.n	804acf0 <__swrite+0x1e>
 804ace4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804ace8:	2302      	movs	r3, #2
 804acea:	2200      	movs	r2, #0
 804acec:	f000 f83c 	bl	804ad68 <_lseek_r>
 804acf0:	89a3      	ldrh	r3, [r4, #12]
 804acf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804acf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 804acfa:	81a3      	strh	r3, [r4, #12]
 804acfc:	4632      	mov	r2, r6
 804acfe:	463b      	mov	r3, r7
 804ad00:	4628      	mov	r0, r5
 804ad02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804ad06:	f000 b853 	b.w	804adb0 <_write_r>

0804ad0a <__sseek>:
 804ad0a:	b510      	push	{r4, lr}
 804ad0c:	460c      	mov	r4, r1
 804ad0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804ad12:	f000 f829 	bl	804ad68 <_lseek_r>
 804ad16:	1c43      	adds	r3, r0, #1
 804ad18:	89a3      	ldrh	r3, [r4, #12]
 804ad1a:	bf15      	itete	ne
 804ad1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 804ad1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 804ad22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 804ad26:	81a3      	strheq	r3, [r4, #12]
 804ad28:	bf18      	it	ne
 804ad2a:	81a3      	strhne	r3, [r4, #12]
 804ad2c:	bd10      	pop	{r4, pc}

0804ad2e <__sclose>:
 804ad2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804ad32:	f000 b809 	b.w	804ad48 <_close_r>

0804ad36 <memset>:
 804ad36:	4402      	add	r2, r0
 804ad38:	4603      	mov	r3, r0
 804ad3a:	4293      	cmp	r3, r2
 804ad3c:	d100      	bne.n	804ad40 <memset+0xa>
 804ad3e:	4770      	bx	lr
 804ad40:	f803 1b01 	strb.w	r1, [r3], #1
 804ad44:	e7f9      	b.n	804ad3a <memset+0x4>
	...

0804ad48 <_close_r>:
 804ad48:	b538      	push	{r3, r4, r5, lr}
 804ad4a:	4d06      	ldr	r5, [pc, #24]	@ (804ad64 <_close_r+0x1c>)
 804ad4c:	2300      	movs	r3, #0
 804ad4e:	4604      	mov	r4, r0
 804ad50:	4608      	mov	r0, r1
 804ad52:	602b      	str	r3, [r5, #0]
 804ad54:	f7f6 f923 	bl	8040f9e <_close>
 804ad58:	1c43      	adds	r3, r0, #1
 804ad5a:	d102      	bne.n	804ad62 <_close_r+0x1a>
 804ad5c:	682b      	ldr	r3, [r5, #0]
 804ad5e:	b103      	cbz	r3, 804ad62 <_close_r+0x1a>
 804ad60:	6023      	str	r3, [r4, #0]
 804ad62:	bd38      	pop	{r3, r4, r5, pc}
 804ad64:	24000d84 	.word	0x24000d84

0804ad68 <_lseek_r>:
 804ad68:	b538      	push	{r3, r4, r5, lr}
 804ad6a:	4d07      	ldr	r5, [pc, #28]	@ (804ad88 <_lseek_r+0x20>)
 804ad6c:	4604      	mov	r4, r0
 804ad6e:	4608      	mov	r0, r1
 804ad70:	4611      	mov	r1, r2
 804ad72:	2200      	movs	r2, #0
 804ad74:	602a      	str	r2, [r5, #0]
 804ad76:	461a      	mov	r2, r3
 804ad78:	f7f6 f938 	bl	8040fec <_lseek>
 804ad7c:	1c43      	adds	r3, r0, #1
 804ad7e:	d102      	bne.n	804ad86 <_lseek_r+0x1e>
 804ad80:	682b      	ldr	r3, [r5, #0]
 804ad82:	b103      	cbz	r3, 804ad86 <_lseek_r+0x1e>
 804ad84:	6023      	str	r3, [r4, #0]
 804ad86:	bd38      	pop	{r3, r4, r5, pc}
 804ad88:	24000d84 	.word	0x24000d84

0804ad8c <_read_r>:
 804ad8c:	b538      	push	{r3, r4, r5, lr}
 804ad8e:	4d07      	ldr	r5, [pc, #28]	@ (804adac <_read_r+0x20>)
 804ad90:	4604      	mov	r4, r0
 804ad92:	4608      	mov	r0, r1
 804ad94:	4611      	mov	r1, r2
 804ad96:	2200      	movs	r2, #0
 804ad98:	602a      	str	r2, [r5, #0]
 804ad9a:	461a      	mov	r2, r3
 804ad9c:	f7f6 f8c6 	bl	8040f2c <_read>
 804ada0:	1c43      	adds	r3, r0, #1
 804ada2:	d102      	bne.n	804adaa <_read_r+0x1e>
 804ada4:	682b      	ldr	r3, [r5, #0]
 804ada6:	b103      	cbz	r3, 804adaa <_read_r+0x1e>
 804ada8:	6023      	str	r3, [r4, #0]
 804adaa:	bd38      	pop	{r3, r4, r5, pc}
 804adac:	24000d84 	.word	0x24000d84

0804adb0 <_write_r>:
 804adb0:	b538      	push	{r3, r4, r5, lr}
 804adb2:	4d07      	ldr	r5, [pc, #28]	@ (804add0 <_write_r+0x20>)
 804adb4:	4604      	mov	r4, r0
 804adb6:	4608      	mov	r0, r1
 804adb8:	4611      	mov	r1, r2
 804adba:	2200      	movs	r2, #0
 804adbc:	602a      	str	r2, [r5, #0]
 804adbe:	461a      	mov	r2, r3
 804adc0:	f7f6 f8d1 	bl	8040f66 <_write>
 804adc4:	1c43      	adds	r3, r0, #1
 804adc6:	d102      	bne.n	804adce <_write_r+0x1e>
 804adc8:	682b      	ldr	r3, [r5, #0]
 804adca:	b103      	cbz	r3, 804adce <_write_r+0x1e>
 804adcc:	6023      	str	r3, [r4, #0]
 804adce:	bd38      	pop	{r3, r4, r5, pc}
 804add0:	24000d84 	.word	0x24000d84

0804add4 <__errno>:
 804add4:	4b01      	ldr	r3, [pc, #4]	@ (804addc <__errno+0x8>)
 804add6:	6818      	ldr	r0, [r3, #0]
 804add8:	4770      	bx	lr
 804adda:	bf00      	nop
 804addc:	24000130 	.word	0x24000130

0804ade0 <__libc_init_array>:
 804ade0:	b570      	push	{r4, r5, r6, lr}
 804ade2:	4d0d      	ldr	r5, [pc, #52]	@ (804ae18 <__libc_init_array+0x38>)
 804ade4:	4c0d      	ldr	r4, [pc, #52]	@ (804ae1c <__libc_init_array+0x3c>)
 804ade6:	1b64      	subs	r4, r4, r5
 804ade8:	10a4      	asrs	r4, r4, #2
 804adea:	2600      	movs	r6, #0
 804adec:	42a6      	cmp	r6, r4
 804adee:	d109      	bne.n	804ae04 <__libc_init_array+0x24>
 804adf0:	4d0b      	ldr	r5, [pc, #44]	@ (804ae20 <__libc_init_array+0x40>)
 804adf2:	4c0c      	ldr	r4, [pc, #48]	@ (804ae24 <__libc_init_array+0x44>)
 804adf4:	f000 fdb6 	bl	804b964 <_init>
 804adf8:	1b64      	subs	r4, r4, r5
 804adfa:	10a4      	asrs	r4, r4, #2
 804adfc:	2600      	movs	r6, #0
 804adfe:	42a6      	cmp	r6, r4
 804ae00:	d105      	bne.n	804ae0e <__libc_init_array+0x2e>
 804ae02:	bd70      	pop	{r4, r5, r6, pc}
 804ae04:	f855 3b04 	ldr.w	r3, [r5], #4
 804ae08:	4798      	blx	r3
 804ae0a:	3601      	adds	r6, #1
 804ae0c:	e7ee      	b.n	804adec <__libc_init_array+0xc>
 804ae0e:	f855 3b04 	ldr.w	r3, [r5], #4
 804ae12:	4798      	blx	r3
 804ae14:	3601      	adds	r6, #1
 804ae16:	e7f2      	b.n	804adfe <__libc_init_array+0x1e>
 804ae18:	0804baa4 	.word	0x0804baa4
 804ae1c:	0804baa4 	.word	0x0804baa4
 804ae20:	0804baa4 	.word	0x0804baa4
 804ae24:	0804baa8 	.word	0x0804baa8

0804ae28 <__retarget_lock_init_recursive>:
 804ae28:	4770      	bx	lr

0804ae2a <__retarget_lock_acquire_recursive>:
 804ae2a:	4770      	bx	lr

0804ae2c <__retarget_lock_release_recursive>:
 804ae2c:	4770      	bx	lr
	...

0804ae30 <_free_r>:
 804ae30:	b538      	push	{r3, r4, r5, lr}
 804ae32:	4605      	mov	r5, r0
 804ae34:	2900      	cmp	r1, #0
 804ae36:	d041      	beq.n	804aebc <_free_r+0x8c>
 804ae38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804ae3c:	1f0c      	subs	r4, r1, #4
 804ae3e:	2b00      	cmp	r3, #0
 804ae40:	bfb8      	it	lt
 804ae42:	18e4      	addlt	r4, r4, r3
 804ae44:	f000 f8e0 	bl	804b008 <__malloc_lock>
 804ae48:	4a1d      	ldr	r2, [pc, #116]	@ (804aec0 <_free_r+0x90>)
 804ae4a:	6813      	ldr	r3, [r2, #0]
 804ae4c:	b933      	cbnz	r3, 804ae5c <_free_r+0x2c>
 804ae4e:	6063      	str	r3, [r4, #4]
 804ae50:	6014      	str	r4, [r2, #0]
 804ae52:	4628      	mov	r0, r5
 804ae54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804ae58:	f000 b8dc 	b.w	804b014 <__malloc_unlock>
 804ae5c:	42a3      	cmp	r3, r4
 804ae5e:	d908      	bls.n	804ae72 <_free_r+0x42>
 804ae60:	6820      	ldr	r0, [r4, #0]
 804ae62:	1821      	adds	r1, r4, r0
 804ae64:	428b      	cmp	r3, r1
 804ae66:	bf01      	itttt	eq
 804ae68:	6819      	ldreq	r1, [r3, #0]
 804ae6a:	685b      	ldreq	r3, [r3, #4]
 804ae6c:	1809      	addeq	r1, r1, r0
 804ae6e:	6021      	streq	r1, [r4, #0]
 804ae70:	e7ed      	b.n	804ae4e <_free_r+0x1e>
 804ae72:	461a      	mov	r2, r3
 804ae74:	685b      	ldr	r3, [r3, #4]
 804ae76:	b10b      	cbz	r3, 804ae7c <_free_r+0x4c>
 804ae78:	42a3      	cmp	r3, r4
 804ae7a:	d9fa      	bls.n	804ae72 <_free_r+0x42>
 804ae7c:	6811      	ldr	r1, [r2, #0]
 804ae7e:	1850      	adds	r0, r2, r1
 804ae80:	42a0      	cmp	r0, r4
 804ae82:	d10b      	bne.n	804ae9c <_free_r+0x6c>
 804ae84:	6820      	ldr	r0, [r4, #0]
 804ae86:	4401      	add	r1, r0
 804ae88:	1850      	adds	r0, r2, r1
 804ae8a:	4283      	cmp	r3, r0
 804ae8c:	6011      	str	r1, [r2, #0]
 804ae8e:	d1e0      	bne.n	804ae52 <_free_r+0x22>
 804ae90:	6818      	ldr	r0, [r3, #0]
 804ae92:	685b      	ldr	r3, [r3, #4]
 804ae94:	6053      	str	r3, [r2, #4]
 804ae96:	4408      	add	r0, r1
 804ae98:	6010      	str	r0, [r2, #0]
 804ae9a:	e7da      	b.n	804ae52 <_free_r+0x22>
 804ae9c:	d902      	bls.n	804aea4 <_free_r+0x74>
 804ae9e:	230c      	movs	r3, #12
 804aea0:	602b      	str	r3, [r5, #0]
 804aea2:	e7d6      	b.n	804ae52 <_free_r+0x22>
 804aea4:	6820      	ldr	r0, [r4, #0]
 804aea6:	1821      	adds	r1, r4, r0
 804aea8:	428b      	cmp	r3, r1
 804aeaa:	bf04      	itt	eq
 804aeac:	6819      	ldreq	r1, [r3, #0]
 804aeae:	685b      	ldreq	r3, [r3, #4]
 804aeb0:	6063      	str	r3, [r4, #4]
 804aeb2:	bf04      	itt	eq
 804aeb4:	1809      	addeq	r1, r1, r0
 804aeb6:	6021      	streq	r1, [r4, #0]
 804aeb8:	6054      	str	r4, [r2, #4]
 804aeba:	e7ca      	b.n	804ae52 <_free_r+0x22>
 804aebc:	bd38      	pop	{r3, r4, r5, pc}
 804aebe:	bf00      	nop
 804aec0:	24000d90 	.word	0x24000d90

0804aec4 <sbrk_aligned>:
 804aec4:	b570      	push	{r4, r5, r6, lr}
 804aec6:	4e0f      	ldr	r6, [pc, #60]	@ (804af04 <sbrk_aligned+0x40>)
 804aec8:	460c      	mov	r4, r1
 804aeca:	6831      	ldr	r1, [r6, #0]
 804aecc:	4605      	mov	r5, r0
 804aece:	b911      	cbnz	r1, 804aed6 <sbrk_aligned+0x12>
 804aed0:	f000 fcb4 	bl	804b83c <_sbrk_r>
 804aed4:	6030      	str	r0, [r6, #0]
 804aed6:	4621      	mov	r1, r4
 804aed8:	4628      	mov	r0, r5
 804aeda:	f000 fcaf 	bl	804b83c <_sbrk_r>
 804aede:	1c43      	adds	r3, r0, #1
 804aee0:	d103      	bne.n	804aeea <sbrk_aligned+0x26>
 804aee2:	f04f 34ff 	mov.w	r4, #4294967295
 804aee6:	4620      	mov	r0, r4
 804aee8:	bd70      	pop	{r4, r5, r6, pc}
 804aeea:	1cc4      	adds	r4, r0, #3
 804aeec:	f024 0403 	bic.w	r4, r4, #3
 804aef0:	42a0      	cmp	r0, r4
 804aef2:	d0f8      	beq.n	804aee6 <sbrk_aligned+0x22>
 804aef4:	1a21      	subs	r1, r4, r0
 804aef6:	4628      	mov	r0, r5
 804aef8:	f000 fca0 	bl	804b83c <_sbrk_r>
 804aefc:	3001      	adds	r0, #1
 804aefe:	d1f2      	bne.n	804aee6 <sbrk_aligned+0x22>
 804af00:	e7ef      	b.n	804aee2 <sbrk_aligned+0x1e>
 804af02:	bf00      	nop
 804af04:	24000d8c 	.word	0x24000d8c

0804af08 <_malloc_r>:
 804af08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804af0c:	1ccd      	adds	r5, r1, #3
 804af0e:	f025 0503 	bic.w	r5, r5, #3
 804af12:	3508      	adds	r5, #8
 804af14:	2d0c      	cmp	r5, #12
 804af16:	bf38      	it	cc
 804af18:	250c      	movcc	r5, #12
 804af1a:	2d00      	cmp	r5, #0
 804af1c:	4606      	mov	r6, r0
 804af1e:	db01      	blt.n	804af24 <_malloc_r+0x1c>
 804af20:	42a9      	cmp	r1, r5
 804af22:	d904      	bls.n	804af2e <_malloc_r+0x26>
 804af24:	230c      	movs	r3, #12
 804af26:	6033      	str	r3, [r6, #0]
 804af28:	2000      	movs	r0, #0
 804af2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804af2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 804b004 <_malloc_r+0xfc>
 804af32:	f000 f869 	bl	804b008 <__malloc_lock>
 804af36:	f8d8 3000 	ldr.w	r3, [r8]
 804af3a:	461c      	mov	r4, r3
 804af3c:	bb44      	cbnz	r4, 804af90 <_malloc_r+0x88>
 804af3e:	4629      	mov	r1, r5
 804af40:	4630      	mov	r0, r6
 804af42:	f7ff ffbf 	bl	804aec4 <sbrk_aligned>
 804af46:	1c43      	adds	r3, r0, #1
 804af48:	4604      	mov	r4, r0
 804af4a:	d158      	bne.n	804affe <_malloc_r+0xf6>
 804af4c:	f8d8 4000 	ldr.w	r4, [r8]
 804af50:	4627      	mov	r7, r4
 804af52:	2f00      	cmp	r7, #0
 804af54:	d143      	bne.n	804afde <_malloc_r+0xd6>
 804af56:	2c00      	cmp	r4, #0
 804af58:	d04b      	beq.n	804aff2 <_malloc_r+0xea>
 804af5a:	6823      	ldr	r3, [r4, #0]
 804af5c:	4639      	mov	r1, r7
 804af5e:	4630      	mov	r0, r6
 804af60:	eb04 0903 	add.w	r9, r4, r3
 804af64:	f000 fc6a 	bl	804b83c <_sbrk_r>
 804af68:	4581      	cmp	r9, r0
 804af6a:	d142      	bne.n	804aff2 <_malloc_r+0xea>
 804af6c:	6821      	ldr	r1, [r4, #0]
 804af6e:	1a6d      	subs	r5, r5, r1
 804af70:	4629      	mov	r1, r5
 804af72:	4630      	mov	r0, r6
 804af74:	f7ff ffa6 	bl	804aec4 <sbrk_aligned>
 804af78:	3001      	adds	r0, #1
 804af7a:	d03a      	beq.n	804aff2 <_malloc_r+0xea>
 804af7c:	6823      	ldr	r3, [r4, #0]
 804af7e:	442b      	add	r3, r5
 804af80:	6023      	str	r3, [r4, #0]
 804af82:	f8d8 3000 	ldr.w	r3, [r8]
 804af86:	685a      	ldr	r2, [r3, #4]
 804af88:	bb62      	cbnz	r2, 804afe4 <_malloc_r+0xdc>
 804af8a:	f8c8 7000 	str.w	r7, [r8]
 804af8e:	e00f      	b.n	804afb0 <_malloc_r+0xa8>
 804af90:	6822      	ldr	r2, [r4, #0]
 804af92:	1b52      	subs	r2, r2, r5
 804af94:	d420      	bmi.n	804afd8 <_malloc_r+0xd0>
 804af96:	2a0b      	cmp	r2, #11
 804af98:	d917      	bls.n	804afca <_malloc_r+0xc2>
 804af9a:	1961      	adds	r1, r4, r5
 804af9c:	42a3      	cmp	r3, r4
 804af9e:	6025      	str	r5, [r4, #0]
 804afa0:	bf18      	it	ne
 804afa2:	6059      	strne	r1, [r3, #4]
 804afa4:	6863      	ldr	r3, [r4, #4]
 804afa6:	bf08      	it	eq
 804afa8:	f8c8 1000 	streq.w	r1, [r8]
 804afac:	5162      	str	r2, [r4, r5]
 804afae:	604b      	str	r3, [r1, #4]
 804afb0:	4630      	mov	r0, r6
 804afb2:	f000 f82f 	bl	804b014 <__malloc_unlock>
 804afb6:	f104 000b 	add.w	r0, r4, #11
 804afba:	1d23      	adds	r3, r4, #4
 804afbc:	f020 0007 	bic.w	r0, r0, #7
 804afc0:	1ac2      	subs	r2, r0, r3
 804afc2:	bf1c      	itt	ne
 804afc4:	1a1b      	subne	r3, r3, r0
 804afc6:	50a3      	strne	r3, [r4, r2]
 804afc8:	e7af      	b.n	804af2a <_malloc_r+0x22>
 804afca:	6862      	ldr	r2, [r4, #4]
 804afcc:	42a3      	cmp	r3, r4
 804afce:	bf0c      	ite	eq
 804afd0:	f8c8 2000 	streq.w	r2, [r8]
 804afd4:	605a      	strne	r2, [r3, #4]
 804afd6:	e7eb      	b.n	804afb0 <_malloc_r+0xa8>
 804afd8:	4623      	mov	r3, r4
 804afda:	6864      	ldr	r4, [r4, #4]
 804afdc:	e7ae      	b.n	804af3c <_malloc_r+0x34>
 804afde:	463c      	mov	r4, r7
 804afe0:	687f      	ldr	r7, [r7, #4]
 804afe2:	e7b6      	b.n	804af52 <_malloc_r+0x4a>
 804afe4:	461a      	mov	r2, r3
 804afe6:	685b      	ldr	r3, [r3, #4]
 804afe8:	42a3      	cmp	r3, r4
 804afea:	d1fb      	bne.n	804afe4 <_malloc_r+0xdc>
 804afec:	2300      	movs	r3, #0
 804afee:	6053      	str	r3, [r2, #4]
 804aff0:	e7de      	b.n	804afb0 <_malloc_r+0xa8>
 804aff2:	230c      	movs	r3, #12
 804aff4:	6033      	str	r3, [r6, #0]
 804aff6:	4630      	mov	r0, r6
 804aff8:	f000 f80c 	bl	804b014 <__malloc_unlock>
 804affc:	e794      	b.n	804af28 <_malloc_r+0x20>
 804affe:	6005      	str	r5, [r0, #0]
 804b000:	e7d6      	b.n	804afb0 <_malloc_r+0xa8>
 804b002:	bf00      	nop
 804b004:	24000d90 	.word	0x24000d90

0804b008 <__malloc_lock>:
 804b008:	4801      	ldr	r0, [pc, #4]	@ (804b010 <__malloc_lock+0x8>)
 804b00a:	f7ff bf0e 	b.w	804ae2a <__retarget_lock_acquire_recursive>
 804b00e:	bf00      	nop
 804b010:	24000d88 	.word	0x24000d88

0804b014 <__malloc_unlock>:
 804b014:	4801      	ldr	r0, [pc, #4]	@ (804b01c <__malloc_unlock+0x8>)
 804b016:	f7ff bf09 	b.w	804ae2c <__retarget_lock_release_recursive>
 804b01a:	bf00      	nop
 804b01c:	24000d88 	.word	0x24000d88

0804b020 <__sfputc_r>:
 804b020:	6893      	ldr	r3, [r2, #8]
 804b022:	3b01      	subs	r3, #1
 804b024:	2b00      	cmp	r3, #0
 804b026:	b410      	push	{r4}
 804b028:	6093      	str	r3, [r2, #8]
 804b02a:	da08      	bge.n	804b03e <__sfputc_r+0x1e>
 804b02c:	6994      	ldr	r4, [r2, #24]
 804b02e:	42a3      	cmp	r3, r4
 804b030:	db01      	blt.n	804b036 <__sfputc_r+0x16>
 804b032:	290a      	cmp	r1, #10
 804b034:	d103      	bne.n	804b03e <__sfputc_r+0x1e>
 804b036:	f85d 4b04 	ldr.w	r4, [sp], #4
 804b03a:	f000 bb6b 	b.w	804b714 <__swbuf_r>
 804b03e:	6813      	ldr	r3, [r2, #0]
 804b040:	1c58      	adds	r0, r3, #1
 804b042:	6010      	str	r0, [r2, #0]
 804b044:	7019      	strb	r1, [r3, #0]
 804b046:	4608      	mov	r0, r1
 804b048:	f85d 4b04 	ldr.w	r4, [sp], #4
 804b04c:	4770      	bx	lr

0804b04e <__sfputs_r>:
 804b04e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804b050:	4606      	mov	r6, r0
 804b052:	460f      	mov	r7, r1
 804b054:	4614      	mov	r4, r2
 804b056:	18d5      	adds	r5, r2, r3
 804b058:	42ac      	cmp	r4, r5
 804b05a:	d101      	bne.n	804b060 <__sfputs_r+0x12>
 804b05c:	2000      	movs	r0, #0
 804b05e:	e007      	b.n	804b070 <__sfputs_r+0x22>
 804b060:	f814 1b01 	ldrb.w	r1, [r4], #1
 804b064:	463a      	mov	r2, r7
 804b066:	4630      	mov	r0, r6
 804b068:	f7ff ffda 	bl	804b020 <__sfputc_r>
 804b06c:	1c43      	adds	r3, r0, #1
 804b06e:	d1f3      	bne.n	804b058 <__sfputs_r+0xa>
 804b070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804b074 <_vfiprintf_r>:
 804b074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b078:	460d      	mov	r5, r1
 804b07a:	b09d      	sub	sp, #116	@ 0x74
 804b07c:	4614      	mov	r4, r2
 804b07e:	4698      	mov	r8, r3
 804b080:	4606      	mov	r6, r0
 804b082:	b118      	cbz	r0, 804b08c <_vfiprintf_r+0x18>
 804b084:	6a03      	ldr	r3, [r0, #32]
 804b086:	b90b      	cbnz	r3, 804b08c <_vfiprintf_r+0x18>
 804b088:	f7ff fdca 	bl	804ac20 <__sinit>
 804b08c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 804b08e:	07d9      	lsls	r1, r3, #31
 804b090:	d405      	bmi.n	804b09e <_vfiprintf_r+0x2a>
 804b092:	89ab      	ldrh	r3, [r5, #12]
 804b094:	059a      	lsls	r2, r3, #22
 804b096:	d402      	bmi.n	804b09e <_vfiprintf_r+0x2a>
 804b098:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804b09a:	f7ff fec6 	bl	804ae2a <__retarget_lock_acquire_recursive>
 804b09e:	89ab      	ldrh	r3, [r5, #12]
 804b0a0:	071b      	lsls	r3, r3, #28
 804b0a2:	d501      	bpl.n	804b0a8 <_vfiprintf_r+0x34>
 804b0a4:	692b      	ldr	r3, [r5, #16]
 804b0a6:	b99b      	cbnz	r3, 804b0d0 <_vfiprintf_r+0x5c>
 804b0a8:	4629      	mov	r1, r5
 804b0aa:	4630      	mov	r0, r6
 804b0ac:	f000 fb70 	bl	804b790 <__swsetup_r>
 804b0b0:	b170      	cbz	r0, 804b0d0 <_vfiprintf_r+0x5c>
 804b0b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 804b0b4:	07dc      	lsls	r4, r3, #31
 804b0b6:	d504      	bpl.n	804b0c2 <_vfiprintf_r+0x4e>
 804b0b8:	f04f 30ff 	mov.w	r0, #4294967295
 804b0bc:	b01d      	add	sp, #116	@ 0x74
 804b0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804b0c2:	89ab      	ldrh	r3, [r5, #12]
 804b0c4:	0598      	lsls	r0, r3, #22
 804b0c6:	d4f7      	bmi.n	804b0b8 <_vfiprintf_r+0x44>
 804b0c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804b0ca:	f7ff feaf 	bl	804ae2c <__retarget_lock_release_recursive>
 804b0ce:	e7f3      	b.n	804b0b8 <_vfiprintf_r+0x44>
 804b0d0:	2300      	movs	r3, #0
 804b0d2:	9309      	str	r3, [sp, #36]	@ 0x24
 804b0d4:	2320      	movs	r3, #32
 804b0d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 804b0da:	f8cd 800c 	str.w	r8, [sp, #12]
 804b0de:	2330      	movs	r3, #48	@ 0x30
 804b0e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 804b290 <_vfiprintf_r+0x21c>
 804b0e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 804b0e8:	f04f 0901 	mov.w	r9, #1
 804b0ec:	4623      	mov	r3, r4
 804b0ee:	469a      	mov	sl, r3
 804b0f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 804b0f4:	b10a      	cbz	r2, 804b0fa <_vfiprintf_r+0x86>
 804b0f6:	2a25      	cmp	r2, #37	@ 0x25
 804b0f8:	d1f9      	bne.n	804b0ee <_vfiprintf_r+0x7a>
 804b0fa:	ebba 0b04 	subs.w	fp, sl, r4
 804b0fe:	d00b      	beq.n	804b118 <_vfiprintf_r+0xa4>
 804b100:	465b      	mov	r3, fp
 804b102:	4622      	mov	r2, r4
 804b104:	4629      	mov	r1, r5
 804b106:	4630      	mov	r0, r6
 804b108:	f7ff ffa1 	bl	804b04e <__sfputs_r>
 804b10c:	3001      	adds	r0, #1
 804b10e:	f000 80a7 	beq.w	804b260 <_vfiprintf_r+0x1ec>
 804b112:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 804b114:	445a      	add	r2, fp
 804b116:	9209      	str	r2, [sp, #36]	@ 0x24
 804b118:	f89a 3000 	ldrb.w	r3, [sl]
 804b11c:	2b00      	cmp	r3, #0
 804b11e:	f000 809f 	beq.w	804b260 <_vfiprintf_r+0x1ec>
 804b122:	2300      	movs	r3, #0
 804b124:	f04f 32ff 	mov.w	r2, #4294967295
 804b128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804b12c:	f10a 0a01 	add.w	sl, sl, #1
 804b130:	9304      	str	r3, [sp, #16]
 804b132:	9307      	str	r3, [sp, #28]
 804b134:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 804b138:	931a      	str	r3, [sp, #104]	@ 0x68
 804b13a:	4654      	mov	r4, sl
 804b13c:	2205      	movs	r2, #5
 804b13e:	f814 1b01 	ldrb.w	r1, [r4], #1
 804b142:	4853      	ldr	r0, [pc, #332]	@ (804b290 <_vfiprintf_r+0x21c>)
 804b144:	f7f5 f8cc 	bl	80402e0 <memchr>
 804b148:	9a04      	ldr	r2, [sp, #16]
 804b14a:	b9d8      	cbnz	r0, 804b184 <_vfiprintf_r+0x110>
 804b14c:	06d1      	lsls	r1, r2, #27
 804b14e:	bf44      	itt	mi
 804b150:	2320      	movmi	r3, #32
 804b152:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 804b156:	0713      	lsls	r3, r2, #28
 804b158:	bf44      	itt	mi
 804b15a:	232b      	movmi	r3, #43	@ 0x2b
 804b15c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 804b160:	f89a 3000 	ldrb.w	r3, [sl]
 804b164:	2b2a      	cmp	r3, #42	@ 0x2a
 804b166:	d015      	beq.n	804b194 <_vfiprintf_r+0x120>
 804b168:	9a07      	ldr	r2, [sp, #28]
 804b16a:	4654      	mov	r4, sl
 804b16c:	2000      	movs	r0, #0
 804b16e:	f04f 0c0a 	mov.w	ip, #10
 804b172:	4621      	mov	r1, r4
 804b174:	f811 3b01 	ldrb.w	r3, [r1], #1
 804b178:	3b30      	subs	r3, #48	@ 0x30
 804b17a:	2b09      	cmp	r3, #9
 804b17c:	d94b      	bls.n	804b216 <_vfiprintf_r+0x1a2>
 804b17e:	b1b0      	cbz	r0, 804b1ae <_vfiprintf_r+0x13a>
 804b180:	9207      	str	r2, [sp, #28]
 804b182:	e014      	b.n	804b1ae <_vfiprintf_r+0x13a>
 804b184:	eba0 0308 	sub.w	r3, r0, r8
 804b188:	fa09 f303 	lsl.w	r3, r9, r3
 804b18c:	4313      	orrs	r3, r2
 804b18e:	9304      	str	r3, [sp, #16]
 804b190:	46a2      	mov	sl, r4
 804b192:	e7d2      	b.n	804b13a <_vfiprintf_r+0xc6>
 804b194:	9b03      	ldr	r3, [sp, #12]
 804b196:	1d19      	adds	r1, r3, #4
 804b198:	681b      	ldr	r3, [r3, #0]
 804b19a:	9103      	str	r1, [sp, #12]
 804b19c:	2b00      	cmp	r3, #0
 804b19e:	bfbb      	ittet	lt
 804b1a0:	425b      	neglt	r3, r3
 804b1a2:	f042 0202 	orrlt.w	r2, r2, #2
 804b1a6:	9307      	strge	r3, [sp, #28]
 804b1a8:	9307      	strlt	r3, [sp, #28]
 804b1aa:	bfb8      	it	lt
 804b1ac:	9204      	strlt	r2, [sp, #16]
 804b1ae:	7823      	ldrb	r3, [r4, #0]
 804b1b0:	2b2e      	cmp	r3, #46	@ 0x2e
 804b1b2:	d10a      	bne.n	804b1ca <_vfiprintf_r+0x156>
 804b1b4:	7863      	ldrb	r3, [r4, #1]
 804b1b6:	2b2a      	cmp	r3, #42	@ 0x2a
 804b1b8:	d132      	bne.n	804b220 <_vfiprintf_r+0x1ac>
 804b1ba:	9b03      	ldr	r3, [sp, #12]
 804b1bc:	1d1a      	adds	r2, r3, #4
 804b1be:	681b      	ldr	r3, [r3, #0]
 804b1c0:	9203      	str	r2, [sp, #12]
 804b1c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 804b1c6:	3402      	adds	r4, #2
 804b1c8:	9305      	str	r3, [sp, #20]
 804b1ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 804b2a0 <_vfiprintf_r+0x22c>
 804b1ce:	7821      	ldrb	r1, [r4, #0]
 804b1d0:	2203      	movs	r2, #3
 804b1d2:	4650      	mov	r0, sl
 804b1d4:	f7f5 f884 	bl	80402e0 <memchr>
 804b1d8:	b138      	cbz	r0, 804b1ea <_vfiprintf_r+0x176>
 804b1da:	9b04      	ldr	r3, [sp, #16]
 804b1dc:	eba0 000a 	sub.w	r0, r0, sl
 804b1e0:	2240      	movs	r2, #64	@ 0x40
 804b1e2:	4082      	lsls	r2, r0
 804b1e4:	4313      	orrs	r3, r2
 804b1e6:	3401      	adds	r4, #1
 804b1e8:	9304      	str	r3, [sp, #16]
 804b1ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 804b1ee:	4829      	ldr	r0, [pc, #164]	@ (804b294 <_vfiprintf_r+0x220>)
 804b1f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 804b1f4:	2206      	movs	r2, #6
 804b1f6:	f7f5 f873 	bl	80402e0 <memchr>
 804b1fa:	2800      	cmp	r0, #0
 804b1fc:	d03f      	beq.n	804b27e <_vfiprintf_r+0x20a>
 804b1fe:	4b26      	ldr	r3, [pc, #152]	@ (804b298 <_vfiprintf_r+0x224>)
 804b200:	bb1b      	cbnz	r3, 804b24a <_vfiprintf_r+0x1d6>
 804b202:	9b03      	ldr	r3, [sp, #12]
 804b204:	3307      	adds	r3, #7
 804b206:	f023 0307 	bic.w	r3, r3, #7
 804b20a:	3308      	adds	r3, #8
 804b20c:	9303      	str	r3, [sp, #12]
 804b20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 804b210:	443b      	add	r3, r7
 804b212:	9309      	str	r3, [sp, #36]	@ 0x24
 804b214:	e76a      	b.n	804b0ec <_vfiprintf_r+0x78>
 804b216:	fb0c 3202 	mla	r2, ip, r2, r3
 804b21a:	460c      	mov	r4, r1
 804b21c:	2001      	movs	r0, #1
 804b21e:	e7a8      	b.n	804b172 <_vfiprintf_r+0xfe>
 804b220:	2300      	movs	r3, #0
 804b222:	3401      	adds	r4, #1
 804b224:	9305      	str	r3, [sp, #20]
 804b226:	4619      	mov	r1, r3
 804b228:	f04f 0c0a 	mov.w	ip, #10
 804b22c:	4620      	mov	r0, r4
 804b22e:	f810 2b01 	ldrb.w	r2, [r0], #1
 804b232:	3a30      	subs	r2, #48	@ 0x30
 804b234:	2a09      	cmp	r2, #9
 804b236:	d903      	bls.n	804b240 <_vfiprintf_r+0x1cc>
 804b238:	2b00      	cmp	r3, #0
 804b23a:	d0c6      	beq.n	804b1ca <_vfiprintf_r+0x156>
 804b23c:	9105      	str	r1, [sp, #20]
 804b23e:	e7c4      	b.n	804b1ca <_vfiprintf_r+0x156>
 804b240:	fb0c 2101 	mla	r1, ip, r1, r2
 804b244:	4604      	mov	r4, r0
 804b246:	2301      	movs	r3, #1
 804b248:	e7f0      	b.n	804b22c <_vfiprintf_r+0x1b8>
 804b24a:	ab03      	add	r3, sp, #12
 804b24c:	9300      	str	r3, [sp, #0]
 804b24e:	462a      	mov	r2, r5
 804b250:	4b12      	ldr	r3, [pc, #72]	@ (804b29c <_vfiprintf_r+0x228>)
 804b252:	a904      	add	r1, sp, #16
 804b254:	4630      	mov	r0, r6
 804b256:	f3af 8000 	nop.w
 804b25a:	4607      	mov	r7, r0
 804b25c:	1c78      	adds	r0, r7, #1
 804b25e:	d1d6      	bne.n	804b20e <_vfiprintf_r+0x19a>
 804b260:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 804b262:	07d9      	lsls	r1, r3, #31
 804b264:	d405      	bmi.n	804b272 <_vfiprintf_r+0x1fe>
 804b266:	89ab      	ldrh	r3, [r5, #12]
 804b268:	059a      	lsls	r2, r3, #22
 804b26a:	d402      	bmi.n	804b272 <_vfiprintf_r+0x1fe>
 804b26c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804b26e:	f7ff fddd 	bl	804ae2c <__retarget_lock_release_recursive>
 804b272:	89ab      	ldrh	r3, [r5, #12]
 804b274:	065b      	lsls	r3, r3, #25
 804b276:	f53f af1f 	bmi.w	804b0b8 <_vfiprintf_r+0x44>
 804b27a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 804b27c:	e71e      	b.n	804b0bc <_vfiprintf_r+0x48>
 804b27e:	ab03      	add	r3, sp, #12
 804b280:	9300      	str	r3, [sp, #0]
 804b282:	462a      	mov	r2, r5
 804b284:	4b05      	ldr	r3, [pc, #20]	@ (804b29c <_vfiprintf_r+0x228>)
 804b286:	a904      	add	r1, sp, #16
 804b288:	4630      	mov	r0, r6
 804b28a:	f000 f879 	bl	804b380 <_printf_i>
 804b28e:	e7e4      	b.n	804b25a <_vfiprintf_r+0x1e6>
 804b290:	0804ba68 	.word	0x0804ba68
 804b294:	0804ba72 	.word	0x0804ba72
 804b298:	00000000 	.word	0x00000000
 804b29c:	0804b04f 	.word	0x0804b04f
 804b2a0:	0804ba6e 	.word	0x0804ba6e

0804b2a4 <_printf_common>:
 804b2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804b2a8:	4616      	mov	r6, r2
 804b2aa:	4698      	mov	r8, r3
 804b2ac:	688a      	ldr	r2, [r1, #8]
 804b2ae:	690b      	ldr	r3, [r1, #16]
 804b2b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 804b2b4:	4293      	cmp	r3, r2
 804b2b6:	bfb8      	it	lt
 804b2b8:	4613      	movlt	r3, r2
 804b2ba:	6033      	str	r3, [r6, #0]
 804b2bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 804b2c0:	4607      	mov	r7, r0
 804b2c2:	460c      	mov	r4, r1
 804b2c4:	b10a      	cbz	r2, 804b2ca <_printf_common+0x26>
 804b2c6:	3301      	adds	r3, #1
 804b2c8:	6033      	str	r3, [r6, #0]
 804b2ca:	6823      	ldr	r3, [r4, #0]
 804b2cc:	0699      	lsls	r1, r3, #26
 804b2ce:	bf42      	ittt	mi
 804b2d0:	6833      	ldrmi	r3, [r6, #0]
 804b2d2:	3302      	addmi	r3, #2
 804b2d4:	6033      	strmi	r3, [r6, #0]
 804b2d6:	6825      	ldr	r5, [r4, #0]
 804b2d8:	f015 0506 	ands.w	r5, r5, #6
 804b2dc:	d106      	bne.n	804b2ec <_printf_common+0x48>
 804b2de:	f104 0a19 	add.w	sl, r4, #25
 804b2e2:	68e3      	ldr	r3, [r4, #12]
 804b2e4:	6832      	ldr	r2, [r6, #0]
 804b2e6:	1a9b      	subs	r3, r3, r2
 804b2e8:	42ab      	cmp	r3, r5
 804b2ea:	dc26      	bgt.n	804b33a <_printf_common+0x96>
 804b2ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 804b2f0:	6822      	ldr	r2, [r4, #0]
 804b2f2:	3b00      	subs	r3, #0
 804b2f4:	bf18      	it	ne
 804b2f6:	2301      	movne	r3, #1
 804b2f8:	0692      	lsls	r2, r2, #26
 804b2fa:	d42b      	bmi.n	804b354 <_printf_common+0xb0>
 804b2fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 804b300:	4641      	mov	r1, r8
 804b302:	4638      	mov	r0, r7
 804b304:	47c8      	blx	r9
 804b306:	3001      	adds	r0, #1
 804b308:	d01e      	beq.n	804b348 <_printf_common+0xa4>
 804b30a:	6823      	ldr	r3, [r4, #0]
 804b30c:	6922      	ldr	r2, [r4, #16]
 804b30e:	f003 0306 	and.w	r3, r3, #6
 804b312:	2b04      	cmp	r3, #4
 804b314:	bf02      	ittt	eq
 804b316:	68e5      	ldreq	r5, [r4, #12]
 804b318:	6833      	ldreq	r3, [r6, #0]
 804b31a:	1aed      	subeq	r5, r5, r3
 804b31c:	68a3      	ldr	r3, [r4, #8]
 804b31e:	bf0c      	ite	eq
 804b320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804b324:	2500      	movne	r5, #0
 804b326:	4293      	cmp	r3, r2
 804b328:	bfc4      	itt	gt
 804b32a:	1a9b      	subgt	r3, r3, r2
 804b32c:	18ed      	addgt	r5, r5, r3
 804b32e:	2600      	movs	r6, #0
 804b330:	341a      	adds	r4, #26
 804b332:	42b5      	cmp	r5, r6
 804b334:	d11a      	bne.n	804b36c <_printf_common+0xc8>
 804b336:	2000      	movs	r0, #0
 804b338:	e008      	b.n	804b34c <_printf_common+0xa8>
 804b33a:	2301      	movs	r3, #1
 804b33c:	4652      	mov	r2, sl
 804b33e:	4641      	mov	r1, r8
 804b340:	4638      	mov	r0, r7
 804b342:	47c8      	blx	r9
 804b344:	3001      	adds	r0, #1
 804b346:	d103      	bne.n	804b350 <_printf_common+0xac>
 804b348:	f04f 30ff 	mov.w	r0, #4294967295
 804b34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804b350:	3501      	adds	r5, #1
 804b352:	e7c6      	b.n	804b2e2 <_printf_common+0x3e>
 804b354:	18e1      	adds	r1, r4, r3
 804b356:	1c5a      	adds	r2, r3, #1
 804b358:	2030      	movs	r0, #48	@ 0x30
 804b35a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 804b35e:	4422      	add	r2, r4
 804b360:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 804b364:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 804b368:	3302      	adds	r3, #2
 804b36a:	e7c7      	b.n	804b2fc <_printf_common+0x58>
 804b36c:	2301      	movs	r3, #1
 804b36e:	4622      	mov	r2, r4
 804b370:	4641      	mov	r1, r8
 804b372:	4638      	mov	r0, r7
 804b374:	47c8      	blx	r9
 804b376:	3001      	adds	r0, #1
 804b378:	d0e6      	beq.n	804b348 <_printf_common+0xa4>
 804b37a:	3601      	adds	r6, #1
 804b37c:	e7d9      	b.n	804b332 <_printf_common+0x8e>
	...

0804b380 <_printf_i>:
 804b380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 804b384:	7e0f      	ldrb	r7, [r1, #24]
 804b386:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 804b388:	2f78      	cmp	r7, #120	@ 0x78
 804b38a:	4691      	mov	r9, r2
 804b38c:	4680      	mov	r8, r0
 804b38e:	460c      	mov	r4, r1
 804b390:	469a      	mov	sl, r3
 804b392:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 804b396:	d807      	bhi.n	804b3a8 <_printf_i+0x28>
 804b398:	2f62      	cmp	r7, #98	@ 0x62
 804b39a:	d80a      	bhi.n	804b3b2 <_printf_i+0x32>
 804b39c:	2f00      	cmp	r7, #0
 804b39e:	f000 80d1 	beq.w	804b544 <_printf_i+0x1c4>
 804b3a2:	2f58      	cmp	r7, #88	@ 0x58
 804b3a4:	f000 80b8 	beq.w	804b518 <_printf_i+0x198>
 804b3a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 804b3ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 804b3b0:	e03a      	b.n	804b428 <_printf_i+0xa8>
 804b3b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 804b3b6:	2b15      	cmp	r3, #21
 804b3b8:	d8f6      	bhi.n	804b3a8 <_printf_i+0x28>
 804b3ba:	a101      	add	r1, pc, #4	@ (adr r1, 804b3c0 <_printf_i+0x40>)
 804b3bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 804b3c0:	0804b419 	.word	0x0804b419
 804b3c4:	0804b42d 	.word	0x0804b42d
 804b3c8:	0804b3a9 	.word	0x0804b3a9
 804b3cc:	0804b3a9 	.word	0x0804b3a9
 804b3d0:	0804b3a9 	.word	0x0804b3a9
 804b3d4:	0804b3a9 	.word	0x0804b3a9
 804b3d8:	0804b42d 	.word	0x0804b42d
 804b3dc:	0804b3a9 	.word	0x0804b3a9
 804b3e0:	0804b3a9 	.word	0x0804b3a9
 804b3e4:	0804b3a9 	.word	0x0804b3a9
 804b3e8:	0804b3a9 	.word	0x0804b3a9
 804b3ec:	0804b52b 	.word	0x0804b52b
 804b3f0:	0804b457 	.word	0x0804b457
 804b3f4:	0804b4e5 	.word	0x0804b4e5
 804b3f8:	0804b3a9 	.word	0x0804b3a9
 804b3fc:	0804b3a9 	.word	0x0804b3a9
 804b400:	0804b54d 	.word	0x0804b54d
 804b404:	0804b3a9 	.word	0x0804b3a9
 804b408:	0804b457 	.word	0x0804b457
 804b40c:	0804b3a9 	.word	0x0804b3a9
 804b410:	0804b3a9 	.word	0x0804b3a9
 804b414:	0804b4ed 	.word	0x0804b4ed
 804b418:	6833      	ldr	r3, [r6, #0]
 804b41a:	1d1a      	adds	r2, r3, #4
 804b41c:	681b      	ldr	r3, [r3, #0]
 804b41e:	6032      	str	r2, [r6, #0]
 804b420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 804b424:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 804b428:	2301      	movs	r3, #1
 804b42a:	e09c      	b.n	804b566 <_printf_i+0x1e6>
 804b42c:	6833      	ldr	r3, [r6, #0]
 804b42e:	6820      	ldr	r0, [r4, #0]
 804b430:	1d19      	adds	r1, r3, #4
 804b432:	6031      	str	r1, [r6, #0]
 804b434:	0606      	lsls	r6, r0, #24
 804b436:	d501      	bpl.n	804b43c <_printf_i+0xbc>
 804b438:	681d      	ldr	r5, [r3, #0]
 804b43a:	e003      	b.n	804b444 <_printf_i+0xc4>
 804b43c:	0645      	lsls	r5, r0, #25
 804b43e:	d5fb      	bpl.n	804b438 <_printf_i+0xb8>
 804b440:	f9b3 5000 	ldrsh.w	r5, [r3]
 804b444:	2d00      	cmp	r5, #0
 804b446:	da03      	bge.n	804b450 <_printf_i+0xd0>
 804b448:	232d      	movs	r3, #45	@ 0x2d
 804b44a:	426d      	negs	r5, r5
 804b44c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 804b450:	4858      	ldr	r0, [pc, #352]	@ (804b5b4 <_printf_i+0x234>)
 804b452:	230a      	movs	r3, #10
 804b454:	e011      	b.n	804b47a <_printf_i+0xfa>
 804b456:	6821      	ldr	r1, [r4, #0]
 804b458:	6833      	ldr	r3, [r6, #0]
 804b45a:	0608      	lsls	r0, r1, #24
 804b45c:	f853 5b04 	ldr.w	r5, [r3], #4
 804b460:	d402      	bmi.n	804b468 <_printf_i+0xe8>
 804b462:	0649      	lsls	r1, r1, #25
 804b464:	bf48      	it	mi
 804b466:	b2ad      	uxthmi	r5, r5
 804b468:	2f6f      	cmp	r7, #111	@ 0x6f
 804b46a:	4852      	ldr	r0, [pc, #328]	@ (804b5b4 <_printf_i+0x234>)
 804b46c:	6033      	str	r3, [r6, #0]
 804b46e:	bf14      	ite	ne
 804b470:	230a      	movne	r3, #10
 804b472:	2308      	moveq	r3, #8
 804b474:	2100      	movs	r1, #0
 804b476:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 804b47a:	6866      	ldr	r6, [r4, #4]
 804b47c:	60a6      	str	r6, [r4, #8]
 804b47e:	2e00      	cmp	r6, #0
 804b480:	db05      	blt.n	804b48e <_printf_i+0x10e>
 804b482:	6821      	ldr	r1, [r4, #0]
 804b484:	432e      	orrs	r6, r5
 804b486:	f021 0104 	bic.w	r1, r1, #4
 804b48a:	6021      	str	r1, [r4, #0]
 804b48c:	d04b      	beq.n	804b526 <_printf_i+0x1a6>
 804b48e:	4616      	mov	r6, r2
 804b490:	fbb5 f1f3 	udiv	r1, r5, r3
 804b494:	fb03 5711 	mls	r7, r3, r1, r5
 804b498:	5dc7      	ldrb	r7, [r0, r7]
 804b49a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 804b49e:	462f      	mov	r7, r5
 804b4a0:	42bb      	cmp	r3, r7
 804b4a2:	460d      	mov	r5, r1
 804b4a4:	d9f4      	bls.n	804b490 <_printf_i+0x110>
 804b4a6:	2b08      	cmp	r3, #8
 804b4a8:	d10b      	bne.n	804b4c2 <_printf_i+0x142>
 804b4aa:	6823      	ldr	r3, [r4, #0]
 804b4ac:	07df      	lsls	r7, r3, #31
 804b4ae:	d508      	bpl.n	804b4c2 <_printf_i+0x142>
 804b4b0:	6923      	ldr	r3, [r4, #16]
 804b4b2:	6861      	ldr	r1, [r4, #4]
 804b4b4:	4299      	cmp	r1, r3
 804b4b6:	bfde      	ittt	le
 804b4b8:	2330      	movle	r3, #48	@ 0x30
 804b4ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 804b4be:	f106 36ff 	addle.w	r6, r6, #4294967295
 804b4c2:	1b92      	subs	r2, r2, r6
 804b4c4:	6122      	str	r2, [r4, #16]
 804b4c6:	f8cd a000 	str.w	sl, [sp]
 804b4ca:	464b      	mov	r3, r9
 804b4cc:	aa03      	add	r2, sp, #12
 804b4ce:	4621      	mov	r1, r4
 804b4d0:	4640      	mov	r0, r8
 804b4d2:	f7ff fee7 	bl	804b2a4 <_printf_common>
 804b4d6:	3001      	adds	r0, #1
 804b4d8:	d14a      	bne.n	804b570 <_printf_i+0x1f0>
 804b4da:	f04f 30ff 	mov.w	r0, #4294967295
 804b4de:	b004      	add	sp, #16
 804b4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804b4e4:	6823      	ldr	r3, [r4, #0]
 804b4e6:	f043 0320 	orr.w	r3, r3, #32
 804b4ea:	6023      	str	r3, [r4, #0]
 804b4ec:	4832      	ldr	r0, [pc, #200]	@ (804b5b8 <_printf_i+0x238>)
 804b4ee:	2778      	movs	r7, #120	@ 0x78
 804b4f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 804b4f4:	6823      	ldr	r3, [r4, #0]
 804b4f6:	6831      	ldr	r1, [r6, #0]
 804b4f8:	061f      	lsls	r7, r3, #24
 804b4fa:	f851 5b04 	ldr.w	r5, [r1], #4
 804b4fe:	d402      	bmi.n	804b506 <_printf_i+0x186>
 804b500:	065f      	lsls	r7, r3, #25
 804b502:	bf48      	it	mi
 804b504:	b2ad      	uxthmi	r5, r5
 804b506:	6031      	str	r1, [r6, #0]
 804b508:	07d9      	lsls	r1, r3, #31
 804b50a:	bf44      	itt	mi
 804b50c:	f043 0320 	orrmi.w	r3, r3, #32
 804b510:	6023      	strmi	r3, [r4, #0]
 804b512:	b11d      	cbz	r5, 804b51c <_printf_i+0x19c>
 804b514:	2310      	movs	r3, #16
 804b516:	e7ad      	b.n	804b474 <_printf_i+0xf4>
 804b518:	4826      	ldr	r0, [pc, #152]	@ (804b5b4 <_printf_i+0x234>)
 804b51a:	e7e9      	b.n	804b4f0 <_printf_i+0x170>
 804b51c:	6823      	ldr	r3, [r4, #0]
 804b51e:	f023 0320 	bic.w	r3, r3, #32
 804b522:	6023      	str	r3, [r4, #0]
 804b524:	e7f6      	b.n	804b514 <_printf_i+0x194>
 804b526:	4616      	mov	r6, r2
 804b528:	e7bd      	b.n	804b4a6 <_printf_i+0x126>
 804b52a:	6833      	ldr	r3, [r6, #0]
 804b52c:	6825      	ldr	r5, [r4, #0]
 804b52e:	6961      	ldr	r1, [r4, #20]
 804b530:	1d18      	adds	r0, r3, #4
 804b532:	6030      	str	r0, [r6, #0]
 804b534:	062e      	lsls	r6, r5, #24
 804b536:	681b      	ldr	r3, [r3, #0]
 804b538:	d501      	bpl.n	804b53e <_printf_i+0x1be>
 804b53a:	6019      	str	r1, [r3, #0]
 804b53c:	e002      	b.n	804b544 <_printf_i+0x1c4>
 804b53e:	0668      	lsls	r0, r5, #25
 804b540:	d5fb      	bpl.n	804b53a <_printf_i+0x1ba>
 804b542:	8019      	strh	r1, [r3, #0]
 804b544:	2300      	movs	r3, #0
 804b546:	6123      	str	r3, [r4, #16]
 804b548:	4616      	mov	r6, r2
 804b54a:	e7bc      	b.n	804b4c6 <_printf_i+0x146>
 804b54c:	6833      	ldr	r3, [r6, #0]
 804b54e:	1d1a      	adds	r2, r3, #4
 804b550:	6032      	str	r2, [r6, #0]
 804b552:	681e      	ldr	r6, [r3, #0]
 804b554:	6862      	ldr	r2, [r4, #4]
 804b556:	2100      	movs	r1, #0
 804b558:	4630      	mov	r0, r6
 804b55a:	f7f4 fec1 	bl	80402e0 <memchr>
 804b55e:	b108      	cbz	r0, 804b564 <_printf_i+0x1e4>
 804b560:	1b80      	subs	r0, r0, r6
 804b562:	6060      	str	r0, [r4, #4]
 804b564:	6863      	ldr	r3, [r4, #4]
 804b566:	6123      	str	r3, [r4, #16]
 804b568:	2300      	movs	r3, #0
 804b56a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 804b56e:	e7aa      	b.n	804b4c6 <_printf_i+0x146>
 804b570:	6923      	ldr	r3, [r4, #16]
 804b572:	4632      	mov	r2, r6
 804b574:	4649      	mov	r1, r9
 804b576:	4640      	mov	r0, r8
 804b578:	47d0      	blx	sl
 804b57a:	3001      	adds	r0, #1
 804b57c:	d0ad      	beq.n	804b4da <_printf_i+0x15a>
 804b57e:	6823      	ldr	r3, [r4, #0]
 804b580:	079b      	lsls	r3, r3, #30
 804b582:	d413      	bmi.n	804b5ac <_printf_i+0x22c>
 804b584:	68e0      	ldr	r0, [r4, #12]
 804b586:	9b03      	ldr	r3, [sp, #12]
 804b588:	4298      	cmp	r0, r3
 804b58a:	bfb8      	it	lt
 804b58c:	4618      	movlt	r0, r3
 804b58e:	e7a6      	b.n	804b4de <_printf_i+0x15e>
 804b590:	2301      	movs	r3, #1
 804b592:	4632      	mov	r2, r6
 804b594:	4649      	mov	r1, r9
 804b596:	4640      	mov	r0, r8
 804b598:	47d0      	blx	sl
 804b59a:	3001      	adds	r0, #1
 804b59c:	d09d      	beq.n	804b4da <_printf_i+0x15a>
 804b59e:	3501      	adds	r5, #1
 804b5a0:	68e3      	ldr	r3, [r4, #12]
 804b5a2:	9903      	ldr	r1, [sp, #12]
 804b5a4:	1a5b      	subs	r3, r3, r1
 804b5a6:	42ab      	cmp	r3, r5
 804b5a8:	dcf2      	bgt.n	804b590 <_printf_i+0x210>
 804b5aa:	e7eb      	b.n	804b584 <_printf_i+0x204>
 804b5ac:	2500      	movs	r5, #0
 804b5ae:	f104 0619 	add.w	r6, r4, #25
 804b5b2:	e7f5      	b.n	804b5a0 <_printf_i+0x220>
 804b5b4:	0804ba79 	.word	0x0804ba79
 804b5b8:	0804ba8a 	.word	0x0804ba8a

0804b5bc <__sflush_r>:
 804b5bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 804b5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804b5c4:	0716      	lsls	r6, r2, #28
 804b5c6:	4605      	mov	r5, r0
 804b5c8:	460c      	mov	r4, r1
 804b5ca:	d454      	bmi.n	804b676 <__sflush_r+0xba>
 804b5cc:	684b      	ldr	r3, [r1, #4]
 804b5ce:	2b00      	cmp	r3, #0
 804b5d0:	dc02      	bgt.n	804b5d8 <__sflush_r+0x1c>
 804b5d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 804b5d4:	2b00      	cmp	r3, #0
 804b5d6:	dd48      	ble.n	804b66a <__sflush_r+0xae>
 804b5d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 804b5da:	2e00      	cmp	r6, #0
 804b5dc:	d045      	beq.n	804b66a <__sflush_r+0xae>
 804b5de:	2300      	movs	r3, #0
 804b5e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 804b5e4:	682f      	ldr	r7, [r5, #0]
 804b5e6:	6a21      	ldr	r1, [r4, #32]
 804b5e8:	602b      	str	r3, [r5, #0]
 804b5ea:	d030      	beq.n	804b64e <__sflush_r+0x92>
 804b5ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 804b5ee:	89a3      	ldrh	r3, [r4, #12]
 804b5f0:	0759      	lsls	r1, r3, #29
 804b5f2:	d505      	bpl.n	804b600 <__sflush_r+0x44>
 804b5f4:	6863      	ldr	r3, [r4, #4]
 804b5f6:	1ad2      	subs	r2, r2, r3
 804b5f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 804b5fa:	b10b      	cbz	r3, 804b600 <__sflush_r+0x44>
 804b5fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 804b5fe:	1ad2      	subs	r2, r2, r3
 804b600:	2300      	movs	r3, #0
 804b602:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 804b604:	6a21      	ldr	r1, [r4, #32]
 804b606:	4628      	mov	r0, r5
 804b608:	47b0      	blx	r6
 804b60a:	1c43      	adds	r3, r0, #1
 804b60c:	89a3      	ldrh	r3, [r4, #12]
 804b60e:	d106      	bne.n	804b61e <__sflush_r+0x62>
 804b610:	6829      	ldr	r1, [r5, #0]
 804b612:	291d      	cmp	r1, #29
 804b614:	d82b      	bhi.n	804b66e <__sflush_r+0xb2>
 804b616:	4a2a      	ldr	r2, [pc, #168]	@ (804b6c0 <__sflush_r+0x104>)
 804b618:	40ca      	lsrs	r2, r1
 804b61a:	07d6      	lsls	r6, r2, #31
 804b61c:	d527      	bpl.n	804b66e <__sflush_r+0xb2>
 804b61e:	2200      	movs	r2, #0
 804b620:	6062      	str	r2, [r4, #4]
 804b622:	04d9      	lsls	r1, r3, #19
 804b624:	6922      	ldr	r2, [r4, #16]
 804b626:	6022      	str	r2, [r4, #0]
 804b628:	d504      	bpl.n	804b634 <__sflush_r+0x78>
 804b62a:	1c42      	adds	r2, r0, #1
 804b62c:	d101      	bne.n	804b632 <__sflush_r+0x76>
 804b62e:	682b      	ldr	r3, [r5, #0]
 804b630:	b903      	cbnz	r3, 804b634 <__sflush_r+0x78>
 804b632:	6560      	str	r0, [r4, #84]	@ 0x54
 804b634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 804b636:	602f      	str	r7, [r5, #0]
 804b638:	b1b9      	cbz	r1, 804b66a <__sflush_r+0xae>
 804b63a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 804b63e:	4299      	cmp	r1, r3
 804b640:	d002      	beq.n	804b648 <__sflush_r+0x8c>
 804b642:	4628      	mov	r0, r5
 804b644:	f7ff fbf4 	bl	804ae30 <_free_r>
 804b648:	2300      	movs	r3, #0
 804b64a:	6363      	str	r3, [r4, #52]	@ 0x34
 804b64c:	e00d      	b.n	804b66a <__sflush_r+0xae>
 804b64e:	2301      	movs	r3, #1
 804b650:	4628      	mov	r0, r5
 804b652:	47b0      	blx	r6
 804b654:	4602      	mov	r2, r0
 804b656:	1c50      	adds	r0, r2, #1
 804b658:	d1c9      	bne.n	804b5ee <__sflush_r+0x32>
 804b65a:	682b      	ldr	r3, [r5, #0]
 804b65c:	2b00      	cmp	r3, #0
 804b65e:	d0c6      	beq.n	804b5ee <__sflush_r+0x32>
 804b660:	2b1d      	cmp	r3, #29
 804b662:	d001      	beq.n	804b668 <__sflush_r+0xac>
 804b664:	2b16      	cmp	r3, #22
 804b666:	d11e      	bne.n	804b6a6 <__sflush_r+0xea>
 804b668:	602f      	str	r7, [r5, #0]
 804b66a:	2000      	movs	r0, #0
 804b66c:	e022      	b.n	804b6b4 <__sflush_r+0xf8>
 804b66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804b672:	b21b      	sxth	r3, r3
 804b674:	e01b      	b.n	804b6ae <__sflush_r+0xf2>
 804b676:	690f      	ldr	r7, [r1, #16]
 804b678:	2f00      	cmp	r7, #0
 804b67a:	d0f6      	beq.n	804b66a <__sflush_r+0xae>
 804b67c:	0793      	lsls	r3, r2, #30
 804b67e:	680e      	ldr	r6, [r1, #0]
 804b680:	bf08      	it	eq
 804b682:	694b      	ldreq	r3, [r1, #20]
 804b684:	600f      	str	r7, [r1, #0]
 804b686:	bf18      	it	ne
 804b688:	2300      	movne	r3, #0
 804b68a:	eba6 0807 	sub.w	r8, r6, r7
 804b68e:	608b      	str	r3, [r1, #8]
 804b690:	f1b8 0f00 	cmp.w	r8, #0
 804b694:	dde9      	ble.n	804b66a <__sflush_r+0xae>
 804b696:	6a21      	ldr	r1, [r4, #32]
 804b698:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 804b69a:	4643      	mov	r3, r8
 804b69c:	463a      	mov	r2, r7
 804b69e:	4628      	mov	r0, r5
 804b6a0:	47b0      	blx	r6
 804b6a2:	2800      	cmp	r0, #0
 804b6a4:	dc08      	bgt.n	804b6b8 <__sflush_r+0xfc>
 804b6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804b6aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804b6ae:	81a3      	strh	r3, [r4, #12]
 804b6b0:	f04f 30ff 	mov.w	r0, #4294967295
 804b6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804b6b8:	4407      	add	r7, r0
 804b6ba:	eba8 0800 	sub.w	r8, r8, r0
 804b6be:	e7e7      	b.n	804b690 <__sflush_r+0xd4>
 804b6c0:	20400001 	.word	0x20400001

0804b6c4 <_fflush_r>:
 804b6c4:	b538      	push	{r3, r4, r5, lr}
 804b6c6:	690b      	ldr	r3, [r1, #16]
 804b6c8:	4605      	mov	r5, r0
 804b6ca:	460c      	mov	r4, r1
 804b6cc:	b913      	cbnz	r3, 804b6d4 <_fflush_r+0x10>
 804b6ce:	2500      	movs	r5, #0
 804b6d0:	4628      	mov	r0, r5
 804b6d2:	bd38      	pop	{r3, r4, r5, pc}
 804b6d4:	b118      	cbz	r0, 804b6de <_fflush_r+0x1a>
 804b6d6:	6a03      	ldr	r3, [r0, #32]
 804b6d8:	b90b      	cbnz	r3, 804b6de <_fflush_r+0x1a>
 804b6da:	f7ff faa1 	bl	804ac20 <__sinit>
 804b6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804b6e2:	2b00      	cmp	r3, #0
 804b6e4:	d0f3      	beq.n	804b6ce <_fflush_r+0xa>
 804b6e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 804b6e8:	07d0      	lsls	r0, r2, #31
 804b6ea:	d404      	bmi.n	804b6f6 <_fflush_r+0x32>
 804b6ec:	0599      	lsls	r1, r3, #22
 804b6ee:	d402      	bmi.n	804b6f6 <_fflush_r+0x32>
 804b6f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 804b6f2:	f7ff fb9a 	bl	804ae2a <__retarget_lock_acquire_recursive>
 804b6f6:	4628      	mov	r0, r5
 804b6f8:	4621      	mov	r1, r4
 804b6fa:	f7ff ff5f 	bl	804b5bc <__sflush_r>
 804b6fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 804b700:	07da      	lsls	r2, r3, #31
 804b702:	4605      	mov	r5, r0
 804b704:	d4e4      	bmi.n	804b6d0 <_fflush_r+0xc>
 804b706:	89a3      	ldrh	r3, [r4, #12]
 804b708:	059b      	lsls	r3, r3, #22
 804b70a:	d4e1      	bmi.n	804b6d0 <_fflush_r+0xc>
 804b70c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 804b70e:	f7ff fb8d 	bl	804ae2c <__retarget_lock_release_recursive>
 804b712:	e7dd      	b.n	804b6d0 <_fflush_r+0xc>

0804b714 <__swbuf_r>:
 804b714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804b716:	460e      	mov	r6, r1
 804b718:	4614      	mov	r4, r2
 804b71a:	4605      	mov	r5, r0
 804b71c:	b118      	cbz	r0, 804b726 <__swbuf_r+0x12>
 804b71e:	6a03      	ldr	r3, [r0, #32]
 804b720:	b90b      	cbnz	r3, 804b726 <__swbuf_r+0x12>
 804b722:	f7ff fa7d 	bl	804ac20 <__sinit>
 804b726:	69a3      	ldr	r3, [r4, #24]
 804b728:	60a3      	str	r3, [r4, #8]
 804b72a:	89a3      	ldrh	r3, [r4, #12]
 804b72c:	071a      	lsls	r2, r3, #28
 804b72e:	d501      	bpl.n	804b734 <__swbuf_r+0x20>
 804b730:	6923      	ldr	r3, [r4, #16]
 804b732:	b943      	cbnz	r3, 804b746 <__swbuf_r+0x32>
 804b734:	4621      	mov	r1, r4
 804b736:	4628      	mov	r0, r5
 804b738:	f000 f82a 	bl	804b790 <__swsetup_r>
 804b73c:	b118      	cbz	r0, 804b746 <__swbuf_r+0x32>
 804b73e:	f04f 37ff 	mov.w	r7, #4294967295
 804b742:	4638      	mov	r0, r7
 804b744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804b746:	6823      	ldr	r3, [r4, #0]
 804b748:	6922      	ldr	r2, [r4, #16]
 804b74a:	1a98      	subs	r0, r3, r2
 804b74c:	6963      	ldr	r3, [r4, #20]
 804b74e:	b2f6      	uxtb	r6, r6
 804b750:	4283      	cmp	r3, r0
 804b752:	4637      	mov	r7, r6
 804b754:	dc05      	bgt.n	804b762 <__swbuf_r+0x4e>
 804b756:	4621      	mov	r1, r4
 804b758:	4628      	mov	r0, r5
 804b75a:	f7ff ffb3 	bl	804b6c4 <_fflush_r>
 804b75e:	2800      	cmp	r0, #0
 804b760:	d1ed      	bne.n	804b73e <__swbuf_r+0x2a>
 804b762:	68a3      	ldr	r3, [r4, #8]
 804b764:	3b01      	subs	r3, #1
 804b766:	60a3      	str	r3, [r4, #8]
 804b768:	6823      	ldr	r3, [r4, #0]
 804b76a:	1c5a      	adds	r2, r3, #1
 804b76c:	6022      	str	r2, [r4, #0]
 804b76e:	701e      	strb	r6, [r3, #0]
 804b770:	6962      	ldr	r2, [r4, #20]
 804b772:	1c43      	adds	r3, r0, #1
 804b774:	429a      	cmp	r2, r3
 804b776:	d004      	beq.n	804b782 <__swbuf_r+0x6e>
 804b778:	89a3      	ldrh	r3, [r4, #12]
 804b77a:	07db      	lsls	r3, r3, #31
 804b77c:	d5e1      	bpl.n	804b742 <__swbuf_r+0x2e>
 804b77e:	2e0a      	cmp	r6, #10
 804b780:	d1df      	bne.n	804b742 <__swbuf_r+0x2e>
 804b782:	4621      	mov	r1, r4
 804b784:	4628      	mov	r0, r5
 804b786:	f7ff ff9d 	bl	804b6c4 <_fflush_r>
 804b78a:	2800      	cmp	r0, #0
 804b78c:	d0d9      	beq.n	804b742 <__swbuf_r+0x2e>
 804b78e:	e7d6      	b.n	804b73e <__swbuf_r+0x2a>

0804b790 <__swsetup_r>:
 804b790:	b538      	push	{r3, r4, r5, lr}
 804b792:	4b29      	ldr	r3, [pc, #164]	@ (804b838 <__swsetup_r+0xa8>)
 804b794:	4605      	mov	r5, r0
 804b796:	6818      	ldr	r0, [r3, #0]
 804b798:	460c      	mov	r4, r1
 804b79a:	b118      	cbz	r0, 804b7a4 <__swsetup_r+0x14>
 804b79c:	6a03      	ldr	r3, [r0, #32]
 804b79e:	b90b      	cbnz	r3, 804b7a4 <__swsetup_r+0x14>
 804b7a0:	f7ff fa3e 	bl	804ac20 <__sinit>
 804b7a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804b7a8:	0719      	lsls	r1, r3, #28
 804b7aa:	d422      	bmi.n	804b7f2 <__swsetup_r+0x62>
 804b7ac:	06da      	lsls	r2, r3, #27
 804b7ae:	d407      	bmi.n	804b7c0 <__swsetup_r+0x30>
 804b7b0:	2209      	movs	r2, #9
 804b7b2:	602a      	str	r2, [r5, #0]
 804b7b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804b7b8:	81a3      	strh	r3, [r4, #12]
 804b7ba:	f04f 30ff 	mov.w	r0, #4294967295
 804b7be:	e033      	b.n	804b828 <__swsetup_r+0x98>
 804b7c0:	0758      	lsls	r0, r3, #29
 804b7c2:	d512      	bpl.n	804b7ea <__swsetup_r+0x5a>
 804b7c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 804b7c6:	b141      	cbz	r1, 804b7da <__swsetup_r+0x4a>
 804b7c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 804b7cc:	4299      	cmp	r1, r3
 804b7ce:	d002      	beq.n	804b7d6 <__swsetup_r+0x46>
 804b7d0:	4628      	mov	r0, r5
 804b7d2:	f7ff fb2d 	bl	804ae30 <_free_r>
 804b7d6:	2300      	movs	r3, #0
 804b7d8:	6363      	str	r3, [r4, #52]	@ 0x34
 804b7da:	89a3      	ldrh	r3, [r4, #12]
 804b7dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 804b7e0:	81a3      	strh	r3, [r4, #12]
 804b7e2:	2300      	movs	r3, #0
 804b7e4:	6063      	str	r3, [r4, #4]
 804b7e6:	6923      	ldr	r3, [r4, #16]
 804b7e8:	6023      	str	r3, [r4, #0]
 804b7ea:	89a3      	ldrh	r3, [r4, #12]
 804b7ec:	f043 0308 	orr.w	r3, r3, #8
 804b7f0:	81a3      	strh	r3, [r4, #12]
 804b7f2:	6923      	ldr	r3, [r4, #16]
 804b7f4:	b94b      	cbnz	r3, 804b80a <__swsetup_r+0x7a>
 804b7f6:	89a3      	ldrh	r3, [r4, #12]
 804b7f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 804b7fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 804b800:	d003      	beq.n	804b80a <__swsetup_r+0x7a>
 804b802:	4621      	mov	r1, r4
 804b804:	4628      	mov	r0, r5
 804b806:	f000 f84f 	bl	804b8a8 <__smakebuf_r>
 804b80a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804b80e:	f013 0201 	ands.w	r2, r3, #1
 804b812:	d00a      	beq.n	804b82a <__swsetup_r+0x9a>
 804b814:	2200      	movs	r2, #0
 804b816:	60a2      	str	r2, [r4, #8]
 804b818:	6962      	ldr	r2, [r4, #20]
 804b81a:	4252      	negs	r2, r2
 804b81c:	61a2      	str	r2, [r4, #24]
 804b81e:	6922      	ldr	r2, [r4, #16]
 804b820:	b942      	cbnz	r2, 804b834 <__swsetup_r+0xa4>
 804b822:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 804b826:	d1c5      	bne.n	804b7b4 <__swsetup_r+0x24>
 804b828:	bd38      	pop	{r3, r4, r5, pc}
 804b82a:	0799      	lsls	r1, r3, #30
 804b82c:	bf58      	it	pl
 804b82e:	6962      	ldrpl	r2, [r4, #20]
 804b830:	60a2      	str	r2, [r4, #8]
 804b832:	e7f4      	b.n	804b81e <__swsetup_r+0x8e>
 804b834:	2000      	movs	r0, #0
 804b836:	e7f7      	b.n	804b828 <__swsetup_r+0x98>
 804b838:	24000130 	.word	0x24000130

0804b83c <_sbrk_r>:
 804b83c:	b538      	push	{r3, r4, r5, lr}
 804b83e:	4d06      	ldr	r5, [pc, #24]	@ (804b858 <_sbrk_r+0x1c>)
 804b840:	2300      	movs	r3, #0
 804b842:	4604      	mov	r4, r0
 804b844:	4608      	mov	r0, r1
 804b846:	602b      	str	r3, [r5, #0]
 804b848:	f7f5 fbde 	bl	8041008 <_sbrk>
 804b84c:	1c43      	adds	r3, r0, #1
 804b84e:	d102      	bne.n	804b856 <_sbrk_r+0x1a>
 804b850:	682b      	ldr	r3, [r5, #0]
 804b852:	b103      	cbz	r3, 804b856 <_sbrk_r+0x1a>
 804b854:	6023      	str	r3, [r4, #0]
 804b856:	bd38      	pop	{r3, r4, r5, pc}
 804b858:	24000d84 	.word	0x24000d84

0804b85c <__swhatbuf_r>:
 804b85c:	b570      	push	{r4, r5, r6, lr}
 804b85e:	460c      	mov	r4, r1
 804b860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804b864:	2900      	cmp	r1, #0
 804b866:	b096      	sub	sp, #88	@ 0x58
 804b868:	4615      	mov	r5, r2
 804b86a:	461e      	mov	r6, r3
 804b86c:	da0d      	bge.n	804b88a <__swhatbuf_r+0x2e>
 804b86e:	89a3      	ldrh	r3, [r4, #12]
 804b870:	f013 0f80 	tst.w	r3, #128	@ 0x80
 804b874:	f04f 0100 	mov.w	r1, #0
 804b878:	bf14      	ite	ne
 804b87a:	2340      	movne	r3, #64	@ 0x40
 804b87c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 804b880:	2000      	movs	r0, #0
 804b882:	6031      	str	r1, [r6, #0]
 804b884:	602b      	str	r3, [r5, #0]
 804b886:	b016      	add	sp, #88	@ 0x58
 804b888:	bd70      	pop	{r4, r5, r6, pc}
 804b88a:	466a      	mov	r2, sp
 804b88c:	f000 f848 	bl	804b920 <_fstat_r>
 804b890:	2800      	cmp	r0, #0
 804b892:	dbec      	blt.n	804b86e <__swhatbuf_r+0x12>
 804b894:	9901      	ldr	r1, [sp, #4]
 804b896:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 804b89a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 804b89e:	4259      	negs	r1, r3
 804b8a0:	4159      	adcs	r1, r3
 804b8a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 804b8a6:	e7eb      	b.n	804b880 <__swhatbuf_r+0x24>

0804b8a8 <__smakebuf_r>:
 804b8a8:	898b      	ldrh	r3, [r1, #12]
 804b8aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804b8ac:	079d      	lsls	r5, r3, #30
 804b8ae:	4606      	mov	r6, r0
 804b8b0:	460c      	mov	r4, r1
 804b8b2:	d507      	bpl.n	804b8c4 <__smakebuf_r+0x1c>
 804b8b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 804b8b8:	6023      	str	r3, [r4, #0]
 804b8ba:	6123      	str	r3, [r4, #16]
 804b8bc:	2301      	movs	r3, #1
 804b8be:	6163      	str	r3, [r4, #20]
 804b8c0:	b003      	add	sp, #12
 804b8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804b8c4:	ab01      	add	r3, sp, #4
 804b8c6:	466a      	mov	r2, sp
 804b8c8:	f7ff ffc8 	bl	804b85c <__swhatbuf_r>
 804b8cc:	9f00      	ldr	r7, [sp, #0]
 804b8ce:	4605      	mov	r5, r0
 804b8d0:	4639      	mov	r1, r7
 804b8d2:	4630      	mov	r0, r6
 804b8d4:	f7ff fb18 	bl	804af08 <_malloc_r>
 804b8d8:	b948      	cbnz	r0, 804b8ee <__smakebuf_r+0x46>
 804b8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804b8de:	059a      	lsls	r2, r3, #22
 804b8e0:	d4ee      	bmi.n	804b8c0 <__smakebuf_r+0x18>
 804b8e2:	f023 0303 	bic.w	r3, r3, #3
 804b8e6:	f043 0302 	orr.w	r3, r3, #2
 804b8ea:	81a3      	strh	r3, [r4, #12]
 804b8ec:	e7e2      	b.n	804b8b4 <__smakebuf_r+0xc>
 804b8ee:	89a3      	ldrh	r3, [r4, #12]
 804b8f0:	6020      	str	r0, [r4, #0]
 804b8f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 804b8f6:	81a3      	strh	r3, [r4, #12]
 804b8f8:	9b01      	ldr	r3, [sp, #4]
 804b8fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 804b8fe:	b15b      	cbz	r3, 804b918 <__smakebuf_r+0x70>
 804b900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804b904:	4630      	mov	r0, r6
 804b906:	f000 f81d 	bl	804b944 <_isatty_r>
 804b90a:	b128      	cbz	r0, 804b918 <__smakebuf_r+0x70>
 804b90c:	89a3      	ldrh	r3, [r4, #12]
 804b90e:	f023 0303 	bic.w	r3, r3, #3
 804b912:	f043 0301 	orr.w	r3, r3, #1
 804b916:	81a3      	strh	r3, [r4, #12]
 804b918:	89a3      	ldrh	r3, [r4, #12]
 804b91a:	431d      	orrs	r5, r3
 804b91c:	81a5      	strh	r5, [r4, #12]
 804b91e:	e7cf      	b.n	804b8c0 <__smakebuf_r+0x18>

0804b920 <_fstat_r>:
 804b920:	b538      	push	{r3, r4, r5, lr}
 804b922:	4d07      	ldr	r5, [pc, #28]	@ (804b940 <_fstat_r+0x20>)
 804b924:	2300      	movs	r3, #0
 804b926:	4604      	mov	r4, r0
 804b928:	4608      	mov	r0, r1
 804b92a:	4611      	mov	r1, r2
 804b92c:	602b      	str	r3, [r5, #0]
 804b92e:	f7f5 fb42 	bl	8040fb6 <_fstat>
 804b932:	1c43      	adds	r3, r0, #1
 804b934:	d102      	bne.n	804b93c <_fstat_r+0x1c>
 804b936:	682b      	ldr	r3, [r5, #0]
 804b938:	b103      	cbz	r3, 804b93c <_fstat_r+0x1c>
 804b93a:	6023      	str	r3, [r4, #0]
 804b93c:	bd38      	pop	{r3, r4, r5, pc}
 804b93e:	bf00      	nop
 804b940:	24000d84 	.word	0x24000d84

0804b944 <_isatty_r>:
 804b944:	b538      	push	{r3, r4, r5, lr}
 804b946:	4d06      	ldr	r5, [pc, #24]	@ (804b960 <_isatty_r+0x1c>)
 804b948:	2300      	movs	r3, #0
 804b94a:	4604      	mov	r4, r0
 804b94c:	4608      	mov	r0, r1
 804b94e:	602b      	str	r3, [r5, #0]
 804b950:	f7f5 fb41 	bl	8040fd6 <_isatty>
 804b954:	1c43      	adds	r3, r0, #1
 804b956:	d102      	bne.n	804b95e <_isatty_r+0x1a>
 804b958:	682b      	ldr	r3, [r5, #0]
 804b95a:	b103      	cbz	r3, 804b95e <_isatty_r+0x1a>
 804b95c:	6023      	str	r3, [r4, #0]
 804b95e:	bd38      	pop	{r3, r4, r5, pc}
 804b960:	24000d84 	.word	0x24000d84

0804b964 <_init>:
 804b964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804b966:	bf00      	nop
 804b968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804b96a:	bc08      	pop	{r3}
 804b96c:	469e      	mov	lr, r3
 804b96e:	4770      	bx	lr

0804b970 <_fini>:
 804b970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804b972:	bf00      	nop
 804b974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804b976:	bc08      	pop	{r3}
 804b978:	469e      	mov	lr, r3
 804b97a:	4770      	bx	lr
