
h7_bootloader_application_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5a8  080402a0  080402a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0804b848  0804b848  0000c848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804b934  0804b934  0000d180  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0804b934  0804b934  0000c934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804b93c  0804b93c  0000d180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804b93c  0804b93c  0000c93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0804b940  0804b940  0000c940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  24000000  0804b944  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c00  24000180  0804bac4  0000d180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000d80  0804bac4  0000dd80  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acf7  00000000  00000000  0000d1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d94  00000000  00000000  00027ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  0002bc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec7  00000000  00000000  0002cfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042fdc  00000000  00000000  0002de8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb2b  00000000  00000000  00070e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019c5f4  00000000  00000000  0008c996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00228f8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057a4  00000000  00000000  00228fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0022e774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080402a0 <__do_global_dtors_aux>:
 80402a0:	b510      	push	{r4, lr}
 80402a2:	4c05      	ldr	r4, [pc, #20]	@ (80402b8 <__do_global_dtors_aux+0x18>)
 80402a4:	7823      	ldrb	r3, [r4, #0]
 80402a6:	b933      	cbnz	r3, 80402b6 <__do_global_dtors_aux+0x16>
 80402a8:	4b04      	ldr	r3, [pc, #16]	@ (80402bc <__do_global_dtors_aux+0x1c>)
 80402aa:	b113      	cbz	r3, 80402b2 <__do_global_dtors_aux+0x12>
 80402ac:	4804      	ldr	r0, [pc, #16]	@ (80402c0 <__do_global_dtors_aux+0x20>)
 80402ae:	f3af 8000 	nop.w
 80402b2:	2301      	movs	r3, #1
 80402b4:	7023      	strb	r3, [r4, #0]
 80402b6:	bd10      	pop	{r4, pc}
 80402b8:	24000180 	.word	0x24000180
 80402bc:	00000000 	.word	0x00000000
 80402c0:	0804b830 	.word	0x0804b830

080402c4 <frame_dummy>:
 80402c4:	b508      	push	{r3, lr}
 80402c6:	4b03      	ldr	r3, [pc, #12]	@ (80402d4 <frame_dummy+0x10>)
 80402c8:	b11b      	cbz	r3, 80402d2 <frame_dummy+0xe>
 80402ca:	4903      	ldr	r1, [pc, #12]	@ (80402d8 <frame_dummy+0x14>)
 80402cc:	4803      	ldr	r0, [pc, #12]	@ (80402dc <frame_dummy+0x18>)
 80402ce:	f3af 8000 	nop.w
 80402d2:	bd08      	pop	{r3, pc}
 80402d4:	00000000 	.word	0x00000000
 80402d8:	24000184 	.word	0x24000184
 80402dc:	0804b830 	.word	0x0804b830

080402e0 <memchr>:
 80402e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80402e4:	2a10      	cmp	r2, #16
 80402e6:	db2b      	blt.n	8040340 <memchr+0x60>
 80402e8:	f010 0f07 	tst.w	r0, #7
 80402ec:	d008      	beq.n	8040300 <memchr+0x20>
 80402ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80402f2:	3a01      	subs	r2, #1
 80402f4:	428b      	cmp	r3, r1
 80402f6:	d02d      	beq.n	8040354 <memchr+0x74>
 80402f8:	f010 0f07 	tst.w	r0, #7
 80402fc:	b342      	cbz	r2, 8040350 <memchr+0x70>
 80402fe:	d1f6      	bne.n	80402ee <memchr+0xe>
 8040300:	b4f0      	push	{r4, r5, r6, r7}
 8040302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804030a:	f022 0407 	bic.w	r4, r2, #7
 804030e:	f07f 0700 	mvns.w	r7, #0
 8040312:	2300      	movs	r3, #0
 8040314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040318:	3c08      	subs	r4, #8
 804031a:	ea85 0501 	eor.w	r5, r5, r1
 804031e:	ea86 0601 	eor.w	r6, r6, r1
 8040322:	fa85 f547 	uadd8	r5, r5, r7
 8040326:	faa3 f587 	sel	r5, r3, r7
 804032a:	fa86 f647 	uadd8	r6, r6, r7
 804032e:	faa5 f687 	sel	r6, r5, r7
 8040332:	b98e      	cbnz	r6, 8040358 <memchr+0x78>
 8040334:	d1ee      	bne.n	8040314 <memchr+0x34>
 8040336:	bcf0      	pop	{r4, r5, r6, r7}
 8040338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 804033c:	f002 0207 	and.w	r2, r2, #7
 8040340:	b132      	cbz	r2, 8040350 <memchr+0x70>
 8040342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040346:	3a01      	subs	r2, #1
 8040348:	ea83 0301 	eor.w	r3, r3, r1
 804034c:	b113      	cbz	r3, 8040354 <memchr+0x74>
 804034e:	d1f8      	bne.n	8040342 <memchr+0x62>
 8040350:	2000      	movs	r0, #0
 8040352:	4770      	bx	lr
 8040354:	3801      	subs	r0, #1
 8040356:	4770      	bx	lr
 8040358:	2d00      	cmp	r5, #0
 804035a:	bf06      	itte	eq
 804035c:	4635      	moveq	r5, r6
 804035e:	3803      	subeq	r0, #3
 8040360:	3807      	subne	r0, #7
 8040362:	f015 0f01 	tst.w	r5, #1
 8040366:	d107      	bne.n	8040378 <memchr+0x98>
 8040368:	3001      	adds	r0, #1
 804036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 804036e:	bf02      	ittt	eq
 8040370:	3001      	addeq	r0, #1
 8040372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8040376:	3001      	addeq	r0, #1
 8040378:	bcf0      	pop	{r4, r5, r6, r7}
 804037a:	3801      	subs	r0, #1
 804037c:	4770      	bx	lr
 804037e:	bf00      	nop

08040380 <__aeabi_uldivmod>:
 8040380:	b953      	cbnz	r3, 8040398 <__aeabi_uldivmod+0x18>
 8040382:	b94a      	cbnz	r2, 8040398 <__aeabi_uldivmod+0x18>
 8040384:	2900      	cmp	r1, #0
 8040386:	bf08      	it	eq
 8040388:	2800      	cmpeq	r0, #0
 804038a:	bf1c      	itt	ne
 804038c:	f04f 31ff 	movne.w	r1, #4294967295
 8040390:	f04f 30ff 	movne.w	r0, #4294967295
 8040394:	f000 b988 	b.w	80406a8 <__aeabi_idiv0>
 8040398:	f1ad 0c08 	sub.w	ip, sp, #8
 804039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80403a0:	f000 f806 	bl	80403b0 <__udivmoddi4>
 80403a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80403a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80403ac:	b004      	add	sp, #16
 80403ae:	4770      	bx	lr

080403b0 <__udivmoddi4>:
 80403b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80403b4:	9d08      	ldr	r5, [sp, #32]
 80403b6:	468e      	mov	lr, r1
 80403b8:	4604      	mov	r4, r0
 80403ba:	4688      	mov	r8, r1
 80403bc:	2b00      	cmp	r3, #0
 80403be:	d14a      	bne.n	8040456 <__udivmoddi4+0xa6>
 80403c0:	428a      	cmp	r2, r1
 80403c2:	4617      	mov	r7, r2
 80403c4:	d962      	bls.n	804048c <__udivmoddi4+0xdc>
 80403c6:	fab2 f682 	clz	r6, r2
 80403ca:	b14e      	cbz	r6, 80403e0 <__udivmoddi4+0x30>
 80403cc:	f1c6 0320 	rsb	r3, r6, #32
 80403d0:	fa01 f806 	lsl.w	r8, r1, r6
 80403d4:	fa20 f303 	lsr.w	r3, r0, r3
 80403d8:	40b7      	lsls	r7, r6
 80403da:	ea43 0808 	orr.w	r8, r3, r8
 80403de:	40b4      	lsls	r4, r6
 80403e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80403e4:	fa1f fc87 	uxth.w	ip, r7
 80403e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80403ec:	0c23      	lsrs	r3, r4, #16
 80403ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80403f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80403f6:	fb01 f20c 	mul.w	r2, r1, ip
 80403fa:	429a      	cmp	r2, r3
 80403fc:	d909      	bls.n	8040412 <__udivmoddi4+0x62>
 80403fe:	18fb      	adds	r3, r7, r3
 8040400:	f101 30ff 	add.w	r0, r1, #4294967295
 8040404:	f080 80ea 	bcs.w	80405dc <__udivmoddi4+0x22c>
 8040408:	429a      	cmp	r2, r3
 804040a:	f240 80e7 	bls.w	80405dc <__udivmoddi4+0x22c>
 804040e:	3902      	subs	r1, #2
 8040410:	443b      	add	r3, r7
 8040412:	1a9a      	subs	r2, r3, r2
 8040414:	b2a3      	uxth	r3, r4
 8040416:	fbb2 f0fe 	udiv	r0, r2, lr
 804041a:	fb0e 2210 	mls	r2, lr, r0, r2
 804041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8040422:	fb00 fc0c 	mul.w	ip, r0, ip
 8040426:	459c      	cmp	ip, r3
 8040428:	d909      	bls.n	804043e <__udivmoddi4+0x8e>
 804042a:	18fb      	adds	r3, r7, r3
 804042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8040430:	f080 80d6 	bcs.w	80405e0 <__udivmoddi4+0x230>
 8040434:	459c      	cmp	ip, r3
 8040436:	f240 80d3 	bls.w	80405e0 <__udivmoddi4+0x230>
 804043a:	443b      	add	r3, r7
 804043c:	3802      	subs	r0, #2
 804043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8040442:	eba3 030c 	sub.w	r3, r3, ip
 8040446:	2100      	movs	r1, #0
 8040448:	b11d      	cbz	r5, 8040452 <__udivmoddi4+0xa2>
 804044a:	40f3      	lsrs	r3, r6
 804044c:	2200      	movs	r2, #0
 804044e:	e9c5 3200 	strd	r3, r2, [r5]
 8040452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040456:	428b      	cmp	r3, r1
 8040458:	d905      	bls.n	8040466 <__udivmoddi4+0xb6>
 804045a:	b10d      	cbz	r5, 8040460 <__udivmoddi4+0xb0>
 804045c:	e9c5 0100 	strd	r0, r1, [r5]
 8040460:	2100      	movs	r1, #0
 8040462:	4608      	mov	r0, r1
 8040464:	e7f5      	b.n	8040452 <__udivmoddi4+0xa2>
 8040466:	fab3 f183 	clz	r1, r3
 804046a:	2900      	cmp	r1, #0
 804046c:	d146      	bne.n	80404fc <__udivmoddi4+0x14c>
 804046e:	4573      	cmp	r3, lr
 8040470:	d302      	bcc.n	8040478 <__udivmoddi4+0xc8>
 8040472:	4282      	cmp	r2, r0
 8040474:	f200 8105 	bhi.w	8040682 <__udivmoddi4+0x2d2>
 8040478:	1a84      	subs	r4, r0, r2
 804047a:	eb6e 0203 	sbc.w	r2, lr, r3
 804047e:	2001      	movs	r0, #1
 8040480:	4690      	mov	r8, r2
 8040482:	2d00      	cmp	r5, #0
 8040484:	d0e5      	beq.n	8040452 <__udivmoddi4+0xa2>
 8040486:	e9c5 4800 	strd	r4, r8, [r5]
 804048a:	e7e2      	b.n	8040452 <__udivmoddi4+0xa2>
 804048c:	2a00      	cmp	r2, #0
 804048e:	f000 8090 	beq.w	80405b2 <__udivmoddi4+0x202>
 8040492:	fab2 f682 	clz	r6, r2
 8040496:	2e00      	cmp	r6, #0
 8040498:	f040 80a4 	bne.w	80405e4 <__udivmoddi4+0x234>
 804049c:	1a8a      	subs	r2, r1, r2
 804049e:	0c03      	lsrs	r3, r0, #16
 80404a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80404a4:	b280      	uxth	r0, r0
 80404a6:	b2bc      	uxth	r4, r7
 80404a8:	2101      	movs	r1, #1
 80404aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80404ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80404b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80404b6:	fb04 f20c 	mul.w	r2, r4, ip
 80404ba:	429a      	cmp	r2, r3
 80404bc:	d907      	bls.n	80404ce <__udivmoddi4+0x11e>
 80404be:	18fb      	adds	r3, r7, r3
 80404c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80404c4:	d202      	bcs.n	80404cc <__udivmoddi4+0x11c>
 80404c6:	429a      	cmp	r2, r3
 80404c8:	f200 80e0 	bhi.w	804068c <__udivmoddi4+0x2dc>
 80404cc:	46c4      	mov	ip, r8
 80404ce:	1a9b      	subs	r3, r3, r2
 80404d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80404d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80404d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80404dc:	fb02 f404 	mul.w	r4, r2, r4
 80404e0:	429c      	cmp	r4, r3
 80404e2:	d907      	bls.n	80404f4 <__udivmoddi4+0x144>
 80404e4:	18fb      	adds	r3, r7, r3
 80404e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80404ea:	d202      	bcs.n	80404f2 <__udivmoddi4+0x142>
 80404ec:	429c      	cmp	r4, r3
 80404ee:	f200 80ca 	bhi.w	8040686 <__udivmoddi4+0x2d6>
 80404f2:	4602      	mov	r2, r0
 80404f4:	1b1b      	subs	r3, r3, r4
 80404f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80404fa:	e7a5      	b.n	8040448 <__udivmoddi4+0x98>
 80404fc:	f1c1 0620 	rsb	r6, r1, #32
 8040500:	408b      	lsls	r3, r1
 8040502:	fa22 f706 	lsr.w	r7, r2, r6
 8040506:	431f      	orrs	r7, r3
 8040508:	fa0e f401 	lsl.w	r4, lr, r1
 804050c:	fa20 f306 	lsr.w	r3, r0, r6
 8040510:	fa2e fe06 	lsr.w	lr, lr, r6
 8040514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8040518:	4323      	orrs	r3, r4
 804051a:	fa00 f801 	lsl.w	r8, r0, r1
 804051e:	fa1f fc87 	uxth.w	ip, r7
 8040522:	fbbe f0f9 	udiv	r0, lr, r9
 8040526:	0c1c      	lsrs	r4, r3, #16
 8040528:	fb09 ee10 	mls	lr, r9, r0, lr
 804052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8040530:	fb00 fe0c 	mul.w	lr, r0, ip
 8040534:	45a6      	cmp	lr, r4
 8040536:	fa02 f201 	lsl.w	r2, r2, r1
 804053a:	d909      	bls.n	8040550 <__udivmoddi4+0x1a0>
 804053c:	193c      	adds	r4, r7, r4
 804053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8040542:	f080 809c 	bcs.w	804067e <__udivmoddi4+0x2ce>
 8040546:	45a6      	cmp	lr, r4
 8040548:	f240 8099 	bls.w	804067e <__udivmoddi4+0x2ce>
 804054c:	3802      	subs	r0, #2
 804054e:	443c      	add	r4, r7
 8040550:	eba4 040e 	sub.w	r4, r4, lr
 8040554:	fa1f fe83 	uxth.w	lr, r3
 8040558:	fbb4 f3f9 	udiv	r3, r4, r9
 804055c:	fb09 4413 	mls	r4, r9, r3, r4
 8040560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8040564:	fb03 fc0c 	mul.w	ip, r3, ip
 8040568:	45a4      	cmp	ip, r4
 804056a:	d908      	bls.n	804057e <__udivmoddi4+0x1ce>
 804056c:	193c      	adds	r4, r7, r4
 804056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8040572:	f080 8082 	bcs.w	804067a <__udivmoddi4+0x2ca>
 8040576:	45a4      	cmp	ip, r4
 8040578:	d97f      	bls.n	804067a <__udivmoddi4+0x2ca>
 804057a:	3b02      	subs	r3, #2
 804057c:	443c      	add	r4, r7
 804057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8040582:	eba4 040c 	sub.w	r4, r4, ip
 8040586:	fba0 ec02 	umull	lr, ip, r0, r2
 804058a:	4564      	cmp	r4, ip
 804058c:	4673      	mov	r3, lr
 804058e:	46e1      	mov	r9, ip
 8040590:	d362      	bcc.n	8040658 <__udivmoddi4+0x2a8>
 8040592:	d05f      	beq.n	8040654 <__udivmoddi4+0x2a4>
 8040594:	b15d      	cbz	r5, 80405ae <__udivmoddi4+0x1fe>
 8040596:	ebb8 0203 	subs.w	r2, r8, r3
 804059a:	eb64 0409 	sbc.w	r4, r4, r9
 804059e:	fa04 f606 	lsl.w	r6, r4, r6
 80405a2:	fa22 f301 	lsr.w	r3, r2, r1
 80405a6:	431e      	orrs	r6, r3
 80405a8:	40cc      	lsrs	r4, r1
 80405aa:	e9c5 6400 	strd	r6, r4, [r5]
 80405ae:	2100      	movs	r1, #0
 80405b0:	e74f      	b.n	8040452 <__udivmoddi4+0xa2>
 80405b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80405b6:	0c01      	lsrs	r1, r0, #16
 80405b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80405bc:	b280      	uxth	r0, r0
 80405be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80405c2:	463b      	mov	r3, r7
 80405c4:	4638      	mov	r0, r7
 80405c6:	463c      	mov	r4, r7
 80405c8:	46b8      	mov	r8, r7
 80405ca:	46be      	mov	lr, r7
 80405cc:	2620      	movs	r6, #32
 80405ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80405d2:	eba2 0208 	sub.w	r2, r2, r8
 80405d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80405da:	e766      	b.n	80404aa <__udivmoddi4+0xfa>
 80405dc:	4601      	mov	r1, r0
 80405de:	e718      	b.n	8040412 <__udivmoddi4+0x62>
 80405e0:	4610      	mov	r0, r2
 80405e2:	e72c      	b.n	804043e <__udivmoddi4+0x8e>
 80405e4:	f1c6 0220 	rsb	r2, r6, #32
 80405e8:	fa2e f302 	lsr.w	r3, lr, r2
 80405ec:	40b7      	lsls	r7, r6
 80405ee:	40b1      	lsls	r1, r6
 80405f0:	fa20 f202 	lsr.w	r2, r0, r2
 80405f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80405f8:	430a      	orrs	r2, r1
 80405fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80405fe:	b2bc      	uxth	r4, r7
 8040600:	fb0e 3318 	mls	r3, lr, r8, r3
 8040604:	0c11      	lsrs	r1, r2, #16
 8040606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 804060a:	fb08 f904 	mul.w	r9, r8, r4
 804060e:	40b0      	lsls	r0, r6
 8040610:	4589      	cmp	r9, r1
 8040612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8040616:	b280      	uxth	r0, r0
 8040618:	d93e      	bls.n	8040698 <__udivmoddi4+0x2e8>
 804061a:	1879      	adds	r1, r7, r1
 804061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8040620:	d201      	bcs.n	8040626 <__udivmoddi4+0x276>
 8040622:	4589      	cmp	r9, r1
 8040624:	d81f      	bhi.n	8040666 <__udivmoddi4+0x2b6>
 8040626:	eba1 0109 	sub.w	r1, r1, r9
 804062a:	fbb1 f9fe 	udiv	r9, r1, lr
 804062e:	fb09 f804 	mul.w	r8, r9, r4
 8040632:	fb0e 1119 	mls	r1, lr, r9, r1
 8040636:	b292      	uxth	r2, r2
 8040638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 804063c:	4542      	cmp	r2, r8
 804063e:	d229      	bcs.n	8040694 <__udivmoddi4+0x2e4>
 8040640:	18ba      	adds	r2, r7, r2
 8040642:	f109 31ff 	add.w	r1, r9, #4294967295
 8040646:	d2c4      	bcs.n	80405d2 <__udivmoddi4+0x222>
 8040648:	4542      	cmp	r2, r8
 804064a:	d2c2      	bcs.n	80405d2 <__udivmoddi4+0x222>
 804064c:	f1a9 0102 	sub.w	r1, r9, #2
 8040650:	443a      	add	r2, r7
 8040652:	e7be      	b.n	80405d2 <__udivmoddi4+0x222>
 8040654:	45f0      	cmp	r8, lr
 8040656:	d29d      	bcs.n	8040594 <__udivmoddi4+0x1e4>
 8040658:	ebbe 0302 	subs.w	r3, lr, r2
 804065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8040660:	3801      	subs	r0, #1
 8040662:	46e1      	mov	r9, ip
 8040664:	e796      	b.n	8040594 <__udivmoddi4+0x1e4>
 8040666:	eba7 0909 	sub.w	r9, r7, r9
 804066a:	4449      	add	r1, r9
 804066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8040670:	fbb1 f9fe 	udiv	r9, r1, lr
 8040674:	fb09 f804 	mul.w	r8, r9, r4
 8040678:	e7db      	b.n	8040632 <__udivmoddi4+0x282>
 804067a:	4673      	mov	r3, lr
 804067c:	e77f      	b.n	804057e <__udivmoddi4+0x1ce>
 804067e:	4650      	mov	r0, sl
 8040680:	e766      	b.n	8040550 <__udivmoddi4+0x1a0>
 8040682:	4608      	mov	r0, r1
 8040684:	e6fd      	b.n	8040482 <__udivmoddi4+0xd2>
 8040686:	443b      	add	r3, r7
 8040688:	3a02      	subs	r2, #2
 804068a:	e733      	b.n	80404f4 <__udivmoddi4+0x144>
 804068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8040690:	443b      	add	r3, r7
 8040692:	e71c      	b.n	80404ce <__udivmoddi4+0x11e>
 8040694:	4649      	mov	r1, r9
 8040696:	e79c      	b.n	80405d2 <__udivmoddi4+0x222>
 8040698:	eba1 0109 	sub.w	r1, r1, r9
 804069c:	46c4      	mov	ip, r8
 804069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80406a2:	fb09 f804 	mul.w	r8, r9, r4
 80406a6:	e7c4      	b.n	8040632 <__udivmoddi4+0x282>

080406a8 <__aeabi_idiv0>:
 80406a8:	4770      	bx	lr
 80406aa:	bf00      	nop

080406ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80406ac:	b480      	push	{r7}
 80406ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80406b0:	4b4a      	ldr	r3, [pc, #296]	@ (80407dc <SystemInit+0x130>)
 80406b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80406b6:	4a49      	ldr	r2, [pc, #292]	@ (80407dc <SystemInit+0x130>)
 80406b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80406bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80406c0:	4b46      	ldr	r3, [pc, #280]	@ (80407dc <SystemInit+0x130>)
 80406c2:	691b      	ldr	r3, [r3, #16]
 80406c4:	4a45      	ldr	r2, [pc, #276]	@ (80407dc <SystemInit+0x130>)
 80406c6:	f043 0310 	orr.w	r3, r3, #16
 80406ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80406cc:	4b44      	ldr	r3, [pc, #272]	@ (80407e0 <SystemInit+0x134>)
 80406ce:	681b      	ldr	r3, [r3, #0]
 80406d0:	f003 030f 	and.w	r3, r3, #15
 80406d4:	2b06      	cmp	r3, #6
 80406d6:	d807      	bhi.n	80406e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80406d8:	4b41      	ldr	r3, [pc, #260]	@ (80407e0 <SystemInit+0x134>)
 80406da:	681b      	ldr	r3, [r3, #0]
 80406dc:	f023 030f 	bic.w	r3, r3, #15
 80406e0:	4a3f      	ldr	r2, [pc, #252]	@ (80407e0 <SystemInit+0x134>)
 80406e2:	f043 0307 	orr.w	r3, r3, #7
 80406e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80406e8:	4b3e      	ldr	r3, [pc, #248]	@ (80407e4 <SystemInit+0x138>)
 80406ea:	681b      	ldr	r3, [r3, #0]
 80406ec:	4a3d      	ldr	r2, [pc, #244]	@ (80407e4 <SystemInit+0x138>)
 80406ee:	f043 0301 	orr.w	r3, r3, #1
 80406f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80406f4:	4b3b      	ldr	r3, [pc, #236]	@ (80407e4 <SystemInit+0x138>)
 80406f6:	2200      	movs	r2, #0
 80406f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80406fa:	4b3a      	ldr	r3, [pc, #232]	@ (80407e4 <SystemInit+0x138>)
 80406fc:	681a      	ldr	r2, [r3, #0]
 80406fe:	4939      	ldr	r1, [pc, #228]	@ (80407e4 <SystemInit+0x138>)
 8040700:	4b39      	ldr	r3, [pc, #228]	@ (80407e8 <SystemInit+0x13c>)
 8040702:	4013      	ands	r3, r2
 8040704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8040706:	4b36      	ldr	r3, [pc, #216]	@ (80407e0 <SystemInit+0x134>)
 8040708:	681b      	ldr	r3, [r3, #0]
 804070a:	f003 0308 	and.w	r3, r3, #8
 804070e:	2b00      	cmp	r3, #0
 8040710:	d007      	beq.n	8040722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8040712:	4b33      	ldr	r3, [pc, #204]	@ (80407e0 <SystemInit+0x134>)
 8040714:	681b      	ldr	r3, [r3, #0]
 8040716:	f023 030f 	bic.w	r3, r3, #15
 804071a:	4a31      	ldr	r2, [pc, #196]	@ (80407e0 <SystemInit+0x134>)
 804071c:	f043 0307 	orr.w	r3, r3, #7
 8040720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8040722:	4b30      	ldr	r3, [pc, #192]	@ (80407e4 <SystemInit+0x138>)
 8040724:	2200      	movs	r2, #0
 8040726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8040728:	4b2e      	ldr	r3, [pc, #184]	@ (80407e4 <SystemInit+0x138>)
 804072a:	2200      	movs	r2, #0
 804072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 804072e:	4b2d      	ldr	r3, [pc, #180]	@ (80407e4 <SystemInit+0x138>)
 8040730:	2200      	movs	r2, #0
 8040732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8040734:	4b2b      	ldr	r3, [pc, #172]	@ (80407e4 <SystemInit+0x138>)
 8040736:	4a2d      	ldr	r2, [pc, #180]	@ (80407ec <SystemInit+0x140>)
 8040738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 804073a:	4b2a      	ldr	r3, [pc, #168]	@ (80407e4 <SystemInit+0x138>)
 804073c:	4a2c      	ldr	r2, [pc, #176]	@ (80407f0 <SystemInit+0x144>)
 804073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8040740:	4b28      	ldr	r3, [pc, #160]	@ (80407e4 <SystemInit+0x138>)
 8040742:	4a2c      	ldr	r2, [pc, #176]	@ (80407f4 <SystemInit+0x148>)
 8040744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8040746:	4b27      	ldr	r3, [pc, #156]	@ (80407e4 <SystemInit+0x138>)
 8040748:	2200      	movs	r2, #0
 804074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 804074c:	4b25      	ldr	r3, [pc, #148]	@ (80407e4 <SystemInit+0x138>)
 804074e:	4a29      	ldr	r2, [pc, #164]	@ (80407f4 <SystemInit+0x148>)
 8040750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8040752:	4b24      	ldr	r3, [pc, #144]	@ (80407e4 <SystemInit+0x138>)
 8040754:	2200      	movs	r2, #0
 8040756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8040758:	4b22      	ldr	r3, [pc, #136]	@ (80407e4 <SystemInit+0x138>)
 804075a:	4a26      	ldr	r2, [pc, #152]	@ (80407f4 <SystemInit+0x148>)
 804075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 804075e:	4b21      	ldr	r3, [pc, #132]	@ (80407e4 <SystemInit+0x138>)
 8040760:	2200      	movs	r2, #0
 8040762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8040764:	4b1f      	ldr	r3, [pc, #124]	@ (80407e4 <SystemInit+0x138>)
 8040766:	681b      	ldr	r3, [r3, #0]
 8040768:	4a1e      	ldr	r2, [pc, #120]	@ (80407e4 <SystemInit+0x138>)
 804076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 804076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8040770:	4b1c      	ldr	r3, [pc, #112]	@ (80407e4 <SystemInit+0x138>)
 8040772:	2200      	movs	r2, #0
 8040774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8040776:	4b20      	ldr	r3, [pc, #128]	@ (80407f8 <SystemInit+0x14c>)
 8040778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804077a:	4a1f      	ldr	r2, [pc, #124]	@ (80407f8 <SystemInit+0x14c>)
 804077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8040780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8040782:	4b1e      	ldr	r3, [pc, #120]	@ (80407fc <SystemInit+0x150>)
 8040784:	681a      	ldr	r2, [r3, #0]
 8040786:	4b1e      	ldr	r3, [pc, #120]	@ (8040800 <SystemInit+0x154>)
 8040788:	4013      	ands	r3, r2
 804078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 804078e:	d202      	bcs.n	8040796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8040790:	4b1c      	ldr	r3, [pc, #112]	@ (8040804 <SystemInit+0x158>)
 8040792:	2201      	movs	r2, #1
 8040794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8040796:	4b13      	ldr	r3, [pc, #76]	@ (80407e4 <SystemInit+0x138>)
 8040798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 804079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80407a0:	2b00      	cmp	r3, #0
 80407a2:	d113      	bne.n	80407cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80407a4:	4b0f      	ldr	r3, [pc, #60]	@ (80407e4 <SystemInit+0x138>)
 80407a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80407aa:	4a0e      	ldr	r2, [pc, #56]	@ (80407e4 <SystemInit+0x138>)
 80407ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80407b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80407b4:	4b14      	ldr	r3, [pc, #80]	@ (8040808 <SystemInit+0x15c>)
 80407b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80407ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80407bc:	4b09      	ldr	r3, [pc, #36]	@ (80407e4 <SystemInit+0x138>)
 80407be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80407c2:	4a08      	ldr	r2, [pc, #32]	@ (80407e4 <SystemInit+0x138>)
 80407c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80407c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  }

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 80407cc:	4b03      	ldr	r3, [pc, #12]	@ (80407dc <SystemInit+0x130>)
 80407ce:	4a0f      	ldr	r2, [pc, #60]	@ (804080c <SystemInit+0x160>)
 80407d0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80407d2:	bf00      	nop
 80407d4:	46bd      	mov	sp, r7
 80407d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407da:	4770      	bx	lr
 80407dc:	e000ed00 	.word	0xe000ed00
 80407e0:	52002000 	.word	0x52002000
 80407e4:	58024400 	.word	0x58024400
 80407e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80407ec:	02020200 	.word	0x02020200
 80407f0:	01ff0000 	.word	0x01ff0000
 80407f4:	01010280 	.word	0x01010280
 80407f8:	580000c0 	.word	0x580000c0
 80407fc:	5c001000 	.word	0x5c001000
 8040800:	ffff0000 	.word	0xffff0000
 8040804:	51008108 	.word	0x51008108
 8040808:	52004000 	.word	0x52004000
 804080c:	08040000 	.word	0x08040000

08040810 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8040810:	b480      	push	{r7}
 8040812:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8040814:	4b09      	ldr	r3, [pc, #36]	@ (804083c <ExitRun0Mode+0x2c>)
 8040816:	68db      	ldr	r3, [r3, #12]
 8040818:	4a08      	ldr	r2, [pc, #32]	@ (804083c <ExitRun0Mode+0x2c>)
 804081a:	f023 0302 	bic.w	r3, r3, #2
 804081e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8040820:	bf00      	nop
 8040822:	4b06      	ldr	r3, [pc, #24]	@ (804083c <ExitRun0Mode+0x2c>)
 8040824:	685b      	ldr	r3, [r3, #4]
 8040826:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 804082a:	2b00      	cmp	r3, #0
 804082c:	d0f9      	beq.n	8040822 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 804082e:	bf00      	nop
 8040830:	bf00      	nop
 8040832:	46bd      	mov	sp, r7
 8040834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040838:	4770      	bx	lr
 804083a:	bf00      	nop
 804083c:	58024800 	.word	0x58024800

08040840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040840:	b580      	push	{r7, lr}
 8040842:	b082      	sub	sp, #8
 8040844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	 printf("inside the primary region \n\r");
 8040846:	481a      	ldr	r0, [pc, #104]	@ (80408b0 <main+0x70>)
 8040848:	f00a f986 	bl	804ab58 <iprintf>
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 804084c:	f000 fbbe 	bl	8040fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040850:	f000 f836 	bl	80408c0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8040854:	f000 f8ba 	bl	80409cc <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8040858:	4b16      	ldr	r3, [pc, #88]	@ (80408b4 <main+0x74>)
 804085a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804085e:	4a15      	ldr	r2, [pc, #84]	@ (80408b4 <main+0x74>)
 8040860:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8040864:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040868:	4b12      	ldr	r3, [pc, #72]	@ (80408b4 <main+0x74>)
 804086a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804086e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8040872:	607b      	str	r3, [r7, #4]
 8040874:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8040876:	2000      	movs	r0, #0
 8040878:	f001 f850 	bl	804191c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 804087c:	2100      	movs	r1, #0
 804087e:	2000      	movs	r0, #0
 8040880:	f001 f866 	bl	8041950 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040884:	f000 f940 	bl	8040b08 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8040888:	f000 f8f2 	bl	8040a70 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 804088c:	f009 fb90 	bl	8049fb0 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8040890:	f000 f8cc 	bl	8040a2c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  printf("Firmware Application \n\r");
 8040894:	4808      	ldr	r0, [pc, #32]	@ (80408b8 <main+0x78>)
 8040896:	f00a f95f 	bl	804ab58 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11); // Toggle PA11
 804089a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 804089e:	4807      	ldr	r0, [pc, #28]	@ (80408bc <main+0x7c>)
 80408a0:	f001 f821 	bl	80418e6 <HAL_GPIO_TogglePin>
      HAL_Delay(100); // Delay for 500 ms
 80408a4:	2064      	movs	r0, #100	@ 0x64
 80408a6:	f000 fc23 	bl	80410f0 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11); // Toggle PA11
 80408aa:	bf00      	nop
 80408ac:	e7f5      	b.n	804089a <main+0x5a>
 80408ae:	bf00      	nop
 80408b0:	0804b848 	.word	0x0804b848
 80408b4:	58024400 	.word	0x58024400
 80408b8:	0804b868 	.word	0x0804b868
 80408bc:	58020000 	.word	0x58020000

080408c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80408c0:	b580      	push	{r7, lr}
 80408c2:	b09c      	sub	sp, #112	@ 0x70
 80408c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80408c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80408ca:	224c      	movs	r2, #76	@ 0x4c
 80408cc:	2100      	movs	r1, #0
 80408ce:	4618      	mov	r0, r3
 80408d0:	f00a f997 	bl	804ac02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80408d4:	1d3b      	adds	r3, r7, #4
 80408d6:	2220      	movs	r2, #32
 80408d8:	2100      	movs	r1, #0
 80408da:	4618      	mov	r0, r3
 80408dc:	f00a f991 	bl	804ac02 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80408e0:	2004      	movs	r0, #4
 80408e2:	f002 fad1 	bl	8042e88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80408e6:	2300      	movs	r3, #0
 80408e8:	603b      	str	r3, [r7, #0]
 80408ea:	4b36      	ldr	r3, [pc, #216]	@ (80409c4 <SystemClock_Config+0x104>)
 80408ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80408ee:	4a35      	ldr	r2, [pc, #212]	@ (80409c4 <SystemClock_Config+0x104>)
 80408f0:	f023 0301 	bic.w	r3, r3, #1
 80408f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80408f6:	4b33      	ldr	r3, [pc, #204]	@ (80409c4 <SystemClock_Config+0x104>)
 80408f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80408fa:	f003 0301 	and.w	r3, r3, #1
 80408fe:	603b      	str	r3, [r7, #0]
 8040900:	4b31      	ldr	r3, [pc, #196]	@ (80409c8 <SystemClock_Config+0x108>)
 8040902:	699b      	ldr	r3, [r3, #24]
 8040904:	4a30      	ldr	r2, [pc, #192]	@ (80409c8 <SystemClock_Config+0x108>)
 8040906:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 804090a:	6193      	str	r3, [r2, #24]
 804090c:	4b2e      	ldr	r3, [pc, #184]	@ (80409c8 <SystemClock_Config+0x108>)
 804090e:	699b      	ldr	r3, [r3, #24]
 8040910:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8040914:	603b      	str	r3, [r7, #0]
 8040916:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8040918:	bf00      	nop
 804091a:	4b2b      	ldr	r3, [pc, #172]	@ (80409c8 <SystemClock_Config+0x108>)
 804091c:	699b      	ldr	r3, [r3, #24]
 804091e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8040922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8040926:	d1f8      	bne.n	804091a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8040928:	230b      	movs	r3, #11
 804092a:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 804092c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8040930:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8040932:	2301      	movs	r3, #1
 8040934:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8040936:	2340      	movs	r3, #64	@ 0x40
 8040938:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 804093a:	2301      	movs	r3, #1
 804093c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804093e:	2302      	movs	r3, #2
 8040940:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8040942:	2302      	movs	r3, #2
 8040944:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8040946:	2305      	movs	r3, #5
 8040948:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 804094a:	2330      	movs	r3, #48	@ 0x30
 804094c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 804094e:	2302      	movs	r3, #2
 8040950:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8040952:	2305      	movs	r3, #5
 8040954:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8040956:	2302      	movs	r3, #2
 8040958:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 804095a:	2308      	movs	r3, #8
 804095c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 804095e:	2300      	movs	r3, #0
 8040960:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8040962:	2300      	movs	r3, #0
 8040964:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 804096a:	4618      	mov	r0, r3
 804096c:	f002 faf6 	bl	8042f5c <HAL_RCC_OscConfig>
 8040970:	4603      	mov	r3, r0
 8040972:	2b00      	cmp	r3, #0
 8040974:	d001      	beq.n	804097a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8040976:	f000 f94b 	bl	8040c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 804097a:	233f      	movs	r3, #63	@ 0x3f
 804097c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 804097e:	2300      	movs	r3, #0
 8040980:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8040982:	2300      	movs	r3, #0
 8040984:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8040986:	2300      	movs	r3, #0
 8040988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 804098a:	2300      	movs	r3, #0
 804098c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 804098e:	2300      	movs	r3, #0
 8040990:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8040992:	2300      	movs	r3, #0
 8040994:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8040996:	2300      	movs	r3, #0
 8040998:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 804099a:	1d3b      	adds	r3, r7, #4
 804099c:	2100      	movs	r1, #0
 804099e:	4618      	mov	r0, r3
 80409a0:	f002 ff36 	bl	8043810 <HAL_RCC_ClockConfig>
 80409a4:	4603      	mov	r3, r0
 80409a6:	2b00      	cmp	r3, #0
 80409a8:	d001      	beq.n	80409ae <SystemClock_Config+0xee>
  {
    Error_Handler();
 80409aa:	f000 f931 	bl	8040c10 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80409ae:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80409b2:	2100      	movs	r1, #0
 80409b4:	2000      	movs	r0, #0
 80409b6:	f003 f8e1 	bl	8043b7c <HAL_RCC_MCOConfig>
}
 80409ba:	bf00      	nop
 80409bc:	3770      	adds	r7, #112	@ 0x70
 80409be:	46bd      	mov	sp, r7
 80409c0:	bd80      	pop	{r7, pc}
 80409c2:	bf00      	nop
 80409c4:	58000400 	.word	0x58000400
 80409c8:	58024800 	.word	0x58024800

080409cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80409cc:	b580      	push	{r7, lr}
 80409ce:	b0b2      	sub	sp, #200	@ 0xc8
 80409d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80409d2:	463b      	mov	r3, r7
 80409d4:	22c8      	movs	r2, #200	@ 0xc8
 80409d6:	2100      	movs	r1, #0
 80409d8:	4618      	mov	r0, r3
 80409da:	f00a f912 	bl	804ac02 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80409de:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80409e2:	f04f 0300 	mov.w	r3, #0
 80409e6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80409ea:	2302      	movs	r3, #2
 80409ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80409ee:	230c      	movs	r3, #12
 80409f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80409f2:	2302      	movs	r3, #2
 80409f4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80409f6:	2302      	movs	r3, #2
 80409f8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80409fa:	2302      	movs	r3, #2
 80409fc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80409fe:	23c0      	movs	r3, #192	@ 0xc0
 8040a00:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8040a02:	2320      	movs	r3, #32
 8040a04:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8040a06:	2300      	movs	r3, #0
 8040a08:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8040a0a:	2300      	movs	r3, #0
 8040a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040a10:	463b      	mov	r3, r7
 8040a12:	4618      	mov	r0, r3
 8040a14:	f003 faf2 	bl	8043ffc <HAL_RCCEx_PeriphCLKConfig>
 8040a18:	4603      	mov	r3, r0
 8040a1a:	2b00      	cmp	r3, #0
 8040a1c:	d001      	beq.n	8040a22 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8040a1e:	f000 f8f7 	bl	8040c10 <Error_Handler>
  }
}
 8040a22:	bf00      	nop
 8040a24:	37c8      	adds	r7, #200	@ 0xc8
 8040a26:	46bd      	mov	sp, r7
 8040a28:	bd80      	pop	{r7, pc}
	...

08040a2c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8040a2c:	b580      	push	{r7, lr}
 8040a2e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8040a30:	4b0d      	ldr	r3, [pc, #52]	@ (8040a68 <MX_CRC_Init+0x3c>)
 8040a32:	4a0e      	ldr	r2, [pc, #56]	@ (8040a6c <MX_CRC_Init+0x40>)
 8040a34:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8040a36:	4b0c      	ldr	r3, [pc, #48]	@ (8040a68 <MX_CRC_Init+0x3c>)
 8040a38:	2200      	movs	r2, #0
 8040a3a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8040a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8040a68 <MX_CRC_Init+0x3c>)
 8040a3e:	2200      	movs	r2, #0
 8040a40:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8040a42:	4b09      	ldr	r3, [pc, #36]	@ (8040a68 <MX_CRC_Init+0x3c>)
 8040a44:	2200      	movs	r2, #0
 8040a46:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8040a48:	4b07      	ldr	r3, [pc, #28]	@ (8040a68 <MX_CRC_Init+0x3c>)
 8040a4a:	2200      	movs	r2, #0
 8040a4c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8040a4e:	4b06      	ldr	r3, [pc, #24]	@ (8040a68 <MX_CRC_Init+0x3c>)
 8040a50:	2201      	movs	r2, #1
 8040a52:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8040a54:	4804      	ldr	r0, [pc, #16]	@ (8040a68 <MX_CRC_Init+0x3c>)
 8040a56:	f000 fc8b 	bl	8041370 <HAL_CRC_Init>
 8040a5a:	4603      	mov	r3, r0
 8040a5c:	2b00      	cmp	r3, #0
 8040a5e:	d001      	beq.n	8040a64 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8040a60:	f000 f8d6 	bl	8040c10 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8040a64:	bf00      	nop
 8040a66:	bd80      	pop	{r7, pc}
 8040a68:	2400019c 	.word	0x2400019c
 8040a6c:	58024c00 	.word	0x58024c00

08040a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040a70:	b580      	push	{r7, lr}
 8040a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040a74:	4b22      	ldr	r3, [pc, #136]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040a76:	4a23      	ldr	r2, [pc, #140]	@ (8040b04 <MX_USART1_UART_Init+0x94>)
 8040a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8040a7a:	4b21      	ldr	r3, [pc, #132]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040a7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8040a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040a82:	4b1f      	ldr	r3, [pc, #124]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040a84:	2200      	movs	r2, #0
 8040a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040a88:	4b1d      	ldr	r3, [pc, #116]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040a8a:	2200      	movs	r2, #0
 8040a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040a90:	2200      	movs	r2, #0
 8040a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040a94:	4b1a      	ldr	r3, [pc, #104]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040a96:	220c      	movs	r2, #12
 8040a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040a9a:	4b19      	ldr	r3, [pc, #100]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040a9c:	2200      	movs	r2, #0
 8040a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040aa0:	4b17      	ldr	r3, [pc, #92]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040aa2:	2200      	movs	r2, #0
 8040aa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040aa6:	4b16      	ldr	r3, [pc, #88]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040aa8:	2200      	movs	r2, #0
 8040aaa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8040aac:	4b14      	ldr	r3, [pc, #80]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040aae:	2200      	movs	r2, #0
 8040ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040ab2:	4b13      	ldr	r3, [pc, #76]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040ab4:	2200      	movs	r2, #0
 8040ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040ab8:	4811      	ldr	r0, [pc, #68]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040aba:	f005 f90b 	bl	8045cd4 <HAL_UART_Init>
 8040abe:	4603      	mov	r3, r0
 8040ac0:	2b00      	cmp	r3, #0
 8040ac2:	d001      	beq.n	8040ac8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8040ac4:	f000 f8a4 	bl	8040c10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040ac8:	2100      	movs	r1, #0
 8040aca:	480d      	ldr	r0, [pc, #52]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040acc:	f006 f913 	bl	8046cf6 <HAL_UARTEx_SetTxFifoThreshold>
 8040ad0:	4603      	mov	r3, r0
 8040ad2:	2b00      	cmp	r3, #0
 8040ad4:	d001      	beq.n	8040ada <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8040ad6:	f000 f89b 	bl	8040c10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040ada:	2100      	movs	r1, #0
 8040adc:	4808      	ldr	r0, [pc, #32]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040ade:	f006 f948 	bl	8046d72 <HAL_UARTEx_SetRxFifoThreshold>
 8040ae2:	4603      	mov	r3, r0
 8040ae4:	2b00      	cmp	r3, #0
 8040ae6:	d001      	beq.n	8040aec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8040ae8:	f000 f892 	bl	8040c10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8040aec:	4804      	ldr	r0, [pc, #16]	@ (8040b00 <MX_USART1_UART_Init+0x90>)
 8040aee:	f006 f8c9 	bl	8046c84 <HAL_UARTEx_DisableFifoMode>
 8040af2:	4603      	mov	r3, r0
 8040af4:	2b00      	cmp	r3, #0
 8040af6:	d001      	beq.n	8040afc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8040af8:	f000 f88a 	bl	8040c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040afc:	bf00      	nop
 8040afe:	bd80      	pop	{r7, pc}
 8040b00:	240001c0 	.word	0x240001c0
 8040b04:	40011000 	.word	0x40011000

08040b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040b08:	b580      	push	{r7, lr}
 8040b0a:	b08a      	sub	sp, #40	@ 0x28
 8040b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040b0e:	f107 0314 	add.w	r3, r7, #20
 8040b12:	2200      	movs	r2, #0
 8040b14:	601a      	str	r2, [r3, #0]
 8040b16:	605a      	str	r2, [r3, #4]
 8040b18:	609a      	str	r2, [r3, #8]
 8040b1a:	60da      	str	r2, [r3, #12]
 8040b1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b24:	4a38      	ldr	r2, [pc, #224]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b26:	f043 0302 	orr.w	r3, r3, #2
 8040b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040b2e:	4b36      	ldr	r3, [pc, #216]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b34:	f003 0302 	and.w	r3, r3, #2
 8040b38:	613b      	str	r3, [r7, #16]
 8040b3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040b3c:	4b32      	ldr	r3, [pc, #200]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b42:	4a31      	ldr	r2, [pc, #196]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b44:	f043 0301 	orr.w	r3, r3, #1
 8040b48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b52:	f003 0301 	and.w	r3, r3, #1
 8040b56:	60fb      	str	r3, [r7, #12]
 8040b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b60:	4a29      	ldr	r2, [pc, #164]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b62:	f043 0304 	orr.w	r3, r3, #4
 8040b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040b6a:	4b27      	ldr	r3, [pc, #156]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b70:	f003 0304 	and.w	r3, r3, #4
 8040b74:	60bb      	str	r3, [r7, #8]
 8040b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8040b78:	4b23      	ldr	r3, [pc, #140]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b7e:	4a22      	ldr	r2, [pc, #136]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8040b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040b88:	4b1f      	ldr	r3, [pc, #124]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8040b92:	607b      	str	r3, [r7, #4]
 8040b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040b96:	4b1c      	ldr	r3, [pc, #112]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8040ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040ba6:	4b18      	ldr	r3, [pc, #96]	@ (8040c08 <MX_GPIO_Init+0x100>)
 8040ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8040bb0:	603b      	str	r3, [r7, #0]
 8040bb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8040bb4:	2200      	movs	r2, #0
 8040bb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8040bba:	4814      	ldr	r0, [pc, #80]	@ (8040c0c <MX_GPIO_Init+0x104>)
 8040bbc:	f000 fe7a 	bl	80418b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8040bc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8040bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040bc6:	2302      	movs	r3, #2
 8040bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040bca:	2300      	movs	r3, #0
 8040bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040bce:	2300      	movs	r3, #0
 8040bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8040bd2:	2300      	movs	r3, #0
 8040bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8040bd6:	f107 0314 	add.w	r3, r7, #20
 8040bda:	4619      	mov	r1, r3
 8040bdc:	480b      	ldr	r0, [pc, #44]	@ (8040c0c <MX_GPIO_Init+0x104>)
 8040bde:	f000 fcb9 	bl	8041554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8040be2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8040be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040be8:	2301      	movs	r3, #1
 8040bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040bec:	2300      	movs	r3, #0
 8040bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040bf0:	2300      	movs	r3, #0
 8040bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040bf4:	f107 0314 	add.w	r3, r7, #20
 8040bf8:	4619      	mov	r1, r3
 8040bfa:	4804      	ldr	r0, [pc, #16]	@ (8040c0c <MX_GPIO_Init+0x104>)
 8040bfc:	f000 fcaa 	bl	8041554 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8040c00:	bf00      	nop
 8040c02:	3728      	adds	r7, #40	@ 0x28
 8040c04:	46bd      	mov	sp, r7
 8040c06:	bd80      	pop	{r7, pc}
 8040c08:	58024400 	.word	0x58024400
 8040c0c:	58020000 	.word	0x58020000

08040c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040c10:	b480      	push	{r7}
 8040c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040c14:	b672      	cpsid	i
}
 8040c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040c18:	bf00      	nop
 8040c1a:	e7fd      	b.n	8040c18 <Error_Handler+0x8>

08040c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040c1c:	b480      	push	{r7}
 8040c1e:	b083      	sub	sp, #12
 8040c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040c22:	4b0a      	ldr	r3, [pc, #40]	@ (8040c4c <HAL_MspInit+0x30>)
 8040c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8040c28:	4a08      	ldr	r2, [pc, #32]	@ (8040c4c <HAL_MspInit+0x30>)
 8040c2a:	f043 0302 	orr.w	r3, r3, #2
 8040c2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8040c32:	4b06      	ldr	r3, [pc, #24]	@ (8040c4c <HAL_MspInit+0x30>)
 8040c34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8040c38:	f003 0302 	and.w	r3, r3, #2
 8040c3c:	607b      	str	r3, [r7, #4]
 8040c3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040c40:	bf00      	nop
 8040c42:	370c      	adds	r7, #12
 8040c44:	46bd      	mov	sp, r7
 8040c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c4a:	4770      	bx	lr
 8040c4c:	58024400 	.word	0x58024400

08040c50 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8040c50:	b480      	push	{r7}
 8040c52:	b085      	sub	sp, #20
 8040c54:	af00      	add	r7, sp, #0
 8040c56:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8040c58:	687b      	ldr	r3, [r7, #4]
 8040c5a:	681b      	ldr	r3, [r3, #0]
 8040c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8040c8c <HAL_CRC_MspInit+0x3c>)
 8040c5e:	4293      	cmp	r3, r2
 8040c60:	d10e      	bne.n	8040c80 <HAL_CRC_MspInit+0x30>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8040c62:	4b0b      	ldr	r3, [pc, #44]	@ (8040c90 <HAL_CRC_MspInit+0x40>)
 8040c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040c68:	4a09      	ldr	r2, [pc, #36]	@ (8040c90 <HAL_CRC_MspInit+0x40>)
 8040c6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8040c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040c72:	4b07      	ldr	r3, [pc, #28]	@ (8040c90 <HAL_CRC_MspInit+0x40>)
 8040c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040c78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8040c7c:	60fb      	str	r3, [r7, #12]
 8040c7e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8040c80:	bf00      	nop
 8040c82:	3714      	adds	r7, #20
 8040c84:	46bd      	mov	sp, r7
 8040c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c8a:	4770      	bx	lr
 8040c8c:	58024c00 	.word	0x58024c00
 8040c90:	58024400 	.word	0x58024400

08040c94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040c94:	b580      	push	{r7, lr}
 8040c96:	b0bc      	sub	sp, #240	@ 0xf0
 8040c98:	af00      	add	r7, sp, #0
 8040c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040c9c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8040ca0:	2200      	movs	r2, #0
 8040ca2:	601a      	str	r2, [r3, #0]
 8040ca4:	605a      	str	r2, [r3, #4]
 8040ca6:	609a      	str	r2, [r3, #8]
 8040ca8:	60da      	str	r2, [r3, #12]
 8040caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040cac:	f107 0310 	add.w	r3, r7, #16
 8040cb0:	22c8      	movs	r2, #200	@ 0xc8
 8040cb2:	2100      	movs	r1, #0
 8040cb4:	4618      	mov	r0, r3
 8040cb6:	f009 ffa4 	bl	804ac02 <memset>
  if(huart->Instance==USART1)
 8040cba:	687b      	ldr	r3, [r7, #4]
 8040cbc:	681b      	ldr	r3, [r3, #0]
 8040cbe:	4a27      	ldr	r2, [pc, #156]	@ (8040d5c <HAL_UART_MspInit+0xc8>)
 8040cc0:	4293      	cmp	r3, r2
 8040cc2:	d146      	bne.n	8040d52 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8040cc4:	f04f 0201 	mov.w	r2, #1
 8040cc8:	f04f 0300 	mov.w	r3, #0
 8040ccc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8040cd0:	2300      	movs	r3, #0
 8040cd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040cd6:	f107 0310 	add.w	r3, r7, #16
 8040cda:	4618      	mov	r0, r3
 8040cdc:	f003 f98e 	bl	8043ffc <HAL_RCCEx_PeriphCLKConfig>
 8040ce0:	4603      	mov	r3, r0
 8040ce2:	2b00      	cmp	r3, #0
 8040ce4:	d001      	beq.n	8040cea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8040ce6:	f7ff ff93 	bl	8040c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8040cea:	4b1d      	ldr	r3, [pc, #116]	@ (8040d60 <HAL_UART_MspInit+0xcc>)
 8040cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8040cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8040d60 <HAL_UART_MspInit+0xcc>)
 8040cf2:	f043 0310 	orr.w	r3, r3, #16
 8040cf6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8040cfa:	4b19      	ldr	r3, [pc, #100]	@ (8040d60 <HAL_UART_MspInit+0xcc>)
 8040cfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8040d00:	f003 0310 	and.w	r3, r3, #16
 8040d04:	60fb      	str	r3, [r7, #12]
 8040d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040d08:	4b15      	ldr	r3, [pc, #84]	@ (8040d60 <HAL_UART_MspInit+0xcc>)
 8040d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040d0e:	4a14      	ldr	r2, [pc, #80]	@ (8040d60 <HAL_UART_MspInit+0xcc>)
 8040d10:	f043 0301 	orr.w	r3, r3, #1
 8040d14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040d18:	4b11      	ldr	r3, [pc, #68]	@ (8040d60 <HAL_UART_MspInit+0xcc>)
 8040d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040d1e:	f003 0301 	and.w	r3, r3, #1
 8040d22:	60bb      	str	r3, [r7, #8]
 8040d24:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8040d26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8040d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040d2e:	2302      	movs	r3, #2
 8040d30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d34:	2300      	movs	r3, #0
 8040d36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040d3a:	2300      	movs	r3, #0
 8040d3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8040d40:	2307      	movs	r3, #7
 8040d42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040d46:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8040d4a:	4619      	mov	r1, r3
 8040d4c:	4805      	ldr	r0, [pc, #20]	@ (8040d64 <HAL_UART_MspInit+0xd0>)
 8040d4e:	f000 fc01 	bl	8041554 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8040d52:	bf00      	nop
 8040d54:	37f0      	adds	r7, #240	@ 0xf0
 8040d56:	46bd      	mov	sp, r7
 8040d58:	bd80      	pop	{r7, pc}
 8040d5a:	bf00      	nop
 8040d5c:	40011000 	.word	0x40011000
 8040d60:	58024400 	.word	0x58024400
 8040d64:	58020000 	.word	0x58020000

08040d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040d68:	b480      	push	{r7}
 8040d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8040d6c:	bf00      	nop
 8040d6e:	e7fd      	b.n	8040d6c <NMI_Handler+0x4>

08040d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040d70:	b480      	push	{r7}
 8040d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040d74:	bf00      	nop
 8040d76:	e7fd      	b.n	8040d74 <HardFault_Handler+0x4>

08040d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040d78:	b480      	push	{r7}
 8040d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040d7c:	bf00      	nop
 8040d7e:	e7fd      	b.n	8040d7c <MemManage_Handler+0x4>

08040d80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040d80:	b480      	push	{r7}
 8040d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040d84:	bf00      	nop
 8040d86:	e7fd      	b.n	8040d84 <BusFault_Handler+0x4>

08040d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040d88:	b480      	push	{r7}
 8040d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040d8c:	bf00      	nop
 8040d8e:	e7fd      	b.n	8040d8c <UsageFault_Handler+0x4>

08040d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040d90:	b480      	push	{r7}
 8040d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040d94:	bf00      	nop
 8040d96:	46bd      	mov	sp, r7
 8040d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d9c:	4770      	bx	lr

08040d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040d9e:	b480      	push	{r7}
 8040da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040da2:	bf00      	nop
 8040da4:	46bd      	mov	sp, r7
 8040da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040daa:	4770      	bx	lr

08040dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040dac:	b480      	push	{r7}
 8040dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040db0:	bf00      	nop
 8040db2:	46bd      	mov	sp, r7
 8040db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040db8:	4770      	bx	lr

08040dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040dba:	b580      	push	{r7, lr}
 8040dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040dbe:	f000 f977 	bl	80410b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040dc2:	bf00      	nop
 8040dc4:	bd80      	pop	{r7, pc}
	...

08040dc8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8040dc8:	b580      	push	{r7, lr}
 8040dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8040dcc:	4802      	ldr	r0, [pc, #8]	@ (8040dd8 <OTG_HS_IRQHandler+0x10>)
 8040dce:	f000 ff14 	bl	8041bfa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8040dd2:	bf00      	nop
 8040dd4:	bd80      	pop	{r7, pc}
 8040dd6:	bf00      	nop
 8040dd8:	2400073c 	.word	0x2400073c

08040ddc <ITM_SendChar>:
#define DEMCR        			*((volatile uint32_t*) 0xE000EDFCU )
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )
void ITM_SendChar(uint8_t ch)
{
 8040ddc:	b480      	push	{r7}
 8040dde:	b083      	sub	sp, #12
 8040de0:	af00      	add	r7, sp, #0
 8040de2:	4603      	mov	r3, r0
 8040de4:	71fb      	strb	r3, [r7, #7]
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8040de6:	4b0f      	ldr	r3, [pc, #60]	@ (8040e24 <ITM_SendChar+0x48>)
 8040de8:	681b      	ldr	r3, [r3, #0]
 8040dea:	4a0e      	ldr	r2, [pc, #56]	@ (8040e24 <ITM_SendChar+0x48>)
 8040dec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8040df0:	6013      	str	r3, [r2, #0]
	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8040df2:	4b0d      	ldr	r3, [pc, #52]	@ (8040e28 <ITM_SendChar+0x4c>)
 8040df4:	681b      	ldr	r3, [r3, #0]
 8040df6:	4a0c      	ldr	r2, [pc, #48]	@ (8040e28 <ITM_SendChar+0x4c>)
 8040df8:	f043 0301 	orr.w	r3, r3, #1
 8040dfc:	6013      	str	r3, [r2, #0]
	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8040dfe:	bf00      	nop
 8040e00:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8040e04:	681b      	ldr	r3, [r3, #0]
 8040e06:	f003 0301 	and.w	r3, r3, #1
 8040e0a:	2b00      	cmp	r3, #0
 8040e0c:	d0f8      	beq.n	8040e00 <ITM_SendChar+0x24>
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8040e0e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8040e12:	79fb      	ldrb	r3, [r7, #7]
 8040e14:	6013      	str	r3, [r2, #0]
}
 8040e16:	bf00      	nop
 8040e18:	370c      	adds	r7, #12
 8040e1a:	46bd      	mov	sp, r7
 8040e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e20:	4770      	bx	lr
 8040e22:	bf00      	nop
 8040e24:	e000edfc 	.word	0xe000edfc
 8040e28:	e0000e00 	.word	0xe0000e00

08040e2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8040e2c:	b580      	push	{r7, lr}
 8040e2e:	b086      	sub	sp, #24
 8040e30:	af00      	add	r7, sp, #0
 8040e32:	60f8      	str	r0, [r7, #12]
 8040e34:	60b9      	str	r1, [r7, #8]
 8040e36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040e38:	2300      	movs	r3, #0
 8040e3a:	617b      	str	r3, [r7, #20]
 8040e3c:	e00a      	b.n	8040e54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8040e3e:	f3af 8000 	nop.w
 8040e42:	4601      	mov	r1, r0
 8040e44:	68bb      	ldr	r3, [r7, #8]
 8040e46:	1c5a      	adds	r2, r3, #1
 8040e48:	60ba      	str	r2, [r7, #8]
 8040e4a:	b2ca      	uxtb	r2, r1
 8040e4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040e4e:	697b      	ldr	r3, [r7, #20]
 8040e50:	3301      	adds	r3, #1
 8040e52:	617b      	str	r3, [r7, #20]
 8040e54:	697a      	ldr	r2, [r7, #20]
 8040e56:	687b      	ldr	r3, [r7, #4]
 8040e58:	429a      	cmp	r2, r3
 8040e5a:	dbf0      	blt.n	8040e3e <_read+0x12>
  }

  return len;
 8040e5c:	687b      	ldr	r3, [r7, #4]
}
 8040e5e:	4618      	mov	r0, r3
 8040e60:	3718      	adds	r7, #24
 8040e62:	46bd      	mov	sp, r7
 8040e64:	bd80      	pop	{r7, pc}

08040e66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8040e66:	b580      	push	{r7, lr}
 8040e68:	b086      	sub	sp, #24
 8040e6a:	af00      	add	r7, sp, #0
 8040e6c:	60f8      	str	r0, [r7, #12]
 8040e6e:	60b9      	str	r1, [r7, #8]
 8040e70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040e72:	2300      	movs	r3, #0
 8040e74:	617b      	str	r3, [r7, #20]
 8040e76:	e009      	b.n	8040e8c <_write+0x26>
  {
  //  __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8040e78:	68bb      	ldr	r3, [r7, #8]
 8040e7a:	1c5a      	adds	r2, r3, #1
 8040e7c:	60ba      	str	r2, [r7, #8]
 8040e7e:	781b      	ldrb	r3, [r3, #0]
 8040e80:	4618      	mov	r0, r3
 8040e82:	f7ff ffab 	bl	8040ddc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040e86:	697b      	ldr	r3, [r7, #20]
 8040e88:	3301      	adds	r3, #1
 8040e8a:	617b      	str	r3, [r7, #20]
 8040e8c:	697a      	ldr	r2, [r7, #20]
 8040e8e:	687b      	ldr	r3, [r7, #4]
 8040e90:	429a      	cmp	r2, r3
 8040e92:	dbf1      	blt.n	8040e78 <_write+0x12>
  }
  return len;
 8040e94:	687b      	ldr	r3, [r7, #4]
}
 8040e96:	4618      	mov	r0, r3
 8040e98:	3718      	adds	r7, #24
 8040e9a:	46bd      	mov	sp, r7
 8040e9c:	bd80      	pop	{r7, pc}

08040e9e <_close>:

int _close(int file)
{
 8040e9e:	b480      	push	{r7}
 8040ea0:	b083      	sub	sp, #12
 8040ea2:	af00      	add	r7, sp, #0
 8040ea4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8040ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8040eaa:	4618      	mov	r0, r3
 8040eac:	370c      	adds	r7, #12
 8040eae:	46bd      	mov	sp, r7
 8040eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040eb4:	4770      	bx	lr

08040eb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8040eb6:	b480      	push	{r7}
 8040eb8:	b083      	sub	sp, #12
 8040eba:	af00      	add	r7, sp, #0
 8040ebc:	6078      	str	r0, [r7, #4]
 8040ebe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8040ec0:	683b      	ldr	r3, [r7, #0]
 8040ec2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8040ec6:	605a      	str	r2, [r3, #4]
  return 0;
 8040ec8:	2300      	movs	r3, #0
}
 8040eca:	4618      	mov	r0, r3
 8040ecc:	370c      	adds	r7, #12
 8040ece:	46bd      	mov	sp, r7
 8040ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ed4:	4770      	bx	lr

08040ed6 <_isatty>:

int _isatty(int file)
{
 8040ed6:	b480      	push	{r7}
 8040ed8:	b083      	sub	sp, #12
 8040eda:	af00      	add	r7, sp, #0
 8040edc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8040ede:	2301      	movs	r3, #1
}
 8040ee0:	4618      	mov	r0, r3
 8040ee2:	370c      	adds	r7, #12
 8040ee4:	46bd      	mov	sp, r7
 8040ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040eea:	4770      	bx	lr

08040eec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8040eec:	b480      	push	{r7}
 8040eee:	b085      	sub	sp, #20
 8040ef0:	af00      	add	r7, sp, #0
 8040ef2:	60f8      	str	r0, [r7, #12]
 8040ef4:	60b9      	str	r1, [r7, #8]
 8040ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8040ef8:	2300      	movs	r3, #0
}
 8040efa:	4618      	mov	r0, r3
 8040efc:	3714      	adds	r7, #20
 8040efe:	46bd      	mov	sp, r7
 8040f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f04:	4770      	bx	lr
	...

08040f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040f08:	b580      	push	{r7, lr}
 8040f0a:	b086      	sub	sp, #24
 8040f0c:	af00      	add	r7, sp, #0
 8040f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8040f10:	4a14      	ldr	r2, [pc, #80]	@ (8040f64 <_sbrk+0x5c>)
 8040f12:	4b15      	ldr	r3, [pc, #84]	@ (8040f68 <_sbrk+0x60>)
 8040f14:	1ad3      	subs	r3, r2, r3
 8040f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040f18:	697b      	ldr	r3, [r7, #20]
 8040f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8040f1c:	4b13      	ldr	r3, [pc, #76]	@ (8040f6c <_sbrk+0x64>)
 8040f1e:	681b      	ldr	r3, [r3, #0]
 8040f20:	2b00      	cmp	r3, #0
 8040f22:	d102      	bne.n	8040f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8040f24:	4b11      	ldr	r3, [pc, #68]	@ (8040f6c <_sbrk+0x64>)
 8040f26:	4a12      	ldr	r2, [pc, #72]	@ (8040f70 <_sbrk+0x68>)
 8040f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8040f2a:	4b10      	ldr	r3, [pc, #64]	@ (8040f6c <_sbrk+0x64>)
 8040f2c:	681a      	ldr	r2, [r3, #0]
 8040f2e:	687b      	ldr	r3, [r7, #4]
 8040f30:	4413      	add	r3, r2
 8040f32:	693a      	ldr	r2, [r7, #16]
 8040f34:	429a      	cmp	r2, r3
 8040f36:	d207      	bcs.n	8040f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8040f38:	f009 feb2 	bl	804aca0 <__errno>
 8040f3c:	4603      	mov	r3, r0
 8040f3e:	220c      	movs	r2, #12
 8040f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8040f42:	f04f 33ff 	mov.w	r3, #4294967295
 8040f46:	e009      	b.n	8040f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8040f48:	4b08      	ldr	r3, [pc, #32]	@ (8040f6c <_sbrk+0x64>)
 8040f4a:	681b      	ldr	r3, [r3, #0]
 8040f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8040f4e:	4b07      	ldr	r3, [pc, #28]	@ (8040f6c <_sbrk+0x64>)
 8040f50:	681a      	ldr	r2, [r3, #0]
 8040f52:	687b      	ldr	r3, [r7, #4]
 8040f54:	4413      	add	r3, r2
 8040f56:	4a05      	ldr	r2, [pc, #20]	@ (8040f6c <_sbrk+0x64>)
 8040f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8040f5a:	68fb      	ldr	r3, [r7, #12]
}
 8040f5c:	4618      	mov	r0, r3
 8040f5e:	3718      	adds	r7, #24
 8040f60:	46bd      	mov	sp, r7
 8040f62:	bd80      	pop	{r7, pc}
 8040f64:	2407fffc 	.word	0x2407fffc
 8040f68:	00000400 	.word	0x00000400
 8040f6c:	24000254 	.word	0x24000254
 8040f70:	24000d80 	.word	0x24000d80

08040f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8040f74:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8040fb0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8040f78:	f7ff fc4a 	bl	8040810 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8040f7c:	f7ff fb96 	bl	80406ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8040f80:	480c      	ldr	r0, [pc, #48]	@ (8040fb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8040f82:	490d      	ldr	r1, [pc, #52]	@ (8040fb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8040f84:	4a0d      	ldr	r2, [pc, #52]	@ (8040fbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8040f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040f88:	e002      	b.n	8040f90 <LoopCopyDataInit>

08040f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040f8e:	3304      	adds	r3, #4

08040f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040f94:	d3f9      	bcc.n	8040f8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040f96:	4a0a      	ldr	r2, [pc, #40]	@ (8040fc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8040f98:	4c0a      	ldr	r4, [pc, #40]	@ (8040fc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8040f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040f9c:	e001      	b.n	8040fa2 <LoopFillZerobss>

08040f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040fa0:	3204      	adds	r2, #4

08040fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040fa4:	d3fb      	bcc.n	8040f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8040fa6:	f009 fe81 	bl	804acac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040faa:	f7ff fc49 	bl	8040840 <main>
  bx  lr
 8040fae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8040fb0:	2407fffc 	.word	0x2407fffc
  ldr r0, =_sdata
 8040fb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8040fb8:	24000180 	.word	0x24000180
  ldr r2, =_sidata
 8040fbc:	0804b944 	.word	0x0804b944
  ldr r2, =_sbss
 8040fc0:	24000180 	.word	0x24000180
  ldr r4, =_ebss
 8040fc4:	24000d80 	.word	0x24000d80

08040fc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040fc8:	e7fe      	b.n	8040fc8 <ADC3_IRQHandler>
	...

08040fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040fcc:	b580      	push	{r7, lr}
 8040fce:	b082      	sub	sp, #8
 8040fd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040fd2:	2003      	movs	r0, #3
 8040fd4:	f000 f98c 	bl	80412f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8040fd8:	f002 fe3a 	bl	8043c50 <HAL_RCC_GetSysClockFreq>
 8040fdc:	4602      	mov	r2, r0
 8040fde:	4b15      	ldr	r3, [pc, #84]	@ (8041034 <HAL_Init+0x68>)
 8040fe0:	699b      	ldr	r3, [r3, #24]
 8040fe2:	0a1b      	lsrs	r3, r3, #8
 8040fe4:	f003 030f 	and.w	r3, r3, #15
 8040fe8:	4913      	ldr	r1, [pc, #76]	@ (8041038 <HAL_Init+0x6c>)
 8040fea:	5ccb      	ldrb	r3, [r1, r3]
 8040fec:	f003 031f 	and.w	r3, r3, #31
 8040ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8040ff4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8040ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8041034 <HAL_Init+0x68>)
 8040ff8:	699b      	ldr	r3, [r3, #24]
 8040ffa:	f003 030f 	and.w	r3, r3, #15
 8040ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8041038 <HAL_Init+0x6c>)
 8041000:	5cd3      	ldrb	r3, [r2, r3]
 8041002:	f003 031f 	and.w	r3, r3, #31
 8041006:	687a      	ldr	r2, [r7, #4]
 8041008:	fa22 f303 	lsr.w	r3, r2, r3
 804100c:	4a0b      	ldr	r2, [pc, #44]	@ (804103c <HAL_Init+0x70>)
 804100e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8041010:	4a0b      	ldr	r2, [pc, #44]	@ (8041040 <HAL_Init+0x74>)
 8041012:	687b      	ldr	r3, [r7, #4]
 8041014:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8041016:	2000      	movs	r0, #0
 8041018:	f000 f814 	bl	8041044 <HAL_InitTick>
 804101c:	4603      	mov	r3, r0
 804101e:	2b00      	cmp	r3, #0
 8041020:	d001      	beq.n	8041026 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8041022:	2301      	movs	r3, #1
 8041024:	e002      	b.n	804102c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8041026:	f7ff fdf9 	bl	8040c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 804102a:	2300      	movs	r3, #0
}
 804102c:	4618      	mov	r0, r3
 804102e:	3708      	adds	r7, #8
 8041030:	46bd      	mov	sp, r7
 8041032:	bd80      	pop	{r7, pc}
 8041034:	58024400 	.word	0x58024400
 8041038:	0804b8c8 	.word	0x0804b8c8
 804103c:	24000004 	.word	0x24000004
 8041040:	24000000 	.word	0x24000000

08041044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8041044:	b580      	push	{r7, lr}
 8041046:	b082      	sub	sp, #8
 8041048:	af00      	add	r7, sp, #0
 804104a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 804104c:	4b15      	ldr	r3, [pc, #84]	@ (80410a4 <HAL_InitTick+0x60>)
 804104e:	781b      	ldrb	r3, [r3, #0]
 8041050:	2b00      	cmp	r3, #0
 8041052:	d101      	bne.n	8041058 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8041054:	2301      	movs	r3, #1
 8041056:	e021      	b.n	804109c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8041058:	4b13      	ldr	r3, [pc, #76]	@ (80410a8 <HAL_InitTick+0x64>)
 804105a:	681a      	ldr	r2, [r3, #0]
 804105c:	4b11      	ldr	r3, [pc, #68]	@ (80410a4 <HAL_InitTick+0x60>)
 804105e:	781b      	ldrb	r3, [r3, #0]
 8041060:	4619      	mov	r1, r3
 8041062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8041066:	fbb3 f3f1 	udiv	r3, r3, r1
 804106a:	fbb2 f3f3 	udiv	r3, r2, r3
 804106e:	4618      	mov	r0, r3
 8041070:	f000 f971 	bl	8041356 <HAL_SYSTICK_Config>
 8041074:	4603      	mov	r3, r0
 8041076:	2b00      	cmp	r3, #0
 8041078:	d001      	beq.n	804107e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 804107a:	2301      	movs	r3, #1
 804107c:	e00e      	b.n	804109c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 804107e:	687b      	ldr	r3, [r7, #4]
 8041080:	2b0f      	cmp	r3, #15
 8041082:	d80a      	bhi.n	804109a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8041084:	2200      	movs	r2, #0
 8041086:	6879      	ldr	r1, [r7, #4]
 8041088:	f04f 30ff 	mov.w	r0, #4294967295
 804108c:	f000 f93b 	bl	8041306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8041090:	4a06      	ldr	r2, [pc, #24]	@ (80410ac <HAL_InitTick+0x68>)
 8041092:	687b      	ldr	r3, [r7, #4]
 8041094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8041096:	2300      	movs	r3, #0
 8041098:	e000      	b.n	804109c <HAL_InitTick+0x58>
    return HAL_ERROR;
 804109a:	2301      	movs	r3, #1
}
 804109c:	4618      	mov	r0, r3
 804109e:	3708      	adds	r7, #8
 80410a0:	46bd      	mov	sp, r7
 80410a2:	bd80      	pop	{r7, pc}
 80410a4:	2400000c 	.word	0x2400000c
 80410a8:	24000000 	.word	0x24000000
 80410ac:	24000008 	.word	0x24000008

080410b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80410b0:	b480      	push	{r7}
 80410b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80410b4:	4b06      	ldr	r3, [pc, #24]	@ (80410d0 <HAL_IncTick+0x20>)
 80410b6:	781b      	ldrb	r3, [r3, #0]
 80410b8:	461a      	mov	r2, r3
 80410ba:	4b06      	ldr	r3, [pc, #24]	@ (80410d4 <HAL_IncTick+0x24>)
 80410bc:	681b      	ldr	r3, [r3, #0]
 80410be:	4413      	add	r3, r2
 80410c0:	4a04      	ldr	r2, [pc, #16]	@ (80410d4 <HAL_IncTick+0x24>)
 80410c2:	6013      	str	r3, [r2, #0]
}
 80410c4:	bf00      	nop
 80410c6:	46bd      	mov	sp, r7
 80410c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410cc:	4770      	bx	lr
 80410ce:	bf00      	nop
 80410d0:	2400000c 	.word	0x2400000c
 80410d4:	24000258 	.word	0x24000258

080410d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80410d8:	b480      	push	{r7}
 80410da:	af00      	add	r7, sp, #0
  return uwTick;
 80410dc:	4b03      	ldr	r3, [pc, #12]	@ (80410ec <HAL_GetTick+0x14>)
 80410de:	681b      	ldr	r3, [r3, #0]
}
 80410e0:	4618      	mov	r0, r3
 80410e2:	46bd      	mov	sp, r7
 80410e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410e8:	4770      	bx	lr
 80410ea:	bf00      	nop
 80410ec:	24000258 	.word	0x24000258

080410f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80410f0:	b580      	push	{r7, lr}
 80410f2:	b084      	sub	sp, #16
 80410f4:	af00      	add	r7, sp, #0
 80410f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80410f8:	f7ff ffee 	bl	80410d8 <HAL_GetTick>
 80410fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80410fe:	687b      	ldr	r3, [r7, #4]
 8041100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8041102:	68fb      	ldr	r3, [r7, #12]
 8041104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8041108:	d005      	beq.n	8041116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 804110a:	4b0a      	ldr	r3, [pc, #40]	@ (8041134 <HAL_Delay+0x44>)
 804110c:	781b      	ldrb	r3, [r3, #0]
 804110e:	461a      	mov	r2, r3
 8041110:	68fb      	ldr	r3, [r7, #12]
 8041112:	4413      	add	r3, r2
 8041114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8041116:	bf00      	nop
 8041118:	f7ff ffde 	bl	80410d8 <HAL_GetTick>
 804111c:	4602      	mov	r2, r0
 804111e:	68bb      	ldr	r3, [r7, #8]
 8041120:	1ad3      	subs	r3, r2, r3
 8041122:	68fa      	ldr	r2, [r7, #12]
 8041124:	429a      	cmp	r2, r3
 8041126:	d8f7      	bhi.n	8041118 <HAL_Delay+0x28>
  {
  }
}
 8041128:	bf00      	nop
 804112a:	bf00      	nop
 804112c:	3710      	adds	r7, #16
 804112e:	46bd      	mov	sp, r7
 8041130:	bd80      	pop	{r7, pc}
 8041132:	bf00      	nop
 8041134:	2400000c 	.word	0x2400000c

08041138 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8041138:	b480      	push	{r7}
 804113a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 804113c:	4b03      	ldr	r3, [pc, #12]	@ (804114c <HAL_GetREVID+0x14>)
 804113e:	681b      	ldr	r3, [r3, #0]
 8041140:	0c1b      	lsrs	r3, r3, #16
}
 8041142:	4618      	mov	r0, r3
 8041144:	46bd      	mov	sp, r7
 8041146:	f85d 7b04 	ldr.w	r7, [sp], #4
 804114a:	4770      	bx	lr
 804114c:	5c001000 	.word	0x5c001000

08041150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8041150:	b480      	push	{r7}
 8041152:	b085      	sub	sp, #20
 8041154:	af00      	add	r7, sp, #0
 8041156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8041158:	687b      	ldr	r3, [r7, #4]
 804115a:	f003 0307 	and.w	r3, r3, #7
 804115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8041160:	4b0b      	ldr	r3, [pc, #44]	@ (8041190 <__NVIC_SetPriorityGrouping+0x40>)
 8041162:	68db      	ldr	r3, [r3, #12]
 8041164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8041166:	68ba      	ldr	r2, [r7, #8]
 8041168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 804116c:	4013      	ands	r3, r2
 804116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8041170:	68fb      	ldr	r3, [r7, #12]
 8041172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8041174:	68bb      	ldr	r3, [r7, #8]
 8041176:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8041178:	4b06      	ldr	r3, [pc, #24]	@ (8041194 <__NVIC_SetPriorityGrouping+0x44>)
 804117a:	4313      	orrs	r3, r2
 804117c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 804117e:	4a04      	ldr	r2, [pc, #16]	@ (8041190 <__NVIC_SetPriorityGrouping+0x40>)
 8041180:	68bb      	ldr	r3, [r7, #8]
 8041182:	60d3      	str	r3, [r2, #12]
}
 8041184:	bf00      	nop
 8041186:	3714      	adds	r7, #20
 8041188:	46bd      	mov	sp, r7
 804118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804118e:	4770      	bx	lr
 8041190:	e000ed00 	.word	0xe000ed00
 8041194:	05fa0000 	.word	0x05fa0000

08041198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8041198:	b480      	push	{r7}
 804119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 804119c:	4b04      	ldr	r3, [pc, #16]	@ (80411b0 <__NVIC_GetPriorityGrouping+0x18>)
 804119e:	68db      	ldr	r3, [r3, #12]
 80411a0:	0a1b      	lsrs	r3, r3, #8
 80411a2:	f003 0307 	and.w	r3, r3, #7
}
 80411a6:	4618      	mov	r0, r3
 80411a8:	46bd      	mov	sp, r7
 80411aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80411ae:	4770      	bx	lr
 80411b0:	e000ed00 	.word	0xe000ed00

080411b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80411b4:	b480      	push	{r7}
 80411b6:	b083      	sub	sp, #12
 80411b8:	af00      	add	r7, sp, #0
 80411ba:	4603      	mov	r3, r0
 80411bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80411be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80411c2:	2b00      	cmp	r3, #0
 80411c4:	db0b      	blt.n	80411de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80411c6:	88fb      	ldrh	r3, [r7, #6]
 80411c8:	f003 021f 	and.w	r2, r3, #31
 80411cc:	4907      	ldr	r1, [pc, #28]	@ (80411ec <__NVIC_EnableIRQ+0x38>)
 80411ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80411d2:	095b      	lsrs	r3, r3, #5
 80411d4:	2001      	movs	r0, #1
 80411d6:	fa00 f202 	lsl.w	r2, r0, r2
 80411da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80411de:	bf00      	nop
 80411e0:	370c      	adds	r7, #12
 80411e2:	46bd      	mov	sp, r7
 80411e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80411e8:	4770      	bx	lr
 80411ea:	bf00      	nop
 80411ec:	e000e100 	.word	0xe000e100

080411f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80411f0:	b480      	push	{r7}
 80411f2:	b083      	sub	sp, #12
 80411f4:	af00      	add	r7, sp, #0
 80411f6:	4603      	mov	r3, r0
 80411f8:	6039      	str	r1, [r7, #0]
 80411fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80411fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8041200:	2b00      	cmp	r3, #0
 8041202:	db0a      	blt.n	804121a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041204:	683b      	ldr	r3, [r7, #0]
 8041206:	b2da      	uxtb	r2, r3
 8041208:	490c      	ldr	r1, [pc, #48]	@ (804123c <__NVIC_SetPriority+0x4c>)
 804120a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 804120e:	0112      	lsls	r2, r2, #4
 8041210:	b2d2      	uxtb	r2, r2
 8041212:	440b      	add	r3, r1
 8041214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8041218:	e00a      	b.n	8041230 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804121a:	683b      	ldr	r3, [r7, #0]
 804121c:	b2da      	uxtb	r2, r3
 804121e:	4908      	ldr	r1, [pc, #32]	@ (8041240 <__NVIC_SetPriority+0x50>)
 8041220:	88fb      	ldrh	r3, [r7, #6]
 8041222:	f003 030f 	and.w	r3, r3, #15
 8041226:	3b04      	subs	r3, #4
 8041228:	0112      	lsls	r2, r2, #4
 804122a:	b2d2      	uxtb	r2, r2
 804122c:	440b      	add	r3, r1
 804122e:	761a      	strb	r2, [r3, #24]
}
 8041230:	bf00      	nop
 8041232:	370c      	adds	r7, #12
 8041234:	46bd      	mov	sp, r7
 8041236:	f85d 7b04 	ldr.w	r7, [sp], #4
 804123a:	4770      	bx	lr
 804123c:	e000e100 	.word	0xe000e100
 8041240:	e000ed00 	.word	0xe000ed00

08041244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8041244:	b480      	push	{r7}
 8041246:	b089      	sub	sp, #36	@ 0x24
 8041248:	af00      	add	r7, sp, #0
 804124a:	60f8      	str	r0, [r7, #12]
 804124c:	60b9      	str	r1, [r7, #8]
 804124e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8041250:	68fb      	ldr	r3, [r7, #12]
 8041252:	f003 0307 	and.w	r3, r3, #7
 8041256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8041258:	69fb      	ldr	r3, [r7, #28]
 804125a:	f1c3 0307 	rsb	r3, r3, #7
 804125e:	2b04      	cmp	r3, #4
 8041260:	bf28      	it	cs
 8041262:	2304      	movcs	r3, #4
 8041264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8041266:	69fb      	ldr	r3, [r7, #28]
 8041268:	3304      	adds	r3, #4
 804126a:	2b06      	cmp	r3, #6
 804126c:	d902      	bls.n	8041274 <NVIC_EncodePriority+0x30>
 804126e:	69fb      	ldr	r3, [r7, #28]
 8041270:	3b03      	subs	r3, #3
 8041272:	e000      	b.n	8041276 <NVIC_EncodePriority+0x32>
 8041274:	2300      	movs	r3, #0
 8041276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8041278:	f04f 32ff 	mov.w	r2, #4294967295
 804127c:	69bb      	ldr	r3, [r7, #24]
 804127e:	fa02 f303 	lsl.w	r3, r2, r3
 8041282:	43da      	mvns	r2, r3
 8041284:	68bb      	ldr	r3, [r7, #8]
 8041286:	401a      	ands	r2, r3
 8041288:	697b      	ldr	r3, [r7, #20]
 804128a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 804128c:	f04f 31ff 	mov.w	r1, #4294967295
 8041290:	697b      	ldr	r3, [r7, #20]
 8041292:	fa01 f303 	lsl.w	r3, r1, r3
 8041296:	43d9      	mvns	r1, r3
 8041298:	687b      	ldr	r3, [r7, #4]
 804129a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 804129c:	4313      	orrs	r3, r2
         );
}
 804129e:	4618      	mov	r0, r3
 80412a0:	3724      	adds	r7, #36	@ 0x24
 80412a2:	46bd      	mov	sp, r7
 80412a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80412a8:	4770      	bx	lr
	...

080412ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80412ac:	b580      	push	{r7, lr}
 80412ae:	b082      	sub	sp, #8
 80412b0:	af00      	add	r7, sp, #0
 80412b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80412b4:	687b      	ldr	r3, [r7, #4]
 80412b6:	3b01      	subs	r3, #1
 80412b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80412bc:	d301      	bcc.n	80412c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80412be:	2301      	movs	r3, #1
 80412c0:	e00f      	b.n	80412e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80412c2:	4a0a      	ldr	r2, [pc, #40]	@ (80412ec <SysTick_Config+0x40>)
 80412c4:	687b      	ldr	r3, [r7, #4]
 80412c6:	3b01      	subs	r3, #1
 80412c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80412ca:	210f      	movs	r1, #15
 80412cc:	f04f 30ff 	mov.w	r0, #4294967295
 80412d0:	f7ff ff8e 	bl	80411f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80412d4:	4b05      	ldr	r3, [pc, #20]	@ (80412ec <SysTick_Config+0x40>)
 80412d6:	2200      	movs	r2, #0
 80412d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80412da:	4b04      	ldr	r3, [pc, #16]	@ (80412ec <SysTick_Config+0x40>)
 80412dc:	2207      	movs	r2, #7
 80412de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80412e0:	2300      	movs	r3, #0
}
 80412e2:	4618      	mov	r0, r3
 80412e4:	3708      	adds	r7, #8
 80412e6:	46bd      	mov	sp, r7
 80412e8:	bd80      	pop	{r7, pc}
 80412ea:	bf00      	nop
 80412ec:	e000e010 	.word	0xe000e010

080412f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80412f0:	b580      	push	{r7, lr}
 80412f2:	b082      	sub	sp, #8
 80412f4:	af00      	add	r7, sp, #0
 80412f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80412f8:	6878      	ldr	r0, [r7, #4]
 80412fa:	f7ff ff29 	bl	8041150 <__NVIC_SetPriorityGrouping>
}
 80412fe:	bf00      	nop
 8041300:	3708      	adds	r7, #8
 8041302:	46bd      	mov	sp, r7
 8041304:	bd80      	pop	{r7, pc}

08041306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8041306:	b580      	push	{r7, lr}
 8041308:	b086      	sub	sp, #24
 804130a:	af00      	add	r7, sp, #0
 804130c:	4603      	mov	r3, r0
 804130e:	60b9      	str	r1, [r7, #8]
 8041310:	607a      	str	r2, [r7, #4]
 8041312:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8041314:	f7ff ff40 	bl	8041198 <__NVIC_GetPriorityGrouping>
 8041318:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 804131a:	687a      	ldr	r2, [r7, #4]
 804131c:	68b9      	ldr	r1, [r7, #8]
 804131e:	6978      	ldr	r0, [r7, #20]
 8041320:	f7ff ff90 	bl	8041244 <NVIC_EncodePriority>
 8041324:	4602      	mov	r2, r0
 8041326:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 804132a:	4611      	mov	r1, r2
 804132c:	4618      	mov	r0, r3
 804132e:	f7ff ff5f 	bl	80411f0 <__NVIC_SetPriority>
}
 8041332:	bf00      	nop
 8041334:	3718      	adds	r7, #24
 8041336:	46bd      	mov	sp, r7
 8041338:	bd80      	pop	{r7, pc}

0804133a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 804133a:	b580      	push	{r7, lr}
 804133c:	b082      	sub	sp, #8
 804133e:	af00      	add	r7, sp, #0
 8041340:	4603      	mov	r3, r0
 8041342:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8041344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8041348:	4618      	mov	r0, r3
 804134a:	f7ff ff33 	bl	80411b4 <__NVIC_EnableIRQ>
}
 804134e:	bf00      	nop
 8041350:	3708      	adds	r7, #8
 8041352:	46bd      	mov	sp, r7
 8041354:	bd80      	pop	{r7, pc}

08041356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8041356:	b580      	push	{r7, lr}
 8041358:	b082      	sub	sp, #8
 804135a:	af00      	add	r7, sp, #0
 804135c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 804135e:	6878      	ldr	r0, [r7, #4]
 8041360:	f7ff ffa4 	bl	80412ac <SysTick_Config>
 8041364:	4603      	mov	r3, r0
}
 8041366:	4618      	mov	r0, r3
 8041368:	3708      	adds	r7, #8
 804136a:	46bd      	mov	sp, r7
 804136c:	bd80      	pop	{r7, pc}
	...

08041370 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8041370:	b580      	push	{r7, lr}
 8041372:	b082      	sub	sp, #8
 8041374:	af00      	add	r7, sp, #0
 8041376:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8041378:	687b      	ldr	r3, [r7, #4]
 804137a:	2b00      	cmp	r3, #0
 804137c:	d101      	bne.n	8041382 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 804137e:	2301      	movs	r3, #1
 8041380:	e054      	b.n	804142c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8041382:	687b      	ldr	r3, [r7, #4]
 8041384:	7f5b      	ldrb	r3, [r3, #29]
 8041386:	b2db      	uxtb	r3, r3
 8041388:	2b00      	cmp	r3, #0
 804138a:	d105      	bne.n	8041398 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 804138c:	687b      	ldr	r3, [r7, #4]
 804138e:	2200      	movs	r2, #0
 8041390:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8041392:	6878      	ldr	r0, [r7, #4]
 8041394:	f7ff fc5c 	bl	8040c50 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8041398:	687b      	ldr	r3, [r7, #4]
 804139a:	2202      	movs	r2, #2
 804139c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 804139e:	687b      	ldr	r3, [r7, #4]
 80413a0:	791b      	ldrb	r3, [r3, #4]
 80413a2:	2b00      	cmp	r3, #0
 80413a4:	d10c      	bne.n	80413c0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80413a6:	687b      	ldr	r3, [r7, #4]
 80413a8:	681b      	ldr	r3, [r3, #0]
 80413aa:	4a22      	ldr	r2, [pc, #136]	@ (8041434 <HAL_CRC_Init+0xc4>)
 80413ac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80413ae:	687b      	ldr	r3, [r7, #4]
 80413b0:	681b      	ldr	r3, [r3, #0]
 80413b2:	689a      	ldr	r2, [r3, #8]
 80413b4:	687b      	ldr	r3, [r7, #4]
 80413b6:	681b      	ldr	r3, [r3, #0]
 80413b8:	f022 0218 	bic.w	r2, r2, #24
 80413bc:	609a      	str	r2, [r3, #8]
 80413be:	e00c      	b.n	80413da <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80413c0:	687b      	ldr	r3, [r7, #4]
 80413c2:	6899      	ldr	r1, [r3, #8]
 80413c4:	687b      	ldr	r3, [r7, #4]
 80413c6:	68db      	ldr	r3, [r3, #12]
 80413c8:	461a      	mov	r2, r3
 80413ca:	6878      	ldr	r0, [r7, #4]
 80413cc:	f000 f834 	bl	8041438 <HAL_CRCEx_Polynomial_Set>
 80413d0:	4603      	mov	r3, r0
 80413d2:	2b00      	cmp	r3, #0
 80413d4:	d001      	beq.n	80413da <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80413d6:	2301      	movs	r3, #1
 80413d8:	e028      	b.n	804142c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80413da:	687b      	ldr	r3, [r7, #4]
 80413dc:	795b      	ldrb	r3, [r3, #5]
 80413de:	2b00      	cmp	r3, #0
 80413e0:	d105      	bne.n	80413ee <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80413e2:	687b      	ldr	r3, [r7, #4]
 80413e4:	681b      	ldr	r3, [r3, #0]
 80413e6:	f04f 32ff 	mov.w	r2, #4294967295
 80413ea:	611a      	str	r2, [r3, #16]
 80413ec:	e004      	b.n	80413f8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80413ee:	687b      	ldr	r3, [r7, #4]
 80413f0:	681b      	ldr	r3, [r3, #0]
 80413f2:	687a      	ldr	r2, [r7, #4]
 80413f4:	6912      	ldr	r2, [r2, #16]
 80413f6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80413f8:	687b      	ldr	r3, [r7, #4]
 80413fa:	681b      	ldr	r3, [r3, #0]
 80413fc:	689b      	ldr	r3, [r3, #8]
 80413fe:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8041402:	687b      	ldr	r3, [r7, #4]
 8041404:	695a      	ldr	r2, [r3, #20]
 8041406:	687b      	ldr	r3, [r7, #4]
 8041408:	681b      	ldr	r3, [r3, #0]
 804140a:	430a      	orrs	r2, r1
 804140c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 804140e:	687b      	ldr	r3, [r7, #4]
 8041410:	681b      	ldr	r3, [r3, #0]
 8041412:	689b      	ldr	r3, [r3, #8]
 8041414:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8041418:	687b      	ldr	r3, [r7, #4]
 804141a:	699a      	ldr	r2, [r3, #24]
 804141c:	687b      	ldr	r3, [r7, #4]
 804141e:	681b      	ldr	r3, [r3, #0]
 8041420:	430a      	orrs	r2, r1
 8041422:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8041424:	687b      	ldr	r3, [r7, #4]
 8041426:	2201      	movs	r2, #1
 8041428:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 804142a:	2300      	movs	r3, #0
}
 804142c:	4618      	mov	r0, r3
 804142e:	3708      	adds	r7, #8
 8041430:	46bd      	mov	sp, r7
 8041432:	bd80      	pop	{r7, pc}
 8041434:	04c11db7 	.word	0x04c11db7

08041438 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8041438:	b480      	push	{r7}
 804143a:	b087      	sub	sp, #28
 804143c:	af00      	add	r7, sp, #0
 804143e:	60f8      	str	r0, [r7, #12]
 8041440:	60b9      	str	r1, [r7, #8]
 8041442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8041444:	2300      	movs	r3, #0
 8041446:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8041448:	231f      	movs	r3, #31
 804144a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 804144c:	68bb      	ldr	r3, [r7, #8]
 804144e:	f003 0301 	and.w	r3, r3, #1
 8041452:	2b00      	cmp	r3, #0
 8041454:	d102      	bne.n	804145c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8041456:	2301      	movs	r3, #1
 8041458:	75fb      	strb	r3, [r7, #23]
 804145a:	e063      	b.n	8041524 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 804145c:	bf00      	nop
 804145e:	693b      	ldr	r3, [r7, #16]
 8041460:	1e5a      	subs	r2, r3, #1
 8041462:	613a      	str	r2, [r7, #16]
 8041464:	2b00      	cmp	r3, #0
 8041466:	d009      	beq.n	804147c <HAL_CRCEx_Polynomial_Set+0x44>
 8041468:	693b      	ldr	r3, [r7, #16]
 804146a:	f003 031f 	and.w	r3, r3, #31
 804146e:	68ba      	ldr	r2, [r7, #8]
 8041470:	fa22 f303 	lsr.w	r3, r2, r3
 8041474:	f003 0301 	and.w	r3, r3, #1
 8041478:	2b00      	cmp	r3, #0
 804147a:	d0f0      	beq.n	804145e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 804147c:	687b      	ldr	r3, [r7, #4]
 804147e:	2b18      	cmp	r3, #24
 8041480:	d846      	bhi.n	8041510 <HAL_CRCEx_Polynomial_Set+0xd8>
 8041482:	a201      	add	r2, pc, #4	@ (adr r2, 8041488 <HAL_CRCEx_Polynomial_Set+0x50>)
 8041484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8041488:	08041517 	.word	0x08041517
 804148c:	08041511 	.word	0x08041511
 8041490:	08041511 	.word	0x08041511
 8041494:	08041511 	.word	0x08041511
 8041498:	08041511 	.word	0x08041511
 804149c:	08041511 	.word	0x08041511
 80414a0:	08041511 	.word	0x08041511
 80414a4:	08041511 	.word	0x08041511
 80414a8:	08041505 	.word	0x08041505
 80414ac:	08041511 	.word	0x08041511
 80414b0:	08041511 	.word	0x08041511
 80414b4:	08041511 	.word	0x08041511
 80414b8:	08041511 	.word	0x08041511
 80414bc:	08041511 	.word	0x08041511
 80414c0:	08041511 	.word	0x08041511
 80414c4:	08041511 	.word	0x08041511
 80414c8:	080414f9 	.word	0x080414f9
 80414cc:	08041511 	.word	0x08041511
 80414d0:	08041511 	.word	0x08041511
 80414d4:	08041511 	.word	0x08041511
 80414d8:	08041511 	.word	0x08041511
 80414dc:	08041511 	.word	0x08041511
 80414e0:	08041511 	.word	0x08041511
 80414e4:	08041511 	.word	0x08041511
 80414e8:	080414ed 	.word	0x080414ed
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80414ec:	693b      	ldr	r3, [r7, #16]
 80414ee:	2b06      	cmp	r3, #6
 80414f0:	d913      	bls.n	804151a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80414f2:	2301      	movs	r3, #1
 80414f4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80414f6:	e010      	b.n	804151a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80414f8:	693b      	ldr	r3, [r7, #16]
 80414fa:	2b07      	cmp	r3, #7
 80414fc:	d90f      	bls.n	804151e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80414fe:	2301      	movs	r3, #1
 8041500:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8041502:	e00c      	b.n	804151e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8041504:	693b      	ldr	r3, [r7, #16]
 8041506:	2b0f      	cmp	r3, #15
 8041508:	d90b      	bls.n	8041522 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 804150a:	2301      	movs	r3, #1
 804150c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 804150e:	e008      	b.n	8041522 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8041510:	2301      	movs	r3, #1
 8041512:	75fb      	strb	r3, [r7, #23]
        break;
 8041514:	e006      	b.n	8041524 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8041516:	bf00      	nop
 8041518:	e004      	b.n	8041524 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 804151a:	bf00      	nop
 804151c:	e002      	b.n	8041524 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 804151e:	bf00      	nop
 8041520:	e000      	b.n	8041524 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8041522:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8041524:	7dfb      	ldrb	r3, [r7, #23]
 8041526:	2b00      	cmp	r3, #0
 8041528:	d10d      	bne.n	8041546 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 804152a:	68fb      	ldr	r3, [r7, #12]
 804152c:	681b      	ldr	r3, [r3, #0]
 804152e:	68ba      	ldr	r2, [r7, #8]
 8041530:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8041532:	68fb      	ldr	r3, [r7, #12]
 8041534:	681b      	ldr	r3, [r3, #0]
 8041536:	689b      	ldr	r3, [r3, #8]
 8041538:	f023 0118 	bic.w	r1, r3, #24
 804153c:	68fb      	ldr	r3, [r7, #12]
 804153e:	681b      	ldr	r3, [r3, #0]
 8041540:	687a      	ldr	r2, [r7, #4]
 8041542:	430a      	orrs	r2, r1
 8041544:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8041546:	7dfb      	ldrb	r3, [r7, #23]
}
 8041548:	4618      	mov	r0, r3
 804154a:	371c      	adds	r7, #28
 804154c:	46bd      	mov	sp, r7
 804154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041552:	4770      	bx	lr

08041554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8041554:	b480      	push	{r7}
 8041556:	b089      	sub	sp, #36	@ 0x24
 8041558:	af00      	add	r7, sp, #0
 804155a:	6078      	str	r0, [r7, #4]
 804155c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 804155e:	2300      	movs	r3, #0
 8041560:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8041562:	4b89      	ldr	r3, [pc, #548]	@ (8041788 <HAL_GPIO_Init+0x234>)
 8041564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8041566:	e194      	b.n	8041892 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8041568:	683b      	ldr	r3, [r7, #0]
 804156a:	681a      	ldr	r2, [r3, #0]
 804156c:	2101      	movs	r1, #1
 804156e:	69fb      	ldr	r3, [r7, #28]
 8041570:	fa01 f303 	lsl.w	r3, r1, r3
 8041574:	4013      	ands	r3, r2
 8041576:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8041578:	693b      	ldr	r3, [r7, #16]
 804157a:	2b00      	cmp	r3, #0
 804157c:	f000 8186 	beq.w	804188c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8041580:	683b      	ldr	r3, [r7, #0]
 8041582:	685b      	ldr	r3, [r3, #4]
 8041584:	f003 0303 	and.w	r3, r3, #3
 8041588:	2b01      	cmp	r3, #1
 804158a:	d005      	beq.n	8041598 <HAL_GPIO_Init+0x44>
 804158c:	683b      	ldr	r3, [r7, #0]
 804158e:	685b      	ldr	r3, [r3, #4]
 8041590:	f003 0303 	and.w	r3, r3, #3
 8041594:	2b02      	cmp	r3, #2
 8041596:	d130      	bne.n	80415fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8041598:	687b      	ldr	r3, [r7, #4]
 804159a:	689b      	ldr	r3, [r3, #8]
 804159c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 804159e:	69fb      	ldr	r3, [r7, #28]
 80415a0:	005b      	lsls	r3, r3, #1
 80415a2:	2203      	movs	r2, #3
 80415a4:	fa02 f303 	lsl.w	r3, r2, r3
 80415a8:	43db      	mvns	r3, r3
 80415aa:	69ba      	ldr	r2, [r7, #24]
 80415ac:	4013      	ands	r3, r2
 80415ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80415b0:	683b      	ldr	r3, [r7, #0]
 80415b2:	68da      	ldr	r2, [r3, #12]
 80415b4:	69fb      	ldr	r3, [r7, #28]
 80415b6:	005b      	lsls	r3, r3, #1
 80415b8:	fa02 f303 	lsl.w	r3, r2, r3
 80415bc:	69ba      	ldr	r2, [r7, #24]
 80415be:	4313      	orrs	r3, r2
 80415c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80415c2:	687b      	ldr	r3, [r7, #4]
 80415c4:	69ba      	ldr	r2, [r7, #24]
 80415c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80415c8:	687b      	ldr	r3, [r7, #4]
 80415ca:	685b      	ldr	r3, [r3, #4]
 80415cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80415ce:	2201      	movs	r2, #1
 80415d0:	69fb      	ldr	r3, [r7, #28]
 80415d2:	fa02 f303 	lsl.w	r3, r2, r3
 80415d6:	43db      	mvns	r3, r3
 80415d8:	69ba      	ldr	r2, [r7, #24]
 80415da:	4013      	ands	r3, r2
 80415dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80415de:	683b      	ldr	r3, [r7, #0]
 80415e0:	685b      	ldr	r3, [r3, #4]
 80415e2:	091b      	lsrs	r3, r3, #4
 80415e4:	f003 0201 	and.w	r2, r3, #1
 80415e8:	69fb      	ldr	r3, [r7, #28]
 80415ea:	fa02 f303 	lsl.w	r3, r2, r3
 80415ee:	69ba      	ldr	r2, [r7, #24]
 80415f0:	4313      	orrs	r3, r2
 80415f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80415f4:	687b      	ldr	r3, [r7, #4]
 80415f6:	69ba      	ldr	r2, [r7, #24]
 80415f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80415fa:	683b      	ldr	r3, [r7, #0]
 80415fc:	685b      	ldr	r3, [r3, #4]
 80415fe:	f003 0303 	and.w	r3, r3, #3
 8041602:	2b03      	cmp	r3, #3
 8041604:	d017      	beq.n	8041636 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8041606:	687b      	ldr	r3, [r7, #4]
 8041608:	68db      	ldr	r3, [r3, #12]
 804160a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 804160c:	69fb      	ldr	r3, [r7, #28]
 804160e:	005b      	lsls	r3, r3, #1
 8041610:	2203      	movs	r2, #3
 8041612:	fa02 f303 	lsl.w	r3, r2, r3
 8041616:	43db      	mvns	r3, r3
 8041618:	69ba      	ldr	r2, [r7, #24]
 804161a:	4013      	ands	r3, r2
 804161c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 804161e:	683b      	ldr	r3, [r7, #0]
 8041620:	689a      	ldr	r2, [r3, #8]
 8041622:	69fb      	ldr	r3, [r7, #28]
 8041624:	005b      	lsls	r3, r3, #1
 8041626:	fa02 f303 	lsl.w	r3, r2, r3
 804162a:	69ba      	ldr	r2, [r7, #24]
 804162c:	4313      	orrs	r3, r2
 804162e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8041630:	687b      	ldr	r3, [r7, #4]
 8041632:	69ba      	ldr	r2, [r7, #24]
 8041634:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8041636:	683b      	ldr	r3, [r7, #0]
 8041638:	685b      	ldr	r3, [r3, #4]
 804163a:	f003 0303 	and.w	r3, r3, #3
 804163e:	2b02      	cmp	r3, #2
 8041640:	d123      	bne.n	804168a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8041642:	69fb      	ldr	r3, [r7, #28]
 8041644:	08da      	lsrs	r2, r3, #3
 8041646:	687b      	ldr	r3, [r7, #4]
 8041648:	3208      	adds	r2, #8
 804164a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8041650:	69fb      	ldr	r3, [r7, #28]
 8041652:	f003 0307 	and.w	r3, r3, #7
 8041656:	009b      	lsls	r3, r3, #2
 8041658:	220f      	movs	r2, #15
 804165a:	fa02 f303 	lsl.w	r3, r2, r3
 804165e:	43db      	mvns	r3, r3
 8041660:	69ba      	ldr	r2, [r7, #24]
 8041662:	4013      	ands	r3, r2
 8041664:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8041666:	683b      	ldr	r3, [r7, #0]
 8041668:	691a      	ldr	r2, [r3, #16]
 804166a:	69fb      	ldr	r3, [r7, #28]
 804166c:	f003 0307 	and.w	r3, r3, #7
 8041670:	009b      	lsls	r3, r3, #2
 8041672:	fa02 f303 	lsl.w	r3, r2, r3
 8041676:	69ba      	ldr	r2, [r7, #24]
 8041678:	4313      	orrs	r3, r2
 804167a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 804167c:	69fb      	ldr	r3, [r7, #28]
 804167e:	08da      	lsrs	r2, r3, #3
 8041680:	687b      	ldr	r3, [r7, #4]
 8041682:	3208      	adds	r2, #8
 8041684:	69b9      	ldr	r1, [r7, #24]
 8041686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 804168a:	687b      	ldr	r3, [r7, #4]
 804168c:	681b      	ldr	r3, [r3, #0]
 804168e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8041690:	69fb      	ldr	r3, [r7, #28]
 8041692:	005b      	lsls	r3, r3, #1
 8041694:	2203      	movs	r2, #3
 8041696:	fa02 f303 	lsl.w	r3, r2, r3
 804169a:	43db      	mvns	r3, r3
 804169c:	69ba      	ldr	r2, [r7, #24]
 804169e:	4013      	ands	r3, r2
 80416a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80416a2:	683b      	ldr	r3, [r7, #0]
 80416a4:	685b      	ldr	r3, [r3, #4]
 80416a6:	f003 0203 	and.w	r2, r3, #3
 80416aa:	69fb      	ldr	r3, [r7, #28]
 80416ac:	005b      	lsls	r3, r3, #1
 80416ae:	fa02 f303 	lsl.w	r3, r2, r3
 80416b2:	69ba      	ldr	r2, [r7, #24]
 80416b4:	4313      	orrs	r3, r2
 80416b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80416b8:	687b      	ldr	r3, [r7, #4]
 80416ba:	69ba      	ldr	r2, [r7, #24]
 80416bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80416be:	683b      	ldr	r3, [r7, #0]
 80416c0:	685b      	ldr	r3, [r3, #4]
 80416c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80416c6:	2b00      	cmp	r3, #0
 80416c8:	f000 80e0 	beq.w	804188c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80416cc:	4b2f      	ldr	r3, [pc, #188]	@ (804178c <HAL_GPIO_Init+0x238>)
 80416ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80416d2:	4a2e      	ldr	r2, [pc, #184]	@ (804178c <HAL_GPIO_Init+0x238>)
 80416d4:	f043 0302 	orr.w	r3, r3, #2
 80416d8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80416dc:	4b2b      	ldr	r3, [pc, #172]	@ (804178c <HAL_GPIO_Init+0x238>)
 80416de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80416e2:	f003 0302 	and.w	r3, r3, #2
 80416e6:	60fb      	str	r3, [r7, #12]
 80416e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80416ea:	4a29      	ldr	r2, [pc, #164]	@ (8041790 <HAL_GPIO_Init+0x23c>)
 80416ec:	69fb      	ldr	r3, [r7, #28]
 80416ee:	089b      	lsrs	r3, r3, #2
 80416f0:	3302      	adds	r3, #2
 80416f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80416f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80416f8:	69fb      	ldr	r3, [r7, #28]
 80416fa:	f003 0303 	and.w	r3, r3, #3
 80416fe:	009b      	lsls	r3, r3, #2
 8041700:	220f      	movs	r2, #15
 8041702:	fa02 f303 	lsl.w	r3, r2, r3
 8041706:	43db      	mvns	r3, r3
 8041708:	69ba      	ldr	r2, [r7, #24]
 804170a:	4013      	ands	r3, r2
 804170c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 804170e:	687b      	ldr	r3, [r7, #4]
 8041710:	4a20      	ldr	r2, [pc, #128]	@ (8041794 <HAL_GPIO_Init+0x240>)
 8041712:	4293      	cmp	r3, r2
 8041714:	d052      	beq.n	80417bc <HAL_GPIO_Init+0x268>
 8041716:	687b      	ldr	r3, [r7, #4]
 8041718:	4a1f      	ldr	r2, [pc, #124]	@ (8041798 <HAL_GPIO_Init+0x244>)
 804171a:	4293      	cmp	r3, r2
 804171c:	d031      	beq.n	8041782 <HAL_GPIO_Init+0x22e>
 804171e:	687b      	ldr	r3, [r7, #4]
 8041720:	4a1e      	ldr	r2, [pc, #120]	@ (804179c <HAL_GPIO_Init+0x248>)
 8041722:	4293      	cmp	r3, r2
 8041724:	d02b      	beq.n	804177e <HAL_GPIO_Init+0x22a>
 8041726:	687b      	ldr	r3, [r7, #4]
 8041728:	4a1d      	ldr	r2, [pc, #116]	@ (80417a0 <HAL_GPIO_Init+0x24c>)
 804172a:	4293      	cmp	r3, r2
 804172c:	d025      	beq.n	804177a <HAL_GPIO_Init+0x226>
 804172e:	687b      	ldr	r3, [r7, #4]
 8041730:	4a1c      	ldr	r2, [pc, #112]	@ (80417a4 <HAL_GPIO_Init+0x250>)
 8041732:	4293      	cmp	r3, r2
 8041734:	d01f      	beq.n	8041776 <HAL_GPIO_Init+0x222>
 8041736:	687b      	ldr	r3, [r7, #4]
 8041738:	4a1b      	ldr	r2, [pc, #108]	@ (80417a8 <HAL_GPIO_Init+0x254>)
 804173a:	4293      	cmp	r3, r2
 804173c:	d019      	beq.n	8041772 <HAL_GPIO_Init+0x21e>
 804173e:	687b      	ldr	r3, [r7, #4]
 8041740:	4a1a      	ldr	r2, [pc, #104]	@ (80417ac <HAL_GPIO_Init+0x258>)
 8041742:	4293      	cmp	r3, r2
 8041744:	d013      	beq.n	804176e <HAL_GPIO_Init+0x21a>
 8041746:	687b      	ldr	r3, [r7, #4]
 8041748:	4a19      	ldr	r2, [pc, #100]	@ (80417b0 <HAL_GPIO_Init+0x25c>)
 804174a:	4293      	cmp	r3, r2
 804174c:	d00d      	beq.n	804176a <HAL_GPIO_Init+0x216>
 804174e:	687b      	ldr	r3, [r7, #4]
 8041750:	4a18      	ldr	r2, [pc, #96]	@ (80417b4 <HAL_GPIO_Init+0x260>)
 8041752:	4293      	cmp	r3, r2
 8041754:	d007      	beq.n	8041766 <HAL_GPIO_Init+0x212>
 8041756:	687b      	ldr	r3, [r7, #4]
 8041758:	4a17      	ldr	r2, [pc, #92]	@ (80417b8 <HAL_GPIO_Init+0x264>)
 804175a:	4293      	cmp	r3, r2
 804175c:	d101      	bne.n	8041762 <HAL_GPIO_Init+0x20e>
 804175e:	2309      	movs	r3, #9
 8041760:	e02d      	b.n	80417be <HAL_GPIO_Init+0x26a>
 8041762:	230a      	movs	r3, #10
 8041764:	e02b      	b.n	80417be <HAL_GPIO_Init+0x26a>
 8041766:	2308      	movs	r3, #8
 8041768:	e029      	b.n	80417be <HAL_GPIO_Init+0x26a>
 804176a:	2307      	movs	r3, #7
 804176c:	e027      	b.n	80417be <HAL_GPIO_Init+0x26a>
 804176e:	2306      	movs	r3, #6
 8041770:	e025      	b.n	80417be <HAL_GPIO_Init+0x26a>
 8041772:	2305      	movs	r3, #5
 8041774:	e023      	b.n	80417be <HAL_GPIO_Init+0x26a>
 8041776:	2304      	movs	r3, #4
 8041778:	e021      	b.n	80417be <HAL_GPIO_Init+0x26a>
 804177a:	2303      	movs	r3, #3
 804177c:	e01f      	b.n	80417be <HAL_GPIO_Init+0x26a>
 804177e:	2302      	movs	r3, #2
 8041780:	e01d      	b.n	80417be <HAL_GPIO_Init+0x26a>
 8041782:	2301      	movs	r3, #1
 8041784:	e01b      	b.n	80417be <HAL_GPIO_Init+0x26a>
 8041786:	bf00      	nop
 8041788:	58000080 	.word	0x58000080
 804178c:	58024400 	.word	0x58024400
 8041790:	58000400 	.word	0x58000400
 8041794:	58020000 	.word	0x58020000
 8041798:	58020400 	.word	0x58020400
 804179c:	58020800 	.word	0x58020800
 80417a0:	58020c00 	.word	0x58020c00
 80417a4:	58021000 	.word	0x58021000
 80417a8:	58021400 	.word	0x58021400
 80417ac:	58021800 	.word	0x58021800
 80417b0:	58021c00 	.word	0x58021c00
 80417b4:	58022000 	.word	0x58022000
 80417b8:	58022400 	.word	0x58022400
 80417bc:	2300      	movs	r3, #0
 80417be:	69fa      	ldr	r2, [r7, #28]
 80417c0:	f002 0203 	and.w	r2, r2, #3
 80417c4:	0092      	lsls	r2, r2, #2
 80417c6:	4093      	lsls	r3, r2
 80417c8:	69ba      	ldr	r2, [r7, #24]
 80417ca:	4313      	orrs	r3, r2
 80417cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80417ce:	4938      	ldr	r1, [pc, #224]	@ (80418b0 <HAL_GPIO_Init+0x35c>)
 80417d0:	69fb      	ldr	r3, [r7, #28]
 80417d2:	089b      	lsrs	r3, r3, #2
 80417d4:	3302      	adds	r3, #2
 80417d6:	69ba      	ldr	r2, [r7, #24]
 80417d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80417dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80417e0:	681b      	ldr	r3, [r3, #0]
 80417e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80417e4:	693b      	ldr	r3, [r7, #16]
 80417e6:	43db      	mvns	r3, r3
 80417e8:	69ba      	ldr	r2, [r7, #24]
 80417ea:	4013      	ands	r3, r2
 80417ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80417ee:	683b      	ldr	r3, [r7, #0]
 80417f0:	685b      	ldr	r3, [r3, #4]
 80417f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80417f6:	2b00      	cmp	r3, #0
 80417f8:	d003      	beq.n	8041802 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80417fa:	69ba      	ldr	r2, [r7, #24]
 80417fc:	693b      	ldr	r3, [r7, #16]
 80417fe:	4313      	orrs	r3, r2
 8041800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8041802:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8041806:	69bb      	ldr	r3, [r7, #24]
 8041808:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 804180a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 804180e:	685b      	ldr	r3, [r3, #4]
 8041810:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041812:	693b      	ldr	r3, [r7, #16]
 8041814:	43db      	mvns	r3, r3
 8041816:	69ba      	ldr	r2, [r7, #24]
 8041818:	4013      	ands	r3, r2
 804181a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 804181c:	683b      	ldr	r3, [r7, #0]
 804181e:	685b      	ldr	r3, [r3, #4]
 8041820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8041824:	2b00      	cmp	r3, #0
 8041826:	d003      	beq.n	8041830 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8041828:	69ba      	ldr	r2, [r7, #24]
 804182a:	693b      	ldr	r3, [r7, #16]
 804182c:	4313      	orrs	r3, r2
 804182e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8041830:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8041834:	69bb      	ldr	r3, [r7, #24]
 8041836:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8041838:	697b      	ldr	r3, [r7, #20]
 804183a:	685b      	ldr	r3, [r3, #4]
 804183c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 804183e:	693b      	ldr	r3, [r7, #16]
 8041840:	43db      	mvns	r3, r3
 8041842:	69ba      	ldr	r2, [r7, #24]
 8041844:	4013      	ands	r3, r2
 8041846:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8041848:	683b      	ldr	r3, [r7, #0]
 804184a:	685b      	ldr	r3, [r3, #4]
 804184c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041850:	2b00      	cmp	r3, #0
 8041852:	d003      	beq.n	804185c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8041854:	69ba      	ldr	r2, [r7, #24]
 8041856:	693b      	ldr	r3, [r7, #16]
 8041858:	4313      	orrs	r3, r2
 804185a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 804185c:	697b      	ldr	r3, [r7, #20]
 804185e:	69ba      	ldr	r2, [r7, #24]
 8041860:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8041862:	697b      	ldr	r3, [r7, #20]
 8041864:	681b      	ldr	r3, [r3, #0]
 8041866:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041868:	693b      	ldr	r3, [r7, #16]
 804186a:	43db      	mvns	r3, r3
 804186c:	69ba      	ldr	r2, [r7, #24]
 804186e:	4013      	ands	r3, r2
 8041870:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8041872:	683b      	ldr	r3, [r7, #0]
 8041874:	685b      	ldr	r3, [r3, #4]
 8041876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 804187a:	2b00      	cmp	r3, #0
 804187c:	d003      	beq.n	8041886 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 804187e:	69ba      	ldr	r2, [r7, #24]
 8041880:	693b      	ldr	r3, [r7, #16]
 8041882:	4313      	orrs	r3, r2
 8041884:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8041886:	697b      	ldr	r3, [r7, #20]
 8041888:	69ba      	ldr	r2, [r7, #24]
 804188a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 804188c:	69fb      	ldr	r3, [r7, #28]
 804188e:	3301      	adds	r3, #1
 8041890:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8041892:	683b      	ldr	r3, [r7, #0]
 8041894:	681a      	ldr	r2, [r3, #0]
 8041896:	69fb      	ldr	r3, [r7, #28]
 8041898:	fa22 f303 	lsr.w	r3, r2, r3
 804189c:	2b00      	cmp	r3, #0
 804189e:	f47f ae63 	bne.w	8041568 <HAL_GPIO_Init+0x14>
  }
}
 80418a2:	bf00      	nop
 80418a4:	bf00      	nop
 80418a6:	3724      	adds	r7, #36	@ 0x24
 80418a8:	46bd      	mov	sp, r7
 80418aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80418ae:	4770      	bx	lr
 80418b0:	58000400 	.word	0x58000400

080418b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80418b4:	b480      	push	{r7}
 80418b6:	b083      	sub	sp, #12
 80418b8:	af00      	add	r7, sp, #0
 80418ba:	6078      	str	r0, [r7, #4]
 80418bc:	460b      	mov	r3, r1
 80418be:	807b      	strh	r3, [r7, #2]
 80418c0:	4613      	mov	r3, r2
 80418c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80418c4:	787b      	ldrb	r3, [r7, #1]
 80418c6:	2b00      	cmp	r3, #0
 80418c8:	d003      	beq.n	80418d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80418ca:	887a      	ldrh	r2, [r7, #2]
 80418cc:	687b      	ldr	r3, [r7, #4]
 80418ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80418d0:	e003      	b.n	80418da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80418d2:	887b      	ldrh	r3, [r7, #2]
 80418d4:	041a      	lsls	r2, r3, #16
 80418d6:	687b      	ldr	r3, [r7, #4]
 80418d8:	619a      	str	r2, [r3, #24]
}
 80418da:	bf00      	nop
 80418dc:	370c      	adds	r7, #12
 80418de:	46bd      	mov	sp, r7
 80418e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80418e4:	4770      	bx	lr

080418e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80418e6:	b480      	push	{r7}
 80418e8:	b085      	sub	sp, #20
 80418ea:	af00      	add	r7, sp, #0
 80418ec:	6078      	str	r0, [r7, #4]
 80418ee:	460b      	mov	r3, r1
 80418f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80418f2:	687b      	ldr	r3, [r7, #4]
 80418f4:	695b      	ldr	r3, [r3, #20]
 80418f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80418f8:	887a      	ldrh	r2, [r7, #2]
 80418fa:	68fb      	ldr	r3, [r7, #12]
 80418fc:	4013      	ands	r3, r2
 80418fe:	041a      	lsls	r2, r3, #16
 8041900:	68fb      	ldr	r3, [r7, #12]
 8041902:	43d9      	mvns	r1, r3
 8041904:	887b      	ldrh	r3, [r7, #2]
 8041906:	400b      	ands	r3, r1
 8041908:	431a      	orrs	r2, r3
 804190a:	687b      	ldr	r3, [r7, #4]
 804190c:	619a      	str	r2, [r3, #24]
}
 804190e:	bf00      	nop
 8041910:	3714      	adds	r7, #20
 8041912:	46bd      	mov	sp, r7
 8041914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041918:	4770      	bx	lr
	...

0804191c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 804191c:	b480      	push	{r7}
 804191e:	b083      	sub	sp, #12
 8041920:	af00      	add	r7, sp, #0
 8041922:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8041924:	4a08      	ldr	r2, [pc, #32]	@ (8041948 <HAL_HSEM_FastTake+0x2c>)
 8041926:	687b      	ldr	r3, [r7, #4]
 8041928:	3320      	adds	r3, #32
 804192a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804192e:	4a07      	ldr	r2, [pc, #28]	@ (804194c <HAL_HSEM_FastTake+0x30>)
 8041930:	4293      	cmp	r3, r2
 8041932:	d101      	bne.n	8041938 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8041934:	2300      	movs	r3, #0
 8041936:	e000      	b.n	804193a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8041938:	2301      	movs	r3, #1
}
 804193a:	4618      	mov	r0, r3
 804193c:	370c      	adds	r7, #12
 804193e:	46bd      	mov	sp, r7
 8041940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041944:	4770      	bx	lr
 8041946:	bf00      	nop
 8041948:	58026400 	.word	0x58026400
 804194c:	80000300 	.word	0x80000300

08041950 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8041950:	b480      	push	{r7}
 8041952:	b083      	sub	sp, #12
 8041954:	af00      	add	r7, sp, #0
 8041956:	6078      	str	r0, [r7, #4]
 8041958:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 804195a:	4906      	ldr	r1, [pc, #24]	@ (8041974 <HAL_HSEM_Release+0x24>)
 804195c:	683b      	ldr	r3, [r7, #0]
 804195e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8041962:	687b      	ldr	r3, [r7, #4]
 8041964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8041968:	bf00      	nop
 804196a:	370c      	adds	r7, #12
 804196c:	46bd      	mov	sp, r7
 804196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041972:	4770      	bx	lr
 8041974:	58026400 	.word	0x58026400

08041978 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8041978:	b580      	push	{r7, lr}
 804197a:	b086      	sub	sp, #24
 804197c:	af02      	add	r7, sp, #8
 804197e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8041980:	687b      	ldr	r3, [r7, #4]
 8041982:	2b00      	cmp	r3, #0
 8041984:	d101      	bne.n	804198a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8041986:	2301      	movs	r3, #1
 8041988:	e0fe      	b.n	8041b88 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 804198a:	687b      	ldr	r3, [r7, #4]
 804198c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8041990:	b2db      	uxtb	r3, r3
 8041992:	2b00      	cmp	r3, #0
 8041994:	d106      	bne.n	80419a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8041996:	687b      	ldr	r3, [r7, #4]
 8041998:	2200      	movs	r2, #0
 804199a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 804199e:	6878      	ldr	r0, [r7, #4]
 80419a0:	f008 fc3e 	bl	804a220 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80419a4:	687b      	ldr	r3, [r7, #4]
 80419a6:	2203      	movs	r2, #3
 80419a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80419ac:	687b      	ldr	r3, [r7, #4]
 80419ae:	681b      	ldr	r3, [r3, #0]
 80419b0:	4618      	mov	r0, r3
 80419b2:	f005 fb90 	bl	80470d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80419b6:	687b      	ldr	r3, [r7, #4]
 80419b8:	6818      	ldr	r0, [r3, #0]
 80419ba:	687b      	ldr	r3, [r7, #4]
 80419bc:	7c1a      	ldrb	r2, [r3, #16]
 80419be:	f88d 2000 	strb.w	r2, [sp]
 80419c2:	3304      	adds	r3, #4
 80419c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80419c6:	f005 fa61 	bl	8046e8c <USB_CoreInit>
 80419ca:	4603      	mov	r3, r0
 80419cc:	2b00      	cmp	r3, #0
 80419ce:	d005      	beq.n	80419dc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80419d0:	687b      	ldr	r3, [r7, #4]
 80419d2:	2202      	movs	r2, #2
 80419d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80419d8:	2301      	movs	r3, #1
 80419da:	e0d5      	b.n	8041b88 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80419dc:	687b      	ldr	r3, [r7, #4]
 80419de:	681b      	ldr	r3, [r3, #0]
 80419e0:	2100      	movs	r1, #0
 80419e2:	4618      	mov	r0, r3
 80419e4:	f005 fb88 	bl	80470f8 <USB_SetCurrentMode>
 80419e8:	4603      	mov	r3, r0
 80419ea:	2b00      	cmp	r3, #0
 80419ec:	d005      	beq.n	80419fa <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80419ee:	687b      	ldr	r3, [r7, #4]
 80419f0:	2202      	movs	r2, #2
 80419f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80419f6:	2301      	movs	r3, #1
 80419f8:	e0c6      	b.n	8041b88 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80419fa:	2300      	movs	r3, #0
 80419fc:	73fb      	strb	r3, [r7, #15]
 80419fe:	e04a      	b.n	8041a96 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8041a00:	7bfa      	ldrb	r2, [r7, #15]
 8041a02:	6879      	ldr	r1, [r7, #4]
 8041a04:	4613      	mov	r3, r2
 8041a06:	00db      	lsls	r3, r3, #3
 8041a08:	4413      	add	r3, r2
 8041a0a:	009b      	lsls	r3, r3, #2
 8041a0c:	440b      	add	r3, r1
 8041a0e:	3315      	adds	r3, #21
 8041a10:	2201      	movs	r2, #1
 8041a12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8041a14:	7bfa      	ldrb	r2, [r7, #15]
 8041a16:	6879      	ldr	r1, [r7, #4]
 8041a18:	4613      	mov	r3, r2
 8041a1a:	00db      	lsls	r3, r3, #3
 8041a1c:	4413      	add	r3, r2
 8041a1e:	009b      	lsls	r3, r3, #2
 8041a20:	440b      	add	r3, r1
 8041a22:	3314      	adds	r3, #20
 8041a24:	7bfa      	ldrb	r2, [r7, #15]
 8041a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8041a28:	7bfa      	ldrb	r2, [r7, #15]
 8041a2a:	7bfb      	ldrb	r3, [r7, #15]
 8041a2c:	b298      	uxth	r0, r3
 8041a2e:	6879      	ldr	r1, [r7, #4]
 8041a30:	4613      	mov	r3, r2
 8041a32:	00db      	lsls	r3, r3, #3
 8041a34:	4413      	add	r3, r2
 8041a36:	009b      	lsls	r3, r3, #2
 8041a38:	440b      	add	r3, r1
 8041a3a:	332e      	adds	r3, #46	@ 0x2e
 8041a3c:	4602      	mov	r2, r0
 8041a3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8041a40:	7bfa      	ldrb	r2, [r7, #15]
 8041a42:	6879      	ldr	r1, [r7, #4]
 8041a44:	4613      	mov	r3, r2
 8041a46:	00db      	lsls	r3, r3, #3
 8041a48:	4413      	add	r3, r2
 8041a4a:	009b      	lsls	r3, r3, #2
 8041a4c:	440b      	add	r3, r1
 8041a4e:	3318      	adds	r3, #24
 8041a50:	2200      	movs	r2, #0
 8041a52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8041a54:	7bfa      	ldrb	r2, [r7, #15]
 8041a56:	6879      	ldr	r1, [r7, #4]
 8041a58:	4613      	mov	r3, r2
 8041a5a:	00db      	lsls	r3, r3, #3
 8041a5c:	4413      	add	r3, r2
 8041a5e:	009b      	lsls	r3, r3, #2
 8041a60:	440b      	add	r3, r1
 8041a62:	331c      	adds	r3, #28
 8041a64:	2200      	movs	r2, #0
 8041a66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8041a68:	7bfa      	ldrb	r2, [r7, #15]
 8041a6a:	6879      	ldr	r1, [r7, #4]
 8041a6c:	4613      	mov	r3, r2
 8041a6e:	00db      	lsls	r3, r3, #3
 8041a70:	4413      	add	r3, r2
 8041a72:	009b      	lsls	r3, r3, #2
 8041a74:	440b      	add	r3, r1
 8041a76:	3320      	adds	r3, #32
 8041a78:	2200      	movs	r2, #0
 8041a7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8041a7c:	7bfa      	ldrb	r2, [r7, #15]
 8041a7e:	6879      	ldr	r1, [r7, #4]
 8041a80:	4613      	mov	r3, r2
 8041a82:	00db      	lsls	r3, r3, #3
 8041a84:	4413      	add	r3, r2
 8041a86:	009b      	lsls	r3, r3, #2
 8041a88:	440b      	add	r3, r1
 8041a8a:	3324      	adds	r3, #36	@ 0x24
 8041a8c:	2200      	movs	r2, #0
 8041a8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041a90:	7bfb      	ldrb	r3, [r7, #15]
 8041a92:	3301      	adds	r3, #1
 8041a94:	73fb      	strb	r3, [r7, #15]
 8041a96:	687b      	ldr	r3, [r7, #4]
 8041a98:	791b      	ldrb	r3, [r3, #4]
 8041a9a:	7bfa      	ldrb	r2, [r7, #15]
 8041a9c:	429a      	cmp	r2, r3
 8041a9e:	d3af      	bcc.n	8041a00 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041aa0:	2300      	movs	r3, #0
 8041aa2:	73fb      	strb	r3, [r7, #15]
 8041aa4:	e044      	b.n	8041b30 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8041aa6:	7bfa      	ldrb	r2, [r7, #15]
 8041aa8:	6879      	ldr	r1, [r7, #4]
 8041aaa:	4613      	mov	r3, r2
 8041aac:	00db      	lsls	r3, r3, #3
 8041aae:	4413      	add	r3, r2
 8041ab0:	009b      	lsls	r3, r3, #2
 8041ab2:	440b      	add	r3, r1
 8041ab4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8041ab8:	2200      	movs	r2, #0
 8041aba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8041abc:	7bfa      	ldrb	r2, [r7, #15]
 8041abe:	6879      	ldr	r1, [r7, #4]
 8041ac0:	4613      	mov	r3, r2
 8041ac2:	00db      	lsls	r3, r3, #3
 8041ac4:	4413      	add	r3, r2
 8041ac6:	009b      	lsls	r3, r3, #2
 8041ac8:	440b      	add	r3, r1
 8041aca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8041ace:	7bfa      	ldrb	r2, [r7, #15]
 8041ad0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8041ad2:	7bfa      	ldrb	r2, [r7, #15]
 8041ad4:	6879      	ldr	r1, [r7, #4]
 8041ad6:	4613      	mov	r3, r2
 8041ad8:	00db      	lsls	r3, r3, #3
 8041ada:	4413      	add	r3, r2
 8041adc:	009b      	lsls	r3, r3, #2
 8041ade:	440b      	add	r3, r1
 8041ae0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8041ae4:	2200      	movs	r2, #0
 8041ae6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8041ae8:	7bfa      	ldrb	r2, [r7, #15]
 8041aea:	6879      	ldr	r1, [r7, #4]
 8041aec:	4613      	mov	r3, r2
 8041aee:	00db      	lsls	r3, r3, #3
 8041af0:	4413      	add	r3, r2
 8041af2:	009b      	lsls	r3, r3, #2
 8041af4:	440b      	add	r3, r1
 8041af6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8041afa:	2200      	movs	r2, #0
 8041afc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8041afe:	7bfa      	ldrb	r2, [r7, #15]
 8041b00:	6879      	ldr	r1, [r7, #4]
 8041b02:	4613      	mov	r3, r2
 8041b04:	00db      	lsls	r3, r3, #3
 8041b06:	4413      	add	r3, r2
 8041b08:	009b      	lsls	r3, r3, #2
 8041b0a:	440b      	add	r3, r1
 8041b0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8041b10:	2200      	movs	r2, #0
 8041b12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8041b14:	7bfa      	ldrb	r2, [r7, #15]
 8041b16:	6879      	ldr	r1, [r7, #4]
 8041b18:	4613      	mov	r3, r2
 8041b1a:	00db      	lsls	r3, r3, #3
 8041b1c:	4413      	add	r3, r2
 8041b1e:	009b      	lsls	r3, r3, #2
 8041b20:	440b      	add	r3, r1
 8041b22:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8041b26:	2200      	movs	r2, #0
 8041b28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041b2a:	7bfb      	ldrb	r3, [r7, #15]
 8041b2c:	3301      	adds	r3, #1
 8041b2e:	73fb      	strb	r3, [r7, #15]
 8041b30:	687b      	ldr	r3, [r7, #4]
 8041b32:	791b      	ldrb	r3, [r3, #4]
 8041b34:	7bfa      	ldrb	r2, [r7, #15]
 8041b36:	429a      	cmp	r2, r3
 8041b38:	d3b5      	bcc.n	8041aa6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8041b3a:	687b      	ldr	r3, [r7, #4]
 8041b3c:	6818      	ldr	r0, [r3, #0]
 8041b3e:	687b      	ldr	r3, [r7, #4]
 8041b40:	7c1a      	ldrb	r2, [r3, #16]
 8041b42:	f88d 2000 	strb.w	r2, [sp]
 8041b46:	3304      	adds	r3, #4
 8041b48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8041b4a:	f005 fb21 	bl	8047190 <USB_DevInit>
 8041b4e:	4603      	mov	r3, r0
 8041b50:	2b00      	cmp	r3, #0
 8041b52:	d005      	beq.n	8041b60 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8041b54:	687b      	ldr	r3, [r7, #4]
 8041b56:	2202      	movs	r2, #2
 8041b58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8041b5c:	2301      	movs	r3, #1
 8041b5e:	e013      	b.n	8041b88 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8041b60:	687b      	ldr	r3, [r7, #4]
 8041b62:	2200      	movs	r2, #0
 8041b64:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8041b66:	687b      	ldr	r3, [r7, #4]
 8041b68:	2201      	movs	r2, #1
 8041b6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8041b6e:	687b      	ldr	r3, [r7, #4]
 8041b70:	7b1b      	ldrb	r3, [r3, #12]
 8041b72:	2b01      	cmp	r3, #1
 8041b74:	d102      	bne.n	8041b7c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8041b76:	6878      	ldr	r0, [r7, #4]
 8041b78:	f001 f956 	bl	8042e28 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8041b7c:	687b      	ldr	r3, [r7, #4]
 8041b7e:	681b      	ldr	r3, [r3, #0]
 8041b80:	4618      	mov	r0, r3
 8041b82:	f006 fb64 	bl	804824e <USB_DevDisconnect>

  return HAL_OK;
 8041b86:	2300      	movs	r3, #0
}
 8041b88:	4618      	mov	r0, r3
 8041b8a:	3710      	adds	r7, #16
 8041b8c:	46bd      	mov	sp, r7
 8041b8e:	bd80      	pop	{r7, pc}

08041b90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8041b90:	b580      	push	{r7, lr}
 8041b92:	b084      	sub	sp, #16
 8041b94:	af00      	add	r7, sp, #0
 8041b96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8041b98:	687b      	ldr	r3, [r7, #4]
 8041b9a:	681b      	ldr	r3, [r3, #0]
 8041b9c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8041b9e:	687b      	ldr	r3, [r7, #4]
 8041ba0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8041ba4:	2b01      	cmp	r3, #1
 8041ba6:	d101      	bne.n	8041bac <HAL_PCD_Start+0x1c>
 8041ba8:	2302      	movs	r3, #2
 8041baa:	e022      	b.n	8041bf2 <HAL_PCD_Start+0x62>
 8041bac:	687b      	ldr	r3, [r7, #4]
 8041bae:	2201      	movs	r2, #1
 8041bb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8041bb4:	68fb      	ldr	r3, [r7, #12]
 8041bb6:	68db      	ldr	r3, [r3, #12]
 8041bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8041bbc:	2b00      	cmp	r3, #0
 8041bbe:	d009      	beq.n	8041bd4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8041bc0:	687b      	ldr	r3, [r7, #4]
 8041bc2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8041bc4:	2b01      	cmp	r3, #1
 8041bc6:	d105      	bne.n	8041bd4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8041bc8:	68fb      	ldr	r3, [r7, #12]
 8041bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8041bcc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8041bd0:	68fb      	ldr	r3, [r7, #12]
 8041bd2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8041bd4:	687b      	ldr	r3, [r7, #4]
 8041bd6:	681b      	ldr	r3, [r3, #0]
 8041bd8:	4618      	mov	r0, r3
 8041bda:	f005 fa6b 	bl	80470b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8041bde:	687b      	ldr	r3, [r7, #4]
 8041be0:	681b      	ldr	r3, [r3, #0]
 8041be2:	4618      	mov	r0, r3
 8041be4:	f006 fb12 	bl	804820c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8041be8:	687b      	ldr	r3, [r7, #4]
 8041bea:	2200      	movs	r2, #0
 8041bec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8041bf0:	2300      	movs	r3, #0
}
 8041bf2:	4618      	mov	r0, r3
 8041bf4:	3710      	adds	r7, #16
 8041bf6:	46bd      	mov	sp, r7
 8041bf8:	bd80      	pop	{r7, pc}

08041bfa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8041bfa:	b590      	push	{r4, r7, lr}
 8041bfc:	b08d      	sub	sp, #52	@ 0x34
 8041bfe:	af00      	add	r7, sp, #0
 8041c00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8041c02:	687b      	ldr	r3, [r7, #4]
 8041c04:	681b      	ldr	r3, [r3, #0]
 8041c06:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8041c08:	6a3b      	ldr	r3, [r7, #32]
 8041c0a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8041c0c:	687b      	ldr	r3, [r7, #4]
 8041c0e:	681b      	ldr	r3, [r3, #0]
 8041c10:	4618      	mov	r0, r3
 8041c12:	f006 fbd0 	bl	80483b6 <USB_GetMode>
 8041c16:	4603      	mov	r3, r0
 8041c18:	2b00      	cmp	r3, #0
 8041c1a:	f040 84b9 	bne.w	8042590 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8041c1e:	687b      	ldr	r3, [r7, #4]
 8041c20:	681b      	ldr	r3, [r3, #0]
 8041c22:	4618      	mov	r0, r3
 8041c24:	f006 fb34 	bl	8048290 <USB_ReadInterrupts>
 8041c28:	4603      	mov	r3, r0
 8041c2a:	2b00      	cmp	r3, #0
 8041c2c:	f000 84af 	beq.w	804258e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8041c30:	69fb      	ldr	r3, [r7, #28]
 8041c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041c36:	689b      	ldr	r3, [r3, #8]
 8041c38:	0a1b      	lsrs	r3, r3, #8
 8041c3a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8041c3e:	687b      	ldr	r3, [r7, #4]
 8041c40:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8041c44:	687b      	ldr	r3, [r7, #4]
 8041c46:	681b      	ldr	r3, [r3, #0]
 8041c48:	4618      	mov	r0, r3
 8041c4a:	f006 fb21 	bl	8048290 <USB_ReadInterrupts>
 8041c4e:	4603      	mov	r3, r0
 8041c50:	f003 0302 	and.w	r3, r3, #2
 8041c54:	2b02      	cmp	r3, #2
 8041c56:	d107      	bne.n	8041c68 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8041c58:	687b      	ldr	r3, [r7, #4]
 8041c5a:	681b      	ldr	r3, [r3, #0]
 8041c5c:	695a      	ldr	r2, [r3, #20]
 8041c5e:	687b      	ldr	r3, [r7, #4]
 8041c60:	681b      	ldr	r3, [r3, #0]
 8041c62:	f002 0202 	and.w	r2, r2, #2
 8041c66:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8041c68:	687b      	ldr	r3, [r7, #4]
 8041c6a:	681b      	ldr	r3, [r3, #0]
 8041c6c:	4618      	mov	r0, r3
 8041c6e:	f006 fb0f 	bl	8048290 <USB_ReadInterrupts>
 8041c72:	4603      	mov	r3, r0
 8041c74:	f003 0310 	and.w	r3, r3, #16
 8041c78:	2b10      	cmp	r3, #16
 8041c7a:	d161      	bne.n	8041d40 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8041c7c:	687b      	ldr	r3, [r7, #4]
 8041c7e:	681b      	ldr	r3, [r3, #0]
 8041c80:	699a      	ldr	r2, [r3, #24]
 8041c82:	687b      	ldr	r3, [r7, #4]
 8041c84:	681b      	ldr	r3, [r3, #0]
 8041c86:	f022 0210 	bic.w	r2, r2, #16
 8041c8a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8041c8c:	6a3b      	ldr	r3, [r7, #32]
 8041c8e:	6a1b      	ldr	r3, [r3, #32]
 8041c90:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8041c92:	69bb      	ldr	r3, [r7, #24]
 8041c94:	f003 020f 	and.w	r2, r3, #15
 8041c98:	4613      	mov	r3, r2
 8041c9a:	00db      	lsls	r3, r3, #3
 8041c9c:	4413      	add	r3, r2
 8041c9e:	009b      	lsls	r3, r3, #2
 8041ca0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8041ca4:	687a      	ldr	r2, [r7, #4]
 8041ca6:	4413      	add	r3, r2
 8041ca8:	3304      	adds	r3, #4
 8041caa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8041cac:	69bb      	ldr	r3, [r7, #24]
 8041cae:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8041cb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8041cb6:	d124      	bne.n	8041d02 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8041cb8:	69ba      	ldr	r2, [r7, #24]
 8041cba:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8041cbe:	4013      	ands	r3, r2
 8041cc0:	2b00      	cmp	r3, #0
 8041cc2:	d035      	beq.n	8041d30 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8041cc4:	697b      	ldr	r3, [r7, #20]
 8041cc6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8041cc8:	69bb      	ldr	r3, [r7, #24]
 8041cca:	091b      	lsrs	r3, r3, #4
 8041ccc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8041cce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041cd2:	b29b      	uxth	r3, r3
 8041cd4:	461a      	mov	r2, r3
 8041cd6:	6a38      	ldr	r0, [r7, #32]
 8041cd8:	f006 f946 	bl	8047f68 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8041cdc:	697b      	ldr	r3, [r7, #20]
 8041cde:	68da      	ldr	r2, [r3, #12]
 8041ce0:	69bb      	ldr	r3, [r7, #24]
 8041ce2:	091b      	lsrs	r3, r3, #4
 8041ce4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041ce8:	441a      	add	r2, r3
 8041cea:	697b      	ldr	r3, [r7, #20]
 8041cec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8041cee:	697b      	ldr	r3, [r7, #20]
 8041cf0:	695a      	ldr	r2, [r3, #20]
 8041cf2:	69bb      	ldr	r3, [r7, #24]
 8041cf4:	091b      	lsrs	r3, r3, #4
 8041cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041cfa:	441a      	add	r2, r3
 8041cfc:	697b      	ldr	r3, [r7, #20]
 8041cfe:	615a      	str	r2, [r3, #20]
 8041d00:	e016      	b.n	8041d30 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8041d02:	69bb      	ldr	r3, [r7, #24]
 8041d04:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8041d08:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8041d0c:	d110      	bne.n	8041d30 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8041d0e:	687b      	ldr	r3, [r7, #4]
 8041d10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8041d14:	2208      	movs	r2, #8
 8041d16:	4619      	mov	r1, r3
 8041d18:	6a38      	ldr	r0, [r7, #32]
 8041d1a:	f006 f925 	bl	8047f68 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8041d1e:	697b      	ldr	r3, [r7, #20]
 8041d20:	695a      	ldr	r2, [r3, #20]
 8041d22:	69bb      	ldr	r3, [r7, #24]
 8041d24:	091b      	lsrs	r3, r3, #4
 8041d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041d2a:	441a      	add	r2, r3
 8041d2c:	697b      	ldr	r3, [r7, #20]
 8041d2e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8041d30:	687b      	ldr	r3, [r7, #4]
 8041d32:	681b      	ldr	r3, [r3, #0]
 8041d34:	699a      	ldr	r2, [r3, #24]
 8041d36:	687b      	ldr	r3, [r7, #4]
 8041d38:	681b      	ldr	r3, [r3, #0]
 8041d3a:	f042 0210 	orr.w	r2, r2, #16
 8041d3e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8041d40:	687b      	ldr	r3, [r7, #4]
 8041d42:	681b      	ldr	r3, [r3, #0]
 8041d44:	4618      	mov	r0, r3
 8041d46:	f006 faa3 	bl	8048290 <USB_ReadInterrupts>
 8041d4a:	4603      	mov	r3, r0
 8041d4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8041d50:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8041d54:	f040 80a7 	bne.w	8041ea6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8041d58:	2300      	movs	r3, #0
 8041d5a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8041d5c:	687b      	ldr	r3, [r7, #4]
 8041d5e:	681b      	ldr	r3, [r3, #0]
 8041d60:	4618      	mov	r0, r3
 8041d62:	f006 faa8 	bl	80482b6 <USB_ReadDevAllOutEpInterrupt>
 8041d66:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8041d68:	e099      	b.n	8041e9e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8041d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041d6c:	f003 0301 	and.w	r3, r3, #1
 8041d70:	2b00      	cmp	r3, #0
 8041d72:	f000 808e 	beq.w	8041e92 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8041d76:	687b      	ldr	r3, [r7, #4]
 8041d78:	681b      	ldr	r3, [r3, #0]
 8041d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041d7c:	b2d2      	uxtb	r2, r2
 8041d7e:	4611      	mov	r1, r2
 8041d80:	4618      	mov	r0, r3
 8041d82:	f006 facc 	bl	804831e <USB_ReadDevOutEPInterrupt>
 8041d86:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8041d88:	693b      	ldr	r3, [r7, #16]
 8041d8a:	f003 0301 	and.w	r3, r3, #1
 8041d8e:	2b00      	cmp	r3, #0
 8041d90:	d00c      	beq.n	8041dac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8041d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041d94:	015a      	lsls	r2, r3, #5
 8041d96:	69fb      	ldr	r3, [r7, #28]
 8041d98:	4413      	add	r3, r2
 8041d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041d9e:	461a      	mov	r2, r3
 8041da0:	2301      	movs	r3, #1
 8041da2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8041da4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8041da6:	6878      	ldr	r0, [r7, #4]
 8041da8:	f000 feb8 	bl	8042b1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8041dac:	693b      	ldr	r3, [r7, #16]
 8041dae:	f003 0308 	and.w	r3, r3, #8
 8041db2:	2b00      	cmp	r3, #0
 8041db4:	d00c      	beq.n	8041dd0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8041db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041db8:	015a      	lsls	r2, r3, #5
 8041dba:	69fb      	ldr	r3, [r7, #28]
 8041dbc:	4413      	add	r3, r2
 8041dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041dc2:	461a      	mov	r2, r3
 8041dc4:	2308      	movs	r3, #8
 8041dc6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8041dc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8041dca:	6878      	ldr	r0, [r7, #4]
 8041dcc:	f000 ff8e 	bl	8042cec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8041dd0:	693b      	ldr	r3, [r7, #16]
 8041dd2:	f003 0310 	and.w	r3, r3, #16
 8041dd6:	2b00      	cmp	r3, #0
 8041dd8:	d008      	beq.n	8041dec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8041dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041ddc:	015a      	lsls	r2, r3, #5
 8041dde:	69fb      	ldr	r3, [r7, #28]
 8041de0:	4413      	add	r3, r2
 8041de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041de6:	461a      	mov	r2, r3
 8041de8:	2310      	movs	r3, #16
 8041dea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8041dec:	693b      	ldr	r3, [r7, #16]
 8041dee:	f003 0302 	and.w	r3, r3, #2
 8041df2:	2b00      	cmp	r3, #0
 8041df4:	d030      	beq.n	8041e58 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8041df6:	6a3b      	ldr	r3, [r7, #32]
 8041df8:	695b      	ldr	r3, [r3, #20]
 8041dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8041dfe:	2b80      	cmp	r3, #128	@ 0x80
 8041e00:	d109      	bne.n	8041e16 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8041e02:	69fb      	ldr	r3, [r7, #28]
 8041e04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041e08:	685b      	ldr	r3, [r3, #4]
 8041e0a:	69fa      	ldr	r2, [r7, #28]
 8041e0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8041e10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8041e14:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8041e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041e18:	4613      	mov	r3, r2
 8041e1a:	00db      	lsls	r3, r3, #3
 8041e1c:	4413      	add	r3, r2
 8041e1e:	009b      	lsls	r3, r3, #2
 8041e20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8041e24:	687a      	ldr	r2, [r7, #4]
 8041e26:	4413      	add	r3, r2
 8041e28:	3304      	adds	r3, #4
 8041e2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8041e2c:	697b      	ldr	r3, [r7, #20]
 8041e2e:	78db      	ldrb	r3, [r3, #3]
 8041e30:	2b01      	cmp	r3, #1
 8041e32:	d108      	bne.n	8041e46 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8041e34:	697b      	ldr	r3, [r7, #20]
 8041e36:	2200      	movs	r2, #0
 8041e38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8041e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041e3c:	b2db      	uxtb	r3, r3
 8041e3e:	4619      	mov	r1, r3
 8041e40:	6878      	ldr	r0, [r7, #4]
 8041e42:	f008 fbc5 	bl	804a5d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8041e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041e48:	015a      	lsls	r2, r3, #5
 8041e4a:	69fb      	ldr	r3, [r7, #28]
 8041e4c:	4413      	add	r3, r2
 8041e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041e52:	461a      	mov	r2, r3
 8041e54:	2302      	movs	r3, #2
 8041e56:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8041e58:	693b      	ldr	r3, [r7, #16]
 8041e5a:	f003 0320 	and.w	r3, r3, #32
 8041e5e:	2b00      	cmp	r3, #0
 8041e60:	d008      	beq.n	8041e74 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8041e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041e64:	015a      	lsls	r2, r3, #5
 8041e66:	69fb      	ldr	r3, [r7, #28]
 8041e68:	4413      	add	r3, r2
 8041e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041e6e:	461a      	mov	r2, r3
 8041e70:	2320      	movs	r3, #32
 8041e72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8041e74:	693b      	ldr	r3, [r7, #16]
 8041e76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8041e7a:	2b00      	cmp	r3, #0
 8041e7c:	d009      	beq.n	8041e92 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8041e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041e80:	015a      	lsls	r2, r3, #5
 8041e82:	69fb      	ldr	r3, [r7, #28]
 8041e84:	4413      	add	r3, r2
 8041e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041e8a:	461a      	mov	r2, r3
 8041e8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8041e90:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8041e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041e94:	3301      	adds	r3, #1
 8041e96:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8041e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041e9a:	085b      	lsrs	r3, r3, #1
 8041e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8041e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041ea0:	2b00      	cmp	r3, #0
 8041ea2:	f47f af62 	bne.w	8041d6a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8041ea6:	687b      	ldr	r3, [r7, #4]
 8041ea8:	681b      	ldr	r3, [r3, #0]
 8041eaa:	4618      	mov	r0, r3
 8041eac:	f006 f9f0 	bl	8048290 <USB_ReadInterrupts>
 8041eb0:	4603      	mov	r3, r0
 8041eb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8041eb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8041eba:	f040 80db 	bne.w	8042074 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8041ebe:	687b      	ldr	r3, [r7, #4]
 8041ec0:	681b      	ldr	r3, [r3, #0]
 8041ec2:	4618      	mov	r0, r3
 8041ec4:	f006 fa11 	bl	80482ea <USB_ReadDevAllInEpInterrupt>
 8041ec8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8041eca:	2300      	movs	r3, #0
 8041ecc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8041ece:	e0cd      	b.n	804206c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8041ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041ed2:	f003 0301 	and.w	r3, r3, #1
 8041ed6:	2b00      	cmp	r3, #0
 8041ed8:	f000 80c2 	beq.w	8042060 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8041edc:	687b      	ldr	r3, [r7, #4]
 8041ede:	681b      	ldr	r3, [r3, #0]
 8041ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041ee2:	b2d2      	uxtb	r2, r2
 8041ee4:	4611      	mov	r1, r2
 8041ee6:	4618      	mov	r0, r3
 8041ee8:	f006 fa37 	bl	804835a <USB_ReadDevInEPInterrupt>
 8041eec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8041eee:	693b      	ldr	r3, [r7, #16]
 8041ef0:	f003 0301 	and.w	r3, r3, #1
 8041ef4:	2b00      	cmp	r3, #0
 8041ef6:	d057      	beq.n	8041fa8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8041ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041efa:	f003 030f 	and.w	r3, r3, #15
 8041efe:	2201      	movs	r2, #1
 8041f00:	fa02 f303 	lsl.w	r3, r2, r3
 8041f04:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8041f06:	69fb      	ldr	r3, [r7, #28]
 8041f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8041f0e:	68fb      	ldr	r3, [r7, #12]
 8041f10:	43db      	mvns	r3, r3
 8041f12:	69f9      	ldr	r1, [r7, #28]
 8041f14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8041f18:	4013      	ands	r3, r2
 8041f1a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8041f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041f1e:	015a      	lsls	r2, r3, #5
 8041f20:	69fb      	ldr	r3, [r7, #28]
 8041f22:	4413      	add	r3, r2
 8041f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8041f28:	461a      	mov	r2, r3
 8041f2a:	2301      	movs	r3, #1
 8041f2c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8041f2e:	687b      	ldr	r3, [r7, #4]
 8041f30:	799b      	ldrb	r3, [r3, #6]
 8041f32:	2b01      	cmp	r3, #1
 8041f34:	d132      	bne.n	8041f9c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8041f36:	6879      	ldr	r1, [r7, #4]
 8041f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041f3a:	4613      	mov	r3, r2
 8041f3c:	00db      	lsls	r3, r3, #3
 8041f3e:	4413      	add	r3, r2
 8041f40:	009b      	lsls	r3, r3, #2
 8041f42:	440b      	add	r3, r1
 8041f44:	3320      	adds	r3, #32
 8041f46:	6819      	ldr	r1, [r3, #0]
 8041f48:	6878      	ldr	r0, [r7, #4]
 8041f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041f4c:	4613      	mov	r3, r2
 8041f4e:	00db      	lsls	r3, r3, #3
 8041f50:	4413      	add	r3, r2
 8041f52:	009b      	lsls	r3, r3, #2
 8041f54:	4403      	add	r3, r0
 8041f56:	331c      	adds	r3, #28
 8041f58:	681b      	ldr	r3, [r3, #0]
 8041f5a:	4419      	add	r1, r3
 8041f5c:	6878      	ldr	r0, [r7, #4]
 8041f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041f60:	4613      	mov	r3, r2
 8041f62:	00db      	lsls	r3, r3, #3
 8041f64:	4413      	add	r3, r2
 8041f66:	009b      	lsls	r3, r3, #2
 8041f68:	4403      	add	r3, r0
 8041f6a:	3320      	adds	r3, #32
 8041f6c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8041f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041f70:	2b00      	cmp	r3, #0
 8041f72:	d113      	bne.n	8041f9c <HAL_PCD_IRQHandler+0x3a2>
 8041f74:	6879      	ldr	r1, [r7, #4]
 8041f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041f78:	4613      	mov	r3, r2
 8041f7a:	00db      	lsls	r3, r3, #3
 8041f7c:	4413      	add	r3, r2
 8041f7e:	009b      	lsls	r3, r3, #2
 8041f80:	440b      	add	r3, r1
 8041f82:	3324      	adds	r3, #36	@ 0x24
 8041f84:	681b      	ldr	r3, [r3, #0]
 8041f86:	2b00      	cmp	r3, #0
 8041f88:	d108      	bne.n	8041f9c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8041f8a:	687b      	ldr	r3, [r7, #4]
 8041f8c:	6818      	ldr	r0, [r3, #0]
 8041f8e:	687b      	ldr	r3, [r7, #4]
 8041f90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8041f94:	461a      	mov	r2, r3
 8041f96:	2101      	movs	r1, #1
 8041f98:	f006 fa40 	bl	804841c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8041f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041f9e:	b2db      	uxtb	r3, r3
 8041fa0:	4619      	mov	r1, r3
 8041fa2:	6878      	ldr	r0, [r7, #4]
 8041fa4:	f008 fa8f 	bl	804a4c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8041fa8:	693b      	ldr	r3, [r7, #16]
 8041faa:	f003 0308 	and.w	r3, r3, #8
 8041fae:	2b00      	cmp	r3, #0
 8041fb0:	d008      	beq.n	8041fc4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8041fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041fb4:	015a      	lsls	r2, r3, #5
 8041fb6:	69fb      	ldr	r3, [r7, #28]
 8041fb8:	4413      	add	r3, r2
 8041fba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8041fbe:	461a      	mov	r2, r3
 8041fc0:	2308      	movs	r3, #8
 8041fc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8041fc4:	693b      	ldr	r3, [r7, #16]
 8041fc6:	f003 0310 	and.w	r3, r3, #16
 8041fca:	2b00      	cmp	r3, #0
 8041fcc:	d008      	beq.n	8041fe0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8041fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041fd0:	015a      	lsls	r2, r3, #5
 8041fd2:	69fb      	ldr	r3, [r7, #28]
 8041fd4:	4413      	add	r3, r2
 8041fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8041fda:	461a      	mov	r2, r3
 8041fdc:	2310      	movs	r3, #16
 8041fde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8041fe0:	693b      	ldr	r3, [r7, #16]
 8041fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8041fe6:	2b00      	cmp	r3, #0
 8041fe8:	d008      	beq.n	8041ffc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8041fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041fec:	015a      	lsls	r2, r3, #5
 8041fee:	69fb      	ldr	r3, [r7, #28]
 8041ff0:	4413      	add	r3, r2
 8041ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8041ff6:	461a      	mov	r2, r3
 8041ff8:	2340      	movs	r3, #64	@ 0x40
 8041ffa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8041ffc:	693b      	ldr	r3, [r7, #16]
 8041ffe:	f003 0302 	and.w	r3, r3, #2
 8042002:	2b00      	cmp	r3, #0
 8042004:	d023      	beq.n	804204e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8042006:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8042008:	6a38      	ldr	r0, [r7, #32]
 804200a:	f005 fa1f 	bl	804744c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 804200e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042010:	4613      	mov	r3, r2
 8042012:	00db      	lsls	r3, r3, #3
 8042014:	4413      	add	r3, r2
 8042016:	009b      	lsls	r3, r3, #2
 8042018:	3310      	adds	r3, #16
 804201a:	687a      	ldr	r2, [r7, #4]
 804201c:	4413      	add	r3, r2
 804201e:	3304      	adds	r3, #4
 8042020:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8042022:	697b      	ldr	r3, [r7, #20]
 8042024:	78db      	ldrb	r3, [r3, #3]
 8042026:	2b01      	cmp	r3, #1
 8042028:	d108      	bne.n	804203c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 804202a:	697b      	ldr	r3, [r7, #20]
 804202c:	2200      	movs	r2, #0
 804202e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8042030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042032:	b2db      	uxtb	r3, r3
 8042034:	4619      	mov	r1, r3
 8042036:	6878      	ldr	r0, [r7, #4]
 8042038:	f008 fadc 	bl	804a5f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 804203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804203e:	015a      	lsls	r2, r3, #5
 8042040:	69fb      	ldr	r3, [r7, #28]
 8042042:	4413      	add	r3, r2
 8042044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8042048:	461a      	mov	r2, r3
 804204a:	2302      	movs	r3, #2
 804204c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 804204e:	693b      	ldr	r3, [r7, #16]
 8042050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8042054:	2b00      	cmp	r3, #0
 8042056:	d003      	beq.n	8042060 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8042058:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 804205a:	6878      	ldr	r0, [r7, #4]
 804205c:	f000 fcd2 	bl	8042a04 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8042060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042062:	3301      	adds	r3, #1
 8042064:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8042066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8042068:	085b      	lsrs	r3, r3, #1
 804206a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 804206c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804206e:	2b00      	cmp	r3, #0
 8042070:	f47f af2e 	bne.w	8041ed0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8042074:	687b      	ldr	r3, [r7, #4]
 8042076:	681b      	ldr	r3, [r3, #0]
 8042078:	4618      	mov	r0, r3
 804207a:	f006 f909 	bl	8048290 <USB_ReadInterrupts>
 804207e:	4603      	mov	r3, r0
 8042080:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8042084:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8042088:	d122      	bne.n	80420d0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 804208a:	69fb      	ldr	r3, [r7, #28]
 804208c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042090:	685b      	ldr	r3, [r3, #4]
 8042092:	69fa      	ldr	r2, [r7, #28]
 8042094:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8042098:	f023 0301 	bic.w	r3, r3, #1
 804209c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 804209e:	687b      	ldr	r3, [r7, #4]
 80420a0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80420a4:	2b01      	cmp	r3, #1
 80420a6:	d108      	bne.n	80420ba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80420a8:	687b      	ldr	r3, [r7, #4]
 80420aa:	2200      	movs	r2, #0
 80420ac:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80420b0:	2100      	movs	r1, #0
 80420b2:	6878      	ldr	r0, [r7, #4]
 80420b4:	f000 fedc 	bl	8042e70 <HAL_PCDEx_LPM_Callback>
 80420b8:	e002      	b.n	80420c0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80420ba:	6878      	ldr	r0, [r7, #4]
 80420bc:	f008 fa7a 	bl	804a5b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80420c0:	687b      	ldr	r3, [r7, #4]
 80420c2:	681b      	ldr	r3, [r3, #0]
 80420c4:	695a      	ldr	r2, [r3, #20]
 80420c6:	687b      	ldr	r3, [r7, #4]
 80420c8:	681b      	ldr	r3, [r3, #0]
 80420ca:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80420ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80420d0:	687b      	ldr	r3, [r7, #4]
 80420d2:	681b      	ldr	r3, [r3, #0]
 80420d4:	4618      	mov	r0, r3
 80420d6:	f006 f8db 	bl	8048290 <USB_ReadInterrupts>
 80420da:	4603      	mov	r3, r0
 80420dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80420e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80420e4:	d112      	bne.n	804210c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80420e6:	69fb      	ldr	r3, [r7, #28]
 80420e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80420ec:	689b      	ldr	r3, [r3, #8]
 80420ee:	f003 0301 	and.w	r3, r3, #1
 80420f2:	2b01      	cmp	r3, #1
 80420f4:	d102      	bne.n	80420fc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80420f6:	6878      	ldr	r0, [r7, #4]
 80420f8:	f008 fa36 	bl	804a568 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80420fc:	687b      	ldr	r3, [r7, #4]
 80420fe:	681b      	ldr	r3, [r3, #0]
 8042100:	695a      	ldr	r2, [r3, #20]
 8042102:	687b      	ldr	r3, [r7, #4]
 8042104:	681b      	ldr	r3, [r3, #0]
 8042106:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 804210a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 804210c:	687b      	ldr	r3, [r7, #4]
 804210e:	681b      	ldr	r3, [r3, #0]
 8042110:	4618      	mov	r0, r3
 8042112:	f006 f8bd 	bl	8048290 <USB_ReadInterrupts>
 8042116:	4603      	mov	r3, r0
 8042118:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 804211c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8042120:	d121      	bne.n	8042166 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8042122:	687b      	ldr	r3, [r7, #4]
 8042124:	681b      	ldr	r3, [r3, #0]
 8042126:	695a      	ldr	r2, [r3, #20]
 8042128:	687b      	ldr	r3, [r7, #4]
 804212a:	681b      	ldr	r3, [r3, #0]
 804212c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8042130:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8042132:	687b      	ldr	r3, [r7, #4]
 8042134:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8042138:	2b00      	cmp	r3, #0
 804213a:	d111      	bne.n	8042160 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 804213c:	687b      	ldr	r3, [r7, #4]
 804213e:	2201      	movs	r2, #1
 8042140:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8042144:	687b      	ldr	r3, [r7, #4]
 8042146:	681b      	ldr	r3, [r3, #0]
 8042148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804214a:	089b      	lsrs	r3, r3, #2
 804214c:	f003 020f 	and.w	r2, r3, #15
 8042150:	687b      	ldr	r3, [r7, #4]
 8042152:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8042156:	2101      	movs	r1, #1
 8042158:	6878      	ldr	r0, [r7, #4]
 804215a:	f000 fe89 	bl	8042e70 <HAL_PCDEx_LPM_Callback>
 804215e:	e002      	b.n	8042166 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8042160:	6878      	ldr	r0, [r7, #4]
 8042162:	f008 fa01 	bl	804a568 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8042166:	687b      	ldr	r3, [r7, #4]
 8042168:	681b      	ldr	r3, [r3, #0]
 804216a:	4618      	mov	r0, r3
 804216c:	f006 f890 	bl	8048290 <USB_ReadInterrupts>
 8042170:	4603      	mov	r3, r0
 8042172:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8042176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 804217a:	f040 80b7 	bne.w	80422ec <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 804217e:	69fb      	ldr	r3, [r7, #28]
 8042180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042184:	685b      	ldr	r3, [r3, #4]
 8042186:	69fa      	ldr	r2, [r7, #28]
 8042188:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804218c:	f023 0301 	bic.w	r3, r3, #1
 8042190:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8042192:	687b      	ldr	r3, [r7, #4]
 8042194:	681b      	ldr	r3, [r3, #0]
 8042196:	2110      	movs	r1, #16
 8042198:	4618      	mov	r0, r3
 804219a:	f005 f957 	bl	804744c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 804219e:	2300      	movs	r3, #0
 80421a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80421a2:	e046      	b.n	8042232 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80421a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80421a6:	015a      	lsls	r2, r3, #5
 80421a8:	69fb      	ldr	r3, [r7, #28]
 80421aa:	4413      	add	r3, r2
 80421ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80421b0:	461a      	mov	r2, r3
 80421b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80421b6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80421b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80421ba:	015a      	lsls	r2, r3, #5
 80421bc:	69fb      	ldr	r3, [r7, #28]
 80421be:	4413      	add	r3, r2
 80421c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80421c4:	681b      	ldr	r3, [r3, #0]
 80421c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80421c8:	0151      	lsls	r1, r2, #5
 80421ca:	69fa      	ldr	r2, [r7, #28]
 80421cc:	440a      	add	r2, r1
 80421ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80421d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80421d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80421d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80421da:	015a      	lsls	r2, r3, #5
 80421dc:	69fb      	ldr	r3, [r7, #28]
 80421de:	4413      	add	r3, r2
 80421e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80421e4:	461a      	mov	r2, r3
 80421e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80421ea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80421ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80421ee:	015a      	lsls	r2, r3, #5
 80421f0:	69fb      	ldr	r3, [r7, #28]
 80421f2:	4413      	add	r3, r2
 80421f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80421f8:	681b      	ldr	r3, [r3, #0]
 80421fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80421fc:	0151      	lsls	r1, r2, #5
 80421fe:	69fa      	ldr	r2, [r7, #28]
 8042200:	440a      	add	r2, r1
 8042202:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8042206:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 804220a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 804220c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804220e:	015a      	lsls	r2, r3, #5
 8042210:	69fb      	ldr	r3, [r7, #28]
 8042212:	4413      	add	r3, r2
 8042214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042218:	681b      	ldr	r3, [r3, #0]
 804221a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 804221c:	0151      	lsls	r1, r2, #5
 804221e:	69fa      	ldr	r2, [r7, #28]
 8042220:	440a      	add	r2, r1
 8042222:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8042226:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 804222a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 804222c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804222e:	3301      	adds	r3, #1
 8042230:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8042232:	687b      	ldr	r3, [r7, #4]
 8042234:	791b      	ldrb	r3, [r3, #4]
 8042236:	461a      	mov	r2, r3
 8042238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804223a:	4293      	cmp	r3, r2
 804223c:	d3b2      	bcc.n	80421a4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 804223e:	69fb      	ldr	r3, [r7, #28]
 8042240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042244:	69db      	ldr	r3, [r3, #28]
 8042246:	69fa      	ldr	r2, [r7, #28]
 8042248:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804224c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8042250:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8042252:	687b      	ldr	r3, [r7, #4]
 8042254:	7bdb      	ldrb	r3, [r3, #15]
 8042256:	2b00      	cmp	r3, #0
 8042258:	d016      	beq.n	8042288 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 804225a:	69fb      	ldr	r3, [r7, #28]
 804225c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8042264:	69fa      	ldr	r2, [r7, #28]
 8042266:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804226a:	f043 030b 	orr.w	r3, r3, #11
 804226e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8042272:	69fb      	ldr	r3, [r7, #28]
 8042274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 804227a:	69fa      	ldr	r2, [r7, #28]
 804227c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8042280:	f043 030b 	orr.w	r3, r3, #11
 8042284:	6453      	str	r3, [r2, #68]	@ 0x44
 8042286:	e015      	b.n	80422b4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8042288:	69fb      	ldr	r3, [r7, #28]
 804228a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804228e:	695a      	ldr	r2, [r3, #20]
 8042290:	69fb      	ldr	r3, [r7, #28]
 8042292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042296:	4619      	mov	r1, r3
 8042298:	f242 032b 	movw	r3, #8235	@ 0x202b
 804229c:	4313      	orrs	r3, r2
 804229e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80422a0:	69fb      	ldr	r3, [r7, #28]
 80422a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80422a6:	691b      	ldr	r3, [r3, #16]
 80422a8:	69fa      	ldr	r2, [r7, #28]
 80422aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80422ae:	f043 030b 	orr.w	r3, r3, #11
 80422b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80422b4:	69fb      	ldr	r3, [r7, #28]
 80422b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80422ba:	681b      	ldr	r3, [r3, #0]
 80422bc:	69fa      	ldr	r2, [r7, #28]
 80422be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80422c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80422c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80422c8:	687b      	ldr	r3, [r7, #4]
 80422ca:	6818      	ldr	r0, [r3, #0]
 80422cc:	687b      	ldr	r3, [r7, #4]
 80422ce:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80422d0:	687b      	ldr	r3, [r7, #4]
 80422d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80422d6:	461a      	mov	r2, r3
 80422d8:	f006 f8a0 	bl	804841c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80422dc:	687b      	ldr	r3, [r7, #4]
 80422de:	681b      	ldr	r3, [r3, #0]
 80422e0:	695a      	ldr	r2, [r3, #20]
 80422e2:	687b      	ldr	r3, [r7, #4]
 80422e4:	681b      	ldr	r3, [r3, #0]
 80422e6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80422ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80422ec:	687b      	ldr	r3, [r7, #4]
 80422ee:	681b      	ldr	r3, [r3, #0]
 80422f0:	4618      	mov	r0, r3
 80422f2:	f005 ffcd 	bl	8048290 <USB_ReadInterrupts>
 80422f6:	4603      	mov	r3, r0
 80422f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80422fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8042300:	d123      	bne.n	804234a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8042302:	687b      	ldr	r3, [r7, #4]
 8042304:	681b      	ldr	r3, [r3, #0]
 8042306:	4618      	mov	r0, r3
 8042308:	f006 f864 	bl	80483d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 804230c:	687b      	ldr	r3, [r7, #4]
 804230e:	681b      	ldr	r3, [r3, #0]
 8042310:	4618      	mov	r0, r3
 8042312:	f005 f914 	bl	804753e <USB_GetDevSpeed>
 8042316:	4603      	mov	r3, r0
 8042318:	461a      	mov	r2, r3
 804231a:	687b      	ldr	r3, [r7, #4]
 804231c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 804231e:	687b      	ldr	r3, [r7, #4]
 8042320:	681c      	ldr	r4, [r3, #0]
 8042322:	f001 fe0f 	bl	8043f44 <HAL_RCC_GetHCLKFreq>
 8042326:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8042328:	687b      	ldr	r3, [r7, #4]
 804232a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 804232c:	461a      	mov	r2, r3
 804232e:	4620      	mov	r0, r4
 8042330:	f004 fe1e 	bl	8046f70 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8042334:	6878      	ldr	r0, [r7, #4]
 8042336:	f008 f8ee 	bl	804a516 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 804233a:	687b      	ldr	r3, [r7, #4]
 804233c:	681b      	ldr	r3, [r3, #0]
 804233e:	695a      	ldr	r2, [r3, #20]
 8042340:	687b      	ldr	r3, [r7, #4]
 8042342:	681b      	ldr	r3, [r3, #0]
 8042344:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8042348:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 804234a:	687b      	ldr	r3, [r7, #4]
 804234c:	681b      	ldr	r3, [r3, #0]
 804234e:	4618      	mov	r0, r3
 8042350:	f005 ff9e 	bl	8048290 <USB_ReadInterrupts>
 8042354:	4603      	mov	r3, r0
 8042356:	f003 0308 	and.w	r3, r3, #8
 804235a:	2b08      	cmp	r3, #8
 804235c:	d10a      	bne.n	8042374 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 804235e:	6878      	ldr	r0, [r7, #4]
 8042360:	f008 f8cb 	bl	804a4fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8042364:	687b      	ldr	r3, [r7, #4]
 8042366:	681b      	ldr	r3, [r3, #0]
 8042368:	695a      	ldr	r2, [r3, #20]
 804236a:	687b      	ldr	r3, [r7, #4]
 804236c:	681b      	ldr	r3, [r3, #0]
 804236e:	f002 0208 	and.w	r2, r2, #8
 8042372:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8042374:	687b      	ldr	r3, [r7, #4]
 8042376:	681b      	ldr	r3, [r3, #0]
 8042378:	4618      	mov	r0, r3
 804237a:	f005 ff89 	bl	8048290 <USB_ReadInterrupts>
 804237e:	4603      	mov	r3, r0
 8042380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8042384:	2b80      	cmp	r3, #128	@ 0x80
 8042386:	d123      	bne.n	80423d0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8042388:	6a3b      	ldr	r3, [r7, #32]
 804238a:	699b      	ldr	r3, [r3, #24]
 804238c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8042390:	6a3b      	ldr	r3, [r7, #32]
 8042392:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8042394:	2301      	movs	r3, #1
 8042396:	627b      	str	r3, [r7, #36]	@ 0x24
 8042398:	e014      	b.n	80423c4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 804239a:	6879      	ldr	r1, [r7, #4]
 804239c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 804239e:	4613      	mov	r3, r2
 80423a0:	00db      	lsls	r3, r3, #3
 80423a2:	4413      	add	r3, r2
 80423a4:	009b      	lsls	r3, r3, #2
 80423a6:	440b      	add	r3, r1
 80423a8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80423ac:	781b      	ldrb	r3, [r3, #0]
 80423ae:	2b01      	cmp	r3, #1
 80423b0:	d105      	bne.n	80423be <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80423b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80423b4:	b2db      	uxtb	r3, r3
 80423b6:	4619      	mov	r1, r3
 80423b8:	6878      	ldr	r0, [r7, #4]
 80423ba:	f000 faf2 	bl	80429a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80423be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80423c0:	3301      	adds	r3, #1
 80423c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80423c4:	687b      	ldr	r3, [r7, #4]
 80423c6:	791b      	ldrb	r3, [r3, #4]
 80423c8:	461a      	mov	r2, r3
 80423ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80423cc:	4293      	cmp	r3, r2
 80423ce:	d3e4      	bcc.n	804239a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80423d0:	687b      	ldr	r3, [r7, #4]
 80423d2:	681b      	ldr	r3, [r3, #0]
 80423d4:	4618      	mov	r0, r3
 80423d6:	f005 ff5b 	bl	8048290 <USB_ReadInterrupts>
 80423da:	4603      	mov	r3, r0
 80423dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80423e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80423e4:	d13c      	bne.n	8042460 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80423e6:	2301      	movs	r3, #1
 80423e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80423ea:	e02b      	b.n	8042444 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80423ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80423ee:	015a      	lsls	r2, r3, #5
 80423f0:	69fb      	ldr	r3, [r7, #28]
 80423f2:	4413      	add	r3, r2
 80423f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80423f8:	681b      	ldr	r3, [r3, #0]
 80423fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80423fc:	6879      	ldr	r1, [r7, #4]
 80423fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042400:	4613      	mov	r3, r2
 8042402:	00db      	lsls	r3, r3, #3
 8042404:	4413      	add	r3, r2
 8042406:	009b      	lsls	r3, r3, #2
 8042408:	440b      	add	r3, r1
 804240a:	3318      	adds	r3, #24
 804240c:	781b      	ldrb	r3, [r3, #0]
 804240e:	2b01      	cmp	r3, #1
 8042410:	d115      	bne.n	804243e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8042412:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8042414:	2b00      	cmp	r3, #0
 8042416:	da12      	bge.n	804243e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8042418:	6879      	ldr	r1, [r7, #4]
 804241a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 804241c:	4613      	mov	r3, r2
 804241e:	00db      	lsls	r3, r3, #3
 8042420:	4413      	add	r3, r2
 8042422:	009b      	lsls	r3, r3, #2
 8042424:	440b      	add	r3, r1
 8042426:	3317      	adds	r3, #23
 8042428:	2201      	movs	r2, #1
 804242a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 804242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804242e:	b2db      	uxtb	r3, r3
 8042430:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8042434:	b2db      	uxtb	r3, r3
 8042436:	4619      	mov	r1, r3
 8042438:	6878      	ldr	r0, [r7, #4]
 804243a:	f000 fab2 	bl	80429a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 804243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042440:	3301      	adds	r3, #1
 8042442:	627b      	str	r3, [r7, #36]	@ 0x24
 8042444:	687b      	ldr	r3, [r7, #4]
 8042446:	791b      	ldrb	r3, [r3, #4]
 8042448:	461a      	mov	r2, r3
 804244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804244c:	4293      	cmp	r3, r2
 804244e:	d3cd      	bcc.n	80423ec <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8042450:	687b      	ldr	r3, [r7, #4]
 8042452:	681b      	ldr	r3, [r3, #0]
 8042454:	695a      	ldr	r2, [r3, #20]
 8042456:	687b      	ldr	r3, [r7, #4]
 8042458:	681b      	ldr	r3, [r3, #0]
 804245a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 804245e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8042460:	687b      	ldr	r3, [r7, #4]
 8042462:	681b      	ldr	r3, [r3, #0]
 8042464:	4618      	mov	r0, r3
 8042466:	f005 ff13 	bl	8048290 <USB_ReadInterrupts>
 804246a:	4603      	mov	r3, r0
 804246c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8042470:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8042474:	d156      	bne.n	8042524 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8042476:	2301      	movs	r3, #1
 8042478:	627b      	str	r3, [r7, #36]	@ 0x24
 804247a:	e045      	b.n	8042508 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 804247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804247e:	015a      	lsls	r2, r3, #5
 8042480:	69fb      	ldr	r3, [r7, #28]
 8042482:	4413      	add	r3, r2
 8042484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042488:	681b      	ldr	r3, [r3, #0]
 804248a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 804248c:	6879      	ldr	r1, [r7, #4]
 804248e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042490:	4613      	mov	r3, r2
 8042492:	00db      	lsls	r3, r3, #3
 8042494:	4413      	add	r3, r2
 8042496:	009b      	lsls	r3, r3, #2
 8042498:	440b      	add	r3, r1
 804249a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 804249e:	781b      	ldrb	r3, [r3, #0]
 80424a0:	2b01      	cmp	r3, #1
 80424a2:	d12e      	bne.n	8042502 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80424a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80424a6:	2b00      	cmp	r3, #0
 80424a8:	da2b      	bge.n	8042502 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80424aa:	69bb      	ldr	r3, [r7, #24]
 80424ac:	0c1a      	lsrs	r2, r3, #16
 80424ae:	687b      	ldr	r3, [r7, #4]
 80424b0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80424b4:	4053      	eors	r3, r2
 80424b6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80424ba:	2b00      	cmp	r3, #0
 80424bc:	d121      	bne.n	8042502 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80424be:	6879      	ldr	r1, [r7, #4]
 80424c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80424c2:	4613      	mov	r3, r2
 80424c4:	00db      	lsls	r3, r3, #3
 80424c6:	4413      	add	r3, r2
 80424c8:	009b      	lsls	r3, r3, #2
 80424ca:	440b      	add	r3, r1
 80424cc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80424d0:	2201      	movs	r2, #1
 80424d2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80424d4:	6a3b      	ldr	r3, [r7, #32]
 80424d6:	699b      	ldr	r3, [r3, #24]
 80424d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80424dc:	6a3b      	ldr	r3, [r7, #32]
 80424de:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80424e0:	6a3b      	ldr	r3, [r7, #32]
 80424e2:	695b      	ldr	r3, [r3, #20]
 80424e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80424e8:	2b00      	cmp	r3, #0
 80424ea:	d10a      	bne.n	8042502 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80424ec:	69fb      	ldr	r3, [r7, #28]
 80424ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80424f2:	685b      	ldr	r3, [r3, #4]
 80424f4:	69fa      	ldr	r2, [r7, #28]
 80424f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80424fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80424fe:	6053      	str	r3, [r2, #4]
            break;
 8042500:	e008      	b.n	8042514 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8042502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042504:	3301      	adds	r3, #1
 8042506:	627b      	str	r3, [r7, #36]	@ 0x24
 8042508:	687b      	ldr	r3, [r7, #4]
 804250a:	791b      	ldrb	r3, [r3, #4]
 804250c:	461a      	mov	r2, r3
 804250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042510:	4293      	cmp	r3, r2
 8042512:	d3b3      	bcc.n	804247c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8042514:	687b      	ldr	r3, [r7, #4]
 8042516:	681b      	ldr	r3, [r3, #0]
 8042518:	695a      	ldr	r2, [r3, #20]
 804251a:	687b      	ldr	r3, [r7, #4]
 804251c:	681b      	ldr	r3, [r3, #0]
 804251e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8042522:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8042524:	687b      	ldr	r3, [r7, #4]
 8042526:	681b      	ldr	r3, [r3, #0]
 8042528:	4618      	mov	r0, r3
 804252a:	f005 feb1 	bl	8048290 <USB_ReadInterrupts>
 804252e:	4603      	mov	r3, r0
 8042530:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8042534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8042538:	d10a      	bne.n	8042550 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 804253a:	6878      	ldr	r0, [r7, #4]
 804253c:	f008 f86c 	bl	804a618 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8042540:	687b      	ldr	r3, [r7, #4]
 8042542:	681b      	ldr	r3, [r3, #0]
 8042544:	695a      	ldr	r2, [r3, #20]
 8042546:	687b      	ldr	r3, [r7, #4]
 8042548:	681b      	ldr	r3, [r3, #0]
 804254a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 804254e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8042550:	687b      	ldr	r3, [r7, #4]
 8042552:	681b      	ldr	r3, [r3, #0]
 8042554:	4618      	mov	r0, r3
 8042556:	f005 fe9b 	bl	8048290 <USB_ReadInterrupts>
 804255a:	4603      	mov	r3, r0
 804255c:	f003 0304 	and.w	r3, r3, #4
 8042560:	2b04      	cmp	r3, #4
 8042562:	d115      	bne.n	8042590 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8042564:	687b      	ldr	r3, [r7, #4]
 8042566:	681b      	ldr	r3, [r3, #0]
 8042568:	685b      	ldr	r3, [r3, #4]
 804256a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 804256c:	69bb      	ldr	r3, [r7, #24]
 804256e:	f003 0304 	and.w	r3, r3, #4
 8042572:	2b00      	cmp	r3, #0
 8042574:	d002      	beq.n	804257c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8042576:	6878      	ldr	r0, [r7, #4]
 8042578:	f008 f85c 	bl	804a634 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 804257c:	687b      	ldr	r3, [r7, #4]
 804257e:	681b      	ldr	r3, [r3, #0]
 8042580:	6859      	ldr	r1, [r3, #4]
 8042582:	687b      	ldr	r3, [r7, #4]
 8042584:	681b      	ldr	r3, [r3, #0]
 8042586:	69ba      	ldr	r2, [r7, #24]
 8042588:	430a      	orrs	r2, r1
 804258a:	605a      	str	r2, [r3, #4]
 804258c:	e000      	b.n	8042590 <HAL_PCD_IRQHandler+0x996>
      return;
 804258e:	bf00      	nop
    }
  }
}
 8042590:	3734      	adds	r7, #52	@ 0x34
 8042592:	46bd      	mov	sp, r7
 8042594:	bd90      	pop	{r4, r7, pc}

08042596 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8042596:	b580      	push	{r7, lr}
 8042598:	b082      	sub	sp, #8
 804259a:	af00      	add	r7, sp, #0
 804259c:	6078      	str	r0, [r7, #4]
 804259e:	460b      	mov	r3, r1
 80425a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80425a2:	687b      	ldr	r3, [r7, #4]
 80425a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80425a8:	2b01      	cmp	r3, #1
 80425aa:	d101      	bne.n	80425b0 <HAL_PCD_SetAddress+0x1a>
 80425ac:	2302      	movs	r3, #2
 80425ae:	e012      	b.n	80425d6 <HAL_PCD_SetAddress+0x40>
 80425b0:	687b      	ldr	r3, [r7, #4]
 80425b2:	2201      	movs	r2, #1
 80425b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80425b8:	687b      	ldr	r3, [r7, #4]
 80425ba:	78fa      	ldrb	r2, [r7, #3]
 80425bc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80425be:	687b      	ldr	r3, [r7, #4]
 80425c0:	681b      	ldr	r3, [r3, #0]
 80425c2:	78fa      	ldrb	r2, [r7, #3]
 80425c4:	4611      	mov	r1, r2
 80425c6:	4618      	mov	r0, r3
 80425c8:	f005 fdfa 	bl	80481c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80425cc:	687b      	ldr	r3, [r7, #4]
 80425ce:	2200      	movs	r2, #0
 80425d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80425d4:	2300      	movs	r3, #0
}
 80425d6:	4618      	mov	r0, r3
 80425d8:	3708      	adds	r7, #8
 80425da:	46bd      	mov	sp, r7
 80425dc:	bd80      	pop	{r7, pc}

080425de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80425de:	b580      	push	{r7, lr}
 80425e0:	b084      	sub	sp, #16
 80425e2:	af00      	add	r7, sp, #0
 80425e4:	6078      	str	r0, [r7, #4]
 80425e6:	4608      	mov	r0, r1
 80425e8:	4611      	mov	r1, r2
 80425ea:	461a      	mov	r2, r3
 80425ec:	4603      	mov	r3, r0
 80425ee:	70fb      	strb	r3, [r7, #3]
 80425f0:	460b      	mov	r3, r1
 80425f2:	803b      	strh	r3, [r7, #0]
 80425f4:	4613      	mov	r3, r2
 80425f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80425f8:	2300      	movs	r3, #0
 80425fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80425fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8042600:	2b00      	cmp	r3, #0
 8042602:	da0f      	bge.n	8042624 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8042604:	78fb      	ldrb	r3, [r7, #3]
 8042606:	f003 020f 	and.w	r2, r3, #15
 804260a:	4613      	mov	r3, r2
 804260c:	00db      	lsls	r3, r3, #3
 804260e:	4413      	add	r3, r2
 8042610:	009b      	lsls	r3, r3, #2
 8042612:	3310      	adds	r3, #16
 8042614:	687a      	ldr	r2, [r7, #4]
 8042616:	4413      	add	r3, r2
 8042618:	3304      	adds	r3, #4
 804261a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 804261c:	68fb      	ldr	r3, [r7, #12]
 804261e:	2201      	movs	r2, #1
 8042620:	705a      	strb	r2, [r3, #1]
 8042622:	e00f      	b.n	8042644 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8042624:	78fb      	ldrb	r3, [r7, #3]
 8042626:	f003 020f 	and.w	r2, r3, #15
 804262a:	4613      	mov	r3, r2
 804262c:	00db      	lsls	r3, r3, #3
 804262e:	4413      	add	r3, r2
 8042630:	009b      	lsls	r3, r3, #2
 8042632:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8042636:	687a      	ldr	r2, [r7, #4]
 8042638:	4413      	add	r3, r2
 804263a:	3304      	adds	r3, #4
 804263c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 804263e:	68fb      	ldr	r3, [r7, #12]
 8042640:	2200      	movs	r2, #0
 8042642:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8042644:	78fb      	ldrb	r3, [r7, #3]
 8042646:	f003 030f 	and.w	r3, r3, #15
 804264a:	b2da      	uxtb	r2, r3
 804264c:	68fb      	ldr	r3, [r7, #12]
 804264e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8042650:	883b      	ldrh	r3, [r7, #0]
 8042652:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8042656:	68fb      	ldr	r3, [r7, #12]
 8042658:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 804265a:	68fb      	ldr	r3, [r7, #12]
 804265c:	78ba      	ldrb	r2, [r7, #2]
 804265e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8042660:	68fb      	ldr	r3, [r7, #12]
 8042662:	785b      	ldrb	r3, [r3, #1]
 8042664:	2b00      	cmp	r3, #0
 8042666:	d004      	beq.n	8042672 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8042668:	68fb      	ldr	r3, [r7, #12]
 804266a:	781b      	ldrb	r3, [r3, #0]
 804266c:	461a      	mov	r2, r3
 804266e:	68fb      	ldr	r3, [r7, #12]
 8042670:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8042672:	78bb      	ldrb	r3, [r7, #2]
 8042674:	2b02      	cmp	r3, #2
 8042676:	d102      	bne.n	804267e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8042678:	68fb      	ldr	r3, [r7, #12]
 804267a:	2200      	movs	r2, #0
 804267c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 804267e:	687b      	ldr	r3, [r7, #4]
 8042680:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8042684:	2b01      	cmp	r3, #1
 8042686:	d101      	bne.n	804268c <HAL_PCD_EP_Open+0xae>
 8042688:	2302      	movs	r3, #2
 804268a:	e00e      	b.n	80426aa <HAL_PCD_EP_Open+0xcc>
 804268c:	687b      	ldr	r3, [r7, #4]
 804268e:	2201      	movs	r2, #1
 8042690:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8042694:	687b      	ldr	r3, [r7, #4]
 8042696:	681b      	ldr	r3, [r3, #0]
 8042698:	68f9      	ldr	r1, [r7, #12]
 804269a:	4618      	mov	r0, r3
 804269c:	f004 ff74 	bl	8047588 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80426a0:	687b      	ldr	r3, [r7, #4]
 80426a2:	2200      	movs	r2, #0
 80426a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80426a8:	7afb      	ldrb	r3, [r7, #11]
}
 80426aa:	4618      	mov	r0, r3
 80426ac:	3710      	adds	r7, #16
 80426ae:	46bd      	mov	sp, r7
 80426b0:	bd80      	pop	{r7, pc}

080426b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80426b2:	b580      	push	{r7, lr}
 80426b4:	b084      	sub	sp, #16
 80426b6:	af00      	add	r7, sp, #0
 80426b8:	6078      	str	r0, [r7, #4]
 80426ba:	460b      	mov	r3, r1
 80426bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80426be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80426c2:	2b00      	cmp	r3, #0
 80426c4:	da0f      	bge.n	80426e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80426c6:	78fb      	ldrb	r3, [r7, #3]
 80426c8:	f003 020f 	and.w	r2, r3, #15
 80426cc:	4613      	mov	r3, r2
 80426ce:	00db      	lsls	r3, r3, #3
 80426d0:	4413      	add	r3, r2
 80426d2:	009b      	lsls	r3, r3, #2
 80426d4:	3310      	adds	r3, #16
 80426d6:	687a      	ldr	r2, [r7, #4]
 80426d8:	4413      	add	r3, r2
 80426da:	3304      	adds	r3, #4
 80426dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80426de:	68fb      	ldr	r3, [r7, #12]
 80426e0:	2201      	movs	r2, #1
 80426e2:	705a      	strb	r2, [r3, #1]
 80426e4:	e00f      	b.n	8042706 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80426e6:	78fb      	ldrb	r3, [r7, #3]
 80426e8:	f003 020f 	and.w	r2, r3, #15
 80426ec:	4613      	mov	r3, r2
 80426ee:	00db      	lsls	r3, r3, #3
 80426f0:	4413      	add	r3, r2
 80426f2:	009b      	lsls	r3, r3, #2
 80426f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80426f8:	687a      	ldr	r2, [r7, #4]
 80426fa:	4413      	add	r3, r2
 80426fc:	3304      	adds	r3, #4
 80426fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8042700:	68fb      	ldr	r3, [r7, #12]
 8042702:	2200      	movs	r2, #0
 8042704:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8042706:	78fb      	ldrb	r3, [r7, #3]
 8042708:	f003 030f 	and.w	r3, r3, #15
 804270c:	b2da      	uxtb	r2, r3
 804270e:	68fb      	ldr	r3, [r7, #12]
 8042710:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8042712:	687b      	ldr	r3, [r7, #4]
 8042714:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8042718:	2b01      	cmp	r3, #1
 804271a:	d101      	bne.n	8042720 <HAL_PCD_EP_Close+0x6e>
 804271c:	2302      	movs	r3, #2
 804271e:	e00e      	b.n	804273e <HAL_PCD_EP_Close+0x8c>
 8042720:	687b      	ldr	r3, [r7, #4]
 8042722:	2201      	movs	r2, #1
 8042724:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8042728:	687b      	ldr	r3, [r7, #4]
 804272a:	681b      	ldr	r3, [r3, #0]
 804272c:	68f9      	ldr	r1, [r7, #12]
 804272e:	4618      	mov	r0, r3
 8042730:	f004 ffb2 	bl	8047698 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8042734:	687b      	ldr	r3, [r7, #4]
 8042736:	2200      	movs	r2, #0
 8042738:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 804273c:	2300      	movs	r3, #0
}
 804273e:	4618      	mov	r0, r3
 8042740:	3710      	adds	r7, #16
 8042742:	46bd      	mov	sp, r7
 8042744:	bd80      	pop	{r7, pc}

08042746 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8042746:	b580      	push	{r7, lr}
 8042748:	b086      	sub	sp, #24
 804274a:	af00      	add	r7, sp, #0
 804274c:	60f8      	str	r0, [r7, #12]
 804274e:	607a      	str	r2, [r7, #4]
 8042750:	603b      	str	r3, [r7, #0]
 8042752:	460b      	mov	r3, r1
 8042754:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8042756:	7afb      	ldrb	r3, [r7, #11]
 8042758:	f003 020f 	and.w	r2, r3, #15
 804275c:	4613      	mov	r3, r2
 804275e:	00db      	lsls	r3, r3, #3
 8042760:	4413      	add	r3, r2
 8042762:	009b      	lsls	r3, r3, #2
 8042764:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8042768:	68fa      	ldr	r2, [r7, #12]
 804276a:	4413      	add	r3, r2
 804276c:	3304      	adds	r3, #4
 804276e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8042770:	697b      	ldr	r3, [r7, #20]
 8042772:	687a      	ldr	r2, [r7, #4]
 8042774:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8042776:	697b      	ldr	r3, [r7, #20]
 8042778:	683a      	ldr	r2, [r7, #0]
 804277a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 804277c:	697b      	ldr	r3, [r7, #20]
 804277e:	2200      	movs	r2, #0
 8042780:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8042782:	697b      	ldr	r3, [r7, #20]
 8042784:	2200      	movs	r2, #0
 8042786:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8042788:	7afb      	ldrb	r3, [r7, #11]
 804278a:	f003 030f 	and.w	r3, r3, #15
 804278e:	b2da      	uxtb	r2, r3
 8042790:	697b      	ldr	r3, [r7, #20]
 8042792:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8042794:	68fb      	ldr	r3, [r7, #12]
 8042796:	799b      	ldrb	r3, [r3, #6]
 8042798:	2b01      	cmp	r3, #1
 804279a:	d102      	bne.n	80427a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 804279c:	687a      	ldr	r2, [r7, #4]
 804279e:	697b      	ldr	r3, [r7, #20]
 80427a0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80427a2:	68fb      	ldr	r3, [r7, #12]
 80427a4:	6818      	ldr	r0, [r3, #0]
 80427a6:	68fb      	ldr	r3, [r7, #12]
 80427a8:	799b      	ldrb	r3, [r3, #6]
 80427aa:	461a      	mov	r2, r3
 80427ac:	6979      	ldr	r1, [r7, #20]
 80427ae:	f005 f84f 	bl	8047850 <USB_EPStartXfer>

  return HAL_OK;
 80427b2:	2300      	movs	r3, #0
}
 80427b4:	4618      	mov	r0, r3
 80427b6:	3718      	adds	r7, #24
 80427b8:	46bd      	mov	sp, r7
 80427ba:	bd80      	pop	{r7, pc}

080427bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80427bc:	b580      	push	{r7, lr}
 80427be:	b086      	sub	sp, #24
 80427c0:	af00      	add	r7, sp, #0
 80427c2:	60f8      	str	r0, [r7, #12]
 80427c4:	607a      	str	r2, [r7, #4]
 80427c6:	603b      	str	r3, [r7, #0]
 80427c8:	460b      	mov	r3, r1
 80427ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80427cc:	7afb      	ldrb	r3, [r7, #11]
 80427ce:	f003 020f 	and.w	r2, r3, #15
 80427d2:	4613      	mov	r3, r2
 80427d4:	00db      	lsls	r3, r3, #3
 80427d6:	4413      	add	r3, r2
 80427d8:	009b      	lsls	r3, r3, #2
 80427da:	3310      	adds	r3, #16
 80427dc:	68fa      	ldr	r2, [r7, #12]
 80427de:	4413      	add	r3, r2
 80427e0:	3304      	adds	r3, #4
 80427e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80427e4:	697b      	ldr	r3, [r7, #20]
 80427e6:	687a      	ldr	r2, [r7, #4]
 80427e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80427ea:	697b      	ldr	r3, [r7, #20]
 80427ec:	683a      	ldr	r2, [r7, #0]
 80427ee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80427f0:	697b      	ldr	r3, [r7, #20]
 80427f2:	2200      	movs	r2, #0
 80427f4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80427f6:	697b      	ldr	r3, [r7, #20]
 80427f8:	2201      	movs	r2, #1
 80427fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80427fc:	7afb      	ldrb	r3, [r7, #11]
 80427fe:	f003 030f 	and.w	r3, r3, #15
 8042802:	b2da      	uxtb	r2, r3
 8042804:	697b      	ldr	r3, [r7, #20]
 8042806:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8042808:	68fb      	ldr	r3, [r7, #12]
 804280a:	799b      	ldrb	r3, [r3, #6]
 804280c:	2b01      	cmp	r3, #1
 804280e:	d102      	bne.n	8042816 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8042810:	687a      	ldr	r2, [r7, #4]
 8042812:	697b      	ldr	r3, [r7, #20]
 8042814:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8042816:	68fb      	ldr	r3, [r7, #12]
 8042818:	6818      	ldr	r0, [r3, #0]
 804281a:	68fb      	ldr	r3, [r7, #12]
 804281c:	799b      	ldrb	r3, [r3, #6]
 804281e:	461a      	mov	r2, r3
 8042820:	6979      	ldr	r1, [r7, #20]
 8042822:	f005 f815 	bl	8047850 <USB_EPStartXfer>

  return HAL_OK;
 8042826:	2300      	movs	r3, #0
}
 8042828:	4618      	mov	r0, r3
 804282a:	3718      	adds	r7, #24
 804282c:	46bd      	mov	sp, r7
 804282e:	bd80      	pop	{r7, pc}

08042830 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8042830:	b580      	push	{r7, lr}
 8042832:	b084      	sub	sp, #16
 8042834:	af00      	add	r7, sp, #0
 8042836:	6078      	str	r0, [r7, #4]
 8042838:	460b      	mov	r3, r1
 804283a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 804283c:	78fb      	ldrb	r3, [r7, #3]
 804283e:	f003 030f 	and.w	r3, r3, #15
 8042842:	687a      	ldr	r2, [r7, #4]
 8042844:	7912      	ldrb	r2, [r2, #4]
 8042846:	4293      	cmp	r3, r2
 8042848:	d901      	bls.n	804284e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 804284a:	2301      	movs	r3, #1
 804284c:	e04f      	b.n	80428ee <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 804284e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8042852:	2b00      	cmp	r3, #0
 8042854:	da0f      	bge.n	8042876 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8042856:	78fb      	ldrb	r3, [r7, #3]
 8042858:	f003 020f 	and.w	r2, r3, #15
 804285c:	4613      	mov	r3, r2
 804285e:	00db      	lsls	r3, r3, #3
 8042860:	4413      	add	r3, r2
 8042862:	009b      	lsls	r3, r3, #2
 8042864:	3310      	adds	r3, #16
 8042866:	687a      	ldr	r2, [r7, #4]
 8042868:	4413      	add	r3, r2
 804286a:	3304      	adds	r3, #4
 804286c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 804286e:	68fb      	ldr	r3, [r7, #12]
 8042870:	2201      	movs	r2, #1
 8042872:	705a      	strb	r2, [r3, #1]
 8042874:	e00d      	b.n	8042892 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8042876:	78fa      	ldrb	r2, [r7, #3]
 8042878:	4613      	mov	r3, r2
 804287a:	00db      	lsls	r3, r3, #3
 804287c:	4413      	add	r3, r2
 804287e:	009b      	lsls	r3, r3, #2
 8042880:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8042884:	687a      	ldr	r2, [r7, #4]
 8042886:	4413      	add	r3, r2
 8042888:	3304      	adds	r3, #4
 804288a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 804288c:	68fb      	ldr	r3, [r7, #12]
 804288e:	2200      	movs	r2, #0
 8042890:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8042892:	68fb      	ldr	r3, [r7, #12]
 8042894:	2201      	movs	r2, #1
 8042896:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8042898:	78fb      	ldrb	r3, [r7, #3]
 804289a:	f003 030f 	and.w	r3, r3, #15
 804289e:	b2da      	uxtb	r2, r3
 80428a0:	68fb      	ldr	r3, [r7, #12]
 80428a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80428a4:	687b      	ldr	r3, [r7, #4]
 80428a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80428aa:	2b01      	cmp	r3, #1
 80428ac:	d101      	bne.n	80428b2 <HAL_PCD_EP_SetStall+0x82>
 80428ae:	2302      	movs	r3, #2
 80428b0:	e01d      	b.n	80428ee <HAL_PCD_EP_SetStall+0xbe>
 80428b2:	687b      	ldr	r3, [r7, #4]
 80428b4:	2201      	movs	r2, #1
 80428b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80428ba:	687b      	ldr	r3, [r7, #4]
 80428bc:	681b      	ldr	r3, [r3, #0]
 80428be:	68f9      	ldr	r1, [r7, #12]
 80428c0:	4618      	mov	r0, r3
 80428c2:	f005 fba9 	bl	8048018 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80428c6:	78fb      	ldrb	r3, [r7, #3]
 80428c8:	f003 030f 	and.w	r3, r3, #15
 80428cc:	2b00      	cmp	r3, #0
 80428ce:	d109      	bne.n	80428e4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80428d0:	687b      	ldr	r3, [r7, #4]
 80428d2:	6818      	ldr	r0, [r3, #0]
 80428d4:	687b      	ldr	r3, [r7, #4]
 80428d6:	7999      	ldrb	r1, [r3, #6]
 80428d8:	687b      	ldr	r3, [r7, #4]
 80428da:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80428de:	461a      	mov	r2, r3
 80428e0:	f005 fd9c 	bl	804841c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80428e4:	687b      	ldr	r3, [r7, #4]
 80428e6:	2200      	movs	r2, #0
 80428e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80428ec:	2300      	movs	r3, #0
}
 80428ee:	4618      	mov	r0, r3
 80428f0:	3710      	adds	r7, #16
 80428f2:	46bd      	mov	sp, r7
 80428f4:	bd80      	pop	{r7, pc}

080428f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80428f6:	b580      	push	{r7, lr}
 80428f8:	b084      	sub	sp, #16
 80428fa:	af00      	add	r7, sp, #0
 80428fc:	6078      	str	r0, [r7, #4]
 80428fe:	460b      	mov	r3, r1
 8042900:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8042902:	78fb      	ldrb	r3, [r7, #3]
 8042904:	f003 030f 	and.w	r3, r3, #15
 8042908:	687a      	ldr	r2, [r7, #4]
 804290a:	7912      	ldrb	r2, [r2, #4]
 804290c:	4293      	cmp	r3, r2
 804290e:	d901      	bls.n	8042914 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8042910:	2301      	movs	r3, #1
 8042912:	e042      	b.n	804299a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8042914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8042918:	2b00      	cmp	r3, #0
 804291a:	da0f      	bge.n	804293c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 804291c:	78fb      	ldrb	r3, [r7, #3]
 804291e:	f003 020f 	and.w	r2, r3, #15
 8042922:	4613      	mov	r3, r2
 8042924:	00db      	lsls	r3, r3, #3
 8042926:	4413      	add	r3, r2
 8042928:	009b      	lsls	r3, r3, #2
 804292a:	3310      	adds	r3, #16
 804292c:	687a      	ldr	r2, [r7, #4]
 804292e:	4413      	add	r3, r2
 8042930:	3304      	adds	r3, #4
 8042932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8042934:	68fb      	ldr	r3, [r7, #12]
 8042936:	2201      	movs	r2, #1
 8042938:	705a      	strb	r2, [r3, #1]
 804293a:	e00f      	b.n	804295c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 804293c:	78fb      	ldrb	r3, [r7, #3]
 804293e:	f003 020f 	and.w	r2, r3, #15
 8042942:	4613      	mov	r3, r2
 8042944:	00db      	lsls	r3, r3, #3
 8042946:	4413      	add	r3, r2
 8042948:	009b      	lsls	r3, r3, #2
 804294a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 804294e:	687a      	ldr	r2, [r7, #4]
 8042950:	4413      	add	r3, r2
 8042952:	3304      	adds	r3, #4
 8042954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8042956:	68fb      	ldr	r3, [r7, #12]
 8042958:	2200      	movs	r2, #0
 804295a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 804295c:	68fb      	ldr	r3, [r7, #12]
 804295e:	2200      	movs	r2, #0
 8042960:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8042962:	78fb      	ldrb	r3, [r7, #3]
 8042964:	f003 030f 	and.w	r3, r3, #15
 8042968:	b2da      	uxtb	r2, r3
 804296a:	68fb      	ldr	r3, [r7, #12]
 804296c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 804296e:	687b      	ldr	r3, [r7, #4]
 8042970:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8042974:	2b01      	cmp	r3, #1
 8042976:	d101      	bne.n	804297c <HAL_PCD_EP_ClrStall+0x86>
 8042978:	2302      	movs	r3, #2
 804297a:	e00e      	b.n	804299a <HAL_PCD_EP_ClrStall+0xa4>
 804297c:	687b      	ldr	r3, [r7, #4]
 804297e:	2201      	movs	r2, #1
 8042980:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8042984:	687b      	ldr	r3, [r7, #4]
 8042986:	681b      	ldr	r3, [r3, #0]
 8042988:	68f9      	ldr	r1, [r7, #12]
 804298a:	4618      	mov	r0, r3
 804298c:	f005 fbb2 	bl	80480f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8042990:	687b      	ldr	r3, [r7, #4]
 8042992:	2200      	movs	r2, #0
 8042994:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8042998:	2300      	movs	r3, #0
}
 804299a:	4618      	mov	r0, r3
 804299c:	3710      	adds	r7, #16
 804299e:	46bd      	mov	sp, r7
 80429a0:	bd80      	pop	{r7, pc}

080429a2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80429a2:	b580      	push	{r7, lr}
 80429a4:	b084      	sub	sp, #16
 80429a6:	af00      	add	r7, sp, #0
 80429a8:	6078      	str	r0, [r7, #4]
 80429aa:	460b      	mov	r3, r1
 80429ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80429ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80429b2:	2b00      	cmp	r3, #0
 80429b4:	da0c      	bge.n	80429d0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80429b6:	78fb      	ldrb	r3, [r7, #3]
 80429b8:	f003 020f 	and.w	r2, r3, #15
 80429bc:	4613      	mov	r3, r2
 80429be:	00db      	lsls	r3, r3, #3
 80429c0:	4413      	add	r3, r2
 80429c2:	009b      	lsls	r3, r3, #2
 80429c4:	3310      	adds	r3, #16
 80429c6:	687a      	ldr	r2, [r7, #4]
 80429c8:	4413      	add	r3, r2
 80429ca:	3304      	adds	r3, #4
 80429cc:	60fb      	str	r3, [r7, #12]
 80429ce:	e00c      	b.n	80429ea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80429d0:	78fb      	ldrb	r3, [r7, #3]
 80429d2:	f003 020f 	and.w	r2, r3, #15
 80429d6:	4613      	mov	r3, r2
 80429d8:	00db      	lsls	r3, r3, #3
 80429da:	4413      	add	r3, r2
 80429dc:	009b      	lsls	r3, r3, #2
 80429de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80429e2:	687a      	ldr	r2, [r7, #4]
 80429e4:	4413      	add	r3, r2
 80429e6:	3304      	adds	r3, #4
 80429e8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80429ea:	687b      	ldr	r3, [r7, #4]
 80429ec:	681b      	ldr	r3, [r3, #0]
 80429ee:	68f9      	ldr	r1, [r7, #12]
 80429f0:	4618      	mov	r0, r3
 80429f2:	f005 f9d1 	bl	8047d98 <USB_EPStopXfer>
 80429f6:	4603      	mov	r3, r0
 80429f8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80429fa:	7afb      	ldrb	r3, [r7, #11]
}
 80429fc:	4618      	mov	r0, r3
 80429fe:	3710      	adds	r7, #16
 8042a00:	46bd      	mov	sp, r7
 8042a02:	bd80      	pop	{r7, pc}

08042a04 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8042a04:	b580      	push	{r7, lr}
 8042a06:	b08a      	sub	sp, #40	@ 0x28
 8042a08:	af02      	add	r7, sp, #8
 8042a0a:	6078      	str	r0, [r7, #4]
 8042a0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8042a0e:	687b      	ldr	r3, [r7, #4]
 8042a10:	681b      	ldr	r3, [r3, #0]
 8042a12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042a14:	697b      	ldr	r3, [r7, #20]
 8042a16:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8042a18:	683a      	ldr	r2, [r7, #0]
 8042a1a:	4613      	mov	r3, r2
 8042a1c:	00db      	lsls	r3, r3, #3
 8042a1e:	4413      	add	r3, r2
 8042a20:	009b      	lsls	r3, r3, #2
 8042a22:	3310      	adds	r3, #16
 8042a24:	687a      	ldr	r2, [r7, #4]
 8042a26:	4413      	add	r3, r2
 8042a28:	3304      	adds	r3, #4
 8042a2a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8042a2c:	68fb      	ldr	r3, [r7, #12]
 8042a2e:	695a      	ldr	r2, [r3, #20]
 8042a30:	68fb      	ldr	r3, [r7, #12]
 8042a32:	691b      	ldr	r3, [r3, #16]
 8042a34:	429a      	cmp	r2, r3
 8042a36:	d901      	bls.n	8042a3c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8042a38:	2301      	movs	r3, #1
 8042a3a:	e06b      	b.n	8042b14 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8042a3c:	68fb      	ldr	r3, [r7, #12]
 8042a3e:	691a      	ldr	r2, [r3, #16]
 8042a40:	68fb      	ldr	r3, [r7, #12]
 8042a42:	695b      	ldr	r3, [r3, #20]
 8042a44:	1ad3      	subs	r3, r2, r3
 8042a46:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8042a48:	68fb      	ldr	r3, [r7, #12]
 8042a4a:	689b      	ldr	r3, [r3, #8]
 8042a4c:	69fa      	ldr	r2, [r7, #28]
 8042a4e:	429a      	cmp	r2, r3
 8042a50:	d902      	bls.n	8042a58 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8042a52:	68fb      	ldr	r3, [r7, #12]
 8042a54:	689b      	ldr	r3, [r3, #8]
 8042a56:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8042a58:	69fb      	ldr	r3, [r7, #28]
 8042a5a:	3303      	adds	r3, #3
 8042a5c:	089b      	lsrs	r3, r3, #2
 8042a5e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8042a60:	e02a      	b.n	8042ab8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8042a62:	68fb      	ldr	r3, [r7, #12]
 8042a64:	691a      	ldr	r2, [r3, #16]
 8042a66:	68fb      	ldr	r3, [r7, #12]
 8042a68:	695b      	ldr	r3, [r3, #20]
 8042a6a:	1ad3      	subs	r3, r2, r3
 8042a6c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8042a6e:	68fb      	ldr	r3, [r7, #12]
 8042a70:	689b      	ldr	r3, [r3, #8]
 8042a72:	69fa      	ldr	r2, [r7, #28]
 8042a74:	429a      	cmp	r2, r3
 8042a76:	d902      	bls.n	8042a7e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8042a78:	68fb      	ldr	r3, [r7, #12]
 8042a7a:	689b      	ldr	r3, [r3, #8]
 8042a7c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8042a7e:	69fb      	ldr	r3, [r7, #28]
 8042a80:	3303      	adds	r3, #3
 8042a82:	089b      	lsrs	r3, r3, #2
 8042a84:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8042a86:	68fb      	ldr	r3, [r7, #12]
 8042a88:	68d9      	ldr	r1, [r3, #12]
 8042a8a:	683b      	ldr	r3, [r7, #0]
 8042a8c:	b2da      	uxtb	r2, r3
 8042a8e:	69fb      	ldr	r3, [r7, #28]
 8042a90:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8042a92:	687b      	ldr	r3, [r7, #4]
 8042a94:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8042a96:	9300      	str	r3, [sp, #0]
 8042a98:	4603      	mov	r3, r0
 8042a9a:	6978      	ldr	r0, [r7, #20]
 8042a9c:	f005 fa26 	bl	8047eec <USB_WritePacket>

    ep->xfer_buff  += len;
 8042aa0:	68fb      	ldr	r3, [r7, #12]
 8042aa2:	68da      	ldr	r2, [r3, #12]
 8042aa4:	69fb      	ldr	r3, [r7, #28]
 8042aa6:	441a      	add	r2, r3
 8042aa8:	68fb      	ldr	r3, [r7, #12]
 8042aaa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8042aac:	68fb      	ldr	r3, [r7, #12]
 8042aae:	695a      	ldr	r2, [r3, #20]
 8042ab0:	69fb      	ldr	r3, [r7, #28]
 8042ab2:	441a      	add	r2, r3
 8042ab4:	68fb      	ldr	r3, [r7, #12]
 8042ab6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8042ab8:	683b      	ldr	r3, [r7, #0]
 8042aba:	015a      	lsls	r2, r3, #5
 8042abc:	693b      	ldr	r3, [r7, #16]
 8042abe:	4413      	add	r3, r2
 8042ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8042ac4:	699b      	ldr	r3, [r3, #24]
 8042ac6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8042ac8:	69ba      	ldr	r2, [r7, #24]
 8042aca:	429a      	cmp	r2, r3
 8042acc:	d809      	bhi.n	8042ae2 <PCD_WriteEmptyTxFifo+0xde>
 8042ace:	68fb      	ldr	r3, [r7, #12]
 8042ad0:	695a      	ldr	r2, [r3, #20]
 8042ad2:	68fb      	ldr	r3, [r7, #12]
 8042ad4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8042ad6:	429a      	cmp	r2, r3
 8042ad8:	d203      	bcs.n	8042ae2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8042ada:	68fb      	ldr	r3, [r7, #12]
 8042adc:	691b      	ldr	r3, [r3, #16]
 8042ade:	2b00      	cmp	r3, #0
 8042ae0:	d1bf      	bne.n	8042a62 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8042ae2:	68fb      	ldr	r3, [r7, #12]
 8042ae4:	691a      	ldr	r2, [r3, #16]
 8042ae6:	68fb      	ldr	r3, [r7, #12]
 8042ae8:	695b      	ldr	r3, [r3, #20]
 8042aea:	429a      	cmp	r2, r3
 8042aec:	d811      	bhi.n	8042b12 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8042aee:	683b      	ldr	r3, [r7, #0]
 8042af0:	f003 030f 	and.w	r3, r3, #15
 8042af4:	2201      	movs	r2, #1
 8042af6:	fa02 f303 	lsl.w	r3, r2, r3
 8042afa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8042afc:	693b      	ldr	r3, [r7, #16]
 8042afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042b02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8042b04:	68bb      	ldr	r3, [r7, #8]
 8042b06:	43db      	mvns	r3, r3
 8042b08:	6939      	ldr	r1, [r7, #16]
 8042b0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8042b0e:	4013      	ands	r3, r2
 8042b10:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8042b12:	2300      	movs	r3, #0
}
 8042b14:	4618      	mov	r0, r3
 8042b16:	3720      	adds	r7, #32
 8042b18:	46bd      	mov	sp, r7
 8042b1a:	bd80      	pop	{r7, pc}

08042b1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8042b1c:	b580      	push	{r7, lr}
 8042b1e:	b088      	sub	sp, #32
 8042b20:	af00      	add	r7, sp, #0
 8042b22:	6078      	str	r0, [r7, #4]
 8042b24:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8042b26:	687b      	ldr	r3, [r7, #4]
 8042b28:	681b      	ldr	r3, [r3, #0]
 8042b2a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042b2c:	69fb      	ldr	r3, [r7, #28]
 8042b2e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8042b30:	69fb      	ldr	r3, [r7, #28]
 8042b32:	333c      	adds	r3, #60	@ 0x3c
 8042b34:	3304      	adds	r3, #4
 8042b36:	681b      	ldr	r3, [r3, #0]
 8042b38:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8042b3a:	683b      	ldr	r3, [r7, #0]
 8042b3c:	015a      	lsls	r2, r3, #5
 8042b3e:	69bb      	ldr	r3, [r7, #24]
 8042b40:	4413      	add	r3, r2
 8042b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042b46:	689b      	ldr	r3, [r3, #8]
 8042b48:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8042b4a:	687b      	ldr	r3, [r7, #4]
 8042b4c:	799b      	ldrb	r3, [r3, #6]
 8042b4e:	2b01      	cmp	r3, #1
 8042b50:	d17b      	bne.n	8042c4a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8042b52:	693b      	ldr	r3, [r7, #16]
 8042b54:	f003 0308 	and.w	r3, r3, #8
 8042b58:	2b00      	cmp	r3, #0
 8042b5a:	d015      	beq.n	8042b88 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042b5c:	697b      	ldr	r3, [r7, #20]
 8042b5e:	4a61      	ldr	r2, [pc, #388]	@ (8042ce4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8042b60:	4293      	cmp	r3, r2
 8042b62:	f240 80b9 	bls.w	8042cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8042b66:	693b      	ldr	r3, [r7, #16]
 8042b68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042b6c:	2b00      	cmp	r3, #0
 8042b6e:	f000 80b3 	beq.w	8042cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042b72:	683b      	ldr	r3, [r7, #0]
 8042b74:	015a      	lsls	r2, r3, #5
 8042b76:	69bb      	ldr	r3, [r7, #24]
 8042b78:	4413      	add	r3, r2
 8042b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042b7e:	461a      	mov	r2, r3
 8042b80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042b84:	6093      	str	r3, [r2, #8]
 8042b86:	e0a7      	b.n	8042cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8042b88:	693b      	ldr	r3, [r7, #16]
 8042b8a:	f003 0320 	and.w	r3, r3, #32
 8042b8e:	2b00      	cmp	r3, #0
 8042b90:	d009      	beq.n	8042ba6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8042b92:	683b      	ldr	r3, [r7, #0]
 8042b94:	015a      	lsls	r2, r3, #5
 8042b96:	69bb      	ldr	r3, [r7, #24]
 8042b98:	4413      	add	r3, r2
 8042b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042b9e:	461a      	mov	r2, r3
 8042ba0:	2320      	movs	r3, #32
 8042ba2:	6093      	str	r3, [r2, #8]
 8042ba4:	e098      	b.n	8042cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8042ba6:	693b      	ldr	r3, [r7, #16]
 8042ba8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8042bac:	2b00      	cmp	r3, #0
 8042bae:	f040 8093 	bne.w	8042cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042bb2:	697b      	ldr	r3, [r7, #20]
 8042bb4:	4a4b      	ldr	r2, [pc, #300]	@ (8042ce4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8042bb6:	4293      	cmp	r3, r2
 8042bb8:	d90f      	bls.n	8042bda <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8042bba:	693b      	ldr	r3, [r7, #16]
 8042bbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042bc0:	2b00      	cmp	r3, #0
 8042bc2:	d00a      	beq.n	8042bda <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042bc4:	683b      	ldr	r3, [r7, #0]
 8042bc6:	015a      	lsls	r2, r3, #5
 8042bc8:	69bb      	ldr	r3, [r7, #24]
 8042bca:	4413      	add	r3, r2
 8042bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042bd0:	461a      	mov	r2, r3
 8042bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042bd6:	6093      	str	r3, [r2, #8]
 8042bd8:	e07e      	b.n	8042cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8042bda:	683a      	ldr	r2, [r7, #0]
 8042bdc:	4613      	mov	r3, r2
 8042bde:	00db      	lsls	r3, r3, #3
 8042be0:	4413      	add	r3, r2
 8042be2:	009b      	lsls	r3, r3, #2
 8042be4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8042be8:	687a      	ldr	r2, [r7, #4]
 8042bea:	4413      	add	r3, r2
 8042bec:	3304      	adds	r3, #4
 8042bee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8042bf0:	68fb      	ldr	r3, [r7, #12]
 8042bf2:	6a1a      	ldr	r2, [r3, #32]
 8042bf4:	683b      	ldr	r3, [r7, #0]
 8042bf6:	0159      	lsls	r1, r3, #5
 8042bf8:	69bb      	ldr	r3, [r7, #24]
 8042bfa:	440b      	add	r3, r1
 8042bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042c00:	691b      	ldr	r3, [r3, #16]
 8042c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8042c06:	1ad2      	subs	r2, r2, r3
 8042c08:	68fb      	ldr	r3, [r7, #12]
 8042c0a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8042c0c:	683b      	ldr	r3, [r7, #0]
 8042c0e:	2b00      	cmp	r3, #0
 8042c10:	d114      	bne.n	8042c3c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8042c12:	68fb      	ldr	r3, [r7, #12]
 8042c14:	691b      	ldr	r3, [r3, #16]
 8042c16:	2b00      	cmp	r3, #0
 8042c18:	d109      	bne.n	8042c2e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8042c1a:	687b      	ldr	r3, [r7, #4]
 8042c1c:	6818      	ldr	r0, [r3, #0]
 8042c1e:	687b      	ldr	r3, [r7, #4]
 8042c20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8042c24:	461a      	mov	r2, r3
 8042c26:	2101      	movs	r1, #1
 8042c28:	f005 fbf8 	bl	804841c <USB_EP0_OutStart>
 8042c2c:	e006      	b.n	8042c3c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8042c2e:	68fb      	ldr	r3, [r7, #12]
 8042c30:	68da      	ldr	r2, [r3, #12]
 8042c32:	68fb      	ldr	r3, [r7, #12]
 8042c34:	695b      	ldr	r3, [r3, #20]
 8042c36:	441a      	add	r2, r3
 8042c38:	68fb      	ldr	r3, [r7, #12]
 8042c3a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8042c3c:	683b      	ldr	r3, [r7, #0]
 8042c3e:	b2db      	uxtb	r3, r3
 8042c40:	4619      	mov	r1, r3
 8042c42:	6878      	ldr	r0, [r7, #4]
 8042c44:	f007 fc24 	bl	804a490 <HAL_PCD_DataOutStageCallback>
 8042c48:	e046      	b.n	8042cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8042c4a:	697b      	ldr	r3, [r7, #20]
 8042c4c:	4a26      	ldr	r2, [pc, #152]	@ (8042ce8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8042c4e:	4293      	cmp	r3, r2
 8042c50:	d124      	bne.n	8042c9c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8042c52:	693b      	ldr	r3, [r7, #16]
 8042c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8042c58:	2b00      	cmp	r3, #0
 8042c5a:	d00a      	beq.n	8042c72 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042c5c:	683b      	ldr	r3, [r7, #0]
 8042c5e:	015a      	lsls	r2, r3, #5
 8042c60:	69bb      	ldr	r3, [r7, #24]
 8042c62:	4413      	add	r3, r2
 8042c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042c68:	461a      	mov	r2, r3
 8042c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042c6e:	6093      	str	r3, [r2, #8]
 8042c70:	e032      	b.n	8042cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8042c72:	693b      	ldr	r3, [r7, #16]
 8042c74:	f003 0320 	and.w	r3, r3, #32
 8042c78:	2b00      	cmp	r3, #0
 8042c7a:	d008      	beq.n	8042c8e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8042c7c:	683b      	ldr	r3, [r7, #0]
 8042c7e:	015a      	lsls	r2, r3, #5
 8042c80:	69bb      	ldr	r3, [r7, #24]
 8042c82:	4413      	add	r3, r2
 8042c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042c88:	461a      	mov	r2, r3
 8042c8a:	2320      	movs	r3, #32
 8042c8c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8042c8e:	683b      	ldr	r3, [r7, #0]
 8042c90:	b2db      	uxtb	r3, r3
 8042c92:	4619      	mov	r1, r3
 8042c94:	6878      	ldr	r0, [r7, #4]
 8042c96:	f007 fbfb 	bl	804a490 <HAL_PCD_DataOutStageCallback>
 8042c9a:	e01d      	b.n	8042cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8042c9c:	683b      	ldr	r3, [r7, #0]
 8042c9e:	2b00      	cmp	r3, #0
 8042ca0:	d114      	bne.n	8042ccc <PCD_EP_OutXfrComplete_int+0x1b0>
 8042ca2:	6879      	ldr	r1, [r7, #4]
 8042ca4:	683a      	ldr	r2, [r7, #0]
 8042ca6:	4613      	mov	r3, r2
 8042ca8:	00db      	lsls	r3, r3, #3
 8042caa:	4413      	add	r3, r2
 8042cac:	009b      	lsls	r3, r3, #2
 8042cae:	440b      	add	r3, r1
 8042cb0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8042cb4:	681b      	ldr	r3, [r3, #0]
 8042cb6:	2b00      	cmp	r3, #0
 8042cb8:	d108      	bne.n	8042ccc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8042cba:	687b      	ldr	r3, [r7, #4]
 8042cbc:	6818      	ldr	r0, [r3, #0]
 8042cbe:	687b      	ldr	r3, [r7, #4]
 8042cc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8042cc4:	461a      	mov	r2, r3
 8042cc6:	2100      	movs	r1, #0
 8042cc8:	f005 fba8 	bl	804841c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8042ccc:	683b      	ldr	r3, [r7, #0]
 8042cce:	b2db      	uxtb	r3, r3
 8042cd0:	4619      	mov	r1, r3
 8042cd2:	6878      	ldr	r0, [r7, #4]
 8042cd4:	f007 fbdc 	bl	804a490 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8042cd8:	2300      	movs	r3, #0
}
 8042cda:	4618      	mov	r0, r3
 8042cdc:	3720      	adds	r7, #32
 8042cde:	46bd      	mov	sp, r7
 8042ce0:	bd80      	pop	{r7, pc}
 8042ce2:	bf00      	nop
 8042ce4:	4f54300a 	.word	0x4f54300a
 8042ce8:	4f54310a 	.word	0x4f54310a

08042cec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8042cec:	b580      	push	{r7, lr}
 8042cee:	b086      	sub	sp, #24
 8042cf0:	af00      	add	r7, sp, #0
 8042cf2:	6078      	str	r0, [r7, #4]
 8042cf4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8042cf6:	687b      	ldr	r3, [r7, #4]
 8042cf8:	681b      	ldr	r3, [r3, #0]
 8042cfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042cfc:	697b      	ldr	r3, [r7, #20]
 8042cfe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8042d00:	697b      	ldr	r3, [r7, #20]
 8042d02:	333c      	adds	r3, #60	@ 0x3c
 8042d04:	3304      	adds	r3, #4
 8042d06:	681b      	ldr	r3, [r3, #0]
 8042d08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8042d0a:	683b      	ldr	r3, [r7, #0]
 8042d0c:	015a      	lsls	r2, r3, #5
 8042d0e:	693b      	ldr	r3, [r7, #16]
 8042d10:	4413      	add	r3, r2
 8042d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042d16:	689b      	ldr	r3, [r3, #8]
 8042d18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042d1a:	68fb      	ldr	r3, [r7, #12]
 8042d1c:	4a15      	ldr	r2, [pc, #84]	@ (8042d74 <PCD_EP_OutSetupPacket_int+0x88>)
 8042d1e:	4293      	cmp	r3, r2
 8042d20:	d90e      	bls.n	8042d40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8042d22:	68bb      	ldr	r3, [r7, #8]
 8042d24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042d28:	2b00      	cmp	r3, #0
 8042d2a:	d009      	beq.n	8042d40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042d2c:	683b      	ldr	r3, [r7, #0]
 8042d2e:	015a      	lsls	r2, r3, #5
 8042d30:	693b      	ldr	r3, [r7, #16]
 8042d32:	4413      	add	r3, r2
 8042d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042d38:	461a      	mov	r2, r3
 8042d3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042d3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8042d40:	6878      	ldr	r0, [r7, #4]
 8042d42:	f007 fb93 	bl	804a46c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8042d46:	68fb      	ldr	r3, [r7, #12]
 8042d48:	4a0a      	ldr	r2, [pc, #40]	@ (8042d74 <PCD_EP_OutSetupPacket_int+0x88>)
 8042d4a:	4293      	cmp	r3, r2
 8042d4c:	d90c      	bls.n	8042d68 <PCD_EP_OutSetupPacket_int+0x7c>
 8042d4e:	687b      	ldr	r3, [r7, #4]
 8042d50:	799b      	ldrb	r3, [r3, #6]
 8042d52:	2b01      	cmp	r3, #1
 8042d54:	d108      	bne.n	8042d68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8042d56:	687b      	ldr	r3, [r7, #4]
 8042d58:	6818      	ldr	r0, [r3, #0]
 8042d5a:	687b      	ldr	r3, [r7, #4]
 8042d5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8042d60:	461a      	mov	r2, r3
 8042d62:	2101      	movs	r1, #1
 8042d64:	f005 fb5a 	bl	804841c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8042d68:	2300      	movs	r3, #0
}
 8042d6a:	4618      	mov	r0, r3
 8042d6c:	3718      	adds	r7, #24
 8042d6e:	46bd      	mov	sp, r7
 8042d70:	bd80      	pop	{r7, pc}
 8042d72:	bf00      	nop
 8042d74:	4f54300a 	.word	0x4f54300a

08042d78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8042d78:	b480      	push	{r7}
 8042d7a:	b085      	sub	sp, #20
 8042d7c:	af00      	add	r7, sp, #0
 8042d7e:	6078      	str	r0, [r7, #4]
 8042d80:	460b      	mov	r3, r1
 8042d82:	70fb      	strb	r3, [r7, #3]
 8042d84:	4613      	mov	r3, r2
 8042d86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8042d88:	687b      	ldr	r3, [r7, #4]
 8042d8a:	681b      	ldr	r3, [r3, #0]
 8042d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042d8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8042d90:	78fb      	ldrb	r3, [r7, #3]
 8042d92:	2b00      	cmp	r3, #0
 8042d94:	d107      	bne.n	8042da6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8042d96:	883b      	ldrh	r3, [r7, #0]
 8042d98:	0419      	lsls	r1, r3, #16
 8042d9a:	687b      	ldr	r3, [r7, #4]
 8042d9c:	681b      	ldr	r3, [r3, #0]
 8042d9e:	68ba      	ldr	r2, [r7, #8]
 8042da0:	430a      	orrs	r2, r1
 8042da2:	629a      	str	r2, [r3, #40]	@ 0x28
 8042da4:	e028      	b.n	8042df8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8042da6:	687b      	ldr	r3, [r7, #4]
 8042da8:	681b      	ldr	r3, [r3, #0]
 8042daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8042dac:	0c1b      	lsrs	r3, r3, #16
 8042dae:	68ba      	ldr	r2, [r7, #8]
 8042db0:	4413      	add	r3, r2
 8042db2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8042db4:	2300      	movs	r3, #0
 8042db6:	73fb      	strb	r3, [r7, #15]
 8042db8:	e00d      	b.n	8042dd6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8042dba:	687b      	ldr	r3, [r7, #4]
 8042dbc:	681a      	ldr	r2, [r3, #0]
 8042dbe:	7bfb      	ldrb	r3, [r7, #15]
 8042dc0:	3340      	adds	r3, #64	@ 0x40
 8042dc2:	009b      	lsls	r3, r3, #2
 8042dc4:	4413      	add	r3, r2
 8042dc6:	685b      	ldr	r3, [r3, #4]
 8042dc8:	0c1b      	lsrs	r3, r3, #16
 8042dca:	68ba      	ldr	r2, [r7, #8]
 8042dcc:	4413      	add	r3, r2
 8042dce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8042dd0:	7bfb      	ldrb	r3, [r7, #15]
 8042dd2:	3301      	adds	r3, #1
 8042dd4:	73fb      	strb	r3, [r7, #15]
 8042dd6:	7bfa      	ldrb	r2, [r7, #15]
 8042dd8:	78fb      	ldrb	r3, [r7, #3]
 8042dda:	3b01      	subs	r3, #1
 8042ddc:	429a      	cmp	r2, r3
 8042dde:	d3ec      	bcc.n	8042dba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8042de0:	883b      	ldrh	r3, [r7, #0]
 8042de2:	0418      	lsls	r0, r3, #16
 8042de4:	687b      	ldr	r3, [r7, #4]
 8042de6:	6819      	ldr	r1, [r3, #0]
 8042de8:	78fb      	ldrb	r3, [r7, #3]
 8042dea:	3b01      	subs	r3, #1
 8042dec:	68ba      	ldr	r2, [r7, #8]
 8042dee:	4302      	orrs	r2, r0
 8042df0:	3340      	adds	r3, #64	@ 0x40
 8042df2:	009b      	lsls	r3, r3, #2
 8042df4:	440b      	add	r3, r1
 8042df6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8042df8:	2300      	movs	r3, #0
}
 8042dfa:	4618      	mov	r0, r3
 8042dfc:	3714      	adds	r7, #20
 8042dfe:	46bd      	mov	sp, r7
 8042e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e04:	4770      	bx	lr

08042e06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8042e06:	b480      	push	{r7}
 8042e08:	b083      	sub	sp, #12
 8042e0a:	af00      	add	r7, sp, #0
 8042e0c:	6078      	str	r0, [r7, #4]
 8042e0e:	460b      	mov	r3, r1
 8042e10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8042e12:	687b      	ldr	r3, [r7, #4]
 8042e14:	681b      	ldr	r3, [r3, #0]
 8042e16:	887a      	ldrh	r2, [r7, #2]
 8042e18:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8042e1a:	2300      	movs	r3, #0
}
 8042e1c:	4618      	mov	r0, r3
 8042e1e:	370c      	adds	r7, #12
 8042e20:	46bd      	mov	sp, r7
 8042e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e26:	4770      	bx	lr

08042e28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8042e28:	b480      	push	{r7}
 8042e2a:	b085      	sub	sp, #20
 8042e2c:	af00      	add	r7, sp, #0
 8042e2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8042e30:	687b      	ldr	r3, [r7, #4]
 8042e32:	681b      	ldr	r3, [r3, #0]
 8042e34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8042e36:	687b      	ldr	r3, [r7, #4]
 8042e38:	2201      	movs	r2, #1
 8042e3a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8042e3e:	687b      	ldr	r3, [r7, #4]
 8042e40:	2200      	movs	r2, #0
 8042e42:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8042e46:	68fb      	ldr	r3, [r7, #12]
 8042e48:	699b      	ldr	r3, [r3, #24]
 8042e4a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8042e4e:	68fb      	ldr	r3, [r7, #12]
 8042e50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8042e52:	68fb      	ldr	r3, [r7, #12]
 8042e54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8042e56:	4b05      	ldr	r3, [pc, #20]	@ (8042e6c <HAL_PCDEx_ActivateLPM+0x44>)
 8042e58:	4313      	orrs	r3, r2
 8042e5a:	68fa      	ldr	r2, [r7, #12]
 8042e5c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8042e5e:	2300      	movs	r3, #0
}
 8042e60:	4618      	mov	r0, r3
 8042e62:	3714      	adds	r7, #20
 8042e64:	46bd      	mov	sp, r7
 8042e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e6a:	4770      	bx	lr
 8042e6c:	10000003 	.word	0x10000003

08042e70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8042e70:	b480      	push	{r7}
 8042e72:	b083      	sub	sp, #12
 8042e74:	af00      	add	r7, sp, #0
 8042e76:	6078      	str	r0, [r7, #4]
 8042e78:	460b      	mov	r3, r1
 8042e7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8042e7c:	bf00      	nop
 8042e7e:	370c      	adds	r7, #12
 8042e80:	46bd      	mov	sp, r7
 8042e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e86:	4770      	bx	lr

08042e88 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8042e88:	b580      	push	{r7, lr}
 8042e8a:	b084      	sub	sp, #16
 8042e8c:	af00      	add	r7, sp, #0
 8042e8e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8042e90:	4b29      	ldr	r3, [pc, #164]	@ (8042f38 <HAL_PWREx_ConfigSupply+0xb0>)
 8042e92:	68db      	ldr	r3, [r3, #12]
 8042e94:	f003 0307 	and.w	r3, r3, #7
 8042e98:	2b06      	cmp	r3, #6
 8042e9a:	d00a      	beq.n	8042eb2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8042e9c:	4b26      	ldr	r3, [pc, #152]	@ (8042f38 <HAL_PWREx_ConfigSupply+0xb0>)
 8042e9e:	68db      	ldr	r3, [r3, #12]
 8042ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8042ea4:	687a      	ldr	r2, [r7, #4]
 8042ea6:	429a      	cmp	r2, r3
 8042ea8:	d001      	beq.n	8042eae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8042eaa:	2301      	movs	r3, #1
 8042eac:	e040      	b.n	8042f30 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8042eae:	2300      	movs	r3, #0
 8042eb0:	e03e      	b.n	8042f30 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8042eb2:	4b21      	ldr	r3, [pc, #132]	@ (8042f38 <HAL_PWREx_ConfigSupply+0xb0>)
 8042eb4:	68db      	ldr	r3, [r3, #12]
 8042eb6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8042eba:	491f      	ldr	r1, [pc, #124]	@ (8042f38 <HAL_PWREx_ConfigSupply+0xb0>)
 8042ebc:	687b      	ldr	r3, [r7, #4]
 8042ebe:	4313      	orrs	r3, r2
 8042ec0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8042ec2:	f7fe f909 	bl	80410d8 <HAL_GetTick>
 8042ec6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8042ec8:	e009      	b.n	8042ede <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8042eca:	f7fe f905 	bl	80410d8 <HAL_GetTick>
 8042ece:	4602      	mov	r2, r0
 8042ed0:	68fb      	ldr	r3, [r7, #12]
 8042ed2:	1ad3      	subs	r3, r2, r3
 8042ed4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8042ed8:	d901      	bls.n	8042ede <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8042eda:	2301      	movs	r3, #1
 8042edc:	e028      	b.n	8042f30 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8042ede:	4b16      	ldr	r3, [pc, #88]	@ (8042f38 <HAL_PWREx_ConfigSupply+0xb0>)
 8042ee0:	685b      	ldr	r3, [r3, #4]
 8042ee2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8042ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8042eea:	d1ee      	bne.n	8042eca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8042eec:	687b      	ldr	r3, [r7, #4]
 8042eee:	2b1e      	cmp	r3, #30
 8042ef0:	d008      	beq.n	8042f04 <HAL_PWREx_ConfigSupply+0x7c>
 8042ef2:	687b      	ldr	r3, [r7, #4]
 8042ef4:	2b2e      	cmp	r3, #46	@ 0x2e
 8042ef6:	d005      	beq.n	8042f04 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8042ef8:	687b      	ldr	r3, [r7, #4]
 8042efa:	2b1d      	cmp	r3, #29
 8042efc:	d002      	beq.n	8042f04 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8042efe:	687b      	ldr	r3, [r7, #4]
 8042f00:	2b2d      	cmp	r3, #45	@ 0x2d
 8042f02:	d114      	bne.n	8042f2e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8042f04:	f7fe f8e8 	bl	80410d8 <HAL_GetTick>
 8042f08:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8042f0a:	e009      	b.n	8042f20 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8042f0c:	f7fe f8e4 	bl	80410d8 <HAL_GetTick>
 8042f10:	4602      	mov	r2, r0
 8042f12:	68fb      	ldr	r3, [r7, #12]
 8042f14:	1ad3      	subs	r3, r2, r3
 8042f16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8042f1a:	d901      	bls.n	8042f20 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8042f1c:	2301      	movs	r3, #1
 8042f1e:	e007      	b.n	8042f30 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8042f20:	4b05      	ldr	r3, [pc, #20]	@ (8042f38 <HAL_PWREx_ConfigSupply+0xb0>)
 8042f22:	68db      	ldr	r3, [r3, #12]
 8042f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8042f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8042f2c:	d1ee      	bne.n	8042f0c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8042f2e:	2300      	movs	r3, #0
}
 8042f30:	4618      	mov	r0, r3
 8042f32:	3710      	adds	r7, #16
 8042f34:	46bd      	mov	sp, r7
 8042f36:	bd80      	pop	{r7, pc}
 8042f38:	58024800 	.word	0x58024800

08042f3c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8042f3c:	b480      	push	{r7}
 8042f3e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8042f40:	4b05      	ldr	r3, [pc, #20]	@ (8042f58 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8042f42:	68db      	ldr	r3, [r3, #12]
 8042f44:	4a04      	ldr	r2, [pc, #16]	@ (8042f58 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8042f46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8042f4a:	60d3      	str	r3, [r2, #12]
}
 8042f4c:	bf00      	nop
 8042f4e:	46bd      	mov	sp, r7
 8042f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f54:	4770      	bx	lr
 8042f56:	bf00      	nop
 8042f58:	58024800 	.word	0x58024800

08042f5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8042f5c:	b580      	push	{r7, lr}
 8042f5e:	b08c      	sub	sp, #48	@ 0x30
 8042f60:	af00      	add	r7, sp, #0
 8042f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8042f64:	687b      	ldr	r3, [r7, #4]
 8042f66:	2b00      	cmp	r3, #0
 8042f68:	d102      	bne.n	8042f70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8042f6a:	2301      	movs	r3, #1
 8042f6c:	f000 bc48 	b.w	8043800 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8042f70:	687b      	ldr	r3, [r7, #4]
 8042f72:	681b      	ldr	r3, [r3, #0]
 8042f74:	f003 0301 	and.w	r3, r3, #1
 8042f78:	2b00      	cmp	r3, #0
 8042f7a:	f000 8088 	beq.w	804308e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8042f7e:	4b99      	ldr	r3, [pc, #612]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8042f80:	691b      	ldr	r3, [r3, #16]
 8042f82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8042f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8042f88:	4b96      	ldr	r3, [pc, #600]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8042f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8042f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8042f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8042f90:	2b10      	cmp	r3, #16
 8042f92:	d007      	beq.n	8042fa4 <HAL_RCC_OscConfig+0x48>
 8042f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8042f96:	2b18      	cmp	r3, #24
 8042f98:	d111      	bne.n	8042fbe <HAL_RCC_OscConfig+0x62>
 8042f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8042f9c:	f003 0303 	and.w	r3, r3, #3
 8042fa0:	2b02      	cmp	r3, #2
 8042fa2:	d10c      	bne.n	8042fbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8042fa4:	4b8f      	ldr	r3, [pc, #572]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8042fa6:	681b      	ldr	r3, [r3, #0]
 8042fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8042fac:	2b00      	cmp	r3, #0
 8042fae:	d06d      	beq.n	804308c <HAL_RCC_OscConfig+0x130>
 8042fb0:	687b      	ldr	r3, [r7, #4]
 8042fb2:	685b      	ldr	r3, [r3, #4]
 8042fb4:	2b00      	cmp	r3, #0
 8042fb6:	d169      	bne.n	804308c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8042fb8:	2301      	movs	r3, #1
 8042fba:	f000 bc21 	b.w	8043800 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8042fbe:	687b      	ldr	r3, [r7, #4]
 8042fc0:	685b      	ldr	r3, [r3, #4]
 8042fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8042fc6:	d106      	bne.n	8042fd6 <HAL_RCC_OscConfig+0x7a>
 8042fc8:	4b86      	ldr	r3, [pc, #536]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8042fca:	681b      	ldr	r3, [r3, #0]
 8042fcc:	4a85      	ldr	r2, [pc, #532]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8042fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8042fd2:	6013      	str	r3, [r2, #0]
 8042fd4:	e02e      	b.n	8043034 <HAL_RCC_OscConfig+0xd8>
 8042fd6:	687b      	ldr	r3, [r7, #4]
 8042fd8:	685b      	ldr	r3, [r3, #4]
 8042fda:	2b00      	cmp	r3, #0
 8042fdc:	d10c      	bne.n	8042ff8 <HAL_RCC_OscConfig+0x9c>
 8042fde:	4b81      	ldr	r3, [pc, #516]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8042fe0:	681b      	ldr	r3, [r3, #0]
 8042fe2:	4a80      	ldr	r2, [pc, #512]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8042fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8042fe8:	6013      	str	r3, [r2, #0]
 8042fea:	4b7e      	ldr	r3, [pc, #504]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8042fec:	681b      	ldr	r3, [r3, #0]
 8042fee:	4a7d      	ldr	r2, [pc, #500]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8042ff0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8042ff4:	6013      	str	r3, [r2, #0]
 8042ff6:	e01d      	b.n	8043034 <HAL_RCC_OscConfig+0xd8>
 8042ff8:	687b      	ldr	r3, [r7, #4]
 8042ffa:	685b      	ldr	r3, [r3, #4]
 8042ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8043000:	d10c      	bne.n	804301c <HAL_RCC_OscConfig+0xc0>
 8043002:	4b78      	ldr	r3, [pc, #480]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8043004:	681b      	ldr	r3, [r3, #0]
 8043006:	4a77      	ldr	r2, [pc, #476]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8043008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 804300c:	6013      	str	r3, [r2, #0]
 804300e:	4b75      	ldr	r3, [pc, #468]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8043010:	681b      	ldr	r3, [r3, #0]
 8043012:	4a74      	ldr	r2, [pc, #464]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8043014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8043018:	6013      	str	r3, [r2, #0]
 804301a:	e00b      	b.n	8043034 <HAL_RCC_OscConfig+0xd8>
 804301c:	4b71      	ldr	r3, [pc, #452]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 804301e:	681b      	ldr	r3, [r3, #0]
 8043020:	4a70      	ldr	r2, [pc, #448]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8043022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8043026:	6013      	str	r3, [r2, #0]
 8043028:	4b6e      	ldr	r3, [pc, #440]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 804302a:	681b      	ldr	r3, [r3, #0]
 804302c:	4a6d      	ldr	r2, [pc, #436]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 804302e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8043032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8043034:	687b      	ldr	r3, [r7, #4]
 8043036:	685b      	ldr	r3, [r3, #4]
 8043038:	2b00      	cmp	r3, #0
 804303a:	d013      	beq.n	8043064 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804303c:	f7fe f84c 	bl	80410d8 <HAL_GetTick>
 8043040:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8043042:	e008      	b.n	8043056 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8043044:	f7fe f848 	bl	80410d8 <HAL_GetTick>
 8043048:	4602      	mov	r2, r0
 804304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804304c:	1ad3      	subs	r3, r2, r3
 804304e:	2b64      	cmp	r3, #100	@ 0x64
 8043050:	d901      	bls.n	8043056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8043052:	2303      	movs	r3, #3
 8043054:	e3d4      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8043056:	4b63      	ldr	r3, [pc, #396]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8043058:	681b      	ldr	r3, [r3, #0]
 804305a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804305e:	2b00      	cmp	r3, #0
 8043060:	d0f0      	beq.n	8043044 <HAL_RCC_OscConfig+0xe8>
 8043062:	e014      	b.n	804308e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043064:	f7fe f838 	bl	80410d8 <HAL_GetTick>
 8043068:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 804306a:	e008      	b.n	804307e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 804306c:	f7fe f834 	bl	80410d8 <HAL_GetTick>
 8043070:	4602      	mov	r2, r0
 8043072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043074:	1ad3      	subs	r3, r2, r3
 8043076:	2b64      	cmp	r3, #100	@ 0x64
 8043078:	d901      	bls.n	804307e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 804307a:	2303      	movs	r3, #3
 804307c:	e3c0      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 804307e:	4b59      	ldr	r3, [pc, #356]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8043080:	681b      	ldr	r3, [r3, #0]
 8043082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8043086:	2b00      	cmp	r3, #0
 8043088:	d1f0      	bne.n	804306c <HAL_RCC_OscConfig+0x110>
 804308a:	e000      	b.n	804308e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804308c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 804308e:	687b      	ldr	r3, [r7, #4]
 8043090:	681b      	ldr	r3, [r3, #0]
 8043092:	f003 0302 	and.w	r3, r3, #2
 8043096:	2b00      	cmp	r3, #0
 8043098:	f000 80ca 	beq.w	8043230 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 804309c:	4b51      	ldr	r3, [pc, #324]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 804309e:	691b      	ldr	r3, [r3, #16]
 80430a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80430a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80430a6:	4b4f      	ldr	r3, [pc, #316]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 80430a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80430aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80430ac:	6a3b      	ldr	r3, [r7, #32]
 80430ae:	2b00      	cmp	r3, #0
 80430b0:	d007      	beq.n	80430c2 <HAL_RCC_OscConfig+0x166>
 80430b2:	6a3b      	ldr	r3, [r7, #32]
 80430b4:	2b18      	cmp	r3, #24
 80430b6:	d156      	bne.n	8043166 <HAL_RCC_OscConfig+0x20a>
 80430b8:	69fb      	ldr	r3, [r7, #28]
 80430ba:	f003 0303 	and.w	r3, r3, #3
 80430be:	2b00      	cmp	r3, #0
 80430c0:	d151      	bne.n	8043166 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80430c2:	4b48      	ldr	r3, [pc, #288]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 80430c4:	681b      	ldr	r3, [r3, #0]
 80430c6:	f003 0304 	and.w	r3, r3, #4
 80430ca:	2b00      	cmp	r3, #0
 80430cc:	d005      	beq.n	80430da <HAL_RCC_OscConfig+0x17e>
 80430ce:	687b      	ldr	r3, [r7, #4]
 80430d0:	68db      	ldr	r3, [r3, #12]
 80430d2:	2b00      	cmp	r3, #0
 80430d4:	d101      	bne.n	80430da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80430d6:	2301      	movs	r3, #1
 80430d8:	e392      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80430da:	4b42      	ldr	r3, [pc, #264]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 80430dc:	681b      	ldr	r3, [r3, #0]
 80430de:	f023 0219 	bic.w	r2, r3, #25
 80430e2:	687b      	ldr	r3, [r7, #4]
 80430e4:	68db      	ldr	r3, [r3, #12]
 80430e6:	493f      	ldr	r1, [pc, #252]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 80430e8:	4313      	orrs	r3, r2
 80430ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80430ec:	f7fd fff4 	bl	80410d8 <HAL_GetTick>
 80430f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80430f2:	e008      	b.n	8043106 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80430f4:	f7fd fff0 	bl	80410d8 <HAL_GetTick>
 80430f8:	4602      	mov	r2, r0
 80430fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80430fc:	1ad3      	subs	r3, r2, r3
 80430fe:	2b02      	cmp	r3, #2
 8043100:	d901      	bls.n	8043106 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8043102:	2303      	movs	r3, #3
 8043104:	e37c      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8043106:	4b37      	ldr	r3, [pc, #220]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8043108:	681b      	ldr	r3, [r3, #0]
 804310a:	f003 0304 	and.w	r3, r3, #4
 804310e:	2b00      	cmp	r3, #0
 8043110:	d0f0      	beq.n	80430f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043112:	f7fe f811 	bl	8041138 <HAL_GetREVID>
 8043116:	4603      	mov	r3, r0
 8043118:	f241 0203 	movw	r2, #4099	@ 0x1003
 804311c:	4293      	cmp	r3, r2
 804311e:	d817      	bhi.n	8043150 <HAL_RCC_OscConfig+0x1f4>
 8043120:	687b      	ldr	r3, [r7, #4]
 8043122:	691b      	ldr	r3, [r3, #16]
 8043124:	2b40      	cmp	r3, #64	@ 0x40
 8043126:	d108      	bne.n	804313a <HAL_RCC_OscConfig+0x1de>
 8043128:	4b2e      	ldr	r3, [pc, #184]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 804312a:	685b      	ldr	r3, [r3, #4]
 804312c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8043130:	4a2c      	ldr	r2, [pc, #176]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8043132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8043136:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8043138:	e07a      	b.n	8043230 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804313a:	4b2a      	ldr	r3, [pc, #168]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 804313c:	685b      	ldr	r3, [r3, #4]
 804313e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8043142:	687b      	ldr	r3, [r7, #4]
 8043144:	691b      	ldr	r3, [r3, #16]
 8043146:	031b      	lsls	r3, r3, #12
 8043148:	4926      	ldr	r1, [pc, #152]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 804314a:	4313      	orrs	r3, r2
 804314c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 804314e:	e06f      	b.n	8043230 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043150:	4b24      	ldr	r3, [pc, #144]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8043152:	685b      	ldr	r3, [r3, #4]
 8043154:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8043158:	687b      	ldr	r3, [r7, #4]
 804315a:	691b      	ldr	r3, [r3, #16]
 804315c:	061b      	lsls	r3, r3, #24
 804315e:	4921      	ldr	r1, [pc, #132]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8043160:	4313      	orrs	r3, r2
 8043162:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8043164:	e064      	b.n	8043230 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8043166:	687b      	ldr	r3, [r7, #4]
 8043168:	68db      	ldr	r3, [r3, #12]
 804316a:	2b00      	cmp	r3, #0
 804316c:	d047      	beq.n	80431fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 804316e:	4b1d      	ldr	r3, [pc, #116]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 8043170:	681b      	ldr	r3, [r3, #0]
 8043172:	f023 0219 	bic.w	r2, r3, #25
 8043176:	687b      	ldr	r3, [r7, #4]
 8043178:	68db      	ldr	r3, [r3, #12]
 804317a:	491a      	ldr	r1, [pc, #104]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 804317c:	4313      	orrs	r3, r2
 804317e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043180:	f7fd ffaa 	bl	80410d8 <HAL_GetTick>
 8043184:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8043186:	e008      	b.n	804319a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8043188:	f7fd ffa6 	bl	80410d8 <HAL_GetTick>
 804318c:	4602      	mov	r2, r0
 804318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043190:	1ad3      	subs	r3, r2, r3
 8043192:	2b02      	cmp	r3, #2
 8043194:	d901      	bls.n	804319a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8043196:	2303      	movs	r3, #3
 8043198:	e332      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 804319a:	4b12      	ldr	r3, [pc, #72]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 804319c:	681b      	ldr	r3, [r3, #0]
 804319e:	f003 0304 	and.w	r3, r3, #4
 80431a2:	2b00      	cmp	r3, #0
 80431a4:	d0f0      	beq.n	8043188 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80431a6:	f7fd ffc7 	bl	8041138 <HAL_GetREVID>
 80431aa:	4603      	mov	r3, r0
 80431ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80431b0:	4293      	cmp	r3, r2
 80431b2:	d819      	bhi.n	80431e8 <HAL_RCC_OscConfig+0x28c>
 80431b4:	687b      	ldr	r3, [r7, #4]
 80431b6:	691b      	ldr	r3, [r3, #16]
 80431b8:	2b40      	cmp	r3, #64	@ 0x40
 80431ba:	d108      	bne.n	80431ce <HAL_RCC_OscConfig+0x272>
 80431bc:	4b09      	ldr	r3, [pc, #36]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 80431be:	685b      	ldr	r3, [r3, #4]
 80431c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80431c4:	4a07      	ldr	r2, [pc, #28]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 80431c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80431ca:	6053      	str	r3, [r2, #4]
 80431cc:	e030      	b.n	8043230 <HAL_RCC_OscConfig+0x2d4>
 80431ce:	4b05      	ldr	r3, [pc, #20]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 80431d0:	685b      	ldr	r3, [r3, #4]
 80431d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80431d6:	687b      	ldr	r3, [r7, #4]
 80431d8:	691b      	ldr	r3, [r3, #16]
 80431da:	031b      	lsls	r3, r3, #12
 80431dc:	4901      	ldr	r1, [pc, #4]	@ (80431e4 <HAL_RCC_OscConfig+0x288>)
 80431de:	4313      	orrs	r3, r2
 80431e0:	604b      	str	r3, [r1, #4]
 80431e2:	e025      	b.n	8043230 <HAL_RCC_OscConfig+0x2d4>
 80431e4:	58024400 	.word	0x58024400
 80431e8:	4b9a      	ldr	r3, [pc, #616]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 80431ea:	685b      	ldr	r3, [r3, #4]
 80431ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80431f0:	687b      	ldr	r3, [r7, #4]
 80431f2:	691b      	ldr	r3, [r3, #16]
 80431f4:	061b      	lsls	r3, r3, #24
 80431f6:	4997      	ldr	r1, [pc, #604]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 80431f8:	4313      	orrs	r3, r2
 80431fa:	604b      	str	r3, [r1, #4]
 80431fc:	e018      	b.n	8043230 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80431fe:	4b95      	ldr	r3, [pc, #596]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043200:	681b      	ldr	r3, [r3, #0]
 8043202:	4a94      	ldr	r2, [pc, #592]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043204:	f023 0301 	bic.w	r3, r3, #1
 8043208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804320a:	f7fd ff65 	bl	80410d8 <HAL_GetTick>
 804320e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8043210:	e008      	b.n	8043224 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8043212:	f7fd ff61 	bl	80410d8 <HAL_GetTick>
 8043216:	4602      	mov	r2, r0
 8043218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804321a:	1ad3      	subs	r3, r2, r3
 804321c:	2b02      	cmp	r3, #2
 804321e:	d901      	bls.n	8043224 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8043220:	2303      	movs	r3, #3
 8043222:	e2ed      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8043224:	4b8b      	ldr	r3, [pc, #556]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043226:	681b      	ldr	r3, [r3, #0]
 8043228:	f003 0304 	and.w	r3, r3, #4
 804322c:	2b00      	cmp	r3, #0
 804322e:	d1f0      	bne.n	8043212 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8043230:	687b      	ldr	r3, [r7, #4]
 8043232:	681b      	ldr	r3, [r3, #0]
 8043234:	f003 0310 	and.w	r3, r3, #16
 8043238:	2b00      	cmp	r3, #0
 804323a:	f000 80a9 	beq.w	8043390 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 804323e:	4b85      	ldr	r3, [pc, #532]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043240:	691b      	ldr	r3, [r3, #16]
 8043242:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8043246:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8043248:	4b82      	ldr	r3, [pc, #520]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 804324a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804324c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 804324e:	69bb      	ldr	r3, [r7, #24]
 8043250:	2b08      	cmp	r3, #8
 8043252:	d007      	beq.n	8043264 <HAL_RCC_OscConfig+0x308>
 8043254:	69bb      	ldr	r3, [r7, #24]
 8043256:	2b18      	cmp	r3, #24
 8043258:	d13a      	bne.n	80432d0 <HAL_RCC_OscConfig+0x374>
 804325a:	697b      	ldr	r3, [r7, #20]
 804325c:	f003 0303 	and.w	r3, r3, #3
 8043260:	2b01      	cmp	r3, #1
 8043262:	d135      	bne.n	80432d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8043264:	4b7b      	ldr	r3, [pc, #492]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043266:	681b      	ldr	r3, [r3, #0]
 8043268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804326c:	2b00      	cmp	r3, #0
 804326e:	d005      	beq.n	804327c <HAL_RCC_OscConfig+0x320>
 8043270:	687b      	ldr	r3, [r7, #4]
 8043272:	69db      	ldr	r3, [r3, #28]
 8043274:	2b80      	cmp	r3, #128	@ 0x80
 8043276:	d001      	beq.n	804327c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8043278:	2301      	movs	r3, #1
 804327a:	e2c1      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 804327c:	f7fd ff5c 	bl	8041138 <HAL_GetREVID>
 8043280:	4603      	mov	r3, r0
 8043282:	f241 0203 	movw	r2, #4099	@ 0x1003
 8043286:	4293      	cmp	r3, r2
 8043288:	d817      	bhi.n	80432ba <HAL_RCC_OscConfig+0x35e>
 804328a:	687b      	ldr	r3, [r7, #4]
 804328c:	6a1b      	ldr	r3, [r3, #32]
 804328e:	2b20      	cmp	r3, #32
 8043290:	d108      	bne.n	80432a4 <HAL_RCC_OscConfig+0x348>
 8043292:	4b70      	ldr	r3, [pc, #448]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043294:	685b      	ldr	r3, [r3, #4]
 8043296:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 804329a:	4a6e      	ldr	r2, [pc, #440]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 804329c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80432a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80432a2:	e075      	b.n	8043390 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80432a4:	4b6b      	ldr	r3, [pc, #428]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 80432a6:	685b      	ldr	r3, [r3, #4]
 80432a8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80432ac:	687b      	ldr	r3, [r7, #4]
 80432ae:	6a1b      	ldr	r3, [r3, #32]
 80432b0:	069b      	lsls	r3, r3, #26
 80432b2:	4968      	ldr	r1, [pc, #416]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 80432b4:	4313      	orrs	r3, r2
 80432b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80432b8:	e06a      	b.n	8043390 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80432ba:	4b66      	ldr	r3, [pc, #408]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 80432bc:	68db      	ldr	r3, [r3, #12]
 80432be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80432c2:	687b      	ldr	r3, [r7, #4]
 80432c4:	6a1b      	ldr	r3, [r3, #32]
 80432c6:	061b      	lsls	r3, r3, #24
 80432c8:	4962      	ldr	r1, [pc, #392]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 80432ca:	4313      	orrs	r3, r2
 80432cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80432ce:	e05f      	b.n	8043390 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80432d0:	687b      	ldr	r3, [r7, #4]
 80432d2:	69db      	ldr	r3, [r3, #28]
 80432d4:	2b00      	cmp	r3, #0
 80432d6:	d042      	beq.n	804335e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80432d8:	4b5e      	ldr	r3, [pc, #376]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 80432da:	681b      	ldr	r3, [r3, #0]
 80432dc:	4a5d      	ldr	r2, [pc, #372]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 80432de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80432e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80432e4:	f7fd fef8 	bl	80410d8 <HAL_GetTick>
 80432e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80432ea:	e008      	b.n	80432fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80432ec:	f7fd fef4 	bl	80410d8 <HAL_GetTick>
 80432f0:	4602      	mov	r2, r0
 80432f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80432f4:	1ad3      	subs	r3, r2, r3
 80432f6:	2b02      	cmp	r3, #2
 80432f8:	d901      	bls.n	80432fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80432fa:	2303      	movs	r3, #3
 80432fc:	e280      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80432fe:	4b55      	ldr	r3, [pc, #340]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043300:	681b      	ldr	r3, [r3, #0]
 8043302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8043306:	2b00      	cmp	r3, #0
 8043308:	d0f0      	beq.n	80432ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 804330a:	f7fd ff15 	bl	8041138 <HAL_GetREVID>
 804330e:	4603      	mov	r3, r0
 8043310:	f241 0203 	movw	r2, #4099	@ 0x1003
 8043314:	4293      	cmp	r3, r2
 8043316:	d817      	bhi.n	8043348 <HAL_RCC_OscConfig+0x3ec>
 8043318:	687b      	ldr	r3, [r7, #4]
 804331a:	6a1b      	ldr	r3, [r3, #32]
 804331c:	2b20      	cmp	r3, #32
 804331e:	d108      	bne.n	8043332 <HAL_RCC_OscConfig+0x3d6>
 8043320:	4b4c      	ldr	r3, [pc, #304]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043322:	685b      	ldr	r3, [r3, #4]
 8043324:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8043328:	4a4a      	ldr	r2, [pc, #296]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 804332a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 804332e:	6053      	str	r3, [r2, #4]
 8043330:	e02e      	b.n	8043390 <HAL_RCC_OscConfig+0x434>
 8043332:	4b48      	ldr	r3, [pc, #288]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043334:	685b      	ldr	r3, [r3, #4]
 8043336:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 804333a:	687b      	ldr	r3, [r7, #4]
 804333c:	6a1b      	ldr	r3, [r3, #32]
 804333e:	069b      	lsls	r3, r3, #26
 8043340:	4944      	ldr	r1, [pc, #272]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043342:	4313      	orrs	r3, r2
 8043344:	604b      	str	r3, [r1, #4]
 8043346:	e023      	b.n	8043390 <HAL_RCC_OscConfig+0x434>
 8043348:	4b42      	ldr	r3, [pc, #264]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 804334a:	68db      	ldr	r3, [r3, #12]
 804334c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8043350:	687b      	ldr	r3, [r7, #4]
 8043352:	6a1b      	ldr	r3, [r3, #32]
 8043354:	061b      	lsls	r3, r3, #24
 8043356:	493f      	ldr	r1, [pc, #252]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043358:	4313      	orrs	r3, r2
 804335a:	60cb      	str	r3, [r1, #12]
 804335c:	e018      	b.n	8043390 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 804335e:	4b3d      	ldr	r3, [pc, #244]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043360:	681b      	ldr	r3, [r3, #0]
 8043362:	4a3c      	ldr	r2, [pc, #240]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043364:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8043368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804336a:	f7fd feb5 	bl	80410d8 <HAL_GetTick>
 804336e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8043370:	e008      	b.n	8043384 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8043372:	f7fd feb1 	bl	80410d8 <HAL_GetTick>
 8043376:	4602      	mov	r2, r0
 8043378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804337a:	1ad3      	subs	r3, r2, r3
 804337c:	2b02      	cmp	r3, #2
 804337e:	d901      	bls.n	8043384 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8043380:	2303      	movs	r3, #3
 8043382:	e23d      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8043384:	4b33      	ldr	r3, [pc, #204]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043386:	681b      	ldr	r3, [r3, #0]
 8043388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804338c:	2b00      	cmp	r3, #0
 804338e:	d1f0      	bne.n	8043372 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8043390:	687b      	ldr	r3, [r7, #4]
 8043392:	681b      	ldr	r3, [r3, #0]
 8043394:	f003 0308 	and.w	r3, r3, #8
 8043398:	2b00      	cmp	r3, #0
 804339a:	d036      	beq.n	804340a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 804339c:	687b      	ldr	r3, [r7, #4]
 804339e:	695b      	ldr	r3, [r3, #20]
 80433a0:	2b00      	cmp	r3, #0
 80433a2:	d019      	beq.n	80433d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80433a4:	4b2b      	ldr	r3, [pc, #172]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 80433a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80433a8:	4a2a      	ldr	r2, [pc, #168]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 80433aa:	f043 0301 	orr.w	r3, r3, #1
 80433ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80433b0:	f7fd fe92 	bl	80410d8 <HAL_GetTick>
 80433b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80433b6:	e008      	b.n	80433ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80433b8:	f7fd fe8e 	bl	80410d8 <HAL_GetTick>
 80433bc:	4602      	mov	r2, r0
 80433be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80433c0:	1ad3      	subs	r3, r2, r3
 80433c2:	2b02      	cmp	r3, #2
 80433c4:	d901      	bls.n	80433ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80433c6:	2303      	movs	r3, #3
 80433c8:	e21a      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80433ca:	4b22      	ldr	r3, [pc, #136]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 80433cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80433ce:	f003 0302 	and.w	r3, r3, #2
 80433d2:	2b00      	cmp	r3, #0
 80433d4:	d0f0      	beq.n	80433b8 <HAL_RCC_OscConfig+0x45c>
 80433d6:	e018      	b.n	804340a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80433d8:	4b1e      	ldr	r3, [pc, #120]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 80433da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80433dc:	4a1d      	ldr	r2, [pc, #116]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 80433de:	f023 0301 	bic.w	r3, r3, #1
 80433e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80433e4:	f7fd fe78 	bl	80410d8 <HAL_GetTick>
 80433e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80433ea:	e008      	b.n	80433fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80433ec:	f7fd fe74 	bl	80410d8 <HAL_GetTick>
 80433f0:	4602      	mov	r2, r0
 80433f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80433f4:	1ad3      	subs	r3, r2, r3
 80433f6:	2b02      	cmp	r3, #2
 80433f8:	d901      	bls.n	80433fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80433fa:	2303      	movs	r3, #3
 80433fc:	e200      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80433fe:	4b15      	ldr	r3, [pc, #84]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8043402:	f003 0302 	and.w	r3, r3, #2
 8043406:	2b00      	cmp	r3, #0
 8043408:	d1f0      	bne.n	80433ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 804340a:	687b      	ldr	r3, [r7, #4]
 804340c:	681b      	ldr	r3, [r3, #0]
 804340e:	f003 0320 	and.w	r3, r3, #32
 8043412:	2b00      	cmp	r3, #0
 8043414:	d039      	beq.n	804348a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8043416:	687b      	ldr	r3, [r7, #4]
 8043418:	699b      	ldr	r3, [r3, #24]
 804341a:	2b00      	cmp	r3, #0
 804341c:	d01c      	beq.n	8043458 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 804341e:	4b0d      	ldr	r3, [pc, #52]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043420:	681b      	ldr	r3, [r3, #0]
 8043422:	4a0c      	ldr	r2, [pc, #48]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043424:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8043428:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 804342a:	f7fd fe55 	bl	80410d8 <HAL_GetTick>
 804342e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8043430:	e008      	b.n	8043444 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8043432:	f7fd fe51 	bl	80410d8 <HAL_GetTick>
 8043436:	4602      	mov	r2, r0
 8043438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804343a:	1ad3      	subs	r3, r2, r3
 804343c:	2b02      	cmp	r3, #2
 804343e:	d901      	bls.n	8043444 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8043440:	2303      	movs	r3, #3
 8043442:	e1dd      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8043444:	4b03      	ldr	r3, [pc, #12]	@ (8043454 <HAL_RCC_OscConfig+0x4f8>)
 8043446:	681b      	ldr	r3, [r3, #0]
 8043448:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 804344c:	2b00      	cmp	r3, #0
 804344e:	d0f0      	beq.n	8043432 <HAL_RCC_OscConfig+0x4d6>
 8043450:	e01b      	b.n	804348a <HAL_RCC_OscConfig+0x52e>
 8043452:	bf00      	nop
 8043454:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8043458:	4b9b      	ldr	r3, [pc, #620]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 804345a:	681b      	ldr	r3, [r3, #0]
 804345c:	4a9a      	ldr	r2, [pc, #616]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 804345e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8043462:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8043464:	f7fd fe38 	bl	80410d8 <HAL_GetTick>
 8043468:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 804346a:	e008      	b.n	804347e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 804346c:	f7fd fe34 	bl	80410d8 <HAL_GetTick>
 8043470:	4602      	mov	r2, r0
 8043472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043474:	1ad3      	subs	r3, r2, r3
 8043476:	2b02      	cmp	r3, #2
 8043478:	d901      	bls.n	804347e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 804347a:	2303      	movs	r3, #3
 804347c:	e1c0      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 804347e:	4b92      	ldr	r3, [pc, #584]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043480:	681b      	ldr	r3, [r3, #0]
 8043482:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8043486:	2b00      	cmp	r3, #0
 8043488:	d1f0      	bne.n	804346c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 804348a:	687b      	ldr	r3, [r7, #4]
 804348c:	681b      	ldr	r3, [r3, #0]
 804348e:	f003 0304 	and.w	r3, r3, #4
 8043492:	2b00      	cmp	r3, #0
 8043494:	f000 8081 	beq.w	804359a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8043498:	4b8c      	ldr	r3, [pc, #560]	@ (80436cc <HAL_RCC_OscConfig+0x770>)
 804349a:	681b      	ldr	r3, [r3, #0]
 804349c:	4a8b      	ldr	r2, [pc, #556]	@ (80436cc <HAL_RCC_OscConfig+0x770>)
 804349e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80434a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80434a4:	f7fd fe18 	bl	80410d8 <HAL_GetTick>
 80434a8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80434aa:	e008      	b.n	80434be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80434ac:	f7fd fe14 	bl	80410d8 <HAL_GetTick>
 80434b0:	4602      	mov	r2, r0
 80434b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80434b4:	1ad3      	subs	r3, r2, r3
 80434b6:	2b64      	cmp	r3, #100	@ 0x64
 80434b8:	d901      	bls.n	80434be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80434ba:	2303      	movs	r3, #3
 80434bc:	e1a0      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80434be:	4b83      	ldr	r3, [pc, #524]	@ (80436cc <HAL_RCC_OscConfig+0x770>)
 80434c0:	681b      	ldr	r3, [r3, #0]
 80434c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80434c6:	2b00      	cmp	r3, #0
 80434c8:	d0f0      	beq.n	80434ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80434ca:	687b      	ldr	r3, [r7, #4]
 80434cc:	689b      	ldr	r3, [r3, #8]
 80434ce:	2b01      	cmp	r3, #1
 80434d0:	d106      	bne.n	80434e0 <HAL_RCC_OscConfig+0x584>
 80434d2:	4b7d      	ldr	r3, [pc, #500]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 80434d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80434d6:	4a7c      	ldr	r2, [pc, #496]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 80434d8:	f043 0301 	orr.w	r3, r3, #1
 80434dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80434de:	e02d      	b.n	804353c <HAL_RCC_OscConfig+0x5e0>
 80434e0:	687b      	ldr	r3, [r7, #4]
 80434e2:	689b      	ldr	r3, [r3, #8]
 80434e4:	2b00      	cmp	r3, #0
 80434e6:	d10c      	bne.n	8043502 <HAL_RCC_OscConfig+0x5a6>
 80434e8:	4b77      	ldr	r3, [pc, #476]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 80434ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80434ec:	4a76      	ldr	r2, [pc, #472]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 80434ee:	f023 0301 	bic.w	r3, r3, #1
 80434f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80434f4:	4b74      	ldr	r3, [pc, #464]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 80434f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80434f8:	4a73      	ldr	r2, [pc, #460]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 80434fa:	f023 0304 	bic.w	r3, r3, #4
 80434fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8043500:	e01c      	b.n	804353c <HAL_RCC_OscConfig+0x5e0>
 8043502:	687b      	ldr	r3, [r7, #4]
 8043504:	689b      	ldr	r3, [r3, #8]
 8043506:	2b05      	cmp	r3, #5
 8043508:	d10c      	bne.n	8043524 <HAL_RCC_OscConfig+0x5c8>
 804350a:	4b6f      	ldr	r3, [pc, #444]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 804350c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804350e:	4a6e      	ldr	r2, [pc, #440]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043510:	f043 0304 	orr.w	r3, r3, #4
 8043514:	6713      	str	r3, [r2, #112]	@ 0x70
 8043516:	4b6c      	ldr	r3, [pc, #432]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804351a:	4a6b      	ldr	r2, [pc, #428]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 804351c:	f043 0301 	orr.w	r3, r3, #1
 8043520:	6713      	str	r3, [r2, #112]	@ 0x70
 8043522:	e00b      	b.n	804353c <HAL_RCC_OscConfig+0x5e0>
 8043524:	4b68      	ldr	r3, [pc, #416]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043528:	4a67      	ldr	r2, [pc, #412]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 804352a:	f023 0301 	bic.w	r3, r3, #1
 804352e:	6713      	str	r3, [r2, #112]	@ 0x70
 8043530:	4b65      	ldr	r3, [pc, #404]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043534:	4a64      	ldr	r2, [pc, #400]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043536:	f023 0304 	bic.w	r3, r3, #4
 804353a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 804353c:	687b      	ldr	r3, [r7, #4]
 804353e:	689b      	ldr	r3, [r3, #8]
 8043540:	2b00      	cmp	r3, #0
 8043542:	d015      	beq.n	8043570 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043544:	f7fd fdc8 	bl	80410d8 <HAL_GetTick>
 8043548:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 804354a:	e00a      	b.n	8043562 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804354c:	f7fd fdc4 	bl	80410d8 <HAL_GetTick>
 8043550:	4602      	mov	r2, r0
 8043552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043554:	1ad3      	subs	r3, r2, r3
 8043556:	f241 3288 	movw	r2, #5000	@ 0x1388
 804355a:	4293      	cmp	r3, r2
 804355c:	d901      	bls.n	8043562 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 804355e:	2303      	movs	r3, #3
 8043560:	e14e      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8043562:	4b59      	ldr	r3, [pc, #356]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043566:	f003 0302 	and.w	r3, r3, #2
 804356a:	2b00      	cmp	r3, #0
 804356c:	d0ee      	beq.n	804354c <HAL_RCC_OscConfig+0x5f0>
 804356e:	e014      	b.n	804359a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043570:	f7fd fdb2 	bl	80410d8 <HAL_GetTick>
 8043574:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8043576:	e00a      	b.n	804358e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8043578:	f7fd fdae 	bl	80410d8 <HAL_GetTick>
 804357c:	4602      	mov	r2, r0
 804357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043580:	1ad3      	subs	r3, r2, r3
 8043582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8043586:	4293      	cmp	r3, r2
 8043588:	d901      	bls.n	804358e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 804358a:	2303      	movs	r3, #3
 804358c:	e138      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 804358e:	4b4e      	ldr	r3, [pc, #312]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043592:	f003 0302 	and.w	r3, r3, #2
 8043596:	2b00      	cmp	r3, #0
 8043598:	d1ee      	bne.n	8043578 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 804359a:	687b      	ldr	r3, [r7, #4]
 804359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804359e:	2b00      	cmp	r3, #0
 80435a0:	f000 812d 	beq.w	80437fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80435a4:	4b48      	ldr	r3, [pc, #288]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 80435a6:	691b      	ldr	r3, [r3, #16]
 80435a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80435ac:	2b18      	cmp	r3, #24
 80435ae:	f000 80bd 	beq.w	804372c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80435b2:	687b      	ldr	r3, [r7, #4]
 80435b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80435b6:	2b02      	cmp	r3, #2
 80435b8:	f040 809e 	bne.w	80436f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80435bc:	4b42      	ldr	r3, [pc, #264]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 80435be:	681b      	ldr	r3, [r3, #0]
 80435c0:	4a41      	ldr	r2, [pc, #260]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 80435c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80435c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80435c8:	f7fd fd86 	bl	80410d8 <HAL_GetTick>
 80435cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80435ce:	e008      	b.n	80435e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80435d0:	f7fd fd82 	bl	80410d8 <HAL_GetTick>
 80435d4:	4602      	mov	r2, r0
 80435d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80435d8:	1ad3      	subs	r3, r2, r3
 80435da:	2b02      	cmp	r3, #2
 80435dc:	d901      	bls.n	80435e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80435de:	2303      	movs	r3, #3
 80435e0:	e10e      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80435e2:	4b39      	ldr	r3, [pc, #228]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 80435e4:	681b      	ldr	r3, [r3, #0]
 80435e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80435ea:	2b00      	cmp	r3, #0
 80435ec:	d1f0      	bne.n	80435d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80435ee:	4b36      	ldr	r3, [pc, #216]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 80435f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80435f2:	4b37      	ldr	r3, [pc, #220]	@ (80436d0 <HAL_RCC_OscConfig+0x774>)
 80435f4:	4013      	ands	r3, r2
 80435f6:	687a      	ldr	r2, [r7, #4]
 80435f8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80435fa:	687a      	ldr	r2, [r7, #4]
 80435fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80435fe:	0112      	lsls	r2, r2, #4
 8043600:	430a      	orrs	r2, r1
 8043602:	4931      	ldr	r1, [pc, #196]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043604:	4313      	orrs	r3, r2
 8043606:	628b      	str	r3, [r1, #40]	@ 0x28
 8043608:	687b      	ldr	r3, [r7, #4]
 804360a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804360c:	3b01      	subs	r3, #1
 804360e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8043612:	687b      	ldr	r3, [r7, #4]
 8043614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8043616:	3b01      	subs	r3, #1
 8043618:	025b      	lsls	r3, r3, #9
 804361a:	b29b      	uxth	r3, r3
 804361c:	431a      	orrs	r2, r3
 804361e:	687b      	ldr	r3, [r7, #4]
 8043620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8043622:	3b01      	subs	r3, #1
 8043624:	041b      	lsls	r3, r3, #16
 8043626:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 804362a:	431a      	orrs	r2, r3
 804362c:	687b      	ldr	r3, [r7, #4]
 804362e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8043630:	3b01      	subs	r3, #1
 8043632:	061b      	lsls	r3, r3, #24
 8043634:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8043638:	4923      	ldr	r1, [pc, #140]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 804363a:	4313      	orrs	r3, r2
 804363c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 804363e:	4b22      	ldr	r3, [pc, #136]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043642:	4a21      	ldr	r2, [pc, #132]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043644:	f023 0301 	bic.w	r3, r3, #1
 8043648:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 804364a:	4b1f      	ldr	r3, [pc, #124]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 804364c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 804364e:	4b21      	ldr	r3, [pc, #132]	@ (80436d4 <HAL_RCC_OscConfig+0x778>)
 8043650:	4013      	ands	r3, r2
 8043652:	687a      	ldr	r2, [r7, #4]
 8043654:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8043656:	00d2      	lsls	r2, r2, #3
 8043658:	491b      	ldr	r1, [pc, #108]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 804365a:	4313      	orrs	r3, r2
 804365c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 804365e:	4b1a      	ldr	r3, [pc, #104]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043662:	f023 020c 	bic.w	r2, r3, #12
 8043666:	687b      	ldr	r3, [r7, #4]
 8043668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804366a:	4917      	ldr	r1, [pc, #92]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 804366c:	4313      	orrs	r3, r2
 804366e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8043670:	4b15      	ldr	r3, [pc, #84]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043674:	f023 0202 	bic.w	r2, r3, #2
 8043678:	687b      	ldr	r3, [r7, #4]
 804367a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 804367c:	4912      	ldr	r1, [pc, #72]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 804367e:	4313      	orrs	r3, r2
 8043680:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8043682:	4b11      	ldr	r3, [pc, #68]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043686:	4a10      	ldr	r2, [pc, #64]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 804368c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804368e:	4b0e      	ldr	r3, [pc, #56]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043692:	4a0d      	ldr	r2, [pc, #52]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 8043694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8043698:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 804369a:	4b0b      	ldr	r3, [pc, #44]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 804369c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804369e:	4a0a      	ldr	r2, [pc, #40]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 80436a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80436a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80436a6:	4b08      	ldr	r3, [pc, #32]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 80436a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80436aa:	4a07      	ldr	r2, [pc, #28]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 80436ac:	f043 0301 	orr.w	r3, r3, #1
 80436b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80436b2:	4b05      	ldr	r3, [pc, #20]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 80436b4:	681b      	ldr	r3, [r3, #0]
 80436b6:	4a04      	ldr	r2, [pc, #16]	@ (80436c8 <HAL_RCC_OscConfig+0x76c>)
 80436b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80436bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80436be:	f7fd fd0b 	bl	80410d8 <HAL_GetTick>
 80436c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80436c4:	e011      	b.n	80436ea <HAL_RCC_OscConfig+0x78e>
 80436c6:	bf00      	nop
 80436c8:	58024400 	.word	0x58024400
 80436cc:	58024800 	.word	0x58024800
 80436d0:	fffffc0c 	.word	0xfffffc0c
 80436d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80436d8:	f7fd fcfe 	bl	80410d8 <HAL_GetTick>
 80436dc:	4602      	mov	r2, r0
 80436de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80436e0:	1ad3      	subs	r3, r2, r3
 80436e2:	2b02      	cmp	r3, #2
 80436e4:	d901      	bls.n	80436ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80436e6:	2303      	movs	r3, #3
 80436e8:	e08a      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80436ea:	4b47      	ldr	r3, [pc, #284]	@ (8043808 <HAL_RCC_OscConfig+0x8ac>)
 80436ec:	681b      	ldr	r3, [r3, #0]
 80436ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80436f2:	2b00      	cmp	r3, #0
 80436f4:	d0f0      	beq.n	80436d8 <HAL_RCC_OscConfig+0x77c>
 80436f6:	e082      	b.n	80437fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80436f8:	4b43      	ldr	r3, [pc, #268]	@ (8043808 <HAL_RCC_OscConfig+0x8ac>)
 80436fa:	681b      	ldr	r3, [r3, #0]
 80436fc:	4a42      	ldr	r2, [pc, #264]	@ (8043808 <HAL_RCC_OscConfig+0x8ac>)
 80436fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8043702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043704:	f7fd fce8 	bl	80410d8 <HAL_GetTick>
 8043708:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 804370a:	e008      	b.n	804371e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 804370c:	f7fd fce4 	bl	80410d8 <HAL_GetTick>
 8043710:	4602      	mov	r2, r0
 8043712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043714:	1ad3      	subs	r3, r2, r3
 8043716:	2b02      	cmp	r3, #2
 8043718:	d901      	bls.n	804371e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 804371a:	2303      	movs	r3, #3
 804371c:	e070      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 804371e:	4b3a      	ldr	r3, [pc, #232]	@ (8043808 <HAL_RCC_OscConfig+0x8ac>)
 8043720:	681b      	ldr	r3, [r3, #0]
 8043722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8043726:	2b00      	cmp	r3, #0
 8043728:	d1f0      	bne.n	804370c <HAL_RCC_OscConfig+0x7b0>
 804372a:	e068      	b.n	80437fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 804372c:	4b36      	ldr	r3, [pc, #216]	@ (8043808 <HAL_RCC_OscConfig+0x8ac>)
 804372e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043730:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8043732:	4b35      	ldr	r3, [pc, #212]	@ (8043808 <HAL_RCC_OscConfig+0x8ac>)
 8043734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043736:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8043738:	687b      	ldr	r3, [r7, #4]
 804373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804373c:	2b01      	cmp	r3, #1
 804373e:	d031      	beq.n	80437a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8043740:	693b      	ldr	r3, [r7, #16]
 8043742:	f003 0203 	and.w	r2, r3, #3
 8043746:	687b      	ldr	r3, [r7, #4]
 8043748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804374a:	429a      	cmp	r2, r3
 804374c:	d12a      	bne.n	80437a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 804374e:	693b      	ldr	r3, [r7, #16]
 8043750:	091b      	lsrs	r3, r3, #4
 8043752:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8043756:	687b      	ldr	r3, [r7, #4]
 8043758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804375a:	429a      	cmp	r2, r3
 804375c:	d122      	bne.n	80437a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 804375e:	68fb      	ldr	r3, [r7, #12]
 8043760:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8043764:	687b      	ldr	r3, [r7, #4]
 8043766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043768:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 804376a:	429a      	cmp	r2, r3
 804376c:	d11a      	bne.n	80437a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 804376e:	68fb      	ldr	r3, [r7, #12]
 8043770:	0a5b      	lsrs	r3, r3, #9
 8043772:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8043776:	687b      	ldr	r3, [r7, #4]
 8043778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 804377a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 804377c:	429a      	cmp	r2, r3
 804377e:	d111      	bne.n	80437a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8043780:	68fb      	ldr	r3, [r7, #12]
 8043782:	0c1b      	lsrs	r3, r3, #16
 8043784:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8043788:	687b      	ldr	r3, [r7, #4]
 804378a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804378c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 804378e:	429a      	cmp	r2, r3
 8043790:	d108      	bne.n	80437a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8043792:	68fb      	ldr	r3, [r7, #12]
 8043794:	0e1b      	lsrs	r3, r3, #24
 8043796:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804379a:	687b      	ldr	r3, [r7, #4]
 804379c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 804379e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80437a0:	429a      	cmp	r2, r3
 80437a2:	d001      	beq.n	80437a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80437a4:	2301      	movs	r3, #1
 80437a6:	e02b      	b.n	8043800 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80437a8:	4b17      	ldr	r3, [pc, #92]	@ (8043808 <HAL_RCC_OscConfig+0x8ac>)
 80437aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80437ac:	08db      	lsrs	r3, r3, #3
 80437ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80437b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80437b4:	687b      	ldr	r3, [r7, #4]
 80437b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80437b8:	693a      	ldr	r2, [r7, #16]
 80437ba:	429a      	cmp	r2, r3
 80437bc:	d01f      	beq.n	80437fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80437be:	4b12      	ldr	r3, [pc, #72]	@ (8043808 <HAL_RCC_OscConfig+0x8ac>)
 80437c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80437c2:	4a11      	ldr	r2, [pc, #68]	@ (8043808 <HAL_RCC_OscConfig+0x8ac>)
 80437c4:	f023 0301 	bic.w	r3, r3, #1
 80437c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80437ca:	f7fd fc85 	bl	80410d8 <HAL_GetTick>
 80437ce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80437d0:	bf00      	nop
 80437d2:	f7fd fc81 	bl	80410d8 <HAL_GetTick>
 80437d6:	4602      	mov	r2, r0
 80437d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80437da:	4293      	cmp	r3, r2
 80437dc:	d0f9      	beq.n	80437d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80437de:	4b0a      	ldr	r3, [pc, #40]	@ (8043808 <HAL_RCC_OscConfig+0x8ac>)
 80437e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80437e2:	4b0a      	ldr	r3, [pc, #40]	@ (804380c <HAL_RCC_OscConfig+0x8b0>)
 80437e4:	4013      	ands	r3, r2
 80437e6:	687a      	ldr	r2, [r7, #4]
 80437e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80437ea:	00d2      	lsls	r2, r2, #3
 80437ec:	4906      	ldr	r1, [pc, #24]	@ (8043808 <HAL_RCC_OscConfig+0x8ac>)
 80437ee:	4313      	orrs	r3, r2
 80437f0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80437f2:	4b05      	ldr	r3, [pc, #20]	@ (8043808 <HAL_RCC_OscConfig+0x8ac>)
 80437f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80437f6:	4a04      	ldr	r2, [pc, #16]	@ (8043808 <HAL_RCC_OscConfig+0x8ac>)
 80437f8:	f043 0301 	orr.w	r3, r3, #1
 80437fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80437fe:	2300      	movs	r3, #0
}
 8043800:	4618      	mov	r0, r3
 8043802:	3730      	adds	r7, #48	@ 0x30
 8043804:	46bd      	mov	sp, r7
 8043806:	bd80      	pop	{r7, pc}
 8043808:	58024400 	.word	0x58024400
 804380c:	ffff0007 	.word	0xffff0007

08043810 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8043810:	b580      	push	{r7, lr}
 8043812:	b086      	sub	sp, #24
 8043814:	af00      	add	r7, sp, #0
 8043816:	6078      	str	r0, [r7, #4]
 8043818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 804381a:	687b      	ldr	r3, [r7, #4]
 804381c:	2b00      	cmp	r3, #0
 804381e:	d101      	bne.n	8043824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8043820:	2301      	movs	r3, #1
 8043822:	e19c      	b.n	8043b5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8043824:	4b8a      	ldr	r3, [pc, #552]	@ (8043a50 <HAL_RCC_ClockConfig+0x240>)
 8043826:	681b      	ldr	r3, [r3, #0]
 8043828:	f003 030f 	and.w	r3, r3, #15
 804382c:	683a      	ldr	r2, [r7, #0]
 804382e:	429a      	cmp	r2, r3
 8043830:	d910      	bls.n	8043854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8043832:	4b87      	ldr	r3, [pc, #540]	@ (8043a50 <HAL_RCC_ClockConfig+0x240>)
 8043834:	681b      	ldr	r3, [r3, #0]
 8043836:	f023 020f 	bic.w	r2, r3, #15
 804383a:	4985      	ldr	r1, [pc, #532]	@ (8043a50 <HAL_RCC_ClockConfig+0x240>)
 804383c:	683b      	ldr	r3, [r7, #0]
 804383e:	4313      	orrs	r3, r2
 8043840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8043842:	4b83      	ldr	r3, [pc, #524]	@ (8043a50 <HAL_RCC_ClockConfig+0x240>)
 8043844:	681b      	ldr	r3, [r3, #0]
 8043846:	f003 030f 	and.w	r3, r3, #15
 804384a:	683a      	ldr	r2, [r7, #0]
 804384c:	429a      	cmp	r2, r3
 804384e:	d001      	beq.n	8043854 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8043850:	2301      	movs	r3, #1
 8043852:	e184      	b.n	8043b5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8043854:	687b      	ldr	r3, [r7, #4]
 8043856:	681b      	ldr	r3, [r3, #0]
 8043858:	f003 0304 	and.w	r3, r3, #4
 804385c:	2b00      	cmp	r3, #0
 804385e:	d010      	beq.n	8043882 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8043860:	687b      	ldr	r3, [r7, #4]
 8043862:	691a      	ldr	r2, [r3, #16]
 8043864:	4b7b      	ldr	r3, [pc, #492]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 8043866:	699b      	ldr	r3, [r3, #24]
 8043868:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 804386c:	429a      	cmp	r2, r3
 804386e:	d908      	bls.n	8043882 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8043870:	4b78      	ldr	r3, [pc, #480]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 8043872:	699b      	ldr	r3, [r3, #24]
 8043874:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8043878:	687b      	ldr	r3, [r7, #4]
 804387a:	691b      	ldr	r3, [r3, #16]
 804387c:	4975      	ldr	r1, [pc, #468]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 804387e:	4313      	orrs	r3, r2
 8043880:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8043882:	687b      	ldr	r3, [r7, #4]
 8043884:	681b      	ldr	r3, [r3, #0]
 8043886:	f003 0308 	and.w	r3, r3, #8
 804388a:	2b00      	cmp	r3, #0
 804388c:	d010      	beq.n	80438b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 804388e:	687b      	ldr	r3, [r7, #4]
 8043890:	695a      	ldr	r2, [r3, #20]
 8043892:	4b70      	ldr	r3, [pc, #448]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 8043894:	69db      	ldr	r3, [r3, #28]
 8043896:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 804389a:	429a      	cmp	r2, r3
 804389c:	d908      	bls.n	80438b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 804389e:	4b6d      	ldr	r3, [pc, #436]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 80438a0:	69db      	ldr	r3, [r3, #28]
 80438a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80438a6:	687b      	ldr	r3, [r7, #4]
 80438a8:	695b      	ldr	r3, [r3, #20]
 80438aa:	496a      	ldr	r1, [pc, #424]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 80438ac:	4313      	orrs	r3, r2
 80438ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80438b0:	687b      	ldr	r3, [r7, #4]
 80438b2:	681b      	ldr	r3, [r3, #0]
 80438b4:	f003 0310 	and.w	r3, r3, #16
 80438b8:	2b00      	cmp	r3, #0
 80438ba:	d010      	beq.n	80438de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80438bc:	687b      	ldr	r3, [r7, #4]
 80438be:	699a      	ldr	r2, [r3, #24]
 80438c0:	4b64      	ldr	r3, [pc, #400]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 80438c2:	69db      	ldr	r3, [r3, #28]
 80438c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80438c8:	429a      	cmp	r2, r3
 80438ca:	d908      	bls.n	80438de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80438cc:	4b61      	ldr	r3, [pc, #388]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 80438ce:	69db      	ldr	r3, [r3, #28]
 80438d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80438d4:	687b      	ldr	r3, [r7, #4]
 80438d6:	699b      	ldr	r3, [r3, #24]
 80438d8:	495e      	ldr	r1, [pc, #376]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 80438da:	4313      	orrs	r3, r2
 80438dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80438de:	687b      	ldr	r3, [r7, #4]
 80438e0:	681b      	ldr	r3, [r3, #0]
 80438e2:	f003 0320 	and.w	r3, r3, #32
 80438e6:	2b00      	cmp	r3, #0
 80438e8:	d010      	beq.n	804390c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80438ea:	687b      	ldr	r3, [r7, #4]
 80438ec:	69da      	ldr	r2, [r3, #28]
 80438ee:	4b59      	ldr	r3, [pc, #356]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 80438f0:	6a1b      	ldr	r3, [r3, #32]
 80438f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80438f6:	429a      	cmp	r2, r3
 80438f8:	d908      	bls.n	804390c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80438fa:	4b56      	ldr	r3, [pc, #344]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 80438fc:	6a1b      	ldr	r3, [r3, #32]
 80438fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8043902:	687b      	ldr	r3, [r7, #4]
 8043904:	69db      	ldr	r3, [r3, #28]
 8043906:	4953      	ldr	r1, [pc, #332]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 8043908:	4313      	orrs	r3, r2
 804390a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 804390c:	687b      	ldr	r3, [r7, #4]
 804390e:	681b      	ldr	r3, [r3, #0]
 8043910:	f003 0302 	and.w	r3, r3, #2
 8043914:	2b00      	cmp	r3, #0
 8043916:	d010      	beq.n	804393a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8043918:	687b      	ldr	r3, [r7, #4]
 804391a:	68da      	ldr	r2, [r3, #12]
 804391c:	4b4d      	ldr	r3, [pc, #308]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 804391e:	699b      	ldr	r3, [r3, #24]
 8043920:	f003 030f 	and.w	r3, r3, #15
 8043924:	429a      	cmp	r2, r3
 8043926:	d908      	bls.n	804393a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8043928:	4b4a      	ldr	r3, [pc, #296]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 804392a:	699b      	ldr	r3, [r3, #24]
 804392c:	f023 020f 	bic.w	r2, r3, #15
 8043930:	687b      	ldr	r3, [r7, #4]
 8043932:	68db      	ldr	r3, [r3, #12]
 8043934:	4947      	ldr	r1, [pc, #284]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 8043936:	4313      	orrs	r3, r2
 8043938:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 804393a:	687b      	ldr	r3, [r7, #4]
 804393c:	681b      	ldr	r3, [r3, #0]
 804393e:	f003 0301 	and.w	r3, r3, #1
 8043942:	2b00      	cmp	r3, #0
 8043944:	d055      	beq.n	80439f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8043946:	4b43      	ldr	r3, [pc, #268]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 8043948:	699b      	ldr	r3, [r3, #24]
 804394a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 804394e:	687b      	ldr	r3, [r7, #4]
 8043950:	689b      	ldr	r3, [r3, #8]
 8043952:	4940      	ldr	r1, [pc, #256]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 8043954:	4313      	orrs	r3, r2
 8043956:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8043958:	687b      	ldr	r3, [r7, #4]
 804395a:	685b      	ldr	r3, [r3, #4]
 804395c:	2b02      	cmp	r3, #2
 804395e:	d107      	bne.n	8043970 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8043960:	4b3c      	ldr	r3, [pc, #240]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 8043962:	681b      	ldr	r3, [r3, #0]
 8043964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8043968:	2b00      	cmp	r3, #0
 804396a:	d121      	bne.n	80439b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 804396c:	2301      	movs	r3, #1
 804396e:	e0f6      	b.n	8043b5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8043970:	687b      	ldr	r3, [r7, #4]
 8043972:	685b      	ldr	r3, [r3, #4]
 8043974:	2b03      	cmp	r3, #3
 8043976:	d107      	bne.n	8043988 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8043978:	4b36      	ldr	r3, [pc, #216]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 804397a:	681b      	ldr	r3, [r3, #0]
 804397c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8043980:	2b00      	cmp	r3, #0
 8043982:	d115      	bne.n	80439b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8043984:	2301      	movs	r3, #1
 8043986:	e0ea      	b.n	8043b5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8043988:	687b      	ldr	r3, [r7, #4]
 804398a:	685b      	ldr	r3, [r3, #4]
 804398c:	2b01      	cmp	r3, #1
 804398e:	d107      	bne.n	80439a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8043990:	4b30      	ldr	r3, [pc, #192]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 8043992:	681b      	ldr	r3, [r3, #0]
 8043994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8043998:	2b00      	cmp	r3, #0
 804399a:	d109      	bne.n	80439b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 804399c:	2301      	movs	r3, #1
 804399e:	e0de      	b.n	8043b5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80439a0:	4b2c      	ldr	r3, [pc, #176]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 80439a2:	681b      	ldr	r3, [r3, #0]
 80439a4:	f003 0304 	and.w	r3, r3, #4
 80439a8:	2b00      	cmp	r3, #0
 80439aa:	d101      	bne.n	80439b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80439ac:	2301      	movs	r3, #1
 80439ae:	e0d6      	b.n	8043b5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80439b0:	4b28      	ldr	r3, [pc, #160]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 80439b2:	691b      	ldr	r3, [r3, #16]
 80439b4:	f023 0207 	bic.w	r2, r3, #7
 80439b8:	687b      	ldr	r3, [r7, #4]
 80439ba:	685b      	ldr	r3, [r3, #4]
 80439bc:	4925      	ldr	r1, [pc, #148]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 80439be:	4313      	orrs	r3, r2
 80439c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80439c2:	f7fd fb89 	bl	80410d8 <HAL_GetTick>
 80439c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80439c8:	e00a      	b.n	80439e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80439ca:	f7fd fb85 	bl	80410d8 <HAL_GetTick>
 80439ce:	4602      	mov	r2, r0
 80439d0:	697b      	ldr	r3, [r7, #20]
 80439d2:	1ad3      	subs	r3, r2, r3
 80439d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80439d8:	4293      	cmp	r3, r2
 80439da:	d901      	bls.n	80439e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80439dc:	2303      	movs	r3, #3
 80439de:	e0be      	b.n	8043b5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80439e0:	4b1c      	ldr	r3, [pc, #112]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 80439e2:	691b      	ldr	r3, [r3, #16]
 80439e4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80439e8:	687b      	ldr	r3, [r7, #4]
 80439ea:	685b      	ldr	r3, [r3, #4]
 80439ec:	00db      	lsls	r3, r3, #3
 80439ee:	429a      	cmp	r2, r3
 80439f0:	d1eb      	bne.n	80439ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80439f2:	687b      	ldr	r3, [r7, #4]
 80439f4:	681b      	ldr	r3, [r3, #0]
 80439f6:	f003 0302 	and.w	r3, r3, #2
 80439fa:	2b00      	cmp	r3, #0
 80439fc:	d010      	beq.n	8043a20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80439fe:	687b      	ldr	r3, [r7, #4]
 8043a00:	68da      	ldr	r2, [r3, #12]
 8043a02:	4b14      	ldr	r3, [pc, #80]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 8043a04:	699b      	ldr	r3, [r3, #24]
 8043a06:	f003 030f 	and.w	r3, r3, #15
 8043a0a:	429a      	cmp	r2, r3
 8043a0c:	d208      	bcs.n	8043a20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8043a0e:	4b11      	ldr	r3, [pc, #68]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 8043a10:	699b      	ldr	r3, [r3, #24]
 8043a12:	f023 020f 	bic.w	r2, r3, #15
 8043a16:	687b      	ldr	r3, [r7, #4]
 8043a18:	68db      	ldr	r3, [r3, #12]
 8043a1a:	490e      	ldr	r1, [pc, #56]	@ (8043a54 <HAL_RCC_ClockConfig+0x244>)
 8043a1c:	4313      	orrs	r3, r2
 8043a1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8043a20:	4b0b      	ldr	r3, [pc, #44]	@ (8043a50 <HAL_RCC_ClockConfig+0x240>)
 8043a22:	681b      	ldr	r3, [r3, #0]
 8043a24:	f003 030f 	and.w	r3, r3, #15
 8043a28:	683a      	ldr	r2, [r7, #0]
 8043a2a:	429a      	cmp	r2, r3
 8043a2c:	d214      	bcs.n	8043a58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8043a2e:	4b08      	ldr	r3, [pc, #32]	@ (8043a50 <HAL_RCC_ClockConfig+0x240>)
 8043a30:	681b      	ldr	r3, [r3, #0]
 8043a32:	f023 020f 	bic.w	r2, r3, #15
 8043a36:	4906      	ldr	r1, [pc, #24]	@ (8043a50 <HAL_RCC_ClockConfig+0x240>)
 8043a38:	683b      	ldr	r3, [r7, #0]
 8043a3a:	4313      	orrs	r3, r2
 8043a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8043a3e:	4b04      	ldr	r3, [pc, #16]	@ (8043a50 <HAL_RCC_ClockConfig+0x240>)
 8043a40:	681b      	ldr	r3, [r3, #0]
 8043a42:	f003 030f 	and.w	r3, r3, #15
 8043a46:	683a      	ldr	r2, [r7, #0]
 8043a48:	429a      	cmp	r2, r3
 8043a4a:	d005      	beq.n	8043a58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8043a4c:	2301      	movs	r3, #1
 8043a4e:	e086      	b.n	8043b5e <HAL_RCC_ClockConfig+0x34e>
 8043a50:	52002000 	.word	0x52002000
 8043a54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8043a58:	687b      	ldr	r3, [r7, #4]
 8043a5a:	681b      	ldr	r3, [r3, #0]
 8043a5c:	f003 0304 	and.w	r3, r3, #4
 8043a60:	2b00      	cmp	r3, #0
 8043a62:	d010      	beq.n	8043a86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8043a64:	687b      	ldr	r3, [r7, #4]
 8043a66:	691a      	ldr	r2, [r3, #16]
 8043a68:	4b3f      	ldr	r3, [pc, #252]	@ (8043b68 <HAL_RCC_ClockConfig+0x358>)
 8043a6a:	699b      	ldr	r3, [r3, #24]
 8043a6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8043a70:	429a      	cmp	r2, r3
 8043a72:	d208      	bcs.n	8043a86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8043a74:	4b3c      	ldr	r3, [pc, #240]	@ (8043b68 <HAL_RCC_ClockConfig+0x358>)
 8043a76:	699b      	ldr	r3, [r3, #24]
 8043a78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8043a7c:	687b      	ldr	r3, [r7, #4]
 8043a7e:	691b      	ldr	r3, [r3, #16]
 8043a80:	4939      	ldr	r1, [pc, #228]	@ (8043b68 <HAL_RCC_ClockConfig+0x358>)
 8043a82:	4313      	orrs	r3, r2
 8043a84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8043a86:	687b      	ldr	r3, [r7, #4]
 8043a88:	681b      	ldr	r3, [r3, #0]
 8043a8a:	f003 0308 	and.w	r3, r3, #8
 8043a8e:	2b00      	cmp	r3, #0
 8043a90:	d010      	beq.n	8043ab4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8043a92:	687b      	ldr	r3, [r7, #4]
 8043a94:	695a      	ldr	r2, [r3, #20]
 8043a96:	4b34      	ldr	r3, [pc, #208]	@ (8043b68 <HAL_RCC_ClockConfig+0x358>)
 8043a98:	69db      	ldr	r3, [r3, #28]
 8043a9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8043a9e:	429a      	cmp	r2, r3
 8043aa0:	d208      	bcs.n	8043ab4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8043aa2:	4b31      	ldr	r3, [pc, #196]	@ (8043b68 <HAL_RCC_ClockConfig+0x358>)
 8043aa4:	69db      	ldr	r3, [r3, #28]
 8043aa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8043aaa:	687b      	ldr	r3, [r7, #4]
 8043aac:	695b      	ldr	r3, [r3, #20]
 8043aae:	492e      	ldr	r1, [pc, #184]	@ (8043b68 <HAL_RCC_ClockConfig+0x358>)
 8043ab0:	4313      	orrs	r3, r2
 8043ab2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8043ab4:	687b      	ldr	r3, [r7, #4]
 8043ab6:	681b      	ldr	r3, [r3, #0]
 8043ab8:	f003 0310 	and.w	r3, r3, #16
 8043abc:	2b00      	cmp	r3, #0
 8043abe:	d010      	beq.n	8043ae2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8043ac0:	687b      	ldr	r3, [r7, #4]
 8043ac2:	699a      	ldr	r2, [r3, #24]
 8043ac4:	4b28      	ldr	r3, [pc, #160]	@ (8043b68 <HAL_RCC_ClockConfig+0x358>)
 8043ac6:	69db      	ldr	r3, [r3, #28]
 8043ac8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8043acc:	429a      	cmp	r2, r3
 8043ace:	d208      	bcs.n	8043ae2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8043ad0:	4b25      	ldr	r3, [pc, #148]	@ (8043b68 <HAL_RCC_ClockConfig+0x358>)
 8043ad2:	69db      	ldr	r3, [r3, #28]
 8043ad4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8043ad8:	687b      	ldr	r3, [r7, #4]
 8043ada:	699b      	ldr	r3, [r3, #24]
 8043adc:	4922      	ldr	r1, [pc, #136]	@ (8043b68 <HAL_RCC_ClockConfig+0x358>)
 8043ade:	4313      	orrs	r3, r2
 8043ae0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8043ae2:	687b      	ldr	r3, [r7, #4]
 8043ae4:	681b      	ldr	r3, [r3, #0]
 8043ae6:	f003 0320 	and.w	r3, r3, #32
 8043aea:	2b00      	cmp	r3, #0
 8043aec:	d010      	beq.n	8043b10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8043aee:	687b      	ldr	r3, [r7, #4]
 8043af0:	69da      	ldr	r2, [r3, #28]
 8043af2:	4b1d      	ldr	r3, [pc, #116]	@ (8043b68 <HAL_RCC_ClockConfig+0x358>)
 8043af4:	6a1b      	ldr	r3, [r3, #32]
 8043af6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8043afa:	429a      	cmp	r2, r3
 8043afc:	d208      	bcs.n	8043b10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8043afe:	4b1a      	ldr	r3, [pc, #104]	@ (8043b68 <HAL_RCC_ClockConfig+0x358>)
 8043b00:	6a1b      	ldr	r3, [r3, #32]
 8043b02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8043b06:	687b      	ldr	r3, [r7, #4]
 8043b08:	69db      	ldr	r3, [r3, #28]
 8043b0a:	4917      	ldr	r1, [pc, #92]	@ (8043b68 <HAL_RCC_ClockConfig+0x358>)
 8043b0c:	4313      	orrs	r3, r2
 8043b0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8043b10:	f000 f89e 	bl	8043c50 <HAL_RCC_GetSysClockFreq>
 8043b14:	4602      	mov	r2, r0
 8043b16:	4b14      	ldr	r3, [pc, #80]	@ (8043b68 <HAL_RCC_ClockConfig+0x358>)
 8043b18:	699b      	ldr	r3, [r3, #24]
 8043b1a:	0a1b      	lsrs	r3, r3, #8
 8043b1c:	f003 030f 	and.w	r3, r3, #15
 8043b20:	4912      	ldr	r1, [pc, #72]	@ (8043b6c <HAL_RCC_ClockConfig+0x35c>)
 8043b22:	5ccb      	ldrb	r3, [r1, r3]
 8043b24:	f003 031f 	and.w	r3, r3, #31
 8043b28:	fa22 f303 	lsr.w	r3, r2, r3
 8043b2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8043b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8043b68 <HAL_RCC_ClockConfig+0x358>)
 8043b30:	699b      	ldr	r3, [r3, #24]
 8043b32:	f003 030f 	and.w	r3, r3, #15
 8043b36:	4a0d      	ldr	r2, [pc, #52]	@ (8043b6c <HAL_RCC_ClockConfig+0x35c>)
 8043b38:	5cd3      	ldrb	r3, [r2, r3]
 8043b3a:	f003 031f 	and.w	r3, r3, #31
 8043b3e:	693a      	ldr	r2, [r7, #16]
 8043b40:	fa22 f303 	lsr.w	r3, r2, r3
 8043b44:	4a0a      	ldr	r2, [pc, #40]	@ (8043b70 <HAL_RCC_ClockConfig+0x360>)
 8043b46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8043b48:	4a0a      	ldr	r2, [pc, #40]	@ (8043b74 <HAL_RCC_ClockConfig+0x364>)
 8043b4a:	693b      	ldr	r3, [r7, #16]
 8043b4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8043b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8043b78 <HAL_RCC_ClockConfig+0x368>)
 8043b50:	681b      	ldr	r3, [r3, #0]
 8043b52:	4618      	mov	r0, r3
 8043b54:	f7fd fa76 	bl	8041044 <HAL_InitTick>
 8043b58:	4603      	mov	r3, r0
 8043b5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8043b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8043b5e:	4618      	mov	r0, r3
 8043b60:	3718      	adds	r7, #24
 8043b62:	46bd      	mov	sp, r7
 8043b64:	bd80      	pop	{r7, pc}
 8043b66:	bf00      	nop
 8043b68:	58024400 	.word	0x58024400
 8043b6c:	0804b8c8 	.word	0x0804b8c8
 8043b70:	24000004 	.word	0x24000004
 8043b74:	24000000 	.word	0x24000000
 8043b78:	24000008 	.word	0x24000008

08043b7c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8043b7c:	b580      	push	{r7, lr}
 8043b7e:	b08c      	sub	sp, #48	@ 0x30
 8043b80:	af00      	add	r7, sp, #0
 8043b82:	60f8      	str	r0, [r7, #12]
 8043b84:	60b9      	str	r1, [r7, #8]
 8043b86:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8043b88:	68fb      	ldr	r3, [r7, #12]
 8043b8a:	2b00      	cmp	r3, #0
 8043b8c:	d12a      	bne.n	8043be4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8043b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8043c44 <HAL_RCC_MCOConfig+0xc8>)
 8043b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8043b94:	4a2b      	ldr	r2, [pc, #172]	@ (8043c44 <HAL_RCC_MCOConfig+0xc8>)
 8043b96:	f043 0301 	orr.w	r3, r3, #1
 8043b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8043b9e:	4b29      	ldr	r3, [pc, #164]	@ (8043c44 <HAL_RCC_MCOConfig+0xc8>)
 8043ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8043ba4:	f003 0301 	and.w	r3, r3, #1
 8043ba8:	61bb      	str	r3, [r7, #24]
 8043baa:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8043bac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8043bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8043bb2:	2302      	movs	r3, #2
 8043bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8043bb6:	2303      	movs	r3, #3
 8043bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043bba:	2300      	movs	r3, #0
 8043bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8043bbe:	2300      	movs	r3, #0
 8043bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8043bc2:	f107 031c 	add.w	r3, r7, #28
 8043bc6:	4619      	mov	r1, r3
 8043bc8:	481f      	ldr	r0, [pc, #124]	@ (8043c48 <HAL_RCC_MCOConfig+0xcc>)
 8043bca:	f7fd fcc3 	bl	8041554 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8043bce:	4b1d      	ldr	r3, [pc, #116]	@ (8043c44 <HAL_RCC_MCOConfig+0xc8>)
 8043bd0:	691b      	ldr	r3, [r3, #16]
 8043bd2:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8043bd6:	68b9      	ldr	r1, [r7, #8]
 8043bd8:	687b      	ldr	r3, [r7, #4]
 8043bda:	430b      	orrs	r3, r1
 8043bdc:	4919      	ldr	r1, [pc, #100]	@ (8043c44 <HAL_RCC_MCOConfig+0xc8>)
 8043bde:	4313      	orrs	r3, r2
 8043be0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8043be2:	e02a      	b.n	8043c3a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8043be4:	4b17      	ldr	r3, [pc, #92]	@ (8043c44 <HAL_RCC_MCOConfig+0xc8>)
 8043be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8043bea:	4a16      	ldr	r2, [pc, #88]	@ (8043c44 <HAL_RCC_MCOConfig+0xc8>)
 8043bec:	f043 0304 	orr.w	r3, r3, #4
 8043bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8043bf4:	4b13      	ldr	r3, [pc, #76]	@ (8043c44 <HAL_RCC_MCOConfig+0xc8>)
 8043bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8043bfa:	f003 0304 	and.w	r3, r3, #4
 8043bfe:	617b      	str	r3, [r7, #20]
 8043c00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8043c02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8043c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8043c08:	2302      	movs	r3, #2
 8043c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8043c0c:	2303      	movs	r3, #3
 8043c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043c10:	2300      	movs	r3, #0
 8043c12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8043c14:	2300      	movs	r3, #0
 8043c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8043c18:	f107 031c 	add.w	r3, r7, #28
 8043c1c:	4619      	mov	r1, r3
 8043c1e:	480b      	ldr	r0, [pc, #44]	@ (8043c4c <HAL_RCC_MCOConfig+0xd0>)
 8043c20:	f7fd fc98 	bl	8041554 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8043c24:	4b07      	ldr	r3, [pc, #28]	@ (8043c44 <HAL_RCC_MCOConfig+0xc8>)
 8043c26:	691b      	ldr	r3, [r3, #16]
 8043c28:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8043c2c:	687b      	ldr	r3, [r7, #4]
 8043c2e:	01d9      	lsls	r1, r3, #7
 8043c30:	68bb      	ldr	r3, [r7, #8]
 8043c32:	430b      	orrs	r3, r1
 8043c34:	4903      	ldr	r1, [pc, #12]	@ (8043c44 <HAL_RCC_MCOConfig+0xc8>)
 8043c36:	4313      	orrs	r3, r2
 8043c38:	610b      	str	r3, [r1, #16]
}
 8043c3a:	bf00      	nop
 8043c3c:	3730      	adds	r7, #48	@ 0x30
 8043c3e:	46bd      	mov	sp, r7
 8043c40:	bd80      	pop	{r7, pc}
 8043c42:	bf00      	nop
 8043c44:	58024400 	.word	0x58024400
 8043c48:	58020000 	.word	0x58020000
 8043c4c:	58020800 	.word	0x58020800

08043c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8043c50:	b480      	push	{r7}
 8043c52:	b089      	sub	sp, #36	@ 0x24
 8043c54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8043c56:	4bb3      	ldr	r3, [pc, #716]	@ (8043f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043c58:	691b      	ldr	r3, [r3, #16]
 8043c5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8043c5e:	2b18      	cmp	r3, #24
 8043c60:	f200 8155 	bhi.w	8043f0e <HAL_RCC_GetSysClockFreq+0x2be>
 8043c64:	a201      	add	r2, pc, #4	@ (adr r2, 8043c6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8043c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043c6a:	bf00      	nop
 8043c6c:	08043cd1 	.word	0x08043cd1
 8043c70:	08043f0f 	.word	0x08043f0f
 8043c74:	08043f0f 	.word	0x08043f0f
 8043c78:	08043f0f 	.word	0x08043f0f
 8043c7c:	08043f0f 	.word	0x08043f0f
 8043c80:	08043f0f 	.word	0x08043f0f
 8043c84:	08043f0f 	.word	0x08043f0f
 8043c88:	08043f0f 	.word	0x08043f0f
 8043c8c:	08043cf7 	.word	0x08043cf7
 8043c90:	08043f0f 	.word	0x08043f0f
 8043c94:	08043f0f 	.word	0x08043f0f
 8043c98:	08043f0f 	.word	0x08043f0f
 8043c9c:	08043f0f 	.word	0x08043f0f
 8043ca0:	08043f0f 	.word	0x08043f0f
 8043ca4:	08043f0f 	.word	0x08043f0f
 8043ca8:	08043f0f 	.word	0x08043f0f
 8043cac:	08043cfd 	.word	0x08043cfd
 8043cb0:	08043f0f 	.word	0x08043f0f
 8043cb4:	08043f0f 	.word	0x08043f0f
 8043cb8:	08043f0f 	.word	0x08043f0f
 8043cbc:	08043f0f 	.word	0x08043f0f
 8043cc0:	08043f0f 	.word	0x08043f0f
 8043cc4:	08043f0f 	.word	0x08043f0f
 8043cc8:	08043f0f 	.word	0x08043f0f
 8043ccc:	08043d03 	.word	0x08043d03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8043cd0:	4b94      	ldr	r3, [pc, #592]	@ (8043f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043cd2:	681b      	ldr	r3, [r3, #0]
 8043cd4:	f003 0320 	and.w	r3, r3, #32
 8043cd8:	2b00      	cmp	r3, #0
 8043cda:	d009      	beq.n	8043cf0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8043cdc:	4b91      	ldr	r3, [pc, #580]	@ (8043f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043cde:	681b      	ldr	r3, [r3, #0]
 8043ce0:	08db      	lsrs	r3, r3, #3
 8043ce2:	f003 0303 	and.w	r3, r3, #3
 8043ce6:	4a90      	ldr	r2, [pc, #576]	@ (8043f28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8043ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8043cec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8043cee:	e111      	b.n	8043f14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8043cf0:	4b8d      	ldr	r3, [pc, #564]	@ (8043f28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8043cf2:	61bb      	str	r3, [r7, #24]
      break;
 8043cf4:	e10e      	b.n	8043f14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8043cf6:	4b8d      	ldr	r3, [pc, #564]	@ (8043f2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8043cf8:	61bb      	str	r3, [r7, #24]
      break;
 8043cfa:	e10b      	b.n	8043f14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8043cfc:	4b8c      	ldr	r3, [pc, #560]	@ (8043f30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8043cfe:	61bb      	str	r3, [r7, #24]
      break;
 8043d00:	e108      	b.n	8043f14 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8043d02:	4b88      	ldr	r3, [pc, #544]	@ (8043f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043d06:	f003 0303 	and.w	r3, r3, #3
 8043d0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8043d0c:	4b85      	ldr	r3, [pc, #532]	@ (8043f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043d10:	091b      	lsrs	r3, r3, #4
 8043d12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8043d16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8043d18:	4b82      	ldr	r3, [pc, #520]	@ (8043f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043d1c:	f003 0301 	and.w	r3, r3, #1
 8043d20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8043d22:	4b80      	ldr	r3, [pc, #512]	@ (8043f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8043d26:	08db      	lsrs	r3, r3, #3
 8043d28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8043d2c:	68fa      	ldr	r2, [r7, #12]
 8043d2e:	fb02 f303 	mul.w	r3, r2, r3
 8043d32:	ee07 3a90 	vmov	s15, r3
 8043d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043d3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8043d3e:	693b      	ldr	r3, [r7, #16]
 8043d40:	2b00      	cmp	r3, #0
 8043d42:	f000 80e1 	beq.w	8043f08 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8043d46:	697b      	ldr	r3, [r7, #20]
 8043d48:	2b02      	cmp	r3, #2
 8043d4a:	f000 8083 	beq.w	8043e54 <HAL_RCC_GetSysClockFreq+0x204>
 8043d4e:	697b      	ldr	r3, [r7, #20]
 8043d50:	2b02      	cmp	r3, #2
 8043d52:	f200 80a1 	bhi.w	8043e98 <HAL_RCC_GetSysClockFreq+0x248>
 8043d56:	697b      	ldr	r3, [r7, #20]
 8043d58:	2b00      	cmp	r3, #0
 8043d5a:	d003      	beq.n	8043d64 <HAL_RCC_GetSysClockFreq+0x114>
 8043d5c:	697b      	ldr	r3, [r7, #20]
 8043d5e:	2b01      	cmp	r3, #1
 8043d60:	d056      	beq.n	8043e10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8043d62:	e099      	b.n	8043e98 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8043d64:	4b6f      	ldr	r3, [pc, #444]	@ (8043f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d66:	681b      	ldr	r3, [r3, #0]
 8043d68:	f003 0320 	and.w	r3, r3, #32
 8043d6c:	2b00      	cmp	r3, #0
 8043d6e:	d02d      	beq.n	8043dcc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8043d70:	4b6c      	ldr	r3, [pc, #432]	@ (8043f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d72:	681b      	ldr	r3, [r3, #0]
 8043d74:	08db      	lsrs	r3, r3, #3
 8043d76:	f003 0303 	and.w	r3, r3, #3
 8043d7a:	4a6b      	ldr	r2, [pc, #428]	@ (8043f28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8043d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8043d80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043d82:	687b      	ldr	r3, [r7, #4]
 8043d84:	ee07 3a90 	vmov	s15, r3
 8043d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043d8c:	693b      	ldr	r3, [r7, #16]
 8043d8e:	ee07 3a90 	vmov	s15, r3
 8043d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043d9a:	4b62      	ldr	r3, [pc, #392]	@ (8043f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043da2:	ee07 3a90 	vmov	s15, r3
 8043da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043daa:	ed97 6a02 	vldr	s12, [r7, #8]
 8043dae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8043f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043dc6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8043dca:	e087      	b.n	8043edc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043dcc:	693b      	ldr	r3, [r7, #16]
 8043dce:	ee07 3a90 	vmov	s15, r3
 8043dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043dd6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8043f38 <HAL_RCC_GetSysClockFreq+0x2e8>
 8043dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043dde:	4b51      	ldr	r3, [pc, #324]	@ (8043f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043de6:	ee07 3a90 	vmov	s15, r3
 8043dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043dee:	ed97 6a02 	vldr	s12, [r7, #8]
 8043df2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8043f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043e0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8043e0e:	e065      	b.n	8043edc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043e10:	693b      	ldr	r3, [r7, #16]
 8043e12:	ee07 3a90 	vmov	s15, r3
 8043e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043e1a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8043f3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8043e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043e22:	4b40      	ldr	r3, [pc, #256]	@ (8043f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043e2a:	ee07 3a90 	vmov	s15, r3
 8043e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043e32:	ed97 6a02 	vldr	s12, [r7, #8]
 8043e36:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8043f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043e4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8043e52:	e043      	b.n	8043edc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043e54:	693b      	ldr	r3, [r7, #16]
 8043e56:	ee07 3a90 	vmov	s15, r3
 8043e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043e5e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8043f40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8043e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043e66:	4b2f      	ldr	r3, [pc, #188]	@ (8043f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043e6e:	ee07 3a90 	vmov	s15, r3
 8043e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8043e7a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8043f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043e92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8043e96:	e021      	b.n	8043edc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043e98:	693b      	ldr	r3, [r7, #16]
 8043e9a:	ee07 3a90 	vmov	s15, r3
 8043e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043ea2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8043f3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8043ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8043f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043eb2:	ee07 3a90 	vmov	s15, r3
 8043eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8043ebe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8043f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043ed6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8043eda:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8043edc:	4b11      	ldr	r3, [pc, #68]	@ (8043f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043ee0:	0a5b      	lsrs	r3, r3, #9
 8043ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8043ee6:	3301      	adds	r3, #1
 8043ee8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8043eea:	683b      	ldr	r3, [r7, #0]
 8043eec:	ee07 3a90 	vmov	s15, r3
 8043ef0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8043ef4:	edd7 6a07 	vldr	s13, [r7, #28]
 8043ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8043efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8043f00:	ee17 3a90 	vmov	r3, s15
 8043f04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8043f06:	e005      	b.n	8043f14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8043f08:	2300      	movs	r3, #0
 8043f0a:	61bb      	str	r3, [r7, #24]
      break;
 8043f0c:	e002      	b.n	8043f14 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8043f0e:	4b07      	ldr	r3, [pc, #28]	@ (8043f2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8043f10:	61bb      	str	r3, [r7, #24]
      break;
 8043f12:	bf00      	nop
  }

  return sysclockfreq;
 8043f14:	69bb      	ldr	r3, [r7, #24]
}
 8043f16:	4618      	mov	r0, r3
 8043f18:	3724      	adds	r7, #36	@ 0x24
 8043f1a:	46bd      	mov	sp, r7
 8043f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f20:	4770      	bx	lr
 8043f22:	bf00      	nop
 8043f24:	58024400 	.word	0x58024400
 8043f28:	03d09000 	.word	0x03d09000
 8043f2c:	003d0900 	.word	0x003d0900
 8043f30:	017d7840 	.word	0x017d7840
 8043f34:	46000000 	.word	0x46000000
 8043f38:	4c742400 	.word	0x4c742400
 8043f3c:	4a742400 	.word	0x4a742400
 8043f40:	4bbebc20 	.word	0x4bbebc20

08043f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8043f44:	b580      	push	{r7, lr}
 8043f46:	b082      	sub	sp, #8
 8043f48:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8043f4a:	f7ff fe81 	bl	8043c50 <HAL_RCC_GetSysClockFreq>
 8043f4e:	4602      	mov	r2, r0
 8043f50:	4b10      	ldr	r3, [pc, #64]	@ (8043f94 <HAL_RCC_GetHCLKFreq+0x50>)
 8043f52:	699b      	ldr	r3, [r3, #24]
 8043f54:	0a1b      	lsrs	r3, r3, #8
 8043f56:	f003 030f 	and.w	r3, r3, #15
 8043f5a:	490f      	ldr	r1, [pc, #60]	@ (8043f98 <HAL_RCC_GetHCLKFreq+0x54>)
 8043f5c:	5ccb      	ldrb	r3, [r1, r3]
 8043f5e:	f003 031f 	and.w	r3, r3, #31
 8043f62:	fa22 f303 	lsr.w	r3, r2, r3
 8043f66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8043f68:	4b0a      	ldr	r3, [pc, #40]	@ (8043f94 <HAL_RCC_GetHCLKFreq+0x50>)
 8043f6a:	699b      	ldr	r3, [r3, #24]
 8043f6c:	f003 030f 	and.w	r3, r3, #15
 8043f70:	4a09      	ldr	r2, [pc, #36]	@ (8043f98 <HAL_RCC_GetHCLKFreq+0x54>)
 8043f72:	5cd3      	ldrb	r3, [r2, r3]
 8043f74:	f003 031f 	and.w	r3, r3, #31
 8043f78:	687a      	ldr	r2, [r7, #4]
 8043f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8043f7e:	4a07      	ldr	r2, [pc, #28]	@ (8043f9c <HAL_RCC_GetHCLKFreq+0x58>)
 8043f80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8043f82:	4a07      	ldr	r2, [pc, #28]	@ (8043fa0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8043f84:	687b      	ldr	r3, [r7, #4]
 8043f86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8043f88:	4b04      	ldr	r3, [pc, #16]	@ (8043f9c <HAL_RCC_GetHCLKFreq+0x58>)
 8043f8a:	681b      	ldr	r3, [r3, #0]
}
 8043f8c:	4618      	mov	r0, r3
 8043f8e:	3708      	adds	r7, #8
 8043f90:	46bd      	mov	sp, r7
 8043f92:	bd80      	pop	{r7, pc}
 8043f94:	58024400 	.word	0x58024400
 8043f98:	0804b8c8 	.word	0x0804b8c8
 8043f9c:	24000004 	.word	0x24000004
 8043fa0:	24000000 	.word	0x24000000

08043fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8043fa4:	b580      	push	{r7, lr}
 8043fa6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8043fa8:	f7ff ffcc 	bl	8043f44 <HAL_RCC_GetHCLKFreq>
 8043fac:	4602      	mov	r2, r0
 8043fae:	4b06      	ldr	r3, [pc, #24]	@ (8043fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8043fb0:	69db      	ldr	r3, [r3, #28]
 8043fb2:	091b      	lsrs	r3, r3, #4
 8043fb4:	f003 0307 	and.w	r3, r3, #7
 8043fb8:	4904      	ldr	r1, [pc, #16]	@ (8043fcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8043fba:	5ccb      	ldrb	r3, [r1, r3]
 8043fbc:	f003 031f 	and.w	r3, r3, #31
 8043fc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8043fc4:	4618      	mov	r0, r3
 8043fc6:	bd80      	pop	{r7, pc}
 8043fc8:	58024400 	.word	0x58024400
 8043fcc:	0804b8c8 	.word	0x0804b8c8

08043fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8043fd0:	b580      	push	{r7, lr}
 8043fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8043fd4:	f7ff ffb6 	bl	8043f44 <HAL_RCC_GetHCLKFreq>
 8043fd8:	4602      	mov	r2, r0
 8043fda:	4b06      	ldr	r3, [pc, #24]	@ (8043ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8043fdc:	69db      	ldr	r3, [r3, #28]
 8043fde:	0a1b      	lsrs	r3, r3, #8
 8043fe0:	f003 0307 	and.w	r3, r3, #7
 8043fe4:	4904      	ldr	r1, [pc, #16]	@ (8043ff8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8043fe6:	5ccb      	ldrb	r3, [r1, r3]
 8043fe8:	f003 031f 	and.w	r3, r3, #31
 8043fec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8043ff0:	4618      	mov	r0, r3
 8043ff2:	bd80      	pop	{r7, pc}
 8043ff4:	58024400 	.word	0x58024400
 8043ff8:	0804b8c8 	.word	0x0804b8c8

08043ffc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8043ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8044000:	b0cc      	sub	sp, #304	@ 0x130
 8044002:	af00      	add	r7, sp, #0
 8044004:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8044008:	2300      	movs	r3, #0
 804400a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 804400e:	2300      	movs	r3, #0
 8044010:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8044014:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044018:	e9d3 2300 	ldrd	r2, r3, [r3]
 804401c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8044020:	2500      	movs	r5, #0
 8044022:	ea54 0305 	orrs.w	r3, r4, r5
 8044026:	d049      	beq.n	80440bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8044028:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804402c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 804402e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8044032:	d02f      	beq.n	8044094 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8044034:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8044038:	d828      	bhi.n	804408c <HAL_RCCEx_PeriphCLKConfig+0x90>
 804403a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 804403e:	d01a      	beq.n	8044076 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8044040:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8044044:	d822      	bhi.n	804408c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8044046:	2b00      	cmp	r3, #0
 8044048:	d003      	beq.n	8044052 <HAL_RCCEx_PeriphCLKConfig+0x56>
 804404a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 804404e:	d007      	beq.n	8044060 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8044050:	e01c      	b.n	804408c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8044052:	4bb8      	ldr	r3, [pc, #736]	@ (8044334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044056:	4ab7      	ldr	r2, [pc, #732]	@ (8044334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 804405c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 804405e:	e01a      	b.n	8044096 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8044060:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044064:	3308      	adds	r3, #8
 8044066:	2102      	movs	r1, #2
 8044068:	4618      	mov	r0, r3
 804406a:	f001 fccf 	bl	8045a0c <RCCEx_PLL2_Config>
 804406e:	4603      	mov	r3, r0
 8044070:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8044074:	e00f      	b.n	8044096 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044076:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804407a:	3328      	adds	r3, #40	@ 0x28
 804407c:	2102      	movs	r1, #2
 804407e:	4618      	mov	r0, r3
 8044080:	f001 fd76 	bl	8045b70 <RCCEx_PLL3_Config>
 8044084:	4603      	mov	r3, r0
 8044086:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 804408a:	e004      	b.n	8044096 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804408c:	2301      	movs	r3, #1
 804408e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044092:	e000      	b.n	8044096 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8044094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044096:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804409a:	2b00      	cmp	r3, #0
 804409c:	d10a      	bne.n	80440b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 804409e:	4ba5      	ldr	r3, [pc, #660]	@ (8044334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80440a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80440a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80440a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80440aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80440ac:	4aa1      	ldr	r2, [pc, #644]	@ (8044334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80440ae:	430b      	orrs	r3, r1
 80440b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80440b2:	e003      	b.n	80440bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80440b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80440b8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80440bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80440c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80440c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80440c8:	f04f 0900 	mov.w	r9, #0
 80440cc:	ea58 0309 	orrs.w	r3, r8, r9
 80440d0:	d047      	beq.n	8044162 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80440d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80440d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80440d8:	2b04      	cmp	r3, #4
 80440da:	d82a      	bhi.n	8044132 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80440dc:	a201      	add	r2, pc, #4	@ (adr r2, 80440e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80440de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80440e2:	bf00      	nop
 80440e4:	080440f9 	.word	0x080440f9
 80440e8:	08044107 	.word	0x08044107
 80440ec:	0804411d 	.word	0x0804411d
 80440f0:	0804413b 	.word	0x0804413b
 80440f4:	0804413b 	.word	0x0804413b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80440f8:	4b8e      	ldr	r3, [pc, #568]	@ (8044334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80440fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80440fc:	4a8d      	ldr	r2, [pc, #564]	@ (8044334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80440fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044102:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8044104:	e01a      	b.n	804413c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044106:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804410a:	3308      	adds	r3, #8
 804410c:	2100      	movs	r1, #0
 804410e:	4618      	mov	r0, r3
 8044110:	f001 fc7c 	bl	8045a0c <RCCEx_PLL2_Config>
 8044114:	4603      	mov	r3, r0
 8044116:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 804411a:	e00f      	b.n	804413c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 804411c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044120:	3328      	adds	r3, #40	@ 0x28
 8044122:	2100      	movs	r1, #0
 8044124:	4618      	mov	r0, r3
 8044126:	f001 fd23 	bl	8045b70 <RCCEx_PLL3_Config>
 804412a:	4603      	mov	r3, r0
 804412c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8044130:	e004      	b.n	804413c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044132:	2301      	movs	r3, #1
 8044134:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044138:	e000      	b.n	804413c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 804413a:	bf00      	nop
    }

    if (ret == HAL_OK)
 804413c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044140:	2b00      	cmp	r3, #0
 8044142:	d10a      	bne.n	804415a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8044144:	4b7b      	ldr	r3, [pc, #492]	@ (8044334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8044148:	f023 0107 	bic.w	r1, r3, #7
 804414c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8044152:	4a78      	ldr	r2, [pc, #480]	@ (8044334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044154:	430b      	orrs	r3, r1
 8044156:	6513      	str	r3, [r2, #80]	@ 0x50
 8044158:	e003      	b.n	8044162 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804415a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804415e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8044162:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044166:	e9d3 2300 	ldrd	r2, r3, [r3]
 804416a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 804416e:	f04f 0b00 	mov.w	fp, #0
 8044172:	ea5a 030b 	orrs.w	r3, sl, fp
 8044176:	d04c      	beq.n	8044212 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8044178:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804417c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 804417e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8044182:	d030      	beq.n	80441e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8044184:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8044188:	d829      	bhi.n	80441de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 804418a:	2bc0      	cmp	r3, #192	@ 0xc0
 804418c:	d02d      	beq.n	80441ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 804418e:	2bc0      	cmp	r3, #192	@ 0xc0
 8044190:	d825      	bhi.n	80441de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8044192:	2b80      	cmp	r3, #128	@ 0x80
 8044194:	d018      	beq.n	80441c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8044196:	2b80      	cmp	r3, #128	@ 0x80
 8044198:	d821      	bhi.n	80441de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 804419a:	2b00      	cmp	r3, #0
 804419c:	d002      	beq.n	80441a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 804419e:	2b40      	cmp	r3, #64	@ 0x40
 80441a0:	d007      	beq.n	80441b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80441a2:	e01c      	b.n	80441de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80441a4:	4b63      	ldr	r3, [pc, #396]	@ (8044334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80441a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80441a8:	4a62      	ldr	r2, [pc, #392]	@ (8044334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80441aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80441ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80441b0:	e01c      	b.n	80441ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80441b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80441b6:	3308      	adds	r3, #8
 80441b8:	2100      	movs	r1, #0
 80441ba:	4618      	mov	r0, r3
 80441bc:	f001 fc26 	bl	8045a0c <RCCEx_PLL2_Config>
 80441c0:	4603      	mov	r3, r0
 80441c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80441c6:	e011      	b.n	80441ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80441c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80441cc:	3328      	adds	r3, #40	@ 0x28
 80441ce:	2100      	movs	r1, #0
 80441d0:	4618      	mov	r0, r3
 80441d2:	f001 fccd 	bl	8045b70 <RCCEx_PLL3_Config>
 80441d6:	4603      	mov	r3, r0
 80441d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80441dc:	e006      	b.n	80441ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80441de:	2301      	movs	r3, #1
 80441e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80441e4:	e002      	b.n	80441ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80441e6:	bf00      	nop
 80441e8:	e000      	b.n	80441ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80441ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80441ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80441f0:	2b00      	cmp	r3, #0
 80441f2:	d10a      	bne.n	804420a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80441f4:	4b4f      	ldr	r3, [pc, #316]	@ (8044334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80441f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80441f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80441fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8044202:	4a4c      	ldr	r2, [pc, #304]	@ (8044334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044204:	430b      	orrs	r3, r1
 8044206:	6513      	str	r3, [r2, #80]	@ 0x50
 8044208:	e003      	b.n	8044212 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804420a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804420e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8044212:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044216:	e9d3 2300 	ldrd	r2, r3, [r3]
 804421a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 804421e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8044222:	2300      	movs	r3, #0
 8044224:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8044228:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 804422c:	460b      	mov	r3, r1
 804422e:	4313      	orrs	r3, r2
 8044230:	d053      	beq.n	80442da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8044232:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044236:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 804423a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 804423e:	d035      	beq.n	80442ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8044240:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8044244:	d82e      	bhi.n	80442a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8044246:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 804424a:	d031      	beq.n	80442b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 804424c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8044250:	d828      	bhi.n	80442a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8044252:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8044256:	d01a      	beq.n	804428e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8044258:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 804425c:	d822      	bhi.n	80442a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 804425e:	2b00      	cmp	r3, #0
 8044260:	d003      	beq.n	804426a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8044262:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8044266:	d007      	beq.n	8044278 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8044268:	e01c      	b.n	80442a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804426a:	4b32      	ldr	r3, [pc, #200]	@ (8044334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804426e:	4a31      	ldr	r2, [pc, #196]	@ (8044334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044274:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8044276:	e01c      	b.n	80442b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044278:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804427c:	3308      	adds	r3, #8
 804427e:	2100      	movs	r1, #0
 8044280:	4618      	mov	r0, r3
 8044282:	f001 fbc3 	bl	8045a0c <RCCEx_PLL2_Config>
 8044286:	4603      	mov	r3, r0
 8044288:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 804428c:	e011      	b.n	80442b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 804428e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044292:	3328      	adds	r3, #40	@ 0x28
 8044294:	2100      	movs	r1, #0
 8044296:	4618      	mov	r0, r3
 8044298:	f001 fc6a 	bl	8045b70 <RCCEx_PLL3_Config>
 804429c:	4603      	mov	r3, r0
 804429e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80442a2:	e006      	b.n	80442b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80442a4:	2301      	movs	r3, #1
 80442a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80442aa:	e002      	b.n	80442b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80442ac:	bf00      	nop
 80442ae:	e000      	b.n	80442b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80442b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80442b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80442b6:	2b00      	cmp	r3, #0
 80442b8:	d10b      	bne.n	80442d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80442ba:	4b1e      	ldr	r3, [pc, #120]	@ (8044334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80442bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80442be:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80442c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80442c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80442ca:	4a1a      	ldr	r2, [pc, #104]	@ (8044334 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80442cc:	430b      	orrs	r3, r1
 80442ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80442d0:	e003      	b.n	80442da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80442d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80442d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80442da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80442de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80442e2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80442e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80442ea:	2300      	movs	r3, #0
 80442ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80442f0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80442f4:	460b      	mov	r3, r1
 80442f6:	4313      	orrs	r3, r2
 80442f8:	d056      	beq.n	80443a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80442fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80442fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8044302:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8044306:	d038      	beq.n	804437a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8044308:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 804430c:	d831      	bhi.n	8044372 <HAL_RCCEx_PeriphCLKConfig+0x376>
 804430e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8044312:	d034      	beq.n	804437e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8044314:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8044318:	d82b      	bhi.n	8044372 <HAL_RCCEx_PeriphCLKConfig+0x376>
 804431a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 804431e:	d01d      	beq.n	804435c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8044320:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8044324:	d825      	bhi.n	8044372 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8044326:	2b00      	cmp	r3, #0
 8044328:	d006      	beq.n	8044338 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 804432a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 804432e:	d00a      	beq.n	8044346 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8044330:	e01f      	b.n	8044372 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8044332:	bf00      	nop
 8044334:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8044338:	4ba2      	ldr	r3, [pc, #648]	@ (80445c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804433a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804433c:	4aa1      	ldr	r2, [pc, #644]	@ (80445c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804433e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8044344:	e01c      	b.n	8044380 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044346:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804434a:	3308      	adds	r3, #8
 804434c:	2100      	movs	r1, #0
 804434e:	4618      	mov	r0, r3
 8044350:	f001 fb5c 	bl	8045a0c <RCCEx_PLL2_Config>
 8044354:	4603      	mov	r3, r0
 8044356:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 804435a:	e011      	b.n	8044380 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 804435c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044360:	3328      	adds	r3, #40	@ 0x28
 8044362:	2100      	movs	r1, #0
 8044364:	4618      	mov	r0, r3
 8044366:	f001 fc03 	bl	8045b70 <RCCEx_PLL3_Config>
 804436a:	4603      	mov	r3, r0
 804436c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8044370:	e006      	b.n	8044380 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8044372:	2301      	movs	r3, #1
 8044374:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044378:	e002      	b.n	8044380 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 804437a:	bf00      	nop
 804437c:	e000      	b.n	8044380 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 804437e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044380:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044384:	2b00      	cmp	r3, #0
 8044386:	d10b      	bne.n	80443a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8044388:	4b8e      	ldr	r3, [pc, #568]	@ (80445c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804438a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 804438c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8044390:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044394:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8044398:	4a8a      	ldr	r2, [pc, #552]	@ (80445c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804439a:	430b      	orrs	r3, r1
 804439c:	6593      	str	r3, [r2, #88]	@ 0x58
 804439e:	e003      	b.n	80443a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80443a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80443a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80443a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80443ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80443b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80443b4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80443b8:	2300      	movs	r3, #0
 80443ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80443be:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80443c2:	460b      	mov	r3, r1
 80443c4:	4313      	orrs	r3, r2
 80443c6:	d03a      	beq.n	804443e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80443c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80443cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80443ce:	2b30      	cmp	r3, #48	@ 0x30
 80443d0:	d01f      	beq.n	8044412 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80443d2:	2b30      	cmp	r3, #48	@ 0x30
 80443d4:	d819      	bhi.n	804440a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80443d6:	2b20      	cmp	r3, #32
 80443d8:	d00c      	beq.n	80443f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80443da:	2b20      	cmp	r3, #32
 80443dc:	d815      	bhi.n	804440a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80443de:	2b00      	cmp	r3, #0
 80443e0:	d019      	beq.n	8044416 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80443e2:	2b10      	cmp	r3, #16
 80443e4:	d111      	bne.n	804440a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80443e6:	4b77      	ldr	r3, [pc, #476]	@ (80445c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80443e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80443ea:	4a76      	ldr	r2, [pc, #472]	@ (80445c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80443ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80443f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80443f2:	e011      	b.n	8044418 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80443f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80443f8:	3308      	adds	r3, #8
 80443fa:	2102      	movs	r1, #2
 80443fc:	4618      	mov	r0, r3
 80443fe:	f001 fb05 	bl	8045a0c <RCCEx_PLL2_Config>
 8044402:	4603      	mov	r3, r0
 8044404:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8044408:	e006      	b.n	8044418 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 804440a:	2301      	movs	r3, #1
 804440c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044410:	e002      	b.n	8044418 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8044412:	bf00      	nop
 8044414:	e000      	b.n	8044418 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8044416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044418:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804441c:	2b00      	cmp	r3, #0
 804441e:	d10a      	bne.n	8044436 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8044420:	4b68      	ldr	r3, [pc, #416]	@ (80445c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8044424:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8044428:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804442c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 804442e:	4a65      	ldr	r2, [pc, #404]	@ (80445c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044430:	430b      	orrs	r3, r1
 8044432:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8044434:	e003      	b.n	804443e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044436:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804443a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 804443e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044446:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 804444a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 804444e:	2300      	movs	r3, #0
 8044450:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8044454:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8044458:	460b      	mov	r3, r1
 804445a:	4313      	orrs	r3, r2
 804445c:	d051      	beq.n	8044502 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 804445e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8044464:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8044468:	d035      	beq.n	80444d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 804446a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 804446e:	d82e      	bhi.n	80444ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8044470:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8044474:	d031      	beq.n	80444da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8044476:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 804447a:	d828      	bhi.n	80444ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 804447c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8044480:	d01a      	beq.n	80444b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8044482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8044486:	d822      	bhi.n	80444ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8044488:	2b00      	cmp	r3, #0
 804448a:	d003      	beq.n	8044494 <HAL_RCCEx_PeriphCLKConfig+0x498>
 804448c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8044490:	d007      	beq.n	80444a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8044492:	e01c      	b.n	80444ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8044494:	4b4b      	ldr	r3, [pc, #300]	@ (80445c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044498:	4a4a      	ldr	r2, [pc, #296]	@ (80445c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804449a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 804449e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80444a0:	e01c      	b.n	80444dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80444a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80444a6:	3308      	adds	r3, #8
 80444a8:	2100      	movs	r1, #0
 80444aa:	4618      	mov	r0, r3
 80444ac:	f001 faae 	bl	8045a0c <RCCEx_PLL2_Config>
 80444b0:	4603      	mov	r3, r0
 80444b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80444b6:	e011      	b.n	80444dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80444b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80444bc:	3328      	adds	r3, #40	@ 0x28
 80444be:	2100      	movs	r1, #0
 80444c0:	4618      	mov	r0, r3
 80444c2:	f001 fb55 	bl	8045b70 <RCCEx_PLL3_Config>
 80444c6:	4603      	mov	r3, r0
 80444c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80444cc:	e006      	b.n	80444dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80444ce:	2301      	movs	r3, #1
 80444d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80444d4:	e002      	b.n	80444dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80444d6:	bf00      	nop
 80444d8:	e000      	b.n	80444dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80444da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80444dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80444e0:	2b00      	cmp	r3, #0
 80444e2:	d10a      	bne.n	80444fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80444e4:	4b37      	ldr	r3, [pc, #220]	@ (80445c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80444e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80444e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80444ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80444f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80444f2:	4a34      	ldr	r2, [pc, #208]	@ (80445c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80444f4:	430b      	orrs	r3, r1
 80444f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80444f8:	e003      	b.n	8044502 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80444fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80444fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8044502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044506:	e9d3 2300 	ldrd	r2, r3, [r3]
 804450a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 804450e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8044512:	2300      	movs	r3, #0
 8044514:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8044518:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 804451c:	460b      	mov	r3, r1
 804451e:	4313      	orrs	r3, r2
 8044520:	d056      	beq.n	80445d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8044522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044526:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8044528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 804452c:	d033      	beq.n	8044596 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 804452e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8044532:	d82c      	bhi.n	804458e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8044534:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8044538:	d02f      	beq.n	804459a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 804453a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 804453e:	d826      	bhi.n	804458e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8044540:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8044544:	d02b      	beq.n	804459e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8044546:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 804454a:	d820      	bhi.n	804458e <HAL_RCCEx_PeriphCLKConfig+0x592>
 804454c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8044550:	d012      	beq.n	8044578 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8044552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8044556:	d81a      	bhi.n	804458e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8044558:	2b00      	cmp	r3, #0
 804455a:	d022      	beq.n	80445a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 804455c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8044560:	d115      	bne.n	804458e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044562:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044566:	3308      	adds	r3, #8
 8044568:	2101      	movs	r1, #1
 804456a:	4618      	mov	r0, r3
 804456c:	f001 fa4e 	bl	8045a0c <RCCEx_PLL2_Config>
 8044570:	4603      	mov	r3, r0
 8044572:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8044576:	e015      	b.n	80445a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8044578:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804457c:	3328      	adds	r3, #40	@ 0x28
 804457e:	2101      	movs	r1, #1
 8044580:	4618      	mov	r0, r3
 8044582:	f001 faf5 	bl	8045b70 <RCCEx_PLL3_Config>
 8044586:	4603      	mov	r3, r0
 8044588:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 804458c:	e00a      	b.n	80445a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804458e:	2301      	movs	r3, #1
 8044590:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044594:	e006      	b.n	80445a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8044596:	bf00      	nop
 8044598:	e004      	b.n	80445a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 804459a:	bf00      	nop
 804459c:	e002      	b.n	80445a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 804459e:	bf00      	nop
 80445a0:	e000      	b.n	80445a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80445a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80445a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80445a8:	2b00      	cmp	r3, #0
 80445aa:	d10d      	bne.n	80445c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80445ac:	4b05      	ldr	r3, [pc, #20]	@ (80445c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80445ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80445b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80445b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80445b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80445ba:	4a02      	ldr	r2, [pc, #8]	@ (80445c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80445bc:	430b      	orrs	r3, r1
 80445be:	6513      	str	r3, [r2, #80]	@ 0x50
 80445c0:	e006      	b.n	80445d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80445c2:	bf00      	nop
 80445c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80445c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80445cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80445d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80445d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80445d8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80445dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80445e0:	2300      	movs	r3, #0
 80445e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80445e6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80445ea:	460b      	mov	r3, r1
 80445ec:	4313      	orrs	r3, r2
 80445ee:	d055      	beq.n	804469c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80445f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80445f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80445f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80445fc:	d033      	beq.n	8044666 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80445fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8044602:	d82c      	bhi.n	804465e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8044604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8044608:	d02f      	beq.n	804466a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 804460a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 804460e:	d826      	bhi.n	804465e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8044610:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8044614:	d02b      	beq.n	804466e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8044616:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 804461a:	d820      	bhi.n	804465e <HAL_RCCEx_PeriphCLKConfig+0x662>
 804461c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044620:	d012      	beq.n	8044648 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8044622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044626:	d81a      	bhi.n	804465e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8044628:	2b00      	cmp	r3, #0
 804462a:	d022      	beq.n	8044672 <HAL_RCCEx_PeriphCLKConfig+0x676>
 804462c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8044630:	d115      	bne.n	804465e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044632:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044636:	3308      	adds	r3, #8
 8044638:	2101      	movs	r1, #1
 804463a:	4618      	mov	r0, r3
 804463c:	f001 f9e6 	bl	8045a0c <RCCEx_PLL2_Config>
 8044640:	4603      	mov	r3, r0
 8044642:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8044646:	e015      	b.n	8044674 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8044648:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804464c:	3328      	adds	r3, #40	@ 0x28
 804464e:	2101      	movs	r1, #1
 8044650:	4618      	mov	r0, r3
 8044652:	f001 fa8d 	bl	8045b70 <RCCEx_PLL3_Config>
 8044656:	4603      	mov	r3, r0
 8044658:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 804465c:	e00a      	b.n	8044674 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 804465e:	2301      	movs	r3, #1
 8044660:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044664:	e006      	b.n	8044674 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8044666:	bf00      	nop
 8044668:	e004      	b.n	8044674 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 804466a:	bf00      	nop
 804466c:	e002      	b.n	8044674 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 804466e:	bf00      	nop
 8044670:	e000      	b.n	8044674 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8044672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044674:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044678:	2b00      	cmp	r3, #0
 804467a:	d10b      	bne.n	8044694 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 804467c:	4bb6      	ldr	r3, [pc, #728]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804467e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044680:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8044684:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044688:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 804468c:	4ab2      	ldr	r2, [pc, #712]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804468e:	430b      	orrs	r3, r1
 8044690:	6593      	str	r3, [r2, #88]	@ 0x58
 8044692:	e003      	b.n	804469c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044694:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044698:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 804469c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80446a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80446a4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80446a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80446ac:	2300      	movs	r3, #0
 80446ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80446b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80446b6:	460b      	mov	r3, r1
 80446b8:	4313      	orrs	r3, r2
 80446ba:	d02a      	beq.n	8044712 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80446bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80446c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80446c2:	2b00      	cmp	r3, #0
 80446c4:	d011      	beq.n	80446ea <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80446c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80446ca:	d10a      	bne.n	80446e2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80446cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80446d0:	3308      	adds	r3, #8
 80446d2:	2101      	movs	r1, #1
 80446d4:	4618      	mov	r0, r3
 80446d6:	f001 f999 	bl	8045a0c <RCCEx_PLL2_Config>
 80446da:	4603      	mov	r3, r0
 80446dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80446e0:	e004      	b.n	80446ec <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80446e2:	2301      	movs	r3, #1
 80446e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80446e8:	e000      	b.n	80446ec <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80446ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80446ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80446f0:	2b00      	cmp	r3, #0
 80446f2:	d10a      	bne.n	804470a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80446f4:	4b98      	ldr	r3, [pc, #608]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80446f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80446f8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80446fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8044702:	4a95      	ldr	r2, [pc, #596]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044704:	430b      	orrs	r3, r1
 8044706:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8044708:	e003      	b.n	8044712 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804470a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804470e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8044712:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044716:	e9d3 2300 	ldrd	r2, r3, [r3]
 804471a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 804471e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8044722:	2300      	movs	r3, #0
 8044724:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8044728:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 804472c:	460b      	mov	r3, r1
 804472e:	4313      	orrs	r3, r2
 8044730:	d037      	beq.n	80447a2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8044732:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8044738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 804473c:	d00e      	beq.n	804475c <HAL_RCCEx_PeriphCLKConfig+0x760>
 804473e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044742:	d816      	bhi.n	8044772 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8044744:	2b00      	cmp	r3, #0
 8044746:	d018      	beq.n	804477a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8044748:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 804474c:	d111      	bne.n	8044772 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804474e:	4b82      	ldr	r3, [pc, #520]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044752:	4a81      	ldr	r2, [pc, #516]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044758:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 804475a:	e00f      	b.n	804477c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 804475c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044760:	3308      	adds	r3, #8
 8044762:	2101      	movs	r1, #1
 8044764:	4618      	mov	r0, r3
 8044766:	f001 f951 	bl	8045a0c <RCCEx_PLL2_Config>
 804476a:	4603      	mov	r3, r0
 804476c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8044770:	e004      	b.n	804477c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044772:	2301      	movs	r3, #1
 8044774:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044778:	e000      	b.n	804477c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 804477a:	bf00      	nop
    }

    if (ret == HAL_OK)
 804477c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044780:	2b00      	cmp	r3, #0
 8044782:	d10a      	bne.n	804479a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8044784:	4b74      	ldr	r3, [pc, #464]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8044788:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 804478c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8044792:	4a71      	ldr	r2, [pc, #452]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044794:	430b      	orrs	r3, r1
 8044796:	6513      	str	r3, [r2, #80]	@ 0x50
 8044798:	e003      	b.n	80447a2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804479a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804479e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80447a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80447a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80447aa:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80447ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80447b2:	2300      	movs	r3, #0
 80447b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80447b8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80447bc:	460b      	mov	r3, r1
 80447be:	4313      	orrs	r3, r2
 80447c0:	d03a      	beq.n	8044838 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80447c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80447c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80447c8:	2b03      	cmp	r3, #3
 80447ca:	d81d      	bhi.n	8044808 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80447cc:	a201      	add	r2, pc, #4	@ (adr r2, 80447d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80447ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80447d2:	bf00      	nop
 80447d4:	08044811 	.word	0x08044811
 80447d8:	080447e5 	.word	0x080447e5
 80447dc:	080447f3 	.word	0x080447f3
 80447e0:	08044811 	.word	0x08044811
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80447e4:	4b5c      	ldr	r3, [pc, #368]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80447e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80447e8:	4a5b      	ldr	r2, [pc, #364]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80447ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80447ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80447f0:	e00f      	b.n	8044812 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80447f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80447f6:	3308      	adds	r3, #8
 80447f8:	2102      	movs	r1, #2
 80447fa:	4618      	mov	r0, r3
 80447fc:	f001 f906 	bl	8045a0c <RCCEx_PLL2_Config>
 8044800:	4603      	mov	r3, r0
 8044802:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8044806:	e004      	b.n	8044812 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8044808:	2301      	movs	r3, #1
 804480a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 804480e:	e000      	b.n	8044812 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8044810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044812:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044816:	2b00      	cmp	r3, #0
 8044818:	d10a      	bne.n	8044830 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 804481a:	4b4f      	ldr	r3, [pc, #316]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804481c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 804481e:	f023 0103 	bic.w	r1, r3, #3
 8044822:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8044828:	4a4b      	ldr	r2, [pc, #300]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804482a:	430b      	orrs	r3, r1
 804482c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 804482e:	e003      	b.n	8044838 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044830:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044834:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8044838:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044840:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8044844:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8044848:	2300      	movs	r3, #0
 804484a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 804484e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8044852:	460b      	mov	r3, r1
 8044854:	4313      	orrs	r3, r2
 8044856:	f000 80a0 	beq.w	804499a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 804485a:	4b40      	ldr	r3, [pc, #256]	@ (804495c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 804485c:	681b      	ldr	r3, [r3, #0]
 804485e:	4a3f      	ldr	r2, [pc, #252]	@ (804495c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8044860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8044864:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8044866:	f7fc fc37 	bl	80410d8 <HAL_GetTick>
 804486a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 804486e:	e00b      	b.n	8044888 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8044870:	f7fc fc32 	bl	80410d8 <HAL_GetTick>
 8044874:	4602      	mov	r2, r0
 8044876:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 804487a:	1ad3      	subs	r3, r2, r3
 804487c:	2b64      	cmp	r3, #100	@ 0x64
 804487e:	d903      	bls.n	8044888 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8044880:	2303      	movs	r3, #3
 8044882:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044886:	e005      	b.n	8044894 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8044888:	4b34      	ldr	r3, [pc, #208]	@ (804495c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 804488a:	681b      	ldr	r3, [r3, #0]
 804488c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8044890:	2b00      	cmp	r3, #0
 8044892:	d0ed      	beq.n	8044870 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8044894:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044898:	2b00      	cmp	r3, #0
 804489a:	d17a      	bne.n	8044992 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 804489c:	4b2e      	ldr	r3, [pc, #184]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804489e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80448a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80448a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80448a8:	4053      	eors	r3, r2
 80448aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80448ae:	2b00      	cmp	r3, #0
 80448b0:	d015      	beq.n	80448de <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80448b2:	4b29      	ldr	r3, [pc, #164]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80448b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80448ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80448be:	4b26      	ldr	r3, [pc, #152]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80448c2:	4a25      	ldr	r2, [pc, #148]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80448c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80448ca:	4b23      	ldr	r3, [pc, #140]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80448ce:	4a22      	ldr	r2, [pc, #136]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80448d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80448d6:	4a20      	ldr	r2, [pc, #128]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80448dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80448de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80448e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80448e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80448ea:	d118      	bne.n	804491e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80448ec:	f7fc fbf4 	bl	80410d8 <HAL_GetTick>
 80448f0:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80448f4:	e00d      	b.n	8044912 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80448f6:	f7fc fbef 	bl	80410d8 <HAL_GetTick>
 80448fa:	4602      	mov	r2, r0
 80448fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8044900:	1ad2      	subs	r2, r2, r3
 8044902:	f241 3388 	movw	r3, #5000	@ 0x1388
 8044906:	429a      	cmp	r2, r3
 8044908:	d903      	bls.n	8044912 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 804490a:	2303      	movs	r3, #3
 804490c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8044910:	e005      	b.n	804491e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8044912:	4b11      	ldr	r3, [pc, #68]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8044916:	f003 0302 	and.w	r3, r3, #2
 804491a:	2b00      	cmp	r3, #0
 804491c:	d0eb      	beq.n	80448f6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 804491e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044922:	2b00      	cmp	r3, #0
 8044924:	d130      	bne.n	8044988 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8044926:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804492a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 804492e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8044932:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8044936:	d115      	bne.n	8044964 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8044938:	4b07      	ldr	r3, [pc, #28]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804493a:	691b      	ldr	r3, [r3, #16]
 804493c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8044940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044944:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8044948:	091a      	lsrs	r2, r3, #4
 804494a:	4b05      	ldr	r3, [pc, #20]	@ (8044960 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 804494c:	4013      	ands	r3, r2
 804494e:	4a02      	ldr	r2, [pc, #8]	@ (8044958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044950:	430b      	orrs	r3, r1
 8044952:	6113      	str	r3, [r2, #16]
 8044954:	e00c      	b.n	8044970 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8044956:	bf00      	nop
 8044958:	58024400 	.word	0x58024400
 804495c:	58024800 	.word	0x58024800
 8044960:	00ffffcf 	.word	0x00ffffcf
 8044964:	4bd4      	ldr	r3, [pc, #848]	@ (8044cb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044966:	691b      	ldr	r3, [r3, #16]
 8044968:	4ad3      	ldr	r2, [pc, #844]	@ (8044cb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 804496a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 804496e:	6113      	str	r3, [r2, #16]
 8044970:	4bd1      	ldr	r3, [pc, #836]	@ (8044cb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044972:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8044974:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044978:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 804497c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044980:	4acd      	ldr	r2, [pc, #820]	@ (8044cb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044982:	430b      	orrs	r3, r1
 8044984:	6713      	str	r3, [r2, #112]	@ 0x70
 8044986:	e008      	b.n	804499a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8044988:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804498c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8044990:	e003      	b.n	804499a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044992:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044996:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 804499a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80449a2:	f002 0301 	and.w	r3, r2, #1
 80449a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80449aa:	2300      	movs	r3, #0
 80449ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80449b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80449b4:	460b      	mov	r3, r1
 80449b6:	4313      	orrs	r3, r2
 80449b8:	f000 808b 	beq.w	8044ad2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80449bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80449c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80449c4:	2b28      	cmp	r3, #40	@ 0x28
 80449c6:	d86b      	bhi.n	8044aa0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80449c8:	a201      	add	r2, pc, #4	@ (adr r2, 80449d0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80449ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80449ce:	bf00      	nop
 80449d0:	08044aa9 	.word	0x08044aa9
 80449d4:	08044aa1 	.word	0x08044aa1
 80449d8:	08044aa1 	.word	0x08044aa1
 80449dc:	08044aa1 	.word	0x08044aa1
 80449e0:	08044aa1 	.word	0x08044aa1
 80449e4:	08044aa1 	.word	0x08044aa1
 80449e8:	08044aa1 	.word	0x08044aa1
 80449ec:	08044aa1 	.word	0x08044aa1
 80449f0:	08044a75 	.word	0x08044a75
 80449f4:	08044aa1 	.word	0x08044aa1
 80449f8:	08044aa1 	.word	0x08044aa1
 80449fc:	08044aa1 	.word	0x08044aa1
 8044a00:	08044aa1 	.word	0x08044aa1
 8044a04:	08044aa1 	.word	0x08044aa1
 8044a08:	08044aa1 	.word	0x08044aa1
 8044a0c:	08044aa1 	.word	0x08044aa1
 8044a10:	08044a8b 	.word	0x08044a8b
 8044a14:	08044aa1 	.word	0x08044aa1
 8044a18:	08044aa1 	.word	0x08044aa1
 8044a1c:	08044aa1 	.word	0x08044aa1
 8044a20:	08044aa1 	.word	0x08044aa1
 8044a24:	08044aa1 	.word	0x08044aa1
 8044a28:	08044aa1 	.word	0x08044aa1
 8044a2c:	08044aa1 	.word	0x08044aa1
 8044a30:	08044aa9 	.word	0x08044aa9
 8044a34:	08044aa1 	.word	0x08044aa1
 8044a38:	08044aa1 	.word	0x08044aa1
 8044a3c:	08044aa1 	.word	0x08044aa1
 8044a40:	08044aa1 	.word	0x08044aa1
 8044a44:	08044aa1 	.word	0x08044aa1
 8044a48:	08044aa1 	.word	0x08044aa1
 8044a4c:	08044aa1 	.word	0x08044aa1
 8044a50:	08044aa9 	.word	0x08044aa9
 8044a54:	08044aa1 	.word	0x08044aa1
 8044a58:	08044aa1 	.word	0x08044aa1
 8044a5c:	08044aa1 	.word	0x08044aa1
 8044a60:	08044aa1 	.word	0x08044aa1
 8044a64:	08044aa1 	.word	0x08044aa1
 8044a68:	08044aa1 	.word	0x08044aa1
 8044a6c:	08044aa1 	.word	0x08044aa1
 8044a70:	08044aa9 	.word	0x08044aa9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044a78:	3308      	adds	r3, #8
 8044a7a:	2101      	movs	r1, #1
 8044a7c:	4618      	mov	r0, r3
 8044a7e:	f000 ffc5 	bl	8045a0c <RCCEx_PLL2_Config>
 8044a82:	4603      	mov	r3, r0
 8044a84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8044a88:	e00f      	b.n	8044aaa <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8044a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044a8e:	3328      	adds	r3, #40	@ 0x28
 8044a90:	2101      	movs	r1, #1
 8044a92:	4618      	mov	r0, r3
 8044a94:	f001 f86c 	bl	8045b70 <RCCEx_PLL3_Config>
 8044a98:	4603      	mov	r3, r0
 8044a9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8044a9e:	e004      	b.n	8044aaa <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044aa0:	2301      	movs	r3, #1
 8044aa2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044aa6:	e000      	b.n	8044aaa <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8044aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044aaa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044aae:	2b00      	cmp	r3, #0
 8044ab0:	d10b      	bne.n	8044aca <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8044ab2:	4b81      	ldr	r3, [pc, #516]	@ (8044cb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8044ab6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8044aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8044ac2:	4a7d      	ldr	r2, [pc, #500]	@ (8044cb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044ac4:	430b      	orrs	r3, r1
 8044ac6:	6553      	str	r3, [r2, #84]	@ 0x54
 8044ac8:	e003      	b.n	8044ad2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044aca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044ace:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8044ad2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044ada:	f002 0302 	and.w	r3, r2, #2
 8044ade:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8044ae2:	2300      	movs	r3, #0
 8044ae4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8044ae8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8044aec:	460b      	mov	r3, r1
 8044aee:	4313      	orrs	r3, r2
 8044af0:	d042      	beq.n	8044b78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8044af2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044af6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8044af8:	2b05      	cmp	r3, #5
 8044afa:	d825      	bhi.n	8044b48 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8044afc:	a201      	add	r2, pc, #4	@ (adr r2, 8044b04 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8044afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044b02:	bf00      	nop
 8044b04:	08044b51 	.word	0x08044b51
 8044b08:	08044b1d 	.word	0x08044b1d
 8044b0c:	08044b33 	.word	0x08044b33
 8044b10:	08044b51 	.word	0x08044b51
 8044b14:	08044b51 	.word	0x08044b51
 8044b18:	08044b51 	.word	0x08044b51
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044b1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044b20:	3308      	adds	r3, #8
 8044b22:	2101      	movs	r1, #1
 8044b24:	4618      	mov	r0, r3
 8044b26:	f000 ff71 	bl	8045a0c <RCCEx_PLL2_Config>
 8044b2a:	4603      	mov	r3, r0
 8044b2c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8044b30:	e00f      	b.n	8044b52 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8044b32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044b36:	3328      	adds	r3, #40	@ 0x28
 8044b38:	2101      	movs	r1, #1
 8044b3a:	4618      	mov	r0, r3
 8044b3c:	f001 f818 	bl	8045b70 <RCCEx_PLL3_Config>
 8044b40:	4603      	mov	r3, r0
 8044b42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8044b46:	e004      	b.n	8044b52 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044b48:	2301      	movs	r3, #1
 8044b4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044b4e:	e000      	b.n	8044b52 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8044b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044b52:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044b56:	2b00      	cmp	r3, #0
 8044b58:	d10a      	bne.n	8044b70 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8044b5a:	4b57      	ldr	r3, [pc, #348]	@ (8044cb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8044b5e:	f023 0107 	bic.w	r1, r3, #7
 8044b62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044b66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8044b68:	4a53      	ldr	r2, [pc, #332]	@ (8044cb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044b6a:	430b      	orrs	r3, r1
 8044b6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8044b6e:	e003      	b.n	8044b78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044b70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044b74:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8044b78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044b80:	f002 0304 	and.w	r3, r2, #4
 8044b84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8044b88:	2300      	movs	r3, #0
 8044b8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8044b8e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8044b92:	460b      	mov	r3, r1
 8044b94:	4313      	orrs	r3, r2
 8044b96:	d044      	beq.n	8044c22 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8044b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8044ba0:	2b05      	cmp	r3, #5
 8044ba2:	d825      	bhi.n	8044bf0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8044ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8044bac <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8044ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044baa:	bf00      	nop
 8044bac:	08044bf9 	.word	0x08044bf9
 8044bb0:	08044bc5 	.word	0x08044bc5
 8044bb4:	08044bdb 	.word	0x08044bdb
 8044bb8:	08044bf9 	.word	0x08044bf9
 8044bbc:	08044bf9 	.word	0x08044bf9
 8044bc0:	08044bf9 	.word	0x08044bf9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044bc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044bc8:	3308      	adds	r3, #8
 8044bca:	2101      	movs	r1, #1
 8044bcc:	4618      	mov	r0, r3
 8044bce:	f000 ff1d 	bl	8045a0c <RCCEx_PLL2_Config>
 8044bd2:	4603      	mov	r3, r0
 8044bd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8044bd8:	e00f      	b.n	8044bfa <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8044bda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044bde:	3328      	adds	r3, #40	@ 0x28
 8044be0:	2101      	movs	r1, #1
 8044be2:	4618      	mov	r0, r3
 8044be4:	f000 ffc4 	bl	8045b70 <RCCEx_PLL3_Config>
 8044be8:	4603      	mov	r3, r0
 8044bea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8044bee:	e004      	b.n	8044bfa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044bf0:	2301      	movs	r3, #1
 8044bf2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044bf6:	e000      	b.n	8044bfa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8044bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044bfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044bfe:	2b00      	cmp	r3, #0
 8044c00:	d10b      	bne.n	8044c1a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8044c02:	4b2d      	ldr	r3, [pc, #180]	@ (8044cb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044c06:	f023 0107 	bic.w	r1, r3, #7
 8044c0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8044c12:	4a29      	ldr	r2, [pc, #164]	@ (8044cb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044c14:	430b      	orrs	r3, r1
 8044c16:	6593      	str	r3, [r2, #88]	@ 0x58
 8044c18:	e003      	b.n	8044c22 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044c1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044c1e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8044c22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044c2a:	f002 0320 	and.w	r3, r2, #32
 8044c2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8044c32:	2300      	movs	r3, #0
 8044c34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8044c38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8044c3c:	460b      	mov	r3, r1
 8044c3e:	4313      	orrs	r3, r2
 8044c40:	d057      	beq.n	8044cf2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8044c42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8044c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8044c4e:	d035      	beq.n	8044cbc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8044c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8044c54:	d82c      	bhi.n	8044cb0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8044c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8044c5a:	d031      	beq.n	8044cc0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8044c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8044c60:	d826      	bhi.n	8044cb0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8044c62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8044c66:	d02d      	beq.n	8044cc4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8044c68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8044c6c:	d820      	bhi.n	8044cb0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8044c6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044c72:	d012      	beq.n	8044c9a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8044c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044c78:	d81a      	bhi.n	8044cb0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8044c7a:	2b00      	cmp	r3, #0
 8044c7c:	d024      	beq.n	8044cc8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8044c7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8044c82:	d115      	bne.n	8044cb0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044c84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c88:	3308      	adds	r3, #8
 8044c8a:	2100      	movs	r1, #0
 8044c8c:	4618      	mov	r0, r3
 8044c8e:	f000 febd 	bl	8045a0c <RCCEx_PLL2_Config>
 8044c92:	4603      	mov	r3, r0
 8044c94:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8044c98:	e017      	b.n	8044cca <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044c9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c9e:	3328      	adds	r3, #40	@ 0x28
 8044ca0:	2102      	movs	r1, #2
 8044ca2:	4618      	mov	r0, r3
 8044ca4:	f000 ff64 	bl	8045b70 <RCCEx_PLL3_Config>
 8044ca8:	4603      	mov	r3, r0
 8044caa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8044cae:	e00c      	b.n	8044cca <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044cb0:	2301      	movs	r3, #1
 8044cb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044cb6:	e008      	b.n	8044cca <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8044cb8:	58024400 	.word	0x58024400
        break;
 8044cbc:	bf00      	nop
 8044cbe:	e004      	b.n	8044cca <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8044cc0:	bf00      	nop
 8044cc2:	e002      	b.n	8044cca <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8044cc4:	bf00      	nop
 8044cc6:	e000      	b.n	8044cca <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8044cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044cca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044cce:	2b00      	cmp	r3, #0
 8044cd0:	d10b      	bne.n	8044cea <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8044cd2:	4bc2      	ldr	r3, [pc, #776]	@ (8044fdc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8044cd6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8044cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8044ce2:	4abe      	ldr	r2, [pc, #760]	@ (8044fdc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044ce4:	430b      	orrs	r3, r1
 8044ce6:	6553      	str	r3, [r2, #84]	@ 0x54
 8044ce8:	e003      	b.n	8044cf2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044cea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044cee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8044cf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044cfa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8044cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8044d02:	2300      	movs	r3, #0
 8044d04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8044d08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8044d0c:	460b      	mov	r3, r1
 8044d0e:	4313      	orrs	r3, r2
 8044d10:	d055      	beq.n	8044dbe <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8044d12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044d16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8044d1a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8044d1e:	d033      	beq.n	8044d88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8044d20:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8044d24:	d82c      	bhi.n	8044d80 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8044d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8044d2a:	d02f      	beq.n	8044d8c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8044d2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8044d30:	d826      	bhi.n	8044d80 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8044d32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8044d36:	d02b      	beq.n	8044d90 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8044d38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8044d3c:	d820      	bhi.n	8044d80 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8044d3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8044d42:	d012      	beq.n	8044d6a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8044d44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8044d48:	d81a      	bhi.n	8044d80 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8044d4a:	2b00      	cmp	r3, #0
 8044d4c:	d022      	beq.n	8044d94 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8044d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8044d52:	d115      	bne.n	8044d80 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044d54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044d58:	3308      	adds	r3, #8
 8044d5a:	2100      	movs	r1, #0
 8044d5c:	4618      	mov	r0, r3
 8044d5e:	f000 fe55 	bl	8045a0c <RCCEx_PLL2_Config>
 8044d62:	4603      	mov	r3, r0
 8044d64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8044d68:	e015      	b.n	8044d96 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044d6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044d6e:	3328      	adds	r3, #40	@ 0x28
 8044d70:	2102      	movs	r1, #2
 8044d72:	4618      	mov	r0, r3
 8044d74:	f000 fefc 	bl	8045b70 <RCCEx_PLL3_Config>
 8044d78:	4603      	mov	r3, r0
 8044d7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8044d7e:	e00a      	b.n	8044d96 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044d80:	2301      	movs	r3, #1
 8044d82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044d86:	e006      	b.n	8044d96 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8044d88:	bf00      	nop
 8044d8a:	e004      	b.n	8044d96 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8044d8c:	bf00      	nop
 8044d8e:	e002      	b.n	8044d96 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8044d90:	bf00      	nop
 8044d92:	e000      	b.n	8044d96 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8044d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044d96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044d9a:	2b00      	cmp	r3, #0
 8044d9c:	d10b      	bne.n	8044db6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8044d9e:	4b8f      	ldr	r3, [pc, #572]	@ (8044fdc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044da2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8044da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044daa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8044dae:	4a8b      	ldr	r2, [pc, #556]	@ (8044fdc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044db0:	430b      	orrs	r3, r1
 8044db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8044db4:	e003      	b.n	8044dbe <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044db6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044dba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8044dbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044dc6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8044dca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8044dce:	2300      	movs	r3, #0
 8044dd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8044dd4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8044dd8:	460b      	mov	r3, r1
 8044dda:	4313      	orrs	r3, r2
 8044ddc:	d055      	beq.n	8044e8a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8044dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044de2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8044de6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8044dea:	d033      	beq.n	8044e54 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8044dec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8044df0:	d82c      	bhi.n	8044e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8044df2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8044df6:	d02f      	beq.n	8044e58 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8044df8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8044dfc:	d826      	bhi.n	8044e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8044dfe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8044e02:	d02b      	beq.n	8044e5c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8044e04:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8044e08:	d820      	bhi.n	8044e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8044e0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8044e0e:	d012      	beq.n	8044e36 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8044e10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8044e14:	d81a      	bhi.n	8044e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8044e16:	2b00      	cmp	r3, #0
 8044e18:	d022      	beq.n	8044e60 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8044e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8044e1e:	d115      	bne.n	8044e4c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044e24:	3308      	adds	r3, #8
 8044e26:	2100      	movs	r1, #0
 8044e28:	4618      	mov	r0, r3
 8044e2a:	f000 fdef 	bl	8045a0c <RCCEx_PLL2_Config>
 8044e2e:	4603      	mov	r3, r0
 8044e30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8044e34:	e015      	b.n	8044e62 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044e36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044e3a:	3328      	adds	r3, #40	@ 0x28
 8044e3c:	2102      	movs	r1, #2
 8044e3e:	4618      	mov	r0, r3
 8044e40:	f000 fe96 	bl	8045b70 <RCCEx_PLL3_Config>
 8044e44:	4603      	mov	r3, r0
 8044e46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8044e4a:	e00a      	b.n	8044e62 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044e4c:	2301      	movs	r3, #1
 8044e4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044e52:	e006      	b.n	8044e62 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8044e54:	bf00      	nop
 8044e56:	e004      	b.n	8044e62 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8044e58:	bf00      	nop
 8044e5a:	e002      	b.n	8044e62 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8044e5c:	bf00      	nop
 8044e5e:	e000      	b.n	8044e62 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8044e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044e62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044e66:	2b00      	cmp	r3, #0
 8044e68:	d10b      	bne.n	8044e82 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8044e6a:	4b5c      	ldr	r3, [pc, #368]	@ (8044fdc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044e6e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8044e72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044e76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8044e7a:	4a58      	ldr	r2, [pc, #352]	@ (8044fdc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044e7c:	430b      	orrs	r3, r1
 8044e7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8044e80:	e003      	b.n	8044e8a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044e82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044e86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8044e8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044e92:	f002 0308 	and.w	r3, r2, #8
 8044e96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8044e9a:	2300      	movs	r3, #0
 8044e9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8044ea0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8044ea4:	460b      	mov	r3, r1
 8044ea6:	4313      	orrs	r3, r2
 8044ea8:	d01e      	beq.n	8044ee8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8044eaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8044eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8044eb6:	d10c      	bne.n	8044ed2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8044eb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ebc:	3328      	adds	r3, #40	@ 0x28
 8044ebe:	2102      	movs	r1, #2
 8044ec0:	4618      	mov	r0, r3
 8044ec2:	f000 fe55 	bl	8045b70 <RCCEx_PLL3_Config>
 8044ec6:	4603      	mov	r3, r0
 8044ec8:	2b00      	cmp	r3, #0
 8044eca:	d002      	beq.n	8044ed2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8044ecc:	2301      	movs	r3, #1
 8044ece:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8044ed2:	4b42      	ldr	r3, [pc, #264]	@ (8044fdc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8044ed6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8044eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8044ee2:	4a3e      	ldr	r2, [pc, #248]	@ (8044fdc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044ee4:	430b      	orrs	r3, r1
 8044ee6:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8044ee8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044ef0:	f002 0310 	and.w	r3, r2, #16
 8044ef4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8044ef8:	2300      	movs	r3, #0
 8044efa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8044efe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8044f02:	460b      	mov	r3, r1
 8044f04:	4313      	orrs	r3, r2
 8044f06:	d01e      	beq.n	8044f46 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8044f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8044f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8044f14:	d10c      	bne.n	8044f30 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8044f16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f1a:	3328      	adds	r3, #40	@ 0x28
 8044f1c:	2102      	movs	r1, #2
 8044f1e:	4618      	mov	r0, r3
 8044f20:	f000 fe26 	bl	8045b70 <RCCEx_PLL3_Config>
 8044f24:	4603      	mov	r3, r0
 8044f26:	2b00      	cmp	r3, #0
 8044f28:	d002      	beq.n	8044f30 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8044f2a:	2301      	movs	r3, #1
 8044f2c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8044f30:	4b2a      	ldr	r3, [pc, #168]	@ (8044fdc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044f34:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8044f38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8044f40:	4a26      	ldr	r2, [pc, #152]	@ (8044fdc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044f42:	430b      	orrs	r3, r1
 8044f44:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8044f46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044f4e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8044f52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8044f56:	2300      	movs	r3, #0
 8044f58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8044f5c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8044f60:	460b      	mov	r3, r1
 8044f62:	4313      	orrs	r3, r2
 8044f64:	d040      	beq.n	8044fe8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8044f66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8044f6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8044f72:	d022      	beq.n	8044fba <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8044f74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8044f78:	d81b      	bhi.n	8044fb2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8044f7a:	2b00      	cmp	r3, #0
 8044f7c:	d003      	beq.n	8044f86 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8044f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8044f82:	d00b      	beq.n	8044f9c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8044f84:	e015      	b.n	8044fb2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f8a:	3308      	adds	r3, #8
 8044f8c:	2100      	movs	r1, #0
 8044f8e:	4618      	mov	r0, r3
 8044f90:	f000 fd3c 	bl	8045a0c <RCCEx_PLL2_Config>
 8044f94:	4603      	mov	r3, r0
 8044f96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8044f9a:	e00f      	b.n	8044fbc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044f9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044fa0:	3328      	adds	r3, #40	@ 0x28
 8044fa2:	2102      	movs	r1, #2
 8044fa4:	4618      	mov	r0, r3
 8044fa6:	f000 fde3 	bl	8045b70 <RCCEx_PLL3_Config>
 8044faa:	4603      	mov	r3, r0
 8044fac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8044fb0:	e004      	b.n	8044fbc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044fb2:	2301      	movs	r3, #1
 8044fb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044fb8:	e000      	b.n	8044fbc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8044fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044fbc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044fc0:	2b00      	cmp	r3, #0
 8044fc2:	d10d      	bne.n	8044fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8044fc4:	4b05      	ldr	r3, [pc, #20]	@ (8044fdc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044fc8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8044fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044fd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8044fd4:	4a01      	ldr	r2, [pc, #4]	@ (8044fdc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044fd6:	430b      	orrs	r3, r1
 8044fd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8044fda:	e005      	b.n	8044fe8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8044fdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044fe0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044fe4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8044fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044ff0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8044ff4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8044ff6:	2300      	movs	r3, #0
 8044ff8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8044ffa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8044ffe:	460b      	mov	r3, r1
 8045000:	4313      	orrs	r3, r2
 8045002:	d03b      	beq.n	804507c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8045004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 804500c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8045010:	d01f      	beq.n	8045052 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8045012:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8045016:	d818      	bhi.n	804504a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8045018:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 804501c:	d003      	beq.n	8045026 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 804501e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8045022:	d007      	beq.n	8045034 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8045024:	e011      	b.n	804504a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8045026:	4b64      	ldr	r3, [pc, #400]	@ (80451b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804502a:	4a63      	ldr	r2, [pc, #396]	@ (80451b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 804502c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8045030:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8045032:	e00f      	b.n	8045054 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8045034:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045038:	3328      	adds	r3, #40	@ 0x28
 804503a:	2101      	movs	r1, #1
 804503c:	4618      	mov	r0, r3
 804503e:	f000 fd97 	bl	8045b70 <RCCEx_PLL3_Config>
 8045042:	4603      	mov	r3, r0
 8045044:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8045048:	e004      	b.n	8045054 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804504a:	2301      	movs	r3, #1
 804504c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8045050:	e000      	b.n	8045054 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8045052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8045054:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045058:	2b00      	cmp	r3, #0
 804505a:	d10b      	bne.n	8045074 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 804505c:	4b56      	ldr	r3, [pc, #344]	@ (80451b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 804505e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045060:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8045064:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045068:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 804506c:	4a52      	ldr	r2, [pc, #328]	@ (80451b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 804506e:	430b      	orrs	r3, r1
 8045070:	6553      	str	r3, [r2, #84]	@ 0x54
 8045072:	e003      	b.n	804507c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8045074:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045078:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 804507c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045084:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8045088:	673b      	str	r3, [r7, #112]	@ 0x70
 804508a:	2300      	movs	r3, #0
 804508c:	677b      	str	r3, [r7, #116]	@ 0x74
 804508e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8045092:	460b      	mov	r3, r1
 8045094:	4313      	orrs	r3, r2
 8045096:	d031      	beq.n	80450fc <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8045098:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804509c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804509e:	2b00      	cmp	r3, #0
 80450a0:	d003      	beq.n	80450aa <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80450a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80450a6:	d007      	beq.n	80450b8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80450a8:	e011      	b.n	80450ce <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80450aa:	4b43      	ldr	r3, [pc, #268]	@ (80451b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80450ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80450ae:	4a42      	ldr	r2, [pc, #264]	@ (80451b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80450b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80450b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80450b6:	e00e      	b.n	80450d6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80450b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80450bc:	3308      	adds	r3, #8
 80450be:	2102      	movs	r1, #2
 80450c0:	4618      	mov	r0, r3
 80450c2:	f000 fca3 	bl	8045a0c <RCCEx_PLL2_Config>
 80450c6:	4603      	mov	r3, r0
 80450c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80450cc:	e003      	b.n	80450d6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80450ce:	2301      	movs	r3, #1
 80450d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80450d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80450d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80450da:	2b00      	cmp	r3, #0
 80450dc:	d10a      	bne.n	80450f4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80450de:	4b36      	ldr	r3, [pc, #216]	@ (80451b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80450e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80450e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80450e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80450ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80450ec:	4a32      	ldr	r2, [pc, #200]	@ (80451b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80450ee:	430b      	orrs	r3, r1
 80450f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80450f2:	e003      	b.n	80450fc <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80450f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80450f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80450fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045104:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8045108:	66bb      	str	r3, [r7, #104]	@ 0x68
 804510a:	2300      	movs	r3, #0
 804510c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 804510e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8045112:	460b      	mov	r3, r1
 8045114:	4313      	orrs	r3, r2
 8045116:	d00c      	beq.n	8045132 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8045118:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804511c:	3328      	adds	r3, #40	@ 0x28
 804511e:	2102      	movs	r1, #2
 8045120:	4618      	mov	r0, r3
 8045122:	f000 fd25 	bl	8045b70 <RCCEx_PLL3_Config>
 8045126:	4603      	mov	r3, r0
 8045128:	2b00      	cmp	r3, #0
 804512a:	d002      	beq.n	8045132 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 804512c:	2301      	movs	r3, #1
 804512e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8045132:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045136:	e9d3 2300 	ldrd	r2, r3, [r3]
 804513a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 804513e:	663b      	str	r3, [r7, #96]	@ 0x60
 8045140:	2300      	movs	r3, #0
 8045142:	667b      	str	r3, [r7, #100]	@ 0x64
 8045144:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8045148:	460b      	mov	r3, r1
 804514a:	4313      	orrs	r3, r2
 804514c:	d03a      	beq.n	80451c4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 804514e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8045156:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 804515a:	d018      	beq.n	804518e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 804515c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8045160:	d811      	bhi.n	8045186 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8045162:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8045166:	d014      	beq.n	8045192 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8045168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 804516c:	d80b      	bhi.n	8045186 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 804516e:	2b00      	cmp	r3, #0
 8045170:	d011      	beq.n	8045196 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8045172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8045176:	d106      	bne.n	8045186 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8045178:	4b0f      	ldr	r3, [pc, #60]	@ (80451b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 804517a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804517c:	4a0e      	ldr	r2, [pc, #56]	@ (80451b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 804517e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8045182:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8045184:	e008      	b.n	8045198 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8045186:	2301      	movs	r3, #1
 8045188:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 804518c:	e004      	b.n	8045198 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 804518e:	bf00      	nop
 8045190:	e002      	b.n	8045198 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8045192:	bf00      	nop
 8045194:	e000      	b.n	8045198 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8045196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8045198:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804519c:	2b00      	cmp	r3, #0
 804519e:	d10d      	bne.n	80451bc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80451a0:	4b05      	ldr	r3, [pc, #20]	@ (80451b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80451a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80451a4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80451a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80451ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80451b0:	4a01      	ldr	r2, [pc, #4]	@ (80451b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80451b2:	430b      	orrs	r3, r1
 80451b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80451b6:	e005      	b.n	80451c4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80451b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80451bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80451c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80451c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80451c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80451cc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80451d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80451d2:	2300      	movs	r3, #0
 80451d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80451d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80451da:	460b      	mov	r3, r1
 80451dc:	4313      	orrs	r3, r2
 80451de:	d009      	beq.n	80451f4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80451e0:	4baa      	ldr	r3, [pc, #680]	@ (804548c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80451e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80451e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80451e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80451ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80451ee:	4aa7      	ldr	r2, [pc, #668]	@ (804548c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80451f0:	430b      	orrs	r3, r1
 80451f2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80451f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80451f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80451fc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8045200:	653b      	str	r3, [r7, #80]	@ 0x50
 8045202:	2300      	movs	r3, #0
 8045204:	657b      	str	r3, [r7, #84]	@ 0x54
 8045206:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 804520a:	460b      	mov	r3, r1
 804520c:	4313      	orrs	r3, r2
 804520e:	d00a      	beq.n	8045226 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8045210:	4b9e      	ldr	r3, [pc, #632]	@ (804548c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045212:	691b      	ldr	r3, [r3, #16]
 8045214:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8045218:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804521c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8045220:	4a9a      	ldr	r2, [pc, #616]	@ (804548c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045222:	430b      	orrs	r3, r1
 8045224:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8045226:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804522e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8045232:	64bb      	str	r3, [r7, #72]	@ 0x48
 8045234:	2300      	movs	r3, #0
 8045236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8045238:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 804523c:	460b      	mov	r3, r1
 804523e:	4313      	orrs	r3, r2
 8045240:	d009      	beq.n	8045256 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8045242:	4b92      	ldr	r3, [pc, #584]	@ (804548c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8045246:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 804524a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804524e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8045250:	4a8e      	ldr	r2, [pc, #568]	@ (804548c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045252:	430b      	orrs	r3, r1
 8045254:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8045256:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804525e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8045262:	643b      	str	r3, [r7, #64]	@ 0x40
 8045264:	2300      	movs	r3, #0
 8045266:	647b      	str	r3, [r7, #68]	@ 0x44
 8045268:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 804526c:	460b      	mov	r3, r1
 804526e:	4313      	orrs	r3, r2
 8045270:	d00e      	beq.n	8045290 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8045272:	4b86      	ldr	r3, [pc, #536]	@ (804548c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045274:	691b      	ldr	r3, [r3, #16]
 8045276:	4a85      	ldr	r2, [pc, #532]	@ (804548c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045278:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 804527c:	6113      	str	r3, [r2, #16]
 804527e:	4b83      	ldr	r3, [pc, #524]	@ (804548c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045280:	6919      	ldr	r1, [r3, #16]
 8045282:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045286:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 804528a:	4a80      	ldr	r2, [pc, #512]	@ (804548c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 804528c:	430b      	orrs	r3, r1
 804528e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8045290:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045298:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 804529c:	63bb      	str	r3, [r7, #56]	@ 0x38
 804529e:	2300      	movs	r3, #0
 80452a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80452a2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80452a6:	460b      	mov	r3, r1
 80452a8:	4313      	orrs	r3, r2
 80452aa:	d009      	beq.n	80452c0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80452ac:	4b77      	ldr	r3, [pc, #476]	@ (804548c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80452ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80452b0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80452b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80452b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80452ba:	4a74      	ldr	r2, [pc, #464]	@ (804548c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80452bc:	430b      	orrs	r3, r1
 80452be:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80452c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80452c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80452c8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80452cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80452ce:	2300      	movs	r3, #0
 80452d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80452d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80452d6:	460b      	mov	r3, r1
 80452d8:	4313      	orrs	r3, r2
 80452da:	d00a      	beq.n	80452f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80452dc:	4b6b      	ldr	r3, [pc, #428]	@ (804548c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80452de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80452e0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80452e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80452e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80452ec:	4a67      	ldr	r2, [pc, #412]	@ (804548c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80452ee:	430b      	orrs	r3, r1
 80452f0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80452f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80452f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80452fa:	2100      	movs	r1, #0
 80452fc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80452fe:	f003 0301 	and.w	r3, r3, #1
 8045302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8045304:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8045308:	460b      	mov	r3, r1
 804530a:	4313      	orrs	r3, r2
 804530c:	d011      	beq.n	8045332 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804530e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045312:	3308      	adds	r3, #8
 8045314:	2100      	movs	r1, #0
 8045316:	4618      	mov	r0, r3
 8045318:	f000 fb78 	bl	8045a0c <RCCEx_PLL2_Config>
 804531c:	4603      	mov	r3, r0
 804531e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045322:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045326:	2b00      	cmp	r3, #0
 8045328:	d003      	beq.n	8045332 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804532a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804532e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8045332:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045336:	e9d3 2300 	ldrd	r2, r3, [r3]
 804533a:	2100      	movs	r1, #0
 804533c:	6239      	str	r1, [r7, #32]
 804533e:	f003 0302 	and.w	r3, r3, #2
 8045342:	627b      	str	r3, [r7, #36]	@ 0x24
 8045344:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8045348:	460b      	mov	r3, r1
 804534a:	4313      	orrs	r3, r2
 804534c:	d011      	beq.n	8045372 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 804534e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045352:	3308      	adds	r3, #8
 8045354:	2101      	movs	r1, #1
 8045356:	4618      	mov	r0, r3
 8045358:	f000 fb58 	bl	8045a0c <RCCEx_PLL2_Config>
 804535c:	4603      	mov	r3, r0
 804535e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045362:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045366:	2b00      	cmp	r3, #0
 8045368:	d003      	beq.n	8045372 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804536a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804536e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8045372:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045376:	e9d3 2300 	ldrd	r2, r3, [r3]
 804537a:	2100      	movs	r1, #0
 804537c:	61b9      	str	r1, [r7, #24]
 804537e:	f003 0304 	and.w	r3, r3, #4
 8045382:	61fb      	str	r3, [r7, #28]
 8045384:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8045388:	460b      	mov	r3, r1
 804538a:	4313      	orrs	r3, r2
 804538c:	d011      	beq.n	80453b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 804538e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045392:	3308      	adds	r3, #8
 8045394:	2102      	movs	r1, #2
 8045396:	4618      	mov	r0, r3
 8045398:	f000 fb38 	bl	8045a0c <RCCEx_PLL2_Config>
 804539c:	4603      	mov	r3, r0
 804539e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80453a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80453a6:	2b00      	cmp	r3, #0
 80453a8:	d003      	beq.n	80453b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80453aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80453ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80453b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80453b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80453ba:	2100      	movs	r1, #0
 80453bc:	6139      	str	r1, [r7, #16]
 80453be:	f003 0308 	and.w	r3, r3, #8
 80453c2:	617b      	str	r3, [r7, #20]
 80453c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80453c8:	460b      	mov	r3, r1
 80453ca:	4313      	orrs	r3, r2
 80453cc:	d011      	beq.n	80453f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80453ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80453d2:	3328      	adds	r3, #40	@ 0x28
 80453d4:	2100      	movs	r1, #0
 80453d6:	4618      	mov	r0, r3
 80453d8:	f000 fbca 	bl	8045b70 <RCCEx_PLL3_Config>
 80453dc:	4603      	mov	r3, r0
 80453de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80453e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80453e6:	2b00      	cmp	r3, #0
 80453e8:	d003      	beq.n	80453f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80453ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80453ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80453f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80453f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80453fa:	2100      	movs	r1, #0
 80453fc:	60b9      	str	r1, [r7, #8]
 80453fe:	f003 0310 	and.w	r3, r3, #16
 8045402:	60fb      	str	r3, [r7, #12]
 8045404:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8045408:	460b      	mov	r3, r1
 804540a:	4313      	orrs	r3, r2
 804540c:	d011      	beq.n	8045432 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 804540e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045412:	3328      	adds	r3, #40	@ 0x28
 8045414:	2101      	movs	r1, #1
 8045416:	4618      	mov	r0, r3
 8045418:	f000 fbaa 	bl	8045b70 <RCCEx_PLL3_Config>
 804541c:	4603      	mov	r3, r0
 804541e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045422:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045426:	2b00      	cmp	r3, #0
 8045428:	d003      	beq.n	8045432 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804542a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804542e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8045432:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045436:	e9d3 2300 	ldrd	r2, r3, [r3]
 804543a:	2100      	movs	r1, #0
 804543c:	6039      	str	r1, [r7, #0]
 804543e:	f003 0320 	and.w	r3, r3, #32
 8045442:	607b      	str	r3, [r7, #4]
 8045444:	e9d7 1200 	ldrd	r1, r2, [r7]
 8045448:	460b      	mov	r3, r1
 804544a:	4313      	orrs	r3, r2
 804544c:	d011      	beq.n	8045472 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 804544e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045452:	3328      	adds	r3, #40	@ 0x28
 8045454:	2102      	movs	r1, #2
 8045456:	4618      	mov	r0, r3
 8045458:	f000 fb8a 	bl	8045b70 <RCCEx_PLL3_Config>
 804545c:	4603      	mov	r3, r0
 804545e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045462:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045466:	2b00      	cmp	r3, #0
 8045468:	d003      	beq.n	8045472 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804546a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804546e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8045472:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8045476:	2b00      	cmp	r3, #0
 8045478:	d101      	bne.n	804547e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 804547a:	2300      	movs	r3, #0
 804547c:	e000      	b.n	8045480 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 804547e:	2301      	movs	r3, #1
}
 8045480:	4618      	mov	r0, r3
 8045482:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8045486:	46bd      	mov	sp, r7
 8045488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 804548c:	58024400 	.word	0x58024400

08045490 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8045490:	b580      	push	{r7, lr}
 8045492:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8045494:	f7fe fd56 	bl	8043f44 <HAL_RCC_GetHCLKFreq>
 8045498:	4602      	mov	r2, r0
 804549a:	4b06      	ldr	r3, [pc, #24]	@ (80454b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 804549c:	6a1b      	ldr	r3, [r3, #32]
 804549e:	091b      	lsrs	r3, r3, #4
 80454a0:	f003 0307 	and.w	r3, r3, #7
 80454a4:	4904      	ldr	r1, [pc, #16]	@ (80454b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80454a6:	5ccb      	ldrb	r3, [r1, r3]
 80454a8:	f003 031f 	and.w	r3, r3, #31
 80454ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80454b0:	4618      	mov	r0, r3
 80454b2:	bd80      	pop	{r7, pc}
 80454b4:	58024400 	.word	0x58024400
 80454b8:	0804b8c8 	.word	0x0804b8c8

080454bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80454bc:	b480      	push	{r7}
 80454be:	b089      	sub	sp, #36	@ 0x24
 80454c0:	af00      	add	r7, sp, #0
 80454c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80454c4:	4ba1      	ldr	r3, [pc, #644]	@ (804574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80454c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80454c8:	f003 0303 	and.w	r3, r3, #3
 80454cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80454ce:	4b9f      	ldr	r3, [pc, #636]	@ (804574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80454d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80454d2:	0b1b      	lsrs	r3, r3, #12
 80454d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80454d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80454da:	4b9c      	ldr	r3, [pc, #624]	@ (804574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80454dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80454de:	091b      	lsrs	r3, r3, #4
 80454e0:	f003 0301 	and.w	r3, r3, #1
 80454e4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80454e6:	4b99      	ldr	r3, [pc, #612]	@ (804574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80454e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80454ea:	08db      	lsrs	r3, r3, #3
 80454ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80454f0:	693a      	ldr	r2, [r7, #16]
 80454f2:	fb02 f303 	mul.w	r3, r2, r3
 80454f6:	ee07 3a90 	vmov	s15, r3
 80454fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80454fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8045502:	697b      	ldr	r3, [r7, #20]
 8045504:	2b00      	cmp	r3, #0
 8045506:	f000 8111 	beq.w	804572c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 804550a:	69bb      	ldr	r3, [r7, #24]
 804550c:	2b02      	cmp	r3, #2
 804550e:	f000 8083 	beq.w	8045618 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8045512:	69bb      	ldr	r3, [r7, #24]
 8045514:	2b02      	cmp	r3, #2
 8045516:	f200 80a1 	bhi.w	804565c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 804551a:	69bb      	ldr	r3, [r7, #24]
 804551c:	2b00      	cmp	r3, #0
 804551e:	d003      	beq.n	8045528 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8045520:	69bb      	ldr	r3, [r7, #24]
 8045522:	2b01      	cmp	r3, #1
 8045524:	d056      	beq.n	80455d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8045526:	e099      	b.n	804565c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8045528:	4b88      	ldr	r3, [pc, #544]	@ (804574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 804552a:	681b      	ldr	r3, [r3, #0]
 804552c:	f003 0320 	and.w	r3, r3, #32
 8045530:	2b00      	cmp	r3, #0
 8045532:	d02d      	beq.n	8045590 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8045534:	4b85      	ldr	r3, [pc, #532]	@ (804574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045536:	681b      	ldr	r3, [r3, #0]
 8045538:	08db      	lsrs	r3, r3, #3
 804553a:	f003 0303 	and.w	r3, r3, #3
 804553e:	4a84      	ldr	r2, [pc, #528]	@ (8045750 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8045540:	fa22 f303 	lsr.w	r3, r2, r3
 8045544:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8045546:	68bb      	ldr	r3, [r7, #8]
 8045548:	ee07 3a90 	vmov	s15, r3
 804554c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8045550:	697b      	ldr	r3, [r7, #20]
 8045552:	ee07 3a90 	vmov	s15, r3
 8045556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804555a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804555e:	4b7b      	ldr	r3, [pc, #492]	@ (804574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045566:	ee07 3a90 	vmov	s15, r3
 804556a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804556e:	ed97 6a03 	vldr	s12, [r7, #12]
 8045572:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8045754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8045576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804557a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804557e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8045582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045586:	ee67 7a27 	vmul.f32	s15, s14, s15
 804558a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 804558e:	e087      	b.n	80456a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8045590:	697b      	ldr	r3, [r7, #20]
 8045592:	ee07 3a90 	vmov	s15, r3
 8045596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804559a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8045758 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 804559e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80455a2:	4b6a      	ldr	r3, [pc, #424]	@ (804574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80455a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80455a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80455aa:	ee07 3a90 	vmov	s15, r3
 80455ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80455b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80455b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8045754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80455ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80455be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80455c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80455c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80455ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80455ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80455d2:	e065      	b.n	80456a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80455d4:	697b      	ldr	r3, [r7, #20]
 80455d6:	ee07 3a90 	vmov	s15, r3
 80455da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80455de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 804575c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80455e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80455e6:	4b59      	ldr	r3, [pc, #356]	@ (804574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80455e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80455ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80455ee:	ee07 3a90 	vmov	s15, r3
 80455f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80455f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80455fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8045754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80455fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8045602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8045606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 804560a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804560e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8045616:	e043      	b.n	80456a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8045618:	697b      	ldr	r3, [r7, #20]
 804561a:	ee07 3a90 	vmov	s15, r3
 804561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045622:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8045760 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8045626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804562a:	4b48      	ldr	r3, [pc, #288]	@ (804574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 804562c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804562e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045632:	ee07 3a90 	vmov	s15, r3
 8045636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804563a:	ed97 6a03 	vldr	s12, [r7, #12]
 804563e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8045754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8045642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8045646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804564a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 804564e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 804565a:	e021      	b.n	80456a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 804565c:	697b      	ldr	r3, [r7, #20]
 804565e:	ee07 3a90 	vmov	s15, r3
 8045662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045666:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 804575c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 804566a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804566e:	4b37      	ldr	r3, [pc, #220]	@ (804574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045676:	ee07 3a90 	vmov	s15, r3
 804567a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804567e:	ed97 6a03 	vldr	s12, [r7, #12]
 8045682:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8045754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8045686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804568a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804568e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8045692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045696:	ee67 7a27 	vmul.f32	s15, s14, s15
 804569a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 804569e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80456a0:	4b2a      	ldr	r3, [pc, #168]	@ (804574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80456a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80456a4:	0a5b      	lsrs	r3, r3, #9
 80456a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80456aa:	ee07 3a90 	vmov	s15, r3
 80456ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80456b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80456b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80456ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80456be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80456c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80456c6:	ee17 2a90 	vmov	r2, s15
 80456ca:	687b      	ldr	r3, [r7, #4]
 80456cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80456ce:	4b1f      	ldr	r3, [pc, #124]	@ (804574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80456d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80456d2:	0c1b      	lsrs	r3, r3, #16
 80456d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80456d8:	ee07 3a90 	vmov	s15, r3
 80456dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80456e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80456e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80456e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80456ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80456f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80456f4:	ee17 2a90 	vmov	r2, s15
 80456f8:	687b      	ldr	r3, [r7, #4]
 80456fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80456fc:	4b13      	ldr	r3, [pc, #76]	@ (804574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80456fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045700:	0e1b      	lsrs	r3, r3, #24
 8045702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8045706:	ee07 3a90 	vmov	s15, r3
 804570a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804570e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8045712:	ee37 7a87 	vadd.f32	s14, s15, s14
 8045716:	edd7 6a07 	vldr	s13, [r7, #28]
 804571a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 804571e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8045722:	ee17 2a90 	vmov	r2, s15
 8045726:	687b      	ldr	r3, [r7, #4]
 8045728:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 804572a:	e008      	b.n	804573e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 804572c:	687b      	ldr	r3, [r7, #4]
 804572e:	2200      	movs	r2, #0
 8045730:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8045732:	687b      	ldr	r3, [r7, #4]
 8045734:	2200      	movs	r2, #0
 8045736:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8045738:	687b      	ldr	r3, [r7, #4]
 804573a:	2200      	movs	r2, #0
 804573c:	609a      	str	r2, [r3, #8]
}
 804573e:	bf00      	nop
 8045740:	3724      	adds	r7, #36	@ 0x24
 8045742:	46bd      	mov	sp, r7
 8045744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045748:	4770      	bx	lr
 804574a:	bf00      	nop
 804574c:	58024400 	.word	0x58024400
 8045750:	03d09000 	.word	0x03d09000
 8045754:	46000000 	.word	0x46000000
 8045758:	4c742400 	.word	0x4c742400
 804575c:	4a742400 	.word	0x4a742400
 8045760:	4bbebc20 	.word	0x4bbebc20

08045764 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8045764:	b480      	push	{r7}
 8045766:	b089      	sub	sp, #36	@ 0x24
 8045768:	af00      	add	r7, sp, #0
 804576a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 804576c:	4ba1      	ldr	r3, [pc, #644]	@ (80459f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 804576e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045770:	f003 0303 	and.w	r3, r3, #3
 8045774:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8045776:	4b9f      	ldr	r3, [pc, #636]	@ (80459f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804577a:	0d1b      	lsrs	r3, r3, #20
 804577c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8045780:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8045782:	4b9c      	ldr	r3, [pc, #624]	@ (80459f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045786:	0a1b      	lsrs	r3, r3, #8
 8045788:	f003 0301 	and.w	r3, r3, #1
 804578c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 804578e:	4b99      	ldr	r3, [pc, #612]	@ (80459f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8045792:	08db      	lsrs	r3, r3, #3
 8045794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8045798:	693a      	ldr	r2, [r7, #16]
 804579a:	fb02 f303 	mul.w	r3, r2, r3
 804579e:	ee07 3a90 	vmov	s15, r3
 80457a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80457a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80457aa:	697b      	ldr	r3, [r7, #20]
 80457ac:	2b00      	cmp	r3, #0
 80457ae:	f000 8111 	beq.w	80459d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80457b2:	69bb      	ldr	r3, [r7, #24]
 80457b4:	2b02      	cmp	r3, #2
 80457b6:	f000 8083 	beq.w	80458c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80457ba:	69bb      	ldr	r3, [r7, #24]
 80457bc:	2b02      	cmp	r3, #2
 80457be:	f200 80a1 	bhi.w	8045904 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80457c2:	69bb      	ldr	r3, [r7, #24]
 80457c4:	2b00      	cmp	r3, #0
 80457c6:	d003      	beq.n	80457d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80457c8:	69bb      	ldr	r3, [r7, #24]
 80457ca:	2b01      	cmp	r3, #1
 80457cc:	d056      	beq.n	804587c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80457ce:	e099      	b.n	8045904 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80457d0:	4b88      	ldr	r3, [pc, #544]	@ (80459f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80457d2:	681b      	ldr	r3, [r3, #0]
 80457d4:	f003 0320 	and.w	r3, r3, #32
 80457d8:	2b00      	cmp	r3, #0
 80457da:	d02d      	beq.n	8045838 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80457dc:	4b85      	ldr	r3, [pc, #532]	@ (80459f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80457de:	681b      	ldr	r3, [r3, #0]
 80457e0:	08db      	lsrs	r3, r3, #3
 80457e2:	f003 0303 	and.w	r3, r3, #3
 80457e6:	4a84      	ldr	r2, [pc, #528]	@ (80459f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80457e8:	fa22 f303 	lsr.w	r3, r2, r3
 80457ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80457ee:	68bb      	ldr	r3, [r7, #8]
 80457f0:	ee07 3a90 	vmov	s15, r3
 80457f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80457f8:	697b      	ldr	r3, [r7, #20]
 80457fa:	ee07 3a90 	vmov	s15, r3
 80457fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8045806:	4b7b      	ldr	r3, [pc, #492]	@ (80459f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804580a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804580e:	ee07 3a90 	vmov	s15, r3
 8045812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8045816:	ed97 6a03 	vldr	s12, [r7, #12]
 804581a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80459fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 804581e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8045822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8045826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 804582a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804582e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045832:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8045836:	e087      	b.n	8045948 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8045838:	697b      	ldr	r3, [r7, #20]
 804583a:	ee07 3a90 	vmov	s15, r3
 804583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045842:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8045a00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8045846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804584a:	4b6a      	ldr	r3, [pc, #424]	@ (80459f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 804584c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804584e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045852:	ee07 3a90 	vmov	s15, r3
 8045856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804585a:	ed97 6a03 	vldr	s12, [r7, #12]
 804585e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80459fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8045862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8045866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804586a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 804586e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045876:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 804587a:	e065      	b.n	8045948 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 804587c:	697b      	ldr	r3, [r7, #20]
 804587e:	ee07 3a90 	vmov	s15, r3
 8045882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045886:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8045a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 804588a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804588e:	4b59      	ldr	r3, [pc, #356]	@ (80459f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8045892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045896:	ee07 3a90 	vmov	s15, r3
 804589a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804589e:	ed97 6a03 	vldr	s12, [r7, #12]
 80458a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80459fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80458a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80458aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80458ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80458b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80458b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80458ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80458be:	e043      	b.n	8045948 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80458c0:	697b      	ldr	r3, [r7, #20]
 80458c2:	ee07 3a90 	vmov	s15, r3
 80458c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80458ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8045a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80458ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80458d2:	4b48      	ldr	r3, [pc, #288]	@ (80459f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80458d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80458d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80458da:	ee07 3a90 	vmov	s15, r3
 80458de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80458e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80458e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80459fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80458ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80458ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80458f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80458f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80458fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80458fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8045902:	e021      	b.n	8045948 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8045904:	697b      	ldr	r3, [r7, #20]
 8045906:	ee07 3a90 	vmov	s15, r3
 804590a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804590e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8045a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8045912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8045916:	4b37      	ldr	r3, [pc, #220]	@ (80459f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804591a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804591e:	ee07 3a90 	vmov	s15, r3
 8045922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8045926:	ed97 6a03 	vldr	s12, [r7, #12]
 804592a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80459fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 804592e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8045932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8045936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 804593a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804593e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8045946:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8045948:	4b2a      	ldr	r3, [pc, #168]	@ (80459f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 804594a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804594c:	0a5b      	lsrs	r3, r3, #9
 804594e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8045952:	ee07 3a90 	vmov	s15, r3
 8045956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804595a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 804595e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8045962:	edd7 6a07 	vldr	s13, [r7, #28]
 8045966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 804596a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 804596e:	ee17 2a90 	vmov	r2, s15
 8045972:	687b      	ldr	r3, [r7, #4]
 8045974:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8045976:	4b1f      	ldr	r3, [pc, #124]	@ (80459f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804597a:	0c1b      	lsrs	r3, r3, #16
 804597c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8045980:	ee07 3a90 	vmov	s15, r3
 8045984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045988:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 804598c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8045990:	edd7 6a07 	vldr	s13, [r7, #28]
 8045994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8045998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 804599c:	ee17 2a90 	vmov	r2, s15
 80459a0:	687b      	ldr	r3, [r7, #4]
 80459a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80459a4:	4b13      	ldr	r3, [pc, #76]	@ (80459f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80459a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80459a8:	0e1b      	lsrs	r3, r3, #24
 80459aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80459ae:	ee07 3a90 	vmov	s15, r3
 80459b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80459b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80459ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80459be:	edd7 6a07 	vldr	s13, [r7, #28]
 80459c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80459c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80459ca:	ee17 2a90 	vmov	r2, s15
 80459ce:	687b      	ldr	r3, [r7, #4]
 80459d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80459d2:	e008      	b.n	80459e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80459d4:	687b      	ldr	r3, [r7, #4]
 80459d6:	2200      	movs	r2, #0
 80459d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80459da:	687b      	ldr	r3, [r7, #4]
 80459dc:	2200      	movs	r2, #0
 80459de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80459e0:	687b      	ldr	r3, [r7, #4]
 80459e2:	2200      	movs	r2, #0
 80459e4:	609a      	str	r2, [r3, #8]
}
 80459e6:	bf00      	nop
 80459e8:	3724      	adds	r7, #36	@ 0x24
 80459ea:	46bd      	mov	sp, r7
 80459ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80459f0:	4770      	bx	lr
 80459f2:	bf00      	nop
 80459f4:	58024400 	.word	0x58024400
 80459f8:	03d09000 	.word	0x03d09000
 80459fc:	46000000 	.word	0x46000000
 8045a00:	4c742400 	.word	0x4c742400
 8045a04:	4a742400 	.word	0x4a742400
 8045a08:	4bbebc20 	.word	0x4bbebc20

08045a0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8045a0c:	b580      	push	{r7, lr}
 8045a0e:	b084      	sub	sp, #16
 8045a10:	af00      	add	r7, sp, #0
 8045a12:	6078      	str	r0, [r7, #4]
 8045a14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8045a16:	2300      	movs	r3, #0
 8045a18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8045a1a:	4b53      	ldr	r3, [pc, #332]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045a1e:	f003 0303 	and.w	r3, r3, #3
 8045a22:	2b03      	cmp	r3, #3
 8045a24:	d101      	bne.n	8045a2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8045a26:	2301      	movs	r3, #1
 8045a28:	e099      	b.n	8045b5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8045a2a:	4b4f      	ldr	r3, [pc, #316]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045a2c:	681b      	ldr	r3, [r3, #0]
 8045a2e:	4a4e      	ldr	r2, [pc, #312]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045a30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8045a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045a36:	f7fb fb4f 	bl	80410d8 <HAL_GetTick>
 8045a3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8045a3c:	e008      	b.n	8045a50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8045a3e:	f7fb fb4b 	bl	80410d8 <HAL_GetTick>
 8045a42:	4602      	mov	r2, r0
 8045a44:	68bb      	ldr	r3, [r7, #8]
 8045a46:	1ad3      	subs	r3, r2, r3
 8045a48:	2b02      	cmp	r3, #2
 8045a4a:	d901      	bls.n	8045a50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8045a4c:	2303      	movs	r3, #3
 8045a4e:	e086      	b.n	8045b5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8045a50:	4b45      	ldr	r3, [pc, #276]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045a52:	681b      	ldr	r3, [r3, #0]
 8045a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8045a58:	2b00      	cmp	r3, #0
 8045a5a:	d1f0      	bne.n	8045a3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8045a5c:	4b42      	ldr	r3, [pc, #264]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045a60:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8045a64:	687b      	ldr	r3, [r7, #4]
 8045a66:	681b      	ldr	r3, [r3, #0]
 8045a68:	031b      	lsls	r3, r3, #12
 8045a6a:	493f      	ldr	r1, [pc, #252]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045a6c:	4313      	orrs	r3, r2
 8045a6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8045a70:	687b      	ldr	r3, [r7, #4]
 8045a72:	685b      	ldr	r3, [r3, #4]
 8045a74:	3b01      	subs	r3, #1
 8045a76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8045a7a:	687b      	ldr	r3, [r7, #4]
 8045a7c:	689b      	ldr	r3, [r3, #8]
 8045a7e:	3b01      	subs	r3, #1
 8045a80:	025b      	lsls	r3, r3, #9
 8045a82:	b29b      	uxth	r3, r3
 8045a84:	431a      	orrs	r2, r3
 8045a86:	687b      	ldr	r3, [r7, #4]
 8045a88:	68db      	ldr	r3, [r3, #12]
 8045a8a:	3b01      	subs	r3, #1
 8045a8c:	041b      	lsls	r3, r3, #16
 8045a8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8045a92:	431a      	orrs	r2, r3
 8045a94:	687b      	ldr	r3, [r7, #4]
 8045a96:	691b      	ldr	r3, [r3, #16]
 8045a98:	3b01      	subs	r3, #1
 8045a9a:	061b      	lsls	r3, r3, #24
 8045a9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8045aa0:	4931      	ldr	r1, [pc, #196]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045aa2:	4313      	orrs	r3, r2
 8045aa4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8045aa6:	4b30      	ldr	r3, [pc, #192]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045aaa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8045aae:	687b      	ldr	r3, [r7, #4]
 8045ab0:	695b      	ldr	r3, [r3, #20]
 8045ab2:	492d      	ldr	r1, [pc, #180]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045ab4:	4313      	orrs	r3, r2
 8045ab6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8045ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045abc:	f023 0220 	bic.w	r2, r3, #32
 8045ac0:	687b      	ldr	r3, [r7, #4]
 8045ac2:	699b      	ldr	r3, [r3, #24]
 8045ac4:	4928      	ldr	r1, [pc, #160]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045ac6:	4313      	orrs	r3, r2
 8045ac8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8045aca:	4b27      	ldr	r3, [pc, #156]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045ace:	4a26      	ldr	r2, [pc, #152]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045ad0:	f023 0310 	bic.w	r3, r3, #16
 8045ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8045ad6:	4b24      	ldr	r3, [pc, #144]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045ad8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8045ada:	4b24      	ldr	r3, [pc, #144]	@ (8045b6c <RCCEx_PLL2_Config+0x160>)
 8045adc:	4013      	ands	r3, r2
 8045ade:	687a      	ldr	r2, [r7, #4]
 8045ae0:	69d2      	ldr	r2, [r2, #28]
 8045ae2:	00d2      	lsls	r2, r2, #3
 8045ae4:	4920      	ldr	r1, [pc, #128]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045ae6:	4313      	orrs	r3, r2
 8045ae8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8045aea:	4b1f      	ldr	r3, [pc, #124]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045aee:	4a1e      	ldr	r2, [pc, #120]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045af0:	f043 0310 	orr.w	r3, r3, #16
 8045af4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8045af6:	683b      	ldr	r3, [r7, #0]
 8045af8:	2b00      	cmp	r3, #0
 8045afa:	d106      	bne.n	8045b0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8045afc:	4b1a      	ldr	r3, [pc, #104]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045b00:	4a19      	ldr	r2, [pc, #100]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045b02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8045b06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8045b08:	e00f      	b.n	8045b2a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8045b0a:	683b      	ldr	r3, [r7, #0]
 8045b0c:	2b01      	cmp	r3, #1
 8045b0e:	d106      	bne.n	8045b1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8045b10:	4b15      	ldr	r3, [pc, #84]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045b14:	4a14      	ldr	r2, [pc, #80]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045b16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8045b1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8045b1c:	e005      	b.n	8045b2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8045b1e:	4b12      	ldr	r3, [pc, #72]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045b22:	4a11      	ldr	r2, [pc, #68]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045b24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8045b28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8045b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045b2c:	681b      	ldr	r3, [r3, #0]
 8045b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045b30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8045b34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045b36:	f7fb facf 	bl	80410d8 <HAL_GetTick>
 8045b3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8045b3c:	e008      	b.n	8045b50 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8045b3e:	f7fb facb 	bl	80410d8 <HAL_GetTick>
 8045b42:	4602      	mov	r2, r0
 8045b44:	68bb      	ldr	r3, [r7, #8]
 8045b46:	1ad3      	subs	r3, r2, r3
 8045b48:	2b02      	cmp	r3, #2
 8045b4a:	d901      	bls.n	8045b50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8045b4c:	2303      	movs	r3, #3
 8045b4e:	e006      	b.n	8045b5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8045b50:	4b05      	ldr	r3, [pc, #20]	@ (8045b68 <RCCEx_PLL2_Config+0x15c>)
 8045b52:	681b      	ldr	r3, [r3, #0]
 8045b54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8045b58:	2b00      	cmp	r3, #0
 8045b5a:	d0f0      	beq.n	8045b3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8045b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8045b5e:	4618      	mov	r0, r3
 8045b60:	3710      	adds	r7, #16
 8045b62:	46bd      	mov	sp, r7
 8045b64:	bd80      	pop	{r7, pc}
 8045b66:	bf00      	nop
 8045b68:	58024400 	.word	0x58024400
 8045b6c:	ffff0007 	.word	0xffff0007

08045b70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8045b70:	b580      	push	{r7, lr}
 8045b72:	b084      	sub	sp, #16
 8045b74:	af00      	add	r7, sp, #0
 8045b76:	6078      	str	r0, [r7, #4]
 8045b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8045b7a:	2300      	movs	r3, #0
 8045b7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8045b7e:	4b53      	ldr	r3, [pc, #332]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045b82:	f003 0303 	and.w	r3, r3, #3
 8045b86:	2b03      	cmp	r3, #3
 8045b88:	d101      	bne.n	8045b8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8045b8a:	2301      	movs	r3, #1
 8045b8c:	e099      	b.n	8045cc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8045b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045b90:	681b      	ldr	r3, [r3, #0]
 8045b92:	4a4e      	ldr	r2, [pc, #312]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045b94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8045b98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045b9a:	f7fb fa9d 	bl	80410d8 <HAL_GetTick>
 8045b9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8045ba0:	e008      	b.n	8045bb4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8045ba2:	f7fb fa99 	bl	80410d8 <HAL_GetTick>
 8045ba6:	4602      	mov	r2, r0
 8045ba8:	68bb      	ldr	r3, [r7, #8]
 8045baa:	1ad3      	subs	r3, r2, r3
 8045bac:	2b02      	cmp	r3, #2
 8045bae:	d901      	bls.n	8045bb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8045bb0:	2303      	movs	r3, #3
 8045bb2:	e086      	b.n	8045cc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8045bb4:	4b45      	ldr	r3, [pc, #276]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045bb6:	681b      	ldr	r3, [r3, #0]
 8045bb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8045bbc:	2b00      	cmp	r3, #0
 8045bbe:	d1f0      	bne.n	8045ba2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8045bc0:	4b42      	ldr	r3, [pc, #264]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045bc4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8045bc8:	687b      	ldr	r3, [r7, #4]
 8045bca:	681b      	ldr	r3, [r3, #0]
 8045bcc:	051b      	lsls	r3, r3, #20
 8045bce:	493f      	ldr	r1, [pc, #252]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045bd0:	4313      	orrs	r3, r2
 8045bd2:	628b      	str	r3, [r1, #40]	@ 0x28
 8045bd4:	687b      	ldr	r3, [r7, #4]
 8045bd6:	685b      	ldr	r3, [r3, #4]
 8045bd8:	3b01      	subs	r3, #1
 8045bda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8045bde:	687b      	ldr	r3, [r7, #4]
 8045be0:	689b      	ldr	r3, [r3, #8]
 8045be2:	3b01      	subs	r3, #1
 8045be4:	025b      	lsls	r3, r3, #9
 8045be6:	b29b      	uxth	r3, r3
 8045be8:	431a      	orrs	r2, r3
 8045bea:	687b      	ldr	r3, [r7, #4]
 8045bec:	68db      	ldr	r3, [r3, #12]
 8045bee:	3b01      	subs	r3, #1
 8045bf0:	041b      	lsls	r3, r3, #16
 8045bf2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8045bf6:	431a      	orrs	r2, r3
 8045bf8:	687b      	ldr	r3, [r7, #4]
 8045bfa:	691b      	ldr	r3, [r3, #16]
 8045bfc:	3b01      	subs	r3, #1
 8045bfe:	061b      	lsls	r3, r3, #24
 8045c00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8045c04:	4931      	ldr	r1, [pc, #196]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c06:	4313      	orrs	r3, r2
 8045c08:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8045c0a:	4b30      	ldr	r3, [pc, #192]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8045c12:	687b      	ldr	r3, [r7, #4]
 8045c14:	695b      	ldr	r3, [r3, #20]
 8045c16:	492d      	ldr	r1, [pc, #180]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c18:	4313      	orrs	r3, r2
 8045c1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8045c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c20:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8045c24:	687b      	ldr	r3, [r7, #4]
 8045c26:	699b      	ldr	r3, [r3, #24]
 8045c28:	4928      	ldr	r1, [pc, #160]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c2a:	4313      	orrs	r3, r2
 8045c2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8045c2e:	4b27      	ldr	r3, [pc, #156]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c32:	4a26      	ldr	r2, [pc, #152]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8045c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8045c3a:	4b24      	ldr	r3, [pc, #144]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8045c3e:	4b24      	ldr	r3, [pc, #144]	@ (8045cd0 <RCCEx_PLL3_Config+0x160>)
 8045c40:	4013      	ands	r3, r2
 8045c42:	687a      	ldr	r2, [r7, #4]
 8045c44:	69d2      	ldr	r2, [r2, #28]
 8045c46:	00d2      	lsls	r2, r2, #3
 8045c48:	4920      	ldr	r1, [pc, #128]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c4a:	4313      	orrs	r3, r2
 8045c4c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8045c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c52:	4a1e      	ldr	r2, [pc, #120]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8045c58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8045c5a:	683b      	ldr	r3, [r7, #0]
 8045c5c:	2b00      	cmp	r3, #0
 8045c5e:	d106      	bne.n	8045c6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8045c60:	4b1a      	ldr	r3, [pc, #104]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c64:	4a19      	ldr	r2, [pc, #100]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8045c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8045c6c:	e00f      	b.n	8045c8e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8045c6e:	683b      	ldr	r3, [r7, #0]
 8045c70:	2b01      	cmp	r3, #1
 8045c72:	d106      	bne.n	8045c82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8045c74:	4b15      	ldr	r3, [pc, #84]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c78:	4a14      	ldr	r2, [pc, #80]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8045c7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8045c80:	e005      	b.n	8045c8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8045c82:	4b12      	ldr	r3, [pc, #72]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c86:	4a11      	ldr	r2, [pc, #68]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8045c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8045c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c90:	681b      	ldr	r3, [r3, #0]
 8045c92:	4a0e      	ldr	r2, [pc, #56]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8045c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045c9a:	f7fb fa1d 	bl	80410d8 <HAL_GetTick>
 8045c9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8045ca0:	e008      	b.n	8045cb4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8045ca2:	f7fb fa19 	bl	80410d8 <HAL_GetTick>
 8045ca6:	4602      	mov	r2, r0
 8045ca8:	68bb      	ldr	r3, [r7, #8]
 8045caa:	1ad3      	subs	r3, r2, r3
 8045cac:	2b02      	cmp	r3, #2
 8045cae:	d901      	bls.n	8045cb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8045cb0:	2303      	movs	r3, #3
 8045cb2:	e006      	b.n	8045cc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8045cb4:	4b05      	ldr	r3, [pc, #20]	@ (8045ccc <RCCEx_PLL3_Config+0x15c>)
 8045cb6:	681b      	ldr	r3, [r3, #0]
 8045cb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8045cbc:	2b00      	cmp	r3, #0
 8045cbe:	d0f0      	beq.n	8045ca2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8045cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8045cc2:	4618      	mov	r0, r3
 8045cc4:	3710      	adds	r7, #16
 8045cc6:	46bd      	mov	sp, r7
 8045cc8:	bd80      	pop	{r7, pc}
 8045cca:	bf00      	nop
 8045ccc:	58024400 	.word	0x58024400
 8045cd0:	ffff0007 	.word	0xffff0007

08045cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8045cd4:	b580      	push	{r7, lr}
 8045cd6:	b082      	sub	sp, #8
 8045cd8:	af00      	add	r7, sp, #0
 8045cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8045cdc:	687b      	ldr	r3, [r7, #4]
 8045cde:	2b00      	cmp	r3, #0
 8045ce0:	d101      	bne.n	8045ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8045ce2:	2301      	movs	r3, #1
 8045ce4:	e042      	b.n	8045d6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8045ce6:	687b      	ldr	r3, [r7, #4]
 8045ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8045cec:	2b00      	cmp	r3, #0
 8045cee:	d106      	bne.n	8045cfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8045cf0:	687b      	ldr	r3, [r7, #4]
 8045cf2:	2200      	movs	r2, #0
 8045cf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8045cf8:	6878      	ldr	r0, [r7, #4]
 8045cfa:	f7fa ffcb 	bl	8040c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8045cfe:	687b      	ldr	r3, [r7, #4]
 8045d00:	2224      	movs	r2, #36	@ 0x24
 8045d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8045d06:	687b      	ldr	r3, [r7, #4]
 8045d08:	681b      	ldr	r3, [r3, #0]
 8045d0a:	681a      	ldr	r2, [r3, #0]
 8045d0c:	687b      	ldr	r3, [r7, #4]
 8045d0e:	681b      	ldr	r3, [r3, #0]
 8045d10:	f022 0201 	bic.w	r2, r2, #1
 8045d14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8045d16:	687b      	ldr	r3, [r7, #4]
 8045d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045d1a:	2b00      	cmp	r3, #0
 8045d1c:	d002      	beq.n	8045d24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8045d1e:	6878      	ldr	r0, [r7, #4]
 8045d20:	f000 fd90 	bl	8046844 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8045d24:	6878      	ldr	r0, [r7, #4]
 8045d26:	f000 f825 	bl	8045d74 <UART_SetConfig>
 8045d2a:	4603      	mov	r3, r0
 8045d2c:	2b01      	cmp	r3, #1
 8045d2e:	d101      	bne.n	8045d34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8045d30:	2301      	movs	r3, #1
 8045d32:	e01b      	b.n	8045d6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8045d34:	687b      	ldr	r3, [r7, #4]
 8045d36:	681b      	ldr	r3, [r3, #0]
 8045d38:	685a      	ldr	r2, [r3, #4]
 8045d3a:	687b      	ldr	r3, [r7, #4]
 8045d3c:	681b      	ldr	r3, [r3, #0]
 8045d3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8045d42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8045d44:	687b      	ldr	r3, [r7, #4]
 8045d46:	681b      	ldr	r3, [r3, #0]
 8045d48:	689a      	ldr	r2, [r3, #8]
 8045d4a:	687b      	ldr	r3, [r7, #4]
 8045d4c:	681b      	ldr	r3, [r3, #0]
 8045d4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8045d52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8045d54:	687b      	ldr	r3, [r7, #4]
 8045d56:	681b      	ldr	r3, [r3, #0]
 8045d58:	681a      	ldr	r2, [r3, #0]
 8045d5a:	687b      	ldr	r3, [r7, #4]
 8045d5c:	681b      	ldr	r3, [r3, #0]
 8045d5e:	f042 0201 	orr.w	r2, r2, #1
 8045d62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8045d64:	6878      	ldr	r0, [r7, #4]
 8045d66:	f000 fe0f 	bl	8046988 <UART_CheckIdleState>
 8045d6a:	4603      	mov	r3, r0
}
 8045d6c:	4618      	mov	r0, r3
 8045d6e:	3708      	adds	r7, #8
 8045d70:	46bd      	mov	sp, r7
 8045d72:	bd80      	pop	{r7, pc}

08045d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8045d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8045d78:	b092      	sub	sp, #72	@ 0x48
 8045d7a:	af00      	add	r7, sp, #0
 8045d7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8045d7e:	2300      	movs	r3, #0
 8045d80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8045d84:	697b      	ldr	r3, [r7, #20]
 8045d86:	689a      	ldr	r2, [r3, #8]
 8045d88:	697b      	ldr	r3, [r7, #20]
 8045d8a:	691b      	ldr	r3, [r3, #16]
 8045d8c:	431a      	orrs	r2, r3
 8045d8e:	697b      	ldr	r3, [r7, #20]
 8045d90:	695b      	ldr	r3, [r3, #20]
 8045d92:	431a      	orrs	r2, r3
 8045d94:	697b      	ldr	r3, [r7, #20]
 8045d96:	69db      	ldr	r3, [r3, #28]
 8045d98:	4313      	orrs	r3, r2
 8045d9a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8045d9c:	697b      	ldr	r3, [r7, #20]
 8045d9e:	681b      	ldr	r3, [r3, #0]
 8045da0:	681a      	ldr	r2, [r3, #0]
 8045da2:	4bbe      	ldr	r3, [pc, #760]	@ (804609c <UART_SetConfig+0x328>)
 8045da4:	4013      	ands	r3, r2
 8045da6:	697a      	ldr	r2, [r7, #20]
 8045da8:	6812      	ldr	r2, [r2, #0]
 8045daa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8045dac:	430b      	orrs	r3, r1
 8045dae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8045db0:	697b      	ldr	r3, [r7, #20]
 8045db2:	681b      	ldr	r3, [r3, #0]
 8045db4:	685b      	ldr	r3, [r3, #4]
 8045db6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8045dba:	697b      	ldr	r3, [r7, #20]
 8045dbc:	68da      	ldr	r2, [r3, #12]
 8045dbe:	697b      	ldr	r3, [r7, #20]
 8045dc0:	681b      	ldr	r3, [r3, #0]
 8045dc2:	430a      	orrs	r2, r1
 8045dc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8045dc6:	697b      	ldr	r3, [r7, #20]
 8045dc8:	699b      	ldr	r3, [r3, #24]
 8045dca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8045dcc:	697b      	ldr	r3, [r7, #20]
 8045dce:	681b      	ldr	r3, [r3, #0]
 8045dd0:	4ab3      	ldr	r2, [pc, #716]	@ (80460a0 <UART_SetConfig+0x32c>)
 8045dd2:	4293      	cmp	r3, r2
 8045dd4:	d004      	beq.n	8045de0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8045dd6:	697b      	ldr	r3, [r7, #20]
 8045dd8:	6a1b      	ldr	r3, [r3, #32]
 8045dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8045ddc:	4313      	orrs	r3, r2
 8045dde:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8045de0:	697b      	ldr	r3, [r7, #20]
 8045de2:	681b      	ldr	r3, [r3, #0]
 8045de4:	689a      	ldr	r2, [r3, #8]
 8045de6:	4baf      	ldr	r3, [pc, #700]	@ (80460a4 <UART_SetConfig+0x330>)
 8045de8:	4013      	ands	r3, r2
 8045dea:	697a      	ldr	r2, [r7, #20]
 8045dec:	6812      	ldr	r2, [r2, #0]
 8045dee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8045df0:	430b      	orrs	r3, r1
 8045df2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8045df4:	697b      	ldr	r3, [r7, #20]
 8045df6:	681b      	ldr	r3, [r3, #0]
 8045df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045dfa:	f023 010f 	bic.w	r1, r3, #15
 8045dfe:	697b      	ldr	r3, [r7, #20]
 8045e00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8045e02:	697b      	ldr	r3, [r7, #20]
 8045e04:	681b      	ldr	r3, [r3, #0]
 8045e06:	430a      	orrs	r2, r1
 8045e08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8045e0a:	697b      	ldr	r3, [r7, #20]
 8045e0c:	681b      	ldr	r3, [r3, #0]
 8045e0e:	4aa6      	ldr	r2, [pc, #664]	@ (80460a8 <UART_SetConfig+0x334>)
 8045e10:	4293      	cmp	r3, r2
 8045e12:	d177      	bne.n	8045f04 <UART_SetConfig+0x190>
 8045e14:	4ba5      	ldr	r3, [pc, #660]	@ (80460ac <UART_SetConfig+0x338>)
 8045e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045e18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8045e1c:	2b28      	cmp	r3, #40	@ 0x28
 8045e1e:	d86d      	bhi.n	8045efc <UART_SetConfig+0x188>
 8045e20:	a201      	add	r2, pc, #4	@ (adr r2, 8045e28 <UART_SetConfig+0xb4>)
 8045e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045e26:	bf00      	nop
 8045e28:	08045ecd 	.word	0x08045ecd
 8045e2c:	08045efd 	.word	0x08045efd
 8045e30:	08045efd 	.word	0x08045efd
 8045e34:	08045efd 	.word	0x08045efd
 8045e38:	08045efd 	.word	0x08045efd
 8045e3c:	08045efd 	.word	0x08045efd
 8045e40:	08045efd 	.word	0x08045efd
 8045e44:	08045efd 	.word	0x08045efd
 8045e48:	08045ed5 	.word	0x08045ed5
 8045e4c:	08045efd 	.word	0x08045efd
 8045e50:	08045efd 	.word	0x08045efd
 8045e54:	08045efd 	.word	0x08045efd
 8045e58:	08045efd 	.word	0x08045efd
 8045e5c:	08045efd 	.word	0x08045efd
 8045e60:	08045efd 	.word	0x08045efd
 8045e64:	08045efd 	.word	0x08045efd
 8045e68:	08045edd 	.word	0x08045edd
 8045e6c:	08045efd 	.word	0x08045efd
 8045e70:	08045efd 	.word	0x08045efd
 8045e74:	08045efd 	.word	0x08045efd
 8045e78:	08045efd 	.word	0x08045efd
 8045e7c:	08045efd 	.word	0x08045efd
 8045e80:	08045efd 	.word	0x08045efd
 8045e84:	08045efd 	.word	0x08045efd
 8045e88:	08045ee5 	.word	0x08045ee5
 8045e8c:	08045efd 	.word	0x08045efd
 8045e90:	08045efd 	.word	0x08045efd
 8045e94:	08045efd 	.word	0x08045efd
 8045e98:	08045efd 	.word	0x08045efd
 8045e9c:	08045efd 	.word	0x08045efd
 8045ea0:	08045efd 	.word	0x08045efd
 8045ea4:	08045efd 	.word	0x08045efd
 8045ea8:	08045eed 	.word	0x08045eed
 8045eac:	08045efd 	.word	0x08045efd
 8045eb0:	08045efd 	.word	0x08045efd
 8045eb4:	08045efd 	.word	0x08045efd
 8045eb8:	08045efd 	.word	0x08045efd
 8045ebc:	08045efd 	.word	0x08045efd
 8045ec0:	08045efd 	.word	0x08045efd
 8045ec4:	08045efd 	.word	0x08045efd
 8045ec8:	08045ef5 	.word	0x08045ef5
 8045ecc:	2301      	movs	r3, #1
 8045ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045ed2:	e222      	b.n	804631a <UART_SetConfig+0x5a6>
 8045ed4:	2304      	movs	r3, #4
 8045ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045eda:	e21e      	b.n	804631a <UART_SetConfig+0x5a6>
 8045edc:	2308      	movs	r3, #8
 8045ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045ee2:	e21a      	b.n	804631a <UART_SetConfig+0x5a6>
 8045ee4:	2310      	movs	r3, #16
 8045ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045eea:	e216      	b.n	804631a <UART_SetConfig+0x5a6>
 8045eec:	2320      	movs	r3, #32
 8045eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045ef2:	e212      	b.n	804631a <UART_SetConfig+0x5a6>
 8045ef4:	2340      	movs	r3, #64	@ 0x40
 8045ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045efa:	e20e      	b.n	804631a <UART_SetConfig+0x5a6>
 8045efc:	2380      	movs	r3, #128	@ 0x80
 8045efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f02:	e20a      	b.n	804631a <UART_SetConfig+0x5a6>
 8045f04:	697b      	ldr	r3, [r7, #20]
 8045f06:	681b      	ldr	r3, [r3, #0]
 8045f08:	4a69      	ldr	r2, [pc, #420]	@ (80460b0 <UART_SetConfig+0x33c>)
 8045f0a:	4293      	cmp	r3, r2
 8045f0c:	d130      	bne.n	8045f70 <UART_SetConfig+0x1fc>
 8045f0e:	4b67      	ldr	r3, [pc, #412]	@ (80460ac <UART_SetConfig+0x338>)
 8045f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045f12:	f003 0307 	and.w	r3, r3, #7
 8045f16:	2b05      	cmp	r3, #5
 8045f18:	d826      	bhi.n	8045f68 <UART_SetConfig+0x1f4>
 8045f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8045f20 <UART_SetConfig+0x1ac>)
 8045f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045f20:	08045f39 	.word	0x08045f39
 8045f24:	08045f41 	.word	0x08045f41
 8045f28:	08045f49 	.word	0x08045f49
 8045f2c:	08045f51 	.word	0x08045f51
 8045f30:	08045f59 	.word	0x08045f59
 8045f34:	08045f61 	.word	0x08045f61
 8045f38:	2300      	movs	r3, #0
 8045f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f3e:	e1ec      	b.n	804631a <UART_SetConfig+0x5a6>
 8045f40:	2304      	movs	r3, #4
 8045f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f46:	e1e8      	b.n	804631a <UART_SetConfig+0x5a6>
 8045f48:	2308      	movs	r3, #8
 8045f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f4e:	e1e4      	b.n	804631a <UART_SetConfig+0x5a6>
 8045f50:	2310      	movs	r3, #16
 8045f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f56:	e1e0      	b.n	804631a <UART_SetConfig+0x5a6>
 8045f58:	2320      	movs	r3, #32
 8045f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f5e:	e1dc      	b.n	804631a <UART_SetConfig+0x5a6>
 8045f60:	2340      	movs	r3, #64	@ 0x40
 8045f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f66:	e1d8      	b.n	804631a <UART_SetConfig+0x5a6>
 8045f68:	2380      	movs	r3, #128	@ 0x80
 8045f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f6e:	e1d4      	b.n	804631a <UART_SetConfig+0x5a6>
 8045f70:	697b      	ldr	r3, [r7, #20]
 8045f72:	681b      	ldr	r3, [r3, #0]
 8045f74:	4a4f      	ldr	r2, [pc, #316]	@ (80460b4 <UART_SetConfig+0x340>)
 8045f76:	4293      	cmp	r3, r2
 8045f78:	d130      	bne.n	8045fdc <UART_SetConfig+0x268>
 8045f7a:	4b4c      	ldr	r3, [pc, #304]	@ (80460ac <UART_SetConfig+0x338>)
 8045f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045f7e:	f003 0307 	and.w	r3, r3, #7
 8045f82:	2b05      	cmp	r3, #5
 8045f84:	d826      	bhi.n	8045fd4 <UART_SetConfig+0x260>
 8045f86:	a201      	add	r2, pc, #4	@ (adr r2, 8045f8c <UART_SetConfig+0x218>)
 8045f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045f8c:	08045fa5 	.word	0x08045fa5
 8045f90:	08045fad 	.word	0x08045fad
 8045f94:	08045fb5 	.word	0x08045fb5
 8045f98:	08045fbd 	.word	0x08045fbd
 8045f9c:	08045fc5 	.word	0x08045fc5
 8045fa0:	08045fcd 	.word	0x08045fcd
 8045fa4:	2300      	movs	r3, #0
 8045fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045faa:	e1b6      	b.n	804631a <UART_SetConfig+0x5a6>
 8045fac:	2304      	movs	r3, #4
 8045fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045fb2:	e1b2      	b.n	804631a <UART_SetConfig+0x5a6>
 8045fb4:	2308      	movs	r3, #8
 8045fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045fba:	e1ae      	b.n	804631a <UART_SetConfig+0x5a6>
 8045fbc:	2310      	movs	r3, #16
 8045fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045fc2:	e1aa      	b.n	804631a <UART_SetConfig+0x5a6>
 8045fc4:	2320      	movs	r3, #32
 8045fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045fca:	e1a6      	b.n	804631a <UART_SetConfig+0x5a6>
 8045fcc:	2340      	movs	r3, #64	@ 0x40
 8045fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045fd2:	e1a2      	b.n	804631a <UART_SetConfig+0x5a6>
 8045fd4:	2380      	movs	r3, #128	@ 0x80
 8045fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045fda:	e19e      	b.n	804631a <UART_SetConfig+0x5a6>
 8045fdc:	697b      	ldr	r3, [r7, #20]
 8045fde:	681b      	ldr	r3, [r3, #0]
 8045fe0:	4a35      	ldr	r2, [pc, #212]	@ (80460b8 <UART_SetConfig+0x344>)
 8045fe2:	4293      	cmp	r3, r2
 8045fe4:	d130      	bne.n	8046048 <UART_SetConfig+0x2d4>
 8045fe6:	4b31      	ldr	r3, [pc, #196]	@ (80460ac <UART_SetConfig+0x338>)
 8045fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045fea:	f003 0307 	and.w	r3, r3, #7
 8045fee:	2b05      	cmp	r3, #5
 8045ff0:	d826      	bhi.n	8046040 <UART_SetConfig+0x2cc>
 8045ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8045ff8 <UART_SetConfig+0x284>)
 8045ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045ff8:	08046011 	.word	0x08046011
 8045ffc:	08046019 	.word	0x08046019
 8046000:	08046021 	.word	0x08046021
 8046004:	08046029 	.word	0x08046029
 8046008:	08046031 	.word	0x08046031
 804600c:	08046039 	.word	0x08046039
 8046010:	2300      	movs	r3, #0
 8046012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046016:	e180      	b.n	804631a <UART_SetConfig+0x5a6>
 8046018:	2304      	movs	r3, #4
 804601a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804601e:	e17c      	b.n	804631a <UART_SetConfig+0x5a6>
 8046020:	2308      	movs	r3, #8
 8046022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046026:	e178      	b.n	804631a <UART_SetConfig+0x5a6>
 8046028:	2310      	movs	r3, #16
 804602a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804602e:	e174      	b.n	804631a <UART_SetConfig+0x5a6>
 8046030:	2320      	movs	r3, #32
 8046032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046036:	e170      	b.n	804631a <UART_SetConfig+0x5a6>
 8046038:	2340      	movs	r3, #64	@ 0x40
 804603a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804603e:	e16c      	b.n	804631a <UART_SetConfig+0x5a6>
 8046040:	2380      	movs	r3, #128	@ 0x80
 8046042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046046:	e168      	b.n	804631a <UART_SetConfig+0x5a6>
 8046048:	697b      	ldr	r3, [r7, #20]
 804604a:	681b      	ldr	r3, [r3, #0]
 804604c:	4a1b      	ldr	r2, [pc, #108]	@ (80460bc <UART_SetConfig+0x348>)
 804604e:	4293      	cmp	r3, r2
 8046050:	d142      	bne.n	80460d8 <UART_SetConfig+0x364>
 8046052:	4b16      	ldr	r3, [pc, #88]	@ (80460ac <UART_SetConfig+0x338>)
 8046054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8046056:	f003 0307 	and.w	r3, r3, #7
 804605a:	2b05      	cmp	r3, #5
 804605c:	d838      	bhi.n	80460d0 <UART_SetConfig+0x35c>
 804605e:	a201      	add	r2, pc, #4	@ (adr r2, 8046064 <UART_SetConfig+0x2f0>)
 8046060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046064:	0804607d 	.word	0x0804607d
 8046068:	08046085 	.word	0x08046085
 804606c:	0804608d 	.word	0x0804608d
 8046070:	08046095 	.word	0x08046095
 8046074:	080460c1 	.word	0x080460c1
 8046078:	080460c9 	.word	0x080460c9
 804607c:	2300      	movs	r3, #0
 804607e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046082:	e14a      	b.n	804631a <UART_SetConfig+0x5a6>
 8046084:	2304      	movs	r3, #4
 8046086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804608a:	e146      	b.n	804631a <UART_SetConfig+0x5a6>
 804608c:	2308      	movs	r3, #8
 804608e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046092:	e142      	b.n	804631a <UART_SetConfig+0x5a6>
 8046094:	2310      	movs	r3, #16
 8046096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804609a:	e13e      	b.n	804631a <UART_SetConfig+0x5a6>
 804609c:	cfff69f3 	.word	0xcfff69f3
 80460a0:	58000c00 	.word	0x58000c00
 80460a4:	11fff4ff 	.word	0x11fff4ff
 80460a8:	40011000 	.word	0x40011000
 80460ac:	58024400 	.word	0x58024400
 80460b0:	40004400 	.word	0x40004400
 80460b4:	40004800 	.word	0x40004800
 80460b8:	40004c00 	.word	0x40004c00
 80460bc:	40005000 	.word	0x40005000
 80460c0:	2320      	movs	r3, #32
 80460c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460c6:	e128      	b.n	804631a <UART_SetConfig+0x5a6>
 80460c8:	2340      	movs	r3, #64	@ 0x40
 80460ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460ce:	e124      	b.n	804631a <UART_SetConfig+0x5a6>
 80460d0:	2380      	movs	r3, #128	@ 0x80
 80460d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460d6:	e120      	b.n	804631a <UART_SetConfig+0x5a6>
 80460d8:	697b      	ldr	r3, [r7, #20]
 80460da:	681b      	ldr	r3, [r3, #0]
 80460dc:	4acb      	ldr	r2, [pc, #812]	@ (804640c <UART_SetConfig+0x698>)
 80460de:	4293      	cmp	r3, r2
 80460e0:	d176      	bne.n	80461d0 <UART_SetConfig+0x45c>
 80460e2:	4bcb      	ldr	r3, [pc, #812]	@ (8046410 <UART_SetConfig+0x69c>)
 80460e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80460e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80460ea:	2b28      	cmp	r3, #40	@ 0x28
 80460ec:	d86c      	bhi.n	80461c8 <UART_SetConfig+0x454>
 80460ee:	a201      	add	r2, pc, #4	@ (adr r2, 80460f4 <UART_SetConfig+0x380>)
 80460f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80460f4:	08046199 	.word	0x08046199
 80460f8:	080461c9 	.word	0x080461c9
 80460fc:	080461c9 	.word	0x080461c9
 8046100:	080461c9 	.word	0x080461c9
 8046104:	080461c9 	.word	0x080461c9
 8046108:	080461c9 	.word	0x080461c9
 804610c:	080461c9 	.word	0x080461c9
 8046110:	080461c9 	.word	0x080461c9
 8046114:	080461a1 	.word	0x080461a1
 8046118:	080461c9 	.word	0x080461c9
 804611c:	080461c9 	.word	0x080461c9
 8046120:	080461c9 	.word	0x080461c9
 8046124:	080461c9 	.word	0x080461c9
 8046128:	080461c9 	.word	0x080461c9
 804612c:	080461c9 	.word	0x080461c9
 8046130:	080461c9 	.word	0x080461c9
 8046134:	080461a9 	.word	0x080461a9
 8046138:	080461c9 	.word	0x080461c9
 804613c:	080461c9 	.word	0x080461c9
 8046140:	080461c9 	.word	0x080461c9
 8046144:	080461c9 	.word	0x080461c9
 8046148:	080461c9 	.word	0x080461c9
 804614c:	080461c9 	.word	0x080461c9
 8046150:	080461c9 	.word	0x080461c9
 8046154:	080461b1 	.word	0x080461b1
 8046158:	080461c9 	.word	0x080461c9
 804615c:	080461c9 	.word	0x080461c9
 8046160:	080461c9 	.word	0x080461c9
 8046164:	080461c9 	.word	0x080461c9
 8046168:	080461c9 	.word	0x080461c9
 804616c:	080461c9 	.word	0x080461c9
 8046170:	080461c9 	.word	0x080461c9
 8046174:	080461b9 	.word	0x080461b9
 8046178:	080461c9 	.word	0x080461c9
 804617c:	080461c9 	.word	0x080461c9
 8046180:	080461c9 	.word	0x080461c9
 8046184:	080461c9 	.word	0x080461c9
 8046188:	080461c9 	.word	0x080461c9
 804618c:	080461c9 	.word	0x080461c9
 8046190:	080461c9 	.word	0x080461c9
 8046194:	080461c1 	.word	0x080461c1
 8046198:	2301      	movs	r3, #1
 804619a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804619e:	e0bc      	b.n	804631a <UART_SetConfig+0x5a6>
 80461a0:	2304      	movs	r3, #4
 80461a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461a6:	e0b8      	b.n	804631a <UART_SetConfig+0x5a6>
 80461a8:	2308      	movs	r3, #8
 80461aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461ae:	e0b4      	b.n	804631a <UART_SetConfig+0x5a6>
 80461b0:	2310      	movs	r3, #16
 80461b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461b6:	e0b0      	b.n	804631a <UART_SetConfig+0x5a6>
 80461b8:	2320      	movs	r3, #32
 80461ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461be:	e0ac      	b.n	804631a <UART_SetConfig+0x5a6>
 80461c0:	2340      	movs	r3, #64	@ 0x40
 80461c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461c6:	e0a8      	b.n	804631a <UART_SetConfig+0x5a6>
 80461c8:	2380      	movs	r3, #128	@ 0x80
 80461ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461ce:	e0a4      	b.n	804631a <UART_SetConfig+0x5a6>
 80461d0:	697b      	ldr	r3, [r7, #20]
 80461d2:	681b      	ldr	r3, [r3, #0]
 80461d4:	4a8f      	ldr	r2, [pc, #572]	@ (8046414 <UART_SetConfig+0x6a0>)
 80461d6:	4293      	cmp	r3, r2
 80461d8:	d130      	bne.n	804623c <UART_SetConfig+0x4c8>
 80461da:	4b8d      	ldr	r3, [pc, #564]	@ (8046410 <UART_SetConfig+0x69c>)
 80461dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80461de:	f003 0307 	and.w	r3, r3, #7
 80461e2:	2b05      	cmp	r3, #5
 80461e4:	d826      	bhi.n	8046234 <UART_SetConfig+0x4c0>
 80461e6:	a201      	add	r2, pc, #4	@ (adr r2, 80461ec <UART_SetConfig+0x478>)
 80461e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80461ec:	08046205 	.word	0x08046205
 80461f0:	0804620d 	.word	0x0804620d
 80461f4:	08046215 	.word	0x08046215
 80461f8:	0804621d 	.word	0x0804621d
 80461fc:	08046225 	.word	0x08046225
 8046200:	0804622d 	.word	0x0804622d
 8046204:	2300      	movs	r3, #0
 8046206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804620a:	e086      	b.n	804631a <UART_SetConfig+0x5a6>
 804620c:	2304      	movs	r3, #4
 804620e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046212:	e082      	b.n	804631a <UART_SetConfig+0x5a6>
 8046214:	2308      	movs	r3, #8
 8046216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804621a:	e07e      	b.n	804631a <UART_SetConfig+0x5a6>
 804621c:	2310      	movs	r3, #16
 804621e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046222:	e07a      	b.n	804631a <UART_SetConfig+0x5a6>
 8046224:	2320      	movs	r3, #32
 8046226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804622a:	e076      	b.n	804631a <UART_SetConfig+0x5a6>
 804622c:	2340      	movs	r3, #64	@ 0x40
 804622e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046232:	e072      	b.n	804631a <UART_SetConfig+0x5a6>
 8046234:	2380      	movs	r3, #128	@ 0x80
 8046236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804623a:	e06e      	b.n	804631a <UART_SetConfig+0x5a6>
 804623c:	697b      	ldr	r3, [r7, #20]
 804623e:	681b      	ldr	r3, [r3, #0]
 8046240:	4a75      	ldr	r2, [pc, #468]	@ (8046418 <UART_SetConfig+0x6a4>)
 8046242:	4293      	cmp	r3, r2
 8046244:	d130      	bne.n	80462a8 <UART_SetConfig+0x534>
 8046246:	4b72      	ldr	r3, [pc, #456]	@ (8046410 <UART_SetConfig+0x69c>)
 8046248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804624a:	f003 0307 	and.w	r3, r3, #7
 804624e:	2b05      	cmp	r3, #5
 8046250:	d826      	bhi.n	80462a0 <UART_SetConfig+0x52c>
 8046252:	a201      	add	r2, pc, #4	@ (adr r2, 8046258 <UART_SetConfig+0x4e4>)
 8046254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046258:	08046271 	.word	0x08046271
 804625c:	08046279 	.word	0x08046279
 8046260:	08046281 	.word	0x08046281
 8046264:	08046289 	.word	0x08046289
 8046268:	08046291 	.word	0x08046291
 804626c:	08046299 	.word	0x08046299
 8046270:	2300      	movs	r3, #0
 8046272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046276:	e050      	b.n	804631a <UART_SetConfig+0x5a6>
 8046278:	2304      	movs	r3, #4
 804627a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804627e:	e04c      	b.n	804631a <UART_SetConfig+0x5a6>
 8046280:	2308      	movs	r3, #8
 8046282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046286:	e048      	b.n	804631a <UART_SetConfig+0x5a6>
 8046288:	2310      	movs	r3, #16
 804628a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804628e:	e044      	b.n	804631a <UART_SetConfig+0x5a6>
 8046290:	2320      	movs	r3, #32
 8046292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046296:	e040      	b.n	804631a <UART_SetConfig+0x5a6>
 8046298:	2340      	movs	r3, #64	@ 0x40
 804629a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804629e:	e03c      	b.n	804631a <UART_SetConfig+0x5a6>
 80462a0:	2380      	movs	r3, #128	@ 0x80
 80462a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462a6:	e038      	b.n	804631a <UART_SetConfig+0x5a6>
 80462a8:	697b      	ldr	r3, [r7, #20]
 80462aa:	681b      	ldr	r3, [r3, #0]
 80462ac:	4a5b      	ldr	r2, [pc, #364]	@ (804641c <UART_SetConfig+0x6a8>)
 80462ae:	4293      	cmp	r3, r2
 80462b0:	d130      	bne.n	8046314 <UART_SetConfig+0x5a0>
 80462b2:	4b57      	ldr	r3, [pc, #348]	@ (8046410 <UART_SetConfig+0x69c>)
 80462b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80462b6:	f003 0307 	and.w	r3, r3, #7
 80462ba:	2b05      	cmp	r3, #5
 80462bc:	d826      	bhi.n	804630c <UART_SetConfig+0x598>
 80462be:	a201      	add	r2, pc, #4	@ (adr r2, 80462c4 <UART_SetConfig+0x550>)
 80462c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80462c4:	080462dd 	.word	0x080462dd
 80462c8:	080462e5 	.word	0x080462e5
 80462cc:	080462ed 	.word	0x080462ed
 80462d0:	080462f5 	.word	0x080462f5
 80462d4:	080462fd 	.word	0x080462fd
 80462d8:	08046305 	.word	0x08046305
 80462dc:	2302      	movs	r3, #2
 80462de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462e2:	e01a      	b.n	804631a <UART_SetConfig+0x5a6>
 80462e4:	2304      	movs	r3, #4
 80462e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462ea:	e016      	b.n	804631a <UART_SetConfig+0x5a6>
 80462ec:	2308      	movs	r3, #8
 80462ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462f2:	e012      	b.n	804631a <UART_SetConfig+0x5a6>
 80462f4:	2310      	movs	r3, #16
 80462f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462fa:	e00e      	b.n	804631a <UART_SetConfig+0x5a6>
 80462fc:	2320      	movs	r3, #32
 80462fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046302:	e00a      	b.n	804631a <UART_SetConfig+0x5a6>
 8046304:	2340      	movs	r3, #64	@ 0x40
 8046306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804630a:	e006      	b.n	804631a <UART_SetConfig+0x5a6>
 804630c:	2380      	movs	r3, #128	@ 0x80
 804630e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046312:	e002      	b.n	804631a <UART_SetConfig+0x5a6>
 8046314:	2380      	movs	r3, #128	@ 0x80
 8046316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 804631a:	697b      	ldr	r3, [r7, #20]
 804631c:	681b      	ldr	r3, [r3, #0]
 804631e:	4a3f      	ldr	r2, [pc, #252]	@ (804641c <UART_SetConfig+0x6a8>)
 8046320:	4293      	cmp	r3, r2
 8046322:	f040 80f8 	bne.w	8046516 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8046326:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 804632a:	2b20      	cmp	r3, #32
 804632c:	dc46      	bgt.n	80463bc <UART_SetConfig+0x648>
 804632e:	2b02      	cmp	r3, #2
 8046330:	f2c0 8082 	blt.w	8046438 <UART_SetConfig+0x6c4>
 8046334:	3b02      	subs	r3, #2
 8046336:	2b1e      	cmp	r3, #30
 8046338:	d87e      	bhi.n	8046438 <UART_SetConfig+0x6c4>
 804633a:	a201      	add	r2, pc, #4	@ (adr r2, 8046340 <UART_SetConfig+0x5cc>)
 804633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046340:	080463c3 	.word	0x080463c3
 8046344:	08046439 	.word	0x08046439
 8046348:	080463cb 	.word	0x080463cb
 804634c:	08046439 	.word	0x08046439
 8046350:	08046439 	.word	0x08046439
 8046354:	08046439 	.word	0x08046439
 8046358:	080463db 	.word	0x080463db
 804635c:	08046439 	.word	0x08046439
 8046360:	08046439 	.word	0x08046439
 8046364:	08046439 	.word	0x08046439
 8046368:	08046439 	.word	0x08046439
 804636c:	08046439 	.word	0x08046439
 8046370:	08046439 	.word	0x08046439
 8046374:	08046439 	.word	0x08046439
 8046378:	080463eb 	.word	0x080463eb
 804637c:	08046439 	.word	0x08046439
 8046380:	08046439 	.word	0x08046439
 8046384:	08046439 	.word	0x08046439
 8046388:	08046439 	.word	0x08046439
 804638c:	08046439 	.word	0x08046439
 8046390:	08046439 	.word	0x08046439
 8046394:	08046439 	.word	0x08046439
 8046398:	08046439 	.word	0x08046439
 804639c:	08046439 	.word	0x08046439
 80463a0:	08046439 	.word	0x08046439
 80463a4:	08046439 	.word	0x08046439
 80463a8:	08046439 	.word	0x08046439
 80463ac:	08046439 	.word	0x08046439
 80463b0:	08046439 	.word	0x08046439
 80463b4:	08046439 	.word	0x08046439
 80463b8:	0804642b 	.word	0x0804642b
 80463bc:	2b40      	cmp	r3, #64	@ 0x40
 80463be:	d037      	beq.n	8046430 <UART_SetConfig+0x6bc>
 80463c0:	e03a      	b.n	8046438 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80463c2:	f7ff f865 	bl	8045490 <HAL_RCCEx_GetD3PCLK1Freq>
 80463c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80463c8:	e03c      	b.n	8046444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80463ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80463ce:	4618      	mov	r0, r3
 80463d0:	f7ff f874 	bl	80454bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80463d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80463d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80463d8:	e034      	b.n	8046444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80463da:	f107 0318 	add.w	r3, r7, #24
 80463de:	4618      	mov	r0, r3
 80463e0:	f7ff f9c0 	bl	8045764 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80463e4:	69fb      	ldr	r3, [r7, #28]
 80463e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80463e8:	e02c      	b.n	8046444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80463ea:	4b09      	ldr	r3, [pc, #36]	@ (8046410 <UART_SetConfig+0x69c>)
 80463ec:	681b      	ldr	r3, [r3, #0]
 80463ee:	f003 0320 	and.w	r3, r3, #32
 80463f2:	2b00      	cmp	r3, #0
 80463f4:	d016      	beq.n	8046424 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80463f6:	4b06      	ldr	r3, [pc, #24]	@ (8046410 <UART_SetConfig+0x69c>)
 80463f8:	681b      	ldr	r3, [r3, #0]
 80463fa:	08db      	lsrs	r3, r3, #3
 80463fc:	f003 0303 	and.w	r3, r3, #3
 8046400:	4a07      	ldr	r2, [pc, #28]	@ (8046420 <UART_SetConfig+0x6ac>)
 8046402:	fa22 f303 	lsr.w	r3, r2, r3
 8046406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8046408:	e01c      	b.n	8046444 <UART_SetConfig+0x6d0>
 804640a:	bf00      	nop
 804640c:	40011400 	.word	0x40011400
 8046410:	58024400 	.word	0x58024400
 8046414:	40007800 	.word	0x40007800
 8046418:	40007c00 	.word	0x40007c00
 804641c:	58000c00 	.word	0x58000c00
 8046420:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8046424:	4b9d      	ldr	r3, [pc, #628]	@ (804669c <UART_SetConfig+0x928>)
 8046426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046428:	e00c      	b.n	8046444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 804642a:	4b9d      	ldr	r3, [pc, #628]	@ (80466a0 <UART_SetConfig+0x92c>)
 804642c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804642e:	e009      	b.n	8046444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8046430:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8046434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046436:	e005      	b.n	8046444 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8046438:	2300      	movs	r3, #0
 804643a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 804643c:	2301      	movs	r3, #1
 804643e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8046442:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8046444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8046446:	2b00      	cmp	r3, #0
 8046448:	f000 81de 	beq.w	8046808 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 804644c:	697b      	ldr	r3, [r7, #20]
 804644e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8046450:	4a94      	ldr	r2, [pc, #592]	@ (80466a4 <UART_SetConfig+0x930>)
 8046452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8046456:	461a      	mov	r2, r3
 8046458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804645a:	fbb3 f3f2 	udiv	r3, r3, r2
 804645e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8046460:	697b      	ldr	r3, [r7, #20]
 8046462:	685a      	ldr	r2, [r3, #4]
 8046464:	4613      	mov	r3, r2
 8046466:	005b      	lsls	r3, r3, #1
 8046468:	4413      	add	r3, r2
 804646a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 804646c:	429a      	cmp	r2, r3
 804646e:	d305      	bcc.n	804647c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8046470:	697b      	ldr	r3, [r7, #20]
 8046472:	685b      	ldr	r3, [r3, #4]
 8046474:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8046476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8046478:	429a      	cmp	r2, r3
 804647a:	d903      	bls.n	8046484 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 804647c:	2301      	movs	r3, #1
 804647e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8046482:	e1c1      	b.n	8046808 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8046484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8046486:	2200      	movs	r2, #0
 8046488:	60bb      	str	r3, [r7, #8]
 804648a:	60fa      	str	r2, [r7, #12]
 804648c:	697b      	ldr	r3, [r7, #20]
 804648e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8046490:	4a84      	ldr	r2, [pc, #528]	@ (80466a4 <UART_SetConfig+0x930>)
 8046492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8046496:	b29b      	uxth	r3, r3
 8046498:	2200      	movs	r2, #0
 804649a:	603b      	str	r3, [r7, #0]
 804649c:	607a      	str	r2, [r7, #4]
 804649e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80464a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80464a6:	f7f9 ff6b 	bl	8040380 <__aeabi_uldivmod>
 80464aa:	4602      	mov	r2, r0
 80464ac:	460b      	mov	r3, r1
 80464ae:	4610      	mov	r0, r2
 80464b0:	4619      	mov	r1, r3
 80464b2:	f04f 0200 	mov.w	r2, #0
 80464b6:	f04f 0300 	mov.w	r3, #0
 80464ba:	020b      	lsls	r3, r1, #8
 80464bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80464c0:	0202      	lsls	r2, r0, #8
 80464c2:	6979      	ldr	r1, [r7, #20]
 80464c4:	6849      	ldr	r1, [r1, #4]
 80464c6:	0849      	lsrs	r1, r1, #1
 80464c8:	2000      	movs	r0, #0
 80464ca:	460c      	mov	r4, r1
 80464cc:	4605      	mov	r5, r0
 80464ce:	eb12 0804 	adds.w	r8, r2, r4
 80464d2:	eb43 0905 	adc.w	r9, r3, r5
 80464d6:	697b      	ldr	r3, [r7, #20]
 80464d8:	685b      	ldr	r3, [r3, #4]
 80464da:	2200      	movs	r2, #0
 80464dc:	469a      	mov	sl, r3
 80464de:	4693      	mov	fp, r2
 80464e0:	4652      	mov	r2, sl
 80464e2:	465b      	mov	r3, fp
 80464e4:	4640      	mov	r0, r8
 80464e6:	4649      	mov	r1, r9
 80464e8:	f7f9 ff4a 	bl	8040380 <__aeabi_uldivmod>
 80464ec:	4602      	mov	r2, r0
 80464ee:	460b      	mov	r3, r1
 80464f0:	4613      	mov	r3, r2
 80464f2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80464f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80464f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80464fa:	d308      	bcc.n	804650e <UART_SetConfig+0x79a>
 80464fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80464fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8046502:	d204      	bcs.n	804650e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8046504:	697b      	ldr	r3, [r7, #20]
 8046506:	681b      	ldr	r3, [r3, #0]
 8046508:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 804650a:	60da      	str	r2, [r3, #12]
 804650c:	e17c      	b.n	8046808 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 804650e:	2301      	movs	r3, #1
 8046510:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8046514:	e178      	b.n	8046808 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8046516:	697b      	ldr	r3, [r7, #20]
 8046518:	69db      	ldr	r3, [r3, #28]
 804651a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 804651e:	f040 80c5 	bne.w	80466ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8046522:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8046526:	2b20      	cmp	r3, #32
 8046528:	dc48      	bgt.n	80465bc <UART_SetConfig+0x848>
 804652a:	2b00      	cmp	r3, #0
 804652c:	db7b      	blt.n	8046626 <UART_SetConfig+0x8b2>
 804652e:	2b20      	cmp	r3, #32
 8046530:	d879      	bhi.n	8046626 <UART_SetConfig+0x8b2>
 8046532:	a201      	add	r2, pc, #4	@ (adr r2, 8046538 <UART_SetConfig+0x7c4>)
 8046534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046538:	080465c3 	.word	0x080465c3
 804653c:	080465cb 	.word	0x080465cb
 8046540:	08046627 	.word	0x08046627
 8046544:	08046627 	.word	0x08046627
 8046548:	080465d3 	.word	0x080465d3
 804654c:	08046627 	.word	0x08046627
 8046550:	08046627 	.word	0x08046627
 8046554:	08046627 	.word	0x08046627
 8046558:	080465e3 	.word	0x080465e3
 804655c:	08046627 	.word	0x08046627
 8046560:	08046627 	.word	0x08046627
 8046564:	08046627 	.word	0x08046627
 8046568:	08046627 	.word	0x08046627
 804656c:	08046627 	.word	0x08046627
 8046570:	08046627 	.word	0x08046627
 8046574:	08046627 	.word	0x08046627
 8046578:	080465f3 	.word	0x080465f3
 804657c:	08046627 	.word	0x08046627
 8046580:	08046627 	.word	0x08046627
 8046584:	08046627 	.word	0x08046627
 8046588:	08046627 	.word	0x08046627
 804658c:	08046627 	.word	0x08046627
 8046590:	08046627 	.word	0x08046627
 8046594:	08046627 	.word	0x08046627
 8046598:	08046627 	.word	0x08046627
 804659c:	08046627 	.word	0x08046627
 80465a0:	08046627 	.word	0x08046627
 80465a4:	08046627 	.word	0x08046627
 80465a8:	08046627 	.word	0x08046627
 80465ac:	08046627 	.word	0x08046627
 80465b0:	08046627 	.word	0x08046627
 80465b4:	08046627 	.word	0x08046627
 80465b8:	08046619 	.word	0x08046619
 80465bc:	2b40      	cmp	r3, #64	@ 0x40
 80465be:	d02e      	beq.n	804661e <UART_SetConfig+0x8aa>
 80465c0:	e031      	b.n	8046626 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80465c2:	f7fd fcef 	bl	8043fa4 <HAL_RCC_GetPCLK1Freq>
 80465c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80465c8:	e033      	b.n	8046632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80465ca:	f7fd fd01 	bl	8043fd0 <HAL_RCC_GetPCLK2Freq>
 80465ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80465d0:	e02f      	b.n	8046632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80465d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80465d6:	4618      	mov	r0, r3
 80465d8:	f7fe ff70 	bl	80454bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80465dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80465de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80465e0:	e027      	b.n	8046632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80465e2:	f107 0318 	add.w	r3, r7, #24
 80465e6:	4618      	mov	r0, r3
 80465e8:	f7ff f8bc 	bl	8045764 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80465ec:	69fb      	ldr	r3, [r7, #28]
 80465ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80465f0:	e01f      	b.n	8046632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80465f2:	4b2d      	ldr	r3, [pc, #180]	@ (80466a8 <UART_SetConfig+0x934>)
 80465f4:	681b      	ldr	r3, [r3, #0]
 80465f6:	f003 0320 	and.w	r3, r3, #32
 80465fa:	2b00      	cmp	r3, #0
 80465fc:	d009      	beq.n	8046612 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80465fe:	4b2a      	ldr	r3, [pc, #168]	@ (80466a8 <UART_SetConfig+0x934>)
 8046600:	681b      	ldr	r3, [r3, #0]
 8046602:	08db      	lsrs	r3, r3, #3
 8046604:	f003 0303 	and.w	r3, r3, #3
 8046608:	4a24      	ldr	r2, [pc, #144]	@ (804669c <UART_SetConfig+0x928>)
 804660a:	fa22 f303 	lsr.w	r3, r2, r3
 804660e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8046610:	e00f      	b.n	8046632 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8046612:	4b22      	ldr	r3, [pc, #136]	@ (804669c <UART_SetConfig+0x928>)
 8046614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046616:	e00c      	b.n	8046632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8046618:	4b21      	ldr	r3, [pc, #132]	@ (80466a0 <UART_SetConfig+0x92c>)
 804661a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804661c:	e009      	b.n	8046632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804661e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8046622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046624:	e005      	b.n	8046632 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8046626:	2300      	movs	r3, #0
 8046628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 804662a:	2301      	movs	r3, #1
 804662c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8046630:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8046632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8046634:	2b00      	cmp	r3, #0
 8046636:	f000 80e7 	beq.w	8046808 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804663a:	697b      	ldr	r3, [r7, #20]
 804663c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804663e:	4a19      	ldr	r2, [pc, #100]	@ (80466a4 <UART_SetConfig+0x930>)
 8046640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8046644:	461a      	mov	r2, r3
 8046646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8046648:	fbb3 f3f2 	udiv	r3, r3, r2
 804664c:	005a      	lsls	r2, r3, #1
 804664e:	697b      	ldr	r3, [r7, #20]
 8046650:	685b      	ldr	r3, [r3, #4]
 8046652:	085b      	lsrs	r3, r3, #1
 8046654:	441a      	add	r2, r3
 8046656:	697b      	ldr	r3, [r7, #20]
 8046658:	685b      	ldr	r3, [r3, #4]
 804665a:	fbb2 f3f3 	udiv	r3, r2, r3
 804665e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8046660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046662:	2b0f      	cmp	r3, #15
 8046664:	d916      	bls.n	8046694 <UART_SetConfig+0x920>
 8046666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 804666c:	d212      	bcs.n	8046694 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 804666e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046670:	b29b      	uxth	r3, r3
 8046672:	f023 030f 	bic.w	r3, r3, #15
 8046676:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8046678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804667a:	085b      	lsrs	r3, r3, #1
 804667c:	b29b      	uxth	r3, r3
 804667e:	f003 0307 	and.w	r3, r3, #7
 8046682:	b29a      	uxth	r2, r3
 8046684:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8046686:	4313      	orrs	r3, r2
 8046688:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 804668a:	697b      	ldr	r3, [r7, #20]
 804668c:	681b      	ldr	r3, [r3, #0]
 804668e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8046690:	60da      	str	r2, [r3, #12]
 8046692:	e0b9      	b.n	8046808 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8046694:	2301      	movs	r3, #1
 8046696:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 804669a:	e0b5      	b.n	8046808 <UART_SetConfig+0xa94>
 804669c:	03d09000 	.word	0x03d09000
 80466a0:	003d0900 	.word	0x003d0900
 80466a4:	0804b8d8 	.word	0x0804b8d8
 80466a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80466ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80466b0:	2b20      	cmp	r3, #32
 80466b2:	dc49      	bgt.n	8046748 <UART_SetConfig+0x9d4>
 80466b4:	2b00      	cmp	r3, #0
 80466b6:	db7c      	blt.n	80467b2 <UART_SetConfig+0xa3e>
 80466b8:	2b20      	cmp	r3, #32
 80466ba:	d87a      	bhi.n	80467b2 <UART_SetConfig+0xa3e>
 80466bc:	a201      	add	r2, pc, #4	@ (adr r2, 80466c4 <UART_SetConfig+0x950>)
 80466be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80466c2:	bf00      	nop
 80466c4:	0804674f 	.word	0x0804674f
 80466c8:	08046757 	.word	0x08046757
 80466cc:	080467b3 	.word	0x080467b3
 80466d0:	080467b3 	.word	0x080467b3
 80466d4:	0804675f 	.word	0x0804675f
 80466d8:	080467b3 	.word	0x080467b3
 80466dc:	080467b3 	.word	0x080467b3
 80466e0:	080467b3 	.word	0x080467b3
 80466e4:	0804676f 	.word	0x0804676f
 80466e8:	080467b3 	.word	0x080467b3
 80466ec:	080467b3 	.word	0x080467b3
 80466f0:	080467b3 	.word	0x080467b3
 80466f4:	080467b3 	.word	0x080467b3
 80466f8:	080467b3 	.word	0x080467b3
 80466fc:	080467b3 	.word	0x080467b3
 8046700:	080467b3 	.word	0x080467b3
 8046704:	0804677f 	.word	0x0804677f
 8046708:	080467b3 	.word	0x080467b3
 804670c:	080467b3 	.word	0x080467b3
 8046710:	080467b3 	.word	0x080467b3
 8046714:	080467b3 	.word	0x080467b3
 8046718:	080467b3 	.word	0x080467b3
 804671c:	080467b3 	.word	0x080467b3
 8046720:	080467b3 	.word	0x080467b3
 8046724:	080467b3 	.word	0x080467b3
 8046728:	080467b3 	.word	0x080467b3
 804672c:	080467b3 	.word	0x080467b3
 8046730:	080467b3 	.word	0x080467b3
 8046734:	080467b3 	.word	0x080467b3
 8046738:	080467b3 	.word	0x080467b3
 804673c:	080467b3 	.word	0x080467b3
 8046740:	080467b3 	.word	0x080467b3
 8046744:	080467a5 	.word	0x080467a5
 8046748:	2b40      	cmp	r3, #64	@ 0x40
 804674a:	d02e      	beq.n	80467aa <UART_SetConfig+0xa36>
 804674c:	e031      	b.n	80467b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 804674e:	f7fd fc29 	bl	8043fa4 <HAL_RCC_GetPCLK1Freq>
 8046752:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8046754:	e033      	b.n	80467be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8046756:	f7fd fc3b 	bl	8043fd0 <HAL_RCC_GetPCLK2Freq>
 804675a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 804675c:	e02f      	b.n	80467be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 804675e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8046762:	4618      	mov	r0, r3
 8046764:	f7fe feaa 	bl	80454bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8046768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804676a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804676c:	e027      	b.n	80467be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 804676e:	f107 0318 	add.w	r3, r7, #24
 8046772:	4618      	mov	r0, r3
 8046774:	f7fe fff6 	bl	8045764 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8046778:	69fb      	ldr	r3, [r7, #28]
 804677a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804677c:	e01f      	b.n	80467be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 804677e:	4b2d      	ldr	r3, [pc, #180]	@ (8046834 <UART_SetConfig+0xac0>)
 8046780:	681b      	ldr	r3, [r3, #0]
 8046782:	f003 0320 	and.w	r3, r3, #32
 8046786:	2b00      	cmp	r3, #0
 8046788:	d009      	beq.n	804679e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 804678a:	4b2a      	ldr	r3, [pc, #168]	@ (8046834 <UART_SetConfig+0xac0>)
 804678c:	681b      	ldr	r3, [r3, #0]
 804678e:	08db      	lsrs	r3, r3, #3
 8046790:	f003 0303 	and.w	r3, r3, #3
 8046794:	4a28      	ldr	r2, [pc, #160]	@ (8046838 <UART_SetConfig+0xac4>)
 8046796:	fa22 f303 	lsr.w	r3, r2, r3
 804679a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 804679c:	e00f      	b.n	80467be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 804679e:	4b26      	ldr	r3, [pc, #152]	@ (8046838 <UART_SetConfig+0xac4>)
 80467a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80467a2:	e00c      	b.n	80467be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80467a4:	4b25      	ldr	r3, [pc, #148]	@ (804683c <UART_SetConfig+0xac8>)
 80467a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80467a8:	e009      	b.n	80467be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80467aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80467ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80467b0:	e005      	b.n	80467be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80467b2:	2300      	movs	r3, #0
 80467b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80467b6:	2301      	movs	r3, #1
 80467b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80467bc:	bf00      	nop
    }

    if (pclk != 0U)
 80467be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80467c0:	2b00      	cmp	r3, #0
 80467c2:	d021      	beq.n	8046808 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80467c4:	697b      	ldr	r3, [r7, #20]
 80467c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80467c8:	4a1d      	ldr	r2, [pc, #116]	@ (8046840 <UART_SetConfig+0xacc>)
 80467ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80467ce:	461a      	mov	r2, r3
 80467d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80467d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80467d6:	697b      	ldr	r3, [r7, #20]
 80467d8:	685b      	ldr	r3, [r3, #4]
 80467da:	085b      	lsrs	r3, r3, #1
 80467dc:	441a      	add	r2, r3
 80467de:	697b      	ldr	r3, [r7, #20]
 80467e0:	685b      	ldr	r3, [r3, #4]
 80467e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80467e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80467e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80467ea:	2b0f      	cmp	r3, #15
 80467ec:	d909      	bls.n	8046802 <UART_SetConfig+0xa8e>
 80467ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80467f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80467f4:	d205      	bcs.n	8046802 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80467f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80467f8:	b29a      	uxth	r2, r3
 80467fa:	697b      	ldr	r3, [r7, #20]
 80467fc:	681b      	ldr	r3, [r3, #0]
 80467fe:	60da      	str	r2, [r3, #12]
 8046800:	e002      	b.n	8046808 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8046802:	2301      	movs	r3, #1
 8046804:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8046808:	697b      	ldr	r3, [r7, #20]
 804680a:	2201      	movs	r2, #1
 804680c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8046810:	697b      	ldr	r3, [r7, #20]
 8046812:	2201      	movs	r2, #1
 8046814:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8046818:	697b      	ldr	r3, [r7, #20]
 804681a:	2200      	movs	r2, #0
 804681c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 804681e:	697b      	ldr	r3, [r7, #20]
 8046820:	2200      	movs	r2, #0
 8046822:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8046824:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8046828:	4618      	mov	r0, r3
 804682a:	3748      	adds	r7, #72	@ 0x48
 804682c:	46bd      	mov	sp, r7
 804682e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8046832:	bf00      	nop
 8046834:	58024400 	.word	0x58024400
 8046838:	03d09000 	.word	0x03d09000
 804683c:	003d0900 	.word	0x003d0900
 8046840:	0804b8d8 	.word	0x0804b8d8

08046844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8046844:	b480      	push	{r7}
 8046846:	b083      	sub	sp, #12
 8046848:	af00      	add	r7, sp, #0
 804684a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 804684c:	687b      	ldr	r3, [r7, #4]
 804684e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046850:	f003 0308 	and.w	r3, r3, #8
 8046854:	2b00      	cmp	r3, #0
 8046856:	d00a      	beq.n	804686e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8046858:	687b      	ldr	r3, [r7, #4]
 804685a:	681b      	ldr	r3, [r3, #0]
 804685c:	685b      	ldr	r3, [r3, #4]
 804685e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8046862:	687b      	ldr	r3, [r7, #4]
 8046864:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8046866:	687b      	ldr	r3, [r7, #4]
 8046868:	681b      	ldr	r3, [r3, #0]
 804686a:	430a      	orrs	r2, r1
 804686c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 804686e:	687b      	ldr	r3, [r7, #4]
 8046870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046872:	f003 0301 	and.w	r3, r3, #1
 8046876:	2b00      	cmp	r3, #0
 8046878:	d00a      	beq.n	8046890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 804687a:	687b      	ldr	r3, [r7, #4]
 804687c:	681b      	ldr	r3, [r3, #0]
 804687e:	685b      	ldr	r3, [r3, #4]
 8046880:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8046884:	687b      	ldr	r3, [r7, #4]
 8046886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8046888:	687b      	ldr	r3, [r7, #4]
 804688a:	681b      	ldr	r3, [r3, #0]
 804688c:	430a      	orrs	r2, r1
 804688e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8046890:	687b      	ldr	r3, [r7, #4]
 8046892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046894:	f003 0302 	and.w	r3, r3, #2
 8046898:	2b00      	cmp	r3, #0
 804689a:	d00a      	beq.n	80468b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 804689c:	687b      	ldr	r3, [r7, #4]
 804689e:	681b      	ldr	r3, [r3, #0]
 80468a0:	685b      	ldr	r3, [r3, #4]
 80468a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80468a6:	687b      	ldr	r3, [r7, #4]
 80468a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80468aa:	687b      	ldr	r3, [r7, #4]
 80468ac:	681b      	ldr	r3, [r3, #0]
 80468ae:	430a      	orrs	r2, r1
 80468b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80468b2:	687b      	ldr	r3, [r7, #4]
 80468b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80468b6:	f003 0304 	and.w	r3, r3, #4
 80468ba:	2b00      	cmp	r3, #0
 80468bc:	d00a      	beq.n	80468d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80468be:	687b      	ldr	r3, [r7, #4]
 80468c0:	681b      	ldr	r3, [r3, #0]
 80468c2:	685b      	ldr	r3, [r3, #4]
 80468c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80468c8:	687b      	ldr	r3, [r7, #4]
 80468ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80468cc:	687b      	ldr	r3, [r7, #4]
 80468ce:	681b      	ldr	r3, [r3, #0]
 80468d0:	430a      	orrs	r2, r1
 80468d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80468d4:	687b      	ldr	r3, [r7, #4]
 80468d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80468d8:	f003 0310 	and.w	r3, r3, #16
 80468dc:	2b00      	cmp	r3, #0
 80468de:	d00a      	beq.n	80468f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80468e0:	687b      	ldr	r3, [r7, #4]
 80468e2:	681b      	ldr	r3, [r3, #0]
 80468e4:	689b      	ldr	r3, [r3, #8]
 80468e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80468ea:	687b      	ldr	r3, [r7, #4]
 80468ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80468ee:	687b      	ldr	r3, [r7, #4]
 80468f0:	681b      	ldr	r3, [r3, #0]
 80468f2:	430a      	orrs	r2, r1
 80468f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80468f6:	687b      	ldr	r3, [r7, #4]
 80468f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80468fa:	f003 0320 	and.w	r3, r3, #32
 80468fe:	2b00      	cmp	r3, #0
 8046900:	d00a      	beq.n	8046918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8046902:	687b      	ldr	r3, [r7, #4]
 8046904:	681b      	ldr	r3, [r3, #0]
 8046906:	689b      	ldr	r3, [r3, #8]
 8046908:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 804690c:	687b      	ldr	r3, [r7, #4]
 804690e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8046910:	687b      	ldr	r3, [r7, #4]
 8046912:	681b      	ldr	r3, [r3, #0]
 8046914:	430a      	orrs	r2, r1
 8046916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8046918:	687b      	ldr	r3, [r7, #4]
 804691a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804691c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8046920:	2b00      	cmp	r3, #0
 8046922:	d01a      	beq.n	804695a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8046924:	687b      	ldr	r3, [r7, #4]
 8046926:	681b      	ldr	r3, [r3, #0]
 8046928:	685b      	ldr	r3, [r3, #4]
 804692a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 804692e:	687b      	ldr	r3, [r7, #4]
 8046930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8046932:	687b      	ldr	r3, [r7, #4]
 8046934:	681b      	ldr	r3, [r3, #0]
 8046936:	430a      	orrs	r2, r1
 8046938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 804693a:	687b      	ldr	r3, [r7, #4]
 804693c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 804693e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8046942:	d10a      	bne.n	804695a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8046944:	687b      	ldr	r3, [r7, #4]
 8046946:	681b      	ldr	r3, [r3, #0]
 8046948:	685b      	ldr	r3, [r3, #4]
 804694a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 804694e:	687b      	ldr	r3, [r7, #4]
 8046950:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8046952:	687b      	ldr	r3, [r7, #4]
 8046954:	681b      	ldr	r3, [r3, #0]
 8046956:	430a      	orrs	r2, r1
 8046958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 804695a:	687b      	ldr	r3, [r7, #4]
 804695c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804695e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8046962:	2b00      	cmp	r3, #0
 8046964:	d00a      	beq.n	804697c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8046966:	687b      	ldr	r3, [r7, #4]
 8046968:	681b      	ldr	r3, [r3, #0]
 804696a:	685b      	ldr	r3, [r3, #4]
 804696c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8046970:	687b      	ldr	r3, [r7, #4]
 8046972:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8046974:	687b      	ldr	r3, [r7, #4]
 8046976:	681b      	ldr	r3, [r3, #0]
 8046978:	430a      	orrs	r2, r1
 804697a:	605a      	str	r2, [r3, #4]
  }
}
 804697c:	bf00      	nop
 804697e:	370c      	adds	r7, #12
 8046980:	46bd      	mov	sp, r7
 8046982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046986:	4770      	bx	lr

08046988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8046988:	b580      	push	{r7, lr}
 804698a:	b098      	sub	sp, #96	@ 0x60
 804698c:	af02      	add	r7, sp, #8
 804698e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8046990:	687b      	ldr	r3, [r7, #4]
 8046992:	2200      	movs	r2, #0
 8046994:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8046998:	f7fa fb9e 	bl	80410d8 <HAL_GetTick>
 804699c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 804699e:	687b      	ldr	r3, [r7, #4]
 80469a0:	681b      	ldr	r3, [r3, #0]
 80469a2:	681b      	ldr	r3, [r3, #0]
 80469a4:	f003 0308 	and.w	r3, r3, #8
 80469a8:	2b08      	cmp	r3, #8
 80469aa:	d12f      	bne.n	8046a0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80469ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80469b0:	9300      	str	r3, [sp, #0]
 80469b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80469b4:	2200      	movs	r2, #0
 80469b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80469ba:	6878      	ldr	r0, [r7, #4]
 80469bc:	f000 f88e 	bl	8046adc <UART_WaitOnFlagUntilTimeout>
 80469c0:	4603      	mov	r3, r0
 80469c2:	2b00      	cmp	r3, #0
 80469c4:	d022      	beq.n	8046a0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80469c6:	687b      	ldr	r3, [r7, #4]
 80469c8:	681b      	ldr	r3, [r3, #0]
 80469ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80469cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80469ce:	e853 3f00 	ldrex	r3, [r3]
 80469d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80469d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80469d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80469da:	653b      	str	r3, [r7, #80]	@ 0x50
 80469dc:	687b      	ldr	r3, [r7, #4]
 80469de:	681b      	ldr	r3, [r3, #0]
 80469e0:	461a      	mov	r2, r3
 80469e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80469e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80469e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80469e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80469ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80469ec:	e841 2300 	strex	r3, r2, [r1]
 80469f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80469f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80469f4:	2b00      	cmp	r3, #0
 80469f6:	d1e6      	bne.n	80469c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80469f8:	687b      	ldr	r3, [r7, #4]
 80469fa:	2220      	movs	r2, #32
 80469fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8046a00:	687b      	ldr	r3, [r7, #4]
 8046a02:	2200      	movs	r2, #0
 8046a04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8046a08:	2303      	movs	r3, #3
 8046a0a:	e063      	b.n	8046ad4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8046a0c:	687b      	ldr	r3, [r7, #4]
 8046a0e:	681b      	ldr	r3, [r3, #0]
 8046a10:	681b      	ldr	r3, [r3, #0]
 8046a12:	f003 0304 	and.w	r3, r3, #4
 8046a16:	2b04      	cmp	r3, #4
 8046a18:	d149      	bne.n	8046aae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8046a1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8046a1e:	9300      	str	r3, [sp, #0]
 8046a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8046a22:	2200      	movs	r2, #0
 8046a24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8046a28:	6878      	ldr	r0, [r7, #4]
 8046a2a:	f000 f857 	bl	8046adc <UART_WaitOnFlagUntilTimeout>
 8046a2e:	4603      	mov	r3, r0
 8046a30:	2b00      	cmp	r3, #0
 8046a32:	d03c      	beq.n	8046aae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8046a34:	687b      	ldr	r3, [r7, #4]
 8046a36:	681b      	ldr	r3, [r3, #0]
 8046a38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8046a3c:	e853 3f00 	ldrex	r3, [r3]
 8046a40:	623b      	str	r3, [r7, #32]
   return(result);
 8046a42:	6a3b      	ldr	r3, [r7, #32]
 8046a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8046a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8046a4a:	687b      	ldr	r3, [r7, #4]
 8046a4c:	681b      	ldr	r3, [r3, #0]
 8046a4e:	461a      	mov	r2, r3
 8046a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8046a52:	633b      	str	r3, [r7, #48]	@ 0x30
 8046a54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046a56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8046a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8046a5a:	e841 2300 	strex	r3, r2, [r1]
 8046a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8046a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046a62:	2b00      	cmp	r3, #0
 8046a64:	d1e6      	bne.n	8046a34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8046a66:	687b      	ldr	r3, [r7, #4]
 8046a68:	681b      	ldr	r3, [r3, #0]
 8046a6a:	3308      	adds	r3, #8
 8046a6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046a6e:	693b      	ldr	r3, [r7, #16]
 8046a70:	e853 3f00 	ldrex	r3, [r3]
 8046a74:	60fb      	str	r3, [r7, #12]
   return(result);
 8046a76:	68fb      	ldr	r3, [r7, #12]
 8046a78:	f023 0301 	bic.w	r3, r3, #1
 8046a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8046a7e:	687b      	ldr	r3, [r7, #4]
 8046a80:	681b      	ldr	r3, [r3, #0]
 8046a82:	3308      	adds	r3, #8
 8046a84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8046a86:	61fa      	str	r2, [r7, #28]
 8046a88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046a8a:	69b9      	ldr	r1, [r7, #24]
 8046a8c:	69fa      	ldr	r2, [r7, #28]
 8046a8e:	e841 2300 	strex	r3, r2, [r1]
 8046a92:	617b      	str	r3, [r7, #20]
   return(result);
 8046a94:	697b      	ldr	r3, [r7, #20]
 8046a96:	2b00      	cmp	r3, #0
 8046a98:	d1e5      	bne.n	8046a66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8046a9a:	687b      	ldr	r3, [r7, #4]
 8046a9c:	2220      	movs	r2, #32
 8046a9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8046aa2:	687b      	ldr	r3, [r7, #4]
 8046aa4:	2200      	movs	r2, #0
 8046aa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8046aaa:	2303      	movs	r3, #3
 8046aac:	e012      	b.n	8046ad4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8046aae:	687b      	ldr	r3, [r7, #4]
 8046ab0:	2220      	movs	r2, #32
 8046ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8046ab6:	687b      	ldr	r3, [r7, #4]
 8046ab8:	2220      	movs	r2, #32
 8046aba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8046abe:	687b      	ldr	r3, [r7, #4]
 8046ac0:	2200      	movs	r2, #0
 8046ac2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8046ac4:	687b      	ldr	r3, [r7, #4]
 8046ac6:	2200      	movs	r2, #0
 8046ac8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8046aca:	687b      	ldr	r3, [r7, #4]
 8046acc:	2200      	movs	r2, #0
 8046ace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8046ad2:	2300      	movs	r3, #0
}
 8046ad4:	4618      	mov	r0, r3
 8046ad6:	3758      	adds	r7, #88	@ 0x58
 8046ad8:	46bd      	mov	sp, r7
 8046ada:	bd80      	pop	{r7, pc}

08046adc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8046adc:	b580      	push	{r7, lr}
 8046ade:	b084      	sub	sp, #16
 8046ae0:	af00      	add	r7, sp, #0
 8046ae2:	60f8      	str	r0, [r7, #12]
 8046ae4:	60b9      	str	r1, [r7, #8]
 8046ae6:	603b      	str	r3, [r7, #0]
 8046ae8:	4613      	mov	r3, r2
 8046aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8046aec:	e04f      	b.n	8046b8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8046aee:	69bb      	ldr	r3, [r7, #24]
 8046af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046af4:	d04b      	beq.n	8046b8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8046af6:	f7fa faef 	bl	80410d8 <HAL_GetTick>
 8046afa:	4602      	mov	r2, r0
 8046afc:	683b      	ldr	r3, [r7, #0]
 8046afe:	1ad3      	subs	r3, r2, r3
 8046b00:	69ba      	ldr	r2, [r7, #24]
 8046b02:	429a      	cmp	r2, r3
 8046b04:	d302      	bcc.n	8046b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8046b06:	69bb      	ldr	r3, [r7, #24]
 8046b08:	2b00      	cmp	r3, #0
 8046b0a:	d101      	bne.n	8046b10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8046b0c:	2303      	movs	r3, #3
 8046b0e:	e04e      	b.n	8046bae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8046b10:	68fb      	ldr	r3, [r7, #12]
 8046b12:	681b      	ldr	r3, [r3, #0]
 8046b14:	681b      	ldr	r3, [r3, #0]
 8046b16:	f003 0304 	and.w	r3, r3, #4
 8046b1a:	2b00      	cmp	r3, #0
 8046b1c:	d037      	beq.n	8046b8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8046b1e:	68bb      	ldr	r3, [r7, #8]
 8046b20:	2b80      	cmp	r3, #128	@ 0x80
 8046b22:	d034      	beq.n	8046b8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8046b24:	68bb      	ldr	r3, [r7, #8]
 8046b26:	2b40      	cmp	r3, #64	@ 0x40
 8046b28:	d031      	beq.n	8046b8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8046b2a:	68fb      	ldr	r3, [r7, #12]
 8046b2c:	681b      	ldr	r3, [r3, #0]
 8046b2e:	69db      	ldr	r3, [r3, #28]
 8046b30:	f003 0308 	and.w	r3, r3, #8
 8046b34:	2b08      	cmp	r3, #8
 8046b36:	d110      	bne.n	8046b5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8046b38:	68fb      	ldr	r3, [r7, #12]
 8046b3a:	681b      	ldr	r3, [r3, #0]
 8046b3c:	2208      	movs	r2, #8
 8046b3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8046b40:	68f8      	ldr	r0, [r7, #12]
 8046b42:	f000 f839 	bl	8046bb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8046b46:	68fb      	ldr	r3, [r7, #12]
 8046b48:	2208      	movs	r2, #8
 8046b4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8046b4e:	68fb      	ldr	r3, [r7, #12]
 8046b50:	2200      	movs	r2, #0
 8046b52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8046b56:	2301      	movs	r3, #1
 8046b58:	e029      	b.n	8046bae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8046b5a:	68fb      	ldr	r3, [r7, #12]
 8046b5c:	681b      	ldr	r3, [r3, #0]
 8046b5e:	69db      	ldr	r3, [r3, #28]
 8046b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8046b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8046b68:	d111      	bne.n	8046b8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8046b6a:	68fb      	ldr	r3, [r7, #12]
 8046b6c:	681b      	ldr	r3, [r3, #0]
 8046b6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8046b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8046b74:	68f8      	ldr	r0, [r7, #12]
 8046b76:	f000 f81f 	bl	8046bb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8046b7a:	68fb      	ldr	r3, [r7, #12]
 8046b7c:	2220      	movs	r2, #32
 8046b7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8046b82:	68fb      	ldr	r3, [r7, #12]
 8046b84:	2200      	movs	r2, #0
 8046b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8046b8a:	2303      	movs	r3, #3
 8046b8c:	e00f      	b.n	8046bae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8046b8e:	68fb      	ldr	r3, [r7, #12]
 8046b90:	681b      	ldr	r3, [r3, #0]
 8046b92:	69da      	ldr	r2, [r3, #28]
 8046b94:	68bb      	ldr	r3, [r7, #8]
 8046b96:	4013      	ands	r3, r2
 8046b98:	68ba      	ldr	r2, [r7, #8]
 8046b9a:	429a      	cmp	r2, r3
 8046b9c:	bf0c      	ite	eq
 8046b9e:	2301      	moveq	r3, #1
 8046ba0:	2300      	movne	r3, #0
 8046ba2:	b2db      	uxtb	r3, r3
 8046ba4:	461a      	mov	r2, r3
 8046ba6:	79fb      	ldrb	r3, [r7, #7]
 8046ba8:	429a      	cmp	r2, r3
 8046baa:	d0a0      	beq.n	8046aee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8046bac:	2300      	movs	r3, #0
}
 8046bae:	4618      	mov	r0, r3
 8046bb0:	3710      	adds	r7, #16
 8046bb2:	46bd      	mov	sp, r7
 8046bb4:	bd80      	pop	{r7, pc}
	...

08046bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8046bb8:	b480      	push	{r7}
 8046bba:	b095      	sub	sp, #84	@ 0x54
 8046bbc:	af00      	add	r7, sp, #0
 8046bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8046bc0:	687b      	ldr	r3, [r7, #4]
 8046bc2:	681b      	ldr	r3, [r3, #0]
 8046bc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8046bc8:	e853 3f00 	ldrex	r3, [r3]
 8046bcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8046bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8046bd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8046bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8046bd6:	687b      	ldr	r3, [r7, #4]
 8046bd8:	681b      	ldr	r3, [r3, #0]
 8046bda:	461a      	mov	r2, r3
 8046bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8046bde:	643b      	str	r3, [r7, #64]	@ 0x40
 8046be0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046be2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8046be4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8046be6:	e841 2300 	strex	r3, r2, [r1]
 8046bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8046bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046bee:	2b00      	cmp	r3, #0
 8046bf0:	d1e6      	bne.n	8046bc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8046bf2:	687b      	ldr	r3, [r7, #4]
 8046bf4:	681b      	ldr	r3, [r3, #0]
 8046bf6:	3308      	adds	r3, #8
 8046bf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046bfa:	6a3b      	ldr	r3, [r7, #32]
 8046bfc:	e853 3f00 	ldrex	r3, [r3]
 8046c00:	61fb      	str	r3, [r7, #28]
   return(result);
 8046c02:	69fa      	ldr	r2, [r7, #28]
 8046c04:	4b1e      	ldr	r3, [pc, #120]	@ (8046c80 <UART_EndRxTransfer+0xc8>)
 8046c06:	4013      	ands	r3, r2
 8046c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8046c0a:	687b      	ldr	r3, [r7, #4]
 8046c0c:	681b      	ldr	r3, [r3, #0]
 8046c0e:	3308      	adds	r3, #8
 8046c10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8046c12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8046c14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046c16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8046c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8046c1a:	e841 2300 	strex	r3, r2, [r1]
 8046c1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8046c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8046c22:	2b00      	cmp	r3, #0
 8046c24:	d1e5      	bne.n	8046bf2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8046c26:	687b      	ldr	r3, [r7, #4]
 8046c28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8046c2a:	2b01      	cmp	r3, #1
 8046c2c:	d118      	bne.n	8046c60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8046c2e:	687b      	ldr	r3, [r7, #4]
 8046c30:	681b      	ldr	r3, [r3, #0]
 8046c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046c34:	68fb      	ldr	r3, [r7, #12]
 8046c36:	e853 3f00 	ldrex	r3, [r3]
 8046c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8046c3c:	68bb      	ldr	r3, [r7, #8]
 8046c3e:	f023 0310 	bic.w	r3, r3, #16
 8046c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8046c44:	687b      	ldr	r3, [r7, #4]
 8046c46:	681b      	ldr	r3, [r3, #0]
 8046c48:	461a      	mov	r2, r3
 8046c4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8046c4c:	61bb      	str	r3, [r7, #24]
 8046c4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046c50:	6979      	ldr	r1, [r7, #20]
 8046c52:	69ba      	ldr	r2, [r7, #24]
 8046c54:	e841 2300 	strex	r3, r2, [r1]
 8046c58:	613b      	str	r3, [r7, #16]
   return(result);
 8046c5a:	693b      	ldr	r3, [r7, #16]
 8046c5c:	2b00      	cmp	r3, #0
 8046c5e:	d1e6      	bne.n	8046c2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8046c60:	687b      	ldr	r3, [r7, #4]
 8046c62:	2220      	movs	r2, #32
 8046c64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8046c68:	687b      	ldr	r3, [r7, #4]
 8046c6a:	2200      	movs	r2, #0
 8046c6c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8046c6e:	687b      	ldr	r3, [r7, #4]
 8046c70:	2200      	movs	r2, #0
 8046c72:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8046c74:	bf00      	nop
 8046c76:	3754      	adds	r7, #84	@ 0x54
 8046c78:	46bd      	mov	sp, r7
 8046c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046c7e:	4770      	bx	lr
 8046c80:	effffffe 	.word	0xeffffffe

08046c84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8046c84:	b480      	push	{r7}
 8046c86:	b085      	sub	sp, #20
 8046c88:	af00      	add	r7, sp, #0
 8046c8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8046c8c:	687b      	ldr	r3, [r7, #4]
 8046c8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8046c92:	2b01      	cmp	r3, #1
 8046c94:	d101      	bne.n	8046c9a <HAL_UARTEx_DisableFifoMode+0x16>
 8046c96:	2302      	movs	r3, #2
 8046c98:	e027      	b.n	8046cea <HAL_UARTEx_DisableFifoMode+0x66>
 8046c9a:	687b      	ldr	r3, [r7, #4]
 8046c9c:	2201      	movs	r2, #1
 8046c9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8046ca2:	687b      	ldr	r3, [r7, #4]
 8046ca4:	2224      	movs	r2, #36	@ 0x24
 8046ca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8046caa:	687b      	ldr	r3, [r7, #4]
 8046cac:	681b      	ldr	r3, [r3, #0]
 8046cae:	681b      	ldr	r3, [r3, #0]
 8046cb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8046cb2:	687b      	ldr	r3, [r7, #4]
 8046cb4:	681b      	ldr	r3, [r3, #0]
 8046cb6:	681a      	ldr	r2, [r3, #0]
 8046cb8:	687b      	ldr	r3, [r7, #4]
 8046cba:	681b      	ldr	r3, [r3, #0]
 8046cbc:	f022 0201 	bic.w	r2, r2, #1
 8046cc0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8046cc2:	68fb      	ldr	r3, [r7, #12]
 8046cc4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8046cc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8046cca:	687b      	ldr	r3, [r7, #4]
 8046ccc:	2200      	movs	r2, #0
 8046cce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8046cd0:	687b      	ldr	r3, [r7, #4]
 8046cd2:	681b      	ldr	r3, [r3, #0]
 8046cd4:	68fa      	ldr	r2, [r7, #12]
 8046cd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8046cd8:	687b      	ldr	r3, [r7, #4]
 8046cda:	2220      	movs	r2, #32
 8046cdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8046ce0:	687b      	ldr	r3, [r7, #4]
 8046ce2:	2200      	movs	r2, #0
 8046ce4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8046ce8:	2300      	movs	r3, #0
}
 8046cea:	4618      	mov	r0, r3
 8046cec:	3714      	adds	r7, #20
 8046cee:	46bd      	mov	sp, r7
 8046cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046cf4:	4770      	bx	lr

08046cf6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8046cf6:	b580      	push	{r7, lr}
 8046cf8:	b084      	sub	sp, #16
 8046cfa:	af00      	add	r7, sp, #0
 8046cfc:	6078      	str	r0, [r7, #4]
 8046cfe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8046d00:	687b      	ldr	r3, [r7, #4]
 8046d02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8046d06:	2b01      	cmp	r3, #1
 8046d08:	d101      	bne.n	8046d0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8046d0a:	2302      	movs	r3, #2
 8046d0c:	e02d      	b.n	8046d6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8046d0e:	687b      	ldr	r3, [r7, #4]
 8046d10:	2201      	movs	r2, #1
 8046d12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8046d16:	687b      	ldr	r3, [r7, #4]
 8046d18:	2224      	movs	r2, #36	@ 0x24
 8046d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8046d1e:	687b      	ldr	r3, [r7, #4]
 8046d20:	681b      	ldr	r3, [r3, #0]
 8046d22:	681b      	ldr	r3, [r3, #0]
 8046d24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8046d26:	687b      	ldr	r3, [r7, #4]
 8046d28:	681b      	ldr	r3, [r3, #0]
 8046d2a:	681a      	ldr	r2, [r3, #0]
 8046d2c:	687b      	ldr	r3, [r7, #4]
 8046d2e:	681b      	ldr	r3, [r3, #0]
 8046d30:	f022 0201 	bic.w	r2, r2, #1
 8046d34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8046d36:	687b      	ldr	r3, [r7, #4]
 8046d38:	681b      	ldr	r3, [r3, #0]
 8046d3a:	689b      	ldr	r3, [r3, #8]
 8046d3c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8046d40:	687b      	ldr	r3, [r7, #4]
 8046d42:	681b      	ldr	r3, [r3, #0]
 8046d44:	683a      	ldr	r2, [r7, #0]
 8046d46:	430a      	orrs	r2, r1
 8046d48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8046d4a:	6878      	ldr	r0, [r7, #4]
 8046d4c:	f000 f850 	bl	8046df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8046d50:	687b      	ldr	r3, [r7, #4]
 8046d52:	681b      	ldr	r3, [r3, #0]
 8046d54:	68fa      	ldr	r2, [r7, #12]
 8046d56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8046d58:	687b      	ldr	r3, [r7, #4]
 8046d5a:	2220      	movs	r2, #32
 8046d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8046d60:	687b      	ldr	r3, [r7, #4]
 8046d62:	2200      	movs	r2, #0
 8046d64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8046d68:	2300      	movs	r3, #0
}
 8046d6a:	4618      	mov	r0, r3
 8046d6c:	3710      	adds	r7, #16
 8046d6e:	46bd      	mov	sp, r7
 8046d70:	bd80      	pop	{r7, pc}

08046d72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8046d72:	b580      	push	{r7, lr}
 8046d74:	b084      	sub	sp, #16
 8046d76:	af00      	add	r7, sp, #0
 8046d78:	6078      	str	r0, [r7, #4]
 8046d7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8046d7c:	687b      	ldr	r3, [r7, #4]
 8046d7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8046d82:	2b01      	cmp	r3, #1
 8046d84:	d101      	bne.n	8046d8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8046d86:	2302      	movs	r3, #2
 8046d88:	e02d      	b.n	8046de6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8046d8a:	687b      	ldr	r3, [r7, #4]
 8046d8c:	2201      	movs	r2, #1
 8046d8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8046d92:	687b      	ldr	r3, [r7, #4]
 8046d94:	2224      	movs	r2, #36	@ 0x24
 8046d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8046d9a:	687b      	ldr	r3, [r7, #4]
 8046d9c:	681b      	ldr	r3, [r3, #0]
 8046d9e:	681b      	ldr	r3, [r3, #0]
 8046da0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8046da2:	687b      	ldr	r3, [r7, #4]
 8046da4:	681b      	ldr	r3, [r3, #0]
 8046da6:	681a      	ldr	r2, [r3, #0]
 8046da8:	687b      	ldr	r3, [r7, #4]
 8046daa:	681b      	ldr	r3, [r3, #0]
 8046dac:	f022 0201 	bic.w	r2, r2, #1
 8046db0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8046db2:	687b      	ldr	r3, [r7, #4]
 8046db4:	681b      	ldr	r3, [r3, #0]
 8046db6:	689b      	ldr	r3, [r3, #8]
 8046db8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8046dbc:	687b      	ldr	r3, [r7, #4]
 8046dbe:	681b      	ldr	r3, [r3, #0]
 8046dc0:	683a      	ldr	r2, [r7, #0]
 8046dc2:	430a      	orrs	r2, r1
 8046dc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8046dc6:	6878      	ldr	r0, [r7, #4]
 8046dc8:	f000 f812 	bl	8046df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8046dcc:	687b      	ldr	r3, [r7, #4]
 8046dce:	681b      	ldr	r3, [r3, #0]
 8046dd0:	68fa      	ldr	r2, [r7, #12]
 8046dd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8046dd4:	687b      	ldr	r3, [r7, #4]
 8046dd6:	2220      	movs	r2, #32
 8046dd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8046ddc:	687b      	ldr	r3, [r7, #4]
 8046dde:	2200      	movs	r2, #0
 8046de0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8046de4:	2300      	movs	r3, #0
}
 8046de6:	4618      	mov	r0, r3
 8046de8:	3710      	adds	r7, #16
 8046dea:	46bd      	mov	sp, r7
 8046dec:	bd80      	pop	{r7, pc}
	...

08046df0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8046df0:	b480      	push	{r7}
 8046df2:	b085      	sub	sp, #20
 8046df4:	af00      	add	r7, sp, #0
 8046df6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8046df8:	687b      	ldr	r3, [r7, #4]
 8046dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8046dfc:	2b00      	cmp	r3, #0
 8046dfe:	d108      	bne.n	8046e12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8046e00:	687b      	ldr	r3, [r7, #4]
 8046e02:	2201      	movs	r2, #1
 8046e04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8046e08:	687b      	ldr	r3, [r7, #4]
 8046e0a:	2201      	movs	r2, #1
 8046e0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8046e10:	e031      	b.n	8046e76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8046e12:	2310      	movs	r3, #16
 8046e14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8046e16:	2310      	movs	r3, #16
 8046e18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8046e1a:	687b      	ldr	r3, [r7, #4]
 8046e1c:	681b      	ldr	r3, [r3, #0]
 8046e1e:	689b      	ldr	r3, [r3, #8]
 8046e20:	0e5b      	lsrs	r3, r3, #25
 8046e22:	b2db      	uxtb	r3, r3
 8046e24:	f003 0307 	and.w	r3, r3, #7
 8046e28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8046e2a:	687b      	ldr	r3, [r7, #4]
 8046e2c:	681b      	ldr	r3, [r3, #0]
 8046e2e:	689b      	ldr	r3, [r3, #8]
 8046e30:	0f5b      	lsrs	r3, r3, #29
 8046e32:	b2db      	uxtb	r3, r3
 8046e34:	f003 0307 	and.w	r3, r3, #7
 8046e38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8046e3a:	7bbb      	ldrb	r3, [r7, #14]
 8046e3c:	7b3a      	ldrb	r2, [r7, #12]
 8046e3e:	4911      	ldr	r1, [pc, #68]	@ (8046e84 <UARTEx_SetNbDataToProcess+0x94>)
 8046e40:	5c8a      	ldrb	r2, [r1, r2]
 8046e42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8046e46:	7b3a      	ldrb	r2, [r7, #12]
 8046e48:	490f      	ldr	r1, [pc, #60]	@ (8046e88 <UARTEx_SetNbDataToProcess+0x98>)
 8046e4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8046e4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8046e50:	b29a      	uxth	r2, r3
 8046e52:	687b      	ldr	r3, [r7, #4]
 8046e54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8046e58:	7bfb      	ldrb	r3, [r7, #15]
 8046e5a:	7b7a      	ldrb	r2, [r7, #13]
 8046e5c:	4909      	ldr	r1, [pc, #36]	@ (8046e84 <UARTEx_SetNbDataToProcess+0x94>)
 8046e5e:	5c8a      	ldrb	r2, [r1, r2]
 8046e60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8046e64:	7b7a      	ldrb	r2, [r7, #13]
 8046e66:	4908      	ldr	r1, [pc, #32]	@ (8046e88 <UARTEx_SetNbDataToProcess+0x98>)
 8046e68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8046e6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8046e6e:	b29a      	uxth	r2, r3
 8046e70:	687b      	ldr	r3, [r7, #4]
 8046e72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8046e76:	bf00      	nop
 8046e78:	3714      	adds	r7, #20
 8046e7a:	46bd      	mov	sp, r7
 8046e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046e80:	4770      	bx	lr
 8046e82:	bf00      	nop
 8046e84:	0804b8f0 	.word	0x0804b8f0
 8046e88:	0804b8f8 	.word	0x0804b8f8

08046e8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8046e8c:	b084      	sub	sp, #16
 8046e8e:	b580      	push	{r7, lr}
 8046e90:	b084      	sub	sp, #16
 8046e92:	af00      	add	r7, sp, #0
 8046e94:	6078      	str	r0, [r7, #4]
 8046e96:	f107 001c 	add.w	r0, r7, #28
 8046e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8046e9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8046ea2:	2b01      	cmp	r3, #1
 8046ea4:	d121      	bne.n	8046eea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8046ea6:	687b      	ldr	r3, [r7, #4]
 8046ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8046eaa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8046eae:	687b      	ldr	r3, [r7, #4]
 8046eb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8046eb2:	687b      	ldr	r3, [r7, #4]
 8046eb4:	68da      	ldr	r2, [r3, #12]
 8046eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8046f68 <USB_CoreInit+0xdc>)
 8046eb8:	4013      	ands	r3, r2
 8046eba:	687a      	ldr	r2, [r7, #4]
 8046ebc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8046ebe:	687b      	ldr	r3, [r7, #4]
 8046ec0:	68db      	ldr	r3, [r3, #12]
 8046ec2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8046ec6:	687b      	ldr	r3, [r7, #4]
 8046ec8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8046eca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8046ece:	2b01      	cmp	r3, #1
 8046ed0:	d105      	bne.n	8046ede <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8046ed2:	687b      	ldr	r3, [r7, #4]
 8046ed4:	68db      	ldr	r3, [r3, #12]
 8046ed6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8046eda:	687b      	ldr	r3, [r7, #4]
 8046edc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8046ede:	6878      	ldr	r0, [r7, #4]
 8046ee0:	f001 fafa 	bl	80484d8 <USB_CoreReset>
 8046ee4:	4603      	mov	r3, r0
 8046ee6:	73fb      	strb	r3, [r7, #15]
 8046ee8:	e01b      	b.n	8046f22 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8046eea:	687b      	ldr	r3, [r7, #4]
 8046eec:	68db      	ldr	r3, [r3, #12]
 8046eee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8046ef2:	687b      	ldr	r3, [r7, #4]
 8046ef4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8046ef6:	6878      	ldr	r0, [r7, #4]
 8046ef8:	f001 faee 	bl	80484d8 <USB_CoreReset>
 8046efc:	4603      	mov	r3, r0
 8046efe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8046f00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8046f04:	2b00      	cmp	r3, #0
 8046f06:	d106      	bne.n	8046f16 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8046f08:	687b      	ldr	r3, [r7, #4]
 8046f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8046f0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8046f10:	687b      	ldr	r3, [r7, #4]
 8046f12:	639a      	str	r2, [r3, #56]	@ 0x38
 8046f14:	e005      	b.n	8046f22 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8046f16:	687b      	ldr	r3, [r7, #4]
 8046f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8046f1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8046f1e:	687b      	ldr	r3, [r7, #4]
 8046f20:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8046f22:	7fbb      	ldrb	r3, [r7, #30]
 8046f24:	2b01      	cmp	r3, #1
 8046f26:	d116      	bne.n	8046f56 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8046f28:	687b      	ldr	r3, [r7, #4]
 8046f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8046f2c:	b29a      	uxth	r2, r3
 8046f2e:	687b      	ldr	r3, [r7, #4]
 8046f30:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8046f32:	687b      	ldr	r3, [r7, #4]
 8046f34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8046f36:	4b0d      	ldr	r3, [pc, #52]	@ (8046f6c <USB_CoreInit+0xe0>)
 8046f38:	4313      	orrs	r3, r2
 8046f3a:	687a      	ldr	r2, [r7, #4]
 8046f3c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8046f3e:	687b      	ldr	r3, [r7, #4]
 8046f40:	689b      	ldr	r3, [r3, #8]
 8046f42:	f043 0206 	orr.w	r2, r3, #6
 8046f46:	687b      	ldr	r3, [r7, #4]
 8046f48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8046f4a:	687b      	ldr	r3, [r7, #4]
 8046f4c:	689b      	ldr	r3, [r3, #8]
 8046f4e:	f043 0220 	orr.w	r2, r3, #32
 8046f52:	687b      	ldr	r3, [r7, #4]
 8046f54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8046f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8046f58:	4618      	mov	r0, r3
 8046f5a:	3710      	adds	r7, #16
 8046f5c:	46bd      	mov	sp, r7
 8046f5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8046f62:	b004      	add	sp, #16
 8046f64:	4770      	bx	lr
 8046f66:	bf00      	nop
 8046f68:	ffbdffbf 	.word	0xffbdffbf
 8046f6c:	03ee0000 	.word	0x03ee0000

08046f70 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8046f70:	b480      	push	{r7}
 8046f72:	b087      	sub	sp, #28
 8046f74:	af00      	add	r7, sp, #0
 8046f76:	60f8      	str	r0, [r7, #12]
 8046f78:	60b9      	str	r1, [r7, #8]
 8046f7a:	4613      	mov	r3, r2
 8046f7c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8046f7e:	79fb      	ldrb	r3, [r7, #7]
 8046f80:	2b02      	cmp	r3, #2
 8046f82:	d165      	bne.n	8047050 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8046f84:	68bb      	ldr	r3, [r7, #8]
 8046f86:	4a41      	ldr	r2, [pc, #260]	@ (804708c <USB_SetTurnaroundTime+0x11c>)
 8046f88:	4293      	cmp	r3, r2
 8046f8a:	d906      	bls.n	8046f9a <USB_SetTurnaroundTime+0x2a>
 8046f8c:	68bb      	ldr	r3, [r7, #8]
 8046f8e:	4a40      	ldr	r2, [pc, #256]	@ (8047090 <USB_SetTurnaroundTime+0x120>)
 8046f90:	4293      	cmp	r3, r2
 8046f92:	d202      	bcs.n	8046f9a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8046f94:	230f      	movs	r3, #15
 8046f96:	617b      	str	r3, [r7, #20]
 8046f98:	e062      	b.n	8047060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8046f9a:	68bb      	ldr	r3, [r7, #8]
 8046f9c:	4a3c      	ldr	r2, [pc, #240]	@ (8047090 <USB_SetTurnaroundTime+0x120>)
 8046f9e:	4293      	cmp	r3, r2
 8046fa0:	d306      	bcc.n	8046fb0 <USB_SetTurnaroundTime+0x40>
 8046fa2:	68bb      	ldr	r3, [r7, #8]
 8046fa4:	4a3b      	ldr	r2, [pc, #236]	@ (8047094 <USB_SetTurnaroundTime+0x124>)
 8046fa6:	4293      	cmp	r3, r2
 8046fa8:	d202      	bcs.n	8046fb0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8046faa:	230e      	movs	r3, #14
 8046fac:	617b      	str	r3, [r7, #20]
 8046fae:	e057      	b.n	8047060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8046fb0:	68bb      	ldr	r3, [r7, #8]
 8046fb2:	4a38      	ldr	r2, [pc, #224]	@ (8047094 <USB_SetTurnaroundTime+0x124>)
 8046fb4:	4293      	cmp	r3, r2
 8046fb6:	d306      	bcc.n	8046fc6 <USB_SetTurnaroundTime+0x56>
 8046fb8:	68bb      	ldr	r3, [r7, #8]
 8046fba:	4a37      	ldr	r2, [pc, #220]	@ (8047098 <USB_SetTurnaroundTime+0x128>)
 8046fbc:	4293      	cmp	r3, r2
 8046fbe:	d202      	bcs.n	8046fc6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8046fc0:	230d      	movs	r3, #13
 8046fc2:	617b      	str	r3, [r7, #20]
 8046fc4:	e04c      	b.n	8047060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8046fc6:	68bb      	ldr	r3, [r7, #8]
 8046fc8:	4a33      	ldr	r2, [pc, #204]	@ (8047098 <USB_SetTurnaroundTime+0x128>)
 8046fca:	4293      	cmp	r3, r2
 8046fcc:	d306      	bcc.n	8046fdc <USB_SetTurnaroundTime+0x6c>
 8046fce:	68bb      	ldr	r3, [r7, #8]
 8046fd0:	4a32      	ldr	r2, [pc, #200]	@ (804709c <USB_SetTurnaroundTime+0x12c>)
 8046fd2:	4293      	cmp	r3, r2
 8046fd4:	d802      	bhi.n	8046fdc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8046fd6:	230c      	movs	r3, #12
 8046fd8:	617b      	str	r3, [r7, #20]
 8046fda:	e041      	b.n	8047060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8046fdc:	68bb      	ldr	r3, [r7, #8]
 8046fde:	4a2f      	ldr	r2, [pc, #188]	@ (804709c <USB_SetTurnaroundTime+0x12c>)
 8046fe0:	4293      	cmp	r3, r2
 8046fe2:	d906      	bls.n	8046ff2 <USB_SetTurnaroundTime+0x82>
 8046fe4:	68bb      	ldr	r3, [r7, #8]
 8046fe6:	4a2e      	ldr	r2, [pc, #184]	@ (80470a0 <USB_SetTurnaroundTime+0x130>)
 8046fe8:	4293      	cmp	r3, r2
 8046fea:	d802      	bhi.n	8046ff2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8046fec:	230b      	movs	r3, #11
 8046fee:	617b      	str	r3, [r7, #20]
 8046ff0:	e036      	b.n	8047060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8046ff2:	68bb      	ldr	r3, [r7, #8]
 8046ff4:	4a2a      	ldr	r2, [pc, #168]	@ (80470a0 <USB_SetTurnaroundTime+0x130>)
 8046ff6:	4293      	cmp	r3, r2
 8046ff8:	d906      	bls.n	8047008 <USB_SetTurnaroundTime+0x98>
 8046ffa:	68bb      	ldr	r3, [r7, #8]
 8046ffc:	4a29      	ldr	r2, [pc, #164]	@ (80470a4 <USB_SetTurnaroundTime+0x134>)
 8046ffe:	4293      	cmp	r3, r2
 8047000:	d802      	bhi.n	8047008 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8047002:	230a      	movs	r3, #10
 8047004:	617b      	str	r3, [r7, #20]
 8047006:	e02b      	b.n	8047060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8047008:	68bb      	ldr	r3, [r7, #8]
 804700a:	4a26      	ldr	r2, [pc, #152]	@ (80470a4 <USB_SetTurnaroundTime+0x134>)
 804700c:	4293      	cmp	r3, r2
 804700e:	d906      	bls.n	804701e <USB_SetTurnaroundTime+0xae>
 8047010:	68bb      	ldr	r3, [r7, #8]
 8047012:	4a25      	ldr	r2, [pc, #148]	@ (80470a8 <USB_SetTurnaroundTime+0x138>)
 8047014:	4293      	cmp	r3, r2
 8047016:	d202      	bcs.n	804701e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8047018:	2309      	movs	r3, #9
 804701a:	617b      	str	r3, [r7, #20]
 804701c:	e020      	b.n	8047060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 804701e:	68bb      	ldr	r3, [r7, #8]
 8047020:	4a21      	ldr	r2, [pc, #132]	@ (80470a8 <USB_SetTurnaroundTime+0x138>)
 8047022:	4293      	cmp	r3, r2
 8047024:	d306      	bcc.n	8047034 <USB_SetTurnaroundTime+0xc4>
 8047026:	68bb      	ldr	r3, [r7, #8]
 8047028:	4a20      	ldr	r2, [pc, #128]	@ (80470ac <USB_SetTurnaroundTime+0x13c>)
 804702a:	4293      	cmp	r3, r2
 804702c:	d802      	bhi.n	8047034 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 804702e:	2308      	movs	r3, #8
 8047030:	617b      	str	r3, [r7, #20]
 8047032:	e015      	b.n	8047060 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8047034:	68bb      	ldr	r3, [r7, #8]
 8047036:	4a1d      	ldr	r2, [pc, #116]	@ (80470ac <USB_SetTurnaroundTime+0x13c>)
 8047038:	4293      	cmp	r3, r2
 804703a:	d906      	bls.n	804704a <USB_SetTurnaroundTime+0xda>
 804703c:	68bb      	ldr	r3, [r7, #8]
 804703e:	4a1c      	ldr	r2, [pc, #112]	@ (80470b0 <USB_SetTurnaroundTime+0x140>)
 8047040:	4293      	cmp	r3, r2
 8047042:	d202      	bcs.n	804704a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8047044:	2307      	movs	r3, #7
 8047046:	617b      	str	r3, [r7, #20]
 8047048:	e00a      	b.n	8047060 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 804704a:	2306      	movs	r3, #6
 804704c:	617b      	str	r3, [r7, #20]
 804704e:	e007      	b.n	8047060 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8047050:	79fb      	ldrb	r3, [r7, #7]
 8047052:	2b00      	cmp	r3, #0
 8047054:	d102      	bne.n	804705c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8047056:	2309      	movs	r3, #9
 8047058:	617b      	str	r3, [r7, #20]
 804705a:	e001      	b.n	8047060 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 804705c:	2309      	movs	r3, #9
 804705e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8047060:	68fb      	ldr	r3, [r7, #12]
 8047062:	68db      	ldr	r3, [r3, #12]
 8047064:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8047068:	68fb      	ldr	r3, [r7, #12]
 804706a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 804706c:	68fb      	ldr	r3, [r7, #12]
 804706e:	68da      	ldr	r2, [r3, #12]
 8047070:	697b      	ldr	r3, [r7, #20]
 8047072:	029b      	lsls	r3, r3, #10
 8047074:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8047078:	431a      	orrs	r2, r3
 804707a:	68fb      	ldr	r3, [r7, #12]
 804707c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 804707e:	2300      	movs	r3, #0
}
 8047080:	4618      	mov	r0, r3
 8047082:	371c      	adds	r7, #28
 8047084:	46bd      	mov	sp, r7
 8047086:	f85d 7b04 	ldr.w	r7, [sp], #4
 804708a:	4770      	bx	lr
 804708c:	00d8acbf 	.word	0x00d8acbf
 8047090:	00e4e1c0 	.word	0x00e4e1c0
 8047094:	00f42400 	.word	0x00f42400
 8047098:	01067380 	.word	0x01067380
 804709c:	011a499f 	.word	0x011a499f
 80470a0:	01312cff 	.word	0x01312cff
 80470a4:	014ca43f 	.word	0x014ca43f
 80470a8:	016e3600 	.word	0x016e3600
 80470ac:	01a6ab1f 	.word	0x01a6ab1f
 80470b0:	01e84800 	.word	0x01e84800

080470b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80470b4:	b480      	push	{r7}
 80470b6:	b083      	sub	sp, #12
 80470b8:	af00      	add	r7, sp, #0
 80470ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80470bc:	687b      	ldr	r3, [r7, #4]
 80470be:	689b      	ldr	r3, [r3, #8]
 80470c0:	f043 0201 	orr.w	r2, r3, #1
 80470c4:	687b      	ldr	r3, [r7, #4]
 80470c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80470c8:	2300      	movs	r3, #0
}
 80470ca:	4618      	mov	r0, r3
 80470cc:	370c      	adds	r7, #12
 80470ce:	46bd      	mov	sp, r7
 80470d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80470d4:	4770      	bx	lr

080470d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80470d6:	b480      	push	{r7}
 80470d8:	b083      	sub	sp, #12
 80470da:	af00      	add	r7, sp, #0
 80470dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80470de:	687b      	ldr	r3, [r7, #4]
 80470e0:	689b      	ldr	r3, [r3, #8]
 80470e2:	f023 0201 	bic.w	r2, r3, #1
 80470e6:	687b      	ldr	r3, [r7, #4]
 80470e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80470ea:	2300      	movs	r3, #0
}
 80470ec:	4618      	mov	r0, r3
 80470ee:	370c      	adds	r7, #12
 80470f0:	46bd      	mov	sp, r7
 80470f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80470f6:	4770      	bx	lr

080470f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80470f8:	b580      	push	{r7, lr}
 80470fa:	b084      	sub	sp, #16
 80470fc:	af00      	add	r7, sp, #0
 80470fe:	6078      	str	r0, [r7, #4]
 8047100:	460b      	mov	r3, r1
 8047102:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8047104:	2300      	movs	r3, #0
 8047106:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8047108:	687b      	ldr	r3, [r7, #4]
 804710a:	68db      	ldr	r3, [r3, #12]
 804710c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8047110:	687b      	ldr	r3, [r7, #4]
 8047112:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8047114:	78fb      	ldrb	r3, [r7, #3]
 8047116:	2b01      	cmp	r3, #1
 8047118:	d115      	bne.n	8047146 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 804711a:	687b      	ldr	r3, [r7, #4]
 804711c:	68db      	ldr	r3, [r3, #12]
 804711e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8047122:	687b      	ldr	r3, [r7, #4]
 8047124:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8047126:	200a      	movs	r0, #10
 8047128:	f7f9 ffe2 	bl	80410f0 <HAL_Delay>
      ms += 10U;
 804712c:	68fb      	ldr	r3, [r7, #12]
 804712e:	330a      	adds	r3, #10
 8047130:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8047132:	6878      	ldr	r0, [r7, #4]
 8047134:	f001 f93f 	bl	80483b6 <USB_GetMode>
 8047138:	4603      	mov	r3, r0
 804713a:	2b01      	cmp	r3, #1
 804713c:	d01e      	beq.n	804717c <USB_SetCurrentMode+0x84>
 804713e:	68fb      	ldr	r3, [r7, #12]
 8047140:	2bc7      	cmp	r3, #199	@ 0xc7
 8047142:	d9f0      	bls.n	8047126 <USB_SetCurrentMode+0x2e>
 8047144:	e01a      	b.n	804717c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8047146:	78fb      	ldrb	r3, [r7, #3]
 8047148:	2b00      	cmp	r3, #0
 804714a:	d115      	bne.n	8047178 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 804714c:	687b      	ldr	r3, [r7, #4]
 804714e:	68db      	ldr	r3, [r3, #12]
 8047150:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8047154:	687b      	ldr	r3, [r7, #4]
 8047156:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8047158:	200a      	movs	r0, #10
 804715a:	f7f9 ffc9 	bl	80410f0 <HAL_Delay>
      ms += 10U;
 804715e:	68fb      	ldr	r3, [r7, #12]
 8047160:	330a      	adds	r3, #10
 8047162:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8047164:	6878      	ldr	r0, [r7, #4]
 8047166:	f001 f926 	bl	80483b6 <USB_GetMode>
 804716a:	4603      	mov	r3, r0
 804716c:	2b00      	cmp	r3, #0
 804716e:	d005      	beq.n	804717c <USB_SetCurrentMode+0x84>
 8047170:	68fb      	ldr	r3, [r7, #12]
 8047172:	2bc7      	cmp	r3, #199	@ 0xc7
 8047174:	d9f0      	bls.n	8047158 <USB_SetCurrentMode+0x60>
 8047176:	e001      	b.n	804717c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8047178:	2301      	movs	r3, #1
 804717a:	e005      	b.n	8047188 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 804717c:	68fb      	ldr	r3, [r7, #12]
 804717e:	2bc8      	cmp	r3, #200	@ 0xc8
 8047180:	d101      	bne.n	8047186 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8047182:	2301      	movs	r3, #1
 8047184:	e000      	b.n	8047188 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8047186:	2300      	movs	r3, #0
}
 8047188:	4618      	mov	r0, r3
 804718a:	3710      	adds	r7, #16
 804718c:	46bd      	mov	sp, r7
 804718e:	bd80      	pop	{r7, pc}

08047190 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8047190:	b084      	sub	sp, #16
 8047192:	b580      	push	{r7, lr}
 8047194:	b086      	sub	sp, #24
 8047196:	af00      	add	r7, sp, #0
 8047198:	6078      	str	r0, [r7, #4]
 804719a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 804719e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80471a2:	2300      	movs	r3, #0
 80471a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80471a6:	687b      	ldr	r3, [r7, #4]
 80471a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80471aa:	2300      	movs	r3, #0
 80471ac:	613b      	str	r3, [r7, #16]
 80471ae:	e009      	b.n	80471c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80471b0:	687a      	ldr	r2, [r7, #4]
 80471b2:	693b      	ldr	r3, [r7, #16]
 80471b4:	3340      	adds	r3, #64	@ 0x40
 80471b6:	009b      	lsls	r3, r3, #2
 80471b8:	4413      	add	r3, r2
 80471ba:	2200      	movs	r2, #0
 80471bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80471be:	693b      	ldr	r3, [r7, #16]
 80471c0:	3301      	adds	r3, #1
 80471c2:	613b      	str	r3, [r7, #16]
 80471c4:	693b      	ldr	r3, [r7, #16]
 80471c6:	2b0e      	cmp	r3, #14
 80471c8:	d9f2      	bls.n	80471b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80471ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80471ce:	2b00      	cmp	r3, #0
 80471d0:	d11c      	bne.n	804720c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80471d2:	68fb      	ldr	r3, [r7, #12]
 80471d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80471d8:	685b      	ldr	r3, [r3, #4]
 80471da:	68fa      	ldr	r2, [r7, #12]
 80471dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80471e0:	f043 0302 	orr.w	r3, r3, #2
 80471e4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80471e6:	687b      	ldr	r3, [r7, #4]
 80471e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80471ea:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80471ee:	687b      	ldr	r3, [r7, #4]
 80471f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80471f2:	687b      	ldr	r3, [r7, #4]
 80471f4:	681b      	ldr	r3, [r3, #0]
 80471f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80471fa:	687b      	ldr	r3, [r7, #4]
 80471fc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80471fe:	687b      	ldr	r3, [r7, #4]
 8047200:	681b      	ldr	r3, [r3, #0]
 8047202:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8047206:	687b      	ldr	r3, [r7, #4]
 8047208:	601a      	str	r2, [r3, #0]
 804720a:	e005      	b.n	8047218 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 804720c:	687b      	ldr	r3, [r7, #4]
 804720e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8047210:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8047214:	687b      	ldr	r3, [r7, #4]
 8047216:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8047218:	68fb      	ldr	r3, [r7, #12]
 804721a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 804721e:	461a      	mov	r2, r3
 8047220:	2300      	movs	r3, #0
 8047222:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8047224:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8047228:	2b01      	cmp	r3, #1
 804722a:	d10d      	bne.n	8047248 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 804722c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8047230:	2b00      	cmp	r3, #0
 8047232:	d104      	bne.n	804723e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8047234:	2100      	movs	r1, #0
 8047236:	6878      	ldr	r0, [r7, #4]
 8047238:	f000 f968 	bl	804750c <USB_SetDevSpeed>
 804723c:	e008      	b.n	8047250 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 804723e:	2101      	movs	r1, #1
 8047240:	6878      	ldr	r0, [r7, #4]
 8047242:	f000 f963 	bl	804750c <USB_SetDevSpeed>
 8047246:	e003      	b.n	8047250 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8047248:	2103      	movs	r1, #3
 804724a:	6878      	ldr	r0, [r7, #4]
 804724c:	f000 f95e 	bl	804750c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8047250:	2110      	movs	r1, #16
 8047252:	6878      	ldr	r0, [r7, #4]
 8047254:	f000 f8fa 	bl	804744c <USB_FlushTxFifo>
 8047258:	4603      	mov	r3, r0
 804725a:	2b00      	cmp	r3, #0
 804725c:	d001      	beq.n	8047262 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 804725e:	2301      	movs	r3, #1
 8047260:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8047262:	6878      	ldr	r0, [r7, #4]
 8047264:	f000 f924 	bl	80474b0 <USB_FlushRxFifo>
 8047268:	4603      	mov	r3, r0
 804726a:	2b00      	cmp	r3, #0
 804726c:	d001      	beq.n	8047272 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 804726e:	2301      	movs	r3, #1
 8047270:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8047272:	68fb      	ldr	r3, [r7, #12]
 8047274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047278:	461a      	mov	r2, r3
 804727a:	2300      	movs	r3, #0
 804727c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 804727e:	68fb      	ldr	r3, [r7, #12]
 8047280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047284:	461a      	mov	r2, r3
 8047286:	2300      	movs	r3, #0
 8047288:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 804728a:	68fb      	ldr	r3, [r7, #12]
 804728c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047290:	461a      	mov	r2, r3
 8047292:	2300      	movs	r3, #0
 8047294:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8047296:	2300      	movs	r3, #0
 8047298:	613b      	str	r3, [r7, #16]
 804729a:	e043      	b.n	8047324 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 804729c:	693b      	ldr	r3, [r7, #16]
 804729e:	015a      	lsls	r2, r3, #5
 80472a0:	68fb      	ldr	r3, [r7, #12]
 80472a2:	4413      	add	r3, r2
 80472a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80472a8:	681b      	ldr	r3, [r3, #0]
 80472aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80472ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80472b2:	d118      	bne.n	80472e6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80472b4:	693b      	ldr	r3, [r7, #16]
 80472b6:	2b00      	cmp	r3, #0
 80472b8:	d10a      	bne.n	80472d0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80472ba:	693b      	ldr	r3, [r7, #16]
 80472bc:	015a      	lsls	r2, r3, #5
 80472be:	68fb      	ldr	r3, [r7, #12]
 80472c0:	4413      	add	r3, r2
 80472c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80472c6:	461a      	mov	r2, r3
 80472c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80472cc:	6013      	str	r3, [r2, #0]
 80472ce:	e013      	b.n	80472f8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80472d0:	693b      	ldr	r3, [r7, #16]
 80472d2:	015a      	lsls	r2, r3, #5
 80472d4:	68fb      	ldr	r3, [r7, #12]
 80472d6:	4413      	add	r3, r2
 80472d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80472dc:	461a      	mov	r2, r3
 80472de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80472e2:	6013      	str	r3, [r2, #0]
 80472e4:	e008      	b.n	80472f8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80472e6:	693b      	ldr	r3, [r7, #16]
 80472e8:	015a      	lsls	r2, r3, #5
 80472ea:	68fb      	ldr	r3, [r7, #12]
 80472ec:	4413      	add	r3, r2
 80472ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80472f2:	461a      	mov	r2, r3
 80472f4:	2300      	movs	r3, #0
 80472f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80472f8:	693b      	ldr	r3, [r7, #16]
 80472fa:	015a      	lsls	r2, r3, #5
 80472fc:	68fb      	ldr	r3, [r7, #12]
 80472fe:	4413      	add	r3, r2
 8047300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047304:	461a      	mov	r2, r3
 8047306:	2300      	movs	r3, #0
 8047308:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 804730a:	693b      	ldr	r3, [r7, #16]
 804730c:	015a      	lsls	r2, r3, #5
 804730e:	68fb      	ldr	r3, [r7, #12]
 8047310:	4413      	add	r3, r2
 8047312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047316:	461a      	mov	r2, r3
 8047318:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 804731c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 804731e:	693b      	ldr	r3, [r7, #16]
 8047320:	3301      	adds	r3, #1
 8047322:	613b      	str	r3, [r7, #16]
 8047324:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8047328:	461a      	mov	r2, r3
 804732a:	693b      	ldr	r3, [r7, #16]
 804732c:	4293      	cmp	r3, r2
 804732e:	d3b5      	bcc.n	804729c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8047330:	2300      	movs	r3, #0
 8047332:	613b      	str	r3, [r7, #16]
 8047334:	e043      	b.n	80473be <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8047336:	693b      	ldr	r3, [r7, #16]
 8047338:	015a      	lsls	r2, r3, #5
 804733a:	68fb      	ldr	r3, [r7, #12]
 804733c:	4413      	add	r3, r2
 804733e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047342:	681b      	ldr	r3, [r3, #0]
 8047344:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047348:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 804734c:	d118      	bne.n	8047380 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 804734e:	693b      	ldr	r3, [r7, #16]
 8047350:	2b00      	cmp	r3, #0
 8047352:	d10a      	bne.n	804736a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8047354:	693b      	ldr	r3, [r7, #16]
 8047356:	015a      	lsls	r2, r3, #5
 8047358:	68fb      	ldr	r3, [r7, #12]
 804735a:	4413      	add	r3, r2
 804735c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047360:	461a      	mov	r2, r3
 8047362:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8047366:	6013      	str	r3, [r2, #0]
 8047368:	e013      	b.n	8047392 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 804736a:	693b      	ldr	r3, [r7, #16]
 804736c:	015a      	lsls	r2, r3, #5
 804736e:	68fb      	ldr	r3, [r7, #12]
 8047370:	4413      	add	r3, r2
 8047372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047376:	461a      	mov	r2, r3
 8047378:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 804737c:	6013      	str	r3, [r2, #0]
 804737e:	e008      	b.n	8047392 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8047380:	693b      	ldr	r3, [r7, #16]
 8047382:	015a      	lsls	r2, r3, #5
 8047384:	68fb      	ldr	r3, [r7, #12]
 8047386:	4413      	add	r3, r2
 8047388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804738c:	461a      	mov	r2, r3
 804738e:	2300      	movs	r3, #0
 8047390:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8047392:	693b      	ldr	r3, [r7, #16]
 8047394:	015a      	lsls	r2, r3, #5
 8047396:	68fb      	ldr	r3, [r7, #12]
 8047398:	4413      	add	r3, r2
 804739a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804739e:	461a      	mov	r2, r3
 80473a0:	2300      	movs	r3, #0
 80473a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80473a4:	693b      	ldr	r3, [r7, #16]
 80473a6:	015a      	lsls	r2, r3, #5
 80473a8:	68fb      	ldr	r3, [r7, #12]
 80473aa:	4413      	add	r3, r2
 80473ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80473b0:	461a      	mov	r2, r3
 80473b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80473b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80473b8:	693b      	ldr	r3, [r7, #16]
 80473ba:	3301      	adds	r3, #1
 80473bc:	613b      	str	r3, [r7, #16]
 80473be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80473c2:	461a      	mov	r2, r3
 80473c4:	693b      	ldr	r3, [r7, #16]
 80473c6:	4293      	cmp	r3, r2
 80473c8:	d3b5      	bcc.n	8047336 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80473ca:	68fb      	ldr	r3, [r7, #12]
 80473cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80473d0:	691b      	ldr	r3, [r3, #16]
 80473d2:	68fa      	ldr	r2, [r7, #12]
 80473d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80473d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80473dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80473de:	687b      	ldr	r3, [r7, #4]
 80473e0:	2200      	movs	r2, #0
 80473e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80473e4:	687b      	ldr	r3, [r7, #4]
 80473e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80473ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80473ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80473f0:	2b00      	cmp	r3, #0
 80473f2:	d105      	bne.n	8047400 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80473f4:	687b      	ldr	r3, [r7, #4]
 80473f6:	699b      	ldr	r3, [r3, #24]
 80473f8:	f043 0210 	orr.w	r2, r3, #16
 80473fc:	687b      	ldr	r3, [r7, #4]
 80473fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8047400:	687b      	ldr	r3, [r7, #4]
 8047402:	699a      	ldr	r2, [r3, #24]
 8047404:	4b0f      	ldr	r3, [pc, #60]	@ (8047444 <USB_DevInit+0x2b4>)
 8047406:	4313      	orrs	r3, r2
 8047408:	687a      	ldr	r2, [r7, #4]
 804740a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 804740c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8047410:	2b00      	cmp	r3, #0
 8047412:	d005      	beq.n	8047420 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8047414:	687b      	ldr	r3, [r7, #4]
 8047416:	699b      	ldr	r3, [r3, #24]
 8047418:	f043 0208 	orr.w	r2, r3, #8
 804741c:	687b      	ldr	r3, [r7, #4]
 804741e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8047420:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8047424:	2b01      	cmp	r3, #1
 8047426:	d105      	bne.n	8047434 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8047428:	687b      	ldr	r3, [r7, #4]
 804742a:	699a      	ldr	r2, [r3, #24]
 804742c:	4b06      	ldr	r3, [pc, #24]	@ (8047448 <USB_DevInit+0x2b8>)
 804742e:	4313      	orrs	r3, r2
 8047430:	687a      	ldr	r2, [r7, #4]
 8047432:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8047434:	7dfb      	ldrb	r3, [r7, #23]
}
 8047436:	4618      	mov	r0, r3
 8047438:	3718      	adds	r7, #24
 804743a:	46bd      	mov	sp, r7
 804743c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8047440:	b004      	add	sp, #16
 8047442:	4770      	bx	lr
 8047444:	803c3800 	.word	0x803c3800
 8047448:	40000004 	.word	0x40000004

0804744c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 804744c:	b480      	push	{r7}
 804744e:	b085      	sub	sp, #20
 8047450:	af00      	add	r7, sp, #0
 8047452:	6078      	str	r0, [r7, #4]
 8047454:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8047456:	2300      	movs	r3, #0
 8047458:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 804745a:	68fb      	ldr	r3, [r7, #12]
 804745c:	3301      	adds	r3, #1
 804745e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8047460:	68fb      	ldr	r3, [r7, #12]
 8047462:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8047466:	d901      	bls.n	804746c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8047468:	2303      	movs	r3, #3
 804746a:	e01b      	b.n	80474a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 804746c:	687b      	ldr	r3, [r7, #4]
 804746e:	691b      	ldr	r3, [r3, #16]
 8047470:	2b00      	cmp	r3, #0
 8047472:	daf2      	bge.n	804745a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8047474:	2300      	movs	r3, #0
 8047476:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8047478:	683b      	ldr	r3, [r7, #0]
 804747a:	019b      	lsls	r3, r3, #6
 804747c:	f043 0220 	orr.w	r2, r3, #32
 8047480:	687b      	ldr	r3, [r7, #4]
 8047482:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8047484:	68fb      	ldr	r3, [r7, #12]
 8047486:	3301      	adds	r3, #1
 8047488:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 804748a:	68fb      	ldr	r3, [r7, #12]
 804748c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8047490:	d901      	bls.n	8047496 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8047492:	2303      	movs	r3, #3
 8047494:	e006      	b.n	80474a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8047496:	687b      	ldr	r3, [r7, #4]
 8047498:	691b      	ldr	r3, [r3, #16]
 804749a:	f003 0320 	and.w	r3, r3, #32
 804749e:	2b20      	cmp	r3, #32
 80474a0:	d0f0      	beq.n	8047484 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80474a2:	2300      	movs	r3, #0
}
 80474a4:	4618      	mov	r0, r3
 80474a6:	3714      	adds	r7, #20
 80474a8:	46bd      	mov	sp, r7
 80474aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80474ae:	4770      	bx	lr

080474b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80474b0:	b480      	push	{r7}
 80474b2:	b085      	sub	sp, #20
 80474b4:	af00      	add	r7, sp, #0
 80474b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80474b8:	2300      	movs	r3, #0
 80474ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80474bc:	68fb      	ldr	r3, [r7, #12]
 80474be:	3301      	adds	r3, #1
 80474c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80474c2:	68fb      	ldr	r3, [r7, #12]
 80474c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80474c8:	d901      	bls.n	80474ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80474ca:	2303      	movs	r3, #3
 80474cc:	e018      	b.n	8047500 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80474ce:	687b      	ldr	r3, [r7, #4]
 80474d0:	691b      	ldr	r3, [r3, #16]
 80474d2:	2b00      	cmp	r3, #0
 80474d4:	daf2      	bge.n	80474bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80474d6:	2300      	movs	r3, #0
 80474d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80474da:	687b      	ldr	r3, [r7, #4]
 80474dc:	2210      	movs	r2, #16
 80474de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80474e0:	68fb      	ldr	r3, [r7, #12]
 80474e2:	3301      	adds	r3, #1
 80474e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80474e6:	68fb      	ldr	r3, [r7, #12]
 80474e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80474ec:	d901      	bls.n	80474f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80474ee:	2303      	movs	r3, #3
 80474f0:	e006      	b.n	8047500 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80474f2:	687b      	ldr	r3, [r7, #4]
 80474f4:	691b      	ldr	r3, [r3, #16]
 80474f6:	f003 0310 	and.w	r3, r3, #16
 80474fa:	2b10      	cmp	r3, #16
 80474fc:	d0f0      	beq.n	80474e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80474fe:	2300      	movs	r3, #0
}
 8047500:	4618      	mov	r0, r3
 8047502:	3714      	adds	r7, #20
 8047504:	46bd      	mov	sp, r7
 8047506:	f85d 7b04 	ldr.w	r7, [sp], #4
 804750a:	4770      	bx	lr

0804750c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 804750c:	b480      	push	{r7}
 804750e:	b085      	sub	sp, #20
 8047510:	af00      	add	r7, sp, #0
 8047512:	6078      	str	r0, [r7, #4]
 8047514:	460b      	mov	r3, r1
 8047516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047518:	687b      	ldr	r3, [r7, #4]
 804751a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 804751c:	68fb      	ldr	r3, [r7, #12]
 804751e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047522:	681a      	ldr	r2, [r3, #0]
 8047524:	78fb      	ldrb	r3, [r7, #3]
 8047526:	68f9      	ldr	r1, [r7, #12]
 8047528:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 804752c:	4313      	orrs	r3, r2
 804752e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8047530:	2300      	movs	r3, #0
}
 8047532:	4618      	mov	r0, r3
 8047534:	3714      	adds	r7, #20
 8047536:	46bd      	mov	sp, r7
 8047538:	f85d 7b04 	ldr.w	r7, [sp], #4
 804753c:	4770      	bx	lr

0804753e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 804753e:	b480      	push	{r7}
 8047540:	b087      	sub	sp, #28
 8047542:	af00      	add	r7, sp, #0
 8047544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047546:	687b      	ldr	r3, [r7, #4]
 8047548:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 804754a:	693b      	ldr	r3, [r7, #16]
 804754c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047550:	689b      	ldr	r3, [r3, #8]
 8047552:	f003 0306 	and.w	r3, r3, #6
 8047556:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8047558:	68fb      	ldr	r3, [r7, #12]
 804755a:	2b00      	cmp	r3, #0
 804755c:	d102      	bne.n	8047564 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 804755e:	2300      	movs	r3, #0
 8047560:	75fb      	strb	r3, [r7, #23]
 8047562:	e00a      	b.n	804757a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8047564:	68fb      	ldr	r3, [r7, #12]
 8047566:	2b02      	cmp	r3, #2
 8047568:	d002      	beq.n	8047570 <USB_GetDevSpeed+0x32>
 804756a:	68fb      	ldr	r3, [r7, #12]
 804756c:	2b06      	cmp	r3, #6
 804756e:	d102      	bne.n	8047576 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8047570:	2302      	movs	r3, #2
 8047572:	75fb      	strb	r3, [r7, #23]
 8047574:	e001      	b.n	804757a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8047576:	230f      	movs	r3, #15
 8047578:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 804757a:	7dfb      	ldrb	r3, [r7, #23]
}
 804757c:	4618      	mov	r0, r3
 804757e:	371c      	adds	r7, #28
 8047580:	46bd      	mov	sp, r7
 8047582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047586:	4770      	bx	lr

08047588 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8047588:	b480      	push	{r7}
 804758a:	b085      	sub	sp, #20
 804758c:	af00      	add	r7, sp, #0
 804758e:	6078      	str	r0, [r7, #4]
 8047590:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047592:	687b      	ldr	r3, [r7, #4]
 8047594:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8047596:	683b      	ldr	r3, [r7, #0]
 8047598:	781b      	ldrb	r3, [r3, #0]
 804759a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 804759c:	683b      	ldr	r3, [r7, #0]
 804759e:	785b      	ldrb	r3, [r3, #1]
 80475a0:	2b01      	cmp	r3, #1
 80475a2:	d139      	bne.n	8047618 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80475a4:	68fb      	ldr	r3, [r7, #12]
 80475a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80475aa:	69da      	ldr	r2, [r3, #28]
 80475ac:	683b      	ldr	r3, [r7, #0]
 80475ae:	781b      	ldrb	r3, [r3, #0]
 80475b0:	f003 030f 	and.w	r3, r3, #15
 80475b4:	2101      	movs	r1, #1
 80475b6:	fa01 f303 	lsl.w	r3, r1, r3
 80475ba:	b29b      	uxth	r3, r3
 80475bc:	68f9      	ldr	r1, [r7, #12]
 80475be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80475c2:	4313      	orrs	r3, r2
 80475c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80475c6:	68bb      	ldr	r3, [r7, #8]
 80475c8:	015a      	lsls	r2, r3, #5
 80475ca:	68fb      	ldr	r3, [r7, #12]
 80475cc:	4413      	add	r3, r2
 80475ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80475d2:	681b      	ldr	r3, [r3, #0]
 80475d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80475d8:	2b00      	cmp	r3, #0
 80475da:	d153      	bne.n	8047684 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80475dc:	68bb      	ldr	r3, [r7, #8]
 80475de:	015a      	lsls	r2, r3, #5
 80475e0:	68fb      	ldr	r3, [r7, #12]
 80475e2:	4413      	add	r3, r2
 80475e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80475e8:	681a      	ldr	r2, [r3, #0]
 80475ea:	683b      	ldr	r3, [r7, #0]
 80475ec:	689b      	ldr	r3, [r3, #8]
 80475ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80475f2:	683b      	ldr	r3, [r7, #0]
 80475f4:	791b      	ldrb	r3, [r3, #4]
 80475f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80475f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80475fa:	68bb      	ldr	r3, [r7, #8]
 80475fc:	059b      	lsls	r3, r3, #22
 80475fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8047600:	431a      	orrs	r2, r3
 8047602:	68bb      	ldr	r3, [r7, #8]
 8047604:	0159      	lsls	r1, r3, #5
 8047606:	68fb      	ldr	r3, [r7, #12]
 8047608:	440b      	add	r3, r1
 804760a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804760e:	4619      	mov	r1, r3
 8047610:	4b20      	ldr	r3, [pc, #128]	@ (8047694 <USB_ActivateEndpoint+0x10c>)
 8047612:	4313      	orrs	r3, r2
 8047614:	600b      	str	r3, [r1, #0]
 8047616:	e035      	b.n	8047684 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8047618:	68fb      	ldr	r3, [r7, #12]
 804761a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804761e:	69da      	ldr	r2, [r3, #28]
 8047620:	683b      	ldr	r3, [r7, #0]
 8047622:	781b      	ldrb	r3, [r3, #0]
 8047624:	f003 030f 	and.w	r3, r3, #15
 8047628:	2101      	movs	r1, #1
 804762a:	fa01 f303 	lsl.w	r3, r1, r3
 804762e:	041b      	lsls	r3, r3, #16
 8047630:	68f9      	ldr	r1, [r7, #12]
 8047632:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8047636:	4313      	orrs	r3, r2
 8047638:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 804763a:	68bb      	ldr	r3, [r7, #8]
 804763c:	015a      	lsls	r2, r3, #5
 804763e:	68fb      	ldr	r3, [r7, #12]
 8047640:	4413      	add	r3, r2
 8047642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047646:	681b      	ldr	r3, [r3, #0]
 8047648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 804764c:	2b00      	cmp	r3, #0
 804764e:	d119      	bne.n	8047684 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8047650:	68bb      	ldr	r3, [r7, #8]
 8047652:	015a      	lsls	r2, r3, #5
 8047654:	68fb      	ldr	r3, [r7, #12]
 8047656:	4413      	add	r3, r2
 8047658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804765c:	681a      	ldr	r2, [r3, #0]
 804765e:	683b      	ldr	r3, [r7, #0]
 8047660:	689b      	ldr	r3, [r3, #8]
 8047662:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8047666:	683b      	ldr	r3, [r7, #0]
 8047668:	791b      	ldrb	r3, [r3, #4]
 804766a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 804766c:	430b      	orrs	r3, r1
 804766e:	431a      	orrs	r2, r3
 8047670:	68bb      	ldr	r3, [r7, #8]
 8047672:	0159      	lsls	r1, r3, #5
 8047674:	68fb      	ldr	r3, [r7, #12]
 8047676:	440b      	add	r3, r1
 8047678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804767c:	4619      	mov	r1, r3
 804767e:	4b05      	ldr	r3, [pc, #20]	@ (8047694 <USB_ActivateEndpoint+0x10c>)
 8047680:	4313      	orrs	r3, r2
 8047682:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8047684:	2300      	movs	r3, #0
}
 8047686:	4618      	mov	r0, r3
 8047688:	3714      	adds	r7, #20
 804768a:	46bd      	mov	sp, r7
 804768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047690:	4770      	bx	lr
 8047692:	bf00      	nop
 8047694:	10008000 	.word	0x10008000

08047698 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8047698:	b480      	push	{r7}
 804769a:	b085      	sub	sp, #20
 804769c:	af00      	add	r7, sp, #0
 804769e:	6078      	str	r0, [r7, #4]
 80476a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80476a2:	687b      	ldr	r3, [r7, #4]
 80476a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80476a6:	683b      	ldr	r3, [r7, #0]
 80476a8:	781b      	ldrb	r3, [r3, #0]
 80476aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80476ac:	683b      	ldr	r3, [r7, #0]
 80476ae:	785b      	ldrb	r3, [r3, #1]
 80476b0:	2b01      	cmp	r3, #1
 80476b2:	d161      	bne.n	8047778 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80476b4:	68bb      	ldr	r3, [r7, #8]
 80476b6:	015a      	lsls	r2, r3, #5
 80476b8:	68fb      	ldr	r3, [r7, #12]
 80476ba:	4413      	add	r3, r2
 80476bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80476c0:	681b      	ldr	r3, [r3, #0]
 80476c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80476c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80476ca:	d11f      	bne.n	804770c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80476cc:	68bb      	ldr	r3, [r7, #8]
 80476ce:	015a      	lsls	r2, r3, #5
 80476d0:	68fb      	ldr	r3, [r7, #12]
 80476d2:	4413      	add	r3, r2
 80476d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80476d8:	681b      	ldr	r3, [r3, #0]
 80476da:	68ba      	ldr	r2, [r7, #8]
 80476dc:	0151      	lsls	r1, r2, #5
 80476de:	68fa      	ldr	r2, [r7, #12]
 80476e0:	440a      	add	r2, r1
 80476e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80476e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80476ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80476ec:	68bb      	ldr	r3, [r7, #8]
 80476ee:	015a      	lsls	r2, r3, #5
 80476f0:	68fb      	ldr	r3, [r7, #12]
 80476f2:	4413      	add	r3, r2
 80476f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80476f8:	681b      	ldr	r3, [r3, #0]
 80476fa:	68ba      	ldr	r2, [r7, #8]
 80476fc:	0151      	lsls	r1, r2, #5
 80476fe:	68fa      	ldr	r2, [r7, #12]
 8047700:	440a      	add	r2, r1
 8047702:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047706:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 804770a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 804770c:	68fb      	ldr	r3, [r7, #12]
 804770e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047712:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8047714:	683b      	ldr	r3, [r7, #0]
 8047716:	781b      	ldrb	r3, [r3, #0]
 8047718:	f003 030f 	and.w	r3, r3, #15
 804771c:	2101      	movs	r1, #1
 804771e:	fa01 f303 	lsl.w	r3, r1, r3
 8047722:	b29b      	uxth	r3, r3
 8047724:	43db      	mvns	r3, r3
 8047726:	68f9      	ldr	r1, [r7, #12]
 8047728:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 804772c:	4013      	ands	r3, r2
 804772e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8047730:	68fb      	ldr	r3, [r7, #12]
 8047732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047736:	69da      	ldr	r2, [r3, #28]
 8047738:	683b      	ldr	r3, [r7, #0]
 804773a:	781b      	ldrb	r3, [r3, #0]
 804773c:	f003 030f 	and.w	r3, r3, #15
 8047740:	2101      	movs	r1, #1
 8047742:	fa01 f303 	lsl.w	r3, r1, r3
 8047746:	b29b      	uxth	r3, r3
 8047748:	43db      	mvns	r3, r3
 804774a:	68f9      	ldr	r1, [r7, #12]
 804774c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8047750:	4013      	ands	r3, r2
 8047752:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8047754:	68bb      	ldr	r3, [r7, #8]
 8047756:	015a      	lsls	r2, r3, #5
 8047758:	68fb      	ldr	r3, [r7, #12]
 804775a:	4413      	add	r3, r2
 804775c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047760:	681a      	ldr	r2, [r3, #0]
 8047762:	68bb      	ldr	r3, [r7, #8]
 8047764:	0159      	lsls	r1, r3, #5
 8047766:	68fb      	ldr	r3, [r7, #12]
 8047768:	440b      	add	r3, r1
 804776a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804776e:	4619      	mov	r1, r3
 8047770:	4b35      	ldr	r3, [pc, #212]	@ (8047848 <USB_DeactivateEndpoint+0x1b0>)
 8047772:	4013      	ands	r3, r2
 8047774:	600b      	str	r3, [r1, #0]
 8047776:	e060      	b.n	804783a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8047778:	68bb      	ldr	r3, [r7, #8]
 804777a:	015a      	lsls	r2, r3, #5
 804777c:	68fb      	ldr	r3, [r7, #12]
 804777e:	4413      	add	r3, r2
 8047780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047784:	681b      	ldr	r3, [r3, #0]
 8047786:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 804778a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 804778e:	d11f      	bne.n	80477d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8047790:	68bb      	ldr	r3, [r7, #8]
 8047792:	015a      	lsls	r2, r3, #5
 8047794:	68fb      	ldr	r3, [r7, #12]
 8047796:	4413      	add	r3, r2
 8047798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804779c:	681b      	ldr	r3, [r3, #0]
 804779e:	68ba      	ldr	r2, [r7, #8]
 80477a0:	0151      	lsls	r1, r2, #5
 80477a2:	68fa      	ldr	r2, [r7, #12]
 80477a4:	440a      	add	r2, r1
 80477a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80477aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80477ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80477b0:	68bb      	ldr	r3, [r7, #8]
 80477b2:	015a      	lsls	r2, r3, #5
 80477b4:	68fb      	ldr	r3, [r7, #12]
 80477b6:	4413      	add	r3, r2
 80477b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80477bc:	681b      	ldr	r3, [r3, #0]
 80477be:	68ba      	ldr	r2, [r7, #8]
 80477c0:	0151      	lsls	r1, r2, #5
 80477c2:	68fa      	ldr	r2, [r7, #12]
 80477c4:	440a      	add	r2, r1
 80477c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80477ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80477ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80477d0:	68fb      	ldr	r3, [r7, #12]
 80477d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80477d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80477d8:	683b      	ldr	r3, [r7, #0]
 80477da:	781b      	ldrb	r3, [r3, #0]
 80477dc:	f003 030f 	and.w	r3, r3, #15
 80477e0:	2101      	movs	r1, #1
 80477e2:	fa01 f303 	lsl.w	r3, r1, r3
 80477e6:	041b      	lsls	r3, r3, #16
 80477e8:	43db      	mvns	r3, r3
 80477ea:	68f9      	ldr	r1, [r7, #12]
 80477ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80477f0:	4013      	ands	r3, r2
 80477f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80477f4:	68fb      	ldr	r3, [r7, #12]
 80477f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80477fa:	69da      	ldr	r2, [r3, #28]
 80477fc:	683b      	ldr	r3, [r7, #0]
 80477fe:	781b      	ldrb	r3, [r3, #0]
 8047800:	f003 030f 	and.w	r3, r3, #15
 8047804:	2101      	movs	r1, #1
 8047806:	fa01 f303 	lsl.w	r3, r1, r3
 804780a:	041b      	lsls	r3, r3, #16
 804780c:	43db      	mvns	r3, r3
 804780e:	68f9      	ldr	r1, [r7, #12]
 8047810:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8047814:	4013      	ands	r3, r2
 8047816:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8047818:	68bb      	ldr	r3, [r7, #8]
 804781a:	015a      	lsls	r2, r3, #5
 804781c:	68fb      	ldr	r3, [r7, #12]
 804781e:	4413      	add	r3, r2
 8047820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047824:	681a      	ldr	r2, [r3, #0]
 8047826:	68bb      	ldr	r3, [r7, #8]
 8047828:	0159      	lsls	r1, r3, #5
 804782a:	68fb      	ldr	r3, [r7, #12]
 804782c:	440b      	add	r3, r1
 804782e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047832:	4619      	mov	r1, r3
 8047834:	4b05      	ldr	r3, [pc, #20]	@ (804784c <USB_DeactivateEndpoint+0x1b4>)
 8047836:	4013      	ands	r3, r2
 8047838:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 804783a:	2300      	movs	r3, #0
}
 804783c:	4618      	mov	r0, r3
 804783e:	3714      	adds	r7, #20
 8047840:	46bd      	mov	sp, r7
 8047842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047846:	4770      	bx	lr
 8047848:	ec337800 	.word	0xec337800
 804784c:	eff37800 	.word	0xeff37800

08047850 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8047850:	b580      	push	{r7, lr}
 8047852:	b08a      	sub	sp, #40	@ 0x28
 8047854:	af02      	add	r7, sp, #8
 8047856:	60f8      	str	r0, [r7, #12]
 8047858:	60b9      	str	r1, [r7, #8]
 804785a:	4613      	mov	r3, r2
 804785c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804785e:	68fb      	ldr	r3, [r7, #12]
 8047860:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8047862:	68bb      	ldr	r3, [r7, #8]
 8047864:	781b      	ldrb	r3, [r3, #0]
 8047866:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8047868:	68bb      	ldr	r3, [r7, #8]
 804786a:	785b      	ldrb	r3, [r3, #1]
 804786c:	2b01      	cmp	r3, #1
 804786e:	f040 8185 	bne.w	8047b7c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8047872:	68bb      	ldr	r3, [r7, #8]
 8047874:	691b      	ldr	r3, [r3, #16]
 8047876:	2b00      	cmp	r3, #0
 8047878:	d132      	bne.n	80478e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 804787a:	69bb      	ldr	r3, [r7, #24]
 804787c:	015a      	lsls	r2, r3, #5
 804787e:	69fb      	ldr	r3, [r7, #28]
 8047880:	4413      	add	r3, r2
 8047882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047886:	691a      	ldr	r2, [r3, #16]
 8047888:	69bb      	ldr	r3, [r7, #24]
 804788a:	0159      	lsls	r1, r3, #5
 804788c:	69fb      	ldr	r3, [r7, #28]
 804788e:	440b      	add	r3, r1
 8047890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047894:	4619      	mov	r1, r3
 8047896:	4ba7      	ldr	r3, [pc, #668]	@ (8047b34 <USB_EPStartXfer+0x2e4>)
 8047898:	4013      	ands	r3, r2
 804789a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 804789c:	69bb      	ldr	r3, [r7, #24]
 804789e:	015a      	lsls	r2, r3, #5
 80478a0:	69fb      	ldr	r3, [r7, #28]
 80478a2:	4413      	add	r3, r2
 80478a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80478a8:	691b      	ldr	r3, [r3, #16]
 80478aa:	69ba      	ldr	r2, [r7, #24]
 80478ac:	0151      	lsls	r1, r2, #5
 80478ae:	69fa      	ldr	r2, [r7, #28]
 80478b0:	440a      	add	r2, r1
 80478b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80478b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80478ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80478bc:	69bb      	ldr	r3, [r7, #24]
 80478be:	015a      	lsls	r2, r3, #5
 80478c0:	69fb      	ldr	r3, [r7, #28]
 80478c2:	4413      	add	r3, r2
 80478c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80478c8:	691a      	ldr	r2, [r3, #16]
 80478ca:	69bb      	ldr	r3, [r7, #24]
 80478cc:	0159      	lsls	r1, r3, #5
 80478ce:	69fb      	ldr	r3, [r7, #28]
 80478d0:	440b      	add	r3, r1
 80478d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80478d6:	4619      	mov	r1, r3
 80478d8:	4b97      	ldr	r3, [pc, #604]	@ (8047b38 <USB_EPStartXfer+0x2e8>)
 80478da:	4013      	ands	r3, r2
 80478dc:	610b      	str	r3, [r1, #16]
 80478de:	e097      	b.n	8047a10 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80478e0:	69bb      	ldr	r3, [r7, #24]
 80478e2:	015a      	lsls	r2, r3, #5
 80478e4:	69fb      	ldr	r3, [r7, #28]
 80478e6:	4413      	add	r3, r2
 80478e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80478ec:	691a      	ldr	r2, [r3, #16]
 80478ee:	69bb      	ldr	r3, [r7, #24]
 80478f0:	0159      	lsls	r1, r3, #5
 80478f2:	69fb      	ldr	r3, [r7, #28]
 80478f4:	440b      	add	r3, r1
 80478f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80478fa:	4619      	mov	r1, r3
 80478fc:	4b8e      	ldr	r3, [pc, #568]	@ (8047b38 <USB_EPStartXfer+0x2e8>)
 80478fe:	4013      	ands	r3, r2
 8047900:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8047902:	69bb      	ldr	r3, [r7, #24]
 8047904:	015a      	lsls	r2, r3, #5
 8047906:	69fb      	ldr	r3, [r7, #28]
 8047908:	4413      	add	r3, r2
 804790a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804790e:	691a      	ldr	r2, [r3, #16]
 8047910:	69bb      	ldr	r3, [r7, #24]
 8047912:	0159      	lsls	r1, r3, #5
 8047914:	69fb      	ldr	r3, [r7, #28]
 8047916:	440b      	add	r3, r1
 8047918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804791c:	4619      	mov	r1, r3
 804791e:	4b85      	ldr	r3, [pc, #532]	@ (8047b34 <USB_EPStartXfer+0x2e4>)
 8047920:	4013      	ands	r3, r2
 8047922:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8047924:	69bb      	ldr	r3, [r7, #24]
 8047926:	2b00      	cmp	r3, #0
 8047928:	d11a      	bne.n	8047960 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 804792a:	68bb      	ldr	r3, [r7, #8]
 804792c:	691a      	ldr	r2, [r3, #16]
 804792e:	68bb      	ldr	r3, [r7, #8]
 8047930:	689b      	ldr	r3, [r3, #8]
 8047932:	429a      	cmp	r2, r3
 8047934:	d903      	bls.n	804793e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8047936:	68bb      	ldr	r3, [r7, #8]
 8047938:	689a      	ldr	r2, [r3, #8]
 804793a:	68bb      	ldr	r3, [r7, #8]
 804793c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 804793e:	69bb      	ldr	r3, [r7, #24]
 8047940:	015a      	lsls	r2, r3, #5
 8047942:	69fb      	ldr	r3, [r7, #28]
 8047944:	4413      	add	r3, r2
 8047946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804794a:	691b      	ldr	r3, [r3, #16]
 804794c:	69ba      	ldr	r2, [r7, #24]
 804794e:	0151      	lsls	r1, r2, #5
 8047950:	69fa      	ldr	r2, [r7, #28]
 8047952:	440a      	add	r2, r1
 8047954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047958:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 804795c:	6113      	str	r3, [r2, #16]
 804795e:	e044      	b.n	80479ea <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8047960:	68bb      	ldr	r3, [r7, #8]
 8047962:	691a      	ldr	r2, [r3, #16]
 8047964:	68bb      	ldr	r3, [r7, #8]
 8047966:	689b      	ldr	r3, [r3, #8]
 8047968:	4413      	add	r3, r2
 804796a:	1e5a      	subs	r2, r3, #1
 804796c:	68bb      	ldr	r3, [r7, #8]
 804796e:	689b      	ldr	r3, [r3, #8]
 8047970:	fbb2 f3f3 	udiv	r3, r2, r3
 8047974:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8047976:	69bb      	ldr	r3, [r7, #24]
 8047978:	015a      	lsls	r2, r3, #5
 804797a:	69fb      	ldr	r3, [r7, #28]
 804797c:	4413      	add	r3, r2
 804797e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047982:	691a      	ldr	r2, [r3, #16]
 8047984:	8afb      	ldrh	r3, [r7, #22]
 8047986:	04d9      	lsls	r1, r3, #19
 8047988:	4b6c      	ldr	r3, [pc, #432]	@ (8047b3c <USB_EPStartXfer+0x2ec>)
 804798a:	400b      	ands	r3, r1
 804798c:	69b9      	ldr	r1, [r7, #24]
 804798e:	0148      	lsls	r0, r1, #5
 8047990:	69f9      	ldr	r1, [r7, #28]
 8047992:	4401      	add	r1, r0
 8047994:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8047998:	4313      	orrs	r3, r2
 804799a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 804799c:	68bb      	ldr	r3, [r7, #8]
 804799e:	791b      	ldrb	r3, [r3, #4]
 80479a0:	2b01      	cmp	r3, #1
 80479a2:	d122      	bne.n	80479ea <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80479a4:	69bb      	ldr	r3, [r7, #24]
 80479a6:	015a      	lsls	r2, r3, #5
 80479a8:	69fb      	ldr	r3, [r7, #28]
 80479aa:	4413      	add	r3, r2
 80479ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80479b0:	691b      	ldr	r3, [r3, #16]
 80479b2:	69ba      	ldr	r2, [r7, #24]
 80479b4:	0151      	lsls	r1, r2, #5
 80479b6:	69fa      	ldr	r2, [r7, #28]
 80479b8:	440a      	add	r2, r1
 80479ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80479be:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80479c2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80479c4:	69bb      	ldr	r3, [r7, #24]
 80479c6:	015a      	lsls	r2, r3, #5
 80479c8:	69fb      	ldr	r3, [r7, #28]
 80479ca:	4413      	add	r3, r2
 80479cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80479d0:	691a      	ldr	r2, [r3, #16]
 80479d2:	8afb      	ldrh	r3, [r7, #22]
 80479d4:	075b      	lsls	r3, r3, #29
 80479d6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80479da:	69b9      	ldr	r1, [r7, #24]
 80479dc:	0148      	lsls	r0, r1, #5
 80479de:	69f9      	ldr	r1, [r7, #28]
 80479e0:	4401      	add	r1, r0
 80479e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80479e6:	4313      	orrs	r3, r2
 80479e8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80479ea:	69bb      	ldr	r3, [r7, #24]
 80479ec:	015a      	lsls	r2, r3, #5
 80479ee:	69fb      	ldr	r3, [r7, #28]
 80479f0:	4413      	add	r3, r2
 80479f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80479f6:	691a      	ldr	r2, [r3, #16]
 80479f8:	68bb      	ldr	r3, [r7, #8]
 80479fa:	691b      	ldr	r3, [r3, #16]
 80479fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047a00:	69b9      	ldr	r1, [r7, #24]
 8047a02:	0148      	lsls	r0, r1, #5
 8047a04:	69f9      	ldr	r1, [r7, #28]
 8047a06:	4401      	add	r1, r0
 8047a08:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8047a0c:	4313      	orrs	r3, r2
 8047a0e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8047a10:	79fb      	ldrb	r3, [r7, #7]
 8047a12:	2b01      	cmp	r3, #1
 8047a14:	d14b      	bne.n	8047aae <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8047a16:	68bb      	ldr	r3, [r7, #8]
 8047a18:	69db      	ldr	r3, [r3, #28]
 8047a1a:	2b00      	cmp	r3, #0
 8047a1c:	d009      	beq.n	8047a32 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8047a1e:	69bb      	ldr	r3, [r7, #24]
 8047a20:	015a      	lsls	r2, r3, #5
 8047a22:	69fb      	ldr	r3, [r7, #28]
 8047a24:	4413      	add	r3, r2
 8047a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047a2a:	461a      	mov	r2, r3
 8047a2c:	68bb      	ldr	r3, [r7, #8]
 8047a2e:	69db      	ldr	r3, [r3, #28]
 8047a30:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8047a32:	68bb      	ldr	r3, [r7, #8]
 8047a34:	791b      	ldrb	r3, [r3, #4]
 8047a36:	2b01      	cmp	r3, #1
 8047a38:	d128      	bne.n	8047a8c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8047a3a:	69fb      	ldr	r3, [r7, #28]
 8047a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047a40:	689b      	ldr	r3, [r3, #8]
 8047a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8047a46:	2b00      	cmp	r3, #0
 8047a48:	d110      	bne.n	8047a6c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8047a4a:	69bb      	ldr	r3, [r7, #24]
 8047a4c:	015a      	lsls	r2, r3, #5
 8047a4e:	69fb      	ldr	r3, [r7, #28]
 8047a50:	4413      	add	r3, r2
 8047a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047a56:	681b      	ldr	r3, [r3, #0]
 8047a58:	69ba      	ldr	r2, [r7, #24]
 8047a5a:	0151      	lsls	r1, r2, #5
 8047a5c:	69fa      	ldr	r2, [r7, #28]
 8047a5e:	440a      	add	r2, r1
 8047a60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047a64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8047a68:	6013      	str	r3, [r2, #0]
 8047a6a:	e00f      	b.n	8047a8c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8047a6c:	69bb      	ldr	r3, [r7, #24]
 8047a6e:	015a      	lsls	r2, r3, #5
 8047a70:	69fb      	ldr	r3, [r7, #28]
 8047a72:	4413      	add	r3, r2
 8047a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047a78:	681b      	ldr	r3, [r3, #0]
 8047a7a:	69ba      	ldr	r2, [r7, #24]
 8047a7c:	0151      	lsls	r1, r2, #5
 8047a7e:	69fa      	ldr	r2, [r7, #28]
 8047a80:	440a      	add	r2, r1
 8047a82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8047a8a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8047a8c:	69bb      	ldr	r3, [r7, #24]
 8047a8e:	015a      	lsls	r2, r3, #5
 8047a90:	69fb      	ldr	r3, [r7, #28]
 8047a92:	4413      	add	r3, r2
 8047a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047a98:	681b      	ldr	r3, [r3, #0]
 8047a9a:	69ba      	ldr	r2, [r7, #24]
 8047a9c:	0151      	lsls	r1, r2, #5
 8047a9e:	69fa      	ldr	r2, [r7, #28]
 8047aa0:	440a      	add	r2, r1
 8047aa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047aa6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8047aaa:	6013      	str	r3, [r2, #0]
 8047aac:	e169      	b.n	8047d82 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8047aae:	69bb      	ldr	r3, [r7, #24]
 8047ab0:	015a      	lsls	r2, r3, #5
 8047ab2:	69fb      	ldr	r3, [r7, #28]
 8047ab4:	4413      	add	r3, r2
 8047ab6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047aba:	681b      	ldr	r3, [r3, #0]
 8047abc:	69ba      	ldr	r2, [r7, #24]
 8047abe:	0151      	lsls	r1, r2, #5
 8047ac0:	69fa      	ldr	r2, [r7, #28]
 8047ac2:	440a      	add	r2, r1
 8047ac4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047ac8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8047acc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8047ace:	68bb      	ldr	r3, [r7, #8]
 8047ad0:	791b      	ldrb	r3, [r3, #4]
 8047ad2:	2b01      	cmp	r3, #1
 8047ad4:	d015      	beq.n	8047b02 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8047ad6:	68bb      	ldr	r3, [r7, #8]
 8047ad8:	691b      	ldr	r3, [r3, #16]
 8047ada:	2b00      	cmp	r3, #0
 8047adc:	f000 8151 	beq.w	8047d82 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8047ae0:	69fb      	ldr	r3, [r7, #28]
 8047ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047ae6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8047ae8:	68bb      	ldr	r3, [r7, #8]
 8047aea:	781b      	ldrb	r3, [r3, #0]
 8047aec:	f003 030f 	and.w	r3, r3, #15
 8047af0:	2101      	movs	r1, #1
 8047af2:	fa01 f303 	lsl.w	r3, r1, r3
 8047af6:	69f9      	ldr	r1, [r7, #28]
 8047af8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8047afc:	4313      	orrs	r3, r2
 8047afe:	634b      	str	r3, [r1, #52]	@ 0x34
 8047b00:	e13f      	b.n	8047d82 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8047b02:	69fb      	ldr	r3, [r7, #28]
 8047b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047b08:	689b      	ldr	r3, [r3, #8]
 8047b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8047b0e:	2b00      	cmp	r3, #0
 8047b10:	d116      	bne.n	8047b40 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8047b12:	69bb      	ldr	r3, [r7, #24]
 8047b14:	015a      	lsls	r2, r3, #5
 8047b16:	69fb      	ldr	r3, [r7, #28]
 8047b18:	4413      	add	r3, r2
 8047b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047b1e:	681b      	ldr	r3, [r3, #0]
 8047b20:	69ba      	ldr	r2, [r7, #24]
 8047b22:	0151      	lsls	r1, r2, #5
 8047b24:	69fa      	ldr	r2, [r7, #28]
 8047b26:	440a      	add	r2, r1
 8047b28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047b2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8047b30:	6013      	str	r3, [r2, #0]
 8047b32:	e015      	b.n	8047b60 <USB_EPStartXfer+0x310>
 8047b34:	e007ffff 	.word	0xe007ffff
 8047b38:	fff80000 	.word	0xfff80000
 8047b3c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8047b40:	69bb      	ldr	r3, [r7, #24]
 8047b42:	015a      	lsls	r2, r3, #5
 8047b44:	69fb      	ldr	r3, [r7, #28]
 8047b46:	4413      	add	r3, r2
 8047b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047b4c:	681b      	ldr	r3, [r3, #0]
 8047b4e:	69ba      	ldr	r2, [r7, #24]
 8047b50:	0151      	lsls	r1, r2, #5
 8047b52:	69fa      	ldr	r2, [r7, #28]
 8047b54:	440a      	add	r2, r1
 8047b56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047b5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8047b5e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8047b60:	68bb      	ldr	r3, [r7, #8]
 8047b62:	68d9      	ldr	r1, [r3, #12]
 8047b64:	68bb      	ldr	r3, [r7, #8]
 8047b66:	781a      	ldrb	r2, [r3, #0]
 8047b68:	68bb      	ldr	r3, [r7, #8]
 8047b6a:	691b      	ldr	r3, [r3, #16]
 8047b6c:	b298      	uxth	r0, r3
 8047b6e:	79fb      	ldrb	r3, [r7, #7]
 8047b70:	9300      	str	r3, [sp, #0]
 8047b72:	4603      	mov	r3, r0
 8047b74:	68f8      	ldr	r0, [r7, #12]
 8047b76:	f000 f9b9 	bl	8047eec <USB_WritePacket>
 8047b7a:	e102      	b.n	8047d82 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8047b7c:	69bb      	ldr	r3, [r7, #24]
 8047b7e:	015a      	lsls	r2, r3, #5
 8047b80:	69fb      	ldr	r3, [r7, #28]
 8047b82:	4413      	add	r3, r2
 8047b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047b88:	691a      	ldr	r2, [r3, #16]
 8047b8a:	69bb      	ldr	r3, [r7, #24]
 8047b8c:	0159      	lsls	r1, r3, #5
 8047b8e:	69fb      	ldr	r3, [r7, #28]
 8047b90:	440b      	add	r3, r1
 8047b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047b96:	4619      	mov	r1, r3
 8047b98:	4b7c      	ldr	r3, [pc, #496]	@ (8047d8c <USB_EPStartXfer+0x53c>)
 8047b9a:	4013      	ands	r3, r2
 8047b9c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8047b9e:	69bb      	ldr	r3, [r7, #24]
 8047ba0:	015a      	lsls	r2, r3, #5
 8047ba2:	69fb      	ldr	r3, [r7, #28]
 8047ba4:	4413      	add	r3, r2
 8047ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047baa:	691a      	ldr	r2, [r3, #16]
 8047bac:	69bb      	ldr	r3, [r7, #24]
 8047bae:	0159      	lsls	r1, r3, #5
 8047bb0:	69fb      	ldr	r3, [r7, #28]
 8047bb2:	440b      	add	r3, r1
 8047bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047bb8:	4619      	mov	r1, r3
 8047bba:	4b75      	ldr	r3, [pc, #468]	@ (8047d90 <USB_EPStartXfer+0x540>)
 8047bbc:	4013      	ands	r3, r2
 8047bbe:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8047bc0:	69bb      	ldr	r3, [r7, #24]
 8047bc2:	2b00      	cmp	r3, #0
 8047bc4:	d12f      	bne.n	8047c26 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8047bc6:	68bb      	ldr	r3, [r7, #8]
 8047bc8:	691b      	ldr	r3, [r3, #16]
 8047bca:	2b00      	cmp	r3, #0
 8047bcc:	d003      	beq.n	8047bd6 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8047bce:	68bb      	ldr	r3, [r7, #8]
 8047bd0:	689a      	ldr	r2, [r3, #8]
 8047bd2:	68bb      	ldr	r3, [r7, #8]
 8047bd4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8047bd6:	68bb      	ldr	r3, [r7, #8]
 8047bd8:	689a      	ldr	r2, [r3, #8]
 8047bda:	68bb      	ldr	r3, [r7, #8]
 8047bdc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8047bde:	69bb      	ldr	r3, [r7, #24]
 8047be0:	015a      	lsls	r2, r3, #5
 8047be2:	69fb      	ldr	r3, [r7, #28]
 8047be4:	4413      	add	r3, r2
 8047be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047bea:	691a      	ldr	r2, [r3, #16]
 8047bec:	68bb      	ldr	r3, [r7, #8]
 8047bee:	6a1b      	ldr	r3, [r3, #32]
 8047bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047bf4:	69b9      	ldr	r1, [r7, #24]
 8047bf6:	0148      	lsls	r0, r1, #5
 8047bf8:	69f9      	ldr	r1, [r7, #28]
 8047bfa:	4401      	add	r1, r0
 8047bfc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8047c00:	4313      	orrs	r3, r2
 8047c02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8047c04:	69bb      	ldr	r3, [r7, #24]
 8047c06:	015a      	lsls	r2, r3, #5
 8047c08:	69fb      	ldr	r3, [r7, #28]
 8047c0a:	4413      	add	r3, r2
 8047c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047c10:	691b      	ldr	r3, [r3, #16]
 8047c12:	69ba      	ldr	r2, [r7, #24]
 8047c14:	0151      	lsls	r1, r2, #5
 8047c16:	69fa      	ldr	r2, [r7, #28]
 8047c18:	440a      	add	r2, r1
 8047c1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047c1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8047c22:	6113      	str	r3, [r2, #16]
 8047c24:	e05f      	b.n	8047ce6 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8047c26:	68bb      	ldr	r3, [r7, #8]
 8047c28:	691b      	ldr	r3, [r3, #16]
 8047c2a:	2b00      	cmp	r3, #0
 8047c2c:	d123      	bne.n	8047c76 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8047c2e:	69bb      	ldr	r3, [r7, #24]
 8047c30:	015a      	lsls	r2, r3, #5
 8047c32:	69fb      	ldr	r3, [r7, #28]
 8047c34:	4413      	add	r3, r2
 8047c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047c3a:	691a      	ldr	r2, [r3, #16]
 8047c3c:	68bb      	ldr	r3, [r7, #8]
 8047c3e:	689b      	ldr	r3, [r3, #8]
 8047c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047c44:	69b9      	ldr	r1, [r7, #24]
 8047c46:	0148      	lsls	r0, r1, #5
 8047c48:	69f9      	ldr	r1, [r7, #28]
 8047c4a:	4401      	add	r1, r0
 8047c4c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8047c50:	4313      	orrs	r3, r2
 8047c52:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8047c54:	69bb      	ldr	r3, [r7, #24]
 8047c56:	015a      	lsls	r2, r3, #5
 8047c58:	69fb      	ldr	r3, [r7, #28]
 8047c5a:	4413      	add	r3, r2
 8047c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047c60:	691b      	ldr	r3, [r3, #16]
 8047c62:	69ba      	ldr	r2, [r7, #24]
 8047c64:	0151      	lsls	r1, r2, #5
 8047c66:	69fa      	ldr	r2, [r7, #28]
 8047c68:	440a      	add	r2, r1
 8047c6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047c6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8047c72:	6113      	str	r3, [r2, #16]
 8047c74:	e037      	b.n	8047ce6 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8047c76:	68bb      	ldr	r3, [r7, #8]
 8047c78:	691a      	ldr	r2, [r3, #16]
 8047c7a:	68bb      	ldr	r3, [r7, #8]
 8047c7c:	689b      	ldr	r3, [r3, #8]
 8047c7e:	4413      	add	r3, r2
 8047c80:	1e5a      	subs	r2, r3, #1
 8047c82:	68bb      	ldr	r3, [r7, #8]
 8047c84:	689b      	ldr	r3, [r3, #8]
 8047c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8047c8a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8047c8c:	68bb      	ldr	r3, [r7, #8]
 8047c8e:	689b      	ldr	r3, [r3, #8]
 8047c90:	8afa      	ldrh	r2, [r7, #22]
 8047c92:	fb03 f202 	mul.w	r2, r3, r2
 8047c96:	68bb      	ldr	r3, [r7, #8]
 8047c98:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8047c9a:	69bb      	ldr	r3, [r7, #24]
 8047c9c:	015a      	lsls	r2, r3, #5
 8047c9e:	69fb      	ldr	r3, [r7, #28]
 8047ca0:	4413      	add	r3, r2
 8047ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047ca6:	691a      	ldr	r2, [r3, #16]
 8047ca8:	8afb      	ldrh	r3, [r7, #22]
 8047caa:	04d9      	lsls	r1, r3, #19
 8047cac:	4b39      	ldr	r3, [pc, #228]	@ (8047d94 <USB_EPStartXfer+0x544>)
 8047cae:	400b      	ands	r3, r1
 8047cb0:	69b9      	ldr	r1, [r7, #24]
 8047cb2:	0148      	lsls	r0, r1, #5
 8047cb4:	69f9      	ldr	r1, [r7, #28]
 8047cb6:	4401      	add	r1, r0
 8047cb8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8047cbc:	4313      	orrs	r3, r2
 8047cbe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8047cc0:	69bb      	ldr	r3, [r7, #24]
 8047cc2:	015a      	lsls	r2, r3, #5
 8047cc4:	69fb      	ldr	r3, [r7, #28]
 8047cc6:	4413      	add	r3, r2
 8047cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047ccc:	691a      	ldr	r2, [r3, #16]
 8047cce:	68bb      	ldr	r3, [r7, #8]
 8047cd0:	6a1b      	ldr	r3, [r3, #32]
 8047cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047cd6:	69b9      	ldr	r1, [r7, #24]
 8047cd8:	0148      	lsls	r0, r1, #5
 8047cda:	69f9      	ldr	r1, [r7, #28]
 8047cdc:	4401      	add	r1, r0
 8047cde:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8047ce2:	4313      	orrs	r3, r2
 8047ce4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8047ce6:	79fb      	ldrb	r3, [r7, #7]
 8047ce8:	2b01      	cmp	r3, #1
 8047cea:	d10d      	bne.n	8047d08 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8047cec:	68bb      	ldr	r3, [r7, #8]
 8047cee:	68db      	ldr	r3, [r3, #12]
 8047cf0:	2b00      	cmp	r3, #0
 8047cf2:	d009      	beq.n	8047d08 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8047cf4:	68bb      	ldr	r3, [r7, #8]
 8047cf6:	68d9      	ldr	r1, [r3, #12]
 8047cf8:	69bb      	ldr	r3, [r7, #24]
 8047cfa:	015a      	lsls	r2, r3, #5
 8047cfc:	69fb      	ldr	r3, [r7, #28]
 8047cfe:	4413      	add	r3, r2
 8047d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047d04:	460a      	mov	r2, r1
 8047d06:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8047d08:	68bb      	ldr	r3, [r7, #8]
 8047d0a:	791b      	ldrb	r3, [r3, #4]
 8047d0c:	2b01      	cmp	r3, #1
 8047d0e:	d128      	bne.n	8047d62 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8047d10:	69fb      	ldr	r3, [r7, #28]
 8047d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047d16:	689b      	ldr	r3, [r3, #8]
 8047d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8047d1c:	2b00      	cmp	r3, #0
 8047d1e:	d110      	bne.n	8047d42 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8047d20:	69bb      	ldr	r3, [r7, #24]
 8047d22:	015a      	lsls	r2, r3, #5
 8047d24:	69fb      	ldr	r3, [r7, #28]
 8047d26:	4413      	add	r3, r2
 8047d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047d2c:	681b      	ldr	r3, [r3, #0]
 8047d2e:	69ba      	ldr	r2, [r7, #24]
 8047d30:	0151      	lsls	r1, r2, #5
 8047d32:	69fa      	ldr	r2, [r7, #28]
 8047d34:	440a      	add	r2, r1
 8047d36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047d3a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8047d3e:	6013      	str	r3, [r2, #0]
 8047d40:	e00f      	b.n	8047d62 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8047d42:	69bb      	ldr	r3, [r7, #24]
 8047d44:	015a      	lsls	r2, r3, #5
 8047d46:	69fb      	ldr	r3, [r7, #28]
 8047d48:	4413      	add	r3, r2
 8047d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047d4e:	681b      	ldr	r3, [r3, #0]
 8047d50:	69ba      	ldr	r2, [r7, #24]
 8047d52:	0151      	lsls	r1, r2, #5
 8047d54:	69fa      	ldr	r2, [r7, #28]
 8047d56:	440a      	add	r2, r1
 8047d58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8047d60:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8047d62:	69bb      	ldr	r3, [r7, #24]
 8047d64:	015a      	lsls	r2, r3, #5
 8047d66:	69fb      	ldr	r3, [r7, #28]
 8047d68:	4413      	add	r3, r2
 8047d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047d6e:	681b      	ldr	r3, [r3, #0]
 8047d70:	69ba      	ldr	r2, [r7, #24]
 8047d72:	0151      	lsls	r1, r2, #5
 8047d74:	69fa      	ldr	r2, [r7, #28]
 8047d76:	440a      	add	r2, r1
 8047d78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047d7c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8047d80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8047d82:	2300      	movs	r3, #0
}
 8047d84:	4618      	mov	r0, r3
 8047d86:	3720      	adds	r7, #32
 8047d88:	46bd      	mov	sp, r7
 8047d8a:	bd80      	pop	{r7, pc}
 8047d8c:	fff80000 	.word	0xfff80000
 8047d90:	e007ffff 	.word	0xe007ffff
 8047d94:	1ff80000 	.word	0x1ff80000

08047d98 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8047d98:	b480      	push	{r7}
 8047d9a:	b087      	sub	sp, #28
 8047d9c:	af00      	add	r7, sp, #0
 8047d9e:	6078      	str	r0, [r7, #4]
 8047da0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8047da2:	2300      	movs	r3, #0
 8047da4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8047da6:	2300      	movs	r3, #0
 8047da8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047daa:	687b      	ldr	r3, [r7, #4]
 8047dac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8047dae:	683b      	ldr	r3, [r7, #0]
 8047db0:	785b      	ldrb	r3, [r3, #1]
 8047db2:	2b01      	cmp	r3, #1
 8047db4:	d14a      	bne.n	8047e4c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8047db6:	683b      	ldr	r3, [r7, #0]
 8047db8:	781b      	ldrb	r3, [r3, #0]
 8047dba:	015a      	lsls	r2, r3, #5
 8047dbc:	693b      	ldr	r3, [r7, #16]
 8047dbe:	4413      	add	r3, r2
 8047dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047dc4:	681b      	ldr	r3, [r3, #0]
 8047dc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047dce:	f040 8086 	bne.w	8047ede <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8047dd2:	683b      	ldr	r3, [r7, #0]
 8047dd4:	781b      	ldrb	r3, [r3, #0]
 8047dd6:	015a      	lsls	r2, r3, #5
 8047dd8:	693b      	ldr	r3, [r7, #16]
 8047dda:	4413      	add	r3, r2
 8047ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047de0:	681b      	ldr	r3, [r3, #0]
 8047de2:	683a      	ldr	r2, [r7, #0]
 8047de4:	7812      	ldrb	r2, [r2, #0]
 8047de6:	0151      	lsls	r1, r2, #5
 8047de8:	693a      	ldr	r2, [r7, #16]
 8047dea:	440a      	add	r2, r1
 8047dec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047df0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8047df4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8047df6:	683b      	ldr	r3, [r7, #0]
 8047df8:	781b      	ldrb	r3, [r3, #0]
 8047dfa:	015a      	lsls	r2, r3, #5
 8047dfc:	693b      	ldr	r3, [r7, #16]
 8047dfe:	4413      	add	r3, r2
 8047e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047e04:	681b      	ldr	r3, [r3, #0]
 8047e06:	683a      	ldr	r2, [r7, #0]
 8047e08:	7812      	ldrb	r2, [r2, #0]
 8047e0a:	0151      	lsls	r1, r2, #5
 8047e0c:	693a      	ldr	r2, [r7, #16]
 8047e0e:	440a      	add	r2, r1
 8047e10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047e14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8047e18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8047e1a:	68fb      	ldr	r3, [r7, #12]
 8047e1c:	3301      	adds	r3, #1
 8047e1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8047e20:	68fb      	ldr	r3, [r7, #12]
 8047e22:	f242 7210 	movw	r2, #10000	@ 0x2710
 8047e26:	4293      	cmp	r3, r2
 8047e28:	d902      	bls.n	8047e30 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8047e2a:	2301      	movs	r3, #1
 8047e2c:	75fb      	strb	r3, [r7, #23]
          break;
 8047e2e:	e056      	b.n	8047ede <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8047e30:	683b      	ldr	r3, [r7, #0]
 8047e32:	781b      	ldrb	r3, [r3, #0]
 8047e34:	015a      	lsls	r2, r3, #5
 8047e36:	693b      	ldr	r3, [r7, #16]
 8047e38:	4413      	add	r3, r2
 8047e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047e3e:	681b      	ldr	r3, [r3, #0]
 8047e40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047e44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047e48:	d0e7      	beq.n	8047e1a <USB_EPStopXfer+0x82>
 8047e4a:	e048      	b.n	8047ede <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8047e4c:	683b      	ldr	r3, [r7, #0]
 8047e4e:	781b      	ldrb	r3, [r3, #0]
 8047e50:	015a      	lsls	r2, r3, #5
 8047e52:	693b      	ldr	r3, [r7, #16]
 8047e54:	4413      	add	r3, r2
 8047e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047e5a:	681b      	ldr	r3, [r3, #0]
 8047e5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047e60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047e64:	d13b      	bne.n	8047ede <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8047e66:	683b      	ldr	r3, [r7, #0]
 8047e68:	781b      	ldrb	r3, [r3, #0]
 8047e6a:	015a      	lsls	r2, r3, #5
 8047e6c:	693b      	ldr	r3, [r7, #16]
 8047e6e:	4413      	add	r3, r2
 8047e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047e74:	681b      	ldr	r3, [r3, #0]
 8047e76:	683a      	ldr	r2, [r7, #0]
 8047e78:	7812      	ldrb	r2, [r2, #0]
 8047e7a:	0151      	lsls	r1, r2, #5
 8047e7c:	693a      	ldr	r2, [r7, #16]
 8047e7e:	440a      	add	r2, r1
 8047e80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047e84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8047e88:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8047e8a:	683b      	ldr	r3, [r7, #0]
 8047e8c:	781b      	ldrb	r3, [r3, #0]
 8047e8e:	015a      	lsls	r2, r3, #5
 8047e90:	693b      	ldr	r3, [r7, #16]
 8047e92:	4413      	add	r3, r2
 8047e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047e98:	681b      	ldr	r3, [r3, #0]
 8047e9a:	683a      	ldr	r2, [r7, #0]
 8047e9c:	7812      	ldrb	r2, [r2, #0]
 8047e9e:	0151      	lsls	r1, r2, #5
 8047ea0:	693a      	ldr	r2, [r7, #16]
 8047ea2:	440a      	add	r2, r1
 8047ea4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047ea8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8047eac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8047eae:	68fb      	ldr	r3, [r7, #12]
 8047eb0:	3301      	adds	r3, #1
 8047eb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8047eb4:	68fb      	ldr	r3, [r7, #12]
 8047eb6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8047eba:	4293      	cmp	r3, r2
 8047ebc:	d902      	bls.n	8047ec4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8047ebe:	2301      	movs	r3, #1
 8047ec0:	75fb      	strb	r3, [r7, #23]
          break;
 8047ec2:	e00c      	b.n	8047ede <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8047ec4:	683b      	ldr	r3, [r7, #0]
 8047ec6:	781b      	ldrb	r3, [r3, #0]
 8047ec8:	015a      	lsls	r2, r3, #5
 8047eca:	693b      	ldr	r3, [r7, #16]
 8047ecc:	4413      	add	r3, r2
 8047ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047ed2:	681b      	ldr	r3, [r3, #0]
 8047ed4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047edc:	d0e7      	beq.n	8047eae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8047ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8047ee0:	4618      	mov	r0, r3
 8047ee2:	371c      	adds	r7, #28
 8047ee4:	46bd      	mov	sp, r7
 8047ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047eea:	4770      	bx	lr

08047eec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8047eec:	b480      	push	{r7}
 8047eee:	b089      	sub	sp, #36	@ 0x24
 8047ef0:	af00      	add	r7, sp, #0
 8047ef2:	60f8      	str	r0, [r7, #12]
 8047ef4:	60b9      	str	r1, [r7, #8]
 8047ef6:	4611      	mov	r1, r2
 8047ef8:	461a      	mov	r2, r3
 8047efa:	460b      	mov	r3, r1
 8047efc:	71fb      	strb	r3, [r7, #7]
 8047efe:	4613      	mov	r3, r2
 8047f00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047f02:	68fb      	ldr	r3, [r7, #12]
 8047f04:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8047f06:	68bb      	ldr	r3, [r7, #8]
 8047f08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8047f0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8047f0e:	2b00      	cmp	r3, #0
 8047f10:	d123      	bne.n	8047f5a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8047f12:	88bb      	ldrh	r3, [r7, #4]
 8047f14:	3303      	adds	r3, #3
 8047f16:	089b      	lsrs	r3, r3, #2
 8047f18:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8047f1a:	2300      	movs	r3, #0
 8047f1c:	61bb      	str	r3, [r7, #24]
 8047f1e:	e018      	b.n	8047f52 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8047f20:	79fb      	ldrb	r3, [r7, #7]
 8047f22:	031a      	lsls	r2, r3, #12
 8047f24:	697b      	ldr	r3, [r7, #20]
 8047f26:	4413      	add	r3, r2
 8047f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8047f2c:	461a      	mov	r2, r3
 8047f2e:	69fb      	ldr	r3, [r7, #28]
 8047f30:	681b      	ldr	r3, [r3, #0]
 8047f32:	6013      	str	r3, [r2, #0]
      pSrc++;
 8047f34:	69fb      	ldr	r3, [r7, #28]
 8047f36:	3301      	adds	r3, #1
 8047f38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8047f3a:	69fb      	ldr	r3, [r7, #28]
 8047f3c:	3301      	adds	r3, #1
 8047f3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8047f40:	69fb      	ldr	r3, [r7, #28]
 8047f42:	3301      	adds	r3, #1
 8047f44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8047f46:	69fb      	ldr	r3, [r7, #28]
 8047f48:	3301      	adds	r3, #1
 8047f4a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8047f4c:	69bb      	ldr	r3, [r7, #24]
 8047f4e:	3301      	adds	r3, #1
 8047f50:	61bb      	str	r3, [r7, #24]
 8047f52:	69ba      	ldr	r2, [r7, #24]
 8047f54:	693b      	ldr	r3, [r7, #16]
 8047f56:	429a      	cmp	r2, r3
 8047f58:	d3e2      	bcc.n	8047f20 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8047f5a:	2300      	movs	r3, #0
}
 8047f5c:	4618      	mov	r0, r3
 8047f5e:	3724      	adds	r7, #36	@ 0x24
 8047f60:	46bd      	mov	sp, r7
 8047f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047f66:	4770      	bx	lr

08047f68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8047f68:	b480      	push	{r7}
 8047f6a:	b08b      	sub	sp, #44	@ 0x2c
 8047f6c:	af00      	add	r7, sp, #0
 8047f6e:	60f8      	str	r0, [r7, #12]
 8047f70:	60b9      	str	r1, [r7, #8]
 8047f72:	4613      	mov	r3, r2
 8047f74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047f76:	68fb      	ldr	r3, [r7, #12]
 8047f78:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8047f7a:	68bb      	ldr	r3, [r7, #8]
 8047f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8047f7e:	88fb      	ldrh	r3, [r7, #6]
 8047f80:	089b      	lsrs	r3, r3, #2
 8047f82:	b29b      	uxth	r3, r3
 8047f84:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8047f86:	88fb      	ldrh	r3, [r7, #6]
 8047f88:	f003 0303 	and.w	r3, r3, #3
 8047f8c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8047f8e:	2300      	movs	r3, #0
 8047f90:	623b      	str	r3, [r7, #32]
 8047f92:	e014      	b.n	8047fbe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8047f94:	69bb      	ldr	r3, [r7, #24]
 8047f96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8047f9a:	681a      	ldr	r2, [r3, #0]
 8047f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047f9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8047fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047fa2:	3301      	adds	r3, #1
 8047fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8047fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047fa8:	3301      	adds	r3, #1
 8047faa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8047fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047fae:	3301      	adds	r3, #1
 8047fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8047fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047fb4:	3301      	adds	r3, #1
 8047fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8047fb8:	6a3b      	ldr	r3, [r7, #32]
 8047fba:	3301      	adds	r3, #1
 8047fbc:	623b      	str	r3, [r7, #32]
 8047fbe:	6a3a      	ldr	r2, [r7, #32]
 8047fc0:	697b      	ldr	r3, [r7, #20]
 8047fc2:	429a      	cmp	r2, r3
 8047fc4:	d3e6      	bcc.n	8047f94 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8047fc6:	8bfb      	ldrh	r3, [r7, #30]
 8047fc8:	2b00      	cmp	r3, #0
 8047fca:	d01e      	beq.n	804800a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8047fcc:	2300      	movs	r3, #0
 8047fce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8047fd0:	69bb      	ldr	r3, [r7, #24]
 8047fd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8047fd6:	461a      	mov	r2, r3
 8047fd8:	f107 0310 	add.w	r3, r7, #16
 8047fdc:	6812      	ldr	r2, [r2, #0]
 8047fde:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8047fe0:	693a      	ldr	r2, [r7, #16]
 8047fe2:	6a3b      	ldr	r3, [r7, #32]
 8047fe4:	b2db      	uxtb	r3, r3
 8047fe6:	00db      	lsls	r3, r3, #3
 8047fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8047fec:	b2da      	uxtb	r2, r3
 8047fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047ff0:	701a      	strb	r2, [r3, #0]
      i++;
 8047ff2:	6a3b      	ldr	r3, [r7, #32]
 8047ff4:	3301      	adds	r3, #1
 8047ff6:	623b      	str	r3, [r7, #32]
      pDest++;
 8047ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047ffa:	3301      	adds	r3, #1
 8047ffc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8047ffe:	8bfb      	ldrh	r3, [r7, #30]
 8048000:	3b01      	subs	r3, #1
 8048002:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8048004:	8bfb      	ldrh	r3, [r7, #30]
 8048006:	2b00      	cmp	r3, #0
 8048008:	d1ea      	bne.n	8047fe0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 804800a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 804800c:	4618      	mov	r0, r3
 804800e:	372c      	adds	r7, #44	@ 0x2c
 8048010:	46bd      	mov	sp, r7
 8048012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048016:	4770      	bx	lr

08048018 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8048018:	b480      	push	{r7}
 804801a:	b085      	sub	sp, #20
 804801c:	af00      	add	r7, sp, #0
 804801e:	6078      	str	r0, [r7, #4]
 8048020:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048022:	687b      	ldr	r3, [r7, #4]
 8048024:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8048026:	683b      	ldr	r3, [r7, #0]
 8048028:	781b      	ldrb	r3, [r3, #0]
 804802a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 804802c:	683b      	ldr	r3, [r7, #0]
 804802e:	785b      	ldrb	r3, [r3, #1]
 8048030:	2b01      	cmp	r3, #1
 8048032:	d12c      	bne.n	804808e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8048034:	68bb      	ldr	r3, [r7, #8]
 8048036:	015a      	lsls	r2, r3, #5
 8048038:	68fb      	ldr	r3, [r7, #12]
 804803a:	4413      	add	r3, r2
 804803c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8048040:	681b      	ldr	r3, [r3, #0]
 8048042:	2b00      	cmp	r3, #0
 8048044:	db12      	blt.n	804806c <USB_EPSetStall+0x54>
 8048046:	68bb      	ldr	r3, [r7, #8]
 8048048:	2b00      	cmp	r3, #0
 804804a:	d00f      	beq.n	804806c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 804804c:	68bb      	ldr	r3, [r7, #8]
 804804e:	015a      	lsls	r2, r3, #5
 8048050:	68fb      	ldr	r3, [r7, #12]
 8048052:	4413      	add	r3, r2
 8048054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8048058:	681b      	ldr	r3, [r3, #0]
 804805a:	68ba      	ldr	r2, [r7, #8]
 804805c:	0151      	lsls	r1, r2, #5
 804805e:	68fa      	ldr	r2, [r7, #12]
 8048060:	440a      	add	r2, r1
 8048062:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8048066:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 804806a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 804806c:	68bb      	ldr	r3, [r7, #8]
 804806e:	015a      	lsls	r2, r3, #5
 8048070:	68fb      	ldr	r3, [r7, #12]
 8048072:	4413      	add	r3, r2
 8048074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8048078:	681b      	ldr	r3, [r3, #0]
 804807a:	68ba      	ldr	r2, [r7, #8]
 804807c:	0151      	lsls	r1, r2, #5
 804807e:	68fa      	ldr	r2, [r7, #12]
 8048080:	440a      	add	r2, r1
 8048082:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8048086:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 804808a:	6013      	str	r3, [r2, #0]
 804808c:	e02b      	b.n	80480e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 804808e:	68bb      	ldr	r3, [r7, #8]
 8048090:	015a      	lsls	r2, r3, #5
 8048092:	68fb      	ldr	r3, [r7, #12]
 8048094:	4413      	add	r3, r2
 8048096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804809a:	681b      	ldr	r3, [r3, #0]
 804809c:	2b00      	cmp	r3, #0
 804809e:	db12      	blt.n	80480c6 <USB_EPSetStall+0xae>
 80480a0:	68bb      	ldr	r3, [r7, #8]
 80480a2:	2b00      	cmp	r3, #0
 80480a4:	d00f      	beq.n	80480c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80480a6:	68bb      	ldr	r3, [r7, #8]
 80480a8:	015a      	lsls	r2, r3, #5
 80480aa:	68fb      	ldr	r3, [r7, #12]
 80480ac:	4413      	add	r3, r2
 80480ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80480b2:	681b      	ldr	r3, [r3, #0]
 80480b4:	68ba      	ldr	r2, [r7, #8]
 80480b6:	0151      	lsls	r1, r2, #5
 80480b8:	68fa      	ldr	r2, [r7, #12]
 80480ba:	440a      	add	r2, r1
 80480bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80480c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80480c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80480c6:	68bb      	ldr	r3, [r7, #8]
 80480c8:	015a      	lsls	r2, r3, #5
 80480ca:	68fb      	ldr	r3, [r7, #12]
 80480cc:	4413      	add	r3, r2
 80480ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80480d2:	681b      	ldr	r3, [r3, #0]
 80480d4:	68ba      	ldr	r2, [r7, #8]
 80480d6:	0151      	lsls	r1, r2, #5
 80480d8:	68fa      	ldr	r2, [r7, #12]
 80480da:	440a      	add	r2, r1
 80480dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80480e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80480e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80480e6:	2300      	movs	r3, #0
}
 80480e8:	4618      	mov	r0, r3
 80480ea:	3714      	adds	r7, #20
 80480ec:	46bd      	mov	sp, r7
 80480ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80480f2:	4770      	bx	lr

080480f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80480f4:	b480      	push	{r7}
 80480f6:	b085      	sub	sp, #20
 80480f8:	af00      	add	r7, sp, #0
 80480fa:	6078      	str	r0, [r7, #4]
 80480fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80480fe:	687b      	ldr	r3, [r7, #4]
 8048100:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8048102:	683b      	ldr	r3, [r7, #0]
 8048104:	781b      	ldrb	r3, [r3, #0]
 8048106:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8048108:	683b      	ldr	r3, [r7, #0]
 804810a:	785b      	ldrb	r3, [r3, #1]
 804810c:	2b01      	cmp	r3, #1
 804810e:	d128      	bne.n	8048162 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8048110:	68bb      	ldr	r3, [r7, #8]
 8048112:	015a      	lsls	r2, r3, #5
 8048114:	68fb      	ldr	r3, [r7, #12]
 8048116:	4413      	add	r3, r2
 8048118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804811c:	681b      	ldr	r3, [r3, #0]
 804811e:	68ba      	ldr	r2, [r7, #8]
 8048120:	0151      	lsls	r1, r2, #5
 8048122:	68fa      	ldr	r2, [r7, #12]
 8048124:	440a      	add	r2, r1
 8048126:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 804812a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 804812e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8048130:	683b      	ldr	r3, [r7, #0]
 8048132:	791b      	ldrb	r3, [r3, #4]
 8048134:	2b03      	cmp	r3, #3
 8048136:	d003      	beq.n	8048140 <USB_EPClearStall+0x4c>
 8048138:	683b      	ldr	r3, [r7, #0]
 804813a:	791b      	ldrb	r3, [r3, #4]
 804813c:	2b02      	cmp	r3, #2
 804813e:	d138      	bne.n	80481b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8048140:	68bb      	ldr	r3, [r7, #8]
 8048142:	015a      	lsls	r2, r3, #5
 8048144:	68fb      	ldr	r3, [r7, #12]
 8048146:	4413      	add	r3, r2
 8048148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804814c:	681b      	ldr	r3, [r3, #0]
 804814e:	68ba      	ldr	r2, [r7, #8]
 8048150:	0151      	lsls	r1, r2, #5
 8048152:	68fa      	ldr	r2, [r7, #12]
 8048154:	440a      	add	r2, r1
 8048156:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 804815a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 804815e:	6013      	str	r3, [r2, #0]
 8048160:	e027      	b.n	80481b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8048162:	68bb      	ldr	r3, [r7, #8]
 8048164:	015a      	lsls	r2, r3, #5
 8048166:	68fb      	ldr	r3, [r7, #12]
 8048168:	4413      	add	r3, r2
 804816a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804816e:	681b      	ldr	r3, [r3, #0]
 8048170:	68ba      	ldr	r2, [r7, #8]
 8048172:	0151      	lsls	r1, r2, #5
 8048174:	68fa      	ldr	r2, [r7, #12]
 8048176:	440a      	add	r2, r1
 8048178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 804817c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8048180:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8048182:	683b      	ldr	r3, [r7, #0]
 8048184:	791b      	ldrb	r3, [r3, #4]
 8048186:	2b03      	cmp	r3, #3
 8048188:	d003      	beq.n	8048192 <USB_EPClearStall+0x9e>
 804818a:	683b      	ldr	r3, [r7, #0]
 804818c:	791b      	ldrb	r3, [r3, #4]
 804818e:	2b02      	cmp	r3, #2
 8048190:	d10f      	bne.n	80481b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8048192:	68bb      	ldr	r3, [r7, #8]
 8048194:	015a      	lsls	r2, r3, #5
 8048196:	68fb      	ldr	r3, [r7, #12]
 8048198:	4413      	add	r3, r2
 804819a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804819e:	681b      	ldr	r3, [r3, #0]
 80481a0:	68ba      	ldr	r2, [r7, #8]
 80481a2:	0151      	lsls	r1, r2, #5
 80481a4:	68fa      	ldr	r2, [r7, #12]
 80481a6:	440a      	add	r2, r1
 80481a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80481ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80481b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80481b2:	2300      	movs	r3, #0
}
 80481b4:	4618      	mov	r0, r3
 80481b6:	3714      	adds	r7, #20
 80481b8:	46bd      	mov	sp, r7
 80481ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80481be:	4770      	bx	lr

080481c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80481c0:	b480      	push	{r7}
 80481c2:	b085      	sub	sp, #20
 80481c4:	af00      	add	r7, sp, #0
 80481c6:	6078      	str	r0, [r7, #4]
 80481c8:	460b      	mov	r3, r1
 80481ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80481cc:	687b      	ldr	r3, [r7, #4]
 80481ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80481d0:	68fb      	ldr	r3, [r7, #12]
 80481d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80481d6:	681b      	ldr	r3, [r3, #0]
 80481d8:	68fa      	ldr	r2, [r7, #12]
 80481da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80481de:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80481e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80481e4:	68fb      	ldr	r3, [r7, #12]
 80481e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80481ea:	681a      	ldr	r2, [r3, #0]
 80481ec:	78fb      	ldrb	r3, [r7, #3]
 80481ee:	011b      	lsls	r3, r3, #4
 80481f0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80481f4:	68f9      	ldr	r1, [r7, #12]
 80481f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80481fa:	4313      	orrs	r3, r2
 80481fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80481fe:	2300      	movs	r3, #0
}
 8048200:	4618      	mov	r0, r3
 8048202:	3714      	adds	r7, #20
 8048204:	46bd      	mov	sp, r7
 8048206:	f85d 7b04 	ldr.w	r7, [sp], #4
 804820a:	4770      	bx	lr

0804820c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 804820c:	b480      	push	{r7}
 804820e:	b085      	sub	sp, #20
 8048210:	af00      	add	r7, sp, #0
 8048212:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048214:	687b      	ldr	r3, [r7, #4]
 8048216:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8048218:	68fb      	ldr	r3, [r7, #12]
 804821a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 804821e:	681b      	ldr	r3, [r3, #0]
 8048220:	68fa      	ldr	r2, [r7, #12]
 8048222:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8048226:	f023 0303 	bic.w	r3, r3, #3
 804822a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 804822c:	68fb      	ldr	r3, [r7, #12]
 804822e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048232:	685b      	ldr	r3, [r3, #4]
 8048234:	68fa      	ldr	r2, [r7, #12]
 8048236:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804823a:	f023 0302 	bic.w	r3, r3, #2
 804823e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8048240:	2300      	movs	r3, #0
}
 8048242:	4618      	mov	r0, r3
 8048244:	3714      	adds	r7, #20
 8048246:	46bd      	mov	sp, r7
 8048248:	f85d 7b04 	ldr.w	r7, [sp], #4
 804824c:	4770      	bx	lr

0804824e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 804824e:	b480      	push	{r7}
 8048250:	b085      	sub	sp, #20
 8048252:	af00      	add	r7, sp, #0
 8048254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048256:	687b      	ldr	r3, [r7, #4]
 8048258:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 804825a:	68fb      	ldr	r3, [r7, #12]
 804825c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8048260:	681b      	ldr	r3, [r3, #0]
 8048262:	68fa      	ldr	r2, [r7, #12]
 8048264:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8048268:	f023 0303 	bic.w	r3, r3, #3
 804826c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 804826e:	68fb      	ldr	r3, [r7, #12]
 8048270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048274:	685b      	ldr	r3, [r3, #4]
 8048276:	68fa      	ldr	r2, [r7, #12]
 8048278:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804827c:	f043 0302 	orr.w	r3, r3, #2
 8048280:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8048282:	2300      	movs	r3, #0
}
 8048284:	4618      	mov	r0, r3
 8048286:	3714      	adds	r7, #20
 8048288:	46bd      	mov	sp, r7
 804828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804828e:	4770      	bx	lr

08048290 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8048290:	b480      	push	{r7}
 8048292:	b085      	sub	sp, #20
 8048294:	af00      	add	r7, sp, #0
 8048296:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8048298:	687b      	ldr	r3, [r7, #4]
 804829a:	695b      	ldr	r3, [r3, #20]
 804829c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 804829e:	687b      	ldr	r3, [r7, #4]
 80482a0:	699b      	ldr	r3, [r3, #24]
 80482a2:	68fa      	ldr	r2, [r7, #12]
 80482a4:	4013      	ands	r3, r2
 80482a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80482a8:	68fb      	ldr	r3, [r7, #12]
}
 80482aa:	4618      	mov	r0, r3
 80482ac:	3714      	adds	r7, #20
 80482ae:	46bd      	mov	sp, r7
 80482b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80482b4:	4770      	bx	lr

080482b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80482b6:	b480      	push	{r7}
 80482b8:	b085      	sub	sp, #20
 80482ba:	af00      	add	r7, sp, #0
 80482bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80482be:	687b      	ldr	r3, [r7, #4]
 80482c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80482c2:	68fb      	ldr	r3, [r7, #12]
 80482c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80482c8:	699b      	ldr	r3, [r3, #24]
 80482ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80482cc:	68fb      	ldr	r3, [r7, #12]
 80482ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80482d2:	69db      	ldr	r3, [r3, #28]
 80482d4:	68ba      	ldr	r2, [r7, #8]
 80482d6:	4013      	ands	r3, r2
 80482d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80482da:	68bb      	ldr	r3, [r7, #8]
 80482dc:	0c1b      	lsrs	r3, r3, #16
}
 80482de:	4618      	mov	r0, r3
 80482e0:	3714      	adds	r7, #20
 80482e2:	46bd      	mov	sp, r7
 80482e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80482e8:	4770      	bx	lr

080482ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80482ea:	b480      	push	{r7}
 80482ec:	b085      	sub	sp, #20
 80482ee:	af00      	add	r7, sp, #0
 80482f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80482f2:	687b      	ldr	r3, [r7, #4]
 80482f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80482f6:	68fb      	ldr	r3, [r7, #12]
 80482f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80482fc:	699b      	ldr	r3, [r3, #24]
 80482fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8048300:	68fb      	ldr	r3, [r7, #12]
 8048302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048306:	69db      	ldr	r3, [r3, #28]
 8048308:	68ba      	ldr	r2, [r7, #8]
 804830a:	4013      	ands	r3, r2
 804830c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 804830e:	68bb      	ldr	r3, [r7, #8]
 8048310:	b29b      	uxth	r3, r3
}
 8048312:	4618      	mov	r0, r3
 8048314:	3714      	adds	r7, #20
 8048316:	46bd      	mov	sp, r7
 8048318:	f85d 7b04 	ldr.w	r7, [sp], #4
 804831c:	4770      	bx	lr

0804831e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 804831e:	b480      	push	{r7}
 8048320:	b085      	sub	sp, #20
 8048322:	af00      	add	r7, sp, #0
 8048324:	6078      	str	r0, [r7, #4]
 8048326:	460b      	mov	r3, r1
 8048328:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804832a:	687b      	ldr	r3, [r7, #4]
 804832c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 804832e:	78fb      	ldrb	r3, [r7, #3]
 8048330:	015a      	lsls	r2, r3, #5
 8048332:	68fb      	ldr	r3, [r7, #12]
 8048334:	4413      	add	r3, r2
 8048336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804833a:	689b      	ldr	r3, [r3, #8]
 804833c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 804833e:	68fb      	ldr	r3, [r7, #12]
 8048340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048344:	695b      	ldr	r3, [r3, #20]
 8048346:	68ba      	ldr	r2, [r7, #8]
 8048348:	4013      	ands	r3, r2
 804834a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 804834c:	68bb      	ldr	r3, [r7, #8]
}
 804834e:	4618      	mov	r0, r3
 8048350:	3714      	adds	r7, #20
 8048352:	46bd      	mov	sp, r7
 8048354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048358:	4770      	bx	lr

0804835a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 804835a:	b480      	push	{r7}
 804835c:	b087      	sub	sp, #28
 804835e:	af00      	add	r7, sp, #0
 8048360:	6078      	str	r0, [r7, #4]
 8048362:	460b      	mov	r3, r1
 8048364:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048366:	687b      	ldr	r3, [r7, #4]
 8048368:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 804836a:	697b      	ldr	r3, [r7, #20]
 804836c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048370:	691b      	ldr	r3, [r3, #16]
 8048372:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8048374:	697b      	ldr	r3, [r7, #20]
 8048376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804837a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 804837c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 804837e:	78fb      	ldrb	r3, [r7, #3]
 8048380:	f003 030f 	and.w	r3, r3, #15
 8048384:	68fa      	ldr	r2, [r7, #12]
 8048386:	fa22 f303 	lsr.w	r3, r2, r3
 804838a:	01db      	lsls	r3, r3, #7
 804838c:	b2db      	uxtb	r3, r3
 804838e:	693a      	ldr	r2, [r7, #16]
 8048390:	4313      	orrs	r3, r2
 8048392:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8048394:	78fb      	ldrb	r3, [r7, #3]
 8048396:	015a      	lsls	r2, r3, #5
 8048398:	697b      	ldr	r3, [r7, #20]
 804839a:	4413      	add	r3, r2
 804839c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80483a0:	689b      	ldr	r3, [r3, #8]
 80483a2:	693a      	ldr	r2, [r7, #16]
 80483a4:	4013      	ands	r3, r2
 80483a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80483a8:	68bb      	ldr	r3, [r7, #8]
}
 80483aa:	4618      	mov	r0, r3
 80483ac:	371c      	adds	r7, #28
 80483ae:	46bd      	mov	sp, r7
 80483b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80483b4:	4770      	bx	lr

080483b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80483b6:	b480      	push	{r7}
 80483b8:	b083      	sub	sp, #12
 80483ba:	af00      	add	r7, sp, #0
 80483bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80483be:	687b      	ldr	r3, [r7, #4]
 80483c0:	695b      	ldr	r3, [r3, #20]
 80483c2:	f003 0301 	and.w	r3, r3, #1
}
 80483c6:	4618      	mov	r0, r3
 80483c8:	370c      	adds	r7, #12
 80483ca:	46bd      	mov	sp, r7
 80483cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80483d0:	4770      	bx	lr
	...

080483d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80483d4:	b480      	push	{r7}
 80483d6:	b085      	sub	sp, #20
 80483d8:	af00      	add	r7, sp, #0
 80483da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80483dc:	687b      	ldr	r3, [r7, #4]
 80483de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80483e0:	68fb      	ldr	r3, [r7, #12]
 80483e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80483e6:	681a      	ldr	r2, [r3, #0]
 80483e8:	68fb      	ldr	r3, [r7, #12]
 80483ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80483ee:	4619      	mov	r1, r3
 80483f0:	4b09      	ldr	r3, [pc, #36]	@ (8048418 <USB_ActivateSetup+0x44>)
 80483f2:	4013      	ands	r3, r2
 80483f4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80483f6:	68fb      	ldr	r3, [r7, #12]
 80483f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80483fc:	685b      	ldr	r3, [r3, #4]
 80483fe:	68fa      	ldr	r2, [r7, #12]
 8048400:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8048404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8048408:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 804840a:	2300      	movs	r3, #0
}
 804840c:	4618      	mov	r0, r3
 804840e:	3714      	adds	r7, #20
 8048410:	46bd      	mov	sp, r7
 8048412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048416:	4770      	bx	lr
 8048418:	fffff800 	.word	0xfffff800

0804841c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 804841c:	b480      	push	{r7}
 804841e:	b087      	sub	sp, #28
 8048420:	af00      	add	r7, sp, #0
 8048422:	60f8      	str	r0, [r7, #12]
 8048424:	460b      	mov	r3, r1
 8048426:	607a      	str	r2, [r7, #4]
 8048428:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804842a:	68fb      	ldr	r3, [r7, #12]
 804842c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 804842e:	68fb      	ldr	r3, [r7, #12]
 8048430:	333c      	adds	r3, #60	@ 0x3c
 8048432:	3304      	adds	r3, #4
 8048434:	681b      	ldr	r3, [r3, #0]
 8048436:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8048438:	693b      	ldr	r3, [r7, #16]
 804843a:	4a26      	ldr	r2, [pc, #152]	@ (80484d4 <USB_EP0_OutStart+0xb8>)
 804843c:	4293      	cmp	r3, r2
 804843e:	d90a      	bls.n	8048456 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8048440:	697b      	ldr	r3, [r7, #20]
 8048442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8048446:	681b      	ldr	r3, [r3, #0]
 8048448:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 804844c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8048450:	d101      	bne.n	8048456 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8048452:	2300      	movs	r3, #0
 8048454:	e037      	b.n	80484c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8048456:	697b      	ldr	r3, [r7, #20]
 8048458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804845c:	461a      	mov	r2, r3
 804845e:	2300      	movs	r3, #0
 8048460:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8048462:	697b      	ldr	r3, [r7, #20]
 8048464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8048468:	691b      	ldr	r3, [r3, #16]
 804846a:	697a      	ldr	r2, [r7, #20]
 804846c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8048470:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8048474:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8048476:	697b      	ldr	r3, [r7, #20]
 8048478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804847c:	691b      	ldr	r3, [r3, #16]
 804847e:	697a      	ldr	r2, [r7, #20]
 8048480:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8048484:	f043 0318 	orr.w	r3, r3, #24
 8048488:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 804848a:	697b      	ldr	r3, [r7, #20]
 804848c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8048490:	691b      	ldr	r3, [r3, #16]
 8048492:	697a      	ldr	r2, [r7, #20]
 8048494:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8048498:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 804849c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 804849e:	7afb      	ldrb	r3, [r7, #11]
 80484a0:	2b01      	cmp	r3, #1
 80484a2:	d10f      	bne.n	80484c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80484a4:	697b      	ldr	r3, [r7, #20]
 80484a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80484aa:	461a      	mov	r2, r3
 80484ac:	687b      	ldr	r3, [r7, #4]
 80484ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80484b0:	697b      	ldr	r3, [r7, #20]
 80484b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80484b6:	681b      	ldr	r3, [r3, #0]
 80484b8:	697a      	ldr	r2, [r7, #20]
 80484ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80484be:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80484c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80484c4:	2300      	movs	r3, #0
}
 80484c6:	4618      	mov	r0, r3
 80484c8:	371c      	adds	r7, #28
 80484ca:	46bd      	mov	sp, r7
 80484cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80484d0:	4770      	bx	lr
 80484d2:	bf00      	nop
 80484d4:	4f54300a 	.word	0x4f54300a

080484d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80484d8:	b480      	push	{r7}
 80484da:	b085      	sub	sp, #20
 80484dc:	af00      	add	r7, sp, #0
 80484de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80484e0:	2300      	movs	r3, #0
 80484e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80484e4:	68fb      	ldr	r3, [r7, #12]
 80484e6:	3301      	adds	r3, #1
 80484e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80484ea:	68fb      	ldr	r3, [r7, #12]
 80484ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80484f0:	d901      	bls.n	80484f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80484f2:	2303      	movs	r3, #3
 80484f4:	e01b      	b.n	804852e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80484f6:	687b      	ldr	r3, [r7, #4]
 80484f8:	691b      	ldr	r3, [r3, #16]
 80484fa:	2b00      	cmp	r3, #0
 80484fc:	daf2      	bge.n	80484e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80484fe:	2300      	movs	r3, #0
 8048500:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8048502:	687b      	ldr	r3, [r7, #4]
 8048504:	691b      	ldr	r3, [r3, #16]
 8048506:	f043 0201 	orr.w	r2, r3, #1
 804850a:	687b      	ldr	r3, [r7, #4]
 804850c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 804850e:	68fb      	ldr	r3, [r7, #12]
 8048510:	3301      	adds	r3, #1
 8048512:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8048514:	68fb      	ldr	r3, [r7, #12]
 8048516:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 804851a:	d901      	bls.n	8048520 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 804851c:	2303      	movs	r3, #3
 804851e:	e006      	b.n	804852e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8048520:	687b      	ldr	r3, [r7, #4]
 8048522:	691b      	ldr	r3, [r3, #16]
 8048524:	f003 0301 	and.w	r3, r3, #1
 8048528:	2b01      	cmp	r3, #1
 804852a:	d0f0      	beq.n	804850e <USB_CoreReset+0x36>

  return HAL_OK;
 804852c:	2300      	movs	r3, #0
}
 804852e:	4618      	mov	r0, r3
 8048530:	3714      	adds	r7, #20
 8048532:	46bd      	mov	sp, r7
 8048534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048538:	4770      	bx	lr

0804853a <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 804853a:	b580      	push	{r7, lr}
 804853c:	b086      	sub	sp, #24
 804853e:	af00      	add	r7, sp, #0
 8048540:	60f8      	str	r0, [r7, #12]
 8048542:	60b9      	str	r1, [r7, #8]
 8048544:	4613      	mov	r3, r2
 8048546:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8048548:	68fb      	ldr	r3, [r7, #12]
 804854a:	2b00      	cmp	r3, #0
 804854c:	d101      	bne.n	8048552 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 804854e:	2303      	movs	r3, #3
 8048550:	e01f      	b.n	8048592 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8048552:	68fb      	ldr	r3, [r7, #12]
 8048554:	2200      	movs	r2, #0
 8048556:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 804855a:	68fb      	ldr	r3, [r7, #12]
 804855c:	2200      	movs	r2, #0
 804855e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8048562:	68fb      	ldr	r3, [r7, #12]
 8048564:	2200      	movs	r2, #0
 8048566:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 804856a:	68bb      	ldr	r3, [r7, #8]
 804856c:	2b00      	cmp	r3, #0
 804856e:	d003      	beq.n	8048578 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8048570:	68fb      	ldr	r3, [r7, #12]
 8048572:	68ba      	ldr	r2, [r7, #8]
 8048574:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8048578:	68fb      	ldr	r3, [r7, #12]
 804857a:	2201      	movs	r2, #1
 804857c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8048580:	68fb      	ldr	r3, [r7, #12]
 8048582:	79fa      	ldrb	r2, [r7, #7]
 8048584:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8048586:	68f8      	ldr	r0, [r7, #12]
 8048588:	f002 f862 	bl	804a650 <USBD_LL_Init>
 804858c:	4603      	mov	r3, r0
 804858e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8048590:	7dfb      	ldrb	r3, [r7, #23]
}
 8048592:	4618      	mov	r0, r3
 8048594:	3718      	adds	r7, #24
 8048596:	46bd      	mov	sp, r7
 8048598:	bd80      	pop	{r7, pc}

0804859a <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 804859a:	b580      	push	{r7, lr}
 804859c:	b084      	sub	sp, #16
 804859e:	af00      	add	r7, sp, #0
 80485a0:	6078      	str	r0, [r7, #4]
 80485a2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80485a4:	2300      	movs	r3, #0
 80485a6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80485a8:	683b      	ldr	r3, [r7, #0]
 80485aa:	2b00      	cmp	r3, #0
 80485ac:	d101      	bne.n	80485b2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80485ae:	2303      	movs	r3, #3
 80485b0:	e025      	b.n	80485fe <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80485b2:	687b      	ldr	r3, [r7, #4]
 80485b4:	683a      	ldr	r2, [r7, #0]
 80485b6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80485ba:	687b      	ldr	r3, [r7, #4]
 80485bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80485c0:	687b      	ldr	r3, [r7, #4]
 80485c2:	32ae      	adds	r2, #174	@ 0xae
 80485c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80485c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80485ca:	2b00      	cmp	r3, #0
 80485cc:	d00f      	beq.n	80485ee <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80485ce:	687b      	ldr	r3, [r7, #4]
 80485d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80485d4:	687b      	ldr	r3, [r7, #4]
 80485d6:	32ae      	adds	r2, #174	@ 0xae
 80485d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80485dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80485de:	f107 020e 	add.w	r2, r7, #14
 80485e2:	4610      	mov	r0, r2
 80485e4:	4798      	blx	r3
 80485e6:	4602      	mov	r2, r0
 80485e8:	687b      	ldr	r3, [r7, #4]
 80485ea:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80485ee:	687b      	ldr	r3, [r7, #4]
 80485f0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80485f4:	1c5a      	adds	r2, r3, #1
 80485f6:	687b      	ldr	r3, [r7, #4]
 80485f8:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80485fc:	2300      	movs	r3, #0
}
 80485fe:	4618      	mov	r0, r3
 8048600:	3710      	adds	r7, #16
 8048602:	46bd      	mov	sp, r7
 8048604:	bd80      	pop	{r7, pc}

08048606 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8048606:	b580      	push	{r7, lr}
 8048608:	b082      	sub	sp, #8
 804860a:	af00      	add	r7, sp, #0
 804860c:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 804860e:	6878      	ldr	r0, [r7, #4]
 8048610:	f002 f870 	bl	804a6f4 <USBD_LL_Start>
 8048614:	4603      	mov	r3, r0
}
 8048616:	4618      	mov	r0, r3
 8048618:	3708      	adds	r7, #8
 804861a:	46bd      	mov	sp, r7
 804861c:	bd80      	pop	{r7, pc}

0804861e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 804861e:	b480      	push	{r7}
 8048620:	b083      	sub	sp, #12
 8048622:	af00      	add	r7, sp, #0
 8048624:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8048626:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8048628:	4618      	mov	r0, r3
 804862a:	370c      	adds	r7, #12
 804862c:	46bd      	mov	sp, r7
 804862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048632:	4770      	bx	lr

08048634 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8048634:	b580      	push	{r7, lr}
 8048636:	b084      	sub	sp, #16
 8048638:	af00      	add	r7, sp, #0
 804863a:	6078      	str	r0, [r7, #4]
 804863c:	460b      	mov	r3, r1
 804863e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8048640:	2300      	movs	r3, #0
 8048642:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8048644:	687b      	ldr	r3, [r7, #4]
 8048646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 804864a:	2b00      	cmp	r3, #0
 804864c:	d009      	beq.n	8048662 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 804864e:	687b      	ldr	r3, [r7, #4]
 8048650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048654:	681b      	ldr	r3, [r3, #0]
 8048656:	78fa      	ldrb	r2, [r7, #3]
 8048658:	4611      	mov	r1, r2
 804865a:	6878      	ldr	r0, [r7, #4]
 804865c:	4798      	blx	r3
 804865e:	4603      	mov	r3, r0
 8048660:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8048662:	7bfb      	ldrb	r3, [r7, #15]
}
 8048664:	4618      	mov	r0, r3
 8048666:	3710      	adds	r7, #16
 8048668:	46bd      	mov	sp, r7
 804866a:	bd80      	pop	{r7, pc}

0804866c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 804866c:	b580      	push	{r7, lr}
 804866e:	b084      	sub	sp, #16
 8048670:	af00      	add	r7, sp, #0
 8048672:	6078      	str	r0, [r7, #4]
 8048674:	460b      	mov	r3, r1
 8048676:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8048678:	2300      	movs	r3, #0
 804867a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 804867c:	687b      	ldr	r3, [r7, #4]
 804867e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048682:	685b      	ldr	r3, [r3, #4]
 8048684:	78fa      	ldrb	r2, [r7, #3]
 8048686:	4611      	mov	r1, r2
 8048688:	6878      	ldr	r0, [r7, #4]
 804868a:	4798      	blx	r3
 804868c:	4603      	mov	r3, r0
 804868e:	2b00      	cmp	r3, #0
 8048690:	d001      	beq.n	8048696 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8048692:	2303      	movs	r3, #3
 8048694:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8048696:	7bfb      	ldrb	r3, [r7, #15]
}
 8048698:	4618      	mov	r0, r3
 804869a:	3710      	adds	r7, #16
 804869c:	46bd      	mov	sp, r7
 804869e:	bd80      	pop	{r7, pc}

080486a0 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80486a0:	b580      	push	{r7, lr}
 80486a2:	b084      	sub	sp, #16
 80486a4:	af00      	add	r7, sp, #0
 80486a6:	6078      	str	r0, [r7, #4]
 80486a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80486aa:	687b      	ldr	r3, [r7, #4]
 80486ac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80486b0:	6839      	ldr	r1, [r7, #0]
 80486b2:	4618      	mov	r0, r3
 80486b4:	f001 f937 	bl	8049926 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80486b8:	687b      	ldr	r3, [r7, #4]
 80486ba:	2201      	movs	r2, #1
 80486bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80486c0:	687b      	ldr	r3, [r7, #4]
 80486c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80486c6:	461a      	mov	r2, r3
 80486c8:	687b      	ldr	r3, [r7, #4]
 80486ca:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80486ce:	687b      	ldr	r3, [r7, #4]
 80486d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80486d4:	f003 031f 	and.w	r3, r3, #31
 80486d8:	2b02      	cmp	r3, #2
 80486da:	d01a      	beq.n	8048712 <USBD_LL_SetupStage+0x72>
 80486dc:	2b02      	cmp	r3, #2
 80486de:	d822      	bhi.n	8048726 <USBD_LL_SetupStage+0x86>
 80486e0:	2b00      	cmp	r3, #0
 80486e2:	d002      	beq.n	80486ea <USBD_LL_SetupStage+0x4a>
 80486e4:	2b01      	cmp	r3, #1
 80486e6:	d00a      	beq.n	80486fe <USBD_LL_SetupStage+0x5e>
 80486e8:	e01d      	b.n	8048726 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80486ea:	687b      	ldr	r3, [r7, #4]
 80486ec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80486f0:	4619      	mov	r1, r3
 80486f2:	6878      	ldr	r0, [r7, #4]
 80486f4:	f000 fb64 	bl	8048dc0 <USBD_StdDevReq>
 80486f8:	4603      	mov	r3, r0
 80486fa:	73fb      	strb	r3, [r7, #15]
      break;
 80486fc:	e020      	b.n	8048740 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80486fe:	687b      	ldr	r3, [r7, #4]
 8048700:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8048704:	4619      	mov	r1, r3
 8048706:	6878      	ldr	r0, [r7, #4]
 8048708:	f000 fbcc 	bl	8048ea4 <USBD_StdItfReq>
 804870c:	4603      	mov	r3, r0
 804870e:	73fb      	strb	r3, [r7, #15]
      break;
 8048710:	e016      	b.n	8048740 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8048712:	687b      	ldr	r3, [r7, #4]
 8048714:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8048718:	4619      	mov	r1, r3
 804871a:	6878      	ldr	r0, [r7, #4]
 804871c:	f000 fc2e 	bl	8048f7c <USBD_StdEPReq>
 8048720:	4603      	mov	r3, r0
 8048722:	73fb      	strb	r3, [r7, #15]
      break;
 8048724:	e00c      	b.n	8048740 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8048726:	687b      	ldr	r3, [r7, #4]
 8048728:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 804872c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8048730:	b2db      	uxtb	r3, r3
 8048732:	4619      	mov	r1, r3
 8048734:	6878      	ldr	r0, [r7, #4]
 8048736:	f002 f83d 	bl	804a7b4 <USBD_LL_StallEP>
 804873a:	4603      	mov	r3, r0
 804873c:	73fb      	strb	r3, [r7, #15]
      break;
 804873e:	bf00      	nop
  }

  return ret;
 8048740:	7bfb      	ldrb	r3, [r7, #15]
}
 8048742:	4618      	mov	r0, r3
 8048744:	3710      	adds	r7, #16
 8048746:	46bd      	mov	sp, r7
 8048748:	bd80      	pop	{r7, pc}

0804874a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 804874a:	b580      	push	{r7, lr}
 804874c:	b086      	sub	sp, #24
 804874e:	af00      	add	r7, sp, #0
 8048750:	60f8      	str	r0, [r7, #12]
 8048752:	460b      	mov	r3, r1
 8048754:	607a      	str	r2, [r7, #4]
 8048756:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8048758:	2300      	movs	r3, #0
 804875a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 804875c:	7afb      	ldrb	r3, [r7, #11]
 804875e:	2b00      	cmp	r3, #0
 8048760:	d16e      	bne.n	8048840 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8048762:	68fb      	ldr	r3, [r7, #12]
 8048764:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8048768:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 804876a:	68fb      	ldr	r3, [r7, #12]
 804876c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8048770:	2b03      	cmp	r3, #3
 8048772:	f040 8098 	bne.w	80488a6 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8048776:	693b      	ldr	r3, [r7, #16]
 8048778:	689a      	ldr	r2, [r3, #8]
 804877a:	693b      	ldr	r3, [r7, #16]
 804877c:	68db      	ldr	r3, [r3, #12]
 804877e:	429a      	cmp	r2, r3
 8048780:	d913      	bls.n	80487aa <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8048782:	693b      	ldr	r3, [r7, #16]
 8048784:	689a      	ldr	r2, [r3, #8]
 8048786:	693b      	ldr	r3, [r7, #16]
 8048788:	68db      	ldr	r3, [r3, #12]
 804878a:	1ad2      	subs	r2, r2, r3
 804878c:	693b      	ldr	r3, [r7, #16]
 804878e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8048790:	693b      	ldr	r3, [r7, #16]
 8048792:	68da      	ldr	r2, [r3, #12]
 8048794:	693b      	ldr	r3, [r7, #16]
 8048796:	689b      	ldr	r3, [r3, #8]
 8048798:	4293      	cmp	r3, r2
 804879a:	bf28      	it	cs
 804879c:	4613      	movcs	r3, r2
 804879e:	461a      	mov	r2, r3
 80487a0:	6879      	ldr	r1, [r7, #4]
 80487a2:	68f8      	ldr	r0, [r7, #12]
 80487a4:	f001 fbcc 	bl	8049f40 <USBD_CtlContinueRx>
 80487a8:	e07d      	b.n	80488a6 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80487aa:	68fb      	ldr	r3, [r7, #12]
 80487ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80487b0:	f003 031f 	and.w	r3, r3, #31
 80487b4:	2b02      	cmp	r3, #2
 80487b6:	d014      	beq.n	80487e2 <USBD_LL_DataOutStage+0x98>
 80487b8:	2b02      	cmp	r3, #2
 80487ba:	d81d      	bhi.n	80487f8 <USBD_LL_DataOutStage+0xae>
 80487bc:	2b00      	cmp	r3, #0
 80487be:	d002      	beq.n	80487c6 <USBD_LL_DataOutStage+0x7c>
 80487c0:	2b01      	cmp	r3, #1
 80487c2:	d003      	beq.n	80487cc <USBD_LL_DataOutStage+0x82>
 80487c4:	e018      	b.n	80487f8 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80487c6:	2300      	movs	r3, #0
 80487c8:	75bb      	strb	r3, [r7, #22]
            break;
 80487ca:	e018      	b.n	80487fe <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80487cc:	68fb      	ldr	r3, [r7, #12]
 80487ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80487d2:	b2db      	uxtb	r3, r3
 80487d4:	4619      	mov	r1, r3
 80487d6:	68f8      	ldr	r0, [r7, #12]
 80487d8:	f000 fa64 	bl	8048ca4 <USBD_CoreFindIF>
 80487dc:	4603      	mov	r3, r0
 80487de:	75bb      	strb	r3, [r7, #22]
            break;
 80487e0:	e00d      	b.n	80487fe <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80487e2:	68fb      	ldr	r3, [r7, #12]
 80487e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80487e8:	b2db      	uxtb	r3, r3
 80487ea:	4619      	mov	r1, r3
 80487ec:	68f8      	ldr	r0, [r7, #12]
 80487ee:	f000 fa66 	bl	8048cbe <USBD_CoreFindEP>
 80487f2:	4603      	mov	r3, r0
 80487f4:	75bb      	strb	r3, [r7, #22]
            break;
 80487f6:	e002      	b.n	80487fe <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80487f8:	2300      	movs	r3, #0
 80487fa:	75bb      	strb	r3, [r7, #22]
            break;
 80487fc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80487fe:	7dbb      	ldrb	r3, [r7, #22]
 8048800:	2b00      	cmp	r3, #0
 8048802:	d119      	bne.n	8048838 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048804:	68fb      	ldr	r3, [r7, #12]
 8048806:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 804880a:	b2db      	uxtb	r3, r3
 804880c:	2b03      	cmp	r3, #3
 804880e:	d113      	bne.n	8048838 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8048810:	7dba      	ldrb	r2, [r7, #22]
 8048812:	68fb      	ldr	r3, [r7, #12]
 8048814:	32ae      	adds	r2, #174	@ 0xae
 8048816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804881a:	691b      	ldr	r3, [r3, #16]
 804881c:	2b00      	cmp	r3, #0
 804881e:	d00b      	beq.n	8048838 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8048820:	7dba      	ldrb	r2, [r7, #22]
 8048822:	68fb      	ldr	r3, [r7, #12]
 8048824:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8048828:	7dba      	ldrb	r2, [r7, #22]
 804882a:	68fb      	ldr	r3, [r7, #12]
 804882c:	32ae      	adds	r2, #174	@ 0xae
 804882e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048832:	691b      	ldr	r3, [r3, #16]
 8048834:	68f8      	ldr	r0, [r7, #12]
 8048836:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8048838:	68f8      	ldr	r0, [r7, #12]
 804883a:	f001 fb92 	bl	8049f62 <USBD_CtlSendStatus>
 804883e:	e032      	b.n	80488a6 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8048840:	7afb      	ldrb	r3, [r7, #11]
 8048842:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8048846:	b2db      	uxtb	r3, r3
 8048848:	4619      	mov	r1, r3
 804884a:	68f8      	ldr	r0, [r7, #12]
 804884c:	f000 fa37 	bl	8048cbe <USBD_CoreFindEP>
 8048850:	4603      	mov	r3, r0
 8048852:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8048854:	7dbb      	ldrb	r3, [r7, #22]
 8048856:	2bff      	cmp	r3, #255	@ 0xff
 8048858:	d025      	beq.n	80488a6 <USBD_LL_DataOutStage+0x15c>
 804885a:	7dbb      	ldrb	r3, [r7, #22]
 804885c:	2b00      	cmp	r3, #0
 804885e:	d122      	bne.n	80488a6 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048860:	68fb      	ldr	r3, [r7, #12]
 8048862:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048866:	b2db      	uxtb	r3, r3
 8048868:	2b03      	cmp	r3, #3
 804886a:	d117      	bne.n	804889c <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 804886c:	7dba      	ldrb	r2, [r7, #22]
 804886e:	68fb      	ldr	r3, [r7, #12]
 8048870:	32ae      	adds	r2, #174	@ 0xae
 8048872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048876:	699b      	ldr	r3, [r3, #24]
 8048878:	2b00      	cmp	r3, #0
 804887a:	d00f      	beq.n	804889c <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 804887c:	7dba      	ldrb	r2, [r7, #22]
 804887e:	68fb      	ldr	r3, [r7, #12]
 8048880:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8048884:	7dba      	ldrb	r2, [r7, #22]
 8048886:	68fb      	ldr	r3, [r7, #12]
 8048888:	32ae      	adds	r2, #174	@ 0xae
 804888a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804888e:	699b      	ldr	r3, [r3, #24]
 8048890:	7afa      	ldrb	r2, [r7, #11]
 8048892:	4611      	mov	r1, r2
 8048894:	68f8      	ldr	r0, [r7, #12]
 8048896:	4798      	blx	r3
 8048898:	4603      	mov	r3, r0
 804889a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 804889c:	7dfb      	ldrb	r3, [r7, #23]
 804889e:	2b00      	cmp	r3, #0
 80488a0:	d001      	beq.n	80488a6 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80488a2:	7dfb      	ldrb	r3, [r7, #23]
 80488a4:	e000      	b.n	80488a8 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80488a6:	2300      	movs	r3, #0
}
 80488a8:	4618      	mov	r0, r3
 80488aa:	3718      	adds	r7, #24
 80488ac:	46bd      	mov	sp, r7
 80488ae:	bd80      	pop	{r7, pc}

080488b0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80488b0:	b580      	push	{r7, lr}
 80488b2:	b086      	sub	sp, #24
 80488b4:	af00      	add	r7, sp, #0
 80488b6:	60f8      	str	r0, [r7, #12]
 80488b8:	460b      	mov	r3, r1
 80488ba:	607a      	str	r2, [r7, #4]
 80488bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80488be:	7afb      	ldrb	r3, [r7, #11]
 80488c0:	2b00      	cmp	r3, #0
 80488c2:	d16f      	bne.n	80489a4 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80488c4:	68fb      	ldr	r3, [r7, #12]
 80488c6:	3314      	adds	r3, #20
 80488c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80488ca:	68fb      	ldr	r3, [r7, #12]
 80488cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80488d0:	2b02      	cmp	r3, #2
 80488d2:	d15a      	bne.n	804898a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80488d4:	693b      	ldr	r3, [r7, #16]
 80488d6:	689a      	ldr	r2, [r3, #8]
 80488d8:	693b      	ldr	r3, [r7, #16]
 80488da:	68db      	ldr	r3, [r3, #12]
 80488dc:	429a      	cmp	r2, r3
 80488de:	d914      	bls.n	804890a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80488e0:	693b      	ldr	r3, [r7, #16]
 80488e2:	689a      	ldr	r2, [r3, #8]
 80488e4:	693b      	ldr	r3, [r7, #16]
 80488e6:	68db      	ldr	r3, [r3, #12]
 80488e8:	1ad2      	subs	r2, r2, r3
 80488ea:	693b      	ldr	r3, [r7, #16]
 80488ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80488ee:	693b      	ldr	r3, [r7, #16]
 80488f0:	689b      	ldr	r3, [r3, #8]
 80488f2:	461a      	mov	r2, r3
 80488f4:	6879      	ldr	r1, [r7, #4]
 80488f6:	68f8      	ldr	r0, [r7, #12]
 80488f8:	f001 fb11 	bl	8049f1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80488fc:	2300      	movs	r3, #0
 80488fe:	2200      	movs	r2, #0
 8048900:	2100      	movs	r1, #0
 8048902:	68f8      	ldr	r0, [r7, #12]
 8048904:	f002 f800 	bl	804a908 <USBD_LL_PrepareReceive>
 8048908:	e03f      	b.n	804898a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 804890a:	693b      	ldr	r3, [r7, #16]
 804890c:	68da      	ldr	r2, [r3, #12]
 804890e:	693b      	ldr	r3, [r7, #16]
 8048910:	689b      	ldr	r3, [r3, #8]
 8048912:	429a      	cmp	r2, r3
 8048914:	d11c      	bne.n	8048950 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8048916:	693b      	ldr	r3, [r7, #16]
 8048918:	685a      	ldr	r2, [r3, #4]
 804891a:	693b      	ldr	r3, [r7, #16]
 804891c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 804891e:	429a      	cmp	r2, r3
 8048920:	d316      	bcc.n	8048950 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8048922:	693b      	ldr	r3, [r7, #16]
 8048924:	685a      	ldr	r2, [r3, #4]
 8048926:	68fb      	ldr	r3, [r7, #12]
 8048928:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 804892c:	429a      	cmp	r2, r3
 804892e:	d20f      	bcs.n	8048950 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8048930:	2200      	movs	r2, #0
 8048932:	2100      	movs	r1, #0
 8048934:	68f8      	ldr	r0, [r7, #12]
 8048936:	f001 faf2 	bl	8049f1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 804893a:	68fb      	ldr	r3, [r7, #12]
 804893c:	2200      	movs	r2, #0
 804893e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8048942:	2300      	movs	r3, #0
 8048944:	2200      	movs	r2, #0
 8048946:	2100      	movs	r1, #0
 8048948:	68f8      	ldr	r0, [r7, #12]
 804894a:	f001 ffdd 	bl	804a908 <USBD_LL_PrepareReceive>
 804894e:	e01c      	b.n	804898a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048950:	68fb      	ldr	r3, [r7, #12]
 8048952:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048956:	b2db      	uxtb	r3, r3
 8048958:	2b03      	cmp	r3, #3
 804895a:	d10f      	bne.n	804897c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 804895c:	68fb      	ldr	r3, [r7, #12]
 804895e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048962:	68db      	ldr	r3, [r3, #12]
 8048964:	2b00      	cmp	r3, #0
 8048966:	d009      	beq.n	804897c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8048968:	68fb      	ldr	r3, [r7, #12]
 804896a:	2200      	movs	r2, #0
 804896c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8048970:	68fb      	ldr	r3, [r7, #12]
 8048972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048976:	68db      	ldr	r3, [r3, #12]
 8048978:	68f8      	ldr	r0, [r7, #12]
 804897a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 804897c:	2180      	movs	r1, #128	@ 0x80
 804897e:	68f8      	ldr	r0, [r7, #12]
 8048980:	f001 ff18 	bl	804a7b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8048984:	68f8      	ldr	r0, [r7, #12]
 8048986:	f001 faff 	bl	8049f88 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 804898a:	68fb      	ldr	r3, [r7, #12]
 804898c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8048990:	2b00      	cmp	r3, #0
 8048992:	d03a      	beq.n	8048a0a <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8048994:	68f8      	ldr	r0, [r7, #12]
 8048996:	f7ff fe42 	bl	804861e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 804899a:	68fb      	ldr	r3, [r7, #12]
 804899c:	2200      	movs	r2, #0
 804899e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80489a2:	e032      	b.n	8048a0a <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80489a4:	7afb      	ldrb	r3, [r7, #11]
 80489a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80489aa:	b2db      	uxtb	r3, r3
 80489ac:	4619      	mov	r1, r3
 80489ae:	68f8      	ldr	r0, [r7, #12]
 80489b0:	f000 f985 	bl	8048cbe <USBD_CoreFindEP>
 80489b4:	4603      	mov	r3, r0
 80489b6:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80489b8:	7dfb      	ldrb	r3, [r7, #23]
 80489ba:	2bff      	cmp	r3, #255	@ 0xff
 80489bc:	d025      	beq.n	8048a0a <USBD_LL_DataInStage+0x15a>
 80489be:	7dfb      	ldrb	r3, [r7, #23]
 80489c0:	2b00      	cmp	r3, #0
 80489c2:	d122      	bne.n	8048a0a <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80489c4:	68fb      	ldr	r3, [r7, #12]
 80489c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80489ca:	b2db      	uxtb	r3, r3
 80489cc:	2b03      	cmp	r3, #3
 80489ce:	d11c      	bne.n	8048a0a <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80489d0:	7dfa      	ldrb	r2, [r7, #23]
 80489d2:	68fb      	ldr	r3, [r7, #12]
 80489d4:	32ae      	adds	r2, #174	@ 0xae
 80489d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80489da:	695b      	ldr	r3, [r3, #20]
 80489dc:	2b00      	cmp	r3, #0
 80489de:	d014      	beq.n	8048a0a <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80489e0:	7dfa      	ldrb	r2, [r7, #23]
 80489e2:	68fb      	ldr	r3, [r7, #12]
 80489e4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80489e8:	7dfa      	ldrb	r2, [r7, #23]
 80489ea:	68fb      	ldr	r3, [r7, #12]
 80489ec:	32ae      	adds	r2, #174	@ 0xae
 80489ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80489f2:	695b      	ldr	r3, [r3, #20]
 80489f4:	7afa      	ldrb	r2, [r7, #11]
 80489f6:	4611      	mov	r1, r2
 80489f8:	68f8      	ldr	r0, [r7, #12]
 80489fa:	4798      	blx	r3
 80489fc:	4603      	mov	r3, r0
 80489fe:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8048a00:	7dbb      	ldrb	r3, [r7, #22]
 8048a02:	2b00      	cmp	r3, #0
 8048a04:	d001      	beq.n	8048a0a <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8048a06:	7dbb      	ldrb	r3, [r7, #22]
 8048a08:	e000      	b.n	8048a0c <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8048a0a:	2300      	movs	r3, #0
}
 8048a0c:	4618      	mov	r0, r3
 8048a0e:	3718      	adds	r7, #24
 8048a10:	46bd      	mov	sp, r7
 8048a12:	bd80      	pop	{r7, pc}

08048a14 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8048a14:	b580      	push	{r7, lr}
 8048a16:	b084      	sub	sp, #16
 8048a18:	af00      	add	r7, sp, #0
 8048a1a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8048a1c:	2300      	movs	r3, #0
 8048a1e:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8048a20:	687b      	ldr	r3, [r7, #4]
 8048a22:	2201      	movs	r2, #1
 8048a24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8048a28:	687b      	ldr	r3, [r7, #4]
 8048a2a:	2200      	movs	r2, #0
 8048a2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8048a30:	687b      	ldr	r3, [r7, #4]
 8048a32:	2200      	movs	r2, #0
 8048a34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8048a36:	687b      	ldr	r3, [r7, #4]
 8048a38:	2200      	movs	r2, #0
 8048a3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8048a3e:	687b      	ldr	r3, [r7, #4]
 8048a40:	2200      	movs	r2, #0
 8048a42:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8048a46:	687b      	ldr	r3, [r7, #4]
 8048a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048a4c:	2b00      	cmp	r3, #0
 8048a4e:	d014      	beq.n	8048a7a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8048a50:	687b      	ldr	r3, [r7, #4]
 8048a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048a56:	685b      	ldr	r3, [r3, #4]
 8048a58:	2b00      	cmp	r3, #0
 8048a5a:	d00e      	beq.n	8048a7a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8048a5c:	687b      	ldr	r3, [r7, #4]
 8048a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048a62:	685b      	ldr	r3, [r3, #4]
 8048a64:	687a      	ldr	r2, [r7, #4]
 8048a66:	6852      	ldr	r2, [r2, #4]
 8048a68:	b2d2      	uxtb	r2, r2
 8048a6a:	4611      	mov	r1, r2
 8048a6c:	6878      	ldr	r0, [r7, #4]
 8048a6e:	4798      	blx	r3
 8048a70:	4603      	mov	r3, r0
 8048a72:	2b00      	cmp	r3, #0
 8048a74:	d001      	beq.n	8048a7a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8048a76:	2303      	movs	r3, #3
 8048a78:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8048a7a:	2340      	movs	r3, #64	@ 0x40
 8048a7c:	2200      	movs	r2, #0
 8048a7e:	2100      	movs	r1, #0
 8048a80:	6878      	ldr	r0, [r7, #4]
 8048a82:	f001 fe52 	bl	804a72a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8048a86:	687b      	ldr	r3, [r7, #4]
 8048a88:	2201      	movs	r2, #1
 8048a8a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8048a8e:	687b      	ldr	r3, [r7, #4]
 8048a90:	2240      	movs	r2, #64	@ 0x40
 8048a92:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8048a96:	2340      	movs	r3, #64	@ 0x40
 8048a98:	2200      	movs	r2, #0
 8048a9a:	2180      	movs	r1, #128	@ 0x80
 8048a9c:	6878      	ldr	r0, [r7, #4]
 8048a9e:	f001 fe44 	bl	804a72a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8048aa2:	687b      	ldr	r3, [r7, #4]
 8048aa4:	2201      	movs	r2, #1
 8048aa6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8048aa8:	687b      	ldr	r3, [r7, #4]
 8048aaa:	2240      	movs	r2, #64	@ 0x40
 8048aac:	621a      	str	r2, [r3, #32]

  return ret;
 8048aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8048ab0:	4618      	mov	r0, r3
 8048ab2:	3710      	adds	r7, #16
 8048ab4:	46bd      	mov	sp, r7
 8048ab6:	bd80      	pop	{r7, pc}

08048ab8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8048ab8:	b480      	push	{r7}
 8048aba:	b083      	sub	sp, #12
 8048abc:	af00      	add	r7, sp, #0
 8048abe:	6078      	str	r0, [r7, #4]
 8048ac0:	460b      	mov	r3, r1
 8048ac2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8048ac4:	687b      	ldr	r3, [r7, #4]
 8048ac6:	78fa      	ldrb	r2, [r7, #3]
 8048ac8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8048aca:	2300      	movs	r3, #0
}
 8048acc:	4618      	mov	r0, r3
 8048ace:	370c      	adds	r7, #12
 8048ad0:	46bd      	mov	sp, r7
 8048ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048ad6:	4770      	bx	lr

08048ad8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8048ad8:	b480      	push	{r7}
 8048ada:	b083      	sub	sp, #12
 8048adc:	af00      	add	r7, sp, #0
 8048ade:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8048ae0:	687b      	ldr	r3, [r7, #4]
 8048ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048ae6:	b2db      	uxtb	r3, r3
 8048ae8:	2b04      	cmp	r3, #4
 8048aea:	d006      	beq.n	8048afa <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8048aec:	687b      	ldr	r3, [r7, #4]
 8048aee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048af2:	b2da      	uxtb	r2, r3
 8048af4:	687b      	ldr	r3, [r7, #4]
 8048af6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8048afa:	687b      	ldr	r3, [r7, #4]
 8048afc:	2204      	movs	r2, #4
 8048afe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8048b02:	2300      	movs	r3, #0
}
 8048b04:	4618      	mov	r0, r3
 8048b06:	370c      	adds	r7, #12
 8048b08:	46bd      	mov	sp, r7
 8048b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b0e:	4770      	bx	lr

08048b10 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8048b10:	b480      	push	{r7}
 8048b12:	b083      	sub	sp, #12
 8048b14:	af00      	add	r7, sp, #0
 8048b16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8048b18:	687b      	ldr	r3, [r7, #4]
 8048b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048b1e:	b2db      	uxtb	r3, r3
 8048b20:	2b04      	cmp	r3, #4
 8048b22:	d106      	bne.n	8048b32 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8048b24:	687b      	ldr	r3, [r7, #4]
 8048b26:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8048b2a:	b2da      	uxtb	r2, r3
 8048b2c:	687b      	ldr	r3, [r7, #4]
 8048b2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8048b32:	2300      	movs	r3, #0
}
 8048b34:	4618      	mov	r0, r3
 8048b36:	370c      	adds	r7, #12
 8048b38:	46bd      	mov	sp, r7
 8048b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b3e:	4770      	bx	lr

08048b40 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8048b40:	b580      	push	{r7, lr}
 8048b42:	b082      	sub	sp, #8
 8048b44:	af00      	add	r7, sp, #0
 8048b46:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048b48:	687b      	ldr	r3, [r7, #4]
 8048b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048b4e:	b2db      	uxtb	r3, r3
 8048b50:	2b03      	cmp	r3, #3
 8048b52:	d110      	bne.n	8048b76 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8048b54:	687b      	ldr	r3, [r7, #4]
 8048b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048b5a:	2b00      	cmp	r3, #0
 8048b5c:	d00b      	beq.n	8048b76 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8048b5e:	687b      	ldr	r3, [r7, #4]
 8048b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048b64:	69db      	ldr	r3, [r3, #28]
 8048b66:	2b00      	cmp	r3, #0
 8048b68:	d005      	beq.n	8048b76 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8048b6a:	687b      	ldr	r3, [r7, #4]
 8048b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048b70:	69db      	ldr	r3, [r3, #28]
 8048b72:	6878      	ldr	r0, [r7, #4]
 8048b74:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8048b76:	2300      	movs	r3, #0
}
 8048b78:	4618      	mov	r0, r3
 8048b7a:	3708      	adds	r7, #8
 8048b7c:	46bd      	mov	sp, r7
 8048b7e:	bd80      	pop	{r7, pc}

08048b80 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8048b80:	b580      	push	{r7, lr}
 8048b82:	b082      	sub	sp, #8
 8048b84:	af00      	add	r7, sp, #0
 8048b86:	6078      	str	r0, [r7, #4]
 8048b88:	460b      	mov	r3, r1
 8048b8a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8048b8c:	687b      	ldr	r3, [r7, #4]
 8048b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048b92:	687b      	ldr	r3, [r7, #4]
 8048b94:	32ae      	adds	r2, #174	@ 0xae
 8048b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048b9a:	2b00      	cmp	r3, #0
 8048b9c:	d101      	bne.n	8048ba2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8048b9e:	2303      	movs	r3, #3
 8048ba0:	e01c      	b.n	8048bdc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048ba2:	687b      	ldr	r3, [r7, #4]
 8048ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048ba8:	b2db      	uxtb	r3, r3
 8048baa:	2b03      	cmp	r3, #3
 8048bac:	d115      	bne.n	8048bda <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8048bae:	687b      	ldr	r3, [r7, #4]
 8048bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048bb4:	687b      	ldr	r3, [r7, #4]
 8048bb6:	32ae      	adds	r2, #174	@ 0xae
 8048bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048bbc:	6a1b      	ldr	r3, [r3, #32]
 8048bbe:	2b00      	cmp	r3, #0
 8048bc0:	d00b      	beq.n	8048bda <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8048bc2:	687b      	ldr	r3, [r7, #4]
 8048bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048bc8:	687b      	ldr	r3, [r7, #4]
 8048bca:	32ae      	adds	r2, #174	@ 0xae
 8048bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048bd0:	6a1b      	ldr	r3, [r3, #32]
 8048bd2:	78fa      	ldrb	r2, [r7, #3]
 8048bd4:	4611      	mov	r1, r2
 8048bd6:	6878      	ldr	r0, [r7, #4]
 8048bd8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8048bda:	2300      	movs	r3, #0
}
 8048bdc:	4618      	mov	r0, r3
 8048bde:	3708      	adds	r7, #8
 8048be0:	46bd      	mov	sp, r7
 8048be2:	bd80      	pop	{r7, pc}

08048be4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8048be4:	b580      	push	{r7, lr}
 8048be6:	b082      	sub	sp, #8
 8048be8:	af00      	add	r7, sp, #0
 8048bea:	6078      	str	r0, [r7, #4]
 8048bec:	460b      	mov	r3, r1
 8048bee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8048bf0:	687b      	ldr	r3, [r7, #4]
 8048bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048bf6:	687b      	ldr	r3, [r7, #4]
 8048bf8:	32ae      	adds	r2, #174	@ 0xae
 8048bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048bfe:	2b00      	cmp	r3, #0
 8048c00:	d101      	bne.n	8048c06 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8048c02:	2303      	movs	r3, #3
 8048c04:	e01c      	b.n	8048c40 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048c06:	687b      	ldr	r3, [r7, #4]
 8048c08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048c0c:	b2db      	uxtb	r3, r3
 8048c0e:	2b03      	cmp	r3, #3
 8048c10:	d115      	bne.n	8048c3e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8048c12:	687b      	ldr	r3, [r7, #4]
 8048c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048c18:	687b      	ldr	r3, [r7, #4]
 8048c1a:	32ae      	adds	r2, #174	@ 0xae
 8048c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8048c22:	2b00      	cmp	r3, #0
 8048c24:	d00b      	beq.n	8048c3e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8048c26:	687b      	ldr	r3, [r7, #4]
 8048c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048c2c:	687b      	ldr	r3, [r7, #4]
 8048c2e:	32ae      	adds	r2, #174	@ 0xae
 8048c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8048c36:	78fa      	ldrb	r2, [r7, #3]
 8048c38:	4611      	mov	r1, r2
 8048c3a:	6878      	ldr	r0, [r7, #4]
 8048c3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8048c3e:	2300      	movs	r3, #0
}
 8048c40:	4618      	mov	r0, r3
 8048c42:	3708      	adds	r7, #8
 8048c44:	46bd      	mov	sp, r7
 8048c46:	bd80      	pop	{r7, pc}

08048c48 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8048c48:	b480      	push	{r7}
 8048c4a:	b083      	sub	sp, #12
 8048c4c:	af00      	add	r7, sp, #0
 8048c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8048c50:	2300      	movs	r3, #0
}
 8048c52:	4618      	mov	r0, r3
 8048c54:	370c      	adds	r7, #12
 8048c56:	46bd      	mov	sp, r7
 8048c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048c5c:	4770      	bx	lr

08048c5e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8048c5e:	b580      	push	{r7, lr}
 8048c60:	b084      	sub	sp, #16
 8048c62:	af00      	add	r7, sp, #0
 8048c64:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8048c66:	2300      	movs	r3, #0
 8048c68:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8048c6a:	687b      	ldr	r3, [r7, #4]
 8048c6c:	2201      	movs	r2, #1
 8048c6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8048c72:	687b      	ldr	r3, [r7, #4]
 8048c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048c78:	2b00      	cmp	r3, #0
 8048c7a:	d00e      	beq.n	8048c9a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8048c7c:	687b      	ldr	r3, [r7, #4]
 8048c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048c82:	685b      	ldr	r3, [r3, #4]
 8048c84:	687a      	ldr	r2, [r7, #4]
 8048c86:	6852      	ldr	r2, [r2, #4]
 8048c88:	b2d2      	uxtb	r2, r2
 8048c8a:	4611      	mov	r1, r2
 8048c8c:	6878      	ldr	r0, [r7, #4]
 8048c8e:	4798      	blx	r3
 8048c90:	4603      	mov	r3, r0
 8048c92:	2b00      	cmp	r3, #0
 8048c94:	d001      	beq.n	8048c9a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8048c96:	2303      	movs	r3, #3
 8048c98:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8048c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8048c9c:	4618      	mov	r0, r3
 8048c9e:	3710      	adds	r7, #16
 8048ca0:	46bd      	mov	sp, r7
 8048ca2:	bd80      	pop	{r7, pc}

08048ca4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8048ca4:	b480      	push	{r7}
 8048ca6:	b083      	sub	sp, #12
 8048ca8:	af00      	add	r7, sp, #0
 8048caa:	6078      	str	r0, [r7, #4]
 8048cac:	460b      	mov	r3, r1
 8048cae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8048cb0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8048cb2:	4618      	mov	r0, r3
 8048cb4:	370c      	adds	r7, #12
 8048cb6:	46bd      	mov	sp, r7
 8048cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048cbc:	4770      	bx	lr

08048cbe <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8048cbe:	b480      	push	{r7}
 8048cc0:	b083      	sub	sp, #12
 8048cc2:	af00      	add	r7, sp, #0
 8048cc4:	6078      	str	r0, [r7, #4]
 8048cc6:	460b      	mov	r3, r1
 8048cc8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8048cca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8048ccc:	4618      	mov	r0, r3
 8048cce:	370c      	adds	r7, #12
 8048cd0:	46bd      	mov	sp, r7
 8048cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048cd6:	4770      	bx	lr

08048cd8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8048cd8:	b580      	push	{r7, lr}
 8048cda:	b086      	sub	sp, #24
 8048cdc:	af00      	add	r7, sp, #0
 8048cde:	6078      	str	r0, [r7, #4]
 8048ce0:	460b      	mov	r3, r1
 8048ce2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8048ce4:	687b      	ldr	r3, [r7, #4]
 8048ce6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8048ce8:	687b      	ldr	r3, [r7, #4]
 8048cea:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8048cec:	2300      	movs	r3, #0
 8048cee:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8048cf0:	68fb      	ldr	r3, [r7, #12]
 8048cf2:	885b      	ldrh	r3, [r3, #2]
 8048cf4:	b29b      	uxth	r3, r3
 8048cf6:	68fa      	ldr	r2, [r7, #12]
 8048cf8:	7812      	ldrb	r2, [r2, #0]
 8048cfa:	4293      	cmp	r3, r2
 8048cfc:	d91f      	bls.n	8048d3e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8048cfe:	68fb      	ldr	r3, [r7, #12]
 8048d00:	781b      	ldrb	r3, [r3, #0]
 8048d02:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8048d04:	e013      	b.n	8048d2e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8048d06:	f107 030a 	add.w	r3, r7, #10
 8048d0a:	4619      	mov	r1, r3
 8048d0c:	6978      	ldr	r0, [r7, #20]
 8048d0e:	f000 f81b 	bl	8048d48 <USBD_GetNextDesc>
 8048d12:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8048d14:	697b      	ldr	r3, [r7, #20]
 8048d16:	785b      	ldrb	r3, [r3, #1]
 8048d18:	2b05      	cmp	r3, #5
 8048d1a:	d108      	bne.n	8048d2e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8048d1c:	697b      	ldr	r3, [r7, #20]
 8048d1e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8048d20:	693b      	ldr	r3, [r7, #16]
 8048d22:	789b      	ldrb	r3, [r3, #2]
 8048d24:	78fa      	ldrb	r2, [r7, #3]
 8048d26:	429a      	cmp	r2, r3
 8048d28:	d008      	beq.n	8048d3c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8048d2a:	2300      	movs	r3, #0
 8048d2c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8048d2e:	68fb      	ldr	r3, [r7, #12]
 8048d30:	885b      	ldrh	r3, [r3, #2]
 8048d32:	b29a      	uxth	r2, r3
 8048d34:	897b      	ldrh	r3, [r7, #10]
 8048d36:	429a      	cmp	r2, r3
 8048d38:	d8e5      	bhi.n	8048d06 <USBD_GetEpDesc+0x2e>
 8048d3a:	e000      	b.n	8048d3e <USBD_GetEpDesc+0x66>
          break;
 8048d3c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8048d3e:	693b      	ldr	r3, [r7, #16]
}
 8048d40:	4618      	mov	r0, r3
 8048d42:	3718      	adds	r7, #24
 8048d44:	46bd      	mov	sp, r7
 8048d46:	bd80      	pop	{r7, pc}

08048d48 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8048d48:	b480      	push	{r7}
 8048d4a:	b085      	sub	sp, #20
 8048d4c:	af00      	add	r7, sp, #0
 8048d4e:	6078      	str	r0, [r7, #4]
 8048d50:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8048d52:	687b      	ldr	r3, [r7, #4]
 8048d54:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8048d56:	683b      	ldr	r3, [r7, #0]
 8048d58:	881b      	ldrh	r3, [r3, #0]
 8048d5a:	68fa      	ldr	r2, [r7, #12]
 8048d5c:	7812      	ldrb	r2, [r2, #0]
 8048d5e:	4413      	add	r3, r2
 8048d60:	b29a      	uxth	r2, r3
 8048d62:	683b      	ldr	r3, [r7, #0]
 8048d64:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8048d66:	68fb      	ldr	r3, [r7, #12]
 8048d68:	781b      	ldrb	r3, [r3, #0]
 8048d6a:	461a      	mov	r2, r3
 8048d6c:	687b      	ldr	r3, [r7, #4]
 8048d6e:	4413      	add	r3, r2
 8048d70:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8048d72:	68fb      	ldr	r3, [r7, #12]
}
 8048d74:	4618      	mov	r0, r3
 8048d76:	3714      	adds	r7, #20
 8048d78:	46bd      	mov	sp, r7
 8048d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048d7e:	4770      	bx	lr

08048d80 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8048d80:	b480      	push	{r7}
 8048d82:	b087      	sub	sp, #28
 8048d84:	af00      	add	r7, sp, #0
 8048d86:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8048d88:	687b      	ldr	r3, [r7, #4]
 8048d8a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8048d8c:	697b      	ldr	r3, [r7, #20]
 8048d8e:	781b      	ldrb	r3, [r3, #0]
 8048d90:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8048d92:	697b      	ldr	r3, [r7, #20]
 8048d94:	3301      	adds	r3, #1
 8048d96:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8048d98:	697b      	ldr	r3, [r7, #20]
 8048d9a:	781b      	ldrb	r3, [r3, #0]
 8048d9c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8048d9e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8048da2:	021b      	lsls	r3, r3, #8
 8048da4:	b21a      	sxth	r2, r3
 8048da6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8048daa:	4313      	orrs	r3, r2
 8048dac:	b21b      	sxth	r3, r3
 8048dae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8048db0:	89fb      	ldrh	r3, [r7, #14]
}
 8048db2:	4618      	mov	r0, r3
 8048db4:	371c      	adds	r7, #28
 8048db6:	46bd      	mov	sp, r7
 8048db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048dbc:	4770      	bx	lr
	...

08048dc0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8048dc0:	b580      	push	{r7, lr}
 8048dc2:	b084      	sub	sp, #16
 8048dc4:	af00      	add	r7, sp, #0
 8048dc6:	6078      	str	r0, [r7, #4]
 8048dc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8048dca:	2300      	movs	r3, #0
 8048dcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8048dce:	683b      	ldr	r3, [r7, #0]
 8048dd0:	781b      	ldrb	r3, [r3, #0]
 8048dd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8048dd6:	2b40      	cmp	r3, #64	@ 0x40
 8048dd8:	d005      	beq.n	8048de6 <USBD_StdDevReq+0x26>
 8048dda:	2b40      	cmp	r3, #64	@ 0x40
 8048ddc:	d857      	bhi.n	8048e8e <USBD_StdDevReq+0xce>
 8048dde:	2b00      	cmp	r3, #0
 8048de0:	d00f      	beq.n	8048e02 <USBD_StdDevReq+0x42>
 8048de2:	2b20      	cmp	r3, #32
 8048de4:	d153      	bne.n	8048e8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8048de6:	687b      	ldr	r3, [r7, #4]
 8048de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048dec:	687b      	ldr	r3, [r7, #4]
 8048dee:	32ae      	adds	r2, #174	@ 0xae
 8048df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048df4:	689b      	ldr	r3, [r3, #8]
 8048df6:	6839      	ldr	r1, [r7, #0]
 8048df8:	6878      	ldr	r0, [r7, #4]
 8048dfa:	4798      	blx	r3
 8048dfc:	4603      	mov	r3, r0
 8048dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8048e00:	e04a      	b.n	8048e98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8048e02:	683b      	ldr	r3, [r7, #0]
 8048e04:	785b      	ldrb	r3, [r3, #1]
 8048e06:	2b09      	cmp	r3, #9
 8048e08:	d83b      	bhi.n	8048e82 <USBD_StdDevReq+0xc2>
 8048e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8048e10 <USBD_StdDevReq+0x50>)
 8048e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8048e10:	08048e65 	.word	0x08048e65
 8048e14:	08048e79 	.word	0x08048e79
 8048e18:	08048e83 	.word	0x08048e83
 8048e1c:	08048e6f 	.word	0x08048e6f
 8048e20:	08048e83 	.word	0x08048e83
 8048e24:	08048e43 	.word	0x08048e43
 8048e28:	08048e39 	.word	0x08048e39
 8048e2c:	08048e83 	.word	0x08048e83
 8048e30:	08048e5b 	.word	0x08048e5b
 8048e34:	08048e4d 	.word	0x08048e4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8048e38:	6839      	ldr	r1, [r7, #0]
 8048e3a:	6878      	ldr	r0, [r7, #4]
 8048e3c:	f000 fa3c 	bl	80492b8 <USBD_GetDescriptor>
          break;
 8048e40:	e024      	b.n	8048e8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8048e42:	6839      	ldr	r1, [r7, #0]
 8048e44:	6878      	ldr	r0, [r7, #4]
 8048e46:	f000 fbcb 	bl	80495e0 <USBD_SetAddress>
          break;
 8048e4a:	e01f      	b.n	8048e8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8048e4c:	6839      	ldr	r1, [r7, #0]
 8048e4e:	6878      	ldr	r0, [r7, #4]
 8048e50:	f000 fc0a 	bl	8049668 <USBD_SetConfig>
 8048e54:	4603      	mov	r3, r0
 8048e56:	73fb      	strb	r3, [r7, #15]
          break;
 8048e58:	e018      	b.n	8048e8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8048e5a:	6839      	ldr	r1, [r7, #0]
 8048e5c:	6878      	ldr	r0, [r7, #4]
 8048e5e:	f000 fcad 	bl	80497bc <USBD_GetConfig>
          break;
 8048e62:	e013      	b.n	8048e8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8048e64:	6839      	ldr	r1, [r7, #0]
 8048e66:	6878      	ldr	r0, [r7, #4]
 8048e68:	f000 fcde 	bl	8049828 <USBD_GetStatus>
          break;
 8048e6c:	e00e      	b.n	8048e8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8048e6e:	6839      	ldr	r1, [r7, #0]
 8048e70:	6878      	ldr	r0, [r7, #4]
 8048e72:	f000 fd0d 	bl	8049890 <USBD_SetFeature>
          break;
 8048e76:	e009      	b.n	8048e8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8048e78:	6839      	ldr	r1, [r7, #0]
 8048e7a:	6878      	ldr	r0, [r7, #4]
 8048e7c:	f000 fd31 	bl	80498e2 <USBD_ClrFeature>
          break;
 8048e80:	e004      	b.n	8048e8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8048e82:	6839      	ldr	r1, [r7, #0]
 8048e84:	6878      	ldr	r0, [r7, #4]
 8048e86:	f000 fd88 	bl	804999a <USBD_CtlError>
          break;
 8048e8a:	bf00      	nop
      }
      break;
 8048e8c:	e004      	b.n	8048e98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8048e8e:	6839      	ldr	r1, [r7, #0]
 8048e90:	6878      	ldr	r0, [r7, #4]
 8048e92:	f000 fd82 	bl	804999a <USBD_CtlError>
      break;
 8048e96:	bf00      	nop
  }

  return ret;
 8048e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8048e9a:	4618      	mov	r0, r3
 8048e9c:	3710      	adds	r7, #16
 8048e9e:	46bd      	mov	sp, r7
 8048ea0:	bd80      	pop	{r7, pc}
 8048ea2:	bf00      	nop

08048ea4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8048ea4:	b580      	push	{r7, lr}
 8048ea6:	b084      	sub	sp, #16
 8048ea8:	af00      	add	r7, sp, #0
 8048eaa:	6078      	str	r0, [r7, #4]
 8048eac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8048eae:	2300      	movs	r3, #0
 8048eb0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8048eb2:	683b      	ldr	r3, [r7, #0]
 8048eb4:	781b      	ldrb	r3, [r3, #0]
 8048eb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8048eba:	2b40      	cmp	r3, #64	@ 0x40
 8048ebc:	d005      	beq.n	8048eca <USBD_StdItfReq+0x26>
 8048ebe:	2b40      	cmp	r3, #64	@ 0x40
 8048ec0:	d852      	bhi.n	8048f68 <USBD_StdItfReq+0xc4>
 8048ec2:	2b00      	cmp	r3, #0
 8048ec4:	d001      	beq.n	8048eca <USBD_StdItfReq+0x26>
 8048ec6:	2b20      	cmp	r3, #32
 8048ec8:	d14e      	bne.n	8048f68 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8048eca:	687b      	ldr	r3, [r7, #4]
 8048ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048ed0:	b2db      	uxtb	r3, r3
 8048ed2:	3b01      	subs	r3, #1
 8048ed4:	2b02      	cmp	r3, #2
 8048ed6:	d840      	bhi.n	8048f5a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8048ed8:	683b      	ldr	r3, [r7, #0]
 8048eda:	889b      	ldrh	r3, [r3, #4]
 8048edc:	b2db      	uxtb	r3, r3
 8048ede:	2b01      	cmp	r3, #1
 8048ee0:	d836      	bhi.n	8048f50 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8048ee2:	683b      	ldr	r3, [r7, #0]
 8048ee4:	889b      	ldrh	r3, [r3, #4]
 8048ee6:	b2db      	uxtb	r3, r3
 8048ee8:	4619      	mov	r1, r3
 8048eea:	6878      	ldr	r0, [r7, #4]
 8048eec:	f7ff feda 	bl	8048ca4 <USBD_CoreFindIF>
 8048ef0:	4603      	mov	r3, r0
 8048ef2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8048ef4:	7bbb      	ldrb	r3, [r7, #14]
 8048ef6:	2bff      	cmp	r3, #255	@ 0xff
 8048ef8:	d01d      	beq.n	8048f36 <USBD_StdItfReq+0x92>
 8048efa:	7bbb      	ldrb	r3, [r7, #14]
 8048efc:	2b00      	cmp	r3, #0
 8048efe:	d11a      	bne.n	8048f36 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8048f00:	7bba      	ldrb	r2, [r7, #14]
 8048f02:	687b      	ldr	r3, [r7, #4]
 8048f04:	32ae      	adds	r2, #174	@ 0xae
 8048f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048f0a:	689b      	ldr	r3, [r3, #8]
 8048f0c:	2b00      	cmp	r3, #0
 8048f0e:	d00f      	beq.n	8048f30 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8048f10:	7bba      	ldrb	r2, [r7, #14]
 8048f12:	687b      	ldr	r3, [r7, #4]
 8048f14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8048f18:	7bba      	ldrb	r2, [r7, #14]
 8048f1a:	687b      	ldr	r3, [r7, #4]
 8048f1c:	32ae      	adds	r2, #174	@ 0xae
 8048f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048f22:	689b      	ldr	r3, [r3, #8]
 8048f24:	6839      	ldr	r1, [r7, #0]
 8048f26:	6878      	ldr	r0, [r7, #4]
 8048f28:	4798      	blx	r3
 8048f2a:	4603      	mov	r3, r0
 8048f2c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8048f2e:	e004      	b.n	8048f3a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8048f30:	2303      	movs	r3, #3
 8048f32:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8048f34:	e001      	b.n	8048f3a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8048f36:	2303      	movs	r3, #3
 8048f38:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8048f3a:	683b      	ldr	r3, [r7, #0]
 8048f3c:	88db      	ldrh	r3, [r3, #6]
 8048f3e:	2b00      	cmp	r3, #0
 8048f40:	d110      	bne.n	8048f64 <USBD_StdItfReq+0xc0>
 8048f42:	7bfb      	ldrb	r3, [r7, #15]
 8048f44:	2b00      	cmp	r3, #0
 8048f46:	d10d      	bne.n	8048f64 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8048f48:	6878      	ldr	r0, [r7, #4]
 8048f4a:	f001 f80a 	bl	8049f62 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8048f4e:	e009      	b.n	8048f64 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8048f50:	6839      	ldr	r1, [r7, #0]
 8048f52:	6878      	ldr	r0, [r7, #4]
 8048f54:	f000 fd21 	bl	804999a <USBD_CtlError>
          break;
 8048f58:	e004      	b.n	8048f64 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8048f5a:	6839      	ldr	r1, [r7, #0]
 8048f5c:	6878      	ldr	r0, [r7, #4]
 8048f5e:	f000 fd1c 	bl	804999a <USBD_CtlError>
          break;
 8048f62:	e000      	b.n	8048f66 <USBD_StdItfReq+0xc2>
          break;
 8048f64:	bf00      	nop
      }
      break;
 8048f66:	e004      	b.n	8048f72 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8048f68:	6839      	ldr	r1, [r7, #0]
 8048f6a:	6878      	ldr	r0, [r7, #4]
 8048f6c:	f000 fd15 	bl	804999a <USBD_CtlError>
      break;
 8048f70:	bf00      	nop
  }

  return ret;
 8048f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8048f74:	4618      	mov	r0, r3
 8048f76:	3710      	adds	r7, #16
 8048f78:	46bd      	mov	sp, r7
 8048f7a:	bd80      	pop	{r7, pc}

08048f7c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8048f7c:	b580      	push	{r7, lr}
 8048f7e:	b084      	sub	sp, #16
 8048f80:	af00      	add	r7, sp, #0
 8048f82:	6078      	str	r0, [r7, #4]
 8048f84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8048f86:	2300      	movs	r3, #0
 8048f88:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8048f8a:	683b      	ldr	r3, [r7, #0]
 8048f8c:	889b      	ldrh	r3, [r3, #4]
 8048f8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8048f90:	683b      	ldr	r3, [r7, #0]
 8048f92:	781b      	ldrb	r3, [r3, #0]
 8048f94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8048f98:	2b40      	cmp	r3, #64	@ 0x40
 8048f9a:	d007      	beq.n	8048fac <USBD_StdEPReq+0x30>
 8048f9c:	2b40      	cmp	r3, #64	@ 0x40
 8048f9e:	f200 817f 	bhi.w	80492a0 <USBD_StdEPReq+0x324>
 8048fa2:	2b00      	cmp	r3, #0
 8048fa4:	d02a      	beq.n	8048ffc <USBD_StdEPReq+0x80>
 8048fa6:	2b20      	cmp	r3, #32
 8048fa8:	f040 817a 	bne.w	80492a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8048fac:	7bbb      	ldrb	r3, [r7, #14]
 8048fae:	4619      	mov	r1, r3
 8048fb0:	6878      	ldr	r0, [r7, #4]
 8048fb2:	f7ff fe84 	bl	8048cbe <USBD_CoreFindEP>
 8048fb6:	4603      	mov	r3, r0
 8048fb8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8048fba:	7b7b      	ldrb	r3, [r7, #13]
 8048fbc:	2bff      	cmp	r3, #255	@ 0xff
 8048fbe:	f000 8174 	beq.w	80492aa <USBD_StdEPReq+0x32e>
 8048fc2:	7b7b      	ldrb	r3, [r7, #13]
 8048fc4:	2b00      	cmp	r3, #0
 8048fc6:	f040 8170 	bne.w	80492aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8048fca:	7b7a      	ldrb	r2, [r7, #13]
 8048fcc:	687b      	ldr	r3, [r7, #4]
 8048fce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8048fd2:	7b7a      	ldrb	r2, [r7, #13]
 8048fd4:	687b      	ldr	r3, [r7, #4]
 8048fd6:	32ae      	adds	r2, #174	@ 0xae
 8048fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048fdc:	689b      	ldr	r3, [r3, #8]
 8048fde:	2b00      	cmp	r3, #0
 8048fe0:	f000 8163 	beq.w	80492aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8048fe4:	7b7a      	ldrb	r2, [r7, #13]
 8048fe6:	687b      	ldr	r3, [r7, #4]
 8048fe8:	32ae      	adds	r2, #174	@ 0xae
 8048fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048fee:	689b      	ldr	r3, [r3, #8]
 8048ff0:	6839      	ldr	r1, [r7, #0]
 8048ff2:	6878      	ldr	r0, [r7, #4]
 8048ff4:	4798      	blx	r3
 8048ff6:	4603      	mov	r3, r0
 8048ff8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8048ffa:	e156      	b.n	80492aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8048ffc:	683b      	ldr	r3, [r7, #0]
 8048ffe:	785b      	ldrb	r3, [r3, #1]
 8049000:	2b03      	cmp	r3, #3
 8049002:	d008      	beq.n	8049016 <USBD_StdEPReq+0x9a>
 8049004:	2b03      	cmp	r3, #3
 8049006:	f300 8145 	bgt.w	8049294 <USBD_StdEPReq+0x318>
 804900a:	2b00      	cmp	r3, #0
 804900c:	f000 809b 	beq.w	8049146 <USBD_StdEPReq+0x1ca>
 8049010:	2b01      	cmp	r3, #1
 8049012:	d03c      	beq.n	804908e <USBD_StdEPReq+0x112>
 8049014:	e13e      	b.n	8049294 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8049016:	687b      	ldr	r3, [r7, #4]
 8049018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 804901c:	b2db      	uxtb	r3, r3
 804901e:	2b02      	cmp	r3, #2
 8049020:	d002      	beq.n	8049028 <USBD_StdEPReq+0xac>
 8049022:	2b03      	cmp	r3, #3
 8049024:	d016      	beq.n	8049054 <USBD_StdEPReq+0xd8>
 8049026:	e02c      	b.n	8049082 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8049028:	7bbb      	ldrb	r3, [r7, #14]
 804902a:	2b00      	cmp	r3, #0
 804902c:	d00d      	beq.n	804904a <USBD_StdEPReq+0xce>
 804902e:	7bbb      	ldrb	r3, [r7, #14]
 8049030:	2b80      	cmp	r3, #128	@ 0x80
 8049032:	d00a      	beq.n	804904a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8049034:	7bbb      	ldrb	r3, [r7, #14]
 8049036:	4619      	mov	r1, r3
 8049038:	6878      	ldr	r0, [r7, #4]
 804903a:	f001 fbbb 	bl	804a7b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 804903e:	2180      	movs	r1, #128	@ 0x80
 8049040:	6878      	ldr	r0, [r7, #4]
 8049042:	f001 fbb7 	bl	804a7b4 <USBD_LL_StallEP>
 8049046:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8049048:	e020      	b.n	804908c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 804904a:	6839      	ldr	r1, [r7, #0]
 804904c:	6878      	ldr	r0, [r7, #4]
 804904e:	f000 fca4 	bl	804999a <USBD_CtlError>
              break;
 8049052:	e01b      	b.n	804908c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8049054:	683b      	ldr	r3, [r7, #0]
 8049056:	885b      	ldrh	r3, [r3, #2]
 8049058:	2b00      	cmp	r3, #0
 804905a:	d10e      	bne.n	804907a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 804905c:	7bbb      	ldrb	r3, [r7, #14]
 804905e:	2b00      	cmp	r3, #0
 8049060:	d00b      	beq.n	804907a <USBD_StdEPReq+0xfe>
 8049062:	7bbb      	ldrb	r3, [r7, #14]
 8049064:	2b80      	cmp	r3, #128	@ 0x80
 8049066:	d008      	beq.n	804907a <USBD_StdEPReq+0xfe>
 8049068:	683b      	ldr	r3, [r7, #0]
 804906a:	88db      	ldrh	r3, [r3, #6]
 804906c:	2b00      	cmp	r3, #0
 804906e:	d104      	bne.n	804907a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8049070:	7bbb      	ldrb	r3, [r7, #14]
 8049072:	4619      	mov	r1, r3
 8049074:	6878      	ldr	r0, [r7, #4]
 8049076:	f001 fb9d 	bl	804a7b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 804907a:	6878      	ldr	r0, [r7, #4]
 804907c:	f000 ff71 	bl	8049f62 <USBD_CtlSendStatus>

              break;
 8049080:	e004      	b.n	804908c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8049082:	6839      	ldr	r1, [r7, #0]
 8049084:	6878      	ldr	r0, [r7, #4]
 8049086:	f000 fc88 	bl	804999a <USBD_CtlError>
              break;
 804908a:	bf00      	nop
          }
          break;
 804908c:	e107      	b.n	804929e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 804908e:	687b      	ldr	r3, [r7, #4]
 8049090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049094:	b2db      	uxtb	r3, r3
 8049096:	2b02      	cmp	r3, #2
 8049098:	d002      	beq.n	80490a0 <USBD_StdEPReq+0x124>
 804909a:	2b03      	cmp	r3, #3
 804909c:	d016      	beq.n	80490cc <USBD_StdEPReq+0x150>
 804909e:	e04b      	b.n	8049138 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80490a0:	7bbb      	ldrb	r3, [r7, #14]
 80490a2:	2b00      	cmp	r3, #0
 80490a4:	d00d      	beq.n	80490c2 <USBD_StdEPReq+0x146>
 80490a6:	7bbb      	ldrb	r3, [r7, #14]
 80490a8:	2b80      	cmp	r3, #128	@ 0x80
 80490aa:	d00a      	beq.n	80490c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80490ac:	7bbb      	ldrb	r3, [r7, #14]
 80490ae:	4619      	mov	r1, r3
 80490b0:	6878      	ldr	r0, [r7, #4]
 80490b2:	f001 fb7f 	bl	804a7b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80490b6:	2180      	movs	r1, #128	@ 0x80
 80490b8:	6878      	ldr	r0, [r7, #4]
 80490ba:	f001 fb7b 	bl	804a7b4 <USBD_LL_StallEP>
 80490be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80490c0:	e040      	b.n	8049144 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80490c2:	6839      	ldr	r1, [r7, #0]
 80490c4:	6878      	ldr	r0, [r7, #4]
 80490c6:	f000 fc68 	bl	804999a <USBD_CtlError>
              break;
 80490ca:	e03b      	b.n	8049144 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80490cc:	683b      	ldr	r3, [r7, #0]
 80490ce:	885b      	ldrh	r3, [r3, #2]
 80490d0:	2b00      	cmp	r3, #0
 80490d2:	d136      	bne.n	8049142 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80490d4:	7bbb      	ldrb	r3, [r7, #14]
 80490d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80490da:	2b00      	cmp	r3, #0
 80490dc:	d004      	beq.n	80490e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80490de:	7bbb      	ldrb	r3, [r7, #14]
 80490e0:	4619      	mov	r1, r3
 80490e2:	6878      	ldr	r0, [r7, #4]
 80490e4:	f001 fb85 	bl	804a7f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80490e8:	6878      	ldr	r0, [r7, #4]
 80490ea:	f000 ff3a 	bl	8049f62 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80490ee:	7bbb      	ldrb	r3, [r7, #14]
 80490f0:	4619      	mov	r1, r3
 80490f2:	6878      	ldr	r0, [r7, #4]
 80490f4:	f7ff fde3 	bl	8048cbe <USBD_CoreFindEP>
 80490f8:	4603      	mov	r3, r0
 80490fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80490fc:	7b7b      	ldrb	r3, [r7, #13]
 80490fe:	2bff      	cmp	r3, #255	@ 0xff
 8049100:	d01f      	beq.n	8049142 <USBD_StdEPReq+0x1c6>
 8049102:	7b7b      	ldrb	r3, [r7, #13]
 8049104:	2b00      	cmp	r3, #0
 8049106:	d11c      	bne.n	8049142 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8049108:	7b7a      	ldrb	r2, [r7, #13]
 804910a:	687b      	ldr	r3, [r7, #4]
 804910c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8049110:	7b7a      	ldrb	r2, [r7, #13]
 8049112:	687b      	ldr	r3, [r7, #4]
 8049114:	32ae      	adds	r2, #174	@ 0xae
 8049116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804911a:	689b      	ldr	r3, [r3, #8]
 804911c:	2b00      	cmp	r3, #0
 804911e:	d010      	beq.n	8049142 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8049120:	7b7a      	ldrb	r2, [r7, #13]
 8049122:	687b      	ldr	r3, [r7, #4]
 8049124:	32ae      	adds	r2, #174	@ 0xae
 8049126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804912a:	689b      	ldr	r3, [r3, #8]
 804912c:	6839      	ldr	r1, [r7, #0]
 804912e:	6878      	ldr	r0, [r7, #4]
 8049130:	4798      	blx	r3
 8049132:	4603      	mov	r3, r0
 8049134:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8049136:	e004      	b.n	8049142 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8049138:	6839      	ldr	r1, [r7, #0]
 804913a:	6878      	ldr	r0, [r7, #4]
 804913c:	f000 fc2d 	bl	804999a <USBD_CtlError>
              break;
 8049140:	e000      	b.n	8049144 <USBD_StdEPReq+0x1c8>
              break;
 8049142:	bf00      	nop
          }
          break;
 8049144:	e0ab      	b.n	804929e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8049146:	687b      	ldr	r3, [r7, #4]
 8049148:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 804914c:	b2db      	uxtb	r3, r3
 804914e:	2b02      	cmp	r3, #2
 8049150:	d002      	beq.n	8049158 <USBD_StdEPReq+0x1dc>
 8049152:	2b03      	cmp	r3, #3
 8049154:	d032      	beq.n	80491bc <USBD_StdEPReq+0x240>
 8049156:	e097      	b.n	8049288 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8049158:	7bbb      	ldrb	r3, [r7, #14]
 804915a:	2b00      	cmp	r3, #0
 804915c:	d007      	beq.n	804916e <USBD_StdEPReq+0x1f2>
 804915e:	7bbb      	ldrb	r3, [r7, #14]
 8049160:	2b80      	cmp	r3, #128	@ 0x80
 8049162:	d004      	beq.n	804916e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8049164:	6839      	ldr	r1, [r7, #0]
 8049166:	6878      	ldr	r0, [r7, #4]
 8049168:	f000 fc17 	bl	804999a <USBD_CtlError>
                break;
 804916c:	e091      	b.n	8049292 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 804916e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8049172:	2b00      	cmp	r3, #0
 8049174:	da0b      	bge.n	804918e <USBD_StdEPReq+0x212>
 8049176:	7bbb      	ldrb	r3, [r7, #14]
 8049178:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804917c:	4613      	mov	r3, r2
 804917e:	009b      	lsls	r3, r3, #2
 8049180:	4413      	add	r3, r2
 8049182:	009b      	lsls	r3, r3, #2
 8049184:	3310      	adds	r3, #16
 8049186:	687a      	ldr	r2, [r7, #4]
 8049188:	4413      	add	r3, r2
 804918a:	3304      	adds	r3, #4
 804918c:	e00b      	b.n	80491a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 804918e:	7bbb      	ldrb	r3, [r7, #14]
 8049190:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8049194:	4613      	mov	r3, r2
 8049196:	009b      	lsls	r3, r3, #2
 8049198:	4413      	add	r3, r2
 804919a:	009b      	lsls	r3, r3, #2
 804919c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80491a0:	687a      	ldr	r2, [r7, #4]
 80491a2:	4413      	add	r3, r2
 80491a4:	3304      	adds	r3, #4
 80491a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80491a8:	68bb      	ldr	r3, [r7, #8]
 80491aa:	2200      	movs	r2, #0
 80491ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80491ae:	68bb      	ldr	r3, [r7, #8]
 80491b0:	2202      	movs	r2, #2
 80491b2:	4619      	mov	r1, r3
 80491b4:	6878      	ldr	r0, [r7, #4]
 80491b6:	f000 fe97 	bl	8049ee8 <USBD_CtlSendData>
              break;
 80491ba:	e06a      	b.n	8049292 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80491bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80491c0:	2b00      	cmp	r3, #0
 80491c2:	da11      	bge.n	80491e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80491c4:	7bbb      	ldrb	r3, [r7, #14]
 80491c6:	f003 020f 	and.w	r2, r3, #15
 80491ca:	6879      	ldr	r1, [r7, #4]
 80491cc:	4613      	mov	r3, r2
 80491ce:	009b      	lsls	r3, r3, #2
 80491d0:	4413      	add	r3, r2
 80491d2:	009b      	lsls	r3, r3, #2
 80491d4:	440b      	add	r3, r1
 80491d6:	3324      	adds	r3, #36	@ 0x24
 80491d8:	881b      	ldrh	r3, [r3, #0]
 80491da:	2b00      	cmp	r3, #0
 80491dc:	d117      	bne.n	804920e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80491de:	6839      	ldr	r1, [r7, #0]
 80491e0:	6878      	ldr	r0, [r7, #4]
 80491e2:	f000 fbda 	bl	804999a <USBD_CtlError>
                  break;
 80491e6:	e054      	b.n	8049292 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80491e8:	7bbb      	ldrb	r3, [r7, #14]
 80491ea:	f003 020f 	and.w	r2, r3, #15
 80491ee:	6879      	ldr	r1, [r7, #4]
 80491f0:	4613      	mov	r3, r2
 80491f2:	009b      	lsls	r3, r3, #2
 80491f4:	4413      	add	r3, r2
 80491f6:	009b      	lsls	r3, r3, #2
 80491f8:	440b      	add	r3, r1
 80491fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80491fe:	881b      	ldrh	r3, [r3, #0]
 8049200:	2b00      	cmp	r3, #0
 8049202:	d104      	bne.n	804920e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8049204:	6839      	ldr	r1, [r7, #0]
 8049206:	6878      	ldr	r0, [r7, #4]
 8049208:	f000 fbc7 	bl	804999a <USBD_CtlError>
                  break;
 804920c:	e041      	b.n	8049292 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 804920e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8049212:	2b00      	cmp	r3, #0
 8049214:	da0b      	bge.n	804922e <USBD_StdEPReq+0x2b2>
 8049216:	7bbb      	ldrb	r3, [r7, #14]
 8049218:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804921c:	4613      	mov	r3, r2
 804921e:	009b      	lsls	r3, r3, #2
 8049220:	4413      	add	r3, r2
 8049222:	009b      	lsls	r3, r3, #2
 8049224:	3310      	adds	r3, #16
 8049226:	687a      	ldr	r2, [r7, #4]
 8049228:	4413      	add	r3, r2
 804922a:	3304      	adds	r3, #4
 804922c:	e00b      	b.n	8049246 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 804922e:	7bbb      	ldrb	r3, [r7, #14]
 8049230:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8049234:	4613      	mov	r3, r2
 8049236:	009b      	lsls	r3, r3, #2
 8049238:	4413      	add	r3, r2
 804923a:	009b      	lsls	r3, r3, #2
 804923c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8049240:	687a      	ldr	r2, [r7, #4]
 8049242:	4413      	add	r3, r2
 8049244:	3304      	adds	r3, #4
 8049246:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8049248:	7bbb      	ldrb	r3, [r7, #14]
 804924a:	2b00      	cmp	r3, #0
 804924c:	d002      	beq.n	8049254 <USBD_StdEPReq+0x2d8>
 804924e:	7bbb      	ldrb	r3, [r7, #14]
 8049250:	2b80      	cmp	r3, #128	@ 0x80
 8049252:	d103      	bne.n	804925c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8049254:	68bb      	ldr	r3, [r7, #8]
 8049256:	2200      	movs	r2, #0
 8049258:	601a      	str	r2, [r3, #0]
 804925a:	e00e      	b.n	804927a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 804925c:	7bbb      	ldrb	r3, [r7, #14]
 804925e:	4619      	mov	r1, r3
 8049260:	6878      	ldr	r0, [r7, #4]
 8049262:	f001 fae5 	bl	804a830 <USBD_LL_IsStallEP>
 8049266:	4603      	mov	r3, r0
 8049268:	2b00      	cmp	r3, #0
 804926a:	d003      	beq.n	8049274 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 804926c:	68bb      	ldr	r3, [r7, #8]
 804926e:	2201      	movs	r2, #1
 8049270:	601a      	str	r2, [r3, #0]
 8049272:	e002      	b.n	804927a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8049274:	68bb      	ldr	r3, [r7, #8]
 8049276:	2200      	movs	r2, #0
 8049278:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 804927a:	68bb      	ldr	r3, [r7, #8]
 804927c:	2202      	movs	r2, #2
 804927e:	4619      	mov	r1, r3
 8049280:	6878      	ldr	r0, [r7, #4]
 8049282:	f000 fe31 	bl	8049ee8 <USBD_CtlSendData>
              break;
 8049286:	e004      	b.n	8049292 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8049288:	6839      	ldr	r1, [r7, #0]
 804928a:	6878      	ldr	r0, [r7, #4]
 804928c:	f000 fb85 	bl	804999a <USBD_CtlError>
              break;
 8049290:	bf00      	nop
          }
          break;
 8049292:	e004      	b.n	804929e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8049294:	6839      	ldr	r1, [r7, #0]
 8049296:	6878      	ldr	r0, [r7, #4]
 8049298:	f000 fb7f 	bl	804999a <USBD_CtlError>
          break;
 804929c:	bf00      	nop
      }
      break;
 804929e:	e005      	b.n	80492ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80492a0:	6839      	ldr	r1, [r7, #0]
 80492a2:	6878      	ldr	r0, [r7, #4]
 80492a4:	f000 fb79 	bl	804999a <USBD_CtlError>
      break;
 80492a8:	e000      	b.n	80492ac <USBD_StdEPReq+0x330>
      break;
 80492aa:	bf00      	nop
  }

  return ret;
 80492ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80492ae:	4618      	mov	r0, r3
 80492b0:	3710      	adds	r7, #16
 80492b2:	46bd      	mov	sp, r7
 80492b4:	bd80      	pop	{r7, pc}
	...

080492b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80492b8:	b580      	push	{r7, lr}
 80492ba:	b084      	sub	sp, #16
 80492bc:	af00      	add	r7, sp, #0
 80492be:	6078      	str	r0, [r7, #4]
 80492c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80492c2:	2300      	movs	r3, #0
 80492c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80492c6:	2300      	movs	r3, #0
 80492c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80492ca:	2300      	movs	r3, #0
 80492cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80492ce:	683b      	ldr	r3, [r7, #0]
 80492d0:	885b      	ldrh	r3, [r3, #2]
 80492d2:	0a1b      	lsrs	r3, r3, #8
 80492d4:	b29b      	uxth	r3, r3
 80492d6:	3b01      	subs	r3, #1
 80492d8:	2b0e      	cmp	r3, #14
 80492da:	f200 8152 	bhi.w	8049582 <USBD_GetDescriptor+0x2ca>
 80492de:	a201      	add	r2, pc, #4	@ (adr r2, 80492e4 <USBD_GetDescriptor+0x2c>)
 80492e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80492e4:	08049355 	.word	0x08049355
 80492e8:	0804936d 	.word	0x0804936d
 80492ec:	080493ad 	.word	0x080493ad
 80492f0:	08049583 	.word	0x08049583
 80492f4:	08049583 	.word	0x08049583
 80492f8:	08049523 	.word	0x08049523
 80492fc:	0804954f 	.word	0x0804954f
 8049300:	08049583 	.word	0x08049583
 8049304:	08049583 	.word	0x08049583
 8049308:	08049583 	.word	0x08049583
 804930c:	08049583 	.word	0x08049583
 8049310:	08049583 	.word	0x08049583
 8049314:	08049583 	.word	0x08049583
 8049318:	08049583 	.word	0x08049583
 804931c:	08049321 	.word	0x08049321
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8049320:	687b      	ldr	r3, [r7, #4]
 8049322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049326:	69db      	ldr	r3, [r3, #28]
 8049328:	2b00      	cmp	r3, #0
 804932a:	d00b      	beq.n	8049344 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 804932c:	687b      	ldr	r3, [r7, #4]
 804932e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049332:	69db      	ldr	r3, [r3, #28]
 8049334:	687a      	ldr	r2, [r7, #4]
 8049336:	7c12      	ldrb	r2, [r2, #16]
 8049338:	f107 0108 	add.w	r1, r7, #8
 804933c:	4610      	mov	r0, r2
 804933e:	4798      	blx	r3
 8049340:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8049342:	e126      	b.n	8049592 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8049344:	6839      	ldr	r1, [r7, #0]
 8049346:	6878      	ldr	r0, [r7, #4]
 8049348:	f000 fb27 	bl	804999a <USBD_CtlError>
        err++;
 804934c:	7afb      	ldrb	r3, [r7, #11]
 804934e:	3301      	adds	r3, #1
 8049350:	72fb      	strb	r3, [r7, #11]
      break;
 8049352:	e11e      	b.n	8049592 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8049354:	687b      	ldr	r3, [r7, #4]
 8049356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804935a:	681b      	ldr	r3, [r3, #0]
 804935c:	687a      	ldr	r2, [r7, #4]
 804935e:	7c12      	ldrb	r2, [r2, #16]
 8049360:	f107 0108 	add.w	r1, r7, #8
 8049364:	4610      	mov	r0, r2
 8049366:	4798      	blx	r3
 8049368:	60f8      	str	r0, [r7, #12]
      break;
 804936a:	e112      	b.n	8049592 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 804936c:	687b      	ldr	r3, [r7, #4]
 804936e:	7c1b      	ldrb	r3, [r3, #16]
 8049370:	2b00      	cmp	r3, #0
 8049372:	d10d      	bne.n	8049390 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8049374:	687b      	ldr	r3, [r7, #4]
 8049376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 804937a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804937c:	f107 0208 	add.w	r2, r7, #8
 8049380:	4610      	mov	r0, r2
 8049382:	4798      	blx	r3
 8049384:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8049386:	68fb      	ldr	r3, [r7, #12]
 8049388:	3301      	adds	r3, #1
 804938a:	2202      	movs	r2, #2
 804938c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 804938e:	e100      	b.n	8049592 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8049390:	687b      	ldr	r3, [r7, #4]
 8049392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8049396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8049398:	f107 0208 	add.w	r2, r7, #8
 804939c:	4610      	mov	r0, r2
 804939e:	4798      	blx	r3
 80493a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80493a2:	68fb      	ldr	r3, [r7, #12]
 80493a4:	3301      	adds	r3, #1
 80493a6:	2202      	movs	r2, #2
 80493a8:	701a      	strb	r2, [r3, #0]
      break;
 80493aa:	e0f2      	b.n	8049592 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80493ac:	683b      	ldr	r3, [r7, #0]
 80493ae:	885b      	ldrh	r3, [r3, #2]
 80493b0:	b2db      	uxtb	r3, r3
 80493b2:	2b05      	cmp	r3, #5
 80493b4:	f200 80ac 	bhi.w	8049510 <USBD_GetDescriptor+0x258>
 80493b8:	a201      	add	r2, pc, #4	@ (adr r2, 80493c0 <USBD_GetDescriptor+0x108>)
 80493ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80493be:	bf00      	nop
 80493c0:	080493d9 	.word	0x080493d9
 80493c4:	0804940d 	.word	0x0804940d
 80493c8:	08049441 	.word	0x08049441
 80493cc:	08049475 	.word	0x08049475
 80493d0:	080494a9 	.word	0x080494a9
 80493d4:	080494dd 	.word	0x080494dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80493d8:	687b      	ldr	r3, [r7, #4]
 80493da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80493de:	685b      	ldr	r3, [r3, #4]
 80493e0:	2b00      	cmp	r3, #0
 80493e2:	d00b      	beq.n	80493fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80493e4:	687b      	ldr	r3, [r7, #4]
 80493e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80493ea:	685b      	ldr	r3, [r3, #4]
 80493ec:	687a      	ldr	r2, [r7, #4]
 80493ee:	7c12      	ldrb	r2, [r2, #16]
 80493f0:	f107 0108 	add.w	r1, r7, #8
 80493f4:	4610      	mov	r0, r2
 80493f6:	4798      	blx	r3
 80493f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80493fa:	e091      	b.n	8049520 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80493fc:	6839      	ldr	r1, [r7, #0]
 80493fe:	6878      	ldr	r0, [r7, #4]
 8049400:	f000 facb 	bl	804999a <USBD_CtlError>
            err++;
 8049404:	7afb      	ldrb	r3, [r7, #11]
 8049406:	3301      	adds	r3, #1
 8049408:	72fb      	strb	r3, [r7, #11]
          break;
 804940a:	e089      	b.n	8049520 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 804940c:	687b      	ldr	r3, [r7, #4]
 804940e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049412:	689b      	ldr	r3, [r3, #8]
 8049414:	2b00      	cmp	r3, #0
 8049416:	d00b      	beq.n	8049430 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8049418:	687b      	ldr	r3, [r7, #4]
 804941a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804941e:	689b      	ldr	r3, [r3, #8]
 8049420:	687a      	ldr	r2, [r7, #4]
 8049422:	7c12      	ldrb	r2, [r2, #16]
 8049424:	f107 0108 	add.w	r1, r7, #8
 8049428:	4610      	mov	r0, r2
 804942a:	4798      	blx	r3
 804942c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 804942e:	e077      	b.n	8049520 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8049430:	6839      	ldr	r1, [r7, #0]
 8049432:	6878      	ldr	r0, [r7, #4]
 8049434:	f000 fab1 	bl	804999a <USBD_CtlError>
            err++;
 8049438:	7afb      	ldrb	r3, [r7, #11]
 804943a:	3301      	adds	r3, #1
 804943c:	72fb      	strb	r3, [r7, #11]
          break;
 804943e:	e06f      	b.n	8049520 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8049440:	687b      	ldr	r3, [r7, #4]
 8049442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049446:	68db      	ldr	r3, [r3, #12]
 8049448:	2b00      	cmp	r3, #0
 804944a:	d00b      	beq.n	8049464 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 804944c:	687b      	ldr	r3, [r7, #4]
 804944e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049452:	68db      	ldr	r3, [r3, #12]
 8049454:	687a      	ldr	r2, [r7, #4]
 8049456:	7c12      	ldrb	r2, [r2, #16]
 8049458:	f107 0108 	add.w	r1, r7, #8
 804945c:	4610      	mov	r0, r2
 804945e:	4798      	blx	r3
 8049460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8049462:	e05d      	b.n	8049520 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8049464:	6839      	ldr	r1, [r7, #0]
 8049466:	6878      	ldr	r0, [r7, #4]
 8049468:	f000 fa97 	bl	804999a <USBD_CtlError>
            err++;
 804946c:	7afb      	ldrb	r3, [r7, #11]
 804946e:	3301      	adds	r3, #1
 8049470:	72fb      	strb	r3, [r7, #11]
          break;
 8049472:	e055      	b.n	8049520 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8049474:	687b      	ldr	r3, [r7, #4]
 8049476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804947a:	691b      	ldr	r3, [r3, #16]
 804947c:	2b00      	cmp	r3, #0
 804947e:	d00b      	beq.n	8049498 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8049480:	687b      	ldr	r3, [r7, #4]
 8049482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049486:	691b      	ldr	r3, [r3, #16]
 8049488:	687a      	ldr	r2, [r7, #4]
 804948a:	7c12      	ldrb	r2, [r2, #16]
 804948c:	f107 0108 	add.w	r1, r7, #8
 8049490:	4610      	mov	r0, r2
 8049492:	4798      	blx	r3
 8049494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8049496:	e043      	b.n	8049520 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8049498:	6839      	ldr	r1, [r7, #0]
 804949a:	6878      	ldr	r0, [r7, #4]
 804949c:	f000 fa7d 	bl	804999a <USBD_CtlError>
            err++;
 80494a0:	7afb      	ldrb	r3, [r7, #11]
 80494a2:	3301      	adds	r3, #1
 80494a4:	72fb      	strb	r3, [r7, #11]
          break;
 80494a6:	e03b      	b.n	8049520 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80494a8:	687b      	ldr	r3, [r7, #4]
 80494aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80494ae:	695b      	ldr	r3, [r3, #20]
 80494b0:	2b00      	cmp	r3, #0
 80494b2:	d00b      	beq.n	80494cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80494b4:	687b      	ldr	r3, [r7, #4]
 80494b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80494ba:	695b      	ldr	r3, [r3, #20]
 80494bc:	687a      	ldr	r2, [r7, #4]
 80494be:	7c12      	ldrb	r2, [r2, #16]
 80494c0:	f107 0108 	add.w	r1, r7, #8
 80494c4:	4610      	mov	r0, r2
 80494c6:	4798      	blx	r3
 80494c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80494ca:	e029      	b.n	8049520 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80494cc:	6839      	ldr	r1, [r7, #0]
 80494ce:	6878      	ldr	r0, [r7, #4]
 80494d0:	f000 fa63 	bl	804999a <USBD_CtlError>
            err++;
 80494d4:	7afb      	ldrb	r3, [r7, #11]
 80494d6:	3301      	adds	r3, #1
 80494d8:	72fb      	strb	r3, [r7, #11]
          break;
 80494da:	e021      	b.n	8049520 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80494dc:	687b      	ldr	r3, [r7, #4]
 80494de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80494e2:	699b      	ldr	r3, [r3, #24]
 80494e4:	2b00      	cmp	r3, #0
 80494e6:	d00b      	beq.n	8049500 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80494e8:	687b      	ldr	r3, [r7, #4]
 80494ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80494ee:	699b      	ldr	r3, [r3, #24]
 80494f0:	687a      	ldr	r2, [r7, #4]
 80494f2:	7c12      	ldrb	r2, [r2, #16]
 80494f4:	f107 0108 	add.w	r1, r7, #8
 80494f8:	4610      	mov	r0, r2
 80494fa:	4798      	blx	r3
 80494fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80494fe:	e00f      	b.n	8049520 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8049500:	6839      	ldr	r1, [r7, #0]
 8049502:	6878      	ldr	r0, [r7, #4]
 8049504:	f000 fa49 	bl	804999a <USBD_CtlError>
            err++;
 8049508:	7afb      	ldrb	r3, [r7, #11]
 804950a:	3301      	adds	r3, #1
 804950c:	72fb      	strb	r3, [r7, #11]
          break;
 804950e:	e007      	b.n	8049520 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8049510:	6839      	ldr	r1, [r7, #0]
 8049512:	6878      	ldr	r0, [r7, #4]
 8049514:	f000 fa41 	bl	804999a <USBD_CtlError>
          err++;
 8049518:	7afb      	ldrb	r3, [r7, #11]
 804951a:	3301      	adds	r3, #1
 804951c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 804951e:	bf00      	nop
      }
      break;
 8049520:	e037      	b.n	8049592 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8049522:	687b      	ldr	r3, [r7, #4]
 8049524:	7c1b      	ldrb	r3, [r3, #16]
 8049526:	2b00      	cmp	r3, #0
 8049528:	d109      	bne.n	804953e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 804952a:	687b      	ldr	r3, [r7, #4]
 804952c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8049530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8049532:	f107 0208 	add.w	r2, r7, #8
 8049536:	4610      	mov	r0, r2
 8049538:	4798      	blx	r3
 804953a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 804953c:	e029      	b.n	8049592 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 804953e:	6839      	ldr	r1, [r7, #0]
 8049540:	6878      	ldr	r0, [r7, #4]
 8049542:	f000 fa2a 	bl	804999a <USBD_CtlError>
        err++;
 8049546:	7afb      	ldrb	r3, [r7, #11]
 8049548:	3301      	adds	r3, #1
 804954a:	72fb      	strb	r3, [r7, #11]
      break;
 804954c:	e021      	b.n	8049592 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 804954e:	687b      	ldr	r3, [r7, #4]
 8049550:	7c1b      	ldrb	r3, [r3, #16]
 8049552:	2b00      	cmp	r3, #0
 8049554:	d10d      	bne.n	8049572 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8049556:	687b      	ldr	r3, [r7, #4]
 8049558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 804955c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804955e:	f107 0208 	add.w	r2, r7, #8
 8049562:	4610      	mov	r0, r2
 8049564:	4798      	blx	r3
 8049566:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8049568:	68fb      	ldr	r3, [r7, #12]
 804956a:	3301      	adds	r3, #1
 804956c:	2207      	movs	r2, #7
 804956e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8049570:	e00f      	b.n	8049592 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8049572:	6839      	ldr	r1, [r7, #0]
 8049574:	6878      	ldr	r0, [r7, #4]
 8049576:	f000 fa10 	bl	804999a <USBD_CtlError>
        err++;
 804957a:	7afb      	ldrb	r3, [r7, #11]
 804957c:	3301      	adds	r3, #1
 804957e:	72fb      	strb	r3, [r7, #11]
      break;
 8049580:	e007      	b.n	8049592 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8049582:	6839      	ldr	r1, [r7, #0]
 8049584:	6878      	ldr	r0, [r7, #4]
 8049586:	f000 fa08 	bl	804999a <USBD_CtlError>
      err++;
 804958a:	7afb      	ldrb	r3, [r7, #11]
 804958c:	3301      	adds	r3, #1
 804958e:	72fb      	strb	r3, [r7, #11]
      break;
 8049590:	bf00      	nop
  }

  if (err != 0U)
 8049592:	7afb      	ldrb	r3, [r7, #11]
 8049594:	2b00      	cmp	r3, #0
 8049596:	d11e      	bne.n	80495d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8049598:	683b      	ldr	r3, [r7, #0]
 804959a:	88db      	ldrh	r3, [r3, #6]
 804959c:	2b00      	cmp	r3, #0
 804959e:	d016      	beq.n	80495ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80495a0:	893b      	ldrh	r3, [r7, #8]
 80495a2:	2b00      	cmp	r3, #0
 80495a4:	d00e      	beq.n	80495c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80495a6:	683b      	ldr	r3, [r7, #0]
 80495a8:	88da      	ldrh	r2, [r3, #6]
 80495aa:	893b      	ldrh	r3, [r7, #8]
 80495ac:	4293      	cmp	r3, r2
 80495ae:	bf28      	it	cs
 80495b0:	4613      	movcs	r3, r2
 80495b2:	b29b      	uxth	r3, r3
 80495b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80495b6:	893b      	ldrh	r3, [r7, #8]
 80495b8:	461a      	mov	r2, r3
 80495ba:	68f9      	ldr	r1, [r7, #12]
 80495bc:	6878      	ldr	r0, [r7, #4]
 80495be:	f000 fc93 	bl	8049ee8 <USBD_CtlSendData>
 80495c2:	e009      	b.n	80495d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80495c4:	6839      	ldr	r1, [r7, #0]
 80495c6:	6878      	ldr	r0, [r7, #4]
 80495c8:	f000 f9e7 	bl	804999a <USBD_CtlError>
 80495cc:	e004      	b.n	80495d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80495ce:	6878      	ldr	r0, [r7, #4]
 80495d0:	f000 fcc7 	bl	8049f62 <USBD_CtlSendStatus>
 80495d4:	e000      	b.n	80495d8 <USBD_GetDescriptor+0x320>
    return;
 80495d6:	bf00      	nop
  }
}
 80495d8:	3710      	adds	r7, #16
 80495da:	46bd      	mov	sp, r7
 80495dc:	bd80      	pop	{r7, pc}
 80495de:	bf00      	nop

080495e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80495e0:	b580      	push	{r7, lr}
 80495e2:	b084      	sub	sp, #16
 80495e4:	af00      	add	r7, sp, #0
 80495e6:	6078      	str	r0, [r7, #4]
 80495e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80495ea:	683b      	ldr	r3, [r7, #0]
 80495ec:	889b      	ldrh	r3, [r3, #4]
 80495ee:	2b00      	cmp	r3, #0
 80495f0:	d131      	bne.n	8049656 <USBD_SetAddress+0x76>
 80495f2:	683b      	ldr	r3, [r7, #0]
 80495f4:	88db      	ldrh	r3, [r3, #6]
 80495f6:	2b00      	cmp	r3, #0
 80495f8:	d12d      	bne.n	8049656 <USBD_SetAddress+0x76>
 80495fa:	683b      	ldr	r3, [r7, #0]
 80495fc:	885b      	ldrh	r3, [r3, #2]
 80495fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8049600:	d829      	bhi.n	8049656 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8049602:	683b      	ldr	r3, [r7, #0]
 8049604:	885b      	ldrh	r3, [r3, #2]
 8049606:	b2db      	uxtb	r3, r3
 8049608:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 804960c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 804960e:	687b      	ldr	r3, [r7, #4]
 8049610:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049614:	b2db      	uxtb	r3, r3
 8049616:	2b03      	cmp	r3, #3
 8049618:	d104      	bne.n	8049624 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 804961a:	6839      	ldr	r1, [r7, #0]
 804961c:	6878      	ldr	r0, [r7, #4]
 804961e:	f000 f9bc 	bl	804999a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049622:	e01d      	b.n	8049660 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8049624:	687b      	ldr	r3, [r7, #4]
 8049626:	7bfa      	ldrb	r2, [r7, #15]
 8049628:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 804962c:	7bfb      	ldrb	r3, [r7, #15]
 804962e:	4619      	mov	r1, r3
 8049630:	6878      	ldr	r0, [r7, #4]
 8049632:	f001 f929 	bl	804a888 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8049636:	6878      	ldr	r0, [r7, #4]
 8049638:	f000 fc93 	bl	8049f62 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 804963c:	7bfb      	ldrb	r3, [r7, #15]
 804963e:	2b00      	cmp	r3, #0
 8049640:	d004      	beq.n	804964c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8049642:	687b      	ldr	r3, [r7, #4]
 8049644:	2202      	movs	r2, #2
 8049646:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 804964a:	e009      	b.n	8049660 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 804964c:	687b      	ldr	r3, [r7, #4]
 804964e:	2201      	movs	r2, #1
 8049650:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049654:	e004      	b.n	8049660 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8049656:	6839      	ldr	r1, [r7, #0]
 8049658:	6878      	ldr	r0, [r7, #4]
 804965a:	f000 f99e 	bl	804999a <USBD_CtlError>
  }
}
 804965e:	bf00      	nop
 8049660:	bf00      	nop
 8049662:	3710      	adds	r7, #16
 8049664:	46bd      	mov	sp, r7
 8049666:	bd80      	pop	{r7, pc}

08049668 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8049668:	b580      	push	{r7, lr}
 804966a:	b084      	sub	sp, #16
 804966c:	af00      	add	r7, sp, #0
 804966e:	6078      	str	r0, [r7, #4]
 8049670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8049672:	2300      	movs	r3, #0
 8049674:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8049676:	683b      	ldr	r3, [r7, #0]
 8049678:	885b      	ldrh	r3, [r3, #2]
 804967a:	b2da      	uxtb	r2, r3
 804967c:	4b4e      	ldr	r3, [pc, #312]	@ (80497b8 <USBD_SetConfig+0x150>)
 804967e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8049680:	4b4d      	ldr	r3, [pc, #308]	@ (80497b8 <USBD_SetConfig+0x150>)
 8049682:	781b      	ldrb	r3, [r3, #0]
 8049684:	2b01      	cmp	r3, #1
 8049686:	d905      	bls.n	8049694 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8049688:	6839      	ldr	r1, [r7, #0]
 804968a:	6878      	ldr	r0, [r7, #4]
 804968c:	f000 f985 	bl	804999a <USBD_CtlError>
    return USBD_FAIL;
 8049690:	2303      	movs	r3, #3
 8049692:	e08c      	b.n	80497ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8049694:	687b      	ldr	r3, [r7, #4]
 8049696:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 804969a:	b2db      	uxtb	r3, r3
 804969c:	2b02      	cmp	r3, #2
 804969e:	d002      	beq.n	80496a6 <USBD_SetConfig+0x3e>
 80496a0:	2b03      	cmp	r3, #3
 80496a2:	d029      	beq.n	80496f8 <USBD_SetConfig+0x90>
 80496a4:	e075      	b.n	8049792 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80496a6:	4b44      	ldr	r3, [pc, #272]	@ (80497b8 <USBD_SetConfig+0x150>)
 80496a8:	781b      	ldrb	r3, [r3, #0]
 80496aa:	2b00      	cmp	r3, #0
 80496ac:	d020      	beq.n	80496f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80496ae:	4b42      	ldr	r3, [pc, #264]	@ (80497b8 <USBD_SetConfig+0x150>)
 80496b0:	781b      	ldrb	r3, [r3, #0]
 80496b2:	461a      	mov	r2, r3
 80496b4:	687b      	ldr	r3, [r7, #4]
 80496b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80496b8:	4b3f      	ldr	r3, [pc, #252]	@ (80497b8 <USBD_SetConfig+0x150>)
 80496ba:	781b      	ldrb	r3, [r3, #0]
 80496bc:	4619      	mov	r1, r3
 80496be:	6878      	ldr	r0, [r7, #4]
 80496c0:	f7fe ffb8 	bl	8048634 <USBD_SetClassConfig>
 80496c4:	4603      	mov	r3, r0
 80496c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80496c8:	7bfb      	ldrb	r3, [r7, #15]
 80496ca:	2b00      	cmp	r3, #0
 80496cc:	d008      	beq.n	80496e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80496ce:	6839      	ldr	r1, [r7, #0]
 80496d0:	6878      	ldr	r0, [r7, #4]
 80496d2:	f000 f962 	bl	804999a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80496d6:	687b      	ldr	r3, [r7, #4]
 80496d8:	2202      	movs	r2, #2
 80496da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80496de:	e065      	b.n	80497ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80496e0:	6878      	ldr	r0, [r7, #4]
 80496e2:	f000 fc3e 	bl	8049f62 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80496e6:	687b      	ldr	r3, [r7, #4]
 80496e8:	2203      	movs	r2, #3
 80496ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80496ee:	e05d      	b.n	80497ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80496f0:	6878      	ldr	r0, [r7, #4]
 80496f2:	f000 fc36 	bl	8049f62 <USBD_CtlSendStatus>
      break;
 80496f6:	e059      	b.n	80497ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80496f8:	4b2f      	ldr	r3, [pc, #188]	@ (80497b8 <USBD_SetConfig+0x150>)
 80496fa:	781b      	ldrb	r3, [r3, #0]
 80496fc:	2b00      	cmp	r3, #0
 80496fe:	d112      	bne.n	8049726 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8049700:	687b      	ldr	r3, [r7, #4]
 8049702:	2202      	movs	r2, #2
 8049704:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8049708:	4b2b      	ldr	r3, [pc, #172]	@ (80497b8 <USBD_SetConfig+0x150>)
 804970a:	781b      	ldrb	r3, [r3, #0]
 804970c:	461a      	mov	r2, r3
 804970e:	687b      	ldr	r3, [r7, #4]
 8049710:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8049712:	4b29      	ldr	r3, [pc, #164]	@ (80497b8 <USBD_SetConfig+0x150>)
 8049714:	781b      	ldrb	r3, [r3, #0]
 8049716:	4619      	mov	r1, r3
 8049718:	6878      	ldr	r0, [r7, #4]
 804971a:	f7fe ffa7 	bl	804866c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 804971e:	6878      	ldr	r0, [r7, #4]
 8049720:	f000 fc1f 	bl	8049f62 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8049724:	e042      	b.n	80497ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8049726:	4b24      	ldr	r3, [pc, #144]	@ (80497b8 <USBD_SetConfig+0x150>)
 8049728:	781b      	ldrb	r3, [r3, #0]
 804972a:	461a      	mov	r2, r3
 804972c:	687b      	ldr	r3, [r7, #4]
 804972e:	685b      	ldr	r3, [r3, #4]
 8049730:	429a      	cmp	r2, r3
 8049732:	d02a      	beq.n	804978a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8049734:	687b      	ldr	r3, [r7, #4]
 8049736:	685b      	ldr	r3, [r3, #4]
 8049738:	b2db      	uxtb	r3, r3
 804973a:	4619      	mov	r1, r3
 804973c:	6878      	ldr	r0, [r7, #4]
 804973e:	f7fe ff95 	bl	804866c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8049742:	4b1d      	ldr	r3, [pc, #116]	@ (80497b8 <USBD_SetConfig+0x150>)
 8049744:	781b      	ldrb	r3, [r3, #0]
 8049746:	461a      	mov	r2, r3
 8049748:	687b      	ldr	r3, [r7, #4]
 804974a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 804974c:	4b1a      	ldr	r3, [pc, #104]	@ (80497b8 <USBD_SetConfig+0x150>)
 804974e:	781b      	ldrb	r3, [r3, #0]
 8049750:	4619      	mov	r1, r3
 8049752:	6878      	ldr	r0, [r7, #4]
 8049754:	f7fe ff6e 	bl	8048634 <USBD_SetClassConfig>
 8049758:	4603      	mov	r3, r0
 804975a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 804975c:	7bfb      	ldrb	r3, [r7, #15]
 804975e:	2b00      	cmp	r3, #0
 8049760:	d00f      	beq.n	8049782 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8049762:	6839      	ldr	r1, [r7, #0]
 8049764:	6878      	ldr	r0, [r7, #4]
 8049766:	f000 f918 	bl	804999a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 804976a:	687b      	ldr	r3, [r7, #4]
 804976c:	685b      	ldr	r3, [r3, #4]
 804976e:	b2db      	uxtb	r3, r3
 8049770:	4619      	mov	r1, r3
 8049772:	6878      	ldr	r0, [r7, #4]
 8049774:	f7fe ff7a 	bl	804866c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8049778:	687b      	ldr	r3, [r7, #4]
 804977a:	2202      	movs	r2, #2
 804977c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8049780:	e014      	b.n	80497ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8049782:	6878      	ldr	r0, [r7, #4]
 8049784:	f000 fbed 	bl	8049f62 <USBD_CtlSendStatus>
      break;
 8049788:	e010      	b.n	80497ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 804978a:	6878      	ldr	r0, [r7, #4]
 804978c:	f000 fbe9 	bl	8049f62 <USBD_CtlSendStatus>
      break;
 8049790:	e00c      	b.n	80497ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8049792:	6839      	ldr	r1, [r7, #0]
 8049794:	6878      	ldr	r0, [r7, #4]
 8049796:	f000 f900 	bl	804999a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 804979a:	4b07      	ldr	r3, [pc, #28]	@ (80497b8 <USBD_SetConfig+0x150>)
 804979c:	781b      	ldrb	r3, [r3, #0]
 804979e:	4619      	mov	r1, r3
 80497a0:	6878      	ldr	r0, [r7, #4]
 80497a2:	f7fe ff63 	bl	804866c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80497a6:	2303      	movs	r3, #3
 80497a8:	73fb      	strb	r3, [r7, #15]
      break;
 80497aa:	bf00      	nop
  }

  return ret;
 80497ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80497ae:	4618      	mov	r0, r3
 80497b0:	3710      	adds	r7, #16
 80497b2:	46bd      	mov	sp, r7
 80497b4:	bd80      	pop	{r7, pc}
 80497b6:	bf00      	nop
 80497b8:	2400025c 	.word	0x2400025c

080497bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80497bc:	b580      	push	{r7, lr}
 80497be:	b082      	sub	sp, #8
 80497c0:	af00      	add	r7, sp, #0
 80497c2:	6078      	str	r0, [r7, #4]
 80497c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80497c6:	683b      	ldr	r3, [r7, #0]
 80497c8:	88db      	ldrh	r3, [r3, #6]
 80497ca:	2b01      	cmp	r3, #1
 80497cc:	d004      	beq.n	80497d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80497ce:	6839      	ldr	r1, [r7, #0]
 80497d0:	6878      	ldr	r0, [r7, #4]
 80497d2:	f000 f8e2 	bl	804999a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80497d6:	e023      	b.n	8049820 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80497d8:	687b      	ldr	r3, [r7, #4]
 80497da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80497de:	b2db      	uxtb	r3, r3
 80497e0:	2b02      	cmp	r3, #2
 80497e2:	dc02      	bgt.n	80497ea <USBD_GetConfig+0x2e>
 80497e4:	2b00      	cmp	r3, #0
 80497e6:	dc03      	bgt.n	80497f0 <USBD_GetConfig+0x34>
 80497e8:	e015      	b.n	8049816 <USBD_GetConfig+0x5a>
 80497ea:	2b03      	cmp	r3, #3
 80497ec:	d00b      	beq.n	8049806 <USBD_GetConfig+0x4a>
 80497ee:	e012      	b.n	8049816 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80497f0:	687b      	ldr	r3, [r7, #4]
 80497f2:	2200      	movs	r2, #0
 80497f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80497f6:	687b      	ldr	r3, [r7, #4]
 80497f8:	3308      	adds	r3, #8
 80497fa:	2201      	movs	r2, #1
 80497fc:	4619      	mov	r1, r3
 80497fe:	6878      	ldr	r0, [r7, #4]
 8049800:	f000 fb72 	bl	8049ee8 <USBD_CtlSendData>
        break;
 8049804:	e00c      	b.n	8049820 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8049806:	687b      	ldr	r3, [r7, #4]
 8049808:	3304      	adds	r3, #4
 804980a:	2201      	movs	r2, #1
 804980c:	4619      	mov	r1, r3
 804980e:	6878      	ldr	r0, [r7, #4]
 8049810:	f000 fb6a 	bl	8049ee8 <USBD_CtlSendData>
        break;
 8049814:	e004      	b.n	8049820 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8049816:	6839      	ldr	r1, [r7, #0]
 8049818:	6878      	ldr	r0, [r7, #4]
 804981a:	f000 f8be 	bl	804999a <USBD_CtlError>
        break;
 804981e:	bf00      	nop
}
 8049820:	bf00      	nop
 8049822:	3708      	adds	r7, #8
 8049824:	46bd      	mov	sp, r7
 8049826:	bd80      	pop	{r7, pc}

08049828 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8049828:	b580      	push	{r7, lr}
 804982a:	b082      	sub	sp, #8
 804982c:	af00      	add	r7, sp, #0
 804982e:	6078      	str	r0, [r7, #4]
 8049830:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8049832:	687b      	ldr	r3, [r7, #4]
 8049834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049838:	b2db      	uxtb	r3, r3
 804983a:	3b01      	subs	r3, #1
 804983c:	2b02      	cmp	r3, #2
 804983e:	d81e      	bhi.n	804987e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8049840:	683b      	ldr	r3, [r7, #0]
 8049842:	88db      	ldrh	r3, [r3, #6]
 8049844:	2b02      	cmp	r3, #2
 8049846:	d004      	beq.n	8049852 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8049848:	6839      	ldr	r1, [r7, #0]
 804984a:	6878      	ldr	r0, [r7, #4]
 804984c:	f000 f8a5 	bl	804999a <USBD_CtlError>
        break;
 8049850:	e01a      	b.n	8049888 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8049852:	687b      	ldr	r3, [r7, #4]
 8049854:	2201      	movs	r2, #1
 8049856:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8049858:	687b      	ldr	r3, [r7, #4]
 804985a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 804985e:	2b00      	cmp	r3, #0
 8049860:	d005      	beq.n	804986e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8049862:	687b      	ldr	r3, [r7, #4]
 8049864:	68db      	ldr	r3, [r3, #12]
 8049866:	f043 0202 	orr.w	r2, r3, #2
 804986a:	687b      	ldr	r3, [r7, #4]
 804986c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 804986e:	687b      	ldr	r3, [r7, #4]
 8049870:	330c      	adds	r3, #12
 8049872:	2202      	movs	r2, #2
 8049874:	4619      	mov	r1, r3
 8049876:	6878      	ldr	r0, [r7, #4]
 8049878:	f000 fb36 	bl	8049ee8 <USBD_CtlSendData>
      break;
 804987c:	e004      	b.n	8049888 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 804987e:	6839      	ldr	r1, [r7, #0]
 8049880:	6878      	ldr	r0, [r7, #4]
 8049882:	f000 f88a 	bl	804999a <USBD_CtlError>
      break;
 8049886:	bf00      	nop
  }
}
 8049888:	bf00      	nop
 804988a:	3708      	adds	r7, #8
 804988c:	46bd      	mov	sp, r7
 804988e:	bd80      	pop	{r7, pc}

08049890 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8049890:	b580      	push	{r7, lr}
 8049892:	b082      	sub	sp, #8
 8049894:	af00      	add	r7, sp, #0
 8049896:	6078      	str	r0, [r7, #4]
 8049898:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 804989a:	683b      	ldr	r3, [r7, #0]
 804989c:	885b      	ldrh	r3, [r3, #2]
 804989e:	2b01      	cmp	r3, #1
 80498a0:	d107      	bne.n	80498b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80498a2:	687b      	ldr	r3, [r7, #4]
 80498a4:	2201      	movs	r2, #1
 80498a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80498aa:	6878      	ldr	r0, [r7, #4]
 80498ac:	f000 fb59 	bl	8049f62 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80498b0:	e013      	b.n	80498da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80498b2:	683b      	ldr	r3, [r7, #0]
 80498b4:	885b      	ldrh	r3, [r3, #2]
 80498b6:	2b02      	cmp	r3, #2
 80498b8:	d10b      	bne.n	80498d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80498ba:	683b      	ldr	r3, [r7, #0]
 80498bc:	889b      	ldrh	r3, [r3, #4]
 80498be:	0a1b      	lsrs	r3, r3, #8
 80498c0:	b29b      	uxth	r3, r3
 80498c2:	b2da      	uxtb	r2, r3
 80498c4:	687b      	ldr	r3, [r7, #4]
 80498c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80498ca:	6878      	ldr	r0, [r7, #4]
 80498cc:	f000 fb49 	bl	8049f62 <USBD_CtlSendStatus>
}
 80498d0:	e003      	b.n	80498da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80498d2:	6839      	ldr	r1, [r7, #0]
 80498d4:	6878      	ldr	r0, [r7, #4]
 80498d6:	f000 f860 	bl	804999a <USBD_CtlError>
}
 80498da:	bf00      	nop
 80498dc:	3708      	adds	r7, #8
 80498de:	46bd      	mov	sp, r7
 80498e0:	bd80      	pop	{r7, pc}

080498e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80498e2:	b580      	push	{r7, lr}
 80498e4:	b082      	sub	sp, #8
 80498e6:	af00      	add	r7, sp, #0
 80498e8:	6078      	str	r0, [r7, #4]
 80498ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80498ec:	687b      	ldr	r3, [r7, #4]
 80498ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80498f2:	b2db      	uxtb	r3, r3
 80498f4:	3b01      	subs	r3, #1
 80498f6:	2b02      	cmp	r3, #2
 80498f8:	d80b      	bhi.n	8049912 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80498fa:	683b      	ldr	r3, [r7, #0]
 80498fc:	885b      	ldrh	r3, [r3, #2]
 80498fe:	2b01      	cmp	r3, #1
 8049900:	d10c      	bne.n	804991c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8049902:	687b      	ldr	r3, [r7, #4]
 8049904:	2200      	movs	r2, #0
 8049906:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 804990a:	6878      	ldr	r0, [r7, #4]
 804990c:	f000 fb29 	bl	8049f62 <USBD_CtlSendStatus>
      }
      break;
 8049910:	e004      	b.n	804991c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8049912:	6839      	ldr	r1, [r7, #0]
 8049914:	6878      	ldr	r0, [r7, #4]
 8049916:	f000 f840 	bl	804999a <USBD_CtlError>
      break;
 804991a:	e000      	b.n	804991e <USBD_ClrFeature+0x3c>
      break;
 804991c:	bf00      	nop
  }
}
 804991e:	bf00      	nop
 8049920:	3708      	adds	r7, #8
 8049922:	46bd      	mov	sp, r7
 8049924:	bd80      	pop	{r7, pc}

08049926 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8049926:	b580      	push	{r7, lr}
 8049928:	b084      	sub	sp, #16
 804992a:	af00      	add	r7, sp, #0
 804992c:	6078      	str	r0, [r7, #4]
 804992e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8049930:	683b      	ldr	r3, [r7, #0]
 8049932:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8049934:	68fb      	ldr	r3, [r7, #12]
 8049936:	781a      	ldrb	r2, [r3, #0]
 8049938:	687b      	ldr	r3, [r7, #4]
 804993a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 804993c:	68fb      	ldr	r3, [r7, #12]
 804993e:	3301      	adds	r3, #1
 8049940:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8049942:	68fb      	ldr	r3, [r7, #12]
 8049944:	781a      	ldrb	r2, [r3, #0]
 8049946:	687b      	ldr	r3, [r7, #4]
 8049948:	705a      	strb	r2, [r3, #1]

  pbuff++;
 804994a:	68fb      	ldr	r3, [r7, #12]
 804994c:	3301      	adds	r3, #1
 804994e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8049950:	68f8      	ldr	r0, [r7, #12]
 8049952:	f7ff fa15 	bl	8048d80 <SWAPBYTE>
 8049956:	4603      	mov	r3, r0
 8049958:	461a      	mov	r2, r3
 804995a:	687b      	ldr	r3, [r7, #4]
 804995c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 804995e:	68fb      	ldr	r3, [r7, #12]
 8049960:	3301      	adds	r3, #1
 8049962:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8049964:	68fb      	ldr	r3, [r7, #12]
 8049966:	3301      	adds	r3, #1
 8049968:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 804996a:	68f8      	ldr	r0, [r7, #12]
 804996c:	f7ff fa08 	bl	8048d80 <SWAPBYTE>
 8049970:	4603      	mov	r3, r0
 8049972:	461a      	mov	r2, r3
 8049974:	687b      	ldr	r3, [r7, #4]
 8049976:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8049978:	68fb      	ldr	r3, [r7, #12]
 804997a:	3301      	adds	r3, #1
 804997c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 804997e:	68fb      	ldr	r3, [r7, #12]
 8049980:	3301      	adds	r3, #1
 8049982:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8049984:	68f8      	ldr	r0, [r7, #12]
 8049986:	f7ff f9fb 	bl	8048d80 <SWAPBYTE>
 804998a:	4603      	mov	r3, r0
 804998c:	461a      	mov	r2, r3
 804998e:	687b      	ldr	r3, [r7, #4]
 8049990:	80da      	strh	r2, [r3, #6]
}
 8049992:	bf00      	nop
 8049994:	3710      	adds	r7, #16
 8049996:	46bd      	mov	sp, r7
 8049998:	bd80      	pop	{r7, pc}

0804999a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 804999a:	b580      	push	{r7, lr}
 804999c:	b082      	sub	sp, #8
 804999e:	af00      	add	r7, sp, #0
 80499a0:	6078      	str	r0, [r7, #4]
 80499a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80499a4:	2180      	movs	r1, #128	@ 0x80
 80499a6:	6878      	ldr	r0, [r7, #4]
 80499a8:	f000 ff04 	bl	804a7b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80499ac:	2100      	movs	r1, #0
 80499ae:	6878      	ldr	r0, [r7, #4]
 80499b0:	f000 ff00 	bl	804a7b4 <USBD_LL_StallEP>
}
 80499b4:	bf00      	nop
 80499b6:	3708      	adds	r7, #8
 80499b8:	46bd      	mov	sp, r7
 80499ba:	bd80      	pop	{r7, pc}

080499bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80499bc:	b580      	push	{r7, lr}
 80499be:	b086      	sub	sp, #24
 80499c0:	af00      	add	r7, sp, #0
 80499c2:	60f8      	str	r0, [r7, #12]
 80499c4:	60b9      	str	r1, [r7, #8]
 80499c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80499c8:	2300      	movs	r3, #0
 80499ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80499cc:	68fb      	ldr	r3, [r7, #12]
 80499ce:	2b00      	cmp	r3, #0
 80499d0:	d042      	beq.n	8049a58 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80499d2:	68fb      	ldr	r3, [r7, #12]
 80499d4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80499d6:	6938      	ldr	r0, [r7, #16]
 80499d8:	f000 f842 	bl	8049a60 <USBD_GetLen>
 80499dc:	4603      	mov	r3, r0
 80499de:	3301      	adds	r3, #1
 80499e0:	005b      	lsls	r3, r3, #1
 80499e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80499e6:	d808      	bhi.n	80499fa <USBD_GetString+0x3e>
 80499e8:	6938      	ldr	r0, [r7, #16]
 80499ea:	f000 f839 	bl	8049a60 <USBD_GetLen>
 80499ee:	4603      	mov	r3, r0
 80499f0:	3301      	adds	r3, #1
 80499f2:	b29b      	uxth	r3, r3
 80499f4:	005b      	lsls	r3, r3, #1
 80499f6:	b29a      	uxth	r2, r3
 80499f8:	e001      	b.n	80499fe <USBD_GetString+0x42>
 80499fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80499fe:	687b      	ldr	r3, [r7, #4]
 8049a00:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8049a02:	7dfb      	ldrb	r3, [r7, #23]
 8049a04:	68ba      	ldr	r2, [r7, #8]
 8049a06:	4413      	add	r3, r2
 8049a08:	687a      	ldr	r2, [r7, #4]
 8049a0a:	7812      	ldrb	r2, [r2, #0]
 8049a0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8049a0e:	7dfb      	ldrb	r3, [r7, #23]
 8049a10:	3301      	adds	r3, #1
 8049a12:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8049a14:	7dfb      	ldrb	r3, [r7, #23]
 8049a16:	68ba      	ldr	r2, [r7, #8]
 8049a18:	4413      	add	r3, r2
 8049a1a:	2203      	movs	r2, #3
 8049a1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8049a1e:	7dfb      	ldrb	r3, [r7, #23]
 8049a20:	3301      	adds	r3, #1
 8049a22:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8049a24:	e013      	b.n	8049a4e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8049a26:	7dfb      	ldrb	r3, [r7, #23]
 8049a28:	68ba      	ldr	r2, [r7, #8]
 8049a2a:	4413      	add	r3, r2
 8049a2c:	693a      	ldr	r2, [r7, #16]
 8049a2e:	7812      	ldrb	r2, [r2, #0]
 8049a30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8049a32:	693b      	ldr	r3, [r7, #16]
 8049a34:	3301      	adds	r3, #1
 8049a36:	613b      	str	r3, [r7, #16]
    idx++;
 8049a38:	7dfb      	ldrb	r3, [r7, #23]
 8049a3a:	3301      	adds	r3, #1
 8049a3c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8049a3e:	7dfb      	ldrb	r3, [r7, #23]
 8049a40:	68ba      	ldr	r2, [r7, #8]
 8049a42:	4413      	add	r3, r2
 8049a44:	2200      	movs	r2, #0
 8049a46:	701a      	strb	r2, [r3, #0]
    idx++;
 8049a48:	7dfb      	ldrb	r3, [r7, #23]
 8049a4a:	3301      	adds	r3, #1
 8049a4c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8049a4e:	693b      	ldr	r3, [r7, #16]
 8049a50:	781b      	ldrb	r3, [r3, #0]
 8049a52:	2b00      	cmp	r3, #0
 8049a54:	d1e7      	bne.n	8049a26 <USBD_GetString+0x6a>
 8049a56:	e000      	b.n	8049a5a <USBD_GetString+0x9e>
    return;
 8049a58:	bf00      	nop
  }
}
 8049a5a:	3718      	adds	r7, #24
 8049a5c:	46bd      	mov	sp, r7
 8049a5e:	bd80      	pop	{r7, pc}

08049a60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8049a60:	b480      	push	{r7}
 8049a62:	b085      	sub	sp, #20
 8049a64:	af00      	add	r7, sp, #0
 8049a66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8049a68:	2300      	movs	r3, #0
 8049a6a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8049a6c:	687b      	ldr	r3, [r7, #4]
 8049a6e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8049a70:	e005      	b.n	8049a7e <USBD_GetLen+0x1e>
  {
    len++;
 8049a72:	7bfb      	ldrb	r3, [r7, #15]
 8049a74:	3301      	adds	r3, #1
 8049a76:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8049a78:	68bb      	ldr	r3, [r7, #8]
 8049a7a:	3301      	adds	r3, #1
 8049a7c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8049a7e:	68bb      	ldr	r3, [r7, #8]
 8049a80:	781b      	ldrb	r3, [r3, #0]
 8049a82:	2b00      	cmp	r3, #0
 8049a84:	d1f5      	bne.n	8049a72 <USBD_GetLen+0x12>
  }

  return len;
 8049a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8049a88:	4618      	mov	r0, r3
 8049a8a:	3714      	adds	r7, #20
 8049a8c:	46bd      	mov	sp, r7
 8049a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049a92:	4770      	bx	lr

08049a94 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8049a94:	b580      	push	{r7, lr}
 8049a96:	b084      	sub	sp, #16
 8049a98:	af00      	add	r7, sp, #0
 8049a9a:	6078      	str	r0, [r7, #4]
 8049a9c:	460b      	mov	r3, r1
 8049a9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8049aa0:	2010      	movs	r0, #16
 8049aa2:	f000 ff53 	bl	804a94c <USBD_static_malloc>
 8049aa6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8049aa8:	68fb      	ldr	r3, [r7, #12]
 8049aaa:	2b00      	cmp	r3, #0
 8049aac:	d109      	bne.n	8049ac2 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8049aae:	687b      	ldr	r3, [r7, #4]
 8049ab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049ab4:	687b      	ldr	r3, [r7, #4]
 8049ab6:	32b0      	adds	r2, #176	@ 0xb0
 8049ab8:	2100      	movs	r1, #0
 8049aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8049abe:	2302      	movs	r3, #2
 8049ac0:	e048      	b.n	8049b54 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8049ac2:	687b      	ldr	r3, [r7, #4]
 8049ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049ac8:	687b      	ldr	r3, [r7, #4]
 8049aca:	32b0      	adds	r2, #176	@ 0xb0
 8049acc:	68f9      	ldr	r1, [r7, #12]
 8049ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8049ad2:	687b      	ldr	r3, [r7, #4]
 8049ad4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049ad8:	687b      	ldr	r3, [r7, #4]
 8049ada:	32b0      	adds	r2, #176	@ 0xb0
 8049adc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8049ae0:	687b      	ldr	r3, [r7, #4]
 8049ae2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8049ae6:	687b      	ldr	r3, [r7, #4]
 8049ae8:	7c1b      	ldrb	r3, [r3, #16]
 8049aea:	2b00      	cmp	r3, #0
 8049aec:	d10d      	bne.n	8049b0a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8049aee:	4b1b      	ldr	r3, [pc, #108]	@ (8049b5c <USBD_HID_Init+0xc8>)
 8049af0:	781b      	ldrb	r3, [r3, #0]
 8049af2:	f003 020f 	and.w	r2, r3, #15
 8049af6:	6879      	ldr	r1, [r7, #4]
 8049af8:	4613      	mov	r3, r2
 8049afa:	009b      	lsls	r3, r3, #2
 8049afc:	4413      	add	r3, r2
 8049afe:	009b      	lsls	r3, r3, #2
 8049b00:	440b      	add	r3, r1
 8049b02:	3326      	adds	r3, #38	@ 0x26
 8049b04:	2207      	movs	r2, #7
 8049b06:	801a      	strh	r2, [r3, #0]
 8049b08:	e00c      	b.n	8049b24 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8049b0a:	4b14      	ldr	r3, [pc, #80]	@ (8049b5c <USBD_HID_Init+0xc8>)
 8049b0c:	781b      	ldrb	r3, [r3, #0]
 8049b0e:	f003 020f 	and.w	r2, r3, #15
 8049b12:	6879      	ldr	r1, [r7, #4]
 8049b14:	4613      	mov	r3, r2
 8049b16:	009b      	lsls	r3, r3, #2
 8049b18:	4413      	add	r3, r2
 8049b1a:	009b      	lsls	r3, r3, #2
 8049b1c:	440b      	add	r3, r1
 8049b1e:	3326      	adds	r3, #38	@ 0x26
 8049b20:	220a      	movs	r2, #10
 8049b22:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8049b24:	4b0d      	ldr	r3, [pc, #52]	@ (8049b5c <USBD_HID_Init+0xc8>)
 8049b26:	7819      	ldrb	r1, [r3, #0]
 8049b28:	2304      	movs	r3, #4
 8049b2a:	2203      	movs	r2, #3
 8049b2c:	6878      	ldr	r0, [r7, #4]
 8049b2e:	f000 fdfc 	bl	804a72a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8049b32:	4b0a      	ldr	r3, [pc, #40]	@ (8049b5c <USBD_HID_Init+0xc8>)
 8049b34:	781b      	ldrb	r3, [r3, #0]
 8049b36:	f003 020f 	and.w	r2, r3, #15
 8049b3a:	6879      	ldr	r1, [r7, #4]
 8049b3c:	4613      	mov	r3, r2
 8049b3e:	009b      	lsls	r3, r3, #2
 8049b40:	4413      	add	r3, r2
 8049b42:	009b      	lsls	r3, r3, #2
 8049b44:	440b      	add	r3, r1
 8049b46:	3324      	adds	r3, #36	@ 0x24
 8049b48:	2201      	movs	r2, #1
 8049b4a:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8049b4c:	68fb      	ldr	r3, [r7, #12]
 8049b4e:	2200      	movs	r2, #0
 8049b50:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8049b52:	2300      	movs	r3, #0
}
 8049b54:	4618      	mov	r0, r3
 8049b56:	3710      	adds	r7, #16
 8049b58:	46bd      	mov	sp, r7
 8049b5a:	bd80      	pop	{r7, pc}
 8049b5c:	240000ce 	.word	0x240000ce

08049b60 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8049b60:	b580      	push	{r7, lr}
 8049b62:	b082      	sub	sp, #8
 8049b64:	af00      	add	r7, sp, #0
 8049b66:	6078      	str	r0, [r7, #4]
 8049b68:	460b      	mov	r3, r1
 8049b6a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8049b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8049bec <USBD_HID_DeInit+0x8c>)
 8049b6e:	781b      	ldrb	r3, [r3, #0]
 8049b70:	4619      	mov	r1, r3
 8049b72:	6878      	ldr	r0, [r7, #4]
 8049b74:	f000 fdff 	bl	804a776 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8049b78:	4b1c      	ldr	r3, [pc, #112]	@ (8049bec <USBD_HID_DeInit+0x8c>)
 8049b7a:	781b      	ldrb	r3, [r3, #0]
 8049b7c:	f003 020f 	and.w	r2, r3, #15
 8049b80:	6879      	ldr	r1, [r7, #4]
 8049b82:	4613      	mov	r3, r2
 8049b84:	009b      	lsls	r3, r3, #2
 8049b86:	4413      	add	r3, r2
 8049b88:	009b      	lsls	r3, r3, #2
 8049b8a:	440b      	add	r3, r1
 8049b8c:	3324      	adds	r3, #36	@ 0x24
 8049b8e:	2200      	movs	r2, #0
 8049b90:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8049b92:	4b16      	ldr	r3, [pc, #88]	@ (8049bec <USBD_HID_DeInit+0x8c>)
 8049b94:	781b      	ldrb	r3, [r3, #0]
 8049b96:	f003 020f 	and.w	r2, r3, #15
 8049b9a:	6879      	ldr	r1, [r7, #4]
 8049b9c:	4613      	mov	r3, r2
 8049b9e:	009b      	lsls	r3, r3, #2
 8049ba0:	4413      	add	r3, r2
 8049ba2:	009b      	lsls	r3, r3, #2
 8049ba4:	440b      	add	r3, r1
 8049ba6:	3326      	adds	r3, #38	@ 0x26
 8049ba8:	2200      	movs	r2, #0
 8049baa:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8049bac:	687b      	ldr	r3, [r7, #4]
 8049bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049bb2:	687b      	ldr	r3, [r7, #4]
 8049bb4:	32b0      	adds	r2, #176	@ 0xb0
 8049bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049bba:	2b00      	cmp	r3, #0
 8049bbc:	d011      	beq.n	8049be2 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8049bbe:	687b      	ldr	r3, [r7, #4]
 8049bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049bc4:	687b      	ldr	r3, [r7, #4]
 8049bc6:	32b0      	adds	r2, #176	@ 0xb0
 8049bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049bcc:	4618      	mov	r0, r3
 8049bce:	f000 fecb 	bl	804a968 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8049bd2:	687b      	ldr	r3, [r7, #4]
 8049bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049bd8:	687b      	ldr	r3, [r7, #4]
 8049bda:	32b0      	adds	r2, #176	@ 0xb0
 8049bdc:	2100      	movs	r1, #0
 8049bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8049be2:	2300      	movs	r3, #0
}
 8049be4:	4618      	mov	r0, r3
 8049be6:	3708      	adds	r7, #8
 8049be8:	46bd      	mov	sp, r7
 8049bea:	bd80      	pop	{r7, pc}
 8049bec:	240000ce 	.word	0x240000ce

08049bf0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8049bf0:	b580      	push	{r7, lr}
 8049bf2:	b086      	sub	sp, #24
 8049bf4:	af00      	add	r7, sp, #0
 8049bf6:	6078      	str	r0, [r7, #4]
 8049bf8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8049bfa:	687b      	ldr	r3, [r7, #4]
 8049bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049c00:	687b      	ldr	r3, [r7, #4]
 8049c02:	32b0      	adds	r2, #176	@ 0xb0
 8049c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049c08:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8049c0a:	2300      	movs	r3, #0
 8049c0c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8049c0e:	2300      	movs	r3, #0
 8049c10:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8049c12:	68fb      	ldr	r3, [r7, #12]
 8049c14:	2b00      	cmp	r3, #0
 8049c16:	d101      	bne.n	8049c1c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8049c18:	2303      	movs	r3, #3
 8049c1a:	e0e8      	b.n	8049dee <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8049c1c:	683b      	ldr	r3, [r7, #0]
 8049c1e:	781b      	ldrb	r3, [r3, #0]
 8049c20:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8049c24:	2b00      	cmp	r3, #0
 8049c26:	d046      	beq.n	8049cb6 <USBD_HID_Setup+0xc6>
 8049c28:	2b20      	cmp	r3, #32
 8049c2a:	f040 80d8 	bne.w	8049dde <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8049c2e:	683b      	ldr	r3, [r7, #0]
 8049c30:	785b      	ldrb	r3, [r3, #1]
 8049c32:	3b02      	subs	r3, #2
 8049c34:	2b09      	cmp	r3, #9
 8049c36:	d836      	bhi.n	8049ca6 <USBD_HID_Setup+0xb6>
 8049c38:	a201      	add	r2, pc, #4	@ (adr r2, 8049c40 <USBD_HID_Setup+0x50>)
 8049c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049c3e:	bf00      	nop
 8049c40:	08049c97 	.word	0x08049c97
 8049c44:	08049c77 	.word	0x08049c77
 8049c48:	08049ca7 	.word	0x08049ca7
 8049c4c:	08049ca7 	.word	0x08049ca7
 8049c50:	08049ca7 	.word	0x08049ca7
 8049c54:	08049ca7 	.word	0x08049ca7
 8049c58:	08049ca7 	.word	0x08049ca7
 8049c5c:	08049ca7 	.word	0x08049ca7
 8049c60:	08049c85 	.word	0x08049c85
 8049c64:	08049c69 	.word	0x08049c69
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8049c68:	683b      	ldr	r3, [r7, #0]
 8049c6a:	885b      	ldrh	r3, [r3, #2]
 8049c6c:	b2db      	uxtb	r3, r3
 8049c6e:	461a      	mov	r2, r3
 8049c70:	68fb      	ldr	r3, [r7, #12]
 8049c72:	601a      	str	r2, [r3, #0]
          break;
 8049c74:	e01e      	b.n	8049cb4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8049c76:	68fb      	ldr	r3, [r7, #12]
 8049c78:	2201      	movs	r2, #1
 8049c7a:	4619      	mov	r1, r3
 8049c7c:	6878      	ldr	r0, [r7, #4]
 8049c7e:	f000 f933 	bl	8049ee8 <USBD_CtlSendData>
          break;
 8049c82:	e017      	b.n	8049cb4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8049c84:	683b      	ldr	r3, [r7, #0]
 8049c86:	885b      	ldrh	r3, [r3, #2]
 8049c88:	0a1b      	lsrs	r3, r3, #8
 8049c8a:	b29b      	uxth	r3, r3
 8049c8c:	b2db      	uxtb	r3, r3
 8049c8e:	461a      	mov	r2, r3
 8049c90:	68fb      	ldr	r3, [r7, #12]
 8049c92:	605a      	str	r2, [r3, #4]
          break;
 8049c94:	e00e      	b.n	8049cb4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8049c96:	68fb      	ldr	r3, [r7, #12]
 8049c98:	3304      	adds	r3, #4
 8049c9a:	2201      	movs	r2, #1
 8049c9c:	4619      	mov	r1, r3
 8049c9e:	6878      	ldr	r0, [r7, #4]
 8049ca0:	f000 f922 	bl	8049ee8 <USBD_CtlSendData>
          break;
 8049ca4:	e006      	b.n	8049cb4 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8049ca6:	6839      	ldr	r1, [r7, #0]
 8049ca8:	6878      	ldr	r0, [r7, #4]
 8049caa:	f7ff fe76 	bl	804999a <USBD_CtlError>
          ret = USBD_FAIL;
 8049cae:	2303      	movs	r3, #3
 8049cb0:	75fb      	strb	r3, [r7, #23]
          break;
 8049cb2:	bf00      	nop
      }
      break;
 8049cb4:	e09a      	b.n	8049dec <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8049cb6:	683b      	ldr	r3, [r7, #0]
 8049cb8:	785b      	ldrb	r3, [r3, #1]
 8049cba:	2b0b      	cmp	r3, #11
 8049cbc:	f200 8086 	bhi.w	8049dcc <USBD_HID_Setup+0x1dc>
 8049cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8049cc8 <USBD_HID_Setup+0xd8>)
 8049cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049cc6:	bf00      	nop
 8049cc8:	08049cf9 	.word	0x08049cf9
 8049ccc:	08049ddb 	.word	0x08049ddb
 8049cd0:	08049dcd 	.word	0x08049dcd
 8049cd4:	08049dcd 	.word	0x08049dcd
 8049cd8:	08049dcd 	.word	0x08049dcd
 8049cdc:	08049dcd 	.word	0x08049dcd
 8049ce0:	08049d23 	.word	0x08049d23
 8049ce4:	08049dcd 	.word	0x08049dcd
 8049ce8:	08049dcd 	.word	0x08049dcd
 8049cec:	08049dcd 	.word	0x08049dcd
 8049cf0:	08049d7b 	.word	0x08049d7b
 8049cf4:	08049da5 	.word	0x08049da5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049cf8:	687b      	ldr	r3, [r7, #4]
 8049cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049cfe:	b2db      	uxtb	r3, r3
 8049d00:	2b03      	cmp	r3, #3
 8049d02:	d107      	bne.n	8049d14 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8049d04:	f107 030a 	add.w	r3, r7, #10
 8049d08:	2202      	movs	r2, #2
 8049d0a:	4619      	mov	r1, r3
 8049d0c:	6878      	ldr	r0, [r7, #4]
 8049d0e:	f000 f8eb 	bl	8049ee8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8049d12:	e063      	b.n	8049ddc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8049d14:	6839      	ldr	r1, [r7, #0]
 8049d16:	6878      	ldr	r0, [r7, #4]
 8049d18:	f7ff fe3f 	bl	804999a <USBD_CtlError>
            ret = USBD_FAIL;
 8049d1c:	2303      	movs	r3, #3
 8049d1e:	75fb      	strb	r3, [r7, #23]
          break;
 8049d20:	e05c      	b.n	8049ddc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8049d22:	683b      	ldr	r3, [r7, #0]
 8049d24:	885b      	ldrh	r3, [r3, #2]
 8049d26:	0a1b      	lsrs	r3, r3, #8
 8049d28:	b29b      	uxth	r3, r3
 8049d2a:	2b22      	cmp	r3, #34	@ 0x22
 8049d2c:	d108      	bne.n	8049d40 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8049d2e:	683b      	ldr	r3, [r7, #0]
 8049d30:	88db      	ldrh	r3, [r3, #6]
 8049d32:	2b4a      	cmp	r3, #74	@ 0x4a
 8049d34:	bf28      	it	cs
 8049d36:	234a      	movcs	r3, #74	@ 0x4a
 8049d38:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8049d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8049df8 <USBD_HID_Setup+0x208>)
 8049d3c:	613b      	str	r3, [r7, #16]
 8049d3e:	e015      	b.n	8049d6c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8049d40:	683b      	ldr	r3, [r7, #0]
 8049d42:	885b      	ldrh	r3, [r3, #2]
 8049d44:	0a1b      	lsrs	r3, r3, #8
 8049d46:	b29b      	uxth	r3, r3
 8049d48:	2b21      	cmp	r3, #33	@ 0x21
 8049d4a:	d108      	bne.n	8049d5e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8049d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8049dfc <USBD_HID_Setup+0x20c>)
 8049d4e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8049d50:	683b      	ldr	r3, [r7, #0]
 8049d52:	88db      	ldrh	r3, [r3, #6]
 8049d54:	2b09      	cmp	r3, #9
 8049d56:	bf28      	it	cs
 8049d58:	2309      	movcs	r3, #9
 8049d5a:	82bb      	strh	r3, [r7, #20]
 8049d5c:	e006      	b.n	8049d6c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8049d5e:	6839      	ldr	r1, [r7, #0]
 8049d60:	6878      	ldr	r0, [r7, #4]
 8049d62:	f7ff fe1a 	bl	804999a <USBD_CtlError>
            ret = USBD_FAIL;
 8049d66:	2303      	movs	r3, #3
 8049d68:	75fb      	strb	r3, [r7, #23]
            break;
 8049d6a:	e037      	b.n	8049ddc <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8049d6c:	8abb      	ldrh	r3, [r7, #20]
 8049d6e:	461a      	mov	r2, r3
 8049d70:	6939      	ldr	r1, [r7, #16]
 8049d72:	6878      	ldr	r0, [r7, #4]
 8049d74:	f000 f8b8 	bl	8049ee8 <USBD_CtlSendData>
          break;
 8049d78:	e030      	b.n	8049ddc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049d7a:	687b      	ldr	r3, [r7, #4]
 8049d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049d80:	b2db      	uxtb	r3, r3
 8049d82:	2b03      	cmp	r3, #3
 8049d84:	d107      	bne.n	8049d96 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8049d86:	68fb      	ldr	r3, [r7, #12]
 8049d88:	3308      	adds	r3, #8
 8049d8a:	2201      	movs	r2, #1
 8049d8c:	4619      	mov	r1, r3
 8049d8e:	6878      	ldr	r0, [r7, #4]
 8049d90:	f000 f8aa 	bl	8049ee8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8049d94:	e022      	b.n	8049ddc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8049d96:	6839      	ldr	r1, [r7, #0]
 8049d98:	6878      	ldr	r0, [r7, #4]
 8049d9a:	f7ff fdfe 	bl	804999a <USBD_CtlError>
            ret = USBD_FAIL;
 8049d9e:	2303      	movs	r3, #3
 8049da0:	75fb      	strb	r3, [r7, #23]
          break;
 8049da2:	e01b      	b.n	8049ddc <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049da4:	687b      	ldr	r3, [r7, #4]
 8049da6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049daa:	b2db      	uxtb	r3, r3
 8049dac:	2b03      	cmp	r3, #3
 8049dae:	d106      	bne.n	8049dbe <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8049db0:	683b      	ldr	r3, [r7, #0]
 8049db2:	885b      	ldrh	r3, [r3, #2]
 8049db4:	b2db      	uxtb	r3, r3
 8049db6:	461a      	mov	r2, r3
 8049db8:	68fb      	ldr	r3, [r7, #12]
 8049dba:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8049dbc:	e00e      	b.n	8049ddc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8049dbe:	6839      	ldr	r1, [r7, #0]
 8049dc0:	6878      	ldr	r0, [r7, #4]
 8049dc2:	f7ff fdea 	bl	804999a <USBD_CtlError>
            ret = USBD_FAIL;
 8049dc6:	2303      	movs	r3, #3
 8049dc8:	75fb      	strb	r3, [r7, #23]
          break;
 8049dca:	e007      	b.n	8049ddc <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8049dcc:	6839      	ldr	r1, [r7, #0]
 8049dce:	6878      	ldr	r0, [r7, #4]
 8049dd0:	f7ff fde3 	bl	804999a <USBD_CtlError>
          ret = USBD_FAIL;
 8049dd4:	2303      	movs	r3, #3
 8049dd6:	75fb      	strb	r3, [r7, #23]
          break;
 8049dd8:	e000      	b.n	8049ddc <USBD_HID_Setup+0x1ec>
          break;
 8049dda:	bf00      	nop
      }
      break;
 8049ddc:	e006      	b.n	8049dec <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8049dde:	6839      	ldr	r1, [r7, #0]
 8049de0:	6878      	ldr	r0, [r7, #4]
 8049de2:	f7ff fdda 	bl	804999a <USBD_CtlError>
      ret = USBD_FAIL;
 8049de6:	2303      	movs	r3, #3
 8049de8:	75fb      	strb	r3, [r7, #23]
      break;
 8049dea:	bf00      	nop
  }

  return (uint8_t)ret;
 8049dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8049dee:	4618      	mov	r0, r3
 8049df0:	3718      	adds	r7, #24
 8049df2:	46bd      	mov	sp, r7
 8049df4:	bd80      	pop	{r7, pc}
 8049df6:	bf00      	nop
 8049df8:	24000084 	.word	0x24000084
 8049dfc:	2400006c 	.word	0x2400006c

08049e00 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8049e00:	b580      	push	{r7, lr}
 8049e02:	b084      	sub	sp, #16
 8049e04:	af00      	add	r7, sp, #0
 8049e06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8049e08:	2181      	movs	r1, #129	@ 0x81
 8049e0a:	4809      	ldr	r0, [pc, #36]	@ (8049e30 <USBD_HID_GetFSCfgDesc+0x30>)
 8049e0c:	f7fe ff64 	bl	8048cd8 <USBD_GetEpDesc>
 8049e10:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8049e12:	68fb      	ldr	r3, [r7, #12]
 8049e14:	2b00      	cmp	r3, #0
 8049e16:	d002      	beq.n	8049e1e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8049e18:	68fb      	ldr	r3, [r7, #12]
 8049e1a:	220a      	movs	r2, #10
 8049e1c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8049e1e:	687b      	ldr	r3, [r7, #4]
 8049e20:	2222      	movs	r2, #34	@ 0x22
 8049e22:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8049e24:	4b02      	ldr	r3, [pc, #8]	@ (8049e30 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8049e26:	4618      	mov	r0, r3
 8049e28:	3710      	adds	r7, #16
 8049e2a:	46bd      	mov	sp, r7
 8049e2c:	bd80      	pop	{r7, pc}
 8049e2e:	bf00      	nop
 8049e30:	24000048 	.word	0x24000048

08049e34 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8049e34:	b580      	push	{r7, lr}
 8049e36:	b084      	sub	sp, #16
 8049e38:	af00      	add	r7, sp, #0
 8049e3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8049e3c:	2181      	movs	r1, #129	@ 0x81
 8049e3e:	4809      	ldr	r0, [pc, #36]	@ (8049e64 <USBD_HID_GetHSCfgDesc+0x30>)
 8049e40:	f7fe ff4a 	bl	8048cd8 <USBD_GetEpDesc>
 8049e44:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8049e46:	68fb      	ldr	r3, [r7, #12]
 8049e48:	2b00      	cmp	r3, #0
 8049e4a:	d002      	beq.n	8049e52 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8049e4c:	68fb      	ldr	r3, [r7, #12]
 8049e4e:	2207      	movs	r2, #7
 8049e50:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8049e52:	687b      	ldr	r3, [r7, #4]
 8049e54:	2222      	movs	r2, #34	@ 0x22
 8049e56:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8049e58:	4b02      	ldr	r3, [pc, #8]	@ (8049e64 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8049e5a:	4618      	mov	r0, r3
 8049e5c:	3710      	adds	r7, #16
 8049e5e:	46bd      	mov	sp, r7
 8049e60:	bd80      	pop	{r7, pc}
 8049e62:	bf00      	nop
 8049e64:	24000048 	.word	0x24000048

08049e68 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8049e68:	b580      	push	{r7, lr}
 8049e6a:	b084      	sub	sp, #16
 8049e6c:	af00      	add	r7, sp, #0
 8049e6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8049e70:	2181      	movs	r1, #129	@ 0x81
 8049e72:	4809      	ldr	r0, [pc, #36]	@ (8049e98 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8049e74:	f7fe ff30 	bl	8048cd8 <USBD_GetEpDesc>
 8049e78:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8049e7a:	68fb      	ldr	r3, [r7, #12]
 8049e7c:	2b00      	cmp	r3, #0
 8049e7e:	d002      	beq.n	8049e86 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8049e80:	68fb      	ldr	r3, [r7, #12]
 8049e82:	220a      	movs	r2, #10
 8049e84:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8049e86:	687b      	ldr	r3, [r7, #4]
 8049e88:	2222      	movs	r2, #34	@ 0x22
 8049e8a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8049e8c:	4b02      	ldr	r3, [pc, #8]	@ (8049e98 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8049e8e:	4618      	mov	r0, r3
 8049e90:	3710      	adds	r7, #16
 8049e92:	46bd      	mov	sp, r7
 8049e94:	bd80      	pop	{r7, pc}
 8049e96:	bf00      	nop
 8049e98:	24000048 	.word	0x24000048

08049e9c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8049e9c:	b480      	push	{r7}
 8049e9e:	b083      	sub	sp, #12
 8049ea0:	af00      	add	r7, sp, #0
 8049ea2:	6078      	str	r0, [r7, #4]
 8049ea4:	460b      	mov	r3, r1
 8049ea6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8049ea8:	687b      	ldr	r3, [r7, #4]
 8049eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049eae:	687b      	ldr	r3, [r7, #4]
 8049eb0:	32b0      	adds	r2, #176	@ 0xb0
 8049eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049eb6:	2200      	movs	r2, #0
 8049eb8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8049eba:	2300      	movs	r3, #0
}
 8049ebc:	4618      	mov	r0, r3
 8049ebe:	370c      	adds	r7, #12
 8049ec0:	46bd      	mov	sp, r7
 8049ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049ec6:	4770      	bx	lr

08049ec8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8049ec8:	b480      	push	{r7}
 8049eca:	b083      	sub	sp, #12
 8049ecc:	af00      	add	r7, sp, #0
 8049ece:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8049ed0:	687b      	ldr	r3, [r7, #4]
 8049ed2:	220a      	movs	r2, #10
 8049ed4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8049ed6:	4b03      	ldr	r3, [pc, #12]	@ (8049ee4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8049ed8:	4618      	mov	r0, r3
 8049eda:	370c      	adds	r7, #12
 8049edc:	46bd      	mov	sp, r7
 8049ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049ee2:	4770      	bx	lr
 8049ee4:	24000078 	.word	0x24000078

08049ee8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8049ee8:	b580      	push	{r7, lr}
 8049eea:	b084      	sub	sp, #16
 8049eec:	af00      	add	r7, sp, #0
 8049eee:	60f8      	str	r0, [r7, #12]
 8049ef0:	60b9      	str	r1, [r7, #8]
 8049ef2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8049ef4:	68fb      	ldr	r3, [r7, #12]
 8049ef6:	2202      	movs	r2, #2
 8049ef8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8049efc:	68fb      	ldr	r3, [r7, #12]
 8049efe:	687a      	ldr	r2, [r7, #4]
 8049f00:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8049f02:	68fb      	ldr	r3, [r7, #12]
 8049f04:	687a      	ldr	r2, [r7, #4]
 8049f06:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8049f08:	687b      	ldr	r3, [r7, #4]
 8049f0a:	68ba      	ldr	r2, [r7, #8]
 8049f0c:	2100      	movs	r1, #0
 8049f0e:	68f8      	ldr	r0, [r7, #12]
 8049f10:	f000 fcd9 	bl	804a8c6 <USBD_LL_Transmit>

  return USBD_OK;
 8049f14:	2300      	movs	r3, #0
}
 8049f16:	4618      	mov	r0, r3
 8049f18:	3710      	adds	r7, #16
 8049f1a:	46bd      	mov	sp, r7
 8049f1c:	bd80      	pop	{r7, pc}

08049f1e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8049f1e:	b580      	push	{r7, lr}
 8049f20:	b084      	sub	sp, #16
 8049f22:	af00      	add	r7, sp, #0
 8049f24:	60f8      	str	r0, [r7, #12]
 8049f26:	60b9      	str	r1, [r7, #8]
 8049f28:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8049f2a:	687b      	ldr	r3, [r7, #4]
 8049f2c:	68ba      	ldr	r2, [r7, #8]
 8049f2e:	2100      	movs	r1, #0
 8049f30:	68f8      	ldr	r0, [r7, #12]
 8049f32:	f000 fcc8 	bl	804a8c6 <USBD_LL_Transmit>

  return USBD_OK;
 8049f36:	2300      	movs	r3, #0
}
 8049f38:	4618      	mov	r0, r3
 8049f3a:	3710      	adds	r7, #16
 8049f3c:	46bd      	mov	sp, r7
 8049f3e:	bd80      	pop	{r7, pc}

08049f40 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8049f40:	b580      	push	{r7, lr}
 8049f42:	b084      	sub	sp, #16
 8049f44:	af00      	add	r7, sp, #0
 8049f46:	60f8      	str	r0, [r7, #12]
 8049f48:	60b9      	str	r1, [r7, #8]
 8049f4a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8049f4c:	687b      	ldr	r3, [r7, #4]
 8049f4e:	68ba      	ldr	r2, [r7, #8]
 8049f50:	2100      	movs	r1, #0
 8049f52:	68f8      	ldr	r0, [r7, #12]
 8049f54:	f000 fcd8 	bl	804a908 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8049f58:	2300      	movs	r3, #0
}
 8049f5a:	4618      	mov	r0, r3
 8049f5c:	3710      	adds	r7, #16
 8049f5e:	46bd      	mov	sp, r7
 8049f60:	bd80      	pop	{r7, pc}

08049f62 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8049f62:	b580      	push	{r7, lr}
 8049f64:	b082      	sub	sp, #8
 8049f66:	af00      	add	r7, sp, #0
 8049f68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8049f6a:	687b      	ldr	r3, [r7, #4]
 8049f6c:	2204      	movs	r2, #4
 8049f6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8049f72:	2300      	movs	r3, #0
 8049f74:	2200      	movs	r2, #0
 8049f76:	2100      	movs	r1, #0
 8049f78:	6878      	ldr	r0, [r7, #4]
 8049f7a:	f000 fca4 	bl	804a8c6 <USBD_LL_Transmit>

  return USBD_OK;
 8049f7e:	2300      	movs	r3, #0
}
 8049f80:	4618      	mov	r0, r3
 8049f82:	3708      	adds	r7, #8
 8049f84:	46bd      	mov	sp, r7
 8049f86:	bd80      	pop	{r7, pc}

08049f88 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8049f88:	b580      	push	{r7, lr}
 8049f8a:	b082      	sub	sp, #8
 8049f8c:	af00      	add	r7, sp, #0
 8049f8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8049f90:	687b      	ldr	r3, [r7, #4]
 8049f92:	2205      	movs	r2, #5
 8049f94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8049f98:	2300      	movs	r3, #0
 8049f9a:	2200      	movs	r2, #0
 8049f9c:	2100      	movs	r1, #0
 8049f9e:	6878      	ldr	r0, [r7, #4]
 8049fa0:	f000 fcb2 	bl	804a908 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8049fa4:	2300      	movs	r3, #0
}
 8049fa6:	4618      	mov	r0, r3
 8049fa8:	3708      	adds	r7, #8
 8049faa:	46bd      	mov	sp, r7
 8049fac:	bd80      	pop	{r7, pc}
	...

08049fb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8049fb0:	b580      	push	{r7, lr}
 8049fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8049fb4:	2201      	movs	r2, #1
 8049fb6:	490f      	ldr	r1, [pc, #60]	@ (8049ff4 <MX_USB_DEVICE_Init+0x44>)
 8049fb8:	480f      	ldr	r0, [pc, #60]	@ (8049ff8 <MX_USB_DEVICE_Init+0x48>)
 8049fba:	f7fe fabe 	bl	804853a <USBD_Init>
 8049fbe:	4603      	mov	r3, r0
 8049fc0:	2b00      	cmp	r3, #0
 8049fc2:	d001      	beq.n	8049fc8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8049fc4:	f7f6 fe24 	bl	8040c10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 8049fc8:	490c      	ldr	r1, [pc, #48]	@ (8049ffc <MX_USB_DEVICE_Init+0x4c>)
 8049fca:	480b      	ldr	r0, [pc, #44]	@ (8049ff8 <MX_USB_DEVICE_Init+0x48>)
 8049fcc:	f7fe fae5 	bl	804859a <USBD_RegisterClass>
 8049fd0:	4603      	mov	r3, r0
 8049fd2:	2b00      	cmp	r3, #0
 8049fd4:	d001      	beq.n	8049fda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8049fd6:	f7f6 fe1b 	bl	8040c10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8049fda:	4807      	ldr	r0, [pc, #28]	@ (8049ff8 <MX_USB_DEVICE_Init+0x48>)
 8049fdc:	f7fe fb13 	bl	8048606 <USBD_Start>
 8049fe0:	4603      	mov	r3, r0
 8049fe2:	2b00      	cmp	r3, #0
 8049fe4:	d001      	beq.n	8049fea <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8049fe6:	f7f6 fe13 	bl	8040c10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8049fea:	f7f8 ffa7 	bl	8042f3c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8049fee:	bf00      	nop
 8049ff0:	bd80      	pop	{r7, pc}
 8049ff2:	bf00      	nop
 8049ff4:	240000d0 	.word	0x240000d0
 8049ff8:	24000260 	.word	0x24000260
 8049ffc:	24000010 	.word	0x24000010

0804a000 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a000:	b480      	push	{r7}
 804a002:	b083      	sub	sp, #12
 804a004:	af00      	add	r7, sp, #0
 804a006:	4603      	mov	r3, r0
 804a008:	6039      	str	r1, [r7, #0]
 804a00a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 804a00c:	683b      	ldr	r3, [r7, #0]
 804a00e:	2212      	movs	r2, #18
 804a010:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 804a012:	4b03      	ldr	r3, [pc, #12]	@ (804a020 <USBD_HS_DeviceDescriptor+0x20>)
}
 804a014:	4618      	mov	r0, r3
 804a016:	370c      	adds	r7, #12
 804a018:	46bd      	mov	sp, r7
 804a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a01e:	4770      	bx	lr
 804a020:	240000f0 	.word	0x240000f0

0804a024 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a024:	b480      	push	{r7}
 804a026:	b083      	sub	sp, #12
 804a028:	af00      	add	r7, sp, #0
 804a02a:	4603      	mov	r3, r0
 804a02c:	6039      	str	r1, [r7, #0]
 804a02e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 804a030:	683b      	ldr	r3, [r7, #0]
 804a032:	2204      	movs	r2, #4
 804a034:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 804a036:	4b03      	ldr	r3, [pc, #12]	@ (804a044 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 804a038:	4618      	mov	r0, r3
 804a03a:	370c      	adds	r7, #12
 804a03c:	46bd      	mov	sp, r7
 804a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a042:	4770      	bx	lr
 804a044:	24000104 	.word	0x24000104

0804a048 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a048:	b580      	push	{r7, lr}
 804a04a:	b082      	sub	sp, #8
 804a04c:	af00      	add	r7, sp, #0
 804a04e:	4603      	mov	r3, r0
 804a050:	6039      	str	r1, [r7, #0]
 804a052:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 804a054:	79fb      	ldrb	r3, [r7, #7]
 804a056:	2b00      	cmp	r3, #0
 804a058:	d105      	bne.n	804a066 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 804a05a:	683a      	ldr	r2, [r7, #0]
 804a05c:	4907      	ldr	r1, [pc, #28]	@ (804a07c <USBD_HS_ProductStrDescriptor+0x34>)
 804a05e:	4808      	ldr	r0, [pc, #32]	@ (804a080 <USBD_HS_ProductStrDescriptor+0x38>)
 804a060:	f7ff fcac 	bl	80499bc <USBD_GetString>
 804a064:	e004      	b.n	804a070 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 804a066:	683a      	ldr	r2, [r7, #0]
 804a068:	4904      	ldr	r1, [pc, #16]	@ (804a07c <USBD_HS_ProductStrDescriptor+0x34>)
 804a06a:	4805      	ldr	r0, [pc, #20]	@ (804a080 <USBD_HS_ProductStrDescriptor+0x38>)
 804a06c:	f7ff fca6 	bl	80499bc <USBD_GetString>
  }
  return USBD_StrDesc;
 804a070:	4b02      	ldr	r3, [pc, #8]	@ (804a07c <USBD_HS_ProductStrDescriptor+0x34>)
}
 804a072:	4618      	mov	r0, r3
 804a074:	3708      	adds	r7, #8
 804a076:	46bd      	mov	sp, r7
 804a078:	bd80      	pop	{r7, pc}
 804a07a:	bf00      	nop
 804a07c:	2400053c 	.word	0x2400053c
 804a080:	0804b880 	.word	0x0804b880

0804a084 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a084:	b580      	push	{r7, lr}
 804a086:	b082      	sub	sp, #8
 804a088:	af00      	add	r7, sp, #0
 804a08a:	4603      	mov	r3, r0
 804a08c:	6039      	str	r1, [r7, #0]
 804a08e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 804a090:	683a      	ldr	r2, [r7, #0]
 804a092:	4904      	ldr	r1, [pc, #16]	@ (804a0a4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 804a094:	4804      	ldr	r0, [pc, #16]	@ (804a0a8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 804a096:	f7ff fc91 	bl	80499bc <USBD_GetString>
  return USBD_StrDesc;
 804a09a:	4b02      	ldr	r3, [pc, #8]	@ (804a0a4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 804a09c:	4618      	mov	r0, r3
 804a09e:	3708      	adds	r7, #8
 804a0a0:	46bd      	mov	sp, r7
 804a0a2:	bd80      	pop	{r7, pc}
 804a0a4:	2400053c 	.word	0x2400053c
 804a0a8:	0804b898 	.word	0x0804b898

0804a0ac <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a0ac:	b580      	push	{r7, lr}
 804a0ae:	b082      	sub	sp, #8
 804a0b0:	af00      	add	r7, sp, #0
 804a0b2:	4603      	mov	r3, r0
 804a0b4:	6039      	str	r1, [r7, #0]
 804a0b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 804a0b8:	683b      	ldr	r3, [r7, #0]
 804a0ba:	221a      	movs	r2, #26
 804a0bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 804a0be:	f000 f843 	bl	804a148 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 804a0c2:	4b02      	ldr	r3, [pc, #8]	@ (804a0cc <USBD_HS_SerialStrDescriptor+0x20>)
}
 804a0c4:	4618      	mov	r0, r3
 804a0c6:	3708      	adds	r7, #8
 804a0c8:	46bd      	mov	sp, r7
 804a0ca:	bd80      	pop	{r7, pc}
 804a0cc:	24000108 	.word	0x24000108

0804a0d0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a0d0:	b580      	push	{r7, lr}
 804a0d2:	b082      	sub	sp, #8
 804a0d4:	af00      	add	r7, sp, #0
 804a0d6:	4603      	mov	r3, r0
 804a0d8:	6039      	str	r1, [r7, #0]
 804a0da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 804a0dc:	79fb      	ldrb	r3, [r7, #7]
 804a0de:	2b00      	cmp	r3, #0
 804a0e0:	d105      	bne.n	804a0ee <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 804a0e2:	683a      	ldr	r2, [r7, #0]
 804a0e4:	4907      	ldr	r1, [pc, #28]	@ (804a104 <USBD_HS_ConfigStrDescriptor+0x34>)
 804a0e6:	4808      	ldr	r0, [pc, #32]	@ (804a108 <USBD_HS_ConfigStrDescriptor+0x38>)
 804a0e8:	f7ff fc68 	bl	80499bc <USBD_GetString>
 804a0ec:	e004      	b.n	804a0f8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 804a0ee:	683a      	ldr	r2, [r7, #0]
 804a0f0:	4904      	ldr	r1, [pc, #16]	@ (804a104 <USBD_HS_ConfigStrDescriptor+0x34>)
 804a0f2:	4805      	ldr	r0, [pc, #20]	@ (804a108 <USBD_HS_ConfigStrDescriptor+0x38>)
 804a0f4:	f7ff fc62 	bl	80499bc <USBD_GetString>
  }
  return USBD_StrDesc;
 804a0f8:	4b02      	ldr	r3, [pc, #8]	@ (804a104 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 804a0fa:	4618      	mov	r0, r3
 804a0fc:	3708      	adds	r7, #8
 804a0fe:	46bd      	mov	sp, r7
 804a100:	bd80      	pop	{r7, pc}
 804a102:	bf00      	nop
 804a104:	2400053c 	.word	0x2400053c
 804a108:	0804b8ac 	.word	0x0804b8ac

0804a10c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a10c:	b580      	push	{r7, lr}
 804a10e:	b082      	sub	sp, #8
 804a110:	af00      	add	r7, sp, #0
 804a112:	4603      	mov	r3, r0
 804a114:	6039      	str	r1, [r7, #0]
 804a116:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 804a118:	79fb      	ldrb	r3, [r7, #7]
 804a11a:	2b00      	cmp	r3, #0
 804a11c:	d105      	bne.n	804a12a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 804a11e:	683a      	ldr	r2, [r7, #0]
 804a120:	4907      	ldr	r1, [pc, #28]	@ (804a140 <USBD_HS_InterfaceStrDescriptor+0x34>)
 804a122:	4808      	ldr	r0, [pc, #32]	@ (804a144 <USBD_HS_InterfaceStrDescriptor+0x38>)
 804a124:	f7ff fc4a 	bl	80499bc <USBD_GetString>
 804a128:	e004      	b.n	804a134 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 804a12a:	683a      	ldr	r2, [r7, #0]
 804a12c:	4904      	ldr	r1, [pc, #16]	@ (804a140 <USBD_HS_InterfaceStrDescriptor+0x34>)
 804a12e:	4805      	ldr	r0, [pc, #20]	@ (804a144 <USBD_HS_InterfaceStrDescriptor+0x38>)
 804a130:	f7ff fc44 	bl	80499bc <USBD_GetString>
  }
  return USBD_StrDesc;
 804a134:	4b02      	ldr	r3, [pc, #8]	@ (804a140 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 804a136:	4618      	mov	r0, r3
 804a138:	3708      	adds	r7, #8
 804a13a:	46bd      	mov	sp, r7
 804a13c:	bd80      	pop	{r7, pc}
 804a13e:	bf00      	nop
 804a140:	2400053c 	.word	0x2400053c
 804a144:	0804b8b8 	.word	0x0804b8b8

0804a148 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 804a148:	b580      	push	{r7, lr}
 804a14a:	b084      	sub	sp, #16
 804a14c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 804a14e:	4b0f      	ldr	r3, [pc, #60]	@ (804a18c <Get_SerialNum+0x44>)
 804a150:	681b      	ldr	r3, [r3, #0]
 804a152:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 804a154:	4b0e      	ldr	r3, [pc, #56]	@ (804a190 <Get_SerialNum+0x48>)
 804a156:	681b      	ldr	r3, [r3, #0]
 804a158:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 804a15a:	4b0e      	ldr	r3, [pc, #56]	@ (804a194 <Get_SerialNum+0x4c>)
 804a15c:	681b      	ldr	r3, [r3, #0]
 804a15e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 804a160:	68fa      	ldr	r2, [r7, #12]
 804a162:	687b      	ldr	r3, [r7, #4]
 804a164:	4413      	add	r3, r2
 804a166:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 804a168:	68fb      	ldr	r3, [r7, #12]
 804a16a:	2b00      	cmp	r3, #0
 804a16c:	d009      	beq.n	804a182 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 804a16e:	2208      	movs	r2, #8
 804a170:	4909      	ldr	r1, [pc, #36]	@ (804a198 <Get_SerialNum+0x50>)
 804a172:	68f8      	ldr	r0, [r7, #12]
 804a174:	f000 f814 	bl	804a1a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 804a178:	2204      	movs	r2, #4
 804a17a:	4908      	ldr	r1, [pc, #32]	@ (804a19c <Get_SerialNum+0x54>)
 804a17c:	68b8      	ldr	r0, [r7, #8]
 804a17e:	f000 f80f 	bl	804a1a0 <IntToUnicode>
  }
}
 804a182:	bf00      	nop
 804a184:	3710      	adds	r7, #16
 804a186:	46bd      	mov	sp, r7
 804a188:	bd80      	pop	{r7, pc}
 804a18a:	bf00      	nop
 804a18c:	1ff1e800 	.word	0x1ff1e800
 804a190:	1ff1e804 	.word	0x1ff1e804
 804a194:	1ff1e808 	.word	0x1ff1e808
 804a198:	2400010a 	.word	0x2400010a
 804a19c:	2400011a 	.word	0x2400011a

0804a1a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 804a1a0:	b480      	push	{r7}
 804a1a2:	b087      	sub	sp, #28
 804a1a4:	af00      	add	r7, sp, #0
 804a1a6:	60f8      	str	r0, [r7, #12]
 804a1a8:	60b9      	str	r1, [r7, #8]
 804a1aa:	4613      	mov	r3, r2
 804a1ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 804a1ae:	2300      	movs	r3, #0
 804a1b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 804a1b2:	2300      	movs	r3, #0
 804a1b4:	75fb      	strb	r3, [r7, #23]
 804a1b6:	e027      	b.n	804a208 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 804a1b8:	68fb      	ldr	r3, [r7, #12]
 804a1ba:	0f1b      	lsrs	r3, r3, #28
 804a1bc:	2b09      	cmp	r3, #9
 804a1be:	d80b      	bhi.n	804a1d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 804a1c0:	68fb      	ldr	r3, [r7, #12]
 804a1c2:	0f1b      	lsrs	r3, r3, #28
 804a1c4:	b2da      	uxtb	r2, r3
 804a1c6:	7dfb      	ldrb	r3, [r7, #23]
 804a1c8:	005b      	lsls	r3, r3, #1
 804a1ca:	4619      	mov	r1, r3
 804a1cc:	68bb      	ldr	r3, [r7, #8]
 804a1ce:	440b      	add	r3, r1
 804a1d0:	3230      	adds	r2, #48	@ 0x30
 804a1d2:	b2d2      	uxtb	r2, r2
 804a1d4:	701a      	strb	r2, [r3, #0]
 804a1d6:	e00a      	b.n	804a1ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 804a1d8:	68fb      	ldr	r3, [r7, #12]
 804a1da:	0f1b      	lsrs	r3, r3, #28
 804a1dc:	b2da      	uxtb	r2, r3
 804a1de:	7dfb      	ldrb	r3, [r7, #23]
 804a1e0:	005b      	lsls	r3, r3, #1
 804a1e2:	4619      	mov	r1, r3
 804a1e4:	68bb      	ldr	r3, [r7, #8]
 804a1e6:	440b      	add	r3, r1
 804a1e8:	3237      	adds	r2, #55	@ 0x37
 804a1ea:	b2d2      	uxtb	r2, r2
 804a1ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 804a1ee:	68fb      	ldr	r3, [r7, #12]
 804a1f0:	011b      	lsls	r3, r3, #4
 804a1f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 804a1f4:	7dfb      	ldrb	r3, [r7, #23]
 804a1f6:	005b      	lsls	r3, r3, #1
 804a1f8:	3301      	adds	r3, #1
 804a1fa:	68ba      	ldr	r2, [r7, #8]
 804a1fc:	4413      	add	r3, r2
 804a1fe:	2200      	movs	r2, #0
 804a200:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 804a202:	7dfb      	ldrb	r3, [r7, #23]
 804a204:	3301      	adds	r3, #1
 804a206:	75fb      	strb	r3, [r7, #23]
 804a208:	7dfa      	ldrb	r2, [r7, #23]
 804a20a:	79fb      	ldrb	r3, [r7, #7]
 804a20c:	429a      	cmp	r2, r3
 804a20e:	d3d3      	bcc.n	804a1b8 <IntToUnicode+0x18>
  }
}
 804a210:	bf00      	nop
 804a212:	bf00      	nop
 804a214:	371c      	adds	r7, #28
 804a216:	46bd      	mov	sp, r7
 804a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a21c:	4770      	bx	lr
	...

0804a220 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 804a220:	b580      	push	{r7, lr}
 804a222:	b0c2      	sub	sp, #264	@ 0x108
 804a224:	af00      	add	r7, sp, #0
 804a226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 804a22a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 804a22e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804a230:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804a234:	2200      	movs	r2, #0
 804a236:	601a      	str	r2, [r3, #0]
 804a238:	605a      	str	r2, [r3, #4]
 804a23a:	609a      	str	r2, [r3, #8]
 804a23c:	60da      	str	r2, [r3, #12]
 804a23e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 804a240:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 804a244:	22c8      	movs	r2, #200	@ 0xc8
 804a246:	2100      	movs	r1, #0
 804a248:	4618      	mov	r0, r3
 804a24a:	f000 fcda 	bl	804ac02 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 804a24e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 804a252:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 804a256:	681b      	ldr	r3, [r3, #0]
 804a258:	681b      	ldr	r3, [r3, #0]
 804a25a:	4a7d      	ldr	r2, [pc, #500]	@ (804a450 <HAL_PCD_MspInit+0x230>)
 804a25c:	4293      	cmp	r3, r2
 804a25e:	f040 80f2 	bne.w	804a446 <HAL_PCD_MspInit+0x226>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 804a262:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 804a266:	f04f 0300 	mov.w	r3, #0
 804a26a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 804a26e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 804a272:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804a276:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 804a27a:	4618      	mov	r0, r3
 804a27c:	f7f9 febe 	bl	8043ffc <HAL_RCCEx_PeriphCLKConfig>
 804a280:	4603      	mov	r3, r0
 804a282:	2b00      	cmp	r3, #0
 804a284:	d001      	beq.n	804a28a <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 804a286:	f7f6 fcc3 	bl	8040c10 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 804a28a:	f7f8 fe57 	bl	8042f3c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 804a28e:	4b71      	ldr	r3, [pc, #452]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a294:	4a6f      	ldr	r2, [pc, #444]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a296:	f043 0302 	orr.w	r3, r3, #2
 804a29a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804a29e:	4b6d      	ldr	r3, [pc, #436]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a2a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a2a4:	f003 0302 	and.w	r3, r3, #2
 804a2a8:	627b      	str	r3, [r7, #36]	@ 0x24
 804a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 804a2ac:	4b69      	ldr	r3, [pc, #420]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a2ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a2b2:	4a68      	ldr	r2, [pc, #416]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a2b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 804a2b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804a2bc:	4b65      	ldr	r3, [pc, #404]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a2be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a2c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804a2c6:	623b      	str	r3, [r7, #32]
 804a2c8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804a2ca:	4b62      	ldr	r3, [pc, #392]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a2cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a2d0:	4a60      	ldr	r2, [pc, #384]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a2d2:	f043 0304 	orr.w	r3, r3, #4
 804a2d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804a2da:	4b5e      	ldr	r3, [pc, #376]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a2dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a2e0:	f003 0304 	and.w	r3, r3, #4
 804a2e4:	61fb      	str	r3, [r7, #28]
 804a2e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 804a2e8:	4b5a      	ldr	r3, [pc, #360]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a2ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a2ee:	4a59      	ldr	r2, [pc, #356]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a2f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 804a2f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804a2f8:	4b56      	ldr	r3, [pc, #344]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a2fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a2fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 804a302:	61bb      	str	r3, [r7, #24]
 804a304:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 804a306:	4b53      	ldr	r3, [pc, #332]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a30c:	4a51      	ldr	r2, [pc, #324]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a30e:	f043 0301 	orr.w	r3, r3, #1
 804a312:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804a316:	4b4f      	ldr	r3, [pc, #316]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804a31c:	f003 0301 	and.w	r3, r3, #1
 804a320:	617b      	str	r3, [r7, #20]
 804a322:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 804a324:	f643 4323 	movw	r3, #15395	@ 0x3c23
 804a328:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804a32c:	2302      	movs	r3, #2
 804a32e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804a332:	2300      	movs	r3, #0
 804a334:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804a338:	2302      	movs	r3, #2
 804a33a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804a33e:	230a      	movs	r3, #10
 804a340:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804a344:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804a348:	4619      	mov	r1, r3
 804a34a:	4843      	ldr	r0, [pc, #268]	@ (804a458 <HAL_PCD_MspInit+0x238>)
 804a34c:	f7f7 f902 	bl	8041554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 804a350:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 804a354:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804a358:	2302      	movs	r3, #2
 804a35a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804a35e:	2300      	movs	r3, #0
 804a360:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804a364:	2302      	movs	r3, #2
 804a366:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804a36a:	230a      	movs	r3, #10
 804a36c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 804a370:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804a374:	4619      	mov	r1, r3
 804a376:	4839      	ldr	r0, [pc, #228]	@ (804a45c <HAL_PCD_MspInit+0x23c>)
 804a378:	f7f7 f8ec 	bl	8041554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 804a37c:	2301      	movs	r3, #1
 804a37e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804a382:	2302      	movs	r3, #2
 804a384:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804a388:	2300      	movs	r3, #0
 804a38a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804a38e:	2302      	movs	r3, #2
 804a390:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804a394:	230a      	movs	r3, #10
 804a396:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 804a39a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804a39e:	4619      	mov	r1, r3
 804a3a0:	482f      	ldr	r0, [pc, #188]	@ (804a460 <HAL_PCD_MspInit+0x240>)
 804a3a2:	f7f7 f8d7 	bl	8041554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 804a3a6:	2310      	movs	r3, #16
 804a3a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804a3ac:	2302      	movs	r3, #2
 804a3ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804a3b2:	2300      	movs	r3, #0
 804a3b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804a3b8:	2302      	movs	r3, #2
 804a3ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804a3be:	230a      	movs	r3, #10
 804a3c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 804a3c4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804a3c8:	4619      	mov	r1, r3
 804a3ca:	4826      	ldr	r0, [pc, #152]	@ (804a464 <HAL_PCD_MspInit+0x244>)
 804a3cc:	f7f7 f8c2 	bl	8041554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 804a3d0:	2328      	movs	r3, #40	@ 0x28
 804a3d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804a3d6:	2302      	movs	r3, #2
 804a3d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804a3dc:	2300      	movs	r3, #0
 804a3de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804a3e2:	2302      	movs	r3, #2
 804a3e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804a3e8:	230a      	movs	r3, #10
 804a3ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804a3ee:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804a3f2:	4619      	mov	r1, r3
 804a3f4:	481c      	ldr	r0, [pc, #112]	@ (804a468 <HAL_PCD_MspInit+0x248>)
 804a3f6:	f7f7 f8ad 	bl	8041554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 804a3fa:	4b16      	ldr	r3, [pc, #88]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a3fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804a400:	4a14      	ldr	r2, [pc, #80]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a402:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 804a406:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 804a40a:	4b12      	ldr	r3, [pc, #72]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a40c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804a410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804a414:	613b      	str	r3, [r7, #16]
 804a416:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 804a418:	4b0e      	ldr	r3, [pc, #56]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a41a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804a41e:	4a0d      	ldr	r2, [pc, #52]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a420:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 804a424:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 804a428:	4b0a      	ldr	r3, [pc, #40]	@ (804a454 <HAL_PCD_MspInit+0x234>)
 804a42a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804a42e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 804a432:	60fb      	str	r3, [r7, #12]
 804a434:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 804a436:	2200      	movs	r2, #0
 804a438:	2100      	movs	r1, #0
 804a43a:	204d      	movs	r0, #77	@ 0x4d
 804a43c:	f7f6 ff63 	bl	8041306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 804a440:	204d      	movs	r0, #77	@ 0x4d
 804a442:	f7f6 ff7a 	bl	804133a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 804a446:	bf00      	nop
 804a448:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 804a44c:	46bd      	mov	sp, r7
 804a44e:	bd80      	pop	{r7, pc}
 804a450:	40040000 	.word	0x40040000
 804a454:	58024400 	.word	0x58024400
 804a458:	58020400 	.word	0x58020400
 804a45c:	58022000 	.word	0x58022000
 804a460:	58020800 	.word	0x58020800
 804a464:	58021c00 	.word	0x58021c00
 804a468:	58020000 	.word	0x58020000

0804a46c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a46c:	b580      	push	{r7, lr}
 804a46e:	b082      	sub	sp, #8
 804a470:	af00      	add	r7, sp, #0
 804a472:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 804a474:	687b      	ldr	r3, [r7, #4]
 804a476:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 804a47a:	687b      	ldr	r3, [r7, #4]
 804a47c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 804a480:	4619      	mov	r1, r3
 804a482:	4610      	mov	r0, r2
 804a484:	f7fe f90c 	bl	80486a0 <USBD_LL_SetupStage>
}
 804a488:	bf00      	nop
 804a48a:	3708      	adds	r7, #8
 804a48c:	46bd      	mov	sp, r7
 804a48e:	bd80      	pop	{r7, pc}

0804a490 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a490:	b580      	push	{r7, lr}
 804a492:	b082      	sub	sp, #8
 804a494:	af00      	add	r7, sp, #0
 804a496:	6078      	str	r0, [r7, #4]
 804a498:	460b      	mov	r3, r1
 804a49a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 804a49c:	687b      	ldr	r3, [r7, #4]
 804a49e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 804a4a2:	78fa      	ldrb	r2, [r7, #3]
 804a4a4:	6879      	ldr	r1, [r7, #4]
 804a4a6:	4613      	mov	r3, r2
 804a4a8:	00db      	lsls	r3, r3, #3
 804a4aa:	4413      	add	r3, r2
 804a4ac:	009b      	lsls	r3, r3, #2
 804a4ae:	440b      	add	r3, r1
 804a4b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 804a4b4:	681a      	ldr	r2, [r3, #0]
 804a4b6:	78fb      	ldrb	r3, [r7, #3]
 804a4b8:	4619      	mov	r1, r3
 804a4ba:	f7fe f946 	bl	804874a <USBD_LL_DataOutStage>
}
 804a4be:	bf00      	nop
 804a4c0:	3708      	adds	r7, #8
 804a4c2:	46bd      	mov	sp, r7
 804a4c4:	bd80      	pop	{r7, pc}

0804a4c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a4c6:	b580      	push	{r7, lr}
 804a4c8:	b082      	sub	sp, #8
 804a4ca:	af00      	add	r7, sp, #0
 804a4cc:	6078      	str	r0, [r7, #4]
 804a4ce:	460b      	mov	r3, r1
 804a4d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 804a4d2:	687b      	ldr	r3, [r7, #4]
 804a4d4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 804a4d8:	78fa      	ldrb	r2, [r7, #3]
 804a4da:	6879      	ldr	r1, [r7, #4]
 804a4dc:	4613      	mov	r3, r2
 804a4de:	00db      	lsls	r3, r3, #3
 804a4e0:	4413      	add	r3, r2
 804a4e2:	009b      	lsls	r3, r3, #2
 804a4e4:	440b      	add	r3, r1
 804a4e6:	3320      	adds	r3, #32
 804a4e8:	681a      	ldr	r2, [r3, #0]
 804a4ea:	78fb      	ldrb	r3, [r7, #3]
 804a4ec:	4619      	mov	r1, r3
 804a4ee:	f7fe f9df 	bl	80488b0 <USBD_LL_DataInStage>
}
 804a4f2:	bf00      	nop
 804a4f4:	3708      	adds	r7, #8
 804a4f6:	46bd      	mov	sp, r7
 804a4f8:	bd80      	pop	{r7, pc}

0804a4fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a4fa:	b580      	push	{r7, lr}
 804a4fc:	b082      	sub	sp, #8
 804a4fe:	af00      	add	r7, sp, #0
 804a500:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 804a502:	687b      	ldr	r3, [r7, #4]
 804a504:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a508:	4618      	mov	r0, r3
 804a50a:	f7fe fb19 	bl	8048b40 <USBD_LL_SOF>
}
 804a50e:	bf00      	nop
 804a510:	3708      	adds	r7, #8
 804a512:	46bd      	mov	sp, r7
 804a514:	bd80      	pop	{r7, pc}

0804a516 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a516:	b580      	push	{r7, lr}
 804a518:	b084      	sub	sp, #16
 804a51a:	af00      	add	r7, sp, #0
 804a51c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 804a51e:	2301      	movs	r3, #1
 804a520:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 804a522:	687b      	ldr	r3, [r7, #4]
 804a524:	79db      	ldrb	r3, [r3, #7]
 804a526:	2b00      	cmp	r3, #0
 804a528:	d102      	bne.n	804a530 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 804a52a:	2300      	movs	r3, #0
 804a52c:	73fb      	strb	r3, [r7, #15]
 804a52e:	e008      	b.n	804a542 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 804a530:	687b      	ldr	r3, [r7, #4]
 804a532:	79db      	ldrb	r3, [r3, #7]
 804a534:	2b02      	cmp	r3, #2
 804a536:	d102      	bne.n	804a53e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 804a538:	2301      	movs	r3, #1
 804a53a:	73fb      	strb	r3, [r7, #15]
 804a53c:	e001      	b.n	804a542 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 804a53e:	f7f6 fb67 	bl	8040c10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 804a542:	687b      	ldr	r3, [r7, #4]
 804a544:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a548:	7bfa      	ldrb	r2, [r7, #15]
 804a54a:	4611      	mov	r1, r2
 804a54c:	4618      	mov	r0, r3
 804a54e:	f7fe fab3 	bl	8048ab8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 804a552:	687b      	ldr	r3, [r7, #4]
 804a554:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a558:	4618      	mov	r0, r3
 804a55a:	f7fe fa5b 	bl	8048a14 <USBD_LL_Reset>
}
 804a55e:	bf00      	nop
 804a560:	3710      	adds	r7, #16
 804a562:	46bd      	mov	sp, r7
 804a564:	bd80      	pop	{r7, pc}
	...

0804a568 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a568:	b580      	push	{r7, lr}
 804a56a:	b082      	sub	sp, #8
 804a56c:	af00      	add	r7, sp, #0
 804a56e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 804a570:	687b      	ldr	r3, [r7, #4]
 804a572:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a576:	4618      	mov	r0, r3
 804a578:	f7fe faae 	bl	8048ad8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 804a57c:	687b      	ldr	r3, [r7, #4]
 804a57e:	681b      	ldr	r3, [r3, #0]
 804a580:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 804a584:	681b      	ldr	r3, [r3, #0]
 804a586:	687a      	ldr	r2, [r7, #4]
 804a588:	6812      	ldr	r2, [r2, #0]
 804a58a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 804a58e:	f043 0301 	orr.w	r3, r3, #1
 804a592:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 804a594:	687b      	ldr	r3, [r7, #4]
 804a596:	7adb      	ldrb	r3, [r3, #11]
 804a598:	2b00      	cmp	r3, #0
 804a59a:	d005      	beq.n	804a5a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 804a59c:	4b04      	ldr	r3, [pc, #16]	@ (804a5b0 <HAL_PCD_SuspendCallback+0x48>)
 804a59e:	691b      	ldr	r3, [r3, #16]
 804a5a0:	4a03      	ldr	r2, [pc, #12]	@ (804a5b0 <HAL_PCD_SuspendCallback+0x48>)
 804a5a2:	f043 0306 	orr.w	r3, r3, #6
 804a5a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 804a5a8:	bf00      	nop
 804a5aa:	3708      	adds	r7, #8
 804a5ac:	46bd      	mov	sp, r7
 804a5ae:	bd80      	pop	{r7, pc}
 804a5b0:	e000ed00 	.word	0xe000ed00

0804a5b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a5b4:	b580      	push	{r7, lr}
 804a5b6:	b082      	sub	sp, #8
 804a5b8:	af00      	add	r7, sp, #0
 804a5ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 804a5bc:	687b      	ldr	r3, [r7, #4]
 804a5be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a5c2:	4618      	mov	r0, r3
 804a5c4:	f7fe faa4 	bl	8048b10 <USBD_LL_Resume>
}
 804a5c8:	bf00      	nop
 804a5ca:	3708      	adds	r7, #8
 804a5cc:	46bd      	mov	sp, r7
 804a5ce:	bd80      	pop	{r7, pc}

0804a5d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a5d0:	b580      	push	{r7, lr}
 804a5d2:	b082      	sub	sp, #8
 804a5d4:	af00      	add	r7, sp, #0
 804a5d6:	6078      	str	r0, [r7, #4]
 804a5d8:	460b      	mov	r3, r1
 804a5da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 804a5dc:	687b      	ldr	r3, [r7, #4]
 804a5de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a5e2:	78fa      	ldrb	r2, [r7, #3]
 804a5e4:	4611      	mov	r1, r2
 804a5e6:	4618      	mov	r0, r3
 804a5e8:	f7fe fafc 	bl	8048be4 <USBD_LL_IsoOUTIncomplete>
}
 804a5ec:	bf00      	nop
 804a5ee:	3708      	adds	r7, #8
 804a5f0:	46bd      	mov	sp, r7
 804a5f2:	bd80      	pop	{r7, pc}

0804a5f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a5f4:	b580      	push	{r7, lr}
 804a5f6:	b082      	sub	sp, #8
 804a5f8:	af00      	add	r7, sp, #0
 804a5fa:	6078      	str	r0, [r7, #4]
 804a5fc:	460b      	mov	r3, r1
 804a5fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 804a600:	687b      	ldr	r3, [r7, #4]
 804a602:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a606:	78fa      	ldrb	r2, [r7, #3]
 804a608:	4611      	mov	r1, r2
 804a60a:	4618      	mov	r0, r3
 804a60c:	f7fe fab8 	bl	8048b80 <USBD_LL_IsoINIncomplete>
}
 804a610:	bf00      	nop
 804a612:	3708      	adds	r7, #8
 804a614:	46bd      	mov	sp, r7
 804a616:	bd80      	pop	{r7, pc}

0804a618 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a618:	b580      	push	{r7, lr}
 804a61a:	b082      	sub	sp, #8
 804a61c:	af00      	add	r7, sp, #0
 804a61e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 804a620:	687b      	ldr	r3, [r7, #4]
 804a622:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a626:	4618      	mov	r0, r3
 804a628:	f7fe fb0e 	bl	8048c48 <USBD_LL_DevConnected>
}
 804a62c:	bf00      	nop
 804a62e:	3708      	adds	r7, #8
 804a630:	46bd      	mov	sp, r7
 804a632:	bd80      	pop	{r7, pc}

0804a634 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804a634:	b580      	push	{r7, lr}
 804a636:	b082      	sub	sp, #8
 804a638:	af00      	add	r7, sp, #0
 804a63a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 804a63c:	687b      	ldr	r3, [r7, #4]
 804a63e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804a642:	4618      	mov	r0, r3
 804a644:	f7fe fb0b 	bl	8048c5e <USBD_LL_DevDisconnected>
}
 804a648:	bf00      	nop
 804a64a:	3708      	adds	r7, #8
 804a64c:	46bd      	mov	sp, r7
 804a64e:	bd80      	pop	{r7, pc}

0804a650 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 804a650:	b580      	push	{r7, lr}
 804a652:	b082      	sub	sp, #8
 804a654:	af00      	add	r7, sp, #0
 804a656:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 804a658:	687b      	ldr	r3, [r7, #4]
 804a65a:	781b      	ldrb	r3, [r3, #0]
 804a65c:	2b01      	cmp	r3, #1
 804a65e:	d140      	bne.n	804a6e2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 804a660:	4a22      	ldr	r2, [pc, #136]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a662:	687b      	ldr	r3, [r7, #4]
 804a664:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 804a668:	687b      	ldr	r3, [r7, #4]
 804a66a:	4a20      	ldr	r2, [pc, #128]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a66c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 804a670:	4b1e      	ldr	r3, [pc, #120]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a672:	4a1f      	ldr	r2, [pc, #124]	@ (804a6f0 <USBD_LL_Init+0xa0>)
 804a674:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 804a676:	4b1d      	ldr	r3, [pc, #116]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a678:	2209      	movs	r2, #9
 804a67a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 804a67c:	4b1b      	ldr	r3, [pc, #108]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a67e:	2200      	movs	r2, #0
 804a680:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 804a682:	4b1a      	ldr	r3, [pc, #104]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a684:	2200      	movs	r2, #0
 804a686:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 804a688:	4b18      	ldr	r3, [pc, #96]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a68a:	2201      	movs	r2, #1
 804a68c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 804a68e:	4b17      	ldr	r3, [pc, #92]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a690:	2200      	movs	r2, #0
 804a692:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 804a694:	4b15      	ldr	r3, [pc, #84]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a696:	2200      	movs	r2, #0
 804a698:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 804a69a:	4b14      	ldr	r3, [pc, #80]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a69c:	2200      	movs	r2, #0
 804a69e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 804a6a0:	4b12      	ldr	r3, [pc, #72]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a6a2:	2200      	movs	r2, #0
 804a6a4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 804a6a6:	4b11      	ldr	r3, [pc, #68]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a6a8:	2200      	movs	r2, #0
 804a6aa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 804a6ac:	4b0f      	ldr	r3, [pc, #60]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a6ae:	2200      	movs	r2, #0
 804a6b0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 804a6b2:	480e      	ldr	r0, [pc, #56]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a6b4:	f7f7 f960 	bl	8041978 <HAL_PCD_Init>
 804a6b8:	4603      	mov	r3, r0
 804a6ba:	2b00      	cmp	r3, #0
 804a6bc:	d001      	beq.n	804a6c2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 804a6be:	f7f6 faa7 	bl	8040c10 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 804a6c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 804a6c6:	4809      	ldr	r0, [pc, #36]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a6c8:	f7f8 fb9d 	bl	8042e06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 804a6cc:	2280      	movs	r2, #128	@ 0x80
 804a6ce:	2100      	movs	r1, #0
 804a6d0:	4806      	ldr	r0, [pc, #24]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a6d2:	f7f8 fb51 	bl	8042d78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 804a6d6:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 804a6da:	2101      	movs	r1, #1
 804a6dc:	4803      	ldr	r0, [pc, #12]	@ (804a6ec <USBD_LL_Init+0x9c>)
 804a6de:	f7f8 fb4b 	bl	8042d78 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 804a6e2:	2300      	movs	r3, #0
}
 804a6e4:	4618      	mov	r0, r3
 804a6e6:	3708      	adds	r7, #8
 804a6e8:	46bd      	mov	sp, r7
 804a6ea:	bd80      	pop	{r7, pc}
 804a6ec:	2400073c 	.word	0x2400073c
 804a6f0:	40040000 	.word	0x40040000

0804a6f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 804a6f4:	b580      	push	{r7, lr}
 804a6f6:	b084      	sub	sp, #16
 804a6f8:	af00      	add	r7, sp, #0
 804a6fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804a6fc:	2300      	movs	r3, #0
 804a6fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804a700:	2300      	movs	r3, #0
 804a702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 804a704:	687b      	ldr	r3, [r7, #4]
 804a706:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804a70a:	4618      	mov	r0, r3
 804a70c:	f7f7 fa40 	bl	8041b90 <HAL_PCD_Start>
 804a710:	4603      	mov	r3, r0
 804a712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804a714:	7bfb      	ldrb	r3, [r7, #15]
 804a716:	4618      	mov	r0, r3
 804a718:	f000 f930 	bl	804a97c <USBD_Get_USB_Status>
 804a71c:	4603      	mov	r3, r0
 804a71e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804a720:	7bbb      	ldrb	r3, [r7, #14]
}
 804a722:	4618      	mov	r0, r3
 804a724:	3710      	adds	r7, #16
 804a726:	46bd      	mov	sp, r7
 804a728:	bd80      	pop	{r7, pc}

0804a72a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 804a72a:	b580      	push	{r7, lr}
 804a72c:	b084      	sub	sp, #16
 804a72e:	af00      	add	r7, sp, #0
 804a730:	6078      	str	r0, [r7, #4]
 804a732:	4608      	mov	r0, r1
 804a734:	4611      	mov	r1, r2
 804a736:	461a      	mov	r2, r3
 804a738:	4603      	mov	r3, r0
 804a73a:	70fb      	strb	r3, [r7, #3]
 804a73c:	460b      	mov	r3, r1
 804a73e:	70bb      	strb	r3, [r7, #2]
 804a740:	4613      	mov	r3, r2
 804a742:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804a744:	2300      	movs	r3, #0
 804a746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804a748:	2300      	movs	r3, #0
 804a74a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 804a74c:	687b      	ldr	r3, [r7, #4]
 804a74e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 804a752:	78bb      	ldrb	r3, [r7, #2]
 804a754:	883a      	ldrh	r2, [r7, #0]
 804a756:	78f9      	ldrb	r1, [r7, #3]
 804a758:	f7f7 ff41 	bl	80425de <HAL_PCD_EP_Open>
 804a75c:	4603      	mov	r3, r0
 804a75e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804a760:	7bfb      	ldrb	r3, [r7, #15]
 804a762:	4618      	mov	r0, r3
 804a764:	f000 f90a 	bl	804a97c <USBD_Get_USB_Status>
 804a768:	4603      	mov	r3, r0
 804a76a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804a76c:	7bbb      	ldrb	r3, [r7, #14]
}
 804a76e:	4618      	mov	r0, r3
 804a770:	3710      	adds	r7, #16
 804a772:	46bd      	mov	sp, r7
 804a774:	bd80      	pop	{r7, pc}

0804a776 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804a776:	b580      	push	{r7, lr}
 804a778:	b084      	sub	sp, #16
 804a77a:	af00      	add	r7, sp, #0
 804a77c:	6078      	str	r0, [r7, #4]
 804a77e:	460b      	mov	r3, r1
 804a780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804a782:	2300      	movs	r3, #0
 804a784:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804a786:	2300      	movs	r3, #0
 804a788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 804a78a:	687b      	ldr	r3, [r7, #4]
 804a78c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804a790:	78fa      	ldrb	r2, [r7, #3]
 804a792:	4611      	mov	r1, r2
 804a794:	4618      	mov	r0, r3
 804a796:	f7f7 ff8c 	bl	80426b2 <HAL_PCD_EP_Close>
 804a79a:	4603      	mov	r3, r0
 804a79c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804a79e:	7bfb      	ldrb	r3, [r7, #15]
 804a7a0:	4618      	mov	r0, r3
 804a7a2:	f000 f8eb 	bl	804a97c <USBD_Get_USB_Status>
 804a7a6:	4603      	mov	r3, r0
 804a7a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804a7aa:	7bbb      	ldrb	r3, [r7, #14]
}
 804a7ac:	4618      	mov	r0, r3
 804a7ae:	3710      	adds	r7, #16
 804a7b0:	46bd      	mov	sp, r7
 804a7b2:	bd80      	pop	{r7, pc}

0804a7b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804a7b4:	b580      	push	{r7, lr}
 804a7b6:	b084      	sub	sp, #16
 804a7b8:	af00      	add	r7, sp, #0
 804a7ba:	6078      	str	r0, [r7, #4]
 804a7bc:	460b      	mov	r3, r1
 804a7be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804a7c0:	2300      	movs	r3, #0
 804a7c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804a7c4:	2300      	movs	r3, #0
 804a7c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 804a7c8:	687b      	ldr	r3, [r7, #4]
 804a7ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804a7ce:	78fa      	ldrb	r2, [r7, #3]
 804a7d0:	4611      	mov	r1, r2
 804a7d2:	4618      	mov	r0, r3
 804a7d4:	f7f8 f82c 	bl	8042830 <HAL_PCD_EP_SetStall>
 804a7d8:	4603      	mov	r3, r0
 804a7da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804a7dc:	7bfb      	ldrb	r3, [r7, #15]
 804a7de:	4618      	mov	r0, r3
 804a7e0:	f000 f8cc 	bl	804a97c <USBD_Get_USB_Status>
 804a7e4:	4603      	mov	r3, r0
 804a7e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804a7e8:	7bbb      	ldrb	r3, [r7, #14]
}
 804a7ea:	4618      	mov	r0, r3
 804a7ec:	3710      	adds	r7, #16
 804a7ee:	46bd      	mov	sp, r7
 804a7f0:	bd80      	pop	{r7, pc}

0804a7f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804a7f2:	b580      	push	{r7, lr}
 804a7f4:	b084      	sub	sp, #16
 804a7f6:	af00      	add	r7, sp, #0
 804a7f8:	6078      	str	r0, [r7, #4]
 804a7fa:	460b      	mov	r3, r1
 804a7fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804a7fe:	2300      	movs	r3, #0
 804a800:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804a802:	2300      	movs	r3, #0
 804a804:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 804a806:	687b      	ldr	r3, [r7, #4]
 804a808:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804a80c:	78fa      	ldrb	r2, [r7, #3]
 804a80e:	4611      	mov	r1, r2
 804a810:	4618      	mov	r0, r3
 804a812:	f7f8 f870 	bl	80428f6 <HAL_PCD_EP_ClrStall>
 804a816:	4603      	mov	r3, r0
 804a818:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804a81a:	7bfb      	ldrb	r3, [r7, #15]
 804a81c:	4618      	mov	r0, r3
 804a81e:	f000 f8ad 	bl	804a97c <USBD_Get_USB_Status>
 804a822:	4603      	mov	r3, r0
 804a824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804a826:	7bbb      	ldrb	r3, [r7, #14]
}
 804a828:	4618      	mov	r0, r3
 804a82a:	3710      	adds	r7, #16
 804a82c:	46bd      	mov	sp, r7
 804a82e:	bd80      	pop	{r7, pc}

0804a830 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804a830:	b480      	push	{r7}
 804a832:	b085      	sub	sp, #20
 804a834:	af00      	add	r7, sp, #0
 804a836:	6078      	str	r0, [r7, #4]
 804a838:	460b      	mov	r3, r1
 804a83a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 804a83c:	687b      	ldr	r3, [r7, #4]
 804a83e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804a842:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 804a844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 804a848:	2b00      	cmp	r3, #0
 804a84a:	da0b      	bge.n	804a864 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 804a84c:	78fb      	ldrb	r3, [r7, #3]
 804a84e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804a852:	68f9      	ldr	r1, [r7, #12]
 804a854:	4613      	mov	r3, r2
 804a856:	00db      	lsls	r3, r3, #3
 804a858:	4413      	add	r3, r2
 804a85a:	009b      	lsls	r3, r3, #2
 804a85c:	440b      	add	r3, r1
 804a85e:	3316      	adds	r3, #22
 804a860:	781b      	ldrb	r3, [r3, #0]
 804a862:	e00b      	b.n	804a87c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 804a864:	78fb      	ldrb	r3, [r7, #3]
 804a866:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804a86a:	68f9      	ldr	r1, [r7, #12]
 804a86c:	4613      	mov	r3, r2
 804a86e:	00db      	lsls	r3, r3, #3
 804a870:	4413      	add	r3, r2
 804a872:	009b      	lsls	r3, r3, #2
 804a874:	440b      	add	r3, r1
 804a876:	f203 2356 	addw	r3, r3, #598	@ 0x256
 804a87a:	781b      	ldrb	r3, [r3, #0]
  }
}
 804a87c:	4618      	mov	r0, r3
 804a87e:	3714      	adds	r7, #20
 804a880:	46bd      	mov	sp, r7
 804a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a886:	4770      	bx	lr

0804a888 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 804a888:	b580      	push	{r7, lr}
 804a88a:	b084      	sub	sp, #16
 804a88c:	af00      	add	r7, sp, #0
 804a88e:	6078      	str	r0, [r7, #4]
 804a890:	460b      	mov	r3, r1
 804a892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804a894:	2300      	movs	r3, #0
 804a896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804a898:	2300      	movs	r3, #0
 804a89a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 804a89c:	687b      	ldr	r3, [r7, #4]
 804a89e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804a8a2:	78fa      	ldrb	r2, [r7, #3]
 804a8a4:	4611      	mov	r1, r2
 804a8a6:	4618      	mov	r0, r3
 804a8a8:	f7f7 fe75 	bl	8042596 <HAL_PCD_SetAddress>
 804a8ac:	4603      	mov	r3, r0
 804a8ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804a8b0:	7bfb      	ldrb	r3, [r7, #15]
 804a8b2:	4618      	mov	r0, r3
 804a8b4:	f000 f862 	bl	804a97c <USBD_Get_USB_Status>
 804a8b8:	4603      	mov	r3, r0
 804a8ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804a8bc:	7bbb      	ldrb	r3, [r7, #14]
}
 804a8be:	4618      	mov	r0, r3
 804a8c0:	3710      	adds	r7, #16
 804a8c2:	46bd      	mov	sp, r7
 804a8c4:	bd80      	pop	{r7, pc}

0804a8c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 804a8c6:	b580      	push	{r7, lr}
 804a8c8:	b086      	sub	sp, #24
 804a8ca:	af00      	add	r7, sp, #0
 804a8cc:	60f8      	str	r0, [r7, #12]
 804a8ce:	607a      	str	r2, [r7, #4]
 804a8d0:	603b      	str	r3, [r7, #0]
 804a8d2:	460b      	mov	r3, r1
 804a8d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804a8d6:	2300      	movs	r3, #0
 804a8d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804a8da:	2300      	movs	r3, #0
 804a8dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 804a8de:	68fb      	ldr	r3, [r7, #12]
 804a8e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 804a8e4:	7af9      	ldrb	r1, [r7, #11]
 804a8e6:	683b      	ldr	r3, [r7, #0]
 804a8e8:	687a      	ldr	r2, [r7, #4]
 804a8ea:	f7f7 ff67 	bl	80427bc <HAL_PCD_EP_Transmit>
 804a8ee:	4603      	mov	r3, r0
 804a8f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804a8f2:	7dfb      	ldrb	r3, [r7, #23]
 804a8f4:	4618      	mov	r0, r3
 804a8f6:	f000 f841 	bl	804a97c <USBD_Get_USB_Status>
 804a8fa:	4603      	mov	r3, r0
 804a8fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 804a8fe:	7dbb      	ldrb	r3, [r7, #22]
}
 804a900:	4618      	mov	r0, r3
 804a902:	3718      	adds	r7, #24
 804a904:	46bd      	mov	sp, r7
 804a906:	bd80      	pop	{r7, pc}

0804a908 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 804a908:	b580      	push	{r7, lr}
 804a90a:	b086      	sub	sp, #24
 804a90c:	af00      	add	r7, sp, #0
 804a90e:	60f8      	str	r0, [r7, #12]
 804a910:	607a      	str	r2, [r7, #4]
 804a912:	603b      	str	r3, [r7, #0]
 804a914:	460b      	mov	r3, r1
 804a916:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804a918:	2300      	movs	r3, #0
 804a91a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804a91c:	2300      	movs	r3, #0
 804a91e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 804a920:	68fb      	ldr	r3, [r7, #12]
 804a922:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 804a926:	7af9      	ldrb	r1, [r7, #11]
 804a928:	683b      	ldr	r3, [r7, #0]
 804a92a:	687a      	ldr	r2, [r7, #4]
 804a92c:	f7f7 ff0b 	bl	8042746 <HAL_PCD_EP_Receive>
 804a930:	4603      	mov	r3, r0
 804a932:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804a934:	7dfb      	ldrb	r3, [r7, #23]
 804a936:	4618      	mov	r0, r3
 804a938:	f000 f820 	bl	804a97c <USBD_Get_USB_Status>
 804a93c:	4603      	mov	r3, r0
 804a93e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 804a940:	7dbb      	ldrb	r3, [r7, #22]
}
 804a942:	4618      	mov	r0, r3
 804a944:	3718      	adds	r7, #24
 804a946:	46bd      	mov	sp, r7
 804a948:	bd80      	pop	{r7, pc}
	...

0804a94c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 804a94c:	b480      	push	{r7}
 804a94e:	b083      	sub	sp, #12
 804a950:	af00      	add	r7, sp, #0
 804a952:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 804a954:	4b03      	ldr	r3, [pc, #12]	@ (804a964 <USBD_static_malloc+0x18>)
}
 804a956:	4618      	mov	r0, r3
 804a958:	370c      	adds	r7, #12
 804a95a:	46bd      	mov	sp, r7
 804a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a960:	4770      	bx	lr
 804a962:	bf00      	nop
 804a964:	24000c20 	.word	0x24000c20

0804a968 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 804a968:	b480      	push	{r7}
 804a96a:	b083      	sub	sp, #12
 804a96c:	af00      	add	r7, sp, #0
 804a96e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 804a970:	bf00      	nop
 804a972:	370c      	adds	r7, #12
 804a974:	46bd      	mov	sp, r7
 804a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a97a:	4770      	bx	lr

0804a97c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 804a97c:	b480      	push	{r7}
 804a97e:	b085      	sub	sp, #20
 804a980:	af00      	add	r7, sp, #0
 804a982:	4603      	mov	r3, r0
 804a984:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804a986:	2300      	movs	r3, #0
 804a988:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 804a98a:	79fb      	ldrb	r3, [r7, #7]
 804a98c:	2b03      	cmp	r3, #3
 804a98e:	d817      	bhi.n	804a9c0 <USBD_Get_USB_Status+0x44>
 804a990:	a201      	add	r2, pc, #4	@ (adr r2, 804a998 <USBD_Get_USB_Status+0x1c>)
 804a992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a996:	bf00      	nop
 804a998:	0804a9a9 	.word	0x0804a9a9
 804a99c:	0804a9af 	.word	0x0804a9af
 804a9a0:	0804a9b5 	.word	0x0804a9b5
 804a9a4:	0804a9bb 	.word	0x0804a9bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 804a9a8:	2300      	movs	r3, #0
 804a9aa:	73fb      	strb	r3, [r7, #15]
    break;
 804a9ac:	e00b      	b.n	804a9c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 804a9ae:	2303      	movs	r3, #3
 804a9b0:	73fb      	strb	r3, [r7, #15]
    break;
 804a9b2:	e008      	b.n	804a9c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 804a9b4:	2301      	movs	r3, #1
 804a9b6:	73fb      	strb	r3, [r7, #15]
    break;
 804a9b8:	e005      	b.n	804a9c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 804a9ba:	2303      	movs	r3, #3
 804a9bc:	73fb      	strb	r3, [r7, #15]
    break;
 804a9be:	e002      	b.n	804a9c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 804a9c0:	2303      	movs	r3, #3
 804a9c2:	73fb      	strb	r3, [r7, #15]
    break;
 804a9c4:	bf00      	nop
  }
  return usb_status;
 804a9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 804a9c8:	4618      	mov	r0, r3
 804a9ca:	3714      	adds	r7, #20
 804a9cc:	46bd      	mov	sp, r7
 804a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a9d2:	4770      	bx	lr

0804a9d4 <std>:
 804a9d4:	2300      	movs	r3, #0
 804a9d6:	b510      	push	{r4, lr}
 804a9d8:	4604      	mov	r4, r0
 804a9da:	e9c0 3300 	strd	r3, r3, [r0]
 804a9de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804a9e2:	6083      	str	r3, [r0, #8]
 804a9e4:	8181      	strh	r1, [r0, #12]
 804a9e6:	6643      	str	r3, [r0, #100]	@ 0x64
 804a9e8:	81c2      	strh	r2, [r0, #14]
 804a9ea:	6183      	str	r3, [r0, #24]
 804a9ec:	4619      	mov	r1, r3
 804a9ee:	2208      	movs	r2, #8
 804a9f0:	305c      	adds	r0, #92	@ 0x5c
 804a9f2:	f000 f906 	bl	804ac02 <memset>
 804a9f6:	4b0d      	ldr	r3, [pc, #52]	@ (804aa2c <std+0x58>)
 804a9f8:	6263      	str	r3, [r4, #36]	@ 0x24
 804a9fa:	4b0d      	ldr	r3, [pc, #52]	@ (804aa30 <std+0x5c>)
 804a9fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 804a9fe:	4b0d      	ldr	r3, [pc, #52]	@ (804aa34 <std+0x60>)
 804aa00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 804aa02:	4b0d      	ldr	r3, [pc, #52]	@ (804aa38 <std+0x64>)
 804aa04:	6323      	str	r3, [r4, #48]	@ 0x30
 804aa06:	4b0d      	ldr	r3, [pc, #52]	@ (804aa3c <std+0x68>)
 804aa08:	6224      	str	r4, [r4, #32]
 804aa0a:	429c      	cmp	r4, r3
 804aa0c:	d006      	beq.n	804aa1c <std+0x48>
 804aa0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 804aa12:	4294      	cmp	r4, r2
 804aa14:	d002      	beq.n	804aa1c <std+0x48>
 804aa16:	33d0      	adds	r3, #208	@ 0xd0
 804aa18:	429c      	cmp	r4, r3
 804aa1a:	d105      	bne.n	804aa28 <std+0x54>
 804aa1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 804aa20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804aa24:	f000 b966 	b.w	804acf4 <__retarget_lock_init_recursive>
 804aa28:	bd10      	pop	{r4, pc}
 804aa2a:	bf00      	nop
 804aa2c:	0804ab7d 	.word	0x0804ab7d
 804aa30:	0804ab9f 	.word	0x0804ab9f
 804aa34:	0804abd7 	.word	0x0804abd7
 804aa38:	0804abfb 	.word	0x0804abfb
 804aa3c:	24000c34 	.word	0x24000c34

0804aa40 <stdio_exit_handler>:
 804aa40:	4a02      	ldr	r2, [pc, #8]	@ (804aa4c <stdio_exit_handler+0xc>)
 804aa42:	4903      	ldr	r1, [pc, #12]	@ (804aa50 <stdio_exit_handler+0x10>)
 804aa44:	4803      	ldr	r0, [pc, #12]	@ (804aa54 <stdio_exit_handler+0x14>)
 804aa46:	f000 b869 	b.w	804ab1c <_fwalk_sglue>
 804aa4a:	bf00      	nop
 804aa4c:	24000124 	.word	0x24000124
 804aa50:	0804b591 	.word	0x0804b591
 804aa54:	24000134 	.word	0x24000134

0804aa58 <cleanup_stdio>:
 804aa58:	6841      	ldr	r1, [r0, #4]
 804aa5a:	4b0c      	ldr	r3, [pc, #48]	@ (804aa8c <cleanup_stdio+0x34>)
 804aa5c:	4299      	cmp	r1, r3
 804aa5e:	b510      	push	{r4, lr}
 804aa60:	4604      	mov	r4, r0
 804aa62:	d001      	beq.n	804aa68 <cleanup_stdio+0x10>
 804aa64:	f000 fd94 	bl	804b590 <_fflush_r>
 804aa68:	68a1      	ldr	r1, [r4, #8]
 804aa6a:	4b09      	ldr	r3, [pc, #36]	@ (804aa90 <cleanup_stdio+0x38>)
 804aa6c:	4299      	cmp	r1, r3
 804aa6e:	d002      	beq.n	804aa76 <cleanup_stdio+0x1e>
 804aa70:	4620      	mov	r0, r4
 804aa72:	f000 fd8d 	bl	804b590 <_fflush_r>
 804aa76:	68e1      	ldr	r1, [r4, #12]
 804aa78:	4b06      	ldr	r3, [pc, #24]	@ (804aa94 <cleanup_stdio+0x3c>)
 804aa7a:	4299      	cmp	r1, r3
 804aa7c:	d004      	beq.n	804aa88 <cleanup_stdio+0x30>
 804aa7e:	4620      	mov	r0, r4
 804aa80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804aa84:	f000 bd84 	b.w	804b590 <_fflush_r>
 804aa88:	bd10      	pop	{r4, pc}
 804aa8a:	bf00      	nop
 804aa8c:	24000c34 	.word	0x24000c34
 804aa90:	24000c9c 	.word	0x24000c9c
 804aa94:	24000d04 	.word	0x24000d04

0804aa98 <global_stdio_init.part.0>:
 804aa98:	b510      	push	{r4, lr}
 804aa9a:	4b0b      	ldr	r3, [pc, #44]	@ (804aac8 <global_stdio_init.part.0+0x30>)
 804aa9c:	4c0b      	ldr	r4, [pc, #44]	@ (804aacc <global_stdio_init.part.0+0x34>)
 804aa9e:	4a0c      	ldr	r2, [pc, #48]	@ (804aad0 <global_stdio_init.part.0+0x38>)
 804aaa0:	601a      	str	r2, [r3, #0]
 804aaa2:	4620      	mov	r0, r4
 804aaa4:	2200      	movs	r2, #0
 804aaa6:	2104      	movs	r1, #4
 804aaa8:	f7ff ff94 	bl	804a9d4 <std>
 804aaac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 804aab0:	2201      	movs	r2, #1
 804aab2:	2109      	movs	r1, #9
 804aab4:	f7ff ff8e 	bl	804a9d4 <std>
 804aab8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 804aabc:	2202      	movs	r2, #2
 804aabe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804aac2:	2112      	movs	r1, #18
 804aac4:	f7ff bf86 	b.w	804a9d4 <std>
 804aac8:	24000d6c 	.word	0x24000d6c
 804aacc:	24000c34 	.word	0x24000c34
 804aad0:	0804aa41 	.word	0x0804aa41

0804aad4 <__sfp_lock_acquire>:
 804aad4:	4801      	ldr	r0, [pc, #4]	@ (804aadc <__sfp_lock_acquire+0x8>)
 804aad6:	f000 b90e 	b.w	804acf6 <__retarget_lock_acquire_recursive>
 804aada:	bf00      	nop
 804aadc:	24000d75 	.word	0x24000d75

0804aae0 <__sfp_lock_release>:
 804aae0:	4801      	ldr	r0, [pc, #4]	@ (804aae8 <__sfp_lock_release+0x8>)
 804aae2:	f000 b909 	b.w	804acf8 <__retarget_lock_release_recursive>
 804aae6:	bf00      	nop
 804aae8:	24000d75 	.word	0x24000d75

0804aaec <__sinit>:
 804aaec:	b510      	push	{r4, lr}
 804aaee:	4604      	mov	r4, r0
 804aaf0:	f7ff fff0 	bl	804aad4 <__sfp_lock_acquire>
 804aaf4:	6a23      	ldr	r3, [r4, #32]
 804aaf6:	b11b      	cbz	r3, 804ab00 <__sinit+0x14>
 804aaf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804aafc:	f7ff bff0 	b.w	804aae0 <__sfp_lock_release>
 804ab00:	4b04      	ldr	r3, [pc, #16]	@ (804ab14 <__sinit+0x28>)
 804ab02:	6223      	str	r3, [r4, #32]
 804ab04:	4b04      	ldr	r3, [pc, #16]	@ (804ab18 <__sinit+0x2c>)
 804ab06:	681b      	ldr	r3, [r3, #0]
 804ab08:	2b00      	cmp	r3, #0
 804ab0a:	d1f5      	bne.n	804aaf8 <__sinit+0xc>
 804ab0c:	f7ff ffc4 	bl	804aa98 <global_stdio_init.part.0>
 804ab10:	e7f2      	b.n	804aaf8 <__sinit+0xc>
 804ab12:	bf00      	nop
 804ab14:	0804aa59 	.word	0x0804aa59
 804ab18:	24000d6c 	.word	0x24000d6c

0804ab1c <_fwalk_sglue>:
 804ab1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804ab20:	4607      	mov	r7, r0
 804ab22:	4688      	mov	r8, r1
 804ab24:	4614      	mov	r4, r2
 804ab26:	2600      	movs	r6, #0
 804ab28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 804ab2c:	f1b9 0901 	subs.w	r9, r9, #1
 804ab30:	d505      	bpl.n	804ab3e <_fwalk_sglue+0x22>
 804ab32:	6824      	ldr	r4, [r4, #0]
 804ab34:	2c00      	cmp	r4, #0
 804ab36:	d1f7      	bne.n	804ab28 <_fwalk_sglue+0xc>
 804ab38:	4630      	mov	r0, r6
 804ab3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804ab3e:	89ab      	ldrh	r3, [r5, #12]
 804ab40:	2b01      	cmp	r3, #1
 804ab42:	d907      	bls.n	804ab54 <_fwalk_sglue+0x38>
 804ab44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804ab48:	3301      	adds	r3, #1
 804ab4a:	d003      	beq.n	804ab54 <_fwalk_sglue+0x38>
 804ab4c:	4629      	mov	r1, r5
 804ab4e:	4638      	mov	r0, r7
 804ab50:	47c0      	blx	r8
 804ab52:	4306      	orrs	r6, r0
 804ab54:	3568      	adds	r5, #104	@ 0x68
 804ab56:	e7e9      	b.n	804ab2c <_fwalk_sglue+0x10>

0804ab58 <iprintf>:
 804ab58:	b40f      	push	{r0, r1, r2, r3}
 804ab5a:	b507      	push	{r0, r1, r2, lr}
 804ab5c:	4906      	ldr	r1, [pc, #24]	@ (804ab78 <iprintf+0x20>)
 804ab5e:	ab04      	add	r3, sp, #16
 804ab60:	6808      	ldr	r0, [r1, #0]
 804ab62:	f853 2b04 	ldr.w	r2, [r3], #4
 804ab66:	6881      	ldr	r1, [r0, #8]
 804ab68:	9301      	str	r3, [sp, #4]
 804ab6a:	f000 f9e9 	bl	804af40 <_vfiprintf_r>
 804ab6e:	b003      	add	sp, #12
 804ab70:	f85d eb04 	ldr.w	lr, [sp], #4
 804ab74:	b004      	add	sp, #16
 804ab76:	4770      	bx	lr
 804ab78:	24000130 	.word	0x24000130

0804ab7c <__sread>:
 804ab7c:	b510      	push	{r4, lr}
 804ab7e:	460c      	mov	r4, r1
 804ab80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804ab84:	f000 f868 	bl	804ac58 <_read_r>
 804ab88:	2800      	cmp	r0, #0
 804ab8a:	bfab      	itete	ge
 804ab8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 804ab8e:	89a3      	ldrhlt	r3, [r4, #12]
 804ab90:	181b      	addge	r3, r3, r0
 804ab92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 804ab96:	bfac      	ite	ge
 804ab98:	6563      	strge	r3, [r4, #84]	@ 0x54
 804ab9a:	81a3      	strhlt	r3, [r4, #12]
 804ab9c:	bd10      	pop	{r4, pc}

0804ab9e <__swrite>:
 804ab9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804aba2:	461f      	mov	r7, r3
 804aba4:	898b      	ldrh	r3, [r1, #12]
 804aba6:	05db      	lsls	r3, r3, #23
 804aba8:	4605      	mov	r5, r0
 804abaa:	460c      	mov	r4, r1
 804abac:	4616      	mov	r6, r2
 804abae:	d505      	bpl.n	804abbc <__swrite+0x1e>
 804abb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804abb4:	2302      	movs	r3, #2
 804abb6:	2200      	movs	r2, #0
 804abb8:	f000 f83c 	bl	804ac34 <_lseek_r>
 804abbc:	89a3      	ldrh	r3, [r4, #12]
 804abbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804abc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 804abc6:	81a3      	strh	r3, [r4, #12]
 804abc8:	4632      	mov	r2, r6
 804abca:	463b      	mov	r3, r7
 804abcc:	4628      	mov	r0, r5
 804abce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804abd2:	f000 b853 	b.w	804ac7c <_write_r>

0804abd6 <__sseek>:
 804abd6:	b510      	push	{r4, lr}
 804abd8:	460c      	mov	r4, r1
 804abda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804abde:	f000 f829 	bl	804ac34 <_lseek_r>
 804abe2:	1c43      	adds	r3, r0, #1
 804abe4:	89a3      	ldrh	r3, [r4, #12]
 804abe6:	bf15      	itete	ne
 804abe8:	6560      	strne	r0, [r4, #84]	@ 0x54
 804abea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 804abee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 804abf2:	81a3      	strheq	r3, [r4, #12]
 804abf4:	bf18      	it	ne
 804abf6:	81a3      	strhne	r3, [r4, #12]
 804abf8:	bd10      	pop	{r4, pc}

0804abfa <__sclose>:
 804abfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804abfe:	f000 b809 	b.w	804ac14 <_close_r>

0804ac02 <memset>:
 804ac02:	4402      	add	r2, r0
 804ac04:	4603      	mov	r3, r0
 804ac06:	4293      	cmp	r3, r2
 804ac08:	d100      	bne.n	804ac0c <memset+0xa>
 804ac0a:	4770      	bx	lr
 804ac0c:	f803 1b01 	strb.w	r1, [r3], #1
 804ac10:	e7f9      	b.n	804ac06 <memset+0x4>
	...

0804ac14 <_close_r>:
 804ac14:	b538      	push	{r3, r4, r5, lr}
 804ac16:	4d06      	ldr	r5, [pc, #24]	@ (804ac30 <_close_r+0x1c>)
 804ac18:	2300      	movs	r3, #0
 804ac1a:	4604      	mov	r4, r0
 804ac1c:	4608      	mov	r0, r1
 804ac1e:	602b      	str	r3, [r5, #0]
 804ac20:	f7f6 f93d 	bl	8040e9e <_close>
 804ac24:	1c43      	adds	r3, r0, #1
 804ac26:	d102      	bne.n	804ac2e <_close_r+0x1a>
 804ac28:	682b      	ldr	r3, [r5, #0]
 804ac2a:	b103      	cbz	r3, 804ac2e <_close_r+0x1a>
 804ac2c:	6023      	str	r3, [r4, #0]
 804ac2e:	bd38      	pop	{r3, r4, r5, pc}
 804ac30:	24000d70 	.word	0x24000d70

0804ac34 <_lseek_r>:
 804ac34:	b538      	push	{r3, r4, r5, lr}
 804ac36:	4d07      	ldr	r5, [pc, #28]	@ (804ac54 <_lseek_r+0x20>)
 804ac38:	4604      	mov	r4, r0
 804ac3a:	4608      	mov	r0, r1
 804ac3c:	4611      	mov	r1, r2
 804ac3e:	2200      	movs	r2, #0
 804ac40:	602a      	str	r2, [r5, #0]
 804ac42:	461a      	mov	r2, r3
 804ac44:	f7f6 f952 	bl	8040eec <_lseek>
 804ac48:	1c43      	adds	r3, r0, #1
 804ac4a:	d102      	bne.n	804ac52 <_lseek_r+0x1e>
 804ac4c:	682b      	ldr	r3, [r5, #0]
 804ac4e:	b103      	cbz	r3, 804ac52 <_lseek_r+0x1e>
 804ac50:	6023      	str	r3, [r4, #0]
 804ac52:	bd38      	pop	{r3, r4, r5, pc}
 804ac54:	24000d70 	.word	0x24000d70

0804ac58 <_read_r>:
 804ac58:	b538      	push	{r3, r4, r5, lr}
 804ac5a:	4d07      	ldr	r5, [pc, #28]	@ (804ac78 <_read_r+0x20>)
 804ac5c:	4604      	mov	r4, r0
 804ac5e:	4608      	mov	r0, r1
 804ac60:	4611      	mov	r1, r2
 804ac62:	2200      	movs	r2, #0
 804ac64:	602a      	str	r2, [r5, #0]
 804ac66:	461a      	mov	r2, r3
 804ac68:	f7f6 f8e0 	bl	8040e2c <_read>
 804ac6c:	1c43      	adds	r3, r0, #1
 804ac6e:	d102      	bne.n	804ac76 <_read_r+0x1e>
 804ac70:	682b      	ldr	r3, [r5, #0]
 804ac72:	b103      	cbz	r3, 804ac76 <_read_r+0x1e>
 804ac74:	6023      	str	r3, [r4, #0]
 804ac76:	bd38      	pop	{r3, r4, r5, pc}
 804ac78:	24000d70 	.word	0x24000d70

0804ac7c <_write_r>:
 804ac7c:	b538      	push	{r3, r4, r5, lr}
 804ac7e:	4d07      	ldr	r5, [pc, #28]	@ (804ac9c <_write_r+0x20>)
 804ac80:	4604      	mov	r4, r0
 804ac82:	4608      	mov	r0, r1
 804ac84:	4611      	mov	r1, r2
 804ac86:	2200      	movs	r2, #0
 804ac88:	602a      	str	r2, [r5, #0]
 804ac8a:	461a      	mov	r2, r3
 804ac8c:	f7f6 f8eb 	bl	8040e66 <_write>
 804ac90:	1c43      	adds	r3, r0, #1
 804ac92:	d102      	bne.n	804ac9a <_write_r+0x1e>
 804ac94:	682b      	ldr	r3, [r5, #0]
 804ac96:	b103      	cbz	r3, 804ac9a <_write_r+0x1e>
 804ac98:	6023      	str	r3, [r4, #0]
 804ac9a:	bd38      	pop	{r3, r4, r5, pc}
 804ac9c:	24000d70 	.word	0x24000d70

0804aca0 <__errno>:
 804aca0:	4b01      	ldr	r3, [pc, #4]	@ (804aca8 <__errno+0x8>)
 804aca2:	6818      	ldr	r0, [r3, #0]
 804aca4:	4770      	bx	lr
 804aca6:	bf00      	nop
 804aca8:	24000130 	.word	0x24000130

0804acac <__libc_init_array>:
 804acac:	b570      	push	{r4, r5, r6, lr}
 804acae:	4d0d      	ldr	r5, [pc, #52]	@ (804ace4 <__libc_init_array+0x38>)
 804acb0:	4c0d      	ldr	r4, [pc, #52]	@ (804ace8 <__libc_init_array+0x3c>)
 804acb2:	1b64      	subs	r4, r4, r5
 804acb4:	10a4      	asrs	r4, r4, #2
 804acb6:	2600      	movs	r6, #0
 804acb8:	42a6      	cmp	r6, r4
 804acba:	d109      	bne.n	804acd0 <__libc_init_array+0x24>
 804acbc:	4d0b      	ldr	r5, [pc, #44]	@ (804acec <__libc_init_array+0x40>)
 804acbe:	4c0c      	ldr	r4, [pc, #48]	@ (804acf0 <__libc_init_array+0x44>)
 804acc0:	f000 fdb6 	bl	804b830 <_init>
 804acc4:	1b64      	subs	r4, r4, r5
 804acc6:	10a4      	asrs	r4, r4, #2
 804acc8:	2600      	movs	r6, #0
 804acca:	42a6      	cmp	r6, r4
 804accc:	d105      	bne.n	804acda <__libc_init_array+0x2e>
 804acce:	bd70      	pop	{r4, r5, r6, pc}
 804acd0:	f855 3b04 	ldr.w	r3, [r5], #4
 804acd4:	4798      	blx	r3
 804acd6:	3601      	adds	r6, #1
 804acd8:	e7ee      	b.n	804acb8 <__libc_init_array+0xc>
 804acda:	f855 3b04 	ldr.w	r3, [r5], #4
 804acde:	4798      	blx	r3
 804ace0:	3601      	adds	r6, #1
 804ace2:	e7f2      	b.n	804acca <__libc_init_array+0x1e>
 804ace4:	0804b93c 	.word	0x0804b93c
 804ace8:	0804b93c 	.word	0x0804b93c
 804acec:	0804b93c 	.word	0x0804b93c
 804acf0:	0804b940 	.word	0x0804b940

0804acf4 <__retarget_lock_init_recursive>:
 804acf4:	4770      	bx	lr

0804acf6 <__retarget_lock_acquire_recursive>:
 804acf6:	4770      	bx	lr

0804acf8 <__retarget_lock_release_recursive>:
 804acf8:	4770      	bx	lr
	...

0804acfc <_free_r>:
 804acfc:	b538      	push	{r3, r4, r5, lr}
 804acfe:	4605      	mov	r5, r0
 804ad00:	2900      	cmp	r1, #0
 804ad02:	d041      	beq.n	804ad88 <_free_r+0x8c>
 804ad04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804ad08:	1f0c      	subs	r4, r1, #4
 804ad0a:	2b00      	cmp	r3, #0
 804ad0c:	bfb8      	it	lt
 804ad0e:	18e4      	addlt	r4, r4, r3
 804ad10:	f000 f8e0 	bl	804aed4 <__malloc_lock>
 804ad14:	4a1d      	ldr	r2, [pc, #116]	@ (804ad8c <_free_r+0x90>)
 804ad16:	6813      	ldr	r3, [r2, #0]
 804ad18:	b933      	cbnz	r3, 804ad28 <_free_r+0x2c>
 804ad1a:	6063      	str	r3, [r4, #4]
 804ad1c:	6014      	str	r4, [r2, #0]
 804ad1e:	4628      	mov	r0, r5
 804ad20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804ad24:	f000 b8dc 	b.w	804aee0 <__malloc_unlock>
 804ad28:	42a3      	cmp	r3, r4
 804ad2a:	d908      	bls.n	804ad3e <_free_r+0x42>
 804ad2c:	6820      	ldr	r0, [r4, #0]
 804ad2e:	1821      	adds	r1, r4, r0
 804ad30:	428b      	cmp	r3, r1
 804ad32:	bf01      	itttt	eq
 804ad34:	6819      	ldreq	r1, [r3, #0]
 804ad36:	685b      	ldreq	r3, [r3, #4]
 804ad38:	1809      	addeq	r1, r1, r0
 804ad3a:	6021      	streq	r1, [r4, #0]
 804ad3c:	e7ed      	b.n	804ad1a <_free_r+0x1e>
 804ad3e:	461a      	mov	r2, r3
 804ad40:	685b      	ldr	r3, [r3, #4]
 804ad42:	b10b      	cbz	r3, 804ad48 <_free_r+0x4c>
 804ad44:	42a3      	cmp	r3, r4
 804ad46:	d9fa      	bls.n	804ad3e <_free_r+0x42>
 804ad48:	6811      	ldr	r1, [r2, #0]
 804ad4a:	1850      	adds	r0, r2, r1
 804ad4c:	42a0      	cmp	r0, r4
 804ad4e:	d10b      	bne.n	804ad68 <_free_r+0x6c>
 804ad50:	6820      	ldr	r0, [r4, #0]
 804ad52:	4401      	add	r1, r0
 804ad54:	1850      	adds	r0, r2, r1
 804ad56:	4283      	cmp	r3, r0
 804ad58:	6011      	str	r1, [r2, #0]
 804ad5a:	d1e0      	bne.n	804ad1e <_free_r+0x22>
 804ad5c:	6818      	ldr	r0, [r3, #0]
 804ad5e:	685b      	ldr	r3, [r3, #4]
 804ad60:	6053      	str	r3, [r2, #4]
 804ad62:	4408      	add	r0, r1
 804ad64:	6010      	str	r0, [r2, #0]
 804ad66:	e7da      	b.n	804ad1e <_free_r+0x22>
 804ad68:	d902      	bls.n	804ad70 <_free_r+0x74>
 804ad6a:	230c      	movs	r3, #12
 804ad6c:	602b      	str	r3, [r5, #0]
 804ad6e:	e7d6      	b.n	804ad1e <_free_r+0x22>
 804ad70:	6820      	ldr	r0, [r4, #0]
 804ad72:	1821      	adds	r1, r4, r0
 804ad74:	428b      	cmp	r3, r1
 804ad76:	bf04      	itt	eq
 804ad78:	6819      	ldreq	r1, [r3, #0]
 804ad7a:	685b      	ldreq	r3, [r3, #4]
 804ad7c:	6063      	str	r3, [r4, #4]
 804ad7e:	bf04      	itt	eq
 804ad80:	1809      	addeq	r1, r1, r0
 804ad82:	6021      	streq	r1, [r4, #0]
 804ad84:	6054      	str	r4, [r2, #4]
 804ad86:	e7ca      	b.n	804ad1e <_free_r+0x22>
 804ad88:	bd38      	pop	{r3, r4, r5, pc}
 804ad8a:	bf00      	nop
 804ad8c:	24000d7c 	.word	0x24000d7c

0804ad90 <sbrk_aligned>:
 804ad90:	b570      	push	{r4, r5, r6, lr}
 804ad92:	4e0f      	ldr	r6, [pc, #60]	@ (804add0 <sbrk_aligned+0x40>)
 804ad94:	460c      	mov	r4, r1
 804ad96:	6831      	ldr	r1, [r6, #0]
 804ad98:	4605      	mov	r5, r0
 804ad9a:	b911      	cbnz	r1, 804ada2 <sbrk_aligned+0x12>
 804ad9c:	f000 fcb4 	bl	804b708 <_sbrk_r>
 804ada0:	6030      	str	r0, [r6, #0]
 804ada2:	4621      	mov	r1, r4
 804ada4:	4628      	mov	r0, r5
 804ada6:	f000 fcaf 	bl	804b708 <_sbrk_r>
 804adaa:	1c43      	adds	r3, r0, #1
 804adac:	d103      	bne.n	804adb6 <sbrk_aligned+0x26>
 804adae:	f04f 34ff 	mov.w	r4, #4294967295
 804adb2:	4620      	mov	r0, r4
 804adb4:	bd70      	pop	{r4, r5, r6, pc}
 804adb6:	1cc4      	adds	r4, r0, #3
 804adb8:	f024 0403 	bic.w	r4, r4, #3
 804adbc:	42a0      	cmp	r0, r4
 804adbe:	d0f8      	beq.n	804adb2 <sbrk_aligned+0x22>
 804adc0:	1a21      	subs	r1, r4, r0
 804adc2:	4628      	mov	r0, r5
 804adc4:	f000 fca0 	bl	804b708 <_sbrk_r>
 804adc8:	3001      	adds	r0, #1
 804adca:	d1f2      	bne.n	804adb2 <sbrk_aligned+0x22>
 804adcc:	e7ef      	b.n	804adae <sbrk_aligned+0x1e>
 804adce:	bf00      	nop
 804add0:	24000d78 	.word	0x24000d78

0804add4 <_malloc_r>:
 804add4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804add8:	1ccd      	adds	r5, r1, #3
 804adda:	f025 0503 	bic.w	r5, r5, #3
 804adde:	3508      	adds	r5, #8
 804ade0:	2d0c      	cmp	r5, #12
 804ade2:	bf38      	it	cc
 804ade4:	250c      	movcc	r5, #12
 804ade6:	2d00      	cmp	r5, #0
 804ade8:	4606      	mov	r6, r0
 804adea:	db01      	blt.n	804adf0 <_malloc_r+0x1c>
 804adec:	42a9      	cmp	r1, r5
 804adee:	d904      	bls.n	804adfa <_malloc_r+0x26>
 804adf0:	230c      	movs	r3, #12
 804adf2:	6033      	str	r3, [r6, #0]
 804adf4:	2000      	movs	r0, #0
 804adf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804adfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 804aed0 <_malloc_r+0xfc>
 804adfe:	f000 f869 	bl	804aed4 <__malloc_lock>
 804ae02:	f8d8 3000 	ldr.w	r3, [r8]
 804ae06:	461c      	mov	r4, r3
 804ae08:	bb44      	cbnz	r4, 804ae5c <_malloc_r+0x88>
 804ae0a:	4629      	mov	r1, r5
 804ae0c:	4630      	mov	r0, r6
 804ae0e:	f7ff ffbf 	bl	804ad90 <sbrk_aligned>
 804ae12:	1c43      	adds	r3, r0, #1
 804ae14:	4604      	mov	r4, r0
 804ae16:	d158      	bne.n	804aeca <_malloc_r+0xf6>
 804ae18:	f8d8 4000 	ldr.w	r4, [r8]
 804ae1c:	4627      	mov	r7, r4
 804ae1e:	2f00      	cmp	r7, #0
 804ae20:	d143      	bne.n	804aeaa <_malloc_r+0xd6>
 804ae22:	2c00      	cmp	r4, #0
 804ae24:	d04b      	beq.n	804aebe <_malloc_r+0xea>
 804ae26:	6823      	ldr	r3, [r4, #0]
 804ae28:	4639      	mov	r1, r7
 804ae2a:	4630      	mov	r0, r6
 804ae2c:	eb04 0903 	add.w	r9, r4, r3
 804ae30:	f000 fc6a 	bl	804b708 <_sbrk_r>
 804ae34:	4581      	cmp	r9, r0
 804ae36:	d142      	bne.n	804aebe <_malloc_r+0xea>
 804ae38:	6821      	ldr	r1, [r4, #0]
 804ae3a:	1a6d      	subs	r5, r5, r1
 804ae3c:	4629      	mov	r1, r5
 804ae3e:	4630      	mov	r0, r6
 804ae40:	f7ff ffa6 	bl	804ad90 <sbrk_aligned>
 804ae44:	3001      	adds	r0, #1
 804ae46:	d03a      	beq.n	804aebe <_malloc_r+0xea>
 804ae48:	6823      	ldr	r3, [r4, #0]
 804ae4a:	442b      	add	r3, r5
 804ae4c:	6023      	str	r3, [r4, #0]
 804ae4e:	f8d8 3000 	ldr.w	r3, [r8]
 804ae52:	685a      	ldr	r2, [r3, #4]
 804ae54:	bb62      	cbnz	r2, 804aeb0 <_malloc_r+0xdc>
 804ae56:	f8c8 7000 	str.w	r7, [r8]
 804ae5a:	e00f      	b.n	804ae7c <_malloc_r+0xa8>
 804ae5c:	6822      	ldr	r2, [r4, #0]
 804ae5e:	1b52      	subs	r2, r2, r5
 804ae60:	d420      	bmi.n	804aea4 <_malloc_r+0xd0>
 804ae62:	2a0b      	cmp	r2, #11
 804ae64:	d917      	bls.n	804ae96 <_malloc_r+0xc2>
 804ae66:	1961      	adds	r1, r4, r5
 804ae68:	42a3      	cmp	r3, r4
 804ae6a:	6025      	str	r5, [r4, #0]
 804ae6c:	bf18      	it	ne
 804ae6e:	6059      	strne	r1, [r3, #4]
 804ae70:	6863      	ldr	r3, [r4, #4]
 804ae72:	bf08      	it	eq
 804ae74:	f8c8 1000 	streq.w	r1, [r8]
 804ae78:	5162      	str	r2, [r4, r5]
 804ae7a:	604b      	str	r3, [r1, #4]
 804ae7c:	4630      	mov	r0, r6
 804ae7e:	f000 f82f 	bl	804aee0 <__malloc_unlock>
 804ae82:	f104 000b 	add.w	r0, r4, #11
 804ae86:	1d23      	adds	r3, r4, #4
 804ae88:	f020 0007 	bic.w	r0, r0, #7
 804ae8c:	1ac2      	subs	r2, r0, r3
 804ae8e:	bf1c      	itt	ne
 804ae90:	1a1b      	subne	r3, r3, r0
 804ae92:	50a3      	strne	r3, [r4, r2]
 804ae94:	e7af      	b.n	804adf6 <_malloc_r+0x22>
 804ae96:	6862      	ldr	r2, [r4, #4]
 804ae98:	42a3      	cmp	r3, r4
 804ae9a:	bf0c      	ite	eq
 804ae9c:	f8c8 2000 	streq.w	r2, [r8]
 804aea0:	605a      	strne	r2, [r3, #4]
 804aea2:	e7eb      	b.n	804ae7c <_malloc_r+0xa8>
 804aea4:	4623      	mov	r3, r4
 804aea6:	6864      	ldr	r4, [r4, #4]
 804aea8:	e7ae      	b.n	804ae08 <_malloc_r+0x34>
 804aeaa:	463c      	mov	r4, r7
 804aeac:	687f      	ldr	r7, [r7, #4]
 804aeae:	e7b6      	b.n	804ae1e <_malloc_r+0x4a>
 804aeb0:	461a      	mov	r2, r3
 804aeb2:	685b      	ldr	r3, [r3, #4]
 804aeb4:	42a3      	cmp	r3, r4
 804aeb6:	d1fb      	bne.n	804aeb0 <_malloc_r+0xdc>
 804aeb8:	2300      	movs	r3, #0
 804aeba:	6053      	str	r3, [r2, #4]
 804aebc:	e7de      	b.n	804ae7c <_malloc_r+0xa8>
 804aebe:	230c      	movs	r3, #12
 804aec0:	6033      	str	r3, [r6, #0]
 804aec2:	4630      	mov	r0, r6
 804aec4:	f000 f80c 	bl	804aee0 <__malloc_unlock>
 804aec8:	e794      	b.n	804adf4 <_malloc_r+0x20>
 804aeca:	6005      	str	r5, [r0, #0]
 804aecc:	e7d6      	b.n	804ae7c <_malloc_r+0xa8>
 804aece:	bf00      	nop
 804aed0:	24000d7c 	.word	0x24000d7c

0804aed4 <__malloc_lock>:
 804aed4:	4801      	ldr	r0, [pc, #4]	@ (804aedc <__malloc_lock+0x8>)
 804aed6:	f7ff bf0e 	b.w	804acf6 <__retarget_lock_acquire_recursive>
 804aeda:	bf00      	nop
 804aedc:	24000d74 	.word	0x24000d74

0804aee0 <__malloc_unlock>:
 804aee0:	4801      	ldr	r0, [pc, #4]	@ (804aee8 <__malloc_unlock+0x8>)
 804aee2:	f7ff bf09 	b.w	804acf8 <__retarget_lock_release_recursive>
 804aee6:	bf00      	nop
 804aee8:	24000d74 	.word	0x24000d74

0804aeec <__sfputc_r>:
 804aeec:	6893      	ldr	r3, [r2, #8]
 804aeee:	3b01      	subs	r3, #1
 804aef0:	2b00      	cmp	r3, #0
 804aef2:	b410      	push	{r4}
 804aef4:	6093      	str	r3, [r2, #8]
 804aef6:	da08      	bge.n	804af0a <__sfputc_r+0x1e>
 804aef8:	6994      	ldr	r4, [r2, #24]
 804aefa:	42a3      	cmp	r3, r4
 804aefc:	db01      	blt.n	804af02 <__sfputc_r+0x16>
 804aefe:	290a      	cmp	r1, #10
 804af00:	d103      	bne.n	804af0a <__sfputc_r+0x1e>
 804af02:	f85d 4b04 	ldr.w	r4, [sp], #4
 804af06:	f000 bb6b 	b.w	804b5e0 <__swbuf_r>
 804af0a:	6813      	ldr	r3, [r2, #0]
 804af0c:	1c58      	adds	r0, r3, #1
 804af0e:	6010      	str	r0, [r2, #0]
 804af10:	7019      	strb	r1, [r3, #0]
 804af12:	4608      	mov	r0, r1
 804af14:	f85d 4b04 	ldr.w	r4, [sp], #4
 804af18:	4770      	bx	lr

0804af1a <__sfputs_r>:
 804af1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804af1c:	4606      	mov	r6, r0
 804af1e:	460f      	mov	r7, r1
 804af20:	4614      	mov	r4, r2
 804af22:	18d5      	adds	r5, r2, r3
 804af24:	42ac      	cmp	r4, r5
 804af26:	d101      	bne.n	804af2c <__sfputs_r+0x12>
 804af28:	2000      	movs	r0, #0
 804af2a:	e007      	b.n	804af3c <__sfputs_r+0x22>
 804af2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 804af30:	463a      	mov	r2, r7
 804af32:	4630      	mov	r0, r6
 804af34:	f7ff ffda 	bl	804aeec <__sfputc_r>
 804af38:	1c43      	adds	r3, r0, #1
 804af3a:	d1f3      	bne.n	804af24 <__sfputs_r+0xa>
 804af3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804af40 <_vfiprintf_r>:
 804af40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804af44:	460d      	mov	r5, r1
 804af46:	b09d      	sub	sp, #116	@ 0x74
 804af48:	4614      	mov	r4, r2
 804af4a:	4698      	mov	r8, r3
 804af4c:	4606      	mov	r6, r0
 804af4e:	b118      	cbz	r0, 804af58 <_vfiprintf_r+0x18>
 804af50:	6a03      	ldr	r3, [r0, #32]
 804af52:	b90b      	cbnz	r3, 804af58 <_vfiprintf_r+0x18>
 804af54:	f7ff fdca 	bl	804aaec <__sinit>
 804af58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 804af5a:	07d9      	lsls	r1, r3, #31
 804af5c:	d405      	bmi.n	804af6a <_vfiprintf_r+0x2a>
 804af5e:	89ab      	ldrh	r3, [r5, #12]
 804af60:	059a      	lsls	r2, r3, #22
 804af62:	d402      	bmi.n	804af6a <_vfiprintf_r+0x2a>
 804af64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804af66:	f7ff fec6 	bl	804acf6 <__retarget_lock_acquire_recursive>
 804af6a:	89ab      	ldrh	r3, [r5, #12]
 804af6c:	071b      	lsls	r3, r3, #28
 804af6e:	d501      	bpl.n	804af74 <_vfiprintf_r+0x34>
 804af70:	692b      	ldr	r3, [r5, #16]
 804af72:	b99b      	cbnz	r3, 804af9c <_vfiprintf_r+0x5c>
 804af74:	4629      	mov	r1, r5
 804af76:	4630      	mov	r0, r6
 804af78:	f000 fb70 	bl	804b65c <__swsetup_r>
 804af7c:	b170      	cbz	r0, 804af9c <_vfiprintf_r+0x5c>
 804af7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 804af80:	07dc      	lsls	r4, r3, #31
 804af82:	d504      	bpl.n	804af8e <_vfiprintf_r+0x4e>
 804af84:	f04f 30ff 	mov.w	r0, #4294967295
 804af88:	b01d      	add	sp, #116	@ 0x74
 804af8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804af8e:	89ab      	ldrh	r3, [r5, #12]
 804af90:	0598      	lsls	r0, r3, #22
 804af92:	d4f7      	bmi.n	804af84 <_vfiprintf_r+0x44>
 804af94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804af96:	f7ff feaf 	bl	804acf8 <__retarget_lock_release_recursive>
 804af9a:	e7f3      	b.n	804af84 <_vfiprintf_r+0x44>
 804af9c:	2300      	movs	r3, #0
 804af9e:	9309      	str	r3, [sp, #36]	@ 0x24
 804afa0:	2320      	movs	r3, #32
 804afa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 804afa6:	f8cd 800c 	str.w	r8, [sp, #12]
 804afaa:	2330      	movs	r3, #48	@ 0x30
 804afac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 804b15c <_vfiprintf_r+0x21c>
 804afb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 804afb4:	f04f 0901 	mov.w	r9, #1
 804afb8:	4623      	mov	r3, r4
 804afba:	469a      	mov	sl, r3
 804afbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 804afc0:	b10a      	cbz	r2, 804afc6 <_vfiprintf_r+0x86>
 804afc2:	2a25      	cmp	r2, #37	@ 0x25
 804afc4:	d1f9      	bne.n	804afba <_vfiprintf_r+0x7a>
 804afc6:	ebba 0b04 	subs.w	fp, sl, r4
 804afca:	d00b      	beq.n	804afe4 <_vfiprintf_r+0xa4>
 804afcc:	465b      	mov	r3, fp
 804afce:	4622      	mov	r2, r4
 804afd0:	4629      	mov	r1, r5
 804afd2:	4630      	mov	r0, r6
 804afd4:	f7ff ffa1 	bl	804af1a <__sfputs_r>
 804afd8:	3001      	adds	r0, #1
 804afda:	f000 80a7 	beq.w	804b12c <_vfiprintf_r+0x1ec>
 804afde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 804afe0:	445a      	add	r2, fp
 804afe2:	9209      	str	r2, [sp, #36]	@ 0x24
 804afe4:	f89a 3000 	ldrb.w	r3, [sl]
 804afe8:	2b00      	cmp	r3, #0
 804afea:	f000 809f 	beq.w	804b12c <_vfiprintf_r+0x1ec>
 804afee:	2300      	movs	r3, #0
 804aff0:	f04f 32ff 	mov.w	r2, #4294967295
 804aff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804aff8:	f10a 0a01 	add.w	sl, sl, #1
 804affc:	9304      	str	r3, [sp, #16]
 804affe:	9307      	str	r3, [sp, #28]
 804b000:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 804b004:	931a      	str	r3, [sp, #104]	@ 0x68
 804b006:	4654      	mov	r4, sl
 804b008:	2205      	movs	r2, #5
 804b00a:	f814 1b01 	ldrb.w	r1, [r4], #1
 804b00e:	4853      	ldr	r0, [pc, #332]	@ (804b15c <_vfiprintf_r+0x21c>)
 804b010:	f7f5 f966 	bl	80402e0 <memchr>
 804b014:	9a04      	ldr	r2, [sp, #16]
 804b016:	b9d8      	cbnz	r0, 804b050 <_vfiprintf_r+0x110>
 804b018:	06d1      	lsls	r1, r2, #27
 804b01a:	bf44      	itt	mi
 804b01c:	2320      	movmi	r3, #32
 804b01e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 804b022:	0713      	lsls	r3, r2, #28
 804b024:	bf44      	itt	mi
 804b026:	232b      	movmi	r3, #43	@ 0x2b
 804b028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 804b02c:	f89a 3000 	ldrb.w	r3, [sl]
 804b030:	2b2a      	cmp	r3, #42	@ 0x2a
 804b032:	d015      	beq.n	804b060 <_vfiprintf_r+0x120>
 804b034:	9a07      	ldr	r2, [sp, #28]
 804b036:	4654      	mov	r4, sl
 804b038:	2000      	movs	r0, #0
 804b03a:	f04f 0c0a 	mov.w	ip, #10
 804b03e:	4621      	mov	r1, r4
 804b040:	f811 3b01 	ldrb.w	r3, [r1], #1
 804b044:	3b30      	subs	r3, #48	@ 0x30
 804b046:	2b09      	cmp	r3, #9
 804b048:	d94b      	bls.n	804b0e2 <_vfiprintf_r+0x1a2>
 804b04a:	b1b0      	cbz	r0, 804b07a <_vfiprintf_r+0x13a>
 804b04c:	9207      	str	r2, [sp, #28]
 804b04e:	e014      	b.n	804b07a <_vfiprintf_r+0x13a>
 804b050:	eba0 0308 	sub.w	r3, r0, r8
 804b054:	fa09 f303 	lsl.w	r3, r9, r3
 804b058:	4313      	orrs	r3, r2
 804b05a:	9304      	str	r3, [sp, #16]
 804b05c:	46a2      	mov	sl, r4
 804b05e:	e7d2      	b.n	804b006 <_vfiprintf_r+0xc6>
 804b060:	9b03      	ldr	r3, [sp, #12]
 804b062:	1d19      	adds	r1, r3, #4
 804b064:	681b      	ldr	r3, [r3, #0]
 804b066:	9103      	str	r1, [sp, #12]
 804b068:	2b00      	cmp	r3, #0
 804b06a:	bfbb      	ittet	lt
 804b06c:	425b      	neglt	r3, r3
 804b06e:	f042 0202 	orrlt.w	r2, r2, #2
 804b072:	9307      	strge	r3, [sp, #28]
 804b074:	9307      	strlt	r3, [sp, #28]
 804b076:	bfb8      	it	lt
 804b078:	9204      	strlt	r2, [sp, #16]
 804b07a:	7823      	ldrb	r3, [r4, #0]
 804b07c:	2b2e      	cmp	r3, #46	@ 0x2e
 804b07e:	d10a      	bne.n	804b096 <_vfiprintf_r+0x156>
 804b080:	7863      	ldrb	r3, [r4, #1]
 804b082:	2b2a      	cmp	r3, #42	@ 0x2a
 804b084:	d132      	bne.n	804b0ec <_vfiprintf_r+0x1ac>
 804b086:	9b03      	ldr	r3, [sp, #12]
 804b088:	1d1a      	adds	r2, r3, #4
 804b08a:	681b      	ldr	r3, [r3, #0]
 804b08c:	9203      	str	r2, [sp, #12]
 804b08e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 804b092:	3402      	adds	r4, #2
 804b094:	9305      	str	r3, [sp, #20]
 804b096:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 804b16c <_vfiprintf_r+0x22c>
 804b09a:	7821      	ldrb	r1, [r4, #0]
 804b09c:	2203      	movs	r2, #3
 804b09e:	4650      	mov	r0, sl
 804b0a0:	f7f5 f91e 	bl	80402e0 <memchr>
 804b0a4:	b138      	cbz	r0, 804b0b6 <_vfiprintf_r+0x176>
 804b0a6:	9b04      	ldr	r3, [sp, #16]
 804b0a8:	eba0 000a 	sub.w	r0, r0, sl
 804b0ac:	2240      	movs	r2, #64	@ 0x40
 804b0ae:	4082      	lsls	r2, r0
 804b0b0:	4313      	orrs	r3, r2
 804b0b2:	3401      	adds	r4, #1
 804b0b4:	9304      	str	r3, [sp, #16]
 804b0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 804b0ba:	4829      	ldr	r0, [pc, #164]	@ (804b160 <_vfiprintf_r+0x220>)
 804b0bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 804b0c0:	2206      	movs	r2, #6
 804b0c2:	f7f5 f90d 	bl	80402e0 <memchr>
 804b0c6:	2800      	cmp	r0, #0
 804b0c8:	d03f      	beq.n	804b14a <_vfiprintf_r+0x20a>
 804b0ca:	4b26      	ldr	r3, [pc, #152]	@ (804b164 <_vfiprintf_r+0x224>)
 804b0cc:	bb1b      	cbnz	r3, 804b116 <_vfiprintf_r+0x1d6>
 804b0ce:	9b03      	ldr	r3, [sp, #12]
 804b0d0:	3307      	adds	r3, #7
 804b0d2:	f023 0307 	bic.w	r3, r3, #7
 804b0d6:	3308      	adds	r3, #8
 804b0d8:	9303      	str	r3, [sp, #12]
 804b0da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 804b0dc:	443b      	add	r3, r7
 804b0de:	9309      	str	r3, [sp, #36]	@ 0x24
 804b0e0:	e76a      	b.n	804afb8 <_vfiprintf_r+0x78>
 804b0e2:	fb0c 3202 	mla	r2, ip, r2, r3
 804b0e6:	460c      	mov	r4, r1
 804b0e8:	2001      	movs	r0, #1
 804b0ea:	e7a8      	b.n	804b03e <_vfiprintf_r+0xfe>
 804b0ec:	2300      	movs	r3, #0
 804b0ee:	3401      	adds	r4, #1
 804b0f0:	9305      	str	r3, [sp, #20]
 804b0f2:	4619      	mov	r1, r3
 804b0f4:	f04f 0c0a 	mov.w	ip, #10
 804b0f8:	4620      	mov	r0, r4
 804b0fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 804b0fe:	3a30      	subs	r2, #48	@ 0x30
 804b100:	2a09      	cmp	r2, #9
 804b102:	d903      	bls.n	804b10c <_vfiprintf_r+0x1cc>
 804b104:	2b00      	cmp	r3, #0
 804b106:	d0c6      	beq.n	804b096 <_vfiprintf_r+0x156>
 804b108:	9105      	str	r1, [sp, #20]
 804b10a:	e7c4      	b.n	804b096 <_vfiprintf_r+0x156>
 804b10c:	fb0c 2101 	mla	r1, ip, r1, r2
 804b110:	4604      	mov	r4, r0
 804b112:	2301      	movs	r3, #1
 804b114:	e7f0      	b.n	804b0f8 <_vfiprintf_r+0x1b8>
 804b116:	ab03      	add	r3, sp, #12
 804b118:	9300      	str	r3, [sp, #0]
 804b11a:	462a      	mov	r2, r5
 804b11c:	4b12      	ldr	r3, [pc, #72]	@ (804b168 <_vfiprintf_r+0x228>)
 804b11e:	a904      	add	r1, sp, #16
 804b120:	4630      	mov	r0, r6
 804b122:	f3af 8000 	nop.w
 804b126:	4607      	mov	r7, r0
 804b128:	1c78      	adds	r0, r7, #1
 804b12a:	d1d6      	bne.n	804b0da <_vfiprintf_r+0x19a>
 804b12c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 804b12e:	07d9      	lsls	r1, r3, #31
 804b130:	d405      	bmi.n	804b13e <_vfiprintf_r+0x1fe>
 804b132:	89ab      	ldrh	r3, [r5, #12]
 804b134:	059a      	lsls	r2, r3, #22
 804b136:	d402      	bmi.n	804b13e <_vfiprintf_r+0x1fe>
 804b138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804b13a:	f7ff fddd 	bl	804acf8 <__retarget_lock_release_recursive>
 804b13e:	89ab      	ldrh	r3, [r5, #12]
 804b140:	065b      	lsls	r3, r3, #25
 804b142:	f53f af1f 	bmi.w	804af84 <_vfiprintf_r+0x44>
 804b146:	9809      	ldr	r0, [sp, #36]	@ 0x24
 804b148:	e71e      	b.n	804af88 <_vfiprintf_r+0x48>
 804b14a:	ab03      	add	r3, sp, #12
 804b14c:	9300      	str	r3, [sp, #0]
 804b14e:	462a      	mov	r2, r5
 804b150:	4b05      	ldr	r3, [pc, #20]	@ (804b168 <_vfiprintf_r+0x228>)
 804b152:	a904      	add	r1, sp, #16
 804b154:	4630      	mov	r0, r6
 804b156:	f000 f879 	bl	804b24c <_printf_i>
 804b15a:	e7e4      	b.n	804b126 <_vfiprintf_r+0x1e6>
 804b15c:	0804b900 	.word	0x0804b900
 804b160:	0804b90a 	.word	0x0804b90a
 804b164:	00000000 	.word	0x00000000
 804b168:	0804af1b 	.word	0x0804af1b
 804b16c:	0804b906 	.word	0x0804b906

0804b170 <_printf_common>:
 804b170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804b174:	4616      	mov	r6, r2
 804b176:	4698      	mov	r8, r3
 804b178:	688a      	ldr	r2, [r1, #8]
 804b17a:	690b      	ldr	r3, [r1, #16]
 804b17c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 804b180:	4293      	cmp	r3, r2
 804b182:	bfb8      	it	lt
 804b184:	4613      	movlt	r3, r2
 804b186:	6033      	str	r3, [r6, #0]
 804b188:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 804b18c:	4607      	mov	r7, r0
 804b18e:	460c      	mov	r4, r1
 804b190:	b10a      	cbz	r2, 804b196 <_printf_common+0x26>
 804b192:	3301      	adds	r3, #1
 804b194:	6033      	str	r3, [r6, #0]
 804b196:	6823      	ldr	r3, [r4, #0]
 804b198:	0699      	lsls	r1, r3, #26
 804b19a:	bf42      	ittt	mi
 804b19c:	6833      	ldrmi	r3, [r6, #0]
 804b19e:	3302      	addmi	r3, #2
 804b1a0:	6033      	strmi	r3, [r6, #0]
 804b1a2:	6825      	ldr	r5, [r4, #0]
 804b1a4:	f015 0506 	ands.w	r5, r5, #6
 804b1a8:	d106      	bne.n	804b1b8 <_printf_common+0x48>
 804b1aa:	f104 0a19 	add.w	sl, r4, #25
 804b1ae:	68e3      	ldr	r3, [r4, #12]
 804b1b0:	6832      	ldr	r2, [r6, #0]
 804b1b2:	1a9b      	subs	r3, r3, r2
 804b1b4:	42ab      	cmp	r3, r5
 804b1b6:	dc26      	bgt.n	804b206 <_printf_common+0x96>
 804b1b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 804b1bc:	6822      	ldr	r2, [r4, #0]
 804b1be:	3b00      	subs	r3, #0
 804b1c0:	bf18      	it	ne
 804b1c2:	2301      	movne	r3, #1
 804b1c4:	0692      	lsls	r2, r2, #26
 804b1c6:	d42b      	bmi.n	804b220 <_printf_common+0xb0>
 804b1c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 804b1cc:	4641      	mov	r1, r8
 804b1ce:	4638      	mov	r0, r7
 804b1d0:	47c8      	blx	r9
 804b1d2:	3001      	adds	r0, #1
 804b1d4:	d01e      	beq.n	804b214 <_printf_common+0xa4>
 804b1d6:	6823      	ldr	r3, [r4, #0]
 804b1d8:	6922      	ldr	r2, [r4, #16]
 804b1da:	f003 0306 	and.w	r3, r3, #6
 804b1de:	2b04      	cmp	r3, #4
 804b1e0:	bf02      	ittt	eq
 804b1e2:	68e5      	ldreq	r5, [r4, #12]
 804b1e4:	6833      	ldreq	r3, [r6, #0]
 804b1e6:	1aed      	subeq	r5, r5, r3
 804b1e8:	68a3      	ldr	r3, [r4, #8]
 804b1ea:	bf0c      	ite	eq
 804b1ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804b1f0:	2500      	movne	r5, #0
 804b1f2:	4293      	cmp	r3, r2
 804b1f4:	bfc4      	itt	gt
 804b1f6:	1a9b      	subgt	r3, r3, r2
 804b1f8:	18ed      	addgt	r5, r5, r3
 804b1fa:	2600      	movs	r6, #0
 804b1fc:	341a      	adds	r4, #26
 804b1fe:	42b5      	cmp	r5, r6
 804b200:	d11a      	bne.n	804b238 <_printf_common+0xc8>
 804b202:	2000      	movs	r0, #0
 804b204:	e008      	b.n	804b218 <_printf_common+0xa8>
 804b206:	2301      	movs	r3, #1
 804b208:	4652      	mov	r2, sl
 804b20a:	4641      	mov	r1, r8
 804b20c:	4638      	mov	r0, r7
 804b20e:	47c8      	blx	r9
 804b210:	3001      	adds	r0, #1
 804b212:	d103      	bne.n	804b21c <_printf_common+0xac>
 804b214:	f04f 30ff 	mov.w	r0, #4294967295
 804b218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804b21c:	3501      	adds	r5, #1
 804b21e:	e7c6      	b.n	804b1ae <_printf_common+0x3e>
 804b220:	18e1      	adds	r1, r4, r3
 804b222:	1c5a      	adds	r2, r3, #1
 804b224:	2030      	movs	r0, #48	@ 0x30
 804b226:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 804b22a:	4422      	add	r2, r4
 804b22c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 804b230:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 804b234:	3302      	adds	r3, #2
 804b236:	e7c7      	b.n	804b1c8 <_printf_common+0x58>
 804b238:	2301      	movs	r3, #1
 804b23a:	4622      	mov	r2, r4
 804b23c:	4641      	mov	r1, r8
 804b23e:	4638      	mov	r0, r7
 804b240:	47c8      	blx	r9
 804b242:	3001      	adds	r0, #1
 804b244:	d0e6      	beq.n	804b214 <_printf_common+0xa4>
 804b246:	3601      	adds	r6, #1
 804b248:	e7d9      	b.n	804b1fe <_printf_common+0x8e>
	...

0804b24c <_printf_i>:
 804b24c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 804b250:	7e0f      	ldrb	r7, [r1, #24]
 804b252:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 804b254:	2f78      	cmp	r7, #120	@ 0x78
 804b256:	4691      	mov	r9, r2
 804b258:	4680      	mov	r8, r0
 804b25a:	460c      	mov	r4, r1
 804b25c:	469a      	mov	sl, r3
 804b25e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 804b262:	d807      	bhi.n	804b274 <_printf_i+0x28>
 804b264:	2f62      	cmp	r7, #98	@ 0x62
 804b266:	d80a      	bhi.n	804b27e <_printf_i+0x32>
 804b268:	2f00      	cmp	r7, #0
 804b26a:	f000 80d1 	beq.w	804b410 <_printf_i+0x1c4>
 804b26e:	2f58      	cmp	r7, #88	@ 0x58
 804b270:	f000 80b8 	beq.w	804b3e4 <_printf_i+0x198>
 804b274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 804b278:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 804b27c:	e03a      	b.n	804b2f4 <_printf_i+0xa8>
 804b27e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 804b282:	2b15      	cmp	r3, #21
 804b284:	d8f6      	bhi.n	804b274 <_printf_i+0x28>
 804b286:	a101      	add	r1, pc, #4	@ (adr r1, 804b28c <_printf_i+0x40>)
 804b288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 804b28c:	0804b2e5 	.word	0x0804b2e5
 804b290:	0804b2f9 	.word	0x0804b2f9
 804b294:	0804b275 	.word	0x0804b275
 804b298:	0804b275 	.word	0x0804b275
 804b29c:	0804b275 	.word	0x0804b275
 804b2a0:	0804b275 	.word	0x0804b275
 804b2a4:	0804b2f9 	.word	0x0804b2f9
 804b2a8:	0804b275 	.word	0x0804b275
 804b2ac:	0804b275 	.word	0x0804b275
 804b2b0:	0804b275 	.word	0x0804b275
 804b2b4:	0804b275 	.word	0x0804b275
 804b2b8:	0804b3f7 	.word	0x0804b3f7
 804b2bc:	0804b323 	.word	0x0804b323
 804b2c0:	0804b3b1 	.word	0x0804b3b1
 804b2c4:	0804b275 	.word	0x0804b275
 804b2c8:	0804b275 	.word	0x0804b275
 804b2cc:	0804b419 	.word	0x0804b419
 804b2d0:	0804b275 	.word	0x0804b275
 804b2d4:	0804b323 	.word	0x0804b323
 804b2d8:	0804b275 	.word	0x0804b275
 804b2dc:	0804b275 	.word	0x0804b275
 804b2e0:	0804b3b9 	.word	0x0804b3b9
 804b2e4:	6833      	ldr	r3, [r6, #0]
 804b2e6:	1d1a      	adds	r2, r3, #4
 804b2e8:	681b      	ldr	r3, [r3, #0]
 804b2ea:	6032      	str	r2, [r6, #0]
 804b2ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 804b2f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 804b2f4:	2301      	movs	r3, #1
 804b2f6:	e09c      	b.n	804b432 <_printf_i+0x1e6>
 804b2f8:	6833      	ldr	r3, [r6, #0]
 804b2fa:	6820      	ldr	r0, [r4, #0]
 804b2fc:	1d19      	adds	r1, r3, #4
 804b2fe:	6031      	str	r1, [r6, #0]
 804b300:	0606      	lsls	r6, r0, #24
 804b302:	d501      	bpl.n	804b308 <_printf_i+0xbc>
 804b304:	681d      	ldr	r5, [r3, #0]
 804b306:	e003      	b.n	804b310 <_printf_i+0xc4>
 804b308:	0645      	lsls	r5, r0, #25
 804b30a:	d5fb      	bpl.n	804b304 <_printf_i+0xb8>
 804b30c:	f9b3 5000 	ldrsh.w	r5, [r3]
 804b310:	2d00      	cmp	r5, #0
 804b312:	da03      	bge.n	804b31c <_printf_i+0xd0>
 804b314:	232d      	movs	r3, #45	@ 0x2d
 804b316:	426d      	negs	r5, r5
 804b318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 804b31c:	4858      	ldr	r0, [pc, #352]	@ (804b480 <_printf_i+0x234>)
 804b31e:	230a      	movs	r3, #10
 804b320:	e011      	b.n	804b346 <_printf_i+0xfa>
 804b322:	6821      	ldr	r1, [r4, #0]
 804b324:	6833      	ldr	r3, [r6, #0]
 804b326:	0608      	lsls	r0, r1, #24
 804b328:	f853 5b04 	ldr.w	r5, [r3], #4
 804b32c:	d402      	bmi.n	804b334 <_printf_i+0xe8>
 804b32e:	0649      	lsls	r1, r1, #25
 804b330:	bf48      	it	mi
 804b332:	b2ad      	uxthmi	r5, r5
 804b334:	2f6f      	cmp	r7, #111	@ 0x6f
 804b336:	4852      	ldr	r0, [pc, #328]	@ (804b480 <_printf_i+0x234>)
 804b338:	6033      	str	r3, [r6, #0]
 804b33a:	bf14      	ite	ne
 804b33c:	230a      	movne	r3, #10
 804b33e:	2308      	moveq	r3, #8
 804b340:	2100      	movs	r1, #0
 804b342:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 804b346:	6866      	ldr	r6, [r4, #4]
 804b348:	60a6      	str	r6, [r4, #8]
 804b34a:	2e00      	cmp	r6, #0
 804b34c:	db05      	blt.n	804b35a <_printf_i+0x10e>
 804b34e:	6821      	ldr	r1, [r4, #0]
 804b350:	432e      	orrs	r6, r5
 804b352:	f021 0104 	bic.w	r1, r1, #4
 804b356:	6021      	str	r1, [r4, #0]
 804b358:	d04b      	beq.n	804b3f2 <_printf_i+0x1a6>
 804b35a:	4616      	mov	r6, r2
 804b35c:	fbb5 f1f3 	udiv	r1, r5, r3
 804b360:	fb03 5711 	mls	r7, r3, r1, r5
 804b364:	5dc7      	ldrb	r7, [r0, r7]
 804b366:	f806 7d01 	strb.w	r7, [r6, #-1]!
 804b36a:	462f      	mov	r7, r5
 804b36c:	42bb      	cmp	r3, r7
 804b36e:	460d      	mov	r5, r1
 804b370:	d9f4      	bls.n	804b35c <_printf_i+0x110>
 804b372:	2b08      	cmp	r3, #8
 804b374:	d10b      	bne.n	804b38e <_printf_i+0x142>
 804b376:	6823      	ldr	r3, [r4, #0]
 804b378:	07df      	lsls	r7, r3, #31
 804b37a:	d508      	bpl.n	804b38e <_printf_i+0x142>
 804b37c:	6923      	ldr	r3, [r4, #16]
 804b37e:	6861      	ldr	r1, [r4, #4]
 804b380:	4299      	cmp	r1, r3
 804b382:	bfde      	ittt	le
 804b384:	2330      	movle	r3, #48	@ 0x30
 804b386:	f806 3c01 	strble.w	r3, [r6, #-1]
 804b38a:	f106 36ff 	addle.w	r6, r6, #4294967295
 804b38e:	1b92      	subs	r2, r2, r6
 804b390:	6122      	str	r2, [r4, #16]
 804b392:	f8cd a000 	str.w	sl, [sp]
 804b396:	464b      	mov	r3, r9
 804b398:	aa03      	add	r2, sp, #12
 804b39a:	4621      	mov	r1, r4
 804b39c:	4640      	mov	r0, r8
 804b39e:	f7ff fee7 	bl	804b170 <_printf_common>
 804b3a2:	3001      	adds	r0, #1
 804b3a4:	d14a      	bne.n	804b43c <_printf_i+0x1f0>
 804b3a6:	f04f 30ff 	mov.w	r0, #4294967295
 804b3aa:	b004      	add	sp, #16
 804b3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804b3b0:	6823      	ldr	r3, [r4, #0]
 804b3b2:	f043 0320 	orr.w	r3, r3, #32
 804b3b6:	6023      	str	r3, [r4, #0]
 804b3b8:	4832      	ldr	r0, [pc, #200]	@ (804b484 <_printf_i+0x238>)
 804b3ba:	2778      	movs	r7, #120	@ 0x78
 804b3bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 804b3c0:	6823      	ldr	r3, [r4, #0]
 804b3c2:	6831      	ldr	r1, [r6, #0]
 804b3c4:	061f      	lsls	r7, r3, #24
 804b3c6:	f851 5b04 	ldr.w	r5, [r1], #4
 804b3ca:	d402      	bmi.n	804b3d2 <_printf_i+0x186>
 804b3cc:	065f      	lsls	r7, r3, #25
 804b3ce:	bf48      	it	mi
 804b3d0:	b2ad      	uxthmi	r5, r5
 804b3d2:	6031      	str	r1, [r6, #0]
 804b3d4:	07d9      	lsls	r1, r3, #31
 804b3d6:	bf44      	itt	mi
 804b3d8:	f043 0320 	orrmi.w	r3, r3, #32
 804b3dc:	6023      	strmi	r3, [r4, #0]
 804b3de:	b11d      	cbz	r5, 804b3e8 <_printf_i+0x19c>
 804b3e0:	2310      	movs	r3, #16
 804b3e2:	e7ad      	b.n	804b340 <_printf_i+0xf4>
 804b3e4:	4826      	ldr	r0, [pc, #152]	@ (804b480 <_printf_i+0x234>)
 804b3e6:	e7e9      	b.n	804b3bc <_printf_i+0x170>
 804b3e8:	6823      	ldr	r3, [r4, #0]
 804b3ea:	f023 0320 	bic.w	r3, r3, #32
 804b3ee:	6023      	str	r3, [r4, #0]
 804b3f0:	e7f6      	b.n	804b3e0 <_printf_i+0x194>
 804b3f2:	4616      	mov	r6, r2
 804b3f4:	e7bd      	b.n	804b372 <_printf_i+0x126>
 804b3f6:	6833      	ldr	r3, [r6, #0]
 804b3f8:	6825      	ldr	r5, [r4, #0]
 804b3fa:	6961      	ldr	r1, [r4, #20]
 804b3fc:	1d18      	adds	r0, r3, #4
 804b3fe:	6030      	str	r0, [r6, #0]
 804b400:	062e      	lsls	r6, r5, #24
 804b402:	681b      	ldr	r3, [r3, #0]
 804b404:	d501      	bpl.n	804b40a <_printf_i+0x1be>
 804b406:	6019      	str	r1, [r3, #0]
 804b408:	e002      	b.n	804b410 <_printf_i+0x1c4>
 804b40a:	0668      	lsls	r0, r5, #25
 804b40c:	d5fb      	bpl.n	804b406 <_printf_i+0x1ba>
 804b40e:	8019      	strh	r1, [r3, #0]
 804b410:	2300      	movs	r3, #0
 804b412:	6123      	str	r3, [r4, #16]
 804b414:	4616      	mov	r6, r2
 804b416:	e7bc      	b.n	804b392 <_printf_i+0x146>
 804b418:	6833      	ldr	r3, [r6, #0]
 804b41a:	1d1a      	adds	r2, r3, #4
 804b41c:	6032      	str	r2, [r6, #0]
 804b41e:	681e      	ldr	r6, [r3, #0]
 804b420:	6862      	ldr	r2, [r4, #4]
 804b422:	2100      	movs	r1, #0
 804b424:	4630      	mov	r0, r6
 804b426:	f7f4 ff5b 	bl	80402e0 <memchr>
 804b42a:	b108      	cbz	r0, 804b430 <_printf_i+0x1e4>
 804b42c:	1b80      	subs	r0, r0, r6
 804b42e:	6060      	str	r0, [r4, #4]
 804b430:	6863      	ldr	r3, [r4, #4]
 804b432:	6123      	str	r3, [r4, #16]
 804b434:	2300      	movs	r3, #0
 804b436:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 804b43a:	e7aa      	b.n	804b392 <_printf_i+0x146>
 804b43c:	6923      	ldr	r3, [r4, #16]
 804b43e:	4632      	mov	r2, r6
 804b440:	4649      	mov	r1, r9
 804b442:	4640      	mov	r0, r8
 804b444:	47d0      	blx	sl
 804b446:	3001      	adds	r0, #1
 804b448:	d0ad      	beq.n	804b3a6 <_printf_i+0x15a>
 804b44a:	6823      	ldr	r3, [r4, #0]
 804b44c:	079b      	lsls	r3, r3, #30
 804b44e:	d413      	bmi.n	804b478 <_printf_i+0x22c>
 804b450:	68e0      	ldr	r0, [r4, #12]
 804b452:	9b03      	ldr	r3, [sp, #12]
 804b454:	4298      	cmp	r0, r3
 804b456:	bfb8      	it	lt
 804b458:	4618      	movlt	r0, r3
 804b45a:	e7a6      	b.n	804b3aa <_printf_i+0x15e>
 804b45c:	2301      	movs	r3, #1
 804b45e:	4632      	mov	r2, r6
 804b460:	4649      	mov	r1, r9
 804b462:	4640      	mov	r0, r8
 804b464:	47d0      	blx	sl
 804b466:	3001      	adds	r0, #1
 804b468:	d09d      	beq.n	804b3a6 <_printf_i+0x15a>
 804b46a:	3501      	adds	r5, #1
 804b46c:	68e3      	ldr	r3, [r4, #12]
 804b46e:	9903      	ldr	r1, [sp, #12]
 804b470:	1a5b      	subs	r3, r3, r1
 804b472:	42ab      	cmp	r3, r5
 804b474:	dcf2      	bgt.n	804b45c <_printf_i+0x210>
 804b476:	e7eb      	b.n	804b450 <_printf_i+0x204>
 804b478:	2500      	movs	r5, #0
 804b47a:	f104 0619 	add.w	r6, r4, #25
 804b47e:	e7f5      	b.n	804b46c <_printf_i+0x220>
 804b480:	0804b911 	.word	0x0804b911
 804b484:	0804b922 	.word	0x0804b922

0804b488 <__sflush_r>:
 804b488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 804b48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804b490:	0716      	lsls	r6, r2, #28
 804b492:	4605      	mov	r5, r0
 804b494:	460c      	mov	r4, r1
 804b496:	d454      	bmi.n	804b542 <__sflush_r+0xba>
 804b498:	684b      	ldr	r3, [r1, #4]
 804b49a:	2b00      	cmp	r3, #0
 804b49c:	dc02      	bgt.n	804b4a4 <__sflush_r+0x1c>
 804b49e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 804b4a0:	2b00      	cmp	r3, #0
 804b4a2:	dd48      	ble.n	804b536 <__sflush_r+0xae>
 804b4a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 804b4a6:	2e00      	cmp	r6, #0
 804b4a8:	d045      	beq.n	804b536 <__sflush_r+0xae>
 804b4aa:	2300      	movs	r3, #0
 804b4ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 804b4b0:	682f      	ldr	r7, [r5, #0]
 804b4b2:	6a21      	ldr	r1, [r4, #32]
 804b4b4:	602b      	str	r3, [r5, #0]
 804b4b6:	d030      	beq.n	804b51a <__sflush_r+0x92>
 804b4b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 804b4ba:	89a3      	ldrh	r3, [r4, #12]
 804b4bc:	0759      	lsls	r1, r3, #29
 804b4be:	d505      	bpl.n	804b4cc <__sflush_r+0x44>
 804b4c0:	6863      	ldr	r3, [r4, #4]
 804b4c2:	1ad2      	subs	r2, r2, r3
 804b4c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 804b4c6:	b10b      	cbz	r3, 804b4cc <__sflush_r+0x44>
 804b4c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 804b4ca:	1ad2      	subs	r2, r2, r3
 804b4cc:	2300      	movs	r3, #0
 804b4ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 804b4d0:	6a21      	ldr	r1, [r4, #32]
 804b4d2:	4628      	mov	r0, r5
 804b4d4:	47b0      	blx	r6
 804b4d6:	1c43      	adds	r3, r0, #1
 804b4d8:	89a3      	ldrh	r3, [r4, #12]
 804b4da:	d106      	bne.n	804b4ea <__sflush_r+0x62>
 804b4dc:	6829      	ldr	r1, [r5, #0]
 804b4de:	291d      	cmp	r1, #29
 804b4e0:	d82b      	bhi.n	804b53a <__sflush_r+0xb2>
 804b4e2:	4a2a      	ldr	r2, [pc, #168]	@ (804b58c <__sflush_r+0x104>)
 804b4e4:	40ca      	lsrs	r2, r1
 804b4e6:	07d6      	lsls	r6, r2, #31
 804b4e8:	d527      	bpl.n	804b53a <__sflush_r+0xb2>
 804b4ea:	2200      	movs	r2, #0
 804b4ec:	6062      	str	r2, [r4, #4]
 804b4ee:	04d9      	lsls	r1, r3, #19
 804b4f0:	6922      	ldr	r2, [r4, #16]
 804b4f2:	6022      	str	r2, [r4, #0]
 804b4f4:	d504      	bpl.n	804b500 <__sflush_r+0x78>
 804b4f6:	1c42      	adds	r2, r0, #1
 804b4f8:	d101      	bne.n	804b4fe <__sflush_r+0x76>
 804b4fa:	682b      	ldr	r3, [r5, #0]
 804b4fc:	b903      	cbnz	r3, 804b500 <__sflush_r+0x78>
 804b4fe:	6560      	str	r0, [r4, #84]	@ 0x54
 804b500:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 804b502:	602f      	str	r7, [r5, #0]
 804b504:	b1b9      	cbz	r1, 804b536 <__sflush_r+0xae>
 804b506:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 804b50a:	4299      	cmp	r1, r3
 804b50c:	d002      	beq.n	804b514 <__sflush_r+0x8c>
 804b50e:	4628      	mov	r0, r5
 804b510:	f7ff fbf4 	bl	804acfc <_free_r>
 804b514:	2300      	movs	r3, #0
 804b516:	6363      	str	r3, [r4, #52]	@ 0x34
 804b518:	e00d      	b.n	804b536 <__sflush_r+0xae>
 804b51a:	2301      	movs	r3, #1
 804b51c:	4628      	mov	r0, r5
 804b51e:	47b0      	blx	r6
 804b520:	4602      	mov	r2, r0
 804b522:	1c50      	adds	r0, r2, #1
 804b524:	d1c9      	bne.n	804b4ba <__sflush_r+0x32>
 804b526:	682b      	ldr	r3, [r5, #0]
 804b528:	2b00      	cmp	r3, #0
 804b52a:	d0c6      	beq.n	804b4ba <__sflush_r+0x32>
 804b52c:	2b1d      	cmp	r3, #29
 804b52e:	d001      	beq.n	804b534 <__sflush_r+0xac>
 804b530:	2b16      	cmp	r3, #22
 804b532:	d11e      	bne.n	804b572 <__sflush_r+0xea>
 804b534:	602f      	str	r7, [r5, #0]
 804b536:	2000      	movs	r0, #0
 804b538:	e022      	b.n	804b580 <__sflush_r+0xf8>
 804b53a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804b53e:	b21b      	sxth	r3, r3
 804b540:	e01b      	b.n	804b57a <__sflush_r+0xf2>
 804b542:	690f      	ldr	r7, [r1, #16]
 804b544:	2f00      	cmp	r7, #0
 804b546:	d0f6      	beq.n	804b536 <__sflush_r+0xae>
 804b548:	0793      	lsls	r3, r2, #30
 804b54a:	680e      	ldr	r6, [r1, #0]
 804b54c:	bf08      	it	eq
 804b54e:	694b      	ldreq	r3, [r1, #20]
 804b550:	600f      	str	r7, [r1, #0]
 804b552:	bf18      	it	ne
 804b554:	2300      	movne	r3, #0
 804b556:	eba6 0807 	sub.w	r8, r6, r7
 804b55a:	608b      	str	r3, [r1, #8]
 804b55c:	f1b8 0f00 	cmp.w	r8, #0
 804b560:	dde9      	ble.n	804b536 <__sflush_r+0xae>
 804b562:	6a21      	ldr	r1, [r4, #32]
 804b564:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 804b566:	4643      	mov	r3, r8
 804b568:	463a      	mov	r2, r7
 804b56a:	4628      	mov	r0, r5
 804b56c:	47b0      	blx	r6
 804b56e:	2800      	cmp	r0, #0
 804b570:	dc08      	bgt.n	804b584 <__sflush_r+0xfc>
 804b572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804b576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804b57a:	81a3      	strh	r3, [r4, #12]
 804b57c:	f04f 30ff 	mov.w	r0, #4294967295
 804b580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804b584:	4407      	add	r7, r0
 804b586:	eba8 0800 	sub.w	r8, r8, r0
 804b58a:	e7e7      	b.n	804b55c <__sflush_r+0xd4>
 804b58c:	20400001 	.word	0x20400001

0804b590 <_fflush_r>:
 804b590:	b538      	push	{r3, r4, r5, lr}
 804b592:	690b      	ldr	r3, [r1, #16]
 804b594:	4605      	mov	r5, r0
 804b596:	460c      	mov	r4, r1
 804b598:	b913      	cbnz	r3, 804b5a0 <_fflush_r+0x10>
 804b59a:	2500      	movs	r5, #0
 804b59c:	4628      	mov	r0, r5
 804b59e:	bd38      	pop	{r3, r4, r5, pc}
 804b5a0:	b118      	cbz	r0, 804b5aa <_fflush_r+0x1a>
 804b5a2:	6a03      	ldr	r3, [r0, #32]
 804b5a4:	b90b      	cbnz	r3, 804b5aa <_fflush_r+0x1a>
 804b5a6:	f7ff faa1 	bl	804aaec <__sinit>
 804b5aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804b5ae:	2b00      	cmp	r3, #0
 804b5b0:	d0f3      	beq.n	804b59a <_fflush_r+0xa>
 804b5b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 804b5b4:	07d0      	lsls	r0, r2, #31
 804b5b6:	d404      	bmi.n	804b5c2 <_fflush_r+0x32>
 804b5b8:	0599      	lsls	r1, r3, #22
 804b5ba:	d402      	bmi.n	804b5c2 <_fflush_r+0x32>
 804b5bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 804b5be:	f7ff fb9a 	bl	804acf6 <__retarget_lock_acquire_recursive>
 804b5c2:	4628      	mov	r0, r5
 804b5c4:	4621      	mov	r1, r4
 804b5c6:	f7ff ff5f 	bl	804b488 <__sflush_r>
 804b5ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 804b5cc:	07da      	lsls	r2, r3, #31
 804b5ce:	4605      	mov	r5, r0
 804b5d0:	d4e4      	bmi.n	804b59c <_fflush_r+0xc>
 804b5d2:	89a3      	ldrh	r3, [r4, #12]
 804b5d4:	059b      	lsls	r3, r3, #22
 804b5d6:	d4e1      	bmi.n	804b59c <_fflush_r+0xc>
 804b5d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 804b5da:	f7ff fb8d 	bl	804acf8 <__retarget_lock_release_recursive>
 804b5de:	e7dd      	b.n	804b59c <_fflush_r+0xc>

0804b5e0 <__swbuf_r>:
 804b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804b5e2:	460e      	mov	r6, r1
 804b5e4:	4614      	mov	r4, r2
 804b5e6:	4605      	mov	r5, r0
 804b5e8:	b118      	cbz	r0, 804b5f2 <__swbuf_r+0x12>
 804b5ea:	6a03      	ldr	r3, [r0, #32]
 804b5ec:	b90b      	cbnz	r3, 804b5f2 <__swbuf_r+0x12>
 804b5ee:	f7ff fa7d 	bl	804aaec <__sinit>
 804b5f2:	69a3      	ldr	r3, [r4, #24]
 804b5f4:	60a3      	str	r3, [r4, #8]
 804b5f6:	89a3      	ldrh	r3, [r4, #12]
 804b5f8:	071a      	lsls	r2, r3, #28
 804b5fa:	d501      	bpl.n	804b600 <__swbuf_r+0x20>
 804b5fc:	6923      	ldr	r3, [r4, #16]
 804b5fe:	b943      	cbnz	r3, 804b612 <__swbuf_r+0x32>
 804b600:	4621      	mov	r1, r4
 804b602:	4628      	mov	r0, r5
 804b604:	f000 f82a 	bl	804b65c <__swsetup_r>
 804b608:	b118      	cbz	r0, 804b612 <__swbuf_r+0x32>
 804b60a:	f04f 37ff 	mov.w	r7, #4294967295
 804b60e:	4638      	mov	r0, r7
 804b610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804b612:	6823      	ldr	r3, [r4, #0]
 804b614:	6922      	ldr	r2, [r4, #16]
 804b616:	1a98      	subs	r0, r3, r2
 804b618:	6963      	ldr	r3, [r4, #20]
 804b61a:	b2f6      	uxtb	r6, r6
 804b61c:	4283      	cmp	r3, r0
 804b61e:	4637      	mov	r7, r6
 804b620:	dc05      	bgt.n	804b62e <__swbuf_r+0x4e>
 804b622:	4621      	mov	r1, r4
 804b624:	4628      	mov	r0, r5
 804b626:	f7ff ffb3 	bl	804b590 <_fflush_r>
 804b62a:	2800      	cmp	r0, #0
 804b62c:	d1ed      	bne.n	804b60a <__swbuf_r+0x2a>
 804b62e:	68a3      	ldr	r3, [r4, #8]
 804b630:	3b01      	subs	r3, #1
 804b632:	60a3      	str	r3, [r4, #8]
 804b634:	6823      	ldr	r3, [r4, #0]
 804b636:	1c5a      	adds	r2, r3, #1
 804b638:	6022      	str	r2, [r4, #0]
 804b63a:	701e      	strb	r6, [r3, #0]
 804b63c:	6962      	ldr	r2, [r4, #20]
 804b63e:	1c43      	adds	r3, r0, #1
 804b640:	429a      	cmp	r2, r3
 804b642:	d004      	beq.n	804b64e <__swbuf_r+0x6e>
 804b644:	89a3      	ldrh	r3, [r4, #12]
 804b646:	07db      	lsls	r3, r3, #31
 804b648:	d5e1      	bpl.n	804b60e <__swbuf_r+0x2e>
 804b64a:	2e0a      	cmp	r6, #10
 804b64c:	d1df      	bne.n	804b60e <__swbuf_r+0x2e>
 804b64e:	4621      	mov	r1, r4
 804b650:	4628      	mov	r0, r5
 804b652:	f7ff ff9d 	bl	804b590 <_fflush_r>
 804b656:	2800      	cmp	r0, #0
 804b658:	d0d9      	beq.n	804b60e <__swbuf_r+0x2e>
 804b65a:	e7d6      	b.n	804b60a <__swbuf_r+0x2a>

0804b65c <__swsetup_r>:
 804b65c:	b538      	push	{r3, r4, r5, lr}
 804b65e:	4b29      	ldr	r3, [pc, #164]	@ (804b704 <__swsetup_r+0xa8>)
 804b660:	4605      	mov	r5, r0
 804b662:	6818      	ldr	r0, [r3, #0]
 804b664:	460c      	mov	r4, r1
 804b666:	b118      	cbz	r0, 804b670 <__swsetup_r+0x14>
 804b668:	6a03      	ldr	r3, [r0, #32]
 804b66a:	b90b      	cbnz	r3, 804b670 <__swsetup_r+0x14>
 804b66c:	f7ff fa3e 	bl	804aaec <__sinit>
 804b670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804b674:	0719      	lsls	r1, r3, #28
 804b676:	d422      	bmi.n	804b6be <__swsetup_r+0x62>
 804b678:	06da      	lsls	r2, r3, #27
 804b67a:	d407      	bmi.n	804b68c <__swsetup_r+0x30>
 804b67c:	2209      	movs	r2, #9
 804b67e:	602a      	str	r2, [r5, #0]
 804b680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804b684:	81a3      	strh	r3, [r4, #12]
 804b686:	f04f 30ff 	mov.w	r0, #4294967295
 804b68a:	e033      	b.n	804b6f4 <__swsetup_r+0x98>
 804b68c:	0758      	lsls	r0, r3, #29
 804b68e:	d512      	bpl.n	804b6b6 <__swsetup_r+0x5a>
 804b690:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 804b692:	b141      	cbz	r1, 804b6a6 <__swsetup_r+0x4a>
 804b694:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 804b698:	4299      	cmp	r1, r3
 804b69a:	d002      	beq.n	804b6a2 <__swsetup_r+0x46>
 804b69c:	4628      	mov	r0, r5
 804b69e:	f7ff fb2d 	bl	804acfc <_free_r>
 804b6a2:	2300      	movs	r3, #0
 804b6a4:	6363      	str	r3, [r4, #52]	@ 0x34
 804b6a6:	89a3      	ldrh	r3, [r4, #12]
 804b6a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 804b6ac:	81a3      	strh	r3, [r4, #12]
 804b6ae:	2300      	movs	r3, #0
 804b6b0:	6063      	str	r3, [r4, #4]
 804b6b2:	6923      	ldr	r3, [r4, #16]
 804b6b4:	6023      	str	r3, [r4, #0]
 804b6b6:	89a3      	ldrh	r3, [r4, #12]
 804b6b8:	f043 0308 	orr.w	r3, r3, #8
 804b6bc:	81a3      	strh	r3, [r4, #12]
 804b6be:	6923      	ldr	r3, [r4, #16]
 804b6c0:	b94b      	cbnz	r3, 804b6d6 <__swsetup_r+0x7a>
 804b6c2:	89a3      	ldrh	r3, [r4, #12]
 804b6c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 804b6c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 804b6cc:	d003      	beq.n	804b6d6 <__swsetup_r+0x7a>
 804b6ce:	4621      	mov	r1, r4
 804b6d0:	4628      	mov	r0, r5
 804b6d2:	f000 f84f 	bl	804b774 <__smakebuf_r>
 804b6d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804b6da:	f013 0201 	ands.w	r2, r3, #1
 804b6de:	d00a      	beq.n	804b6f6 <__swsetup_r+0x9a>
 804b6e0:	2200      	movs	r2, #0
 804b6e2:	60a2      	str	r2, [r4, #8]
 804b6e4:	6962      	ldr	r2, [r4, #20]
 804b6e6:	4252      	negs	r2, r2
 804b6e8:	61a2      	str	r2, [r4, #24]
 804b6ea:	6922      	ldr	r2, [r4, #16]
 804b6ec:	b942      	cbnz	r2, 804b700 <__swsetup_r+0xa4>
 804b6ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 804b6f2:	d1c5      	bne.n	804b680 <__swsetup_r+0x24>
 804b6f4:	bd38      	pop	{r3, r4, r5, pc}
 804b6f6:	0799      	lsls	r1, r3, #30
 804b6f8:	bf58      	it	pl
 804b6fa:	6962      	ldrpl	r2, [r4, #20]
 804b6fc:	60a2      	str	r2, [r4, #8]
 804b6fe:	e7f4      	b.n	804b6ea <__swsetup_r+0x8e>
 804b700:	2000      	movs	r0, #0
 804b702:	e7f7      	b.n	804b6f4 <__swsetup_r+0x98>
 804b704:	24000130 	.word	0x24000130

0804b708 <_sbrk_r>:
 804b708:	b538      	push	{r3, r4, r5, lr}
 804b70a:	4d06      	ldr	r5, [pc, #24]	@ (804b724 <_sbrk_r+0x1c>)
 804b70c:	2300      	movs	r3, #0
 804b70e:	4604      	mov	r4, r0
 804b710:	4608      	mov	r0, r1
 804b712:	602b      	str	r3, [r5, #0]
 804b714:	f7f5 fbf8 	bl	8040f08 <_sbrk>
 804b718:	1c43      	adds	r3, r0, #1
 804b71a:	d102      	bne.n	804b722 <_sbrk_r+0x1a>
 804b71c:	682b      	ldr	r3, [r5, #0]
 804b71e:	b103      	cbz	r3, 804b722 <_sbrk_r+0x1a>
 804b720:	6023      	str	r3, [r4, #0]
 804b722:	bd38      	pop	{r3, r4, r5, pc}
 804b724:	24000d70 	.word	0x24000d70

0804b728 <__swhatbuf_r>:
 804b728:	b570      	push	{r4, r5, r6, lr}
 804b72a:	460c      	mov	r4, r1
 804b72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804b730:	2900      	cmp	r1, #0
 804b732:	b096      	sub	sp, #88	@ 0x58
 804b734:	4615      	mov	r5, r2
 804b736:	461e      	mov	r6, r3
 804b738:	da0d      	bge.n	804b756 <__swhatbuf_r+0x2e>
 804b73a:	89a3      	ldrh	r3, [r4, #12]
 804b73c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 804b740:	f04f 0100 	mov.w	r1, #0
 804b744:	bf14      	ite	ne
 804b746:	2340      	movne	r3, #64	@ 0x40
 804b748:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 804b74c:	2000      	movs	r0, #0
 804b74e:	6031      	str	r1, [r6, #0]
 804b750:	602b      	str	r3, [r5, #0]
 804b752:	b016      	add	sp, #88	@ 0x58
 804b754:	bd70      	pop	{r4, r5, r6, pc}
 804b756:	466a      	mov	r2, sp
 804b758:	f000 f848 	bl	804b7ec <_fstat_r>
 804b75c:	2800      	cmp	r0, #0
 804b75e:	dbec      	blt.n	804b73a <__swhatbuf_r+0x12>
 804b760:	9901      	ldr	r1, [sp, #4]
 804b762:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 804b766:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 804b76a:	4259      	negs	r1, r3
 804b76c:	4159      	adcs	r1, r3
 804b76e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 804b772:	e7eb      	b.n	804b74c <__swhatbuf_r+0x24>

0804b774 <__smakebuf_r>:
 804b774:	898b      	ldrh	r3, [r1, #12]
 804b776:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804b778:	079d      	lsls	r5, r3, #30
 804b77a:	4606      	mov	r6, r0
 804b77c:	460c      	mov	r4, r1
 804b77e:	d507      	bpl.n	804b790 <__smakebuf_r+0x1c>
 804b780:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 804b784:	6023      	str	r3, [r4, #0]
 804b786:	6123      	str	r3, [r4, #16]
 804b788:	2301      	movs	r3, #1
 804b78a:	6163      	str	r3, [r4, #20]
 804b78c:	b003      	add	sp, #12
 804b78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804b790:	ab01      	add	r3, sp, #4
 804b792:	466a      	mov	r2, sp
 804b794:	f7ff ffc8 	bl	804b728 <__swhatbuf_r>
 804b798:	9f00      	ldr	r7, [sp, #0]
 804b79a:	4605      	mov	r5, r0
 804b79c:	4639      	mov	r1, r7
 804b79e:	4630      	mov	r0, r6
 804b7a0:	f7ff fb18 	bl	804add4 <_malloc_r>
 804b7a4:	b948      	cbnz	r0, 804b7ba <__smakebuf_r+0x46>
 804b7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804b7aa:	059a      	lsls	r2, r3, #22
 804b7ac:	d4ee      	bmi.n	804b78c <__smakebuf_r+0x18>
 804b7ae:	f023 0303 	bic.w	r3, r3, #3
 804b7b2:	f043 0302 	orr.w	r3, r3, #2
 804b7b6:	81a3      	strh	r3, [r4, #12]
 804b7b8:	e7e2      	b.n	804b780 <__smakebuf_r+0xc>
 804b7ba:	89a3      	ldrh	r3, [r4, #12]
 804b7bc:	6020      	str	r0, [r4, #0]
 804b7be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 804b7c2:	81a3      	strh	r3, [r4, #12]
 804b7c4:	9b01      	ldr	r3, [sp, #4]
 804b7c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 804b7ca:	b15b      	cbz	r3, 804b7e4 <__smakebuf_r+0x70>
 804b7cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804b7d0:	4630      	mov	r0, r6
 804b7d2:	f000 f81d 	bl	804b810 <_isatty_r>
 804b7d6:	b128      	cbz	r0, 804b7e4 <__smakebuf_r+0x70>
 804b7d8:	89a3      	ldrh	r3, [r4, #12]
 804b7da:	f023 0303 	bic.w	r3, r3, #3
 804b7de:	f043 0301 	orr.w	r3, r3, #1
 804b7e2:	81a3      	strh	r3, [r4, #12]
 804b7e4:	89a3      	ldrh	r3, [r4, #12]
 804b7e6:	431d      	orrs	r5, r3
 804b7e8:	81a5      	strh	r5, [r4, #12]
 804b7ea:	e7cf      	b.n	804b78c <__smakebuf_r+0x18>

0804b7ec <_fstat_r>:
 804b7ec:	b538      	push	{r3, r4, r5, lr}
 804b7ee:	4d07      	ldr	r5, [pc, #28]	@ (804b80c <_fstat_r+0x20>)
 804b7f0:	2300      	movs	r3, #0
 804b7f2:	4604      	mov	r4, r0
 804b7f4:	4608      	mov	r0, r1
 804b7f6:	4611      	mov	r1, r2
 804b7f8:	602b      	str	r3, [r5, #0]
 804b7fa:	f7f5 fb5c 	bl	8040eb6 <_fstat>
 804b7fe:	1c43      	adds	r3, r0, #1
 804b800:	d102      	bne.n	804b808 <_fstat_r+0x1c>
 804b802:	682b      	ldr	r3, [r5, #0]
 804b804:	b103      	cbz	r3, 804b808 <_fstat_r+0x1c>
 804b806:	6023      	str	r3, [r4, #0]
 804b808:	bd38      	pop	{r3, r4, r5, pc}
 804b80a:	bf00      	nop
 804b80c:	24000d70 	.word	0x24000d70

0804b810 <_isatty_r>:
 804b810:	b538      	push	{r3, r4, r5, lr}
 804b812:	4d06      	ldr	r5, [pc, #24]	@ (804b82c <_isatty_r+0x1c>)
 804b814:	2300      	movs	r3, #0
 804b816:	4604      	mov	r4, r0
 804b818:	4608      	mov	r0, r1
 804b81a:	602b      	str	r3, [r5, #0]
 804b81c:	f7f5 fb5b 	bl	8040ed6 <_isatty>
 804b820:	1c43      	adds	r3, r0, #1
 804b822:	d102      	bne.n	804b82a <_isatty_r+0x1a>
 804b824:	682b      	ldr	r3, [r5, #0]
 804b826:	b103      	cbz	r3, 804b82a <_isatty_r+0x1a>
 804b828:	6023      	str	r3, [r4, #0]
 804b82a:	bd38      	pop	{r3, r4, r5, pc}
 804b82c:	24000d70 	.word	0x24000d70

0804b830 <_init>:
 804b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804b832:	bf00      	nop
 804b834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804b836:	bc08      	pop	{r3}
 804b838:	469e      	mov	lr, r3
 804b83a:	4770      	bx	lr

0804b83c <_fini>:
 804b83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804b83e:	bf00      	nop
 804b840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804b842:	bc08      	pop	{r3}
 804b844:	469e      	mov	lr, r3
 804b846:	4770      	bx	lr
